machine:
  services:
    - docker
    - postgresql
  environment:
    REPO: ../.go_workspace/src/sourcegraph.com/sourcegraph/sourcegraph
    PGUSER: ubuntu
    PGDATABASE: circle_test
    PGSSLMODE: disable
    PATH: $HOME/google-cloud-sdk/bin:$HOME/protobuf-3.0.0-beta-1/src:$PATH
    CLOUDSDK_CORE_DISABLE_PROMPTS: 1
    LONG_VERSION: $(printf %05d $CIRCLE_BUILD_NUM)_$(date +%Y-%m-%d)_${CIRCLE_SHA1:0:7}

    # Don't block on `git diff` invocations of `less`.
    GIT_PAGER:
  node:
    version: 4.1.0

dependencies:
  pre:
    # Use Go 1.6.
    - cd /usr/local && sudo rm -rf go && curl https://storage.googleapis.com/golang/go1.6.linux-amd64.tar.gz | sudo tar -xz && sudo chmod -R a+rwx /usr/local/go
    # Update git, curl, and libcurl ( both openssl and gnutls flavours ).
    - sudo apt-get update; sudo apt-get install --reinstall git curl libcurl3 libcurl3-gnutls
    # Tools for testing.
    - go get github.com/jstemmer/go-junit-report
    - go get github.com/wadey/gocovmerge

  cache_directories:
    - ~/google-cloud-sdk
    - ~/protobuf-3.0.0-beta-1

  override:
    - rm -rf $HOME/.go_workspace/src
    - mkdir -p $HOME/.go_workspace/src/sourcegraph.com/sourcegraph
    - cp -r $PWD $REPO

    - git --version
    - curl --version
    - curl-config --version

    - git config --global user.email "ci@example.com"
    - git config --global user.name "CI User"

    - if [ ! -d ~/google-cloud-sdk ]; then curl https://sdk.cloud.google.com | bash; fi
    - if [ ! -d ~/protobuf-3.0.0-beta-1 ]; then cd ~ && wget https://github.com/google/protobuf/archive/v3.0.0-beta-1.tar.gz && tar -xzf v3.0.0-beta-1.tar.gz && cd protobuf-3.0.0-beta-1 && ./autogen.sh && ./configure && make && cp src/.libs/lt-protoc src/protoc; fi

test:
  override:
    - mkdir -p $CIRCLE_TEST_REPORTS/junit:
        parallel: true
    - ./dev/circle-ci-run-tests.sh:
        pwd: $REPO
        parallel: true
    - make smoke:
        pwd: $REPO
  post:
    - ./dev/circle-ci-gather-coverage.sh:
        pwd: $REPO
    - npm run graph:
        pwd: $REPO/app
    - cp $REPO/app/artifacts/* $CIRCLE_ARTIFACTS

deployment:
  master-branch:
    branch: master
    commands:
      - ./circle-build-docker-image.sh $LONG_VERSION:
          pwd: $REPO
      - docker tag us.gcr.io/sourcegraph-dev/sourcegraph:$LONG_VERSION us.gcr.io/sourcegraph-dev/sourcegraph:latest
      - gcloud docker push us.gcr.io/sourcegraph-dev/sourcegraph:latest
      - curl http://deploy-bot.sourcegraph.com/set-branch-version -F "token=$DEPLOY_BOT_TOKEN" -F "branch=master" -F "version=$LONG_VERSION"
      - echo $LONG_VERSION | gsutil cp - gs://sourcegraph-metadata/latest-successful-build

  staging-branch:
    branch: [staging, staging2, staging3]
    commands:
      - ./circle-build-docker-image.sh $LONG_VERSION:
          pwd: $REPO
      - curl http://deploy-bot.sourcegraph.com/set-branch-version -F "token=$DEPLOY_BOT_TOKEN" -F "branch=$CIRCLE_BRANCH" -F "version=$LONG_VERSION"

  release-tag:
    tag: /[0-9]+\.[0-9]+\.[0-9]+/
    commands:
      - ./circle-build-docker-image.sh $CIRCLE_TAG:
          pwd: $REPO

      # push to Docker Hub
      - docker login -e $DOCKER_EMAIL -u $DOCKER_USER -p $DOCKER_PASSWORD
      - docker tag us.gcr.io/sourcegraph-dev/sourcegraph:$CIRCLE_TAG sourcegraph/sourcegraph:$CIRCLE_TAG
      - docker tag us.gcr.io/sourcegraph-dev/sourcegraph:$CIRCLE_TAG sourcegraph/sourcegraph:latest
      - docker push sourcegraph/sourcegraph:$CIRCLE_TAG
      - docker push sourcegraph/sourcegraph:latest
