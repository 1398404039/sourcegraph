## rename this file to .env to be picked up by docker-compose
## docker-compose must be run in the same directory as .env
## not needed to run on default configuration (which allows access to GitHub.com public repositories)

## GLOBAL VALUES ##

# publicly accessible URL to web app (e.g., what you type into your browser)
# SRC_APP_URL=http://localhost:3080
# The port on SRC_APP_URL. Duplicative, but no processing ability in docker files, so restate here.
# SRC_APP_PORT=3080



## LOCAL FILESYSTEM SETUP ##
# if you would like to run Sourcegraph on git repositories on your local filesystem, specify an absolute path to your local git repositories (this is the directory that contains all other git directories in your system, i.e. $GOPATH/src/github.com)
# GIT_PARENT_DIRECTORY=/Users/user/path/to/folder
# boilerplate, just uncomment out below, means your repositories will be accessible at ${SRC_APP_URL}/local/any_dirs/repo_folder
# ORIGIN_MAP=local/!local/%


## REMOTE GIT HOST SETUP ##
## HARDER TO SET UP THAN LOCAL FILESYSTEM, SO RECOMMENDED TO START WITH LOCAL FILESYSTEM ##

# specify how to map from a sourcegraph url to a remote repo url
# should take the form of <sourecgraph_repo_url_prefix>!<git_clone_address>%
# where ! is a separator between the mapping, and % is shorthand for everything that matches after the prefix
#
# i.e. companydomain.com/!git@companydomain.com:% is the mapping for GitHub Enterprise
# i.e. gitolite.internal.domain/!git@gitolite.internal.domain:% is the mapping for a self-hosted gitolite option
# ORIGIN_MAP=

# specify a folder with the approrpriate SSH keypair to clone from the remote host
# don't forget to include a known_hosts file, which can be generated like: ssh-keyscan github.com >> known_hosts
# SSH_KEYPAIR_FOLDER=~/.ssh
