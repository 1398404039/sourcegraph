// Code generated by go-bindata.
// sources:
// ../../../migrations/1501274533_add_comments.down.sql
// ../../../migrations/1501274533_add_comments.up.sql
// ../../../migrations/1503574972_extensions.down.sql
// ../../../migrations/1503574972_extensions.up.sql
// ../../../migrations/1503575261_repos.down.sql
// ../../../migrations/1503575261_repos.up.sql
// ../../../migrations/1503575588_global_deps.down.sql
// ../../../migrations/1503575588_global_deps.up.sql
// ../../../migrations/1503621752_add_fields_to_threads.down.sql
// ../../../migrations/1503621752_add_fields_to_threads.up.sql
// ../../../migrations/1503961087_add_default_timestamps.down.sql
// ../../../migrations/1503961087_add_default_timestamps.up.sql
// ../../../migrations/README.md
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __1501274533_add_commentsDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x50\x2a\xc9\x28\x4a\x4d\x4c\x29\x56\xb2\xe6\x42\x16\x4d\xce\xcf\xcd\x4d\xcd\x2b\x41\x17\xce\xc9\x4f\x4e\xcc\x89\x2f\x4a\x2d\xc8\x07\xc9\x00\x02\x00\x00\xff\xff\x11\x35\x7b\xe9\x47\x00\x00\x00")

func _1501274533_add_commentsDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1501274533_add_commentsDownSql,
		"1501274533_add_comments.down.sql",
	)
}

func _1501274533_add_commentsDownSql() (*asset, error) {
	bytes, err := _1501274533_add_commentsDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1501274533_add_comments.down.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1501274533_add_commentsUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x93\x51\x4f\x83\x30\x14\x85\x9f\xe9\xaf\xb8\xe9\x13\x24\xfc\x83\x3d\xa1\xd6\xd8\xb8\x95\x39\xba\xb8\xf9\x42\x6a\xb9\x6e\x8d\xd0\x2e\xa5\x33\xfe\x7c\xc3\x86\x0e\xc3\x1e\xf0\xc9\x47\x0e\xe7\x70\x0f\x5f\x7b\x6f\x57\x2c\x93\x0c\xd8\x46\x32\x51\xf0\x5c\x00\xbf\x07\x91\x4b\x60\x1b\x5e\xc8\x02\xb4\x09\xf8\x19\x66\x84\xf4\x3e\x99\xdd\xcc\x19\xd0\xb0\xf7\xa8\xaa\x96\x42\x4c\x22\x6a\x2a\x0a\xaf\x66\xd7\xa2\x37\xaa\x3e\x85\xc5\x7a\x3e\x87\xe5\x8a\x2f\xb2\xd5\x16\x1e\xd9\x36\x05\x12\xd1\xda\x69\x55\x97\x1e\x0f\xae\xec\x13\xc6\x86\x14\xe8\x9b\xa9\x91\x42\x37\x26\x25\x11\xf5\xf8\x61\x5a\xe3\x6c\xaf\x00\x6d\x83\xf2\xa1\xac\x8d\x45\x0a\xc6\x06\xdc\xa1\xef\x7c\x68\xab\xb1\x78\xf6\xea\xbd\xf2\x4a\x07\xf4\xa3\xc0\xf5\x37\xda\xa3\x0a\x58\x95\x2a\x50\x90\x7c\xc1\x0a\x99\x2d\x96\xf0\xcc\xe5\xc3\xe9\x11\x5e\x72\xc1\x48\x32\x62\xa0\x5d\xd3\xa0\x0d\xd3\x21\x90\xa8\xe7\x36\xfc\xff\x6e\xbe\xb3\xe1\xfc\xa1\x6f\x08\x53\x1a\x75\xbe\xe3\xa1\x9a\xe4\xab\xb0\xc6\x29\x3e\x75\x0c\x7b\xe7\x4b\xab\x1a\xfc\xe1\xdf\x6b\xd8\x28\x53\x9f\xc5\x2b\x2c\x2e\x67\xfb\x27\x1c\x1e\x1b\x17\xb0\x3c\x7a\x43\xfb\x9b\x76\x6a\xa1\x35\xb6\x6d\x19\xdc\x3b\xda\x7f\x67\xb2\x16\xfc\x69\xcd\x20\x1e\x76\xed\xa8\x0c\x3b\x26\x43\x22\x5c\xdc\xb1\x0d\xe4\x02\x06\x4c\xe2\x4b\x38\x99\x8d\x8c\xfd\x32\xc5\xbf\x16\x24\x85\x6e\x2f\x92\x19\xf9\x0a\x00\x00\xff\xff\x3f\x5c\x5c\x64\xa1\x03\x00\x00")

func _1501274533_add_commentsUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1501274533_add_commentsUpSql,
		"1501274533_add_comments.up.sql",
	)
}

func _1501274533_add_commentsUpSql() (*asset, error) {
	bytes, err := _1501274533_add_commentsUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1501274533_add_comments.up.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1503574972_extensionsDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\x55\xc8\xcb\x57\xc8\x4b\x4d\x4d\x51\x28\xc9\x57\x28\xcd\xcb\xc9\x4f\x4c\x51\x48\xad\x28\x49\xcd\x2b\xce\xcc\xcf\x2b\xe6\x02\x04\x00\x00\xff\xff\x15\xf6\x0f\xb7\x20\x00\x00\x00")

func _1503574972_extensionsDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1503574972_extensionsDownSql,
		"1503574972_extensions.down.sql",
	)
}

func _1503574972_extensionsDownSql() (*asset, error) {
	bytes, err := _1503574972_extensionsDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1503574972_extensions.down.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1503574972_extensionsUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x0e\x72\x75\x0c\x71\x55\x70\x8d\x08\x71\xf5\x0b\xf6\xf4\xf7\x53\xf0\x74\x53\xf0\xf3\x0f\x51\x70\x8d\xf0\x0c\x0e\x09\x56\x48\xce\x2c\x49\xad\x28\xb1\xe6\x22\xa0\x2c\xa3\xb8\x24\xbf\x28\x95\xa0\xb2\x82\xf4\xf8\x92\xa2\xf4\x5c\x6b\x2e\x40\x00\x00\x00\xff\xff\x62\x75\x8e\xc2\x76\x00\x00\x00")

func _1503574972_extensionsUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1503574972_extensionsUpSql,
		"1503574972_extensions.up.sql",
	)
}

func _1503574972_extensionsUpSql() (*asset, error) {
	bytes, err := _1503574972_extensionsUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1503574972_extensions.up.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1503575261_reposDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x50\x2a\x4a\x2d\xc8\x57\xb2\x06\x04\x00\x00\xff\xff\xee\x33\x4f\xdf\x12\x00\x00\x00")

func _1503575261_reposDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1503575261_reposDownSql,
		"1503575261_repos.down.sql",
	)
}

func _1503575261_reposDownSql() (*asset, error) {
	bytes, err := _1503575261_reposDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1503575261_repos.down.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1503575261_reposUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\xc1\x6e\xdb\x30\x0c\x86\xcf\xf5\x53\x10\x3a\xa5\xc0\xde\xa0\xa7\x6c\x33\x0a\x63\x99\xbb\xa5\x09\xb0\x9e\x04\x45\x66\x6c\xa2\xb6\xa4\x51\x92\xd3\xf5\xe9\x07\x29\x4d\x63\x77\x19\x90\x23\x3f\x7f\x24\x2d\xe9\xff\xb2\x2e\x97\x9b\x12\x36\xcb\xcf\xab\x12\x18\x9d\x85\x45\x71\x23\xa8\x11\xf0\x58\xae\xab\xe5\x0a\x7e\xac\xab\xef\xcb\xf5\x13\x7c\x2b\x9f\x3e\x15\x37\x22\x32\x09\xd0\x14\xf0\x25\xa4\xd2\x1e\x0c\xf2\x14\x18\x35\xe0\xb4\x6e\xd0\x6b\x26\x17\xc8\x1a\x01\x27\x38\x6a\x7f\x2c\xa0\x7e\xd8\x40\xbd\x5d\xad\x12\xed\x42\x70\x52\xf7\xd6\xa0\x8c\xdc\x9f\x6d\xef\xbb\x4b\xb8\xb3\x03\x3a\xd5\x7e\xa0\x0d\xee\x55\xec\x83\xdc\xb1\x32\xba\xbb\xb0\xa5\x57\xa6\x8d\xaa\xc5\x73\xcb\xae\xb7\xfa\x19\x1b\x01\x3b\x6b\x7b\x54\xe6\x38\xc6\x31\x6a\x15\x3e\xe0\xbd\xe5\xe7\x19\x18\x88\xd9\xf2\x0c\x39\xa6\x51\x05\x9c\x31\xcd\x98\x66\x49\x15\x04\x04\x1a\xd0\x07\x35\x38\x38\x50\xe8\x72\x09\xaf\xd6\x60\xbe\x5d\xd7\x5c\xe5\xb9\xe8\xbb\x2b\xb4\x51\x7b\xe9\xff\x18\x7d\x85\x4a\xa6\xc1\x17\x6c\x24\xe3\x48\x7e\xf6\x58\x7b\x46\x7c\x45\xf9\xaf\x30\x39\x9f\x65\x6a\xc9\xc8\x94\x1f\x99\xb2\xf3\x1e\x8f\x23\xf7\xc8\x23\x69\x14\x40\x26\x60\x8b\x3c\xf9\xa4\x1c\xc9\x9d\xf2\x93\x57\x2c\x6e\xef\x8a\xe2\x2d\x96\xdb\xba\xfa\xb9\x2d\xa1\xaa\xbf\x96\xbf\x40\xe4\xf1\x91\x49\x46\x43\xbf\x23\x0a\x78\xa8\x73\x64\x17\x91\xe9\xf6\xee\xd4\x33\x95\x8f\x69\x3c\x69\xa9\xca\x2b\xa4\x53\x21\x20\x1b\x69\x9d\xbf\xdc\x98\x73\x2d\x35\x9d\x9b\x33\xf9\xff\x96\x99\x9b\xc0\x65\x35\xfd\x7d\xe0\x76\x78\x77\x61\xfb\x58\xd5\xf7\x70\x5f\xd5\xb0\xe8\xed\x01\x39\x1f\x06\xd2\xd5\x24\xef\xed\x0f\xff\x06\x00\x00\xff\xff\xb0\x25\x6c\x26\xa6\x03\x00\x00")

func _1503575261_reposUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1503575261_reposUpSql,
		"1503575261_repos.up.sql",
	)
}

func _1503575261_reposUpSql() (*asset, error) {
	bytes, err := _1503575261_reposUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1503575261_repos.up.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1503575588_global_depsDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x50\x4a\xcf\xc9\x4f\x4a\xcc\x89\x4f\x49\x2d\x50\xb2\xe6\xc2\x2e\x11\x5f\x50\x94\x59\x96\x58\x92\x8a\xa6\xa0\x20\x3b\xbd\x58\xc9\x9a\x0b\x10\x00\x00\xff\xff\xaf\x74\x4e\x89\x4d\x00\x00\x00")

func _1503575588_global_depsDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1503575588_global_depsDownSql,
		"1503575588_global_deps.down.sql",
	)
}

func _1503575588_global_depsDownSql() (*asset, error) {
	bytes, err := _1503575588_global_depsDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1503575588_global_deps.down.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1503575588_global_depsUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x91\x4d\x6a\xc3\x30\x10\x85\xd7\xd1\x29\x06\xad\x1c\xe8\x0d\xb2\x2a\xad\x29\x81\xa0\x40\x9b\x40\x77\x42\x46\x83\xa2\xda\xc8\xc2\x9e\x16\x1f\xbf\xb8\x76\xfc\x2f\x41\xe9\xa6\x0b\xaf\xe4\x79\xf3\xcd\xfb\x9e\x5e\xd3\xc7\x4b\x0a\xa4\xb2\x02\x81\x9b\xa2\xcc\x54\x21\x35\x7a\x0e\x09\xdb\xf1\x42\x39\xf3\xa9\x0c\x72\x20\x6c\x08\xc4\xf9\x02\xe2\x7a\x3a\x3d\xb0\x1d\xd7\xe8\xa5\x56\xa4\x38\x7c\xd4\xa5\xcb\x66\x6f\x15\xfa\x52\x5a\xcd\xc1\x3a\x42\x83\xd5\xec\xf1\x66\x1d\xd5\xfd\x14\xdb\x1f\x58\x4f\x70\x14\xcf\xe9\xfb\x94\x40\x5a\xdd\x18\xeb\x38\x9c\xc5\x1c\xec\xfa\x76\x14\x2f\x60\xac\x83\x64\x49\x21\xbd\xa2\x9b\x2c\x7d\x1d\xcb\x1d\xe8\xb6\x83\x33\xaa\x10\x21\x19\x8e\x88\x45\x8d\xfd\xc4\xb3\x86\xff\xf6\x07\xc6\x42\x95\x4b\x5f\xd9\x2f\x45\xf8\x0f\xaa\xef\x49\x02\x0a\x46\xd0\xbf\xaa\xb8\xef\x09\x28\x59\x2e\xfa\x8d\x9a\x7b\x74\x48\x51\x28\x3b\xa2\xca\xe7\xa6\xee\xe4\x44\x5b\x8e\x98\xf3\xb9\x59\x4a\x5b\x7b\xf0\xb9\x91\xed\x67\x75\xd3\x41\x77\x7b\xa7\x5d\xff\xe4\xf0\x79\xcf\xeb\x36\xda\x90\x16\x66\x3b\x69\xeb\xe0\xf5\x7c\x7f\x69\x64\x7e\x22\xe3\x3b\x00\x00\xff\xff\x06\x03\xb4\x8c\x4d\x04\x00\x00")

func _1503575588_global_depsUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1503575588_global_depsUpSql,
		"1503575588_global_deps.up.sql",
	)
}

func _1503575588_global_depsUpSql() (*asset, error) {
	bytes, err := _1503575588_global_depsUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1503575588_global_deps.up.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1503621752_add_fields_to_threadsDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x28\xc9\x28\x4a\x4d\x4c\x29\x56\x70\x09\xf2\x0f\x50\x70\xf6\xf7\x09\xf5\xf5\x53\x50\x4a\x2c\x4a\xce\xc8\x2c\x4b\x4d\x89\x4f\x2c\x51\xb2\xe6\x22\xa8\xbc\xb4\x20\x25\xb1\x84\x68\xd5\x29\xa9\x39\xa9\x70\xd5\x80\x00\x00\x00\xff\xff\xa3\x2f\xf1\x70\x8b\x00\x00\x00")

func _1503621752_add_fields_to_threadsDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1503621752_add_fields_to_threadsDownSql,
		"1503621752_add_fields_to_threads.down.sql",
	)
}

func _1503621752_add_fields_to_threadsDownSql() (*asset, error) {
	bytes, err := _1503621752_add_fields_to_threadsDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1503621752_add_fields_to_threads.down.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1503621752_add_fields_to_threadsUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x28\xc9\x28\x4a\x4d\x4c\x29\x56\x70\x74\x71\x51\x70\xf6\xf7\x09\xf5\xf5\x53\x50\x4a\x2c\x4a\xce\xc8\x2c\x4b\x4d\x89\x4f\x2c\x51\x52\x08\xf1\xf4\x75\x0d\x0e\x71\xf4\x0d\x50\x08\xf7\x0c\xf1\x00\x73\x15\xa2\xfc\xfd\x5c\xad\xb9\x08\x19\x53\x5a\x90\x92\x58\x42\xb1\x29\x29\xa9\x39\xa9\x84\x4d\x01\x04\x00\x00\xff\xff\xef\xb6\x86\x87\xd3\x00\x00\x00")

func _1503621752_add_fields_to_threadsUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1503621752_add_fields_to_threadsUpSql,
		"1503621752_add_fields_to_threads.up.sql",
	)
}

func _1503621752_add_fields_to_threadsUpSql() (*asset, error) {
	bytes, err := _1503621752_add_fields_to_threadsUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1503621752_add_fields_to_threads.up.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1503961087_add_default_timestampsDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x28\xc9\x28\x4a\x4d\x4c\x29\xe6\x52\x50\x50\x50\x80\x88\x3b\xfb\xfb\x84\xfa\xfa\x29\x28\x25\x17\xa5\x26\x96\xa4\xa6\xc4\x27\x96\x28\x29\xb8\x04\xf9\x07\x28\xb8\xb8\xba\x39\x86\xfa\x84\xe8\x60\x51\x5b\x5a\x90\x82\x55\xad\x35\x17\x17\xb2\x65\xc9\xf9\xb9\xb9\xa9\x79\x25\x74\xb2\x2d\x27\x3f\x39\x31\x27\xbe\x28\xb5\x20\x9f\x76\x16\x02\x02\x00\x00\xff\xff\x04\xe9\x73\x90\x4b\x01\x00\x00")

func _1503961087_add_default_timestampsDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1503961087_add_default_timestampsDownSql,
		"1503961087_add_default_timestamps.down.sql",
	)
}

func _1503961087_add_default_timestampsDownSql() (*asset, error) {
	bytes, err := _1503961087_add_default_timestampsDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1503961087_add_default_timestamps.down.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1503961087_add_default_timestampsUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x28\xc9\x28\x4a\x4d\x4c\x29\xe6\x52\x50\x50\x50\x80\x88\x3b\xfb\xfb\x84\xfa\xfa\x29\x28\x25\x17\xa5\x26\x96\xa4\xa6\xc4\x27\x96\x28\x29\x04\xbb\x86\x28\xb8\xb8\xba\x39\x86\xfa\x84\x28\xe4\xe5\x97\x6b\x68\xea\x60\xd1\x50\x5a\x90\x82\x5b\x83\x35\x17\x17\xb2\xb5\xc9\xf9\xb9\xb9\xa9\x79\x25\x74\xb7\x37\x27\x3f\x39\x31\x27\xbe\x28\xb5\x20\x9f\x1e\x56\x03\x02\x00\x00\xff\xff\xb2\x33\xbf\xd5\x69\x01\x00\x00")

func _1503961087_add_default_timestampsUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1503961087_add_default_timestampsUpSql,
		"1503961087_add_default_timestamps.up.sql",
	)
}

func _1503961087_add_default_timestampsUpSql() (*asset, error) {
	bytes, err := _1503961087_add_default_timestampsUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1503961087_add_default_timestamps.up.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _readmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x54\x61\xaf\xdb\x44\x10\xfc\xee\x5f\x31\x6a\x90\x0a\x15\xb1\x79\x6a\x29\x22\xdf\x5e\x21\x48\x4f\x82\x16\xf5\x05\x81\x84\x50\xb3\xf6\x6d\xec\xab\xce\xb7\xee\xed\x3a\x51\xfe\x3d\x3a\xdb\x2f\x49\xa5\xc2\xb7\x64\xef\x66\x76\x66\x76\xcf\xbb\xce\x2b\x9c\x4f\xdc\x98\xa4\x33\x1a\x89\x46\x3e\x2a\x1c\x19\xd5\xa4\x8c\xde\xb7\x89\xcc\x4b\x54\x1c\x24\xc1\x3a\xc6\x21\x49\x34\x8e\x0e\xbf\x8b\x5a\x9b\x58\xf1\xf3\x9b\xb2\x28\x56\x2b\xfc\xa1\xd4\x32\x8a\xe2\xb7\x2b\x88\x12\xa3\xa3\xe8\x02\x3b\xd4\xe7\x09\xff\xf7\xcc\xc9\xff\x7c\xdd\x99\x0d\xba\xa9\xaa\xd6\x5b\x37\xd6\x65\x23\x7d\xd5\x93\x19\x6b\xb5\x5c\xa9\x2c\x31\x57\x3d\xa9\x71\xaa\x9a\xe0\x57\x3e\xaa\x51\x08\x13\xf9\x37\x30\x91\x50\xe2\x61\xae\x4d\xdc\xb9\x02\x13\xd0\x30\x84\x33\x28\x3a\xa4\x31\xde\x98\x28\x8b\x62\xbf\xdf\x17\x5f\xa1\x15\xb4\x6c\x58\x8f\x58\x3b\xfc\x77\xff\x26\xf8\xdb\xd3\xe0\xeb\x6a\xf8\x34\xc3\xeb\xd1\x07\x87\xb5\x51\xab\x78\x3e\x2c\x51\x3c\xc7\x5a\x50\x8d\x9a\xaa\x20\x0d\x85\xaa\xf6\xf1\x89\xeb\xff\xbb\x4c\xb2\x8a\x55\x0e\x71\x70\xf9\xf6\x65\x02\x26\x08\x64\xac\x86\x23\x27\xf5\x12\x51\x14\xef\xc7\x38\x8f\x42\x42\x90\x93\x8f\x6d\x1e\x4a\x3f\x95\x86\x24\x1f\xb9\x31\x24\x11\xbb\x49\x62\xc9\x67\x61\xba\x06\xb2\x99\x1a\x97\x95\xe3\xe3\x93\x9c\x0f\xae\x2e\xb5\xbb\x0a\xba\x77\x0e\x84\xc8\xa7\x2b\xec\x0b\x0a\xbe\xc5\xc9\x5b\x37\xd7\x7c\x52\x03\xa5\x76\xec\x39\x1a\x6a\xce\x02\x09\x8e\xb5\x49\x7e\x30\x7f\x64\x44\xea\xf9\xb2\x50\x17\xda\x4d\x71\xa3\x86\x9c\xfb\x70\x39\x29\xb5\xc3\xb3\xcb\xbf\x09\xfe\x6c\x56\xb8\xeb\x38\x31\x4e\x3e\x04\xd4\x8c\x71\xa8\x9c\x9c\x22\xf6\xa5\x7e\x0a\xfb\x2b\x33\x0e\x3e\xb0\xa2\x49\x4c\xc6\x0e\x3e\x8b\xbf\xdd\xfc\xb2\x28\x5e\xbc\x7d\xb7\xdb\x6e\x5e\xdc\x6e\x7c\x64\x76\x39\xc3\x9a\xe1\x1d\xf7\x83\x58\xf6\x33\xf9\x4c\xac\x43\x8e\xd9\x64\xb1\x1c\x29\x40\x9b\x8e\x7b\x9a\x7c\x45\x39\x95\xf0\x25\x97\x18\x12\x1f\x38\xe5\x8b\xa3\x32\xf6\x3f\xbd\xdf\xde\xef\xb6\xd8\xdd\xbf\xf9\x75\x8b\x87\x5f\xf0\xf6\xdd\x0e\xdb\xbf\x1e\x1e\x77\x8f\x7b\xa8\x91\x71\xce\x4c\x21\x47\x4e\xf8\x38\xaa\x7d\x8e\xd8\x97\x98\x9e\xac\x57\xa8\xdc\x4a\x6d\x28\x2e\xa3\x6e\x02\x53\x0c\xe7\x99\x61\x9e\xdb\x75\x97\x3a\x32\x74\xa4\xa0\x90\x98\xdc\xf9\x12\x48\xf6\xe0\xa3\x37\x9f\x5d\xb0\x41\x0e\x30\xaa\x03\x6b\x89\x3f\x97\x74\xf3\x43\xf2\xd1\x04\x5e\x75\x64\x85\x3f\x80\x6e\x02\xee\xe5\xc8\x0a\x49\xa0\x60\x9c\x74\x81\x67\x95\xb6\x08\xa6\x38\x43\x67\x15\x4f\x13\x23\xe7\x12\xab\xb2\x2b\xf1\xc8\x8c\x2f\x7c\x12\x54\xc6\xd4\x70\x9b\x68\xe8\x3e\xfb\x3d\x8c\x21\x54\xaf\x5f\xfd\xf0\xfd\x6a\xa2\x6d\xa4\xcf\xd1\xad\x5f\xde\xfd\x78\xf7\xfa\xd5\xcb\xef\xee\x8a\x7f\x03\x00\x00\xff\xff\x71\xf3\x54\x9e\xdd\x04\x00\x00")

func readmeMdBytes() ([]byte, error) {
	return bindataRead(
		_readmeMd,
		"README.md",
	)
}

func readmeMd() (*asset, error) {
	bytes, err := readmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "README.md", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"1501274533_add_comments.down.sql":           _1501274533_add_commentsDownSql,
	"1501274533_add_comments.up.sql":             _1501274533_add_commentsUpSql,
	"1503574972_extensions.down.sql":             _1503574972_extensionsDownSql,
	"1503574972_extensions.up.sql":               _1503574972_extensionsUpSql,
	"1503575261_repos.down.sql":                  _1503575261_reposDownSql,
	"1503575261_repos.up.sql":                    _1503575261_reposUpSql,
	"1503575588_global_deps.down.sql":            _1503575588_global_depsDownSql,
	"1503575588_global_deps.up.sql":              _1503575588_global_depsUpSql,
	"1503621752_add_fields_to_threads.down.sql":  _1503621752_add_fields_to_threadsDownSql,
	"1503621752_add_fields_to_threads.up.sql":    _1503621752_add_fields_to_threadsUpSql,
	"1503961087_add_default_timestamps.down.sql": _1503961087_add_default_timestampsDownSql,
	"1503961087_add_default_timestamps.up.sql":   _1503961087_add_default_timestampsUpSql,
	"README.md":                                  readmeMd,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"1501274533_add_comments.down.sql":           &bintree{_1501274533_add_commentsDownSql, map[string]*bintree{}},
	"1501274533_add_comments.up.sql":             &bintree{_1501274533_add_commentsUpSql, map[string]*bintree{}},
	"1503574972_extensions.down.sql":             &bintree{_1503574972_extensionsDownSql, map[string]*bintree{}},
	"1503574972_extensions.up.sql":               &bintree{_1503574972_extensionsUpSql, map[string]*bintree{}},
	"1503575261_repos.down.sql":                  &bintree{_1503575261_reposDownSql, map[string]*bintree{}},
	"1503575261_repos.up.sql":                    &bintree{_1503575261_reposUpSql, map[string]*bintree{}},
	"1503575588_global_deps.down.sql":            &bintree{_1503575588_global_depsDownSql, map[string]*bintree{}},
	"1503575588_global_deps.up.sql":              &bintree{_1503575588_global_depsUpSql, map[string]*bintree{}},
	"1503621752_add_fields_to_threads.down.sql":  &bintree{_1503621752_add_fields_to_threadsDownSql, map[string]*bintree{}},
	"1503621752_add_fields_to_threads.up.sql":    &bintree{_1503621752_add_fields_to_threadsUpSql, map[string]*bintree{}},
	"1503961087_add_default_timestamps.down.sql": &bintree{_1503961087_add_default_timestampsDownSql, map[string]*bintree{}},
	"1503961087_add_default_timestamps.up.sql":   &bintree{_1503961087_add_default_timestampsUpSql, map[string]*bintree{}},
	"README.md":                                  &bintree{readmeMd, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
