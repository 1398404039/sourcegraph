// GENERATED CODE - DO NOT EDIT!
// @generated
//
// Generated by:
//
//   go run gen_context_and_mock.go -o1 context.go -o2 mockstore/mockstores.go
//
// Called via:
//
//   go generate
//

package store

import (
	"context"
	srcstore "sourcegraph.com/sourcegraph/srclib/store"
)

// Stores has a field for each store interface.
type Stores struct {
	DefExamples  DefExamples
	Defs         Defs
	GlobalDeps   GlobalDeps
	GlobalRefs   GlobalRefs
	Graph        srcstore.MultiRepoStoreImporterIndexer
	Queue        Queue
	RepoConfigs  RepoConfigs
	RepoStatuses RepoStatuses
	RepoVCS      RepoVCS
	Repos        Repos
}

type contextKey int

const (
	_DefExamplesKey contextKey = iota
	_DefsKey
	_GlobalDepsKey
	_GlobalRefsKey
	_GraphKey
	_QueueKey
	_RepoConfigsKey
	_RepoStatusesKey
	_RepoVCSKey
	_ReposKey
)

// WithStores returns a copy of parent with the given stores. If a store's field value is nil, its previous value is inherited from parent in the new context.
func WithStores(ctx context.Context, s Stores) context.Context {
	if s.DefExamples != nil {
		ctx = WithDefExamples(ctx, s.DefExamples)
	}
	if s.Defs != nil {
		ctx = WithDefs(ctx, s.Defs)
	}
	if s.GlobalDeps != nil {
		ctx = WithGlobalDeps(ctx, s.GlobalDeps)
	}
	if s.GlobalRefs != nil {
		ctx = WithGlobalRefs(ctx, s.GlobalRefs)
	}
	if s.Graph != nil {
		ctx = WithGraph(ctx, s.Graph)
	}
	if s.Queue != nil {
		ctx = WithQueue(ctx, s.Queue)
	}
	if s.RepoConfigs != nil {
		ctx = WithRepoConfigs(ctx, s.RepoConfigs)
	}
	if s.RepoStatuses != nil {
		ctx = WithRepoStatuses(ctx, s.RepoStatuses)
	}
	if s.RepoVCS != nil {
		ctx = WithRepoVCS(ctx, s.RepoVCS)
	}
	if s.Repos != nil {
		ctx = WithRepos(ctx, s.Repos)
	}
	return ctx
}

// WithDefExamples returns a copy of parent with the given DefExamples store.
func WithDefExamples(parent context.Context, s DefExamples) context.Context {
	return context.WithValue(parent, _DefExamplesKey, s)
}

// DefExamplesFromContext gets the context's DefExamples store. If the store is not present, it panics.
func DefExamplesFromContext(ctx context.Context) DefExamples {
	s, ok := ctx.Value(_DefExamplesKey).(DefExamples)
	if !ok || s == nil {
		panic("no DefExamples set in context")
	}
	return s
}

// WithDefs returns a copy of parent with the given Defs store.
func WithDefs(parent context.Context, s Defs) context.Context {
	return context.WithValue(parent, _DefsKey, s)
}

// DefsFromContext gets the context's Defs store. If the store is not present, it panics.
func DefsFromContext(ctx context.Context) Defs {
	s, ok := ctx.Value(_DefsKey).(Defs)
	if !ok || s == nil {
		panic("no Defs set in context")
	}
	return s
}

// WithGlobalDeps returns a copy of parent with the given GlobalDeps store.
func WithGlobalDeps(parent context.Context, s GlobalDeps) context.Context {
	return context.WithValue(parent, _GlobalDepsKey, s)
}

// GlobalDepsFromContext gets the context's GlobalDeps store. If the store is not present, it panics.
func GlobalDepsFromContext(ctx context.Context) GlobalDeps {
	s, ok := ctx.Value(_GlobalDepsKey).(GlobalDeps)
	if !ok || s == nil {
		panic("no GlobalDeps set in context")
	}
	return s
}

// WithGlobalRefs returns a copy of parent with the given GlobalRefs store.
func WithGlobalRefs(parent context.Context, s GlobalRefs) context.Context {
	return context.WithValue(parent, _GlobalRefsKey, s)
}

// GlobalRefsFromContext gets the context's GlobalRefs store. If the store is not present, it panics.
func GlobalRefsFromContext(ctx context.Context) GlobalRefs {
	s, ok := ctx.Value(_GlobalRefsKey).(GlobalRefs)
	if !ok || s == nil {
		panic("no GlobalRefs set in context")
	}
	return s
}

// WithGraph returns a copy of parent with the given Graph store.
func WithGraph(parent context.Context, s srcstore.MultiRepoStoreImporterIndexer) context.Context {
	return context.WithValue(parent, _GraphKey, s)
}

// GraphFromContext gets the context's Graph store. If the store is not present, it panics.
func GraphFromContext(ctx context.Context) srcstore.MultiRepoStoreImporterIndexer {
	s, ok := ctx.Value(_GraphKey).(srcstore.MultiRepoStoreImporterIndexer)
	if !ok || s == nil {
		panic("no Graph set in context")
	}
	return s
}

// WithQueue returns a copy of parent with the given Queue store.
func WithQueue(parent context.Context, s Queue) context.Context {
	return context.WithValue(parent, _QueueKey, s)
}

// QueueFromContext gets the context's Queue store. If the store is not present, it panics.
func QueueFromContext(ctx context.Context) Queue {
	s, ok := ctx.Value(_QueueKey).(Queue)
	if !ok || s == nil {
		panic("no Queue set in context")
	}
	return s
}

// WithRepoConfigs returns a copy of parent with the given RepoConfigs store.
func WithRepoConfigs(parent context.Context, s RepoConfigs) context.Context {
	return context.WithValue(parent, _RepoConfigsKey, s)
}

// RepoConfigsFromContext gets the context's RepoConfigs store. If the store is not present, it panics.
func RepoConfigsFromContext(ctx context.Context) RepoConfigs {
	s, ok := ctx.Value(_RepoConfigsKey).(RepoConfigs)
	if !ok || s == nil {
		panic("no RepoConfigs set in context")
	}
	return s
}

// WithRepoStatuses returns a copy of parent with the given RepoStatuses store.
func WithRepoStatuses(parent context.Context, s RepoStatuses) context.Context {
	return context.WithValue(parent, _RepoStatusesKey, s)
}

// RepoStatusesFromContext gets the context's RepoStatuses store. If the store is not present, it panics.
func RepoStatusesFromContext(ctx context.Context) RepoStatuses {
	s, ok := ctx.Value(_RepoStatusesKey).(RepoStatuses)
	if !ok || s == nil {
		panic("no RepoStatuses set in context")
	}
	return s
}

// WithRepoVCS returns a copy of parent with the given RepoVCS store.
func WithRepoVCS(parent context.Context, s RepoVCS) context.Context {
	return context.WithValue(parent, _RepoVCSKey, s)
}

// RepoVCSFromContext gets the context's RepoVCS store. If the store is not present, it panics.
func RepoVCSFromContext(ctx context.Context) RepoVCS {
	s, ok := ctx.Value(_RepoVCSKey).(RepoVCS)
	if !ok || s == nil {
		panic("no RepoVCS set in context")
	}
	return s
}

// WithRepos returns a copy of parent with the given Repos store.
func WithRepos(parent context.Context, s Repos) context.Context {
	return context.WithValue(parent, _ReposKey, s)
}

// ReposFromContext gets the context's Repos store. If the store is not present, it panics.
func ReposFromContext(ctx context.Context) Repos {
	s, ok := ctx.Value(_ReposKey).(Repos)
	if !ok || s == nil {
		panic("no Repos set in context")
	}
	return s
}
