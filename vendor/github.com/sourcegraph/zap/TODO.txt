* use -m root instead of -m msg for the root commit msg in test cases
* find a way to detect when the zap client loses connection to the zap server

* add back text decorations in vscode

* add back 'zap client -wait' / clientConnected() callback


#

- Don't distinguish between "local" and "remote". The analogous distinction in git is non-bare worktree vs. bare repo. Just use those terms.

Non-bare worktree server sources:
  - git ref changes (via fsnotify): UNWATCH current ref, WATCH new ref
  - worktree changes (via fsnotify): ADVANCE snapshot, SEND to server
  - recv local client ops (via editor buffer changes): [ADVANCE snapshot, WRITE to disk,] SEND to server
  - recv remote server ops (via the server's other clients): ADVANCE snapshot, WRITE to disk

Bare repo server sources:
  - recv client ops: ADVANCE snapshot, SEND to other clients, ACK to sending client
  - git ref changes (via fsnotify): TODO: can handle in the future



--------------------------------------------------------------------------------

getRef:

- get existing, apply an op, broadcast it to all watchers
- get existing, move all watchers to a new ref
- get or create existing, maybe set up upstream, add conn as a watcher

some watchers are watching a ref indirectly (symbolic ref), like workspace HEAD


Alice is watching workspace /alice ref HEAD, which is a symbolic ref to ref refs/heads/mybranch, which has an upstream of (myrepo,refs/heads/mybranch,myserver)

# RecvFromUpstream an op from upstream (myrepo,refs/heads/mybranch,myserver):
1. Apply the op to all local refs that have that upstream refs/heads/mybranch
2. Notify each watcher of each local ref, plus all watchers of any symbolic refs that refer to it

# Record an op for workspace /alice ref HEAD
1. Dereference the symbolic ref to get refs/heads/mybranch
2. Record the op on that ref's OT handler
3. Broadcast the op to all watchers of refs/heads/mybranch, plus all watchers of any symbolic refs that refer to it

# Recv an op from a downstream client for (myrepo,refs/heads/mybranch)
1. RecvFromDownstream on that ref's OT handler
2. Broadcast the op to all watchers of refs/heads/mybranch, plus all watchers of any symbolic refs that refer to it

# Upstream resets a ref (myrepo,refs/heads/mybranch)
1. Recv the JSON-RPC request in upstream client
2. Update in our refdb for the upstream ref
3. Send reset to all watchers of refs/heads/mybranch, plus all watchers of any symbolic refs that refer to it

# Upstream deletes a ref (myrepo,refs/heads/mybranch)
1. Recv the JSON-RPC request in upstream client
2. Delete in our refdb for the upstream ref
3. Send delete to all watchers of refs/heads/mybranch, plus all watchers of any symbolic refs that refer to it








----------------


* Make tests reliably pass on macOS
* Reenable security in sourcegraph httpapi and backend Zap adapters
* in Handler, also respond to resetting the RefState







---------------------

git checkout -- . == zap reset
git checkout mybranch == zap checkout mybranch

zap checkout -b mybranch
zap merge foo

---------------------
