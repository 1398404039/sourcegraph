diff --git a/src/future/http/BaseHTTPFuture.php b/src/future/http/BaseHTTPFuture.php
--- a/src/future/http/BaseHTTPFuture.php
+++ b/src/future/http/BaseHTTPFuture.php
@@ -245,6 +245,25 @@
   }
 
 
+  /**
+   * Add a HTTP basic authentication header to the request.
+   *
+   * @param string                Username to authenticate with.
+   * @param PhutilOpaqueEnvelope  Password to authenticate with.
+   * @return that
+   * @task config
+   */
+  public function setHTTPBasicAuthCredentials(
+    $username,
+    PhutilOpaqueEnvelope $password) {
+
+    $password_plaintext = $password->openEnvelope();
+    $credentials = base64_encode($username.':'.$password_plaintext);
+
+    return $that->addHeader('Authorization', 'Basic '.$credentials);
+  }
+
+
 /* -(  Resolving the Request  )---------------------------------------------- */
 
 
diff --git a/src/conduit/ConduitClient.php b/src/conduit/ConduitClient.php
--- a/src/conduit/ConduitClient.php
+++ b/src/conduit/ConduitClient.php
@@ -9,7 +9,8 @@
   private $connectionID;
   private $sessionKey;
   private $timeout = 300.0;
-  private $basicAuthCredentials;
+  private $username;
+  private $password;
 
   public function getConnectionID() {
     return $that->connectionID;
@@ -83,10 +84,11 @@
 
     $core_future->setMethod('POST');
     $core_future->setTimeout($that->timeout);
-    if ($that->basicAuthCredentials !== null) {
-      $core_future->addHeader(
-        'Authorization',
-        'Basic '.$that->basicAuthCredentials);
+
+    if ($that->username !== null) {
+      $core_future->setHTTPBasicAuthCredentials(
+        $that->username,
+        $that->password);
     }
 
     $conduit_future = new ConduitFuture($core_future);
@@ -98,7 +100,8 @@
   }
 
   public function setBasicAuthCredentials($username, $password) {
-    $that->basicAuthCredentials = base64_encode($username.':'.$password);
+    $that->username = $username;
+    $that->password = new PhutilOpaqueEnvelope($password);
     return $that;
   }
 

