import * as React from "react";

import {media, style} from "glamor";

import {breakpoints} from "sourcegraph/components/utils/layout";
import {whitespace} from "sourcegraph/components/utils/whitespace";

interface Props {
	m?: number;
	mt?: number;
	mb?: number;
	ml?: number;
	mr?: number;
	my?: number;
	mx?: number;
	p?: number;
	pt?: number;
	pb?: number;
	pl?: number;
	pr?: number;
	py?: number;
	px?: number;
	role?: string;
	id?: string;
	children?: Array<JSX.Element>;
	className?: string;
	align?: "left" | "right";
	position?: "relative" | "absolute";
	style?: Object;
	hide?: "sm" | "md" | "lg" | "all" | "not-sm";
}

export function Base(props: Props): JSX.Element {
	const spacing: React.CSSProperties = {};

	if (props.mt) {
		spacing.marginTop = whitespace[props.mt];
	} else if (props.my) {
		spacing.marginTop = whitespace[props.my];
	} else if (props.m) {
		spacing.marginTop = whitespace[props.m];
	}

	if (props.mb) {
		spacing.marginBottom = whitespace[props.mb];
	} else if (props.my) {
		spacing.marginBottom = whitespace[props.my];
	} else if (props.m) {
		spacing.marginBottom = whitespace[props.m];
	}

	if (props.ml) {
		spacing.marginLeft = whitespace[props.ml];
	} else if (props.mx) {
		spacing.marginLeft = whitespace[props.mx];
	} else if (props.m) {
		spacing.marginLeft = whitespace[props.m];
	}

	if (props.mr) {
		spacing.marginRight = whitespace[props.mr];
	} else if (props.mx) {
		spacing.marginRight = whitespace[props.mx];
	} else if (props.m) {
		spacing.marginRight = whitespace[props.m];
	}

	if (props.pt) {
		spacing.paddingTop = whitespace[props.pt];
	} else if (props.py) {
		spacing.paddingTop = whitespace[props.py];
	} else if (props.p) {
		spacing.paddingTop = whitespace[props.p];
	}

	if (props.pb) {
		spacing.paddingBottom = whitespace[props.pb];
	} else if (props.py) {
		spacing.paddingBottom = whitespace[props.py];
	} else if (props.p) {
		spacing.paddingBottom = whitespace[props.p];
	}

	if (props.pl) {
		spacing.paddingLeft = whitespace[props.pl];
	} else if (props.px) {
		spacing.paddingLeft = whitespace[props.px];
	} else if (props.p) {
		spacing.paddingLeft = whitespace[props.p];
	}

	if (props.pr) {
		spacing.paddingRight = whitespace[props.pr];
	} else if (props.px) {
		spacing.paddingRight = whitespace[props.px];
	} else if (props.p) {
		spacing.paddingRight = whitespace[props.p];
	}

	const sx = Object.assign({},
		{
			float: props.align,
			position: props.position,
		},
		spacing,
		props.style,
	);

	// Only passdown CSS-related props generated by glamor
	const cssProps = Object.keys(props)
		.filter(k => k.match(/data-css-*/))
		.reduce((h, k) => {
			h[k] = props[k]; return h;
		}, {});

	return <div
		{...cssProps}
		{...media(breakpoints[props.hide ? props.hide : ""], { display: props.hide ? "none" : "" })}
		{...style(sx)}
		id={props.id}
		role={props.role}
		className={props.className}
		style={props.style}>
			{props.children}
		</div>;
}
