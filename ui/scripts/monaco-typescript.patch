diff --git a/ui/vendor/node_modules/monaco-typescript/lib/typescriptServices.js b/ui/vendor/node_modules/monaco-typescript/lib/typescriptServices.js
index 5a6e37b..8dfbe22 100644
--- a/ui/vendor/node_modules/monaco-typescript/lib/typescriptServices.js
+++ b/ui/vendor/node_modules/monaco-typescript/lib/typescriptServices.js
@@ -61634,5 +61634,5 @@ var toolsVersion = "2.0";
 /* tslint:enable:no-unused-variable */
 
 // MONACOCHANGE
-define([], function() { return ts; });
+
 // END MONACOCHANGE
diff --git a/ui/vendor/node_modules/monaco-typescript/src/mode.ts b/ui/vendor/node_modules/monaco-typescript/src/mode.ts
index 7fc3913..bc41ca7 100644
--- a/ui/vendor/node_modules/monaco-typescript/src/mode.ts
+++ b/ui/vendor/node_modules/monaco-typescript/src/mode.ts
@@ -69,6 +66,9 @@ function setupMode(defaults:LanguageServiceDefaultsImpl, modeId:string, language
 		return client.getLanguageServiceWorker(...[first].concat(more));
 	};
 
+	// HACK: We only want syntax highlighting. We'll do all the other
+	// work on the server.
+	/*
 	disposables.push(registerCompletionItemProvider(modeId, new languageFeatures.SuggestAdapter(worker)));
 	disposables.push(registerSignatureHelpProvider(modeId, new languageFeatures.SignatureHelpAdapter(worker)));
 	disposables.push(registerHoverProvider(modeId, new languageFeatures.QuickInfoAdapter(worker)));
@@ -76,6 +79,7 @@ function setupMode(defaults:LanguageServiceDefaultsImpl, modeId:string, language
 	disposables.push(registerDocumentRangeFormattingEditProvider(modeId, new languageFeatures.FormatAdapter(worker)));
 	disposables.push(registerOnTypeFormattingEditProvider(modeId, new languageFeatures.FormatOnTypeAdapter(worker)));
 	disposables.push(new languageFeatures.DiagnostcsAdapter(defaults, modeId, worker));
+	*/
 	disposables.push(setLanguageConfiguration(modeId, richEditConfiguration));
 	disposables.push(setTokensProvider(modeId, createTokenizationSupport(language)));
 
diff --git a/ui/vendor/node_modules/monaco-typescript/src/monaco.contribution.ts b/ui/vendor/node_modules/monaco-typescript/src/monaco.contribution.ts
index 126f56e..4b501e6 100644
--- a/ui/vendor/node_modules/monaco-typescript/src/monaco.contribution.ts
+++ b/ui/vendor/node_modules/monaco-typescript/src/monaco.contribution.ts
@@ -15,7 +15,7 @@ declare var require:<T>(moduleId:[string], callback:(module:T)=>void)=>void;
 
 // --- TypeScript configuration and defaults ---------
 
-export class LanguageServiceDefaultsImpl implements any {
+export class LanguageServiceDefaultsImpl {
 
 	private _onDidChange = new Emitter<monaco.languages.typescript.LanguageServiceDefaults>();
 	private _extraLibs: { [path: string]: string };
@@ -140,25 +140,9 @@ const javascriptDefaults = new LanguageServiceDefaultsImpl(
 }
 
-// Export API
-function createAPI(): typeof monaco.languages.typescript {
-	return {
-		ModuleKind: ModuleKind,
-		JsxEmit: JsxEmit,
-		NewLineKind: NewLineKind,
-		ScriptTarget: ScriptTarget,
-		ModuleResolutionKind: ModuleResolutionKind,
-		typescriptDefaults: typescriptDefaults,
-		javascriptDefaults: javascriptDefaults,
-		getTypeScriptWorker: getTypeScriptWorker,
-		getJavaScriptWorker: getJavaScriptWorker
-	}
-}
-monaco.languages.typescript = createAPI();
-
 // --- Registration to monaco editor ---
 
 function withMode(callback:(module:typeof mode)=>void): void {
-	require<typeof mode>(['vs/language/typescript/src/mode'], callback);
+	require<typeof mode>(['monaco-typescript/out/mode'], callback);
 }
 
 register({
diff --git a/ui/vendor/node_modules/monaco-typescript/tsconfig.json b/ui/vendor/node_modules/monaco-typescript/tsconfig.json
index b02af73..4674a72 100644
--- a/ui/vendor/node_modules/monaco-typescript/tsconfig.json
+++ b/ui/vendor/node_modules/monaco-typescript/tsconfig.json
@@ -1,5 +1,7 @@
 {
   "compilerOptions": {
+    "baseUrl": ".",
+    "paths": {"vs/*": ["../vscode/src/vs/*"]},
     "module": "amd",
     "outDir": "out",
     "target": "es5"
@@ -10,6 +12,6 @@
     "lib/*.d.ts"
   ],
   "files": [
-    "node_modules/monaco-editor-core/monaco.d.ts"
+    "../vscode/src/typings/thenable.d.ts"
   ]
 }
\ No newline at end of file
