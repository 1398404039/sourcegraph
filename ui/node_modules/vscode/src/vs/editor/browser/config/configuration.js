/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var event_1 = require('vs/base/common/event');
var lifecycle_1 = require('vs/base/common/lifecycle');
var platform = require('vs/base/common/platform');
var browser = require('vs/base/browser/browser');
var commonEditorConfig_1 = require('vs/editor/common/config/commonEditorConfig');
var editorCommon_1 = require('vs/editor/common/editorCommon');
var elementSizeObserver_1 = require('vs/editor/browser/config/elementSizeObserver');
var CSSBasedConfigurationCache = (function () {
    function CSSBasedConfigurationCache() {
        this._keys = Object.create(null);
        this._values = Object.create(null);
    }
    CSSBasedConfigurationCache.prototype.has = function (item) {
        return !!this._values[item.getId()];
    };
    CSSBasedConfigurationCache.prototype.get = function (item) {
        return this._values[item.getId()];
    };
    CSSBasedConfigurationCache.prototype.put = function (item, value) {
        this._keys[item.getId()] = item;
        this._values[item.getId()] = value;
    };
    CSSBasedConfigurationCache.prototype.getKeys = function () {
        var _this = this;
        return Object.keys(this._keys).map(function (id) { return _this._keys[id]; });
    };
    return CSSBasedConfigurationCache;
}());
var CharWidthReader = (function () {
    function CharWidthReader(chr) {
        this._chr = chr;
        this._width = 0;
    }
    Object.defineProperty(CharWidthReader.prototype, "width", {
        get: function () { return this._width; },
        enumerable: true,
        configurable: true
    });
    CharWidthReader.prototype.render = function (out) {
        if (this._chr === ' ') {
            var htmlString = '&nbsp;';
            // Repeat character 256 (2^8) times
            for (var i = 0; i < 8; i++) {
                htmlString += htmlString;
            }
            out.innerHTML = htmlString;
        }
        else {
            var testString = this._chr;
            // Repeat character 256 (2^8) times
            for (var i = 0; i < 8; i++) {
                testString += testString;
            }
            out.textContent = testString;
        }
    };
    CharWidthReader.prototype.read = function (out) {
        this._width = out.offsetWidth / 256;
    };
    return CharWidthReader;
}());
var CSSBasedConfiguration = (function (_super) {
    __extends(CSSBasedConfiguration, _super);
    function CSSBasedConfiguration() {
        _super.call(this);
        this._changeMonitorTimeout = -1;
        this._onDidChange = this._register(new event_1.Emitter());
        this.onDidChange = this._onDidChange.event;
        this._cache = new CSSBasedConfigurationCache();
    }
    CSSBasedConfiguration.prototype.dispose = function () {
        if (this._changeMonitorTimeout !== -1) {
            clearTimeout(this._changeMonitorTimeout);
            this._changeMonitorTimeout = -1;
        }
        _super.prototype.dispose.call(this);
    };
    CSSBasedConfiguration.prototype.readConfiguration = function (bareFontInfo) {
        if (!this._cache.has(bareFontInfo)) {
            var readConfig = CSSBasedConfiguration._actualReadConfiguration(bareFontInfo);
            if (readConfig.typicalHalfwidthCharacterWidth <= 2 || readConfig.typicalFullwidthCharacterWidth <= 2 || readConfig.spaceWidth <= 2 || readConfig.maxDigitWidth <= 2) {
                // Hey, it's Bug 14341 ... we couldn't read
                readConfig.typicalHalfwidthCharacterWidth = Math.max(readConfig.typicalHalfwidthCharacterWidth, 5);
                readConfig.typicalFullwidthCharacterWidth = Math.max(readConfig.typicalFullwidthCharacterWidth, 5);
                readConfig.spaceWidth = Math.max(readConfig.spaceWidth, 5);
                readConfig.maxDigitWidth = Math.max(readConfig.maxDigitWidth, 5);
                this._installChangeMonitor();
            }
            this._cache.put(bareFontInfo, readConfig);
        }
        return this._cache.get(bareFontInfo);
    };
    CSSBasedConfiguration.prototype._installChangeMonitor = function () {
        var _this = this;
        if (this._changeMonitorTimeout === -1) {
            this._changeMonitorTimeout = setTimeout(function () {
                _this._changeMonitorTimeout = -1;
                _this._monitorForChanges();
            }, 500);
        }
    };
    CSSBasedConfiguration.prototype._monitorForChanges = function () {
        var shouldInstallChangeMonitor = false;
        var keys = this._cache.getKeys();
        for (var i = 0; i < keys.length; i++) {
            var styling = keys[i];
            var newValue = CSSBasedConfiguration._actualReadConfiguration(styling);
            if (newValue.typicalHalfwidthCharacterWidth <= 2 || newValue.typicalFullwidthCharacterWidth <= 2 || newValue.maxDigitWidth <= 2) {
                // We still couldn't read the CSS config
                shouldInstallChangeMonitor = true;
            }
            else {
                this._cache.put(styling, newValue);
                this._onDidChange.fire();
            }
        }
        if (shouldInstallChangeMonitor) {
            this._installChangeMonitor();
        }
    };
    CSSBasedConfiguration._testElementId = function (index) {
        return 'editorSizeProvider' + index;
    };
    CSSBasedConfiguration._createTestElements = function (bareFontInfo, readers) {
        var container = document.createElement('div');
        Configuration.applyFontInfoSlow(container, bareFontInfo);
        container.style.position = 'absolute';
        container.style.top = '-50000px';
        container.style.width = '50000px';
        for (var i = 0, len = readers.length; i < len; i++) {
            container.appendChild(document.createElement('br'));
            var testElement = document.createElement('span');
            testElement.id = this._testElementId(i);
            readers[i].render(testElement);
            container.appendChild(testElement);
        }
        container.appendChild(document.createElement('br'));
        return container;
    };
    CSSBasedConfiguration._readFromTestElements = function (readers) {
        for (var i = 0, len = readers.length; i < len; i++) {
            readers[i].read(document.getElementById(this._testElementId(i)));
        }
    };
    CSSBasedConfiguration._runReaders = function (bareFontInfo, readers) {
        // Create a test container with all these test elements
        var testContainer = this._createTestElements(bareFontInfo, readers);
        // Add the container to the DOM
        document.body.appendChild(testContainer);
        // Read various properties
        this._readFromTestElements(readers);
        // Remove the container from the DOM
        document.body.removeChild(testContainer);
    };
    CSSBasedConfiguration._actualReadConfiguration = function (bareFontInfo) {
        var typicalHalfwidthCharacter = new CharWidthReader('n');
        var typicalFullwidthCharacter = new CharWidthReader('\uff4d');
        var space = new CharWidthReader(' ');
        var digits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'].map(function (chr) { return new CharWidthReader(chr); });
        this._runReaders(bareFontInfo, digits.concat([typicalHalfwidthCharacter, typicalFullwidthCharacter, space]));
        var maxDigitWidth = 0;
        for (var i = 0, len = digits.length; i < len; i++) {
            maxDigitWidth = Math.max(maxDigitWidth, digits[i].width);
        }
        return new editorCommon_1.FontInfo({
            fontFamily: bareFontInfo.fontFamily,
            fontWeight: bareFontInfo.fontWeight,
            fontSize: bareFontInfo.fontSize,
            lineHeight: bareFontInfo.lineHeight,
            typicalHalfwidthCharacterWidth: typicalHalfwidthCharacter.width,
            typicalFullwidthCharacterWidth: typicalFullwidthCharacter.width,
            spaceWidth: space.width,
            maxDigitWidth: maxDigitWidth
        });
    };
    CSSBasedConfiguration.INSTANCE = new CSSBasedConfiguration();
    return CSSBasedConfiguration;
}(lifecycle_1.Disposable));
var Configuration = (function (_super) {
    __extends(Configuration, _super);
    function Configuration(options, referenceDomElement) {
        var _this = this;
        if (referenceDomElement === void 0) { referenceDomElement = null; }
        _super.call(this, options, new elementSizeObserver_1.ElementSizeObserver(referenceDomElement, function () { return _this._onReferenceDomElementSizeChanged(); }));
        this._register(CSSBasedConfiguration.INSTANCE.onDidChange(function () { return function () { return _this._onCSSBasedConfigurationChanged(); }; }));
        if (this._configWithDefaults.getEditorOptions().automaticLayout) {
            this._elementSizeObserver.startObserving();
        }
        this._register(browser.onDidChangeZoomLevel(function (_) { return _this._recomputeOptions(); }));
    }
    Configuration.applyFontInfoSlow = function (domNode, fontInfo) {
        domNode.style.fontFamily = fontInfo.fontFamily;
        domNode.style.fontWeight = fontInfo.fontWeight;
        domNode.style.fontSize = fontInfo.fontSize + 'px';
        domNode.style.lineHeight = fontInfo.lineHeight + 'px';
    };
    Configuration.applyFontInfo = function (domNode, fontInfo) {
        domNode.setFontFamily(fontInfo.fontFamily);
        domNode.setFontWeight(fontInfo.fontWeight);
        domNode.setFontSize(fontInfo.fontSize);
        domNode.setLineHeight(fontInfo.lineHeight);
    };
    Configuration.prototype._onReferenceDomElementSizeChanged = function () {
        this._recomputeOptions();
    };
    Configuration.prototype._onCSSBasedConfigurationChanged = function () {
        this._recomputeOptions();
    };
    Configuration.prototype.observeReferenceElement = function (dimension) {
        this._elementSizeObserver.observe(dimension);
    };
    Configuration.prototype.dispose = function () {
        this._elementSizeObserver.dispose();
        _super.prototype.dispose.call(this);
    };
    Configuration.prototype._getEditorClassName = function (theme, fontLigatures) {
        var extra = '';
        if (browser.isIE11orEarlier) {
            extra += 'ie ';
        }
        else if (browser.isFirefox) {
            extra += 'ff ';
        }
        else if (browser.isEdge) {
            extra += 'edge ';
        }
        if (browser.isIE9) {
            extra += 'ie9 ';
        }
        if (platform.isMacintosh) {
            extra += 'mac ';
        }
        if (fontLigatures) {
            extra += 'enable-ligatures ';
        }
        return 'monaco-editor ' + extra + theme;
    };
    Configuration.prototype.getOuterWidth = function () {
        return this._elementSizeObserver.getWidth();
    };
    Configuration.prototype.getOuterHeight = function () {
        return this._elementSizeObserver.getHeight();
    };
    Configuration.prototype._getCanUseTranslate3d = function () {
        return browser.canUseTranslate3d && browser.getZoomLevel() === 0;
    };
    Configuration.prototype.readConfiguration = function (bareFontInfo) {
        return CSSBasedConfiguration.INSTANCE.readConfiguration(bareFontInfo);
    };
    return Configuration;
}(commonEditorConfig_1.CommonEditorConfiguration));
exports.Configuration = Configuration;
