/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var styleMutator_1 = require('vs/base/browser/styleMutator');
var editorCommon_1 = require('vs/editor/common/editorCommon');
var configuration_1 = require('vs/editor/browser/config/configuration');
var ViewCursor = (function () {
    function ViewCursor(context, isSecondary) {
        this._context = context;
        this._cursorStyle = this._context.configuration.editor.viewInfo.cursorStyle;
        this._lineHeight = this._context.configuration.editor.lineHeight;
        this._lastRenderedContent = '';
        this._isInEditableRange = true;
        this._domNode = this._createCursorDomNode(isSecondary);
        configuration_1.Configuration.applyFontInfo(this._domNode, this._context.configuration.editor.fontInfo);
        this._isVisible = true;
        this._domNode.setDisplay('none');
        this.updatePosition({
            lineNumber: 1,
            column: 1
        });
    }
    ViewCursor.prototype._createCursorDomNode = function (isSecondary) {
        var domNode = styleMutator_1.createFastDomNode(document.createElement('div'));
        if (isSecondary) {
            domNode.setClassName('cursor secondary');
        }
        else {
            domNode.setClassName('cursor');
        }
        domNode.setHeight(this._lineHeight);
        domNode.setTop(0);
        domNode.setLeft(0);
        domNode.domNode.setAttribute('role', 'presentation');
        domNode.domNode.setAttribute('aria-hidden', 'true');
        return domNode;
    };
    ViewCursor.prototype.getDomNode = function () {
        return this._domNode.domNode;
    };
    ViewCursor.prototype.getIsInEditableRange = function () {
        return this._isInEditableRange;
    };
    ViewCursor.prototype.getPositionTop = function () {
        return this._positionTop;
    };
    ViewCursor.prototype.getPosition = function () {
        return this._position;
    };
    ViewCursor.prototype.show = function () {
        if (!this._isVisible) {
            this._domNode.setVisibility('inherit');
            this._isVisible = true;
        }
    };
    ViewCursor.prototype.hide = function () {
        if (this._isVisible) {
            this._domNode.setVisibility('hidden');
            this._isVisible = false;
        }
    };
    ViewCursor.prototype.onModelFlushed = function () {
        this.updatePosition({
            lineNumber: 1,
            column: 1
        });
        this._isInEditableRange = true;
        return true;
    };
    ViewCursor.prototype.onCursorPositionChanged = function (position, isInEditableRange) {
        this.updatePosition(position);
        this._isInEditableRange = isInEditableRange;
        return true;
    };
    ViewCursor.prototype.onConfigurationChanged = function (e) {
        if (e.lineHeight) {
            this._lineHeight = this._context.configuration.editor.lineHeight;
        }
        if (e.viewInfo.cursorStyle) {
            this._cursorStyle = this._context.configuration.editor.viewInfo.cursorStyle;
        }
        if (e.fontInfo) {
            configuration_1.Configuration.applyFontInfo(this._domNode, this._context.configuration.editor.fontInfo);
        }
        return true;
    };
    ViewCursor.prototype.prepareRender = function (ctx) {
        var visibleRange = ctx.visibleRangeForPosition(this._position);
        if (visibleRange) {
            this._positionTop = visibleRange.top;
            this._positionLeft = visibleRange.left;
            this._isInViewport = true;
        }
        else {
            this._isInViewport = false;
        }
    };
    ViewCursor.prototype._getRenderedContent = function () {
        if (this._cursorStyle === editorCommon_1.TextEditorCursorStyle.Block) {
            var lineContent = this._context.model.getLineContent(this._position.lineNumber);
            return lineContent.charAt(this._position.column - 1);
        }
        return '';
    };
    ViewCursor.prototype.render = function (ctx) {
        if (this._isInViewport) {
            var top_1 = this._positionTop + ctx.viewportTop - ctx.bigNumbersDelta;
            var renderContent = this._getRenderedContent();
            if (this._lastRenderedContent !== renderContent) {
                this._lastRenderedContent = renderContent;
                this._domNode.domNode.textContent = this._lastRenderedContent;
            }
            this._domNode.setDisplay('block');
            this._domNode.setLeft(this._positionLeft);
            this._domNode.setTop(top_1);
            this._domNode.setLineHeight(this._lineHeight);
            this._domNode.setHeight(this._lineHeight);
            return {
                position: this._position,
                contentTop: top_1,
                contentLeft: this._positionLeft,
                height: this._lineHeight,
                width: 2
            };
        }
        this._domNode.setDisplay('none');
        return null;
    };
    ViewCursor.prototype.updatePosition = function (newPosition) {
        this._position = newPosition;
        this._domNode.domNode.setAttribute('lineNumber', this._position.lineNumber.toString());
        this._domNode.domNode.setAttribute('column', this._position.column.toString());
        this._isInViewport = false;
    };
    return ViewCursor;
}());
exports.ViewCursor = ViewCursor;
