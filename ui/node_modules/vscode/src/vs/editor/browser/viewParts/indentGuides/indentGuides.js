/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
require('./indentGuides.css');
var dynamicViewOverlay_1 = require('vs/editor/browser/view/dynamicViewOverlay');
var IndentGuidesOverlay = (function (_super) {
    __extends(IndentGuidesOverlay, _super);
    function IndentGuidesOverlay(context) {
        _super.call(this);
        this._context = context;
        this._lineHeight = this._context.configuration.editor.lineHeight;
        this._spaceWidth = this._context.configuration.editor.fontInfo.spaceWidth;
        this._enabled = this._context.configuration.editor.viewInfo.renderIndentGuides;
        this._renderResult = null;
        this._context.addEventHandler(this);
    }
    IndentGuidesOverlay.prototype.dispose = function () {
        this._context.removeEventHandler(this);
        this._context = null;
        this._renderResult = null;
    };
    // --- begin event handlers
    IndentGuidesOverlay.prototype.onModelFlushed = function () {
        return true;
    };
    IndentGuidesOverlay.prototype.onModelLinesDeleted = function (e) {
        return true;
    };
    IndentGuidesOverlay.prototype.onModelLineChanged = function (e) {
        return true;
    };
    IndentGuidesOverlay.prototype.onModelLinesInserted = function (e) {
        return true;
    };
    IndentGuidesOverlay.prototype.onConfigurationChanged = function (e) {
        if (e.lineHeight) {
            this._lineHeight = this._context.configuration.editor.lineHeight;
        }
        if (e.fontInfo) {
            this._spaceWidth = this._context.configuration.editor.fontInfo.spaceWidth;
        }
        if (e.viewInfo.renderIndentGuides) {
            this._enabled = this._context.configuration.editor.viewInfo.renderIndentGuides;
        }
        return true;
    };
    IndentGuidesOverlay.prototype.onLayoutChanged = function (layoutInfo) {
        return true;
    };
    IndentGuidesOverlay.prototype.onScrollChanged = function (e) {
        return e.scrollTopChanged; // || e.scrollWidthChanged;
    };
    IndentGuidesOverlay.prototype.onZonesChanged = function () {
        return true;
    };
    // --- end event handlers
    IndentGuidesOverlay.prototype.prepareRender = function (ctx) {
        if (!this.shouldRender()) {
            throw new Error('I did not ask to render!');
        }
        if (!this._enabled) {
            this._renderResult = null;
            return;
        }
        var visibleStartLineNumber = ctx.visibleRange.startLineNumber;
        var visibleEndLineNumber = ctx.visibleRange.endLineNumber;
        var tabSize = this._context.model.getTabSize();
        var tabWidth = tabSize * this._spaceWidth;
        var lineHeight = this._lineHeight;
        var output = [];
        for (var lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {
            var lineIndex = lineNumber - visibleStartLineNumber;
            var indent = this._context.model.getLineIndentGuide(lineNumber);
            var result = '';
            var left = 0;
            for (var i = 0; i < indent; i++) {
                result += "<div class=\"cigr\" style=\"left:" + left + "px;height:" + lineHeight + "px;\"></div>";
                left += tabWidth;
            }
            output[lineIndex] = result;
        }
        this._renderResult = output;
    };
    IndentGuidesOverlay.prototype.render = function (startLineNumber, lineNumber) {
        if (!this._renderResult) {
            return '';
        }
        var lineIndex = lineNumber - startLineNumber;
        if (lineIndex < 0 || lineIndex >= this._renderResult.length) {
            throw new Error('Unexpected render request');
        }
        return this._renderResult[lineIndex];
    };
    return IndentGuidesOverlay;
}(dynamicViewOverlay_1.DynamicViewOverlay));
exports.IndentGuidesOverlay = IndentGuidesOverlay;
