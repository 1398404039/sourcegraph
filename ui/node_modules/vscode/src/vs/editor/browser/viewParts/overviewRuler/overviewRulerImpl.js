/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var styleMutator_1 = require("vs/base/browser/styleMutator");
var editorCommon_1 = require("vs/editor/common/editorCommon");
var browser = require("vs/base/browser/browser");
var overviewZoneManager_1 = require("vs/editor/common/view/overviewZoneManager");
var OverviewRulerImpl = (function () {
    function OverviewRulerImpl(canvasLeftOffset, cssClassName, scrollHeight, lineHeight, canUseTranslate3d, minimumHeight, maximumHeight, getVerticalOffsetForLine) {
        var _this = this;
        this._canvasLeftOffset = canvasLeftOffset;
        this._domNode = document.createElement('canvas');
        this._domNode.className = cssClassName;
        this._domNode.style.position = 'absolute';
        this._lanesCount = 3;
        this._canUseTranslate3d = canUseTranslate3d;
        this._zoneManager = new overviewZoneManager_1.OverviewZoneManager(getVerticalOffsetForLine);
        this._zoneManager.setMinimumHeight(minimumHeight);
        this._zoneManager.setMaximumHeight(maximumHeight);
        this._zoneManager.setUseDarkColor(false);
        this._zoneManager.setDOMWidth(0);
        this._zoneManager.setDOMHeight(0);
        this._zoneManager.setOuterHeight(scrollHeight);
        this._zoneManager.setLineHeight(lineHeight);
        this._zoomListener = browser.onDidChangeZoomLevel(function () {
            _this._zoneManager.setPixelRatio(browser.getPixelRatio());
            _this._domNode.style.width = _this._zoneManager.getDOMWidth() + 'px';
            _this._domNode.style.height = _this._zoneManager.getDOMHeight() + 'px';
            _this._domNode.width = _this._zoneManager.getCanvasWidth();
            _this._domNode.height = _this._zoneManager.getCanvasHeight();
            _this.render(true);
        });
        this._zoneManager.setPixelRatio(browser.getPixelRatio());
    }
    OverviewRulerImpl.prototype.dispose = function () {
        this._zoomListener.dispose();
        this._zoneManager = null;
    };
    OverviewRulerImpl.prototype.setLayout = function (position, render) {
        styleMutator_1.StyleMutator.setTop(this._domNode, position.top);
        styleMutator_1.StyleMutator.setRight(this._domNode, position.right);
        var hasChanged = false;
        hasChanged = this._zoneManager.setDOMWidth(position.width) || hasChanged;
        hasChanged = this._zoneManager.setDOMHeight(position.height) || hasChanged;
        if (hasChanged) {
            this._domNode.style.width = this._zoneManager.getDOMWidth() + 'px';
            this._domNode.style.height = this._zoneManager.getDOMHeight() + 'px';
            this._domNode.width = this._zoneManager.getCanvasWidth();
            this._domNode.height = this._zoneManager.getCanvasHeight();
            if (render) {
                this.render(true);
            }
        }
    };
    OverviewRulerImpl.prototype.getLanesCount = function () {
        return this._lanesCount;
    };
    OverviewRulerImpl.prototype.setLanesCount = function (newLanesCount, render) {
        this._lanesCount = newLanesCount;
        if (render) {
            this.render(true);
        }
    };
    OverviewRulerImpl.prototype.setUseDarkColor = function (useDarkColor, render) {
        this._zoneManager.setUseDarkColor(useDarkColor);
        if (render) {
            this.render(true);
        }
    };
    OverviewRulerImpl.prototype.getDomNode = function () {
        return this._domNode;
    };
    OverviewRulerImpl.prototype.getPixelWidth = function () {
        return this._zoneManager.getCanvasWidth();
    };
    OverviewRulerImpl.prototype.getPixelHeight = function () {
        return this._zoneManager.getCanvasHeight();
    };
    OverviewRulerImpl.prototype.setScrollHeight = function (scrollHeight, render) {
        this._zoneManager.setOuterHeight(scrollHeight);
        if (render) {
            this.render(true);
        }
    };
    OverviewRulerImpl.prototype.setLineHeight = function (lineHeight, render) {
        this._zoneManager.setLineHeight(lineHeight);
        if (render) {
            this.render(true);
        }
    };
    OverviewRulerImpl.prototype.setCanUseTranslate3d = function (canUseTranslate3d, render) {
        this._canUseTranslate3d = canUseTranslate3d;
        if (render) {
            this.render(true);
        }
    };
    OverviewRulerImpl.prototype.setZones = function (zones, render) {
        this._zoneManager.setZones(zones);
        if (render) {
            this.render(false);
        }
    };
    OverviewRulerImpl.prototype.render = function (forceRender) {
        if (!OverviewRulerImpl.hasCanvas) {
            return false;
        }
        if (this._zoneManager.getOuterHeight() === 0) {
            return false;
        }
        if (this._canUseTranslate3d) {
            styleMutator_1.StyleMutator.setTransform(this._domNode, 'translate3d(0px, 0px, 0px)');
        }
        else {
            styleMutator_1.StyleMutator.setTransform(this._domNode, '');
        }
        var width = this._zoneManager.getCanvasWidth();
        var height = this._zoneManager.getCanvasHeight();
        var colorZones = this._zoneManager.resolveColorZones();
        var id2Color = this._zoneManager.getId2Color();
        var ctx = this._domNode.getContext('2d');
        ctx.clearRect(0, 0, width, height);
        if (colorZones.length > 0) {
            var remainingWidth = width - this._canvasLeftOffset;
            if (this._lanesCount >= 3) {
                this._renderThreeLanes(ctx, colorZones, id2Color, remainingWidth);
            }
            else if (this._lanesCount === 2) {
                this._renderTwoLanes(ctx, colorZones, id2Color, remainingWidth);
            }
            else if (this._lanesCount === 1) {
                this._renderOneLane(ctx, colorZones, id2Color, remainingWidth);
            }
        }
        return true;
    };
    OverviewRulerImpl.prototype._renderOneLane = function (ctx, colorZones, id2Color, w) {
        this._renderVerticalPatch(ctx, colorZones, id2Color, editorCommon_1.OverviewRulerLane.Left | editorCommon_1.OverviewRulerLane.Center | editorCommon_1.OverviewRulerLane.Right, this._canvasLeftOffset, w);
    };
    OverviewRulerImpl.prototype._renderTwoLanes = function (ctx, colorZones, id2Color, w) {
        var leftWidth = Math.floor(w / 2);
        var rightWidth = w - leftWidth;
        var leftOffset = this._canvasLeftOffset;
        var rightOffset = this._canvasLeftOffset + leftWidth;
        this._renderVerticalPatch(ctx, colorZones, id2Color, editorCommon_1.OverviewRulerLane.Left | editorCommon_1.OverviewRulerLane.Center, leftOffset, leftWidth);
        this._renderVerticalPatch(ctx, colorZones, id2Color, editorCommon_1.OverviewRulerLane.Right, rightOffset, rightWidth);
    };
    OverviewRulerImpl.prototype._renderThreeLanes = function (ctx, colorZones, id2Color, w) {
        var leftWidth = Math.floor(w / 3);
        var rightWidth = Math.floor(w / 3);
        var centerWidth = w - leftWidth - rightWidth;
        var leftOffset = this._canvasLeftOffset;
        var centerOffset = this._canvasLeftOffset + leftWidth;
        var rightOffset = this._canvasLeftOffset + leftWidth + centerWidth;
        this._renderVerticalPatch(ctx, colorZones, id2Color, editorCommon_1.OverviewRulerLane.Left, leftOffset, leftWidth);
        this._renderVerticalPatch(ctx, colorZones, id2Color, editorCommon_1.OverviewRulerLane.Center, centerOffset, centerWidth);
        this._renderVerticalPatch(ctx, colorZones, id2Color, editorCommon_1.OverviewRulerLane.Right, rightOffset, rightWidth);
    };
    OverviewRulerImpl.prototype._renderVerticalPatch = function (ctx, colorZones, id2Color, laneMask, xpos, width) {
        var currentColorId = 0;
        var currentFrom = 0;
        var currentTo = 0;
        for (var i = 0, len = colorZones.length; i < len; i++) {
            var zone = colorZones[i];
            if (!(zone.position & laneMask)) {
                continue;
            }
            var zoneColorId = zone.colorId;
            var zoneFrom = zone.from;
            var zoneTo = zone.to;
            if (zoneColorId !== currentColorId) {
                ctx.fillRect(xpos, currentFrom, width, currentTo - currentFrom);
                currentColorId = zoneColorId;
                ctx.fillStyle = id2Color[currentColorId];
                currentFrom = zoneFrom;
                currentTo = zoneTo;
            }
            else {
                if (currentTo >= zoneFrom) {
                    currentTo = Math.max(currentTo, zoneTo);
                }
                else {
                    ctx.fillRect(xpos, currentFrom, width, currentTo - currentFrom);
                    currentFrom = zoneFrom;
                    currentTo = zoneTo;
                }
            }
        }
        ctx.fillRect(xpos, currentFrom, width, currentTo - currentFrom);
    };
    return OverviewRulerImpl;
}());
OverviewRulerImpl.hasCanvas = (window.navigator.userAgent.indexOf('MSIE 8') === -1);
exports.OverviewRulerImpl = OverviewRulerImpl;
