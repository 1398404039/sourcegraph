/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
require("./currentLineHighlight.css");
var dynamicViewOverlay_1 = require("vs/editor/browser/view/dynamicViewOverlay");
var CurrentLineHighlightOverlay = (function (_super) {
    __extends(CurrentLineHighlightOverlay, _super);
    function CurrentLineHighlightOverlay(context, layoutProvider) {
        var _this = _super.call(this) || this;
        _this._context = context;
        _this._lineHeight = _this._context.configuration.editor.lineHeight;
        _this._readOnly = _this._context.configuration.editor.readOnly;
        _this._renderLineHighlight = _this._context.configuration.editor.viewInfo.renderLineHighlight;
        _this._layoutProvider = layoutProvider;
        _this._selectionIsEmpty = true;
        _this._primaryCursorIsInEditableRange = true;
        _this._primaryCursorLineNumber = 1;
        _this._scrollWidth = _this._layoutProvider.getScrollWidth();
        _this._contentWidth = _this._context.configuration.editor.layoutInfo.contentWidth;
        _this._context.addEventHandler(_this);
        return _this;
    }
    CurrentLineHighlightOverlay.prototype.dispose = function () {
        this._context.removeEventHandler(this);
        this._context = null;
    };
    // --- begin event handlers
    CurrentLineHighlightOverlay.prototype.onModelFlushed = function () {
        this._primaryCursorIsInEditableRange = true;
        this._selectionIsEmpty = true;
        this._primaryCursorLineNumber = 1;
        this._scrollWidth = this._layoutProvider.getScrollWidth();
        return true;
    };
    CurrentLineHighlightOverlay.prototype.onModelLinesDeleted = function (e) {
        return true;
    };
    CurrentLineHighlightOverlay.prototype.onModelLinesInserted = function (e) {
        return true;
    };
    CurrentLineHighlightOverlay.prototype.onCursorPositionChanged = function (e) {
        var hasChanged = false;
        if (this._primaryCursorIsInEditableRange !== e.isInEditableRange) {
            this._primaryCursorIsInEditableRange = e.isInEditableRange;
            hasChanged = true;
        }
        if (this._primaryCursorLineNumber !== e.position.lineNumber) {
            this._primaryCursorLineNumber = e.position.lineNumber;
            hasChanged = true;
        }
        return hasChanged;
    };
    CurrentLineHighlightOverlay.prototype.onCursorSelectionChanged = function (e) {
        var isEmpty = e.selection.isEmpty();
        if (this._selectionIsEmpty !== isEmpty) {
            this._selectionIsEmpty = isEmpty;
            return true;
        }
        return false;
    };
    CurrentLineHighlightOverlay.prototype.onConfigurationChanged = function (e) {
        if (e.lineHeight) {
            this._lineHeight = this._context.configuration.editor.lineHeight;
        }
        if (e.readOnly) {
            this._readOnly = this._context.configuration.editor.readOnly;
        }
        if (e.viewInfo.renderLineHighlight) {
            this._renderLineHighlight = this._context.configuration.editor.viewInfo.renderLineHighlight;
        }
        if (e.layoutInfo) {
            this._contentWidth = this._context.configuration.editor.layoutInfo.contentWidth;
        }
        return true;
    };
    CurrentLineHighlightOverlay.prototype.onLayoutChanged = function (layoutInfo) {
        return true;
    };
    CurrentLineHighlightOverlay.prototype.onScrollChanged = function (e) {
        this._scrollWidth = e.scrollWidth;
        return e.scrollWidthChanged;
    };
    CurrentLineHighlightOverlay.prototype.onZonesChanged = function () {
        return true;
    };
    // --- end event handlers
    CurrentLineHighlightOverlay.prototype.prepareRender = function (ctx) {
        if (!this.shouldRender()) {
            throw new Error('I did not ask to render!');
        }
        this._scrollWidth = ctx.scrollWidth;
    };
    CurrentLineHighlightOverlay.prototype.render = function (startLineNumber, lineNumber) {
        if (lineNumber === this._primaryCursorLineNumber) {
            if (this._shouldShowCurrentLine()) {
                return ('<div class="current-line" style="width:'
                    + String(Math.max(this._scrollWidth, this._contentWidth))
                    + 'px; height:'
                    + String(this._lineHeight)
                    + 'px;"></div>');
            }
            else {
                return '';
            }
        }
        return '';
    };
    CurrentLineHighlightOverlay.prototype._shouldShowCurrentLine = function () {
        return (this._renderLineHighlight === 'line' || this._renderLineHighlight === 'all') &&
            this._selectionIsEmpty &&
            this._primaryCursorIsInEditableRange;
    };
    return CurrentLineHighlightOverlay;
}(dynamicViewOverlay_1.DynamicViewOverlay));
exports.CurrentLineHighlightOverlay = CurrentLineHighlightOverlay;
