/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var lifecycle_1 = require('vs/base/common/lifecycle');
var mouseEvent_1 = require('vs/base/browser/mouseEvent');
var dom = require('vs/base/browser/dom');
var globalMouseMoveMonitor_1 = require('vs/base/browser/globalMouseMoveMonitor');
var EditorMouseEvent = (function (_super) {
    __extends(EditorMouseEvent, _super);
    function EditorMouseEvent(e, editorViewDomNode) {
        _super.call(this, e);
        this.editorPos = dom.getDomNodePagePosition(editorViewDomNode);
        this.viewportx = this.posx - dom.StandardWindow.scrollX;
        this.viewporty = this.posy - dom.StandardWindow.scrollY;
    }
    return EditorMouseEvent;
}(mouseEvent_1.StandardMouseEvent));
exports.EditorMouseEvent = EditorMouseEvent;
var EditorMouseEventFactory = (function () {
    function EditorMouseEventFactory(editorViewDomNode) {
        this._editorViewDomNode = editorViewDomNode;
    }
    EditorMouseEventFactory.prototype._create = function (e) {
        return new EditorMouseEvent(e, this._editorViewDomNode);
    };
    EditorMouseEventFactory.prototype.onContextMenu = function (target, callback) {
        var _this = this;
        return dom.addDisposableListener(target, 'contextmenu', function (e) {
            callback(_this._create(e));
        });
    };
    EditorMouseEventFactory.prototype.onMouseUp = function (target, callback) {
        var _this = this;
        return dom.addDisposableListener(target, 'mouseup', function (e) {
            callback(_this._create(e));
        });
    };
    EditorMouseEventFactory.prototype.onMouseDown = function (target, callback) {
        var _this = this;
        return dom.addDisposableListener(target, 'mousedown', function (e) {
            callback(_this._create(e));
        });
    };
    EditorMouseEventFactory.prototype.onMouseLeave = function (target, callback) {
        var _this = this;
        return dom.addDisposableNonBubblingMouseOutListener(target, function (e) {
            callback(_this._create(e));
        });
    };
    EditorMouseEventFactory.prototype.onMouseMoveThrottled = function (target, callback, merger, minimumTimeMs) {
        var _this = this;
        var myMerger = function (lastEvent, currentEvent) {
            return merger(lastEvent, _this._create(currentEvent));
        };
        return dom.addDisposableThrottledListener(target, 'mousemove', callback, myMerger, minimumTimeMs);
    };
    return EditorMouseEventFactory;
}());
exports.EditorMouseEventFactory = EditorMouseEventFactory;
var GlobalEditorMouseMoveMonitor = (function (_super) {
    __extends(GlobalEditorMouseMoveMonitor, _super);
    function GlobalEditorMouseMoveMonitor(editorViewDomNode) {
        _super.call(this);
        this._editorViewDomNode = editorViewDomNode;
        this._globalMouseMoveMonitor = this._register(new globalMouseMoveMonitor_1.GlobalMouseMoveMonitor());
    }
    GlobalEditorMouseMoveMonitor.prototype.startMonitoring = function (merger, mouseMoveCallback, onStopCallback) {
        var _this = this;
        var myMerger = function (lastEvent, currentEvent) {
            return merger(lastEvent, new EditorMouseEvent(currentEvent, _this._editorViewDomNode));
        };
        this._globalMouseMoveMonitor.startMonitoring(myMerger, mouseMoveCallback, onStopCallback);
    };
    return GlobalEditorMouseMoveMonitor;
}(lifecycle_1.Disposable));
exports.GlobalEditorMouseMoveMonitor = GlobalEditorMouseMoveMonitor;
