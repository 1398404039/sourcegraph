/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var lifecycle_1 = require("vs/base/common/lifecycle");
var uri_1 = require("vs/base/common/uri");
var configuration_1 = require("vs/platform/configuration/common/configuration");
var contextMenuService_1 = require("vs/platform/contextview/browser/contextMenuService");
var contextView_1 = require("vs/platform/contextview/browser/contextView");
var contextViewService_1 = require("vs/platform/contextview/browser/contextViewService");
var event_1 = require("vs/platform/event/common/event");
var eventService_1 = require("vs/platform/event/common/eventService");
var extensions_1 = require("vs/platform/extensions/common/extensions");
var instantiation_1 = require("vs/platform/instantiation/common/instantiation");
var instantiationService_1 = require("vs/platform/instantiation/common/instantiationService");
var serviceCollection_1 = require("vs/platform/instantiation/common/serviceCollection");
var commands_1 = require("vs/platform/commands/common/commands");
var keybinding_1 = require("vs/platform/keybinding/common/keybinding");
var contextkey_1 = require("vs/platform/contextkey/common/contextkey");
var markerService_1 = require("vs/platform/markers/common/markerService");
var markers_1 = require("vs/platform/markers/common/markers");
var message_1 = require("vs/platform/message/common/message");
var progress_1 = require("vs/platform/progress/common/progress");
var storage_1 = require("vs/platform/storage/common/storage");
var telemetry_1 = require("vs/platform/telemetry/common/telemetry");
var workspace_1 = require("vs/platform/workspace/common/workspace");
var codeEditorService_1 = require("vs/editor/common/services/codeEditorService");
var editorWorkerService_1 = require("vs/editor/common/services/editorWorkerService");
var editorWorkerServiceImpl_1 = require("vs/editor/common/services/editorWorkerServiceImpl");
var modeService_1 = require("vs/editor/common/services/modeService");
var modeServiceImpl_1 = require("vs/editor/common/services/modeServiceImpl");
var modelService_1 = require("vs/editor/common/services/modelService");
var modelServiceImpl_1 = require("vs/editor/common/services/modelServiceImpl");
var codeEditorServiceImpl_1 = require("vs/editor/browser/services/codeEditorServiceImpl");
var simpleServices_1 = require("vs/editor/browser/standalone/simpleServices");
var contextKeyService_1 = require("vs/platform/contextkey/browser/contextKeyService");
var actions_1 = require("vs/platform/actions/common/actions");
var menuService_1 = require("vs/platform/actions/common/menuService");
var StaticServices;
(function (StaticServices) {
    var _serviceCollection = new serviceCollection_1.ServiceCollection();
    var LazyStaticService = (function () {
        function LazyStaticService(serviceId, factory) {
            this._serviceId = serviceId;
            this._factory = factory;
            this._value = null;
        }
        Object.defineProperty(LazyStaticService.prototype, "id", {
            get: function () { return this._serviceId; },
            enumerable: true,
            configurable: true
        });
        LazyStaticService.prototype.get = function (overrides) {
            if (!this._value) {
                if (overrides) {
                    this._value = overrides[this._serviceId.toString()];
                }
                if (!this._value) {
                    this._value = this._factory(overrides);
                }
                if (!this._value) {
                    throw new Error('Service ' + this._serviceId + ' is missing!');
                }
                _serviceCollection.set(this._serviceId, this._value);
            }
            return this._value;
        };
        return LazyStaticService;
    }());
    StaticServices.LazyStaticService = LazyStaticService;
    var _all = [];
    function define(serviceId, factory) {
        var r = new LazyStaticService(serviceId, factory);
        _all.push(r);
        return r;
    }
    function init(overrides) {
        // Create a fresh service collection
        var result = new serviceCollection_1.ServiceCollection();
        // Initialize the service collection with the overrides
        for (var serviceId in overrides) {
            if (overrides.hasOwnProperty(serviceId)) {
                result.set(instantiation_1.createDecorator(serviceId), overrides[serviceId]);
            }
        }
        // Make sure the same static services are present in all service collections
        _all.forEach(function (service) { return result.set(service.id, service.get(overrides)); });
        // Ensure the collection gets the correct instantiation service
        var instantiationService = new instantiationService_1.InstantiationService(result, true);
        result.set(instantiation_1.IInstantiationService, instantiationService);
        return [result, instantiationService];
    }
    StaticServices.init = init;
    StaticServices.instantiationService = define(instantiation_1.IInstantiationService, function () { return new instantiationService_1.InstantiationService(_serviceCollection, true); });
    StaticServices.contextService = define(workspace_1.IWorkspaceContextService, function () { return new workspace_1.WorkspaceContextService({
        resource: uri_1.default.from({ scheme: 'inmemory', authority: 'model', path: '/' })
    }); });
    StaticServices.telemetryService = define(telemetry_1.ITelemetryService, function () { return telemetry_1.NullTelemetryService; });
    StaticServices.eventService = define(event_1.IEventService, function () { return new eventService_1.EventService(); });
    StaticServices.configurationService = define(configuration_1.IConfigurationService, function () { return new simpleServices_1.SimpleConfigurationService(); });
    StaticServices.messageService = define(message_1.IMessageService, function () { return new simpleServices_1.SimpleMessageService(); });
    StaticServices.extensionService = define(extensions_1.IExtensionService, function () { return new simpleServices_1.SimpleExtensionService(); });
    StaticServices.markerService = define(markers_1.IMarkerService, function () { return new markerService_1.MarkerService(); });
    StaticServices.modeService = define(modeService_1.IModeService, function (o) { return new modeServiceImpl_1.MainThreadModeServiceImpl(StaticServices.instantiationService.get(o), StaticServices.extensionService.get(o), StaticServices.configurationService.get(o)); });
    StaticServices.modelService = define(modelService_1.IModelService, function (o) { return new modelServiceImpl_1.ModelServiceImpl(StaticServices.markerService.get(o), StaticServices.configurationService.get(o), StaticServices.messageService.get(o)); });
    StaticServices.editorWorkerService = define(editorWorkerService_1.IEditorWorkerService, function (o) { return new editorWorkerServiceImpl_1.EditorWorkerServiceImpl(StaticServices.modelService.get(o), StaticServices.configurationService.get(o)); });
    StaticServices.codeEditorService = define(codeEditorService_1.ICodeEditorService, function () { return new codeEditorServiceImpl_1.CodeEditorServiceImpl(); });
    StaticServices.progressService = define(progress_1.IProgressService, function () { return new simpleServices_1.SimpleProgressService(); });
    StaticServices.storageService = define(storage_1.IStorageService, function () { return storage_1.NullStorageService; });
})(StaticServices = exports.StaticServices || (exports.StaticServices = {}));
var DynamicStandaloneServices = (function (_super) {
    __extends(DynamicStandaloneServices, _super);
    function DynamicStandaloneServices(domElement, overrides) {
        var _this = _super.call(this) || this;
        var _a = StaticServices.init(overrides), _serviceCollection = _a[0], _instantiationService = _a[1];
        _this._serviceCollection = _serviceCollection;
        _this._instantiationService = _instantiationService;
        var configurationService = _this.get(configuration_1.IConfigurationService);
        var extensionService = _this.get(extensions_1.IExtensionService);
        var messageService = _this.get(message_1.IMessageService);
        var telemetryService = _this.get(telemetry_1.ITelemetryService);
        var ensure = function (serviceId, factory) {
            var value = null;
            if (overrides) {
                value = overrides[serviceId.toString()];
            }
            if (!value) {
                value = factory();
            }
            _this._serviceCollection.set(serviceId, value);
            return value;
        };
        var contextKeyService = ensure(contextkey_1.IContextKeyService, function () { return _this._register(new contextKeyService_1.ContextKeyService(configurationService)); });
        var commandService = ensure(commands_1.ICommandService, function () { return new simpleServices_1.StandaloneCommandService(_this._instantiationService, extensionService); });
        ensure(keybinding_1.IKeybindingService, function () { return _this._register(new simpleServices_1.StandaloneKeybindingService(contextKeyService, commandService, messageService, domElement)); });
        var contextViewService = ensure(contextView_1.IContextViewService, function () { return _this._register(new contextViewService_1.ContextViewService(domElement, telemetryService, messageService)); });
        ensure(contextView_1.IContextMenuService, function () { return _this._register(new contextMenuService_1.ContextMenuService(domElement, telemetryService, messageService, contextViewService)); });
        ensure(actions_1.IMenuService, function () { return new menuService_1.MenuService(extensionService, commandService); });
        return _this;
    }
    DynamicStandaloneServices.prototype.get = function (serviceId) {
        var r = this._serviceCollection.get(serviceId);
        if (!r) {
            throw new Error('Missing service ' + serviceId);
        }
        return r;
    };
    DynamicStandaloneServices.prototype.set = function (serviceId, instance) {
        this._serviceCollection.set(serviceId, instance);
    };
    DynamicStandaloneServices.prototype.has = function (serviceId) {
        return this._serviceCollection.has(serviceId);
    };
    return DynamicStandaloneServices;
}(lifecycle_1.Disposable));
exports.DynamicStandaloneServices = DynamicStandaloneServices;
