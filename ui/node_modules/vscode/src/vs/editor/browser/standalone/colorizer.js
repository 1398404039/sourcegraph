/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var winjs_base_1 = require('vs/base/common/winjs.base');
var modes_1 = require('vs/editor/common/modes');
var viewLineRenderer_1 = require('vs/editor/common/viewLayout/viewLineRenderer');
var viewLineToken_1 = require('vs/editor/common/core/viewLineToken');
var Colorizer = (function () {
    function Colorizer() {
    }
    Colorizer.colorizeElement = function (modeService, domNode, options) {
        options = options || {};
        var theme = options.theme || 'vs';
        var mimeType = options.mimeType || domNode.getAttribute('lang') || domNode.getAttribute('data-lang');
        if (!mimeType) {
            console.error('Mode not detected');
            return;
        }
        var text = domNode.firstChild.nodeValue;
        domNode.className += 'monaco-editor ' + theme;
        var render = function (str) {
            domNode.innerHTML = str;
        };
        return this.colorize(modeService, text, mimeType, options).then(render, function (err) { return console.error(err); }, render);
    };
    Colorizer._tokenizationSupportChangedPromise = function (languageId) {
        var listener = null;
        var stopListening = function () {
            if (listener) {
                listener.dispose();
                listener = null;
            }
        };
        return new winjs_base_1.TPromise(function (c, e, p) {
            listener = modes_1.TokenizationRegistry.onDidChange(function (e) {
                if (e.languageId === languageId) {
                    stopListening();
                    c(void 0);
                }
            });
        }, stopListening);
    };
    Colorizer.colorize = function (modeService, text, mimeType, options) {
        var lines = text.split('\n');
        var languageId = modeService.getModeId(mimeType);
        options = options || {};
        if (typeof options.tabSize === 'undefined') {
            options.tabSize = 4;
        }
        // Send out the event to create the mode
        modeService.getOrCreateMode(languageId);
        var tokenizationSupport = modes_1.TokenizationRegistry.get(languageId);
        if (tokenizationSupport) {
            return winjs_base_1.TPromise.as(_colorize(lines, options.tabSize, tokenizationSupport));
        }
        // wait 500ms for mode to load, then give up
        return winjs_base_1.TPromise.any([this._tokenizationSupportChangedPromise(languageId), winjs_base_1.TPromise.timeout(500)]).then(function (_) {
            var tokenizationSupport = modes_1.TokenizationRegistry.get(languageId);
            if (tokenizationSupport) {
                return _colorize(lines, options.tabSize, tokenizationSupport);
            }
            return _fakeColorize(lines, options.tabSize);
        });
    };
    Colorizer.colorizeLine = function (line, tokens, tabSize) {
        if (tabSize === void 0) { tabSize = 4; }
        var renderResult = viewLineRenderer_1.renderLine(new viewLineRenderer_1.RenderLineInput(line, tabSize, 0, -1, 'none', false, tokens));
        return renderResult.output;
    };
    Colorizer.colorizeModelLine = function (model, lineNumber, tabSize) {
        if (tabSize === void 0) { tabSize = 4; }
        var content = model.getLineContent(lineNumber);
        var tokens = model.getLineTokens(lineNumber, false);
        var inflatedTokens = tokens.inflate();
        return this.colorizeLine(content, inflatedTokens, tabSize);
    };
    return Colorizer;
}());
exports.Colorizer = Colorizer;
function _colorize(lines, tabSize, tokenizationSupport) {
    return _actualColorize(lines, tabSize, tokenizationSupport);
}
function _fakeColorize(lines, tabSize) {
    var html = [];
    for (var i = 0, length_1 = lines.length; i < length_1; i++) {
        var line = lines[i];
        var renderResult = viewLineRenderer_1.renderLine(new viewLineRenderer_1.RenderLineInput(line, tabSize, 0, -1, 'none', false, []));
        html = html.concat(renderResult.output);
        html.push('<br/>');
    }
    return html.join('');
}
function _actualColorize(lines, tabSize, tokenizationSupport) {
    var html = [];
    var state = tokenizationSupport.getInitialState();
    for (var i = 0, length_2 = lines.length; i < length_2; i++) {
        var line = lines[i];
        var tokenizeResult = tokenizationSupport.tokenize(line, state);
        var renderResult = viewLineRenderer_1.renderLine(new viewLineRenderer_1.RenderLineInput(line, tabSize, 0, -1, 'none', false, tokenizeResult.tokens.map(function (t) { return new viewLineToken_1.ViewLineToken(t.startIndex, t.type); })));
        html = html.concat(renderResult.output);
        html.push('<br/>');
        state = tokenizeResult.endState;
    }
    return html.join('');
}
