import Severity from 'vs/base/common/severity';
import { TPromise } from 'vs/base/common/winjs.base';
import { IConfigurationService, IConfigurationServiceEvent, IConfigurationValue } from 'vs/platform/configuration/common/configuration';
import { IEditor, IEditorInput, IEditorOptions, IEditorService, IResourceInput, ITextEditorModel, Position } from 'vs/platform/editor/common/editor';
import { AbstractExtensionService, ActivatedExtension } from 'vs/platform/extensions/common/abstractExtensionService';
import { IExtensionDescription, IExtensionService } from 'vs/platform/extensions/common/extensions';
import { ICommandService, ICommand, ICommandHandler } from 'vs/platform/commands/common/commands';
import { KeybindingService } from 'vs/platform/keybinding/browser/keybindingServiceImpl';
import { IKeybindingItem } from 'vs/platform/keybinding/common/keybinding';
import { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';
import { IConfirmation, IMessageService } from 'vs/platform/message/common/message';
import * as editorCommon from 'vs/editor/common/editorCommon';
import { ICodeEditor, IDiffEditor } from 'vs/editor/browser/editorBrowser';
import { Selection } from 'vs/editor/common/core/selection';
import Event from 'vs/base/common/event';
import { CommandService } from 'vs/platform/commands/common/commandService';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import { IProgressService, IProgressRunner } from 'vs/platform/progress/common/progress';
export declare class SimpleEditor implements IEditor {
    input: IEditorInput;
    options: IEditorOptions;
    position: Position;
    _widget: editorCommon.IEditor;
    constructor(editor: editorCommon.IEditor);
    getId(): string;
    getControl(): editorCommon.IEditor;
    getSelection(): Selection;
    focus(): void;
    isVisible(): boolean;
    withTypedEditor<T>(codeEditorCallback: (editor: ICodeEditor) => T, diffEditorCallback: (editor: IDiffEditor) => T): T;
}
export declare class SimpleModel implements ITextEditorModel {
    private model;
    private _onDispose;
    constructor(model: editorCommon.IModel);
    readonly onDispose: Event<void>;
    load(): TPromise<SimpleModel>;
    readonly textEditorModel: editorCommon.IModel;
    dispose(): void;
}
export interface IOpenEditorDelegate {
    (url: string): boolean;
}
export declare class SimpleEditorService implements IEditorService {
    _serviceBrand: any;
    private editor;
    private openEditorDelegate;
    constructor();
    setEditor(editor: editorCommon.IEditor): void;
    setOpenEditorDelegate(openEditorDelegate: IOpenEditorDelegate): void;
    openEditor(typedData: IResourceInput, sideBySide?: boolean): TPromise<IEditor>;
    private doOpenEditor(editor, data);
    private findModel(editor, data);
    resolveEditorModel(typedData: IResourceInput, refresh?: boolean): TPromise<ITextEditorModel>;
}
export declare class SimpleProgressService implements IProgressService {
    _serviceBrand: any;
    private static NULL_PROGRESS_RUNNER;
    show(infinite: boolean, delay?: number): IProgressRunner;
    show(total: number, delay?: number): IProgressRunner;
    showWhile(promise: TPromise<any>, delay?: number): TPromise<void>;
}
export declare class SimpleMessageService implements IMessageService {
    _serviceBrand: any;
    private static Empty;
    show(sev: Severity, message: any): () => void;
    hideAll(): void;
    confirm(confirmation: IConfirmation): boolean;
}
export declare class StandaloneCommandService extends CommandService {
    private _dynamicCommands;
    constructor(instantiationService: IInstantiationService, extensionService: IExtensionService);
    addCommand(id: string, command: ICommand): void;
    protected _getCommand(id: string): ICommand;
}
export declare class StandaloneKeybindingService extends KeybindingService {
    private static LAST_GENERATED_ID;
    private _dynamicKeybindings;
    constructor(contextKeyService: IContextKeyService, commandService: ICommandService, messageService: IMessageService, domNode: HTMLElement);
    addDynamicKeybinding(keybinding: number, handler: ICommandHandler, when: string, commandId?: string): string;
    protected _getExtraKeybindings(isFirstTime: boolean): IKeybindingItem[];
}
export declare class SimpleExtensionService extends AbstractExtensionService<ActivatedExtension> {
    constructor();
    protected _showMessage(severity: Severity, msg: string): void;
    protected _createFailedExtension(): ActivatedExtension;
    protected _actualActivateExtension(extensionDescription: IExtensionDescription): TPromise<ActivatedExtension>;
}
export declare class SimpleConfigurationService implements IConfigurationService {
    _serviceBrand: any;
    private _onDidUpdateConfiguration;
    onDidUpdateConfiguration: Event<IConfigurationServiceEvent>;
    private _config;
    constructor();
    getConfiguration<T>(section?: string): T;
    reloadConfiguration<T>(section?: string): TPromise<T>;
    lookup<C>(key: string): IConfigurationValue<C>;
}
