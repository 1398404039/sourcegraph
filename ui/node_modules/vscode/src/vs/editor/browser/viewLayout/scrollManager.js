/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var lifecycle_1 = require('vs/base/common/lifecycle');
var dom = require('vs/base/browser/dom');
var scrollableElement_1 = require('vs/base/browser/ui/scrollbar/scrollableElement');
var editorCommon_1 = require('vs/editor/common/editorCommon');
var editorBrowser_1 = require('vs/editor/browser/editorBrowser');
function addPropertyIfPresent(src, dst, prop) {
    if (src.hasOwnProperty(prop)) {
        dst[prop] = src[prop];
    }
}
var ScrollManager = (function () {
    function ScrollManager(configuration, privateViewEventBus, linesContent, viewDomNode, overflowGuardDomNode) {
        var _this = this;
        this.toDispose = [];
        this.configuration = configuration;
        this.privateViewEventBus = privateViewEventBus;
        this.linesContent = linesContent;
        var configScrollbarOpts = this.configuration.editor.viewInfo.scrollbar;
        var scrollbarOptions = {
            canUseTranslate3d: this.configuration.editor.viewInfo.canUseTranslate3d,
            listenOnDomNode: viewDomNode,
            vertical: configScrollbarOpts.vertical,
            horizontal: configScrollbarOpts.horizontal,
            className: editorBrowser_1.ClassNames.SCROLLABLE_ELEMENT + ' ' + this.configuration.editor.viewInfo.theme,
            useShadows: false,
            lazyRender: true,
            saveLastScrollTimeOnClassName: editorBrowser_1.ClassNames.VIEW_LINE
        };
        addPropertyIfPresent(configScrollbarOpts, scrollbarOptions, 'verticalHasArrows');
        addPropertyIfPresent(configScrollbarOpts, scrollbarOptions, 'horizontalHasArrows');
        addPropertyIfPresent(configScrollbarOpts, scrollbarOptions, 'verticalScrollbarSize');
        addPropertyIfPresent(configScrollbarOpts, scrollbarOptions, 'verticalSliderSize');
        addPropertyIfPresent(configScrollbarOpts, scrollbarOptions, 'horizontalScrollbarSize');
        addPropertyIfPresent(configScrollbarOpts, scrollbarOptions, 'horizontalSliderSize');
        addPropertyIfPresent(configScrollbarOpts, scrollbarOptions, 'handleMouseWheel');
        addPropertyIfPresent(configScrollbarOpts, scrollbarOptions, 'arrowSize');
        addPropertyIfPresent(configScrollbarOpts, scrollbarOptions, 'mouseWheelScrollSensitivity');
        this.scrollbar = new scrollableElement_1.ScrollableElement(linesContent, scrollbarOptions);
        this.onLayoutInfoChanged();
        this.toDispose.push(this.scrollbar);
        this.toDispose.push(this.scrollbar.onScroll(function (e) {
            _this.privateViewEventBus.emit(editorCommon_1.EventType.ViewScrollChanged, e);
        }));
        this.toDispose.push(this.configuration.onDidChange(function (e) {
            _this.scrollbar.updateClassName(editorBrowser_1.ClassNames.SCROLLABLE_ELEMENT + ' ' + _this.configuration.editor.viewInfo.theme);
            if (e.viewInfo.scrollbar || e.viewInfo.canUseTranslate3d) {
                var newOpts = {
                    canUseTranslate3d: _this.configuration.editor.viewInfo.canUseTranslate3d,
                    handleMouseWheel: _this.configuration.editor.viewInfo.scrollbar.handleMouseWheel,
                    mouseWheelScrollSensitivity: _this.configuration.editor.viewInfo.scrollbar.mouseWheelScrollSensitivity
                };
                _this.scrollbar.updateOptions(newOpts);
            }
        }));
        // When having a zone widget that calls .focus() on one of its dom elements,
        // the browser will try desperately to reveal that dom node, unexpectedly
        // changing the .scrollTop of this.linesContent
        var onBrowserDesperateReveal = function (domNode, lookAtScrollTop, lookAtScrollLeft) {
            var newScrollPosition = {};
            if (lookAtScrollTop) {
                var deltaTop = domNode.scrollTop;
                if (deltaTop) {
                    newScrollPosition.scrollTop = _this.getScrollTop() + deltaTop;
                    domNode.scrollTop = 0;
                }
            }
            if (lookAtScrollLeft) {
                var deltaLeft = domNode.scrollLeft;
                if (deltaLeft) {
                    newScrollPosition.scrollLeft = _this.getScrollLeft() + deltaLeft;
                    domNode.scrollLeft = 0;
                }
            }
            _this.setScrollPosition(newScrollPosition);
        };
        // I've seen this happen both on the view dom node & on the lines content dom node.
        this.toDispose.push(dom.addDisposableListener(viewDomNode, 'scroll', function (e) { return onBrowserDesperateReveal(viewDomNode, true, true); }));
        this.toDispose.push(dom.addDisposableListener(linesContent, 'scroll', function (e) { return onBrowserDesperateReveal(linesContent, true, false); }));
        this.toDispose.push(dom.addDisposableListener(overflowGuardDomNode, 'scroll', function (e) { return onBrowserDesperateReveal(overflowGuardDomNode, true, false); }));
    }
    ScrollManager.prototype.dispose = function () {
        this.toDispose = lifecycle_1.dispose(this.toDispose);
    };
    ScrollManager.prototype.renderScrollbar = function () {
        this.scrollbar.renderNow();
    };
    ScrollManager.prototype.onLayoutInfoChanged = function () {
        this.scrollbar.updateState({
            width: this.configuration.editor.layoutInfo.contentWidth,
            height: this.configuration.editor.layoutInfo.contentHeight
        });
    };
    ScrollManager.prototype.getOverviewRulerLayoutInfo = function () {
        return this.scrollbar.getOverviewRulerLayoutInfo();
    };
    ScrollManager.prototype.getScrollbarContainerDomNode = function () {
        return this.scrollbar.getDomNode();
    };
    ScrollManager.prototype.delegateVerticalScrollbarMouseDown = function (browserEvent) {
        this.scrollbar.delegateVerticalScrollbarMouseDown(browserEvent);
    };
    ScrollManager.prototype.getWidth = function () {
        return this.scrollbar.getWidth();
    };
    ScrollManager.prototype.getScrollWidth = function () {
        return this.scrollbar.getScrollWidth();
    };
    ScrollManager.prototype.getScrollLeft = function () {
        return this.scrollbar.getScrollLeft();
    };
    ScrollManager.prototype.getHeight = function () {
        return this.scrollbar.getHeight();
    };
    ScrollManager.prototype.getScrollHeight = function () {
        return this.scrollbar.getScrollHeight();
    };
    ScrollManager.prototype.getScrollTop = function () {
        return this.scrollbar.getScrollTop();
    };
    ScrollManager.prototype.setScrollPosition = function (position) {
        this.scrollbar.updateState(position);
    };
    ScrollManager.prototype.setScrollHeight = function (scrollHeight) {
        this.scrollbar.updateState({
            scrollHeight: scrollHeight
        });
    };
    ScrollManager.prototype.setScrollWidth = function (scrollWidth) {
        this.scrollbar.updateState({
            scrollWidth: scrollWidth
        });
    };
    return ScrollManager;
}());
exports.ScrollManager = ScrollManager;
