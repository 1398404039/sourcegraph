/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var modeTransition_1 = require('vs/editor/common/core/modeTransition');
var LineTokens = (function () {
    function LineTokens(tokens, modeTransitions, actualStopOffset, endState) {
        this.tokens = tokens;
        this.modeTransitions = modeTransitions;
        this.actualStopOffset = actualStopOffset;
        this.endState = endState;
        this.retokenize = null;
    }
    return LineTokens;
}());
exports.LineTokens = LineTokens;
function handleEvent(context, offset, runner) {
    var modeTransitions = context.modeTransitions;
    if (modeTransitions.length === 1) {
        return runner(modeTransitions[0].modeId, context, offset);
    }
    var modeIndex = modeTransition_1.ModeTransition.findIndexInSegmentsArray(modeTransitions, offset);
    var nestedModeId = modeTransitions[modeIndex].modeId;
    var modeStartIndex = modeTransitions[modeIndex].startIndex;
    var firstTokenInModeIndex = context.findIndexOfOffset(modeStartIndex);
    var nextCharacterAfterModeIndex = -1;
    var nextTokenAfterMode = -1;
    if (modeIndex + 1 < modeTransitions.length) {
        nextTokenAfterMode = context.findIndexOfOffset(modeTransitions[modeIndex + 1].startIndex);
        nextCharacterAfterModeIndex = context.getTokenStartOffset(nextTokenAfterMode);
    }
    else {
        nextTokenAfterMode = context.getTokenCount();
        nextCharacterAfterModeIndex = context.getLineContent().length;
    }
    var firstTokenCharacterOffset = context.getTokenStartOffset(firstTokenInModeIndex);
    var newCtx = new FilteredLineContext(context, nestedModeId, firstTokenInModeIndex, nextTokenAfterMode, firstTokenCharacterOffset, nextCharacterAfterModeIndex);
    return runner(nestedModeId, newCtx, offset - firstTokenCharacterOffset);
}
exports.handleEvent = handleEvent;
var FilteredLineContext = (function () {
    function FilteredLineContext(actual, modeId, firstTokenInModeIndex, nextTokenAfterMode, firstTokenCharacterOffset, nextCharacterAfterModeIndex) {
        this.modeTransitions = [new modeTransition_1.ModeTransition(0, modeId)];
        this._actual = actual;
        this._firstTokenInModeIndex = firstTokenInModeIndex;
        this._nextTokenAfterMode = nextTokenAfterMode;
        this._firstTokenCharacterOffset = firstTokenCharacterOffset;
        this._nextCharacterAfterModeIndex = nextCharacterAfterModeIndex;
    }
    FilteredLineContext.prototype.getLineContent = function () {
        var actualLineContent = this._actual.getLineContent();
        return actualLineContent.substring(this._firstTokenCharacterOffset, this._nextCharacterAfterModeIndex);
    };
    FilteredLineContext.prototype.getTokenCount = function () {
        return this._nextTokenAfterMode - this._firstTokenInModeIndex;
    };
    FilteredLineContext.prototype.findIndexOfOffset = function (offset) {
        return this._actual.findIndexOfOffset(offset + this._firstTokenCharacterOffset) - this._firstTokenInModeIndex;
    };
    FilteredLineContext.prototype.getTokenStartOffset = function (tokenIndex) {
        return this._actual.getTokenStartOffset(tokenIndex + this._firstTokenInModeIndex) - this._firstTokenCharacterOffset;
    };
    FilteredLineContext.prototype.getTokenType = function (tokenIndex) {
        return this._actual.getTokenType(tokenIndex + this._firstTokenInModeIndex);
    };
    return FilteredLineContext;
}());
exports.FilteredLineContext = FilteredLineContext;
var IGNORE_IN_TOKENS = /\b(comment|string|regex)\b/;
function ignoreBracketsInToken(tokenType) {
    return IGNORE_IN_TOKENS.test(tokenType);
}
exports.ignoreBracketsInToken = ignoreBracketsInToken;
