/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var filters_1 = require('vs/base/common/filters');
var async_1 = require('vs/base/common/async');
var TextualSuggestSupport = (function () {
    function TextualSuggestSupport(editorWorkerService, configurationService) {
        this._editorWorkerService = editorWorkerService;
        this._configurationService = configurationService;
    }
    Object.defineProperty(TextualSuggestSupport.prototype, "triggerCharacters", {
        get: function () {
            return [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextualSuggestSupport.prototype, "filter", {
        get: function () {
            return filters_1.matchesPrefix;
        },
        enumerable: true,
        configurable: true
    });
    TextualSuggestSupport.prototype.provideCompletionItems = function (model, position, token) {
        var config = this._configurationService.getConfiguration('editor');
        if (!config || config.wordBasedSuggestions) {
            return async_1.wireCancellationToken(token, this._editorWorkerService.textualSuggest(model.uri, position));
        }
    };
    return TextualSuggestSupport;
}());
exports.TextualSuggestSupport = TextualSuggestSupport;
function filterSuggestions(value) {
    if (!value) {
        return;
    }
    return {
        currentWord: value.currentWord,
        suggestions: value.suggestions.filter(function (element) { return !!filters_1.fuzzyContiguousFilter(value.currentWord, element.label); }),
        incomplete: value.incomplete
    };
}
exports.filterSuggestions = filterSuggestions;
