/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var modeTransition_1 = require('vs/editor/common/core/modeTransition');
var token_1 = require('vs/editor/common/core/token');
var NullState = (function () {
    function NullState(modeId, stateData) {
        this.modeId = modeId;
        this.stateData = stateData;
    }
    NullState.prototype.clone = function () {
        var stateDataClone = (this.stateData ? this.stateData.clone() : null);
        return new NullState(this.modeId, stateDataClone);
    };
    NullState.prototype.equals = function (other) {
        if (this.modeId !== other.getModeId()) {
            return false;
        }
        var otherStateData = other.getStateData();
        if (!this.stateData && !otherStateData) {
            return true;
        }
        if (this.stateData && otherStateData) {
            return this.stateData.equals(otherStateData);
        }
        return false;
    };
    NullState.prototype.getModeId = function () {
        return this.modeId;
    };
    NullState.prototype.tokenize = function (stream) {
        stream.advanceToEOS();
        return { type: '' };
    };
    NullState.prototype.getStateData = function () {
        return this.stateData;
    };
    NullState.prototype.setStateData = function (stateData) {
        this.stateData = stateData;
    };
    return NullState;
}());
exports.NullState = NullState;
exports.NULL_MODE_ID = 'vs.editor.nullMode';
function nullTokenize(modeId, buffer, state, deltaOffset, stopAtOffset) {
    if (deltaOffset === void 0) { deltaOffset = 0; }
    var tokens = [new token_1.Token(deltaOffset, '')];
    var modeTransitions = [new modeTransition_1.ModeTransition(deltaOffset, modeId)];
    return {
        tokens: tokens,
        actualStopOffset: deltaOffset + buffer.length,
        endState: state,
        modeTransitions: modeTransitions
    };
}
exports.nullTokenize = nullTokenize;
