/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var modes_1 = require('vs/editor/common/modes');
var characterPair_1 = require('vs/editor/common/modes/supports/characterPair');
var electricCharacter_1 = require('vs/editor/common/modes/supports/electricCharacter');
var onEnter_1 = require('vs/editor/common/modes/supports/onEnter');
var richEditBrackets_1 = require('vs/editor/common/modes/supports/richEditBrackets');
var event_1 = require('vs/base/common/event');
var errors_1 = require('vs/base/common/errors');
var position_1 = require('vs/editor/common/core/position');
var strings = require('vs/base/common/strings');
var wordHelper_1 = require('vs/editor/common/model/wordHelper');
var RichEditSupport = (function () {
    function RichEditSupport(modeId, previous, rawConf) {
        var prev = null;
        if (previous) {
            prev = previous._conf;
        }
        this._conf = RichEditSupport._mergeConf(prev, rawConf);
        if (this._conf.brackets) {
            this.brackets = new richEditBrackets_1.RichEditBrackets(modeId, this._conf.brackets);
        }
        this._handleOnEnter(modeId, this._conf);
        this._handleComments(modeId, this._conf);
        this.characterPair = new characterPair_1.CharacterPairSupport(exports.LanguageConfigurationRegistry, modeId, this._conf);
        this.electricCharacter = new electricCharacter_1.BracketElectricCharacterSupport(exports.LanguageConfigurationRegistry, modeId, this.brackets, this.characterPair.getAutoClosingPairs(), this._conf.__electricCharacterSupport);
        this.wordDefinition = this._conf.wordPattern || wordHelper_1.DEFAULT_WORD_REGEXP;
    }
    RichEditSupport._mergeConf = function (prev, current) {
        return {
            comments: (prev ? current.comments || prev.comments : current.comments),
            brackets: (prev ? current.brackets || prev.brackets : current.brackets),
            wordPattern: (prev ? current.wordPattern || prev.wordPattern : current.wordPattern),
            indentationRules: (prev ? current.indentationRules || prev.indentationRules : current.indentationRules),
            onEnterRules: (prev ? current.onEnterRules || prev.onEnterRules : current.onEnterRules),
            autoClosingPairs: (prev ? current.autoClosingPairs || prev.autoClosingPairs : current.autoClosingPairs),
            surroundingPairs: (prev ? current.surroundingPairs || prev.surroundingPairs : current.surroundingPairs),
            __electricCharacterSupport: (prev ? current.__electricCharacterSupport || prev.__electricCharacterSupport : current.__electricCharacterSupport),
        };
    };
    RichEditSupport.prototype._handleOnEnter = function (modeId, conf) {
        // on enter
        var onEnter = {};
        var empty = true;
        if (conf.brackets) {
            empty = false;
            onEnter.brackets = conf.brackets;
        }
        if (conf.indentationRules) {
            empty = false;
            onEnter.indentationRules = conf.indentationRules;
        }
        if (conf.onEnterRules) {
            empty = false;
            onEnter.regExpRules = conf.onEnterRules;
        }
        if (!empty) {
            this.onEnter = new onEnter_1.OnEnterSupport(exports.LanguageConfigurationRegistry, modeId, onEnter);
        }
    };
    RichEditSupport.prototype._handleComments = function (modeId, conf) {
        var commentRule = conf.comments;
        // comment configuration
        if (commentRule) {
            this.comments = {};
            if (commentRule.lineComment) {
                this.comments.lineCommentToken = commentRule.lineComment;
            }
            if (commentRule.blockComment) {
                var _a = commentRule.blockComment, blockStart = _a[0], blockEnd = _a[1];
                this.comments.blockCommentStartToken = blockStart;
                this.comments.blockCommentEndToken = blockEnd;
            }
        }
    };
    return RichEditSupport;
}());
exports.RichEditSupport = RichEditSupport;
var LanguageConfigurationRegistryImpl = (function () {
    function LanguageConfigurationRegistryImpl() {
        this._onDidChange = new event_1.Emitter();
        this.onDidChange = this._onDidChange.event;
        this._entries = Object.create(null);
    }
    LanguageConfigurationRegistryImpl.prototype.register = function (languageId, configuration) {
        var previous = this._entries[languageId] || null;
        this._entries[languageId] = new RichEditSupport(languageId, previous, configuration);
        this._onDidChange.fire(void 0);
        return {
            dispose: function () { }
        };
    };
    LanguageConfigurationRegistryImpl.prototype._getRichEditSupport = function (modeId) {
        return this._entries[modeId];
    };
    LanguageConfigurationRegistryImpl.prototype.getElectricCharacterSupport = function (modeId) {
        var value = this._getRichEditSupport(modeId);
        if (!value) {
            return null;
        }
        return value.electricCharacter || null;
    };
    LanguageConfigurationRegistryImpl.prototype.getComments = function (modeId) {
        var value = this._getRichEditSupport(modeId);
        if (!value) {
            return null;
        }
        return value.comments || null;
    };
    LanguageConfigurationRegistryImpl.prototype.getCharacterPairSupport = function (modeId) {
        var value = this._getRichEditSupport(modeId);
        if (!value) {
            return null;
        }
        return value.characterPair || null;
    };
    LanguageConfigurationRegistryImpl.prototype.getWordDefinition = function (modeId) {
        var value = this._getRichEditSupport(modeId);
        if (!value) {
            return null;
        }
        return value.wordDefinition || null;
    };
    LanguageConfigurationRegistryImpl.prototype.getOnEnterSupport = function (modeId) {
        var value = this._getRichEditSupport(modeId);
        if (!value) {
            return null;
        }
        return value.onEnter || null;
    };
    LanguageConfigurationRegistryImpl.prototype.getRawEnterActionAtPosition = function (model, lineNumber, column) {
        var result;
        var onEnterSupport = this.getOnEnterSupport(model.getMode().getId());
        if (onEnterSupport) {
            try {
                result = onEnterSupport.onEnter(model, new position_1.Position(lineNumber, column));
            }
            catch (e) {
                errors_1.onUnexpectedError(e);
            }
        }
        return result;
    };
    LanguageConfigurationRegistryImpl.prototype.getEnterActionAtPosition = function (model, lineNumber, column) {
        var lineText = model.getLineContent(lineNumber);
        var indentation = strings.getLeadingWhitespace(lineText);
        if (indentation.length > column - 1) {
            indentation = indentation.substring(0, column - 1);
        }
        var enterAction = this.getRawEnterActionAtPosition(model, lineNumber, column);
        if (!enterAction) {
            enterAction = {
                indentAction: modes_1.IndentAction.None,
                appendText: '',
            };
        }
        else {
            if (!enterAction.appendText) {
                if ((enterAction.indentAction === modes_1.IndentAction.Indent) ||
                    (enterAction.indentAction === modes_1.IndentAction.IndentOutdent)) {
                    enterAction.appendText = '\t';
                }
                else {
                    enterAction.appendText = '';
                }
            }
        }
        if (enterAction.removeText) {
            indentation = indentation.substring(0, indentation.length - 1);
        }
        return {
            enterAction: enterAction,
            indentation: indentation
        };
    };
    LanguageConfigurationRegistryImpl.prototype.getBracketsSupport = function (modeId) {
        var value = this._getRichEditSupport(modeId);
        if (!value) {
            return null;
        }
        return value.brackets || null;
    };
    return LanguageConfigurationRegistryImpl;
}());
exports.LanguageConfigurationRegistryImpl = LanguageConfigurationRegistryImpl;
exports.LanguageConfigurationRegistry = new LanguageConfigurationRegistryImpl();
