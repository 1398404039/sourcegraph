import { CharacterPairSupport } from 'vs/editor/common/modes/supports/characterPair';
import { BracketElectricCharacterSupport, IElectricAction } from 'vs/editor/common/modes/supports/electricCharacter';
import { OnEnterSupport } from 'vs/editor/common/modes/supports/onEnter';
import { RichEditBrackets } from 'vs/editor/common/modes/supports/richEditBrackets';
import Event from 'vs/base/common/event';
import { ITokenizedModel } from 'vs/editor/common/editorCommon';
import { IDisposable } from 'vs/base/common/lifecycle';
import { LineTokens } from 'vs/editor/common/core/lineTokens';
import { EnterAction, IAutoClosingPair, LanguageConfiguration } from 'vs/editor/common/modes/languageConfiguration';
/**
 * Interface used to support insertion of mode specific comments.
 */
export interface ICommentsConfiguration {
    lineCommentToken?: string;
    blockCommentStartToken?: string;
    blockCommentEndToken?: string;
}
export declare class RichEditSupport {
    private _conf;
    electricCharacter: BracketElectricCharacterSupport;
    comments: ICommentsConfiguration;
    characterPair: CharacterPairSupport;
    wordDefinition: RegExp;
    onEnter: OnEnterSupport;
    brackets: RichEditBrackets;
    constructor(modeId: string, previous: RichEditSupport, rawConf: LanguageConfiguration);
    private static _mergeConf(prev, current);
    private _handleOnEnter(modeId, conf);
    private _handleComments(modeId, conf);
}
export declare class LanguageConfigurationRegistryImpl {
    private _entries;
    private _onDidChange;
    onDidChange: Event<void>;
    constructor();
    register(languageId: string, configuration: LanguageConfiguration): IDisposable;
    private _getRichEditSupport(modeId);
    private _getElectricCharacterSupport(modeId);
    getElectricCharacters(modeId: string): string[];
    /**
     * Should return opening bracket type to match indentation with
     */
    onElectricCharacter(character: string, context: LineTokens, column: number): IElectricAction;
    getComments(modeId: string): ICommentsConfiguration;
    private _getCharacterPairSupport(modeId);
    getAutoClosingPairs(modeId: string): IAutoClosingPair[];
    getSurroundingPairs(modeId: string): IAutoClosingPair[];
    shouldAutoClosePair(character: string, context: LineTokens, column: number): boolean;
    getWordDefinition(modeId: string): RegExp;
    private _getOnEnterSupport(modeId);
    getRawEnterActionAtPosition(model: ITokenizedModel, lineNumber: number, column: number): EnterAction;
    getEnterActionAtPosition(model: ITokenizedModel, lineNumber: number, column: number): {
        enterAction: EnterAction;
        indentation: string;
    };
    getBracketsSupport(modeId: string): RichEditBrackets;
}
export declare const LanguageConfigurationRegistry: LanguageConfigurationRegistryImpl;
