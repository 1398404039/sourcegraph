/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
/**
 * A LineStream is a character & token stream abstraction over a line of text. It
 *  is never multi-line. The stream can be navigated character by character, or
 *  token by token, given some token rules.
 * @internal
 */
var LineStream = (function () {
    function LineStream(source) {
        this._source = source;
        this._sourceLength = source.length;
        this._pos = 0;
    }
    /**
     * Returns the current character position of the stream on the line.
     */
    LineStream.prototype.pos = function () {
        return this._pos;
    };
    /**
     * Returns true iff the stream is at the end of the line.
     */
    LineStream.prototype.eos = function () {
        return this._pos >= this._sourceLength;
    };
    /**
     * Returns the next character in the stream.
     */
    LineStream.prototype.peek = function () {
        // Check EOS
        if (this._pos >= this._sourceLength) {
            throw new Error('Stream is at the end');
        }
        return this._source[this._pos];
    };
    /**
     * Advances the stream by `n` characters.
     */
    LineStream.prototype.advance = function (n) {
        if (n === 0) {
            return;
        }
        this._pos += n;
    };
    /**
     * Advances the stream until the end of the line.
     */
    LineStream.prototype.advanceToEOS = function () {
        var oldPos = this._pos;
        this._pos = this._sourceLength;
        return this._source.substring(oldPos, this._pos);
    };
    /**
     * Brings the stream back `n` characters.
     */
    LineStream.prototype.goBack = function (n) {
        this._pos -= n;
    };
    return LineStream;
}());
exports.LineStream = LineStream;
