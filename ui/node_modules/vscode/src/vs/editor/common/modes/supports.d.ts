import { TPromise } from 'vs/base/common/winjs.base';
import * as modes from 'vs/editor/common/modes';
import { ModeTransition } from 'vs/editor/common/core/modeTransition';
import { Token } from 'vs/editor/common/core/token';
import { LineTokens, StandardTokenType } from 'vs/editor/common/core/lineTokens';
export declare class RawLineTokens implements modes.ILineTokens {
    _lineTokensBrand: void;
    tokens: Token[];
    modeTransitions: ModeTransition[];
    actualStopOffset: number;
    endState: modes.IState;
    retokenize: TPromise<void>;
    constructor(tokens: Token[], modeTransitions: ModeTransition[], actualStopOffset: number, endState: modes.IState);
}
export declare function createScopedLineTokens(context: LineTokens, offset: number): ScopedLineTokens;
export declare class ScopedLineTokens {
    _scopedLineTokensBrand: void;
    readonly modeId: string;
    private readonly _actual;
    private readonly _firstTokenIndex;
    private readonly _lastTokenIndex;
    readonly firstCharOffset: number;
    private readonly _lastCharOffset;
    constructor(actual: LineTokens, modeId: string, firstTokenIndex: number, lastTokenIndex: number, firstCharOffset: number, lastCharOffset: number);
    getLineContent(): string;
    getTokenCount(): number;
    findTokenIndexAtOffset(offset: number): number;
    getTokenStartOffset(tokenIndex: number): number;
    getStandardTokenType(tokenIndex: number): StandardTokenType;
}
export declare function ignoreBracketsInToken(standardTokenType: StandardTokenType): boolean;
