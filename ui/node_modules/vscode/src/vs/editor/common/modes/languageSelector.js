/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var glob_1 = require("vs/base/common/glob"); // TODO@Alex
function matches(selection, uri, language) {
    return score(selection, uri, language) > 0;
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = matches;
function score(selector, uri, language) {
    if (Array.isArray(selector)) {
        // for each
        var values = selector.map(function (item) { return score(item, uri, language); });
        return Math.max.apply(Math, values);
    }
    else if (typeof selector === 'string') {
        // compare language id
        if (selector === language) {
            return 10;
        }
        else if (selector === '*') {
            return 5;
        }
        else {
            return 0;
        }
    }
    else if (selector) {
        // all must match but only highest score counts
        var filter = selector;
        var valueLanguage = 0;
        var valueScheme = 0;
        var valuePattern = 0;
        // language id
        if (filter.language) {
            if (filter.language === language) {
                valueLanguage = 10;
            }
            else if (filter.language === '*') {
                valueLanguage = 5;
            }
            else {
                return 0;
            }
        }
        // scheme
        if (filter.scheme) {
            if (filter.scheme === uri.scheme) {
                valueScheme = 10;
            }
            else {
                return 0;
            }
        }
        // match fsPath with pattern
        if (filter.pattern) {
            if (filter.pattern === uri.fsPath) {
                valuePattern = 10;
            }
            else if (glob_1.match(filter.pattern, uri.fsPath)) {
                valuePattern = 5;
            }
            else {
                return 0;
            }
        }
        return Math.max(valueLanguage, valueScheme, valuePattern);
    }
}
exports.score = score;
