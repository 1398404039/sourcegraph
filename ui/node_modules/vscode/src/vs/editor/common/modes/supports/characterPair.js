/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var supports_1 = require('vs/editor/common/modes/supports');
var CharacterPairSupport = (function () {
    function CharacterPairSupport(registry, modeId, config) {
        this._registry = registry;
        this._modeId = modeId;
        this._autoClosingPairs = config.autoClosingPairs;
        if (!this._autoClosingPairs) {
            this._autoClosingPairs = config.brackets ? config.brackets.map(function (b) { return ({ open: b[0], close: b[1] }); }) : [];
        }
        this._surroundingPairs = config.surroundingPairs || this._autoClosingPairs;
    }
    CharacterPairSupport.prototype.getAutoClosingPairs = function () {
        return this._autoClosingPairs;
    };
    CharacterPairSupport.prototype.shouldAutoClosePair = function (character, context, offset) {
        var _this = this;
        return supports_1.handleEvent(context, offset, function (nestedModeId, context, offset) {
            if (_this._modeId === nestedModeId) {
                // Always complete on empty line
                if (context.getTokenCount() === 0) {
                    return true;
                }
                var tokenIndex = context.findIndexOfOffset(offset - 1);
                var tokenType = context.getTokenType(tokenIndex);
                for (var i = 0; i < _this._autoClosingPairs.length; ++i) {
                    if (_this._autoClosingPairs[i].open === character) {
                        if (_this._autoClosingPairs[i].notIn) {
                            for (var notInIndex = 0; notInIndex < _this._autoClosingPairs[i].notIn.length; ++notInIndex) {
                                if (tokenType.indexOf(_this._autoClosingPairs[i].notIn[notInIndex]) > -1) {
                                    return false;
                                }
                            }
                        }
                        break;
                    }
                }
                return true;
            }
            var characterPairSupport = _this._registry.getCharacterPairSupport(nestedModeId);
            if (characterPairSupport) {
                return characterPairSupport.shouldAutoClosePair(character, context, offset);
            }
            return null;
        });
    };
    CharacterPairSupport.prototype.getSurroundingPairs = function () {
        return this._surroundingPairs;
    };
    return CharacterPairSupport;
}());
exports.CharacterPairSupport = CharacterPairSupport;
