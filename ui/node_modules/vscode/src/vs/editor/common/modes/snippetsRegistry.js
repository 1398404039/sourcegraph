/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var nls_1 = require('vs/nls');
var strings = require('vs/base/common/strings');
var platform_1 = require('vs/platform/platform');
exports.Extensions = {
    Snippets: 'base.contributions.snippets'
};
var SnippetsRegistry = (function () {
    function SnippetsRegistry() {
        this._snippets = Object.create(null);
    }
    SnippetsRegistry.prototype.registerSnippets = function (modeId, snippets, owner) {
        if (owner === void 0) { owner = ''; }
        var snippetsByMode = this._snippets[modeId];
        if (!snippetsByMode) {
            this._snippets[modeId] = snippetsByMode = {};
        }
        snippetsByMode[owner] = snippets;
    };
    SnippetsRegistry.prototype.visitSnippets = function (modeId, accept) {
        var snippetsByMode = this._snippets[modeId];
        if (snippetsByMode) {
            for (var s in snippetsByMode) {
                var result = snippetsByMode[s].every(accept);
                if (!result) {
                    return;
                }
            }
        }
    };
    SnippetsRegistry.prototype.getSnippetCompletions = function (model, position) {
        var modeId = model.getModeId();
        if (!this._snippets[modeId]) {
            return;
        }
        var result = [];
        var word = model.getWordAtPosition(position);
        var currentWord = word ? word.word.substring(0, position.column - word.startColumn).toLowerCase() : '';
        var currentFullWord = getNonWhitespacePrefix(model, position).toLowerCase();
        this.visitSnippets(modeId, function (s) {
            var overwriteBefore;
            if (currentWord.length === 0 && currentFullWord.length === 0) {
                // if there's no prefix, only show snippets at the beginning of the line, or after a whitespace
                overwriteBefore = 0;
            }
            else {
                var label = s.prefix.toLowerCase();
                // force that the current word or full word matches with the snippet prefix
                if (currentWord.length > 0 && strings.startsWith(label, currentWord)) {
                    overwriteBefore = currentWord.length;
                }
                else if (currentFullWord.length > currentWord.length && strings.startsWith(label, currentFullWord)) {
                    overwriteBefore = currentFullWord.length;
                }
                else {
                    return true;
                }
            }
            // store in result
            result.push({
                type: 'snippet',
                label: s.prefix,
                get disambiguateLabel() { return nls_1.localize('snippetSuggest.longLabel', "{0}, {1}", s.prefix, s.name); },
                detail: s.owner,
                documentation: s.description,
                insertText: s.codeSnippet,
                noAutoAccept: true,
                isTMSnippet: true,
                overwriteBefore: overwriteBefore
            });
            return true;
        });
        // dismbiguate suggestions with same labels
        var lastSuggestion;
        for (var _i = 0, _a = result.sort(SnippetsRegistry._compareSuggestionsByLabel); _i < _a.length; _i++) {
            var suggestion = _a[_i];
            if (lastSuggestion && lastSuggestion.label === suggestion.label) {
                // use the disambiguateLabel instead of the actual label
                lastSuggestion.label = lastSuggestion.disambiguateLabel;
                suggestion.label = suggestion.disambiguateLabel;
            }
            lastSuggestion = suggestion;
        }
        return result;
    };
    SnippetsRegistry._compareSuggestionsByLabel = function (a, b) {
        return strings.compare(a.label, b.label);
    };
    return SnippetsRegistry;
}());
function getNonWhitespacePrefix(model, position) {
    /**
     * Do not analyze more characters
     */
    var MAX_PREFIX_LENGTH = 100;
    var line = model.getLineContent(position.lineNumber).substr(0, position.column - 1);
    var minChIndex = Math.max(0, line.length - MAX_PREFIX_LENGTH);
    for (var chIndex = line.length - 1; chIndex >= minChIndex; chIndex--) {
        var ch = line.charAt(chIndex);
        if (/\s/.test(ch)) {
            return line.substr(chIndex + 1);
        }
    }
    if (minChIndex === 0) {
        return line;
    }
    return '';
}
exports.getNonWhitespacePrefix = getNonWhitespacePrefix;
var snippetsRegistry = new SnippetsRegistry();
platform_1.Registry.add(exports.Extensions.Snippets, snippetsRegistry);
