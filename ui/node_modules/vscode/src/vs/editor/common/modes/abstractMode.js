/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var instantiation_1 = require('vs/platform/instantiation/common/instantiation');
var configuration_1 = require('vs/platform/configuration/common/configuration');
var modes = require('vs/editor/common/modes');
var suggestSupport_1 = require('vs/editor/common/modes/supports/suggestSupport');
var editorWorkerService_1 = require('vs/editor/common/services/editorWorkerService');
// TODO@Alex: inline to FrankensteinMode, review optional IEditorWorkerService
var AbstractMode = (function () {
    function AbstractMode(modeId) {
        this._modeId = modeId;
    }
    AbstractMode.prototype.getId = function () {
        return this._modeId;
    };
    return AbstractMode;
}());
exports.AbstractMode = AbstractMode;
var FrankensteinMode = (function (_super) {
    __extends(FrankensteinMode, _super);
    function FrankensteinMode(descriptor, configurationService, editorWorkerService) {
        _super.call(this, descriptor.id);
        if (editorWorkerService) {
            modes.SuggestRegistry.register(this.getId(), new suggestSupport_1.TextualSuggestSupport(editorWorkerService, configurationService), true);
        }
    }
    FrankensteinMode = __decorate([
        __param(1, configuration_1.IConfigurationService),
        __param(2, instantiation_1.optional(editorWorkerService_1.IEditorWorkerService))
    ], FrankensteinMode);
    return FrankensteinMode;
}(AbstractMode));
exports.FrankensteinMode = FrankensteinMode;
