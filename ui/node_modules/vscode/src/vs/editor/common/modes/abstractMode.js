/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var winjs_base_1 = require('vs/base/common/winjs.base');
var descriptors_1 = require('vs/platform/instantiation/common/descriptors');
var instantiation_1 = require('vs/platform/instantiation/common/instantiation');
var configuration_1 = require('vs/platform/configuration/common/configuration');
var modes = require('vs/editor/common/modes');
var suggestSupport_1 = require('vs/editor/common/modes/supports/suggestSupport');
var editorWorkerService_1 = require('vs/editor/common/services/editorWorkerService');
var wordHelper = require('vs/editor/common/model/wordHelper');
function createWordRegExp(allowInWords) {
    if (allowInWords === void 0) { allowInWords = ''; }
    return wordHelper.createWordRegExp(allowInWords);
}
exports.createWordRegExp = createWordRegExp;
var ModeWorkerManager = (function () {
    function ModeWorkerManager(descriptor, workerModuleId, workerClassName, superWorkerModuleId, instantiationService) {
        this._descriptor = descriptor;
        this._workerDescriptor = descriptors_1.createAsyncDescriptor1(workerModuleId, workerClassName);
        this._superWorkerModuleId = superWorkerModuleId;
        this._instantiationService = instantiationService;
        this._workerPiecePromise = null;
    }
    ModeWorkerManager.prototype.worker = function (runner) {
        return this._getOrCreateWorker().then(runner);
    };
    ModeWorkerManager.prototype._getOrCreateWorker = function () {
        var _this = this;
        if (!this._workerPiecePromise) {
            // TODO@Alex: workaround for missing `bundles` config
            // First, load the code of the worker super class
            var superWorkerCodePromise = (this._superWorkerModuleId ? ModeWorkerManager._loadModule(this._superWorkerModuleId) : winjs_base_1.TPromise.as(null));
            this._workerPiecePromise = superWorkerCodePromise.then(function () {
                // Second, load the code of the worker (without instantiating it)
                return ModeWorkerManager._loadModule(_this._workerDescriptor.moduleName);
            }).then(function () {
                // Finally, create the mode worker instance
                return _this._instantiationService.createInstance(_this._workerDescriptor, _this._descriptor.id);
            });
        }
        return this._workerPiecePromise;
    };
    ModeWorkerManager._loadModule = function (moduleName) {
        return new winjs_base_1.TPromise(function (c, e, p) {
            // Use the global require to be sure to get the global config
            self.require([moduleName], c, e);
        }, function () {
            // Cannot cancel loading code
        });
    };
    return ModeWorkerManager;
}());
exports.ModeWorkerManager = ModeWorkerManager;
var AbstractMode = (function () {
    function AbstractMode(modeId) {
        this._modeId = modeId;
    }
    AbstractMode.prototype.getId = function () {
        return this._modeId;
    };
    return AbstractMode;
}());
exports.AbstractMode = AbstractMode;
var CompatMode = (function (_super) {
    __extends(CompatMode, _super);
    function CompatMode(modeId, compatWorkerService) {
        _super.call(this, modeId);
        this.compatWorkerService = compatWorkerService;
        if (this.compatWorkerService) {
            this.compatWorkerService.registerCompatMode(this);
        }
    }
    return CompatMode;
}(AbstractMode));
exports.CompatMode = CompatMode;
function isDigit(character, base) {
    var c = character.charCodeAt(0);
    switch (base) {
        case 1:
            return c === 48 /* Digit0 */;
        case 2:
            return c >= 48 /* Digit0 */ && c <= 49 /* Digit1 */;
        case 3:
            return c >= 48 /* Digit0 */ && c <= 50 /* Digit2 */;
        case 4:
            return c >= 48 /* Digit0 */ && c <= 51 /* Digit3 */;
        case 5:
            return c >= 48 /* Digit0 */ && c <= 52 /* Digit4 */;
        case 6:
            return c >= 48 /* Digit0 */ && c <= 53 /* Digit5 */;
        case 7:
            return c >= 48 /* Digit0 */ && c <= 54 /* Digit6 */;
        case 8:
            return c >= 48 /* Digit0 */ && c <= 55 /* Digit7 */;
        case 9:
            return c >= 48 /* Digit0 */ && c <= 56 /* Digit8 */;
        case 10:
            return c >= 48 /* Digit0 */ && c <= 57 /* Digit9 */;
        case 11:
            return (c >= 48 /* Digit0 */ && c <= 57 /* Digit9 */) || (c === 97 /* a */) || (c === 65 /* A */);
        case 12:
            return (c >= 48 /* Digit0 */ && c <= 57 /* Digit9 */) || (c >= 97 /* a */ && c <= 98 /* b */) || (c >= 65 /* A */ && c <= 66 /* B */);
        case 13:
            return (c >= 48 /* Digit0 */ && c <= 57 /* Digit9 */) || (c >= 97 /* a */ && c <= 99 /* c */) || (c >= 65 /* A */ && c <= 67 /* C */);
        case 14:
            return (c >= 48 /* Digit0 */ && c <= 57 /* Digit9 */) || (c >= 97 /* a */ && c <= 100 /* d */) || (c >= 65 /* A */ && c <= 68 /* D */);
        case 15:
            return (c >= 48 /* Digit0 */ && c <= 57 /* Digit9 */) || (c >= 97 /* a */ && c <= 101 /* e */) || (c >= 65 /* A */ && c <= 69 /* E */);
        default:
            return (c >= 48 /* Digit0 */ && c <= 57 /* Digit9 */) || (c >= 97 /* a */ && c <= 102 /* f */) || (c >= 65 /* A */ && c <= 70 /* F */);
    }
}
exports.isDigit = isDigit;
var FrankensteinMode = (function (_super) {
    __extends(FrankensteinMode, _super);
    function FrankensteinMode(descriptor, configurationService, editorWorkerService) {
        _super.call(this, descriptor.id);
        if (editorWorkerService) {
            modes.SuggestRegistry.register(this.getId(), new suggestSupport_1.TextualSuggestSupport(editorWorkerService, configurationService), true);
        }
    }
    FrankensteinMode = __decorate([
        __param(1, configuration_1.IConfigurationService),
        __param(2, instantiation_1.optional(editorWorkerService_1.IEditorWorkerService))
    ], FrankensteinMode);
    return FrankensteinMode;
}(AbstractMode));
exports.FrankensteinMode = FrankensteinMode;
