/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var editorCommon_1 = require('vs/editor/common/editorCommon');
var EditorLayoutProvider = (function () {
    function EditorLayoutProvider() {
    }
    EditorLayoutProvider.compute = function (_opts) {
        var outerWidth = _opts.outerWidth | 0;
        var outerHeight = _opts.outerHeight | 0;
        var showGlyphMargin = Boolean(_opts.showGlyphMargin);
        var lineHeight = _opts.lineHeight | 0;
        var showLineNumbers = Boolean(_opts.showLineNumbers);
        var lineNumbersMinChars = _opts.lineNumbersMinChars | 0;
        var lineDecorationsWidth = _opts.lineDecorationsWidth | 0;
        var maxDigitWidth = Number(_opts.maxDigitWidth);
        var maxLineNumber = _opts.maxLineNumber | 0;
        var verticalScrollbarWidth = _opts.verticalScrollbarWidth | 0;
        var verticalScrollbarHasArrows = Boolean(_opts.verticalScrollbarHasArrows);
        var scrollbarArrowSize = _opts.scrollbarArrowSize | 0;
        var horizontalScrollbarHeight = _opts.horizontalScrollbarHeight | 0;
        var lineNumbersWidth = 0;
        if (showLineNumbers) {
            var digitCount = Math.max(this.digitCount(maxLineNumber), lineNumbersMinChars);
            lineNumbersWidth = Math.round(digitCount * maxDigitWidth);
        }
        var glyphMarginWidth = 0;
        if (showGlyphMargin) {
            glyphMarginWidth = lineHeight;
        }
        var contentWidth = outerWidth - glyphMarginWidth - lineNumbersWidth - lineDecorationsWidth;
        var glyphMarginLeft = 0;
        var lineNumbersLeft = glyphMarginLeft + glyphMarginWidth;
        var decorationsLeft = lineNumbersLeft + lineNumbersWidth;
        var contentLeft = decorationsLeft + lineDecorationsWidth;
        var verticalArrowSize = (verticalScrollbarHasArrows ? scrollbarArrowSize : 0);
        return new editorCommon_1.EditorLayoutInfo({
            width: outerWidth,
            height: outerHeight,
            glyphMarginLeft: glyphMarginLeft,
            glyphMarginWidth: glyphMarginWidth,
            glyphMarginHeight: outerHeight,
            lineNumbersLeft: lineNumbersLeft,
            lineNumbersWidth: lineNumbersWidth,
            lineNumbersHeight: outerHeight,
            decorationsLeft: decorationsLeft,
            decorationsWidth: lineDecorationsWidth,
            decorationsHeight: outerHeight,
            contentLeft: contentLeft,
            contentWidth: contentWidth,
            contentHeight: outerHeight,
            verticalScrollbarWidth: verticalScrollbarWidth,
            horizontalScrollbarHeight: horizontalScrollbarHeight,
            overviewRuler: new editorCommon_1.OverviewRulerPosition({
                top: verticalArrowSize,
                width: verticalScrollbarWidth,
                height: (outerHeight - 2 * verticalArrowSize),
                right: 0
            })
        });
    };
    EditorLayoutProvider.digitCount = function (n) {
        var r = 0;
        while (n) {
            n = Math.floor(n / 10);
            r++;
        }
        return r ? r : 1;
    };
    return EditorLayoutProvider;
}());
exports.EditorLayoutProvider = EditorLayoutProvider;
