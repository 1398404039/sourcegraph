import { TokensInflatorMap } from 'vs/editor/common/model/tokensBinaryEncoding';
import { ModeTransition } from 'vs/editor/common/core/modeTransition';
import { ViewLineToken } from 'vs/editor/common/core/viewLineToken';
export declare class LineToken {
    _lineTokenBrand: void;
    private _source;
    private _tokenIndex;
    private _modeIndex;
    startOffset: number;
    endOffset: number;
    type: string;
    modeId: string;
    hasPrev: boolean;
    hasNext: boolean;
    constructor(source: LineTokens, tokenIndex: number, modeIndex: number);
    prev(): LineToken;
    next(): LineToken;
}
export declare class LineTokens {
    _lineTokensBrand: void;
    private _map;
    private _tokens;
    private _textLength;
    modeTransitions: ModeTransition[];
    constructor(map: TokensInflatorMap, tokens: number[], modeTransitions: ModeTransition[], textLength: number);
    getTokenCount(): number;
    getTokenStartOffset(tokenIndex: number): number;
    getTokenType(tokenIndex: number): string;
    getTokenEndOffset(tokenIndex: number): number;
    equals(other: LineTokens): boolean;
    findTokenIndexAtOffset(offset: number): number;
    findTokenAtOffset(offset: number): LineToken;
    firstToken(): LineToken;
    lastToken(): LineToken;
    inflate(): ViewLineToken[];
    sliceAndInflate(startOffset: number, endOffset: number, deltaStartIndex: number): ViewLineToken[];
}
