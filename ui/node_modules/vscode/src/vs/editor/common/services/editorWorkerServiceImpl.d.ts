import { Disposable } from 'vs/base/common/lifecycle';
import URI from 'vs/base/common/uri';
import { TPromise } from 'vs/base/common/winjs.base';
import * as editorCommon from 'vs/editor/common/editorCommon';
import * as modes from 'vs/editor/common/modes';
import { IEditorWorkerService } from 'vs/editor/common/services/editorWorkerService';
import { IModelService } from 'vs/editor/common/services/modelService';
import { EditorSimpleWorkerImpl } from 'vs/editor/common/services/editorSimpleWorker';
import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
export declare class EditorWorkerServiceImpl implements IEditorWorkerService {
    _serviceBrand: any;
    private _workerManager;
    private _registrations;
    constructor(modelService: IModelService, configurationService: IConfigurationService);
    dispose(): void;
    computeDiff(original: URI, modified: URI, ignoreTrimWhitespace: boolean): TPromise<editorCommon.ILineChange[]>;
    computeDirtyDiff(original: URI, modified: URI, ignoreTrimWhitespace: boolean): TPromise<editorCommon.IChange[]>;
    computeMoreMinimalEdits(resource: URI, edits: editorCommon.ISingleEditOperation[], ranges: editorCommon.IRange[]): TPromise<editorCommon.ISingleEditOperation[]>;
    navigateValueSet(resource: URI, range: editorCommon.IRange, up: boolean): TPromise<modes.IInplaceReplaceSupportResult>;
}
export declare class EditorWorkerClient extends Disposable {
    private _modelService;
    private _worker;
    private _workerFactory;
    private _modelManager;
    constructor(modelService: IModelService, label: string);
    private _getOrCreateWorker();
    protected _getProxy(): TPromise<EditorSimpleWorkerImpl>;
    private _getOrCreateModelManager(proxy);
    protected _withSyncedResources(resources: URI[]): TPromise<EditorSimpleWorkerImpl>;
    computeDiff(original: URI, modified: URI, ignoreTrimWhitespace: boolean): TPromise<editorCommon.ILineChange[]>;
    computeDirtyDiff(original: URI, modified: URI, ignoreTrimWhitespace: boolean): TPromise<editorCommon.IChange[]>;
    computeMoreMinimalEdits(resource: URI, edits: editorCommon.ISingleEditOperation[], ranges: editorCommon.IRange[]): TPromise<editorCommon.ISingleEditOperation[]>;
    computeLinks(resource: URI): TPromise<modes.ILink[]>;
    textualSuggest(resource: URI, position: editorCommon.IPosition): TPromise<modes.ISuggestResult>;
    navigateValueSet(resource: URI, range: editorCommon.IRange, up: boolean): TPromise<modes.IInplaceReplaceSupportResult>;
}
