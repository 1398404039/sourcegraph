/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var async_1 = require('vs/base/common/async');
var lifecycle_1 = require('vs/base/common/lifecycle');
var winjs_base_1 = require('vs/base/common/winjs.base');
var simpleWorker_1 = require('vs/base/common/worker/simpleWorker');
var defaultWorkerFactory_1 = require('vs/base/worker/defaultWorkerFactory');
var editorCommon = require('vs/editor/common/editorCommon');
var textModelWithTokensHelpers_1 = require('vs/editor/common/model/textModelWithTokensHelpers');
var modes_1 = require('vs/editor/common/modes');
var modelService_1 = require('vs/editor/common/services/modelService');
var editorSimpleWorker_1 = require('vs/editor/common/services/editorSimpleWorker');
/**
 * Stop syncing a model to the worker if it was not needed for 1 min.
 */
var STOP_SYNC_MODEL_DELTA_TIME_MS = 60 * 1000;
/**
 * Stop the worker if it was not needed for 5 min.
 */
var STOP_WORKER_DELTA_TIME_MS = 5 * 60 * 1000;
var EditorWorkerServiceImpl = (function () {
    function EditorWorkerServiceImpl(modelService) {
        var _this = this;
        this._workerManager = new WorkerManager(modelService);
        // todo@joh make sure this happens only once
        this._registration = modes_1.LinkProviderRegistry.register('*', {
            provideLinks: function (model, token) {
                return async_1.wireCancellationToken(token, _this._workerManager.withWorker().then(function (client) { return client.computeLinks(model.uri); }));
            }
        });
    }
    EditorWorkerServiceImpl.prototype.dispose = function () {
        this._workerManager.dispose();
        this._registration.dispose();
    };
    EditorWorkerServiceImpl.prototype.computeDiff = function (original, modified, ignoreTrimWhitespace) {
        return this._workerManager.withWorker().then(function (client) { return client.computeDiff(original, modified, ignoreTrimWhitespace); });
    };
    EditorWorkerServiceImpl.prototype.computeDirtyDiff = function (original, modified, ignoreTrimWhitespace) {
        return this._workerManager.withWorker().then(function (client) { return client.computeDirtyDiff(original, modified, ignoreTrimWhitespace); });
    };
    EditorWorkerServiceImpl.prototype.textualSuggest = function (resource, position) {
        return this._workerManager.withWorker().then(function (client) { return client.textualSuggest(resource, position); });
    };
    EditorWorkerServiceImpl.prototype.navigateValueSet = function (resource, range, up) {
        return this._workerManager.withWorker().then(function (client) { return client.navigateValueSet(resource, range, up); });
    };
    EditorWorkerServiceImpl = __decorate([
        __param(0, modelService_1.IModelService)
    ], EditorWorkerServiceImpl);
    return EditorWorkerServiceImpl;
}());
exports.EditorWorkerServiceImpl = EditorWorkerServiceImpl;
var WorkerManager = (function (_super) {
    __extends(WorkerManager, _super);
    function WorkerManager(modelService) {
        var _this = this;
        _super.call(this);
        this._modelService = modelService;
        this._editorWorkerClient = null;
        var stopWorkerInterval = this._register(new async_1.IntervalTimer());
        stopWorkerInterval.cancelAndSet(function () { return _this._checkStopWorker(); }, Math.round(STOP_WORKER_DELTA_TIME_MS / 2));
    }
    WorkerManager.prototype.dispose = function () {
        if (this._editorWorkerClient) {
            this._editorWorkerClient.dispose();
            this._editorWorkerClient = null;
        }
        _super.prototype.dispose.call(this);
    };
    WorkerManager.prototype._checkStopWorker = function () {
        if (!this._editorWorkerClient) {
            return;
        }
        var timeSinceLastWorkerUsedTime = (new Date()).getTime() - this._lastWorkerUsedTime;
        if (timeSinceLastWorkerUsedTime > STOP_WORKER_DELTA_TIME_MS) {
            this._editorWorkerClient.dispose();
            this._editorWorkerClient = null;
        }
    };
    WorkerManager.prototype.withWorker = function () {
        this._lastWorkerUsedTime = (new Date()).getTime();
        if (!this._editorWorkerClient) {
            this._editorWorkerClient = new EditorWorkerClient(this._modelService, 'editorWorkerService');
        }
        return winjs_base_1.TPromise.as(this._editorWorkerClient);
    };
    return WorkerManager;
}(lifecycle_1.Disposable));
var EditorModelManager = (function (_super) {
    __extends(EditorModelManager, _super);
    function EditorModelManager(proxy, modelService, keepIdleModels) {
        var _this = this;
        _super.call(this);
        this._syncedModels = Object.create(null);
        this._syncedModelsLastUsedTime = Object.create(null);
        this._proxy = proxy;
        this._modelService = modelService;
        if (!keepIdleModels) {
            var timer = new async_1.IntervalTimer();
            timer.cancelAndSet(function () { return _this._checkStopModelSync(); }, Math.round(STOP_SYNC_MODEL_DELTA_TIME_MS / 2));
            this._register(timer);
        }
    }
    EditorModelManager.prototype.dispose = function () {
        for (var modelUrl in this._syncedModels) {
            lifecycle_1.dispose(this._syncedModels[modelUrl]);
        }
        this._syncedModels = Object.create(null);
        this._syncedModelsLastUsedTime = Object.create(null);
        _super.prototype.dispose.call(this);
    };
    EditorModelManager.prototype.esureSyncedResources = function (resources) {
        for (var i = 0; i < resources.length; i++) {
            var resource = resources[i];
            var resourceStr = resource.toString();
            if (!this._syncedModels[resourceStr]) {
                this._beginModelSync(resource);
            }
            if (this._syncedModels[resourceStr]) {
                this._syncedModelsLastUsedTime[resourceStr] = (new Date()).getTime();
            }
        }
    };
    EditorModelManager.prototype._checkStopModelSync = function () {
        var currentTime = (new Date()).getTime();
        var toRemove = [];
        for (var modelUrl in this._syncedModelsLastUsedTime) {
            var elapsedTime = currentTime - this._syncedModelsLastUsedTime[modelUrl];
            if (elapsedTime > STOP_SYNC_MODEL_DELTA_TIME_MS) {
                toRemove.push(modelUrl);
            }
        }
        for (var i = 0; i < toRemove.length; i++) {
            this._stopModelSync(toRemove[i]);
        }
    };
    EditorModelManager.prototype._beginModelSync = function (resource) {
        var _this = this;
        var modelUrl = resource.toString();
        var model = this._modelService.getModel(resource);
        if (!model) {
            return;
        }
        if (model.isTooLargeForHavingARichMode()) {
            return;
        }
        this._proxy.acceptNewModel({
            url: model.uri.toString(),
            value: model.toRawText(),
            versionId: model.getVersionId()
        });
        var toDispose = [];
        toDispose.push(model.addBulkListener(function (events) {
            var changedEvents = [];
            for (var i = 0, len = events.length; i < len; i++) {
                var e = events[i];
                switch (e.getType()) {
                    case editorCommon.EventType.ModelContentChanged2:
                        changedEvents.push(e.getData());
                        break;
                    case editorCommon.EventType.ModelDispose:
                        _this._stopModelSync(modelUrl);
                        return;
                }
            }
            if (changedEvents.length > 0) {
                _this._proxy.acceptModelChanged(modelUrl.toString(), changedEvents);
            }
        }));
        toDispose.push({
            dispose: function () {
                _this._proxy.acceptRemovedModel(modelUrl);
            }
        });
        this._syncedModels[modelUrl] = toDispose;
    };
    EditorModelManager.prototype._stopModelSync = function (modelUrl) {
        var toDispose = this._syncedModels[modelUrl];
        delete this._syncedModels[modelUrl];
        delete this._syncedModelsLastUsedTime[modelUrl];
        lifecycle_1.dispose(toDispose);
    };
    return EditorModelManager;
}(lifecycle_1.Disposable));
var SynchronousWorkerClient = (function () {
    function SynchronousWorkerClient(instance) {
        this._instance = instance;
        this._proxyObj = winjs_base_1.TPromise.as(this._instance);
    }
    SynchronousWorkerClient.prototype.dispose = function () {
        this._instance.dispose();
        this._instance = null;
        this._proxyObj = null;
    };
    SynchronousWorkerClient.prototype.getProxyObject = function () {
        return new async_1.ShallowCancelThenPromise(this._proxyObj);
    };
    return SynchronousWorkerClient;
}());
var EditorWorkerClient = (function (_super) {
    __extends(EditorWorkerClient, _super);
    function EditorWorkerClient(modelService, label) {
        _super.call(this);
        this._modelService = modelService;
        this._workerFactory = new defaultWorkerFactory_1.DefaultWorkerFactory(label);
        this._worker = null;
        this._modelManager = null;
    }
    EditorWorkerClient.prototype._getOrCreateWorker = function () {
        if (!this._worker) {
            try {
                this._worker = this._register(new simpleWorker_1.SimpleWorkerClient(this._workerFactory, 'vs/editor/common/services/editorSimpleWorker'));
            }
            catch (err) {
                simpleWorker_1.logOnceWebWorkerWarning(err);
                this._worker = new SynchronousWorkerClient(new editorSimpleWorker_1.EditorSimpleWorkerImpl());
            }
        }
        return this._worker;
    };
    EditorWorkerClient.prototype._getProxy = function () {
        var _this = this;
        return new async_1.ShallowCancelThenPromise(this._getOrCreateWorker().getProxyObject().then(null, function (err) {
            simpleWorker_1.logOnceWebWorkerWarning(err);
            _this._worker = new SynchronousWorkerClient(new editorSimpleWorker_1.EditorSimpleWorkerImpl());
            return _this._getOrCreateWorker().getProxyObject();
        }));
    };
    EditorWorkerClient.prototype._getOrCreateModelManager = function (proxy) {
        if (!this._modelManager) {
            this._modelManager = this._register(new EditorModelManager(proxy, this._modelService, false));
        }
        return this._modelManager;
    };
    EditorWorkerClient.prototype._withSyncedResources = function (resources) {
        var _this = this;
        return this._getProxy().then(function (proxy) {
            _this._getOrCreateModelManager(proxy).esureSyncedResources(resources);
            return proxy;
        });
    };
    EditorWorkerClient.prototype.computeDiff = function (original, modified, ignoreTrimWhitespace) {
        return this._withSyncedResources([original, modified]).then(function (proxy) {
            return proxy.computeDiff(original.toString(), modified.toString(), ignoreTrimWhitespace);
        });
    };
    EditorWorkerClient.prototype.computeDirtyDiff = function (original, modified, ignoreTrimWhitespace) {
        return this._withSyncedResources([original, modified]).then(function (proxy) {
            return proxy.computeDirtyDiff(original.toString(), modified.toString(), ignoreTrimWhitespace);
        });
    };
    EditorWorkerClient.prototype.computeLinks = function (resource) {
        return this._withSyncedResources([resource]).then(function (proxy) {
            return proxy.computeLinks(resource.toString());
        });
    };
    EditorWorkerClient.prototype.textualSuggest = function (resource, position) {
        var _this = this;
        return this._withSyncedResources([resource]).then(function (proxy) {
            var model = _this._modelService.getModel(resource);
            if (!model) {
                return null;
            }
            var wordDefRegExp = textModelWithTokensHelpers_1.WordHelper.massageWordDefinitionOf(model.getModeId());
            var wordDef = wordDefRegExp.source;
            var wordDefFlags = (wordDefRegExp.global ? 'g' : '') + (wordDefRegExp.ignoreCase ? 'i' : '') + (wordDefRegExp.multiline ? 'm' : '');
            return proxy.textualSuggest(resource.toString(), position, wordDef, wordDefFlags);
        });
    };
    EditorWorkerClient.prototype.navigateValueSet = function (resource, range, up) {
        var _this = this;
        return this._withSyncedResources([resource]).then(function (proxy) {
            var model = _this._modelService.getModel(resource);
            if (!model) {
                return null;
            }
            var wordDefRegExp = textModelWithTokensHelpers_1.WordHelper.massageWordDefinitionOf(model.getModeId());
            var wordDef = wordDefRegExp.source;
            var wordDefFlags = (wordDefRegExp.global ? 'g' : '') + (wordDefRegExp.ignoreCase ? 'i' : '') + (wordDefRegExp.multiline ? 'm' : '');
            return proxy.navigateValueSet(resource.toString(), range, up, wordDef, wordDefFlags);
        });
    };
    return EditorWorkerClient;
}(lifecycle_1.Disposable));
exports.EditorWorkerClient = EditorWorkerClient;
