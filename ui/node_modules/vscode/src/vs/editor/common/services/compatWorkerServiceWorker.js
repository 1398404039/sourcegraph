/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var winjs_base_1 = require('vs/base/common/winjs.base');
var resourceService_1 = require('vs/editor/common/services/resourceService');
var modeService_1 = require('vs/editor/common/services/modeService');
var compatMirrorModel_1 = require('vs/editor/common/model/compatMirrorModel');
var errors_1 = require('vs/base/common/errors');
var modesRegistry_1 = require('vs/editor/common/modes/modesRegistry');
var CompatWorkerServiceWorker = (function () {
    function CompatWorkerServiceWorker(resourceService, modeService, modesRegistryData) {
        this.resourceService = resourceService;
        this.modeService = modeService;
        this.isInMainThread = false;
        modesRegistry_1.ModesRegistry.registerCompatModes(modesRegistryData.compatModes);
        modesRegistry_1.ModesRegistry.registerLanguages(modesRegistryData.languages);
        this._compatModes = Object.create(null);
    }
    CompatWorkerServiceWorker.prototype.registerCompatMode = function (compatMode) {
        this._compatModes[compatMode.getId()] = compatMode;
    };
    CompatWorkerServiceWorker.prototype.handleMainRequest = function (rpcId, methodName, args) {
        if (rpcId === '$') {
            switch (methodName) {
                case 'acceptNewModel':
                    return this._acceptNewModel(args[0]);
                case 'acceptDidDisposeModel':
                    return this._acceptDidDisposeModel(args[0]);
                case 'acceptModelEvents':
                    return this._acceptModelEvents(args[0], args[1]);
                case 'acceptCompatModes':
                    return this._acceptCompatModes(args[0]);
                case 'acceptLanguages':
                    return this._acceptLanguages(args[0]);
                case 'instantiateCompatMode':
                    return this._instantiateCompatMode(args[0]);
            }
        }
        var obj = this._compatModes[rpcId];
        return winjs_base_1.TPromise.as(obj[methodName].apply(obj, args));
    };
    CompatWorkerServiceWorker.prototype.CompatWorker = function (obj, methodName, target, param) {
        return target.apply(obj, param);
    };
    CompatWorkerServiceWorker.prototype._acceptNewModel = function (data) {
        var _this = this;
        // Create & insert the mirror model eagerly in the resource service
        var mirrorModel = new compatMirrorModel_1.CompatMirrorModel(data.versionId, data.value, null, data.url);
        this.resourceService.insert(mirrorModel.uri, mirrorModel);
        // Block worker execution until the mode is instantiated
        return this.modeService.getOrCreateMode(data.modeId).then(function (mode) {
            // Changing mode should trigger a remove & an add, therefore:
            // (1) Remove from resource service
            _this.resourceService.remove(mirrorModel.uri);
            // (2) Change mode
            mirrorModel.setMode(mode.getId());
            // (3) Insert again to resource service (it will have the new mode)
            _this.resourceService.insert(mirrorModel.uri, mirrorModel);
        });
    };
    CompatWorkerServiceWorker.prototype._acceptDidDisposeModel = function (uri) {
        var model = this.resourceService.get(uri);
        this.resourceService.remove(uri);
        model.dispose();
    };
    CompatWorkerServiceWorker.prototype._acceptModelEvents = function (uri, events) {
        var model = this.resourceService.get(uri);
        try {
            model.onEvents(events);
        }
        catch (err) {
            errors_1.onUnexpectedError(err);
        }
    };
    CompatWorkerServiceWorker.prototype._acceptCompatModes = function (modes) {
        modesRegistry_1.ModesRegistry.registerCompatModes(modes);
    };
    CompatWorkerServiceWorker.prototype._acceptLanguages = function (languages) {
        modesRegistry_1.ModesRegistry.registerLanguages(languages);
    };
    CompatWorkerServiceWorker.prototype._instantiateCompatMode = function (modeId) {
        return this.modeService.getOrCreateMode(modeId).then(function (_) { return void 0; });
    };
    CompatWorkerServiceWorker = __decorate([
        __param(0, resourceService_1.IResourceService),
        __param(1, modeService_1.IModeService)
    ], CompatWorkerServiceWorker);
    return CompatWorkerServiceWorker;
}());
exports.CompatWorkerServiceWorker = CompatWorkerServiceWorker;
