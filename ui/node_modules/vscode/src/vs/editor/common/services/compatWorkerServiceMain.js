/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var winjs_base_1 = require('vs/base/common/winjs.base');
var editorCommon_1 = require('vs/editor/common/editorCommon');
var defaultWorkerFactory_1 = require('vs/base/worker/defaultWorkerFactory');
var workerClient_1 = require('vs/base/common/worker/workerClient');
var modelService_1 = require('vs/editor/common/services/modelService');
var modesRegistry_1 = require('vs/editor/common/modes/modesRegistry');
var MainThreadCompatWorkerService = (function () {
    function MainThreadCompatWorkerService(modelService) {
        var _this = this;
        this.isInMainThread = true;
        this._workerFactory = new defaultWorkerFactory_1.DefaultWorkerFactory('compatWorker', true);
        this._worker = null;
        this._workerCreatedPromise = new winjs_base_1.TPromise(function (c, e, p) {
            _this._triggerWorkersCreatedPromise = c;
        }, function () {
            // Not cancelable
        });
        this._modelListeners = Object.create(null);
        var isInterestingModel = function (model) {
            if (model.isTooLargeForHavingARichMode()) {
                return false;
            }
            var modeId = model.getModeId();
            var compatModes = modesRegistry_1.ModesRegistry.getCompatModes();
            for (var i = 0; i < compatModes.length; i++) {
                if (compatModes[i].id === modeId) {
                    return true;
                }
            }
            return false;
        };
        var onModelAdded = function (model) {
            if (!isInterestingModel(model)) {
                return;
            }
            _this._modelListeners[model.uri.toString()] = model.addBulkListener(function (events) {
                var contentChangedEvents = (events
                    .filter(function (e) { return e.getType() === editorCommon_1.EventType.ModelRawContentChanged; })
                    .map(function (e) { return e.getData(); }));
                if (contentChangedEvents.length === 0) {
                    return;
                }
                _this._call('$', 'acceptModelEvents', [model.uri, { contentChanged: contentChangedEvents }]);
            });
            _this._call('$', 'acceptNewModel', [{
                    url: model.uri,
                    versionId: model.getVersionId(),
                    value: model.toRawText(),
                    modeId: model.getMode().getId()
                }]);
        };
        var onModelRemoved = function (model) {
            if (_this._modelListeners[model.uri.toString()]) {
                _this._modelListeners[model.uri.toString()].dispose();
                delete _this._modelListeners[model.uri.toString()];
                _this._call('$', 'acceptDidDisposeModel', [model.uri]);
            }
        };
        modelService.onModelAdded(onModelAdded);
        modelService.onModelRemoved(onModelRemoved);
        modelService.onModelModeChanged(function (event) {
            onModelRemoved(event.model);
            onModelAdded(event.model);
        });
    }
    MainThreadCompatWorkerService.prototype.registerCompatMode = function (compatMode) {
        this._call('$', 'instantiateCompatMode', [compatMode.getId()]);
    };
    MainThreadCompatWorkerService.prototype.CompatWorker = function (obj, methodName, target, param) {
        return this._call(obj.getId(), methodName, param);
    };
    MainThreadCompatWorkerService.prototype._ensureWorkers = function () {
        if (this._triggerWorkersCreatedPromise) {
            // Workers not created yet
            this._createWorker();
            var complete = this._triggerWorkersCreatedPromise;
            this._triggerWorkersCreatedPromise = null;
            complete(null);
        }
    };
    MainThreadCompatWorkerService.prototype._afterWorkers = function () {
        var _this = this;
        this._ensureWorkers();
        var shouldCancelPromise = false;
        return new winjs_base_1.TPromise(function (c, e, p) {
            // hide the initialize promise inside this
            // promise so that it won't be canceled by accident
            _this._workerCreatedPromise.then(function () {
                if (!shouldCancelPromise) {
                    c(null);
                }
            }, e, p);
        }, function () {
            // mark that this promise is canceled
            shouldCancelPromise = true;
        });
    };
    MainThreadCompatWorkerService.prototype._createWorker = function (isRetry) {
        var _this = this;
        if (isRetry === void 0) { isRetry = false; }
        this._worker = new workerClient_1.WorkerClient(this._workerFactory, 'vs/editor/common/worker/editorWorkerServer');
        this._worker.onModuleLoaded = this._worker.request('initialize', {
            modesRegistryData: {
                compatModes: modesRegistry_1.ModesRegistry.getCompatModes(),
                languages: modesRegistry_1.ModesRegistry.getLanguages()
            }
        }).then(function () {
            modesRegistry_1.ModesRegistry.onDidAddCompatModes(function (m) { return _this._call('$', 'acceptCompatModes', [m]); });
            modesRegistry_1.ModesRegistry.onDidAddLanguages(function (m) { return _this._call('$', 'acceptLanguages', [m]); });
        }, function (err) {
            _this._worker.dispose();
            _this._worker = null;
            if (isRetry) {
                console.warn('Creating the web worker already failed twice. Giving up!');
            }
            else {
                _this._createWorker(true);
            }
        });
    };
    MainThreadCompatWorkerService.prototype._call = function (rpcId, methodName, args) {
        var _this = this;
        return this._afterWorkers().then(function (_) {
            if (_this._worker === null) {
                throw new Error('Cannot fulfill request...');
            }
            return _this._worker.request('request', {
                target: rpcId,
                methodName: methodName,
                args: args
            });
        });
    };
    MainThreadCompatWorkerService = __decorate([
        __param(0, modelService_1.IModelService)
    ], MainThreadCompatWorkerService);
    return MainThreadCompatWorkerService;
}());
exports.MainThreadCompatWorkerService = MainThreadCompatWorkerService;
