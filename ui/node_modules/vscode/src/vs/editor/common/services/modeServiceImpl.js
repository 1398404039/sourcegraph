/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var nls = require('vs/nls');
var errors_1 = require('vs/base/common/errors');
var event_1 = require('vs/base/common/event');
var paths = require('vs/base/common/paths');
var winjs_base_1 = require('vs/base/common/winjs.base');
var mime = require('vs/base/common/mime');
var descriptors_1 = require('vs/platform/instantiation/common/descriptors');
var extensions_1 = require('vs/platform/extensions/common/extensions');
var extensionsRegistry_1 = require('vs/platform/extensions/common/extensionsRegistry');
var instantiation_1 = require('vs/platform/instantiation/common/instantiation');
var abstractMode_1 = require('vs/editor/common/modes/abstractMode');
var modesRegistry_1 = require('vs/editor/common/modes/modesRegistry');
var languagesRegistry_1 = require('vs/editor/common/services/languagesRegistry');
var configuration_1 = require('vs/platform/configuration/common/configuration');
var abstractState_1 = require('vs/editor/common/modes/abstractState');
var token_1 = require('vs/editor/common/core/token');
var modeTransition_1 = require('vs/editor/common/core/modeTransition');
var languagesExtPoint = extensionsRegistry_1.ExtensionsRegistry.registerExtensionPoint('languages', {
    description: nls.localize('vscode.extension.contributes.languages', 'Contributes language declarations.'),
    type: 'array',
    items: {
        type: 'object',
        defaultSnippets: [{ body: { id: '{{languageId}}', aliases: ['{{label}}'], extensions: ['{{extension}}'], configuration: './language-configuration.json' } }],
        properties: {
            id: {
                description: nls.localize('vscode.extension.contributes.languages.id', 'ID of the language.'),
                type: 'string'
            },
            aliases: {
                description: nls.localize('vscode.extension.contributes.languages.aliases', 'Name aliases for the language.'),
                type: 'array',
                items: {
                    type: 'string'
                }
            },
            extensions: {
                description: nls.localize('vscode.extension.contributes.languages.extensions', 'File extensions associated to the language.'),
                default: ['.foo'],
                type: 'array',
                items: {
                    type: 'string'
                }
            },
            filenames: {
                description: nls.localize('vscode.extension.contributes.languages.filenames', 'File names associated to the language.'),
                type: 'array',
                items: {
                    type: 'string'
                }
            },
            filenamePatterns: {
                description: nls.localize('vscode.extension.contributes.languages.filenamePatterns', 'File name glob patterns associated to the language.'),
                type: 'array',
                items: {
                    type: 'string'
                }
            },
            mimetypes: {
                description: nls.localize('vscode.extension.contributes.languages.mimetypes', 'Mime types associated to the language.'),
                type: 'array',
                items: {
                    type: 'string'
                }
            },
            firstLine: {
                description: nls.localize('vscode.extension.contributes.languages.firstLine', 'A regular expression matching the first line of a file of the language.'),
                type: 'string'
            },
            configuration: {
                description: nls.localize('vscode.extension.contributes.languages.configuration', 'A relative path to a file containing configuration options for the language.'),
                type: 'string',
                default: './language-configuration.json'
            }
        }
    }
});
function isUndefinedOrStringArray(value) {
    if (typeof value === 'undefined') {
        return true;
    }
    if (!Array.isArray(value)) {
        return false;
    }
    return value.every(function (item) { return typeof item === 'string'; });
}
function isValidLanguageExtensionPoint(value, collector) {
    if (!value) {
        collector.error(nls.localize('invalid.empty', "Empty value for `contributes.{0}`", languagesExtPoint.name));
        return false;
    }
    if (typeof value.id !== 'string') {
        collector.error(nls.localize('require.id', "property `{0}` is mandatory and must be of type `string`", 'id'));
        return false;
    }
    if (!isUndefinedOrStringArray(value.extensions)) {
        collector.error(nls.localize('opt.extensions', "property `{0}` can be omitted and must be of type `string[]`", 'extensions'));
        return false;
    }
    if (!isUndefinedOrStringArray(value.filenames)) {
        collector.error(nls.localize('opt.filenames', "property `{0}` can be omitted and must be of type `string[]`", 'filenames'));
        return false;
    }
    if (typeof value.firstLine !== 'undefined' && typeof value.firstLine !== 'string') {
        collector.error(nls.localize('opt.firstLine', "property `{0}` can be omitted and must be of type `string`", 'firstLine'));
        return false;
    }
    if (typeof value.configuration !== 'undefined' && typeof value.configuration !== 'string') {
        collector.error(nls.localize('opt.configuration', "property `{0}` can be omitted and must be of type `string`", 'configuration'));
        return false;
    }
    if (!isUndefinedOrStringArray(value.aliases)) {
        collector.error(nls.localize('opt.aliases', "property `{0}` can be omitted and must be of type `string[]`", 'aliases'));
        return false;
    }
    if (!isUndefinedOrStringArray(value.mimetypes)) {
        collector.error(nls.localize('opt.mimetypes', "property `{0}` can be omitted and must be of type `string[]`", 'mimetypes'));
        return false;
    }
    return true;
}
var ModeServiceImpl = (function () {
    function ModeServiceImpl(instantiationService, extensionService) {
        var _this = this;
        this._onDidAddModes = new event_1.Emitter();
        this.onDidAddModes = this._onDidAddModes.event;
        this._onDidCreateMode = new event_1.Emitter();
        this.onDidCreateMode = this._onDidCreateMode.event;
        this._instantiationService = instantiationService;
        this._extensionService = extensionService;
        this._activationPromises = {};
        this._instantiatedModes = {};
        this._registry = new languagesRegistry_1.LanguagesRegistry();
        this._registry.onDidAddModes(function (modes) { return _this._onDidAddModes.fire(modes); });
    }
    ModeServiceImpl.prototype.isRegisteredMode = function (mimetypeOrModeId) {
        return this._registry.isRegisteredMode(mimetypeOrModeId);
    };
    ModeServiceImpl.prototype.isCompatMode = function (modeId) {
        var compatModeData = this._registry.getCompatMode(modeId);
        return (compatModeData ? true : false);
    };
    ModeServiceImpl.prototype.getRegisteredModes = function () {
        return this._registry.getRegisteredModes();
    };
    ModeServiceImpl.prototype.getRegisteredLanguageNames = function () {
        return this._registry.getRegisteredLanguageNames();
    };
    ModeServiceImpl.prototype.getExtensions = function (alias) {
        return this._registry.getExtensions(alias);
    };
    ModeServiceImpl.prototype.getFilenames = function (alias) {
        return this._registry.getFilenames(alias);
    };
    ModeServiceImpl.prototype.getMimeForMode = function (modeId) {
        return this._registry.getMimeForMode(modeId);
    };
    ModeServiceImpl.prototype.getLanguageName = function (modeId) {
        return this._registry.getLanguageName(modeId);
    };
    ModeServiceImpl.prototype.getModeIdForLanguageName = function (alias) {
        return this._registry.getModeIdForLanguageNameLowercase(alias);
    };
    ModeServiceImpl.prototype.getModeId = function (commaSeparatedMimetypesOrCommaSeparatedIds) {
        var modeIds = this._registry.extractModeIds(commaSeparatedMimetypesOrCommaSeparatedIds);
        if (modeIds.length > 0) {
            return modeIds[0];
        }
        return null;
    };
    ModeServiceImpl.prototype.getConfigurationFiles = function (modeId) {
        return this._registry.getConfigurationFiles(modeId);
    };
    // --- instantiation
    ModeServiceImpl.prototype.lookup = function (commaSeparatedMimetypesOrCommaSeparatedIds) {
        var r = [];
        var modeIds = this._registry.extractModeIds(commaSeparatedMimetypesOrCommaSeparatedIds);
        for (var i = 0; i < modeIds.length; i++) {
            var modeId = modeIds[i];
            r.push({
                modeId: modeId,
                isInstantiated: this._instantiatedModes.hasOwnProperty(modeId)
            });
        }
        return r;
    };
    ModeServiceImpl.prototype.getMode = function (commaSeparatedMimetypesOrCommaSeparatedIds) {
        var modeIds = this._registry.extractModeIds(commaSeparatedMimetypesOrCommaSeparatedIds);
        var isPlainText = false;
        for (var i = 0; i < modeIds.length; i++) {
            if (this._instantiatedModes.hasOwnProperty(modeIds[i])) {
                return this._instantiatedModes[modeIds[i]];
            }
            isPlainText = isPlainText || (modeIds[i] === 'plaintext');
        }
        if (isPlainText) {
            // Try to do it synchronously
            var r = null;
            this.getOrCreateMode(commaSeparatedMimetypesOrCommaSeparatedIds).then(function (mode) {
                r = mode;
            }).done(null, errors_1.onUnexpectedError);
            return r;
        }
    };
    ModeServiceImpl.prototype.getModeIdByLanguageName = function (languageName) {
        var modeIds = this._registry.getModeIdsFromLanguageName(languageName);
        if (modeIds.length > 0) {
            return modeIds[0];
        }
        return null;
    };
    ModeServiceImpl.prototype.getModeIdByFilenameOrFirstLine = function (filename, firstLine) {
        var modeIds = this._registry.getModeIdsFromFilenameOrFirstLine(filename, firstLine);
        if (modeIds.length > 0) {
            return modeIds[0];
        }
        return null;
    };
    ModeServiceImpl.prototype.onReady = function () {
        return this._extensionService.onReady();
    };
    ModeServiceImpl.prototype.getOrCreateMode = function (commaSeparatedMimetypesOrCommaSeparatedIds) {
        var _this = this;
        return this.onReady().then(function () {
            var modeId = _this.getModeId(commaSeparatedMimetypesOrCommaSeparatedIds);
            // Fall back to plain text if no mode was found
            return _this._getOrCreateMode(modeId || 'plaintext');
        });
    };
    ModeServiceImpl.prototype.getOrCreateModeByLanguageName = function (languageName) {
        var _this = this;
        return this.onReady().then(function () {
            var modeId = _this.getModeIdByLanguageName(languageName);
            // Fall back to plain text if no mode was found
            return _this._getOrCreateMode(modeId || 'plaintext');
        });
    };
    ModeServiceImpl.prototype.getOrCreateModeByFilenameOrFirstLine = function (filename, firstLine) {
        var _this = this;
        return this.onReady().then(function () {
            var modeId = _this.getModeIdByFilenameOrFirstLine(filename, firstLine);
            // Fall back to plain text if no mode was found
            return _this._getOrCreateMode(modeId || 'plaintext');
        });
    };
    ModeServiceImpl.prototype._getOrCreateMode = function (modeId) {
        var _this = this;
        if (this._instantiatedModes.hasOwnProperty(modeId)) {
            return winjs_base_1.TPromise.as(this._instantiatedModes[modeId]);
        }
        if (this._activationPromises.hasOwnProperty(modeId)) {
            return this._activationPromises[modeId];
        }
        var c, e;
        var promise = new winjs_base_1.TPromise(function (cc, ee, pp) { c = cc; e = ee; });
        this._activationPromises[modeId] = promise;
        this._createMode(modeId).then(function (mode) {
            _this._instantiatedModes[modeId] = mode;
            delete _this._activationPromises[modeId];
            _this._onDidCreateMode.fire(mode);
            _this._extensionService.activateByEvent("onLanguage:" + modeId).done(null, errors_1.onUnexpectedError);
            return _this._instantiatedModes[modeId];
        }).then(c, e);
        return promise;
    };
    ModeServiceImpl.prototype._createMode = function (modeId) {
        var _this = this;
        var modeDescriptor = this._createModeDescriptor(modeId);
        var compatModeData = this._registry.getCompatMode(modeId);
        if (compatModeData) {
            // This is a compatibility mode
            var resolvedDeps = null;
            if (Array.isArray(compatModeData.deps)) {
                resolvedDeps = winjs_base_1.TPromise.join(compatModeData.deps.map(function (dep) { return _this.getOrCreateMode(dep); }));
            }
            else {
                resolvedDeps = winjs_base_1.TPromise.as(null);
            }
            return resolvedDeps.then(function (_) {
                var compatModeAsyncDescriptor = descriptors_1.createAsyncDescriptor1(compatModeData.moduleId, compatModeData.ctorName);
                return _this._instantiationService.createInstance(compatModeAsyncDescriptor, modeDescriptor);
            });
        }
        return winjs_base_1.TPromise.as(this._instantiationService.createInstance(abstractMode_1.FrankensteinMode, modeDescriptor));
    };
    ModeServiceImpl.prototype._createModeDescriptor = function (modeId) {
        return {
            id: modeId
        };
    };
    return ModeServiceImpl;
}());
exports.ModeServiceImpl = ModeServiceImpl;
var TokenizationState2Adapter = (function () {
    function TokenizationState2Adapter(modeId, actual, stateData) {
        this._modeId = modeId;
        this._actual = actual;
        this._stateData = stateData;
    }
    Object.defineProperty(TokenizationState2Adapter.prototype, "actual", {
        get: function () { return this._actual; },
        enumerable: true,
        configurable: true
    });
    TokenizationState2Adapter.prototype.clone = function () {
        return new TokenizationState2Adapter(this._modeId, this._actual.clone(), abstractState_1.AbstractState.safeClone(this._stateData));
    };
    TokenizationState2Adapter.prototype.equals = function (other) {
        if (other instanceof TokenizationState2Adapter) {
            if (!this._actual.equals(other._actual)) {
                return false;
            }
            return abstractState_1.AbstractState.safeEquals(this._stateData, other._stateData);
        }
        return false;
    };
    TokenizationState2Adapter.prototype.getModeId = function () {
        return this._modeId;
    };
    TokenizationState2Adapter.prototype.tokenize = function (stream) {
        throw new Error('Unexpected tokenize call!');
    };
    TokenizationState2Adapter.prototype.getStateData = function () {
        return this._stateData;
    };
    TokenizationState2Adapter.prototype.setStateData = function (stateData) {
        this._stateData = stateData;
    };
    return TokenizationState2Adapter;
}());
exports.TokenizationState2Adapter = TokenizationState2Adapter;
var TokenizationSupport2Adapter = (function () {
    function TokenizationSupport2Adapter(modeId, actual) {
        this._modeId = modeId;
        this._actual = actual;
    }
    TokenizationSupport2Adapter.prototype.getInitialState = function () {
        return new TokenizationState2Adapter(this._modeId, this._actual.getInitialState(), null);
    };
    TokenizationSupport2Adapter.prototype.tokenize = function (line, state, offsetDelta, stopAtOffset) {
        if (offsetDelta === void 0) { offsetDelta = 0; }
        if (state instanceof TokenizationState2Adapter) {
            var actualResult = this._actual.tokenize(line, state.actual);
            var tokens_1 = [];
            actualResult.tokens.forEach(function (t) {
                if (typeof t.scopes === 'string') {
                    tokens_1.push(new token_1.Token(t.startIndex + offsetDelta, t.scopes));
                }
                else if (Array.isArray(t.scopes) && t.scopes.length === 1) {
                    tokens_1.push(new token_1.Token(t.startIndex + offsetDelta, t.scopes[0]));
                }
                else {
                    throw new Error('Only token scopes as strings or of precisely 1 length are supported at this time!');
                }
            });
            return {
                tokens: tokens_1,
                actualStopOffset: offsetDelta + line.length,
                endState: new TokenizationState2Adapter(state.getModeId(), actualResult.endState, state.getStateData()),
                modeTransitions: [new modeTransition_1.ModeTransition(offsetDelta, state.getModeId())],
            };
        }
        throw new Error('Unexpected state to tokenize with!');
    };
    return TokenizationSupport2Adapter;
}());
exports.TokenizationSupport2Adapter = TokenizationSupport2Adapter;
var MainThreadModeServiceImpl = (function (_super) {
    __extends(MainThreadModeServiceImpl, _super);
    function MainThreadModeServiceImpl(instantiationService, extensionService, configurationService) {
        var _this = this;
        _super.call(this, instantiationService, extensionService);
        this._configurationService = configurationService;
        languagesExtPoint.setHandler(function (extensions) {
            var allValidLanguages = [];
            for (var i = 0, len = extensions.length; i < len; i++) {
                var extension = extensions[i];
                if (!Array.isArray(extension.value)) {
                    extension.collector.error(nls.localize('invalid', "Invalid `contributes.{0}`. Expected an array.", languagesExtPoint.name));
                    continue;
                }
                for (var j = 0, lenJ = extension.value.length; j < lenJ; j++) {
                    var ext = extension.value[j];
                    if (isValidLanguageExtensionPoint(ext, extension.collector)) {
                        var configuration = (ext.configuration ? paths.join(extension.description.extensionFolderPath, ext.configuration) : ext.configuration);
                        allValidLanguages.push({
                            id: ext.id,
                            extensions: ext.extensions,
                            filenames: ext.filenames,
                            filenamePatterns: ext.filenamePatterns,
                            firstLine: ext.firstLine,
                            aliases: ext.aliases,
                            mimetypes: ext.mimetypes,
                            configuration: configuration
                        });
                    }
                }
            }
            modesRegistry_1.ModesRegistry.registerLanguages(allValidLanguages);
        });
        this._configurationService.onDidUpdateConfiguration(function (e) { return _this.onConfigurationChange(e.config); });
    }
    MainThreadModeServiceImpl.prototype.onReady = function () {
        var _this = this;
        if (!this._onReadyPromise) {
            var configuration_2 = this._configurationService.getConfiguration();
            this._onReadyPromise = this._extensionService.onReady().then(function () {
                _this.onConfigurationChange(configuration_2);
                return true;
            });
        }
        return this._onReadyPromise;
    };
    MainThreadModeServiceImpl.prototype.onConfigurationChange = function (configuration) {
        var _this = this;
        // Clear user configured mime associations
        mime.clearTextMimes(true /* user configured */);
        // Register based on settings
        if (configuration.files && configuration.files.associations) {
            Object.keys(configuration.files.associations).forEach(function (pattern) {
                var langId = configuration.files.associations[pattern];
                var mimetype = _this.getMimeForMode(langId) || "text/x-" + langId;
                mime.registerTextMime({ id: langId, mime: mimetype, filepattern: pattern, userConfigured: true });
            });
        }
    };
    MainThreadModeServiceImpl = __decorate([
        __param(0, instantiation_1.IInstantiationService),
        __param(1, extensions_1.IExtensionService),
        __param(2, configuration_1.IConfigurationService)
    ], MainThreadModeServiceImpl);
    return MainThreadModeServiceImpl;
}(ModeServiceImpl));
exports.MainThreadModeServiceImpl = MainThreadModeServiceImpl;
