/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var editor_1 = require('vs/platform/editor/common/editor');
var contextkey_1 = require('vs/platform/contextkey/common/contextkey');
var keybindingsRegistry_1 = require('vs/platform/keybinding/common/keybindingsRegistry');
var editorCommon = require('vs/editor/common/editorCommon');
var codeEditorService_1 = require('vs/editor/common/services/codeEditorService');
var commands_1 = require('vs/platform/commands/common/commands');
var H = editorCommon.Handler;
var D = editorCommon.CommandDescription;
var EditorContextKeys = editorCommon.EditorContextKeys;
var CORE_WEIGHT = keybindingsRegistry_1.KeybindingsRegistry.WEIGHT.editorCore();
var Command = (function () {
    function Command(opts) {
        this.id = opts.id;
        this.precondition = opts.precondition;
        this.kbOpts = opts.kbOpts;
        this.description = opts.description;
    }
    Command.prototype.toCommandAndKeybindingRule = function (defaultWeight) {
        var _this = this;
        var kbOpts = this.kbOpts || { primary: 0 };
        var kbWhen = kbOpts.kbExpr;
        if (this.precondition) {
            if (kbWhen) {
                kbWhen = contextkey_1.ContextKeyExpr.and(kbWhen, this.precondition);
            }
            else {
                kbWhen = this.precondition;
            }
        }
        return {
            id: this.id,
            handler: function (accessor, args) { return _this.runCommand(accessor, args); },
            weight: kbOpts.weight || defaultWeight,
            when: kbWhen,
            primary: kbOpts.primary,
            secondary: kbOpts.secondary,
            win: kbOpts.win,
            linux: kbOpts.linux,
            mac: kbOpts.mac,
            description: this.description
        };
    };
    return Command;
}());
exports.Command = Command;
var EditorCommand = (function (_super) {
    __extends(EditorCommand, _super);
    function EditorCommand(opts) {
        _super.call(this, opts);
    }
    EditorCommand.bindToContribution = function (controllerGetter) {
        return (function (_super) {
            __extends(EditorControllerCommandImpl, _super);
            function EditorControllerCommandImpl(opts) {
                _super.call(this, opts);
                this._callback = opts.handler;
            }
            EditorControllerCommandImpl.prototype.runEditorCommand = function (accessor, editor, args) {
                var controller = controllerGetter(editor);
                if (controller) {
                    this._callback(controllerGetter(editor));
                }
            };
            return EditorControllerCommandImpl;
        }(EditorCommand));
    };
    EditorCommand.prototype.runCommand = function (accessor, args) {
        var _this = this;
        var editor = findFocusedEditor(this.id, accessor, false);
        if (!editor) {
            editor = getActiveEditorWidget(accessor);
        }
        if (!editor) {
            // well, at least we tried...
            return;
        }
        return editor.invokeWithinContext(function (editorAccessor) {
            var kbService = editorAccessor.get(contextkey_1.IContextKeyService);
            if (!kbService.contextMatchesRules(_this.precondition)) {
                // precondition does not hold
                return;
            }
            return _this.runEditorCommand(editorAccessor, editor, args);
        });
    };
    return EditorCommand;
}(Command));
exports.EditorCommand = EditorCommand;
function findFocusedEditor(commandId, accessor, complain) {
    var editor = accessor.get(codeEditorService_1.ICodeEditorService).getFocusedCodeEditor();
    if (!editor) {
        if (complain) {
            console.warn('Cannot execute ' + commandId + ' because no code editor is focused.');
        }
        return null;
    }
    return editor;
}
exports.findFocusedEditor = findFocusedEditor;
function withCodeEditorFromCommandHandler(commandId, accessor, callback) {
    var editor = findFocusedEditor(commandId, accessor, true);
    if (editor) {
        callback(editor);
    }
}
function getActiveEditorWidget(accessor) {
    var editorService = accessor.get(editor_1.IEditorService);
    var activeEditor = editorService.getActiveEditor && editorService.getActiveEditor();
    return codeEditorService_1.getCodeEditor(activeEditor);
}
function triggerEditorHandler(handlerId, accessor, args) {
    withCodeEditorFromCommandHandler(handlerId, accessor, function (editor) {
        editor.trigger('keyboard', handlerId, args);
    });
}
var CoreCommand = (function (_super) {
    __extends(CoreCommand, _super);
    function CoreCommand() {
        _super.apply(this, arguments);
    }
    CoreCommand.prototype.runCommand = function (accessor, args) {
        triggerEditorHandler(this.id, accessor, args);
    };
    return CoreCommand;
}(Command));
var UnboundCoreCommand = (function (_super) {
    __extends(UnboundCoreCommand, _super);
    function UnboundCoreCommand(handlerId, precondition) {
        if (precondition === void 0) { precondition = null; }
        _super.call(this, {
            id: handlerId,
            precondition: precondition
        });
    }
    return UnboundCoreCommand;
}(CoreCommand));
function registerCommand(command) {
    keybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule(command.toCommandAndKeybindingRule(CORE_WEIGHT));
}
function registerCoreAPICommand(handlerId, description) {
    commands_1.CommandsRegistry.registerCommand(handlerId, {
        handler: triggerEditorHandler.bind(null, handlerId),
        description: description
    });
}
function registerOverwritableCommand(handlerId, handler) {
    commands_1.CommandsRegistry.registerCommand(handlerId, handler);
    commands_1.CommandsRegistry.registerCommand('default:' + handlerId, handler);
}
function registerCoreDispatchCommand(handlerId) {
    registerOverwritableCommand(handlerId, triggerEditorHandler.bind(null, handlerId));
}
registerCoreDispatchCommand(H.Type);
registerCoreDispatchCommand(H.ReplacePreviousChar);
registerCoreDispatchCommand(H.Paste);
registerCoreDispatchCommand(H.Cut);
registerOverwritableCommand(H.CompositionStart, function () { });
registerOverwritableCommand(H.CompositionEnd, function () { });
var WordCommand = (function (_super) {
    __extends(WordCommand, _super);
    function WordCommand(handlerId, shift, key, precondition) {
        if (precondition === void 0) { precondition = null; }
        _super.call(this, {
            id: handlerId,
            precondition: precondition,
            kbOpts: {
                weight: CORE_WEIGHT,
                kbExpr: EditorContextKeys.TextFocus,
                primary: WordCommand.getWordNavigationKB(shift, key),
                mac: { primary: WordCommand.getMacWordNavigationKB(shift, key) }
            }
        });
    }
    WordCommand.getMacWordNavigationKB = function (shift, key) {
        // For macs, word navigation is based on the alt modifier
        if (shift) {
            return 16384 /* Shift */ | 8192 /* Alt */ | key;
        }
        else {
            return 8192 /* Alt */ | key;
        }
    };
    WordCommand.getWordNavigationKB = function (shift, key) {
        // Normally word navigation is based on the ctrl modifier
        if (shift) {
            return 32768 /* CtrlCmd */ | 16384 /* Shift */ | key;
        }
        else {
            return 32768 /* CtrlCmd */ | key;
        }
    };
    return WordCommand;
}(CoreCommand));
// https://support.apple.com/en-gb/HT201236
// [ADDED] Control-H					Delete the character to the left of the insertion point. Or use Delete.
// [ADDED] Control-D					Delete the character to the right of the insertion point. Or use Fn-Delete.
// [ADDED] Control-K					Delete the text between the insertion point and the end of the line or paragraph.
// [ADDED] Command–Up Arrow				Move the insertion point to the beginning of the document.
// [ADDED] Command–Down Arrow			Move the insertion point to the end of the document.
// [ADDED] Command–Left Arrow			Move the insertion point to the beginning of the current line.
// [ADDED] Command–Right Arrow			Move the insertion point to the end of the current line.
// [ADDED] Option–Left Arrow			Move the insertion point to the beginning of the previous word.
// [ADDED] Option–Right Arrow			Move the insertion point to the end of the next word.
// [ADDED] Command–Shift–Up Arrow		Select the text between the insertion point and the beginning of the document.
// [ADDED] Command–Shift–Down Arrow		Select the text between the insertion point and the end of the document.
// [ADDED] Command–Shift–Left Arrow		Select the text between the insertion point and the beginning of the current line.
// [ADDED] Command–Shift–Right Arrow	Select the text between the insertion point and the end of the current line.
// [USED BY DUPLICATE LINES] Shift–Option–Up Arrow		Extend text selection to the beginning of the current paragraph, then to the beginning of the following paragraph if pressed again.
// [USED BY DUPLICATE LINES] Shift–Option–Down Arrow	Extend text selection to the end of the current paragraph, then to the end of the following paragraph if pressed again.
// [ADDED] Shift–Option–Left Arrow		Extend text selection to the beginning of the current word, then to the beginning of the following word if pressed again.
// [ADDED] Shift–Option–Right Arrow		Extend text selection to the end of the current word, then to the end of the following word if pressed again.
// [ADDED] Control-A					Move to the beginning of the line or paragraph.
// [ADDED] Control-E					Move to the end of a line or paragraph.
// [ADDED] Control-F					Move one character forward.
// [ADDED] Control-B					Move one character backward.
//Control-L								Center the cursor or selection in the visible area.
// [ADDED] Control-P					Move up one line.
// [ADDED] Control-N					Move down one line.
// [ADDED] Control-O					Insert a new line after the insertion point.
//Control-T								Swap the character behind the insertion point with the character in front of the insertion point.
// Unconfirmed????
//	Config.addKeyBinding(editorCommon.Handler.CursorPageDown,		KeyMod.WinCtrl | KeyCode.KEY_V);
// OS X built in commands
// Control+y => yank
// [ADDED] Command+backspace => Delete to Hard BOL
// [ADDED] Command+delete => Delete to Hard EOL
// [ADDED] Control+k => Delete to Hard EOL
// Control+l => show_at_center
// Control+Command+d => noop
// Control+Command+shift+d => noop
// Register cursor commands
registerCoreAPICommand(H.CursorMove, D.CursorMove);
registerCommand(new CoreCommand({
    id: H.CursorLeft,
    precondition: null,
    kbOpts: {
        weight: CORE_WEIGHT,
        kbExpr: EditorContextKeys.TextFocus,
        primary: 15 /* LeftArrow */,
        mac: { primary: 15 /* LeftArrow */, secondary: [4096 /* WinCtrl */ | 32 /* KEY_B */] }
    }
}));
registerCommand(new CoreCommand({
    id: H.CursorLeftSelect,
    precondition: null,
    kbOpts: {
        weight: CORE_WEIGHT,
        kbExpr: EditorContextKeys.TextFocus,
        primary: 16384 /* Shift */ | 15 /* LeftArrow */
    }
}));
registerCommand(new CoreCommand({
    id: H.CursorRight,
    precondition: null,
    kbOpts: {
        weight: CORE_WEIGHT,
        kbExpr: EditorContextKeys.TextFocus,
        primary: 17 /* RightArrow */,
        mac: { primary: 17 /* RightArrow */, secondary: [4096 /* WinCtrl */ | 36 /* KEY_F */] }
    }
}));
registerCommand(new CoreCommand({
    id: H.CursorRightSelect,
    precondition: null,
    kbOpts: {
        weight: CORE_WEIGHT,
        kbExpr: EditorContextKeys.TextFocus,
        primary: 16384 /* Shift */ | 17 /* RightArrow */
    }
}));
registerCommand(new CoreCommand({
    id: H.CursorUp,
    precondition: null,
    kbOpts: {
        weight: CORE_WEIGHT,
        kbExpr: EditorContextKeys.TextFocus,
        primary: 16 /* UpArrow */,
        mac: { primary: 16 /* UpArrow */, secondary: [4096 /* WinCtrl */ | 46 /* KEY_P */] }
    }
}));
registerCommand(new CoreCommand({
    id: H.CursorUpSelect,
    precondition: null,
    kbOpts: {
        weight: CORE_WEIGHT,
        kbExpr: EditorContextKeys.TextFocus,
        primary: 16384 /* Shift */ | 16 /* UpArrow */,
        secondary: [WordCommand.getWordNavigationKB(true, 16 /* UpArrow */)],
        mac: { primary: 16384 /* Shift */ | 16 /* UpArrow */ },
        linux: { primary: 16384 /* Shift */ | 16 /* UpArrow */ }
    }
}));
registerCommand(new CoreCommand({
    id: H.CursorDown,
    precondition: null,
    kbOpts: {
        weight: CORE_WEIGHT,
        kbExpr: EditorContextKeys.TextFocus,
        primary: 18 /* DownArrow */,
        mac: { primary: 18 /* DownArrow */, secondary: [4096 /* WinCtrl */ | 44 /* KEY_N */] }
    }
}));
registerCommand(new CoreCommand({
    id: H.CursorDownSelect,
    precondition: null,
    kbOpts: {
        weight: CORE_WEIGHT,
        kbExpr: EditorContextKeys.TextFocus,
        primary: 16384 /* Shift */ | 18 /* DownArrow */,
        secondary: [WordCommand.getWordNavigationKB(true, 18 /* DownArrow */)],
        mac: { primary: 16384 /* Shift */ | 18 /* DownArrow */ },
        linux: { primary: 16384 /* Shift */ | 18 /* DownArrow */ }
    }
}));
registerCommand(new CoreCommand({
    id: H.CursorPageUp,
    precondition: null,
    kbOpts: {
        weight: CORE_WEIGHT,
        kbExpr: EditorContextKeys.TextFocus,
        primary: 11 /* PageUp */
    }
}));
registerCommand(new CoreCommand({
    id: H.CursorPageUpSelect,
    precondition: null,
    kbOpts: {
        weight: CORE_WEIGHT,
        kbExpr: EditorContextKeys.TextFocus,
        primary: 16384 /* Shift */ | 11 /* PageUp */
    }
}));
registerCommand(new CoreCommand({
    id: H.CursorPageDown,
    precondition: null,
    kbOpts: {
        weight: CORE_WEIGHT,
        kbExpr: EditorContextKeys.TextFocus,
        primary: 12 /* PageDown */
    }
}));
registerCommand(new CoreCommand({
    id: H.CursorPageDownSelect,
    precondition: null,
    kbOpts: {
        weight: CORE_WEIGHT,
        kbExpr: EditorContextKeys.TextFocus,
        primary: 16384 /* Shift */ | 12 /* PageDown */
    }
}));
registerCommand(new CoreCommand({
    id: H.CursorHome,
    precondition: null,
    kbOpts: {
        weight: CORE_WEIGHT,
        kbExpr: EditorContextKeys.TextFocus,
        primary: 14 /* Home */,
        mac: { primary: 14 /* Home */, secondary: [32768 /* CtrlCmd */ | 15 /* LeftArrow */, 4096 /* WinCtrl */ | 31 /* KEY_A */] }
    }
}));
registerCommand(new CoreCommand({
    id: H.CursorHomeSelect,
    precondition: null,
    kbOpts: {
        weight: CORE_WEIGHT,
        kbExpr: EditorContextKeys.TextFocus,
        primary: 16384 /* Shift */ | 14 /* Home */,
        mac: { primary: 16384 /* Shift */ | 14 /* Home */, secondary: [32768 /* CtrlCmd */ | 16384 /* Shift */ | 15 /* LeftArrow */] }
    }
}));
registerCommand(new CoreCommand({
    id: H.CursorEnd,
    precondition: null,
    kbOpts: {
        weight: CORE_WEIGHT,
        kbExpr: EditorContextKeys.TextFocus,
        primary: 13 /* End */,
        mac: { primary: 13 /* End */, secondary: [32768 /* CtrlCmd */ | 17 /* RightArrow */, 4096 /* WinCtrl */ | 35 /* KEY_E */] }
    }
}));
registerCommand(new CoreCommand({
    id: H.CursorEndSelect,
    precondition: null,
    kbOpts: {
        weight: CORE_WEIGHT,
        kbExpr: EditorContextKeys.TextFocus,
        primary: 16384 /* Shift */ | 13 /* End */,
        mac: { primary: 16384 /* Shift */ | 13 /* End */, secondary: [32768 /* CtrlCmd */ | 16384 /* Shift */ | 17 /* RightArrow */] }
    }
}));
registerCommand(new CoreCommand({
    id: H.ExpandLineSelection,
    precondition: null,
    kbOpts: {
        weight: CORE_WEIGHT,
        kbExpr: EditorContextKeys.TextFocus,
        primary: 32768 /* CtrlCmd */ | 39 /* KEY_I */
    }
}));
registerCoreAPICommand(H.EditorScroll, D.EditorScroll);
registerCommand(new CoreCommand({
    id: H.ScrollLineUp,
    precondition: null,
    kbOpts: {
        weight: CORE_WEIGHT,
        kbExpr: EditorContextKeys.TextFocus,
        primary: 32768 /* CtrlCmd */ | 16 /* UpArrow */,
        mac: { primary: 4096 /* WinCtrl */ | 11 /* PageUp */ }
    }
}));
registerCommand(new CoreCommand({
    id: H.ScrollLineDown,
    precondition: null,
    kbOpts: {
        weight: CORE_WEIGHT,
        kbExpr: EditorContextKeys.TextFocus,
        primary: 32768 /* CtrlCmd */ | 18 /* DownArrow */,
        mac: { primary: 4096 /* WinCtrl */ | 12 /* PageDown */ }
    }
}));
registerCommand(new CoreCommand({
    id: H.ScrollPageUp,
    precondition: null,
    kbOpts: {
        weight: CORE_WEIGHT,
        kbExpr: EditorContextKeys.TextFocus,
        primary: 32768 /* CtrlCmd */ | 11 /* PageUp */,
        win: { primary: 8192 /* Alt */ | 11 /* PageUp */ },
        linux: { primary: 8192 /* Alt */ | 11 /* PageUp */ }
    }
}));
registerCommand(new CoreCommand({
    id: H.ScrollPageDown,
    precondition: null,
    kbOpts: {
        weight: CORE_WEIGHT,
        kbExpr: EditorContextKeys.TextFocus,
        primary: 32768 /* CtrlCmd */ | 12 /* PageDown */,
        win: { primary: 8192 /* Alt */ | 12 /* PageDown */ },
        linux: { primary: 8192 /* Alt */ | 12 /* PageDown */ }
    }
}));
registerCoreAPICommand(H.RevealLine, D.RevealLine);
registerCommand(new CoreCommand({
    id: H.CursorColumnSelectLeft,
    precondition: null,
    kbOpts: {
        weight: CORE_WEIGHT,
        kbExpr: EditorContextKeys.TextFocus,
        primary: 32768 /* CtrlCmd */ | 16384 /* Shift */ | 8192 /* Alt */ | 15 /* LeftArrow */,
        linux: { primary: 0 }
    }
}));
registerCommand(new CoreCommand({
    id: H.CursorColumnSelectRight,
    precondition: null,
    kbOpts: {
        weight: CORE_WEIGHT,
        kbExpr: EditorContextKeys.TextFocus,
        primary: 32768 /* CtrlCmd */ | 16384 /* Shift */ | 8192 /* Alt */ | 17 /* RightArrow */,
        linux: { primary: 0 }
    }
}));
registerCommand(new CoreCommand({
    id: H.CursorColumnSelectUp,
    precondition: null,
    kbOpts: {
        weight: CORE_WEIGHT,
        kbExpr: EditorContextKeys.TextFocus,
        primary: 32768 /* CtrlCmd */ | 16384 /* Shift */ | 8192 /* Alt */ | 16 /* UpArrow */,
        linux: { primary: 0 }
    }
}));
registerCommand(new CoreCommand({
    id: H.CursorColumnSelectPageUp,
    precondition: null,
    kbOpts: {
        weight: CORE_WEIGHT,
        kbExpr: EditorContextKeys.TextFocus,
        primary: 32768 /* CtrlCmd */ | 16384 /* Shift */ | 8192 /* Alt */ | 11 /* PageUp */,
        linux: { primary: 0 }
    }
}));
registerCommand(new CoreCommand({
    id: H.CursorColumnSelectDown,
    precondition: null,
    kbOpts: {
        weight: CORE_WEIGHT,
        kbExpr: EditorContextKeys.TextFocus,
        primary: 32768 /* CtrlCmd */ | 16384 /* Shift */ | 8192 /* Alt */ | 18 /* DownArrow */,
        linux: { primary: 0 }
    }
}));
registerCommand(new CoreCommand({
    id: H.CursorColumnSelectPageDown,
    precondition: null,
    kbOpts: {
        weight: CORE_WEIGHT,
        kbExpr: EditorContextKeys.TextFocus,
        primary: 32768 /* CtrlCmd */ | 16384 /* Shift */ | 8192 /* Alt */ | 12 /* PageDown */,
        linux: { primary: 0 }
    }
}));
registerCommand(new CoreCommand({
    id: H.Tab,
    precondition: EditorContextKeys.Writable,
    kbOpts: {
        weight: CORE_WEIGHT,
        kbExpr: contextkey_1.ContextKeyExpr.and(EditorContextKeys.TextFocus, EditorContextKeys.TabDoesNotMoveFocus),
        primary: 2 /* Tab */
    }
}));
registerCommand(new CoreCommand({
    id: H.Outdent,
    precondition: EditorContextKeys.Writable,
    kbOpts: {
        weight: CORE_WEIGHT,
        kbExpr: contextkey_1.ContextKeyExpr.and(EditorContextKeys.TextFocus, EditorContextKeys.TabDoesNotMoveFocus),
        primary: 16384 /* Shift */ | 2 /* Tab */
    }
}));
registerCommand(new CoreCommand({
    id: H.DeleteLeft,
    precondition: EditorContextKeys.Writable,
    kbOpts: {
        weight: CORE_WEIGHT,
        kbExpr: EditorContextKeys.TextFocus,
        primary: 1 /* Backspace */,
        secondary: [16384 /* Shift */ | 1 /* Backspace */],
        mac: { primary: 1 /* Backspace */, secondary: [16384 /* Shift */ | 1 /* Backspace */, 4096 /* WinCtrl */ | 38 /* KEY_H */, 4096 /* WinCtrl */ | 1 /* Backspace */] }
    }
}));
registerCommand(new CoreCommand({
    id: H.DeleteRight,
    precondition: EditorContextKeys.Writable,
    kbOpts: {
        weight: CORE_WEIGHT,
        kbExpr: EditorContextKeys.TextFocus,
        primary: 20 /* Delete */,
        mac: { primary: 20 /* Delete */, secondary: [4096 /* WinCtrl */ | 34 /* KEY_D */, 4096 /* WinCtrl */ | 20 /* Delete */] }
    }
}));
registerCommand(new CoreCommand({
    id: H.DeleteAllLeft,
    precondition: EditorContextKeys.Writable,
    kbOpts: {
        weight: CORE_WEIGHT,
        kbExpr: EditorContextKeys.TextFocus,
        primary: null,
        mac: { primary: 32768 /* CtrlCmd */ | 1 /* Backspace */ }
    }
}));
registerCommand(new CoreCommand({
    id: H.DeleteAllRight,
    precondition: EditorContextKeys.Writable,
    kbOpts: {
        weight: CORE_WEIGHT,
        kbExpr: EditorContextKeys.TextFocus,
        primary: null,
        mac: { primary: 4096 /* WinCtrl */ | 41 /* KEY_K */, secondary: [32768 /* CtrlCmd */ | 20 /* Delete */] }
    }
}));
registerCommand(new WordCommand(H.CursorWordStartLeft, false, 15 /* LeftArrow */));
registerCommand(new UnboundCoreCommand(H.CursorWordEndLeft));
registerCommand(new UnboundCoreCommand(H.CursorWordLeft));
registerCommand(new WordCommand(H.CursorWordStartLeftSelect, true, 15 /* LeftArrow */));
registerCommand(new UnboundCoreCommand(H.CursorWordEndLeftSelect));
registerCommand(new UnboundCoreCommand(H.CursorWordLeftSelect));
registerCommand(new WordCommand(H.CursorWordEndRight, false, 17 /* RightArrow */));
registerCommand(new UnboundCoreCommand(H.CursorWordStartRight));
registerCommand(new UnboundCoreCommand(H.CursorWordRight));
registerCommand(new WordCommand(H.CursorWordEndRightSelect, true, 17 /* RightArrow */));
registerCommand(new UnboundCoreCommand(H.CursorWordStartRightSelect));
registerCommand(new UnboundCoreCommand(H.CursorWordRightSelect));
registerCommand(new WordCommand(H.DeleteWordLeft, false, 1 /* Backspace */, EditorContextKeys.Writable));
registerCommand(new UnboundCoreCommand(H.DeleteWordStartLeft, EditorContextKeys.Writable));
registerCommand(new UnboundCoreCommand(H.DeleteWordEndLeft, EditorContextKeys.Writable));
registerCommand(new WordCommand(H.DeleteWordRight, false, 20 /* Delete */, EditorContextKeys.Writable));
registerCommand(new UnboundCoreCommand(H.DeleteWordStartRight, EditorContextKeys.Writable));
registerCommand(new UnboundCoreCommand(H.DeleteWordEndRight, EditorContextKeys.Writable));
registerCommand(new CoreCommand({
    id: H.CancelSelection,
    precondition: EditorContextKeys.HasNonEmptySelection,
    kbOpts: {
        weight: CORE_WEIGHT,
        kbExpr: EditorContextKeys.TextFocus,
        primary: 9 /* Escape */,
        secondary: [16384 /* Shift */ | 9 /* Escape */]
    }
}));
registerCommand(new CoreCommand({
    id: H.RemoveSecondaryCursors,
    precondition: EditorContextKeys.HasMultipleSelections,
    kbOpts: {
        weight: CORE_WEIGHT + 1,
        kbExpr: EditorContextKeys.TextFocus,
        primary: 9 /* Escape */,
        secondary: [16384 /* Shift */ | 9 /* Escape */]
    }
}));
registerCommand(new CoreCommand({
    id: H.CursorTop,
    precondition: null,
    kbOpts: {
        weight: CORE_WEIGHT,
        kbExpr: EditorContextKeys.TextFocus,
        primary: 32768 /* CtrlCmd */ | 14 /* Home */,
        mac: { primary: 32768 /* CtrlCmd */ | 16 /* UpArrow */ }
    }
}));
registerCommand(new CoreCommand({
    id: H.CursorTopSelect,
    precondition: null,
    kbOpts: {
        weight: CORE_WEIGHT,
        kbExpr: EditorContextKeys.TextFocus,
        primary: 32768 /* CtrlCmd */ | 16384 /* Shift */ | 14 /* Home */,
        mac: { primary: 32768 /* CtrlCmd */ | 16384 /* Shift */ | 16 /* UpArrow */ }
    }
}));
registerCommand(new CoreCommand({
    id: H.CursorBottom,
    precondition: null,
    kbOpts: {
        weight: CORE_WEIGHT,
        kbExpr: EditorContextKeys.TextFocus,
        primary: 32768 /* CtrlCmd */ | 13 /* End */,
        mac: { primary: 32768 /* CtrlCmd */ | 18 /* DownArrow */ }
    }
}));
registerCommand(new CoreCommand({
    id: H.CursorBottomSelect,
    precondition: null,
    kbOpts: {
        weight: CORE_WEIGHT,
        kbExpr: EditorContextKeys.TextFocus,
        primary: 32768 /* CtrlCmd */ | 16384 /* Shift */ | 13 /* End */,
        mac: { primary: 32768 /* CtrlCmd */ | 16384 /* Shift */ | 18 /* DownArrow */ }
    }
}));
registerCommand(new CoreCommand({
    id: H.LineBreakInsert,
    precondition: EditorContextKeys.Writable,
    kbOpts: {
        weight: CORE_WEIGHT,
        kbExpr: EditorContextKeys.TextFocus,
        primary: null,
        mac: { primary: 4096 /* WinCtrl */ | 45 /* KEY_O */ }
    }
}));
registerCommand(new CoreCommand({
    id: H.Undo,
    precondition: EditorContextKeys.Writable,
    kbOpts: {
        weight: CORE_WEIGHT,
        kbExpr: EditorContextKeys.TextFocus,
        primary: 32768 /* CtrlCmd */ | 56 /* KEY_Z */
    }
}));
registerCommand(new CoreCommand({
    id: H.CursorUndo,
    precondition: null,
    kbOpts: {
        weight: CORE_WEIGHT,
        kbExpr: EditorContextKeys.TextFocus,
        primary: 32768 /* CtrlCmd */ | 51 /* KEY_U */
    }
}));
registerCommand(new CoreCommand({
    id: H.Redo,
    precondition: EditorContextKeys.Writable,
    kbOpts: {
        weight: CORE_WEIGHT,
        kbExpr: EditorContextKeys.TextFocus,
        primary: 32768 /* CtrlCmd */ | 55 /* KEY_Y */,
        secondary: [32768 /* CtrlCmd */ | 16384 /* Shift */ | 56 /* KEY_Z */],
        mac: { primary: 32768 /* CtrlCmd */ | 16384 /* Shift */ | 56 /* KEY_Z */ }
    }
}));
var SelectAllCommand = (function (_super) {
    __extends(SelectAllCommand, _super);
    function SelectAllCommand() {
        _super.call(this, {
            id: 'editor.action.selectAll',
            precondition: null,
            kbOpts: {
                weight: CORE_WEIGHT,
                kbExpr: null,
                primary: 32768 /* CtrlCmd */ | 31 /* KEY_A */
            }
        });
    }
    SelectAllCommand.prototype.runCommand = function (accessor, args) {
        var HANDLER = editorCommon.Handler.SelectAll;
        var focusedEditor = findFocusedEditor(HANDLER, accessor, false);
        // Only if editor text focus (i.e. not if editor has widget focus).
        if (focusedEditor && focusedEditor.isFocused()) {
            focusedEditor.trigger('keyboard', HANDLER, args);
            return;
        }
        // Ignore this action when user is focussed on an element that allows for entering text
        var activeElement = document.activeElement;
        if (activeElement && ['input', 'textarea'].indexOf(activeElement.tagName.toLowerCase()) >= 0) {
            activeElement.select();
            return;
        }
        // Redirecting to last active editor
        var activeEditor = getActiveEditorWidget(accessor);
        if (activeEditor) {
            activeEditor.focus();
            activeEditor.trigger('keyboard', HANDLER, args);
            return;
        }
    };
    return SelectAllCommand;
}(Command));
registerCommand(new SelectAllCommand());
