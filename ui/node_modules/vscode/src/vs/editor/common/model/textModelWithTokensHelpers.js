/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var modeTransition_1 = require('vs/editor/common/core/modeTransition');
var languageConfigurationRegistry_1 = require('vs/editor/common/modes/languageConfigurationRegistry');
var wordHelper_1 = require('vs/editor/common/model/wordHelper');
var WordHelper = (function () {
    function WordHelper() {
    }
    WordHelper._safeGetWordDefinition = function (modeId) {
        return languageConfigurationRegistry_1.LanguageConfigurationRegistry.getWordDefinition(modeId);
    };
    WordHelper.massageWordDefinitionOf = function (modeId) {
        return wordHelper_1.ensureValidWordDefinition(WordHelper._safeGetWordDefinition(modeId));
    };
    WordHelper._getWordAtColumn = function (txt, column, modeIndex, modeTransitions) {
        var modeStartIndex = modeTransitions[modeIndex].startIndex;
        var modeEndIndex = (modeIndex + 1 < modeTransitions.length ? modeTransitions[modeIndex + 1].startIndex : txt.length);
        var modeId = modeTransitions[modeIndex].modeId;
        return wordHelper_1.getWordAtText(column, WordHelper.massageWordDefinitionOf(modeId), txt.substring(modeStartIndex, modeEndIndex), modeStartIndex);
    };
    WordHelper.getWordAtPosition = function (textSource, position) {
        if (!textSource._lineIsTokenized(position.lineNumber)) {
            return wordHelper_1.getWordAtText(position.column, WordHelper.massageWordDefinitionOf(textSource.getModeId()), textSource.getLineContent(position.lineNumber), 0);
        }
        var result = null;
        var txt = textSource.getLineContent(position.lineNumber);
        var modeTransitions = textSource._getLineModeTransitions(position.lineNumber);
        var columnIndex = position.column - 1;
        var modeIndex = modeTransition_1.ModeTransition.findIndexInSegmentsArray(modeTransitions, columnIndex);
        result = WordHelper._getWordAtColumn(txt, position.column, modeIndex, modeTransitions);
        if (!result && modeIndex > 0 && modeTransitions[modeIndex].startIndex === columnIndex) {
            // The position is right at the beginning of `modeIndex`, so try looking at `modeIndex` - 1 too
            result = WordHelper._getWordAtColumn(txt, position.column, modeIndex - 1, modeTransitions);
        }
        return result;
    };
    return WordHelper;
}());
exports.WordHelper = WordHelper;
