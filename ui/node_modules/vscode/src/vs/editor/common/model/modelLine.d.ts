import { IReadOnlyLineMarker } from 'vs/editor/common/editorCommon';
import { IState } from 'vs/editor/common/modes';
import { TokensInflatorMap } from 'vs/editor/common/model/tokensBinaryEncoding';
import { ModeTransition } from 'vs/editor/common/core/modeTransition';
import { Token } from 'vs/editor/common/core/token';
import { LineTokens } from 'vs/editor/common/core/lineTokens';
export interface ILineEdit {
    startColumn: number;
    endColumn: number;
    text: string;
    forceMoveMarkers: boolean;
}
export interface ILineMarker extends IReadOnlyLineMarker {
    id: string;
    column: number;
    stickToPreviousCharacter: boolean;
    oldLineNumber: number;
    oldColumn: number;
    line: ModelLine;
}
export interface IChangedMarkers {
    [markerId: string]: boolean;
}
export interface ITextWithMarkers {
    text: string;
    markers: ILineMarker[];
}
export declare class ModelLine {
    private _lineNumber;
    readonly lineNumber: number;
    private _text;
    readonly text: string;
    /**
     * bits 31 - 1 => indentLevel
     * bit 0 => isInvalid
     */
    private _metadata;
    isInvalid: boolean;
    /**
     * Returns:
     *  - -1 => the line consists of whitespace
     *  - otherwise => the indent level is returned value
     */
    getIndentLevel(): number;
    private _setPlusOneIndentLevel(value);
    updateTabSize(tabSize: number): void;
    private _state;
    private _modeTransitions;
    private _lineTokens;
    private _markers;
    constructor(lineNumber: number, text: string, tabSize: number);
    resetTokenizationState(): void;
    setState(state: IState): void;
    getState(): IState;
    getModeTransitions(topLevelModeId: string): ModeTransition[];
    setTokens(map: TokensInflatorMap, tokens: Token[], modeTransitions: ModeTransition[]): void;
    private _setLineTokensFromDeflated(tokens);
    getTokens(map: TokensInflatorMap): LineTokens;
    private _createTokensAdjuster();
    private _setText(text, tabSize);
    private _createMarkersAdjuster(changedMarkers);
    applyEdits(changedMarkers: IChangedMarkers, edits: ILineEdit[], tabSize: number): number;
    split(changedMarkers: IChangedMarkers, splitColumn: number, forceMoveMarkers: boolean, tabSize: number): ModelLine;
    append(changedMarkers: IChangedMarkers, other: ModelLine, tabSize: number): void;
    addMarker(marker: ILineMarker): void;
    addMarkers(markers: ILineMarker[]): void;
    private static _compareMarkers(a, b);
    removeMarker(marker: ILineMarker): void;
    removeMarkers(deleteMarkers: {
        [markerId: string]: boolean;
    }): void;
    getMarkers(): ILineMarker[];
    updateLineNumber(changedMarkers: IChangedMarkers, newLineNumber: number): void;
    deleteLine(changedMarkers: IChangedMarkers, setMarkersColumn: number, setMarkersOldLineNumber: number): ILineMarker[];
    private _indexOfMarkerId(markerId);
}
