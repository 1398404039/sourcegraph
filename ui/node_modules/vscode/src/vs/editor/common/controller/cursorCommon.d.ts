import { Position } from 'vs/editor/common/core/position';
import { IModeConfiguration } from 'vs/editor/common/controller/oneCursor';
import { ICommand, CursorChangeReason, IConfigurationChangedEvent, TextModelResolvedOptions, IConfiguration } from 'vs/editor/common/editorCommon';
import { Selection } from 'vs/editor/common/core/selection';
import { Range } from 'vs/editor/common/core/range';
export interface CharacterMap {
    [char: string]: string;
}
export declare class CursorConfiguration {
    _cursorMoveConfigurationBrand: void;
    readonly tabSize: number;
    readonly insertSpaces: boolean;
    readonly oneIndent: string;
    readonly pageSize: number;
    readonly useTabStops: boolean;
    readonly wordSeparators: string;
    readonly autoClosingBrackets: boolean;
    readonly autoClosingPairsOpen: CharacterMap;
    readonly autoClosingPairsClose: CharacterMap;
    readonly surroundingPairs: CharacterMap;
    readonly electricChars: {
        [key: string]: boolean;
    };
    static shouldRecreate(e: IConfigurationChangedEvent): boolean;
    constructor(oneIndent: string, modelOptions: TextModelResolvedOptions, configuration: IConfiguration, modeConfiguration: IModeConfiguration);
    normalizeIndentation(str: string): string;
}
/**
 * Represents a simple model (either the model or the view model).
 */
export interface ICursorSimpleModel {
    getLineCount(): number;
    getLineContent(lineNumber: number): string;
    getLineMinColumn(lineNumber: number): number;
    getLineMaxColumn(lineNumber: number): number;
    getLineFirstNonWhitespaceColumn(lineNumber: number): number;
    getLineLastNonWhitespaceColumn(lineNumber: number): number;
}
/**
 * Represents the cursor state on either the model or on the view model.
 */
export declare class SingleCursorState {
    _singleCursorStateBrand: void;
    readonly selectionStart: Range;
    readonly selectionStartLeftoverVisibleColumns: number;
    readonly position: Position;
    readonly leftoverVisibleColumns: number;
    readonly selection: Selection;
    constructor(selectionStart: Range, selectionStartLeftoverVisibleColumns: number, position: Position, leftoverVisibleColumns: number);
    equals(other: SingleCursorState): boolean;
    hasSelection(): boolean;
    withSelectionStartLeftoverVisibleColumns(selectionStartLeftoverVisibleColumns: number): SingleCursorState;
    withSelectionStart(selectionStart: Range): SingleCursorState;
    collapse(): SingleCursorState;
    move(inSelectionMode: boolean, position: Position, leftoverVisibleColumns: number): SingleCursorState;
    private static _computeSelection(selectionStart, position);
}
export declare class EditOperationResult {
    _editOperationBrand: void;
    readonly command: ICommand;
    readonly shouldPushStackElementBefore: boolean;
    readonly shouldPushStackElementAfter: boolean;
    readonly isAutoWhitespaceCommand: boolean;
    readonly shouldRevealHorizontal: boolean;
    readonly cursorPositionChangeReason: CursorChangeReason;
    constructor(command: ICommand, opts: {
        shouldPushStackElementBefore: boolean;
        shouldPushStackElementAfter: boolean;
        isAutoWhitespaceCommand?: boolean;
        shouldRevealHorizontal?: boolean;
        cursorPositionChangeReason?: CursorChangeReason;
    });
}
/**
 * Common operations that work and make sense both on the model and on the view model.
 */
export declare class CursorColumns {
    static isLowSurrogate(model: ICursorSimpleModel, lineNumber: number, charOffset: number): boolean;
    static isHighSurrogate(model: ICursorSimpleModel, lineNumber: number, charOffset: number): boolean;
    static isInsideSurrogatePair(model: ICursorSimpleModel, lineNumber: number, column: number): boolean;
    static visibleColumnFromColumn(lineContent: string, column: number, tabSize: number): number;
    static visibleColumnFromColumn2(config: CursorConfiguration, model: ICursorSimpleModel, position: Position): number;
    static columnFromVisibleColumn(lineContent: string, visibleColumn: number, tabSize: number): number;
    static columnFromVisibleColumn2(config: CursorConfiguration, model: ICursorSimpleModel, lineNumber: number, visibleColumn: number): number;
    /**
     * ATTENTION: This works with 0-based columns (as oposed to the regular 1-based columns)
     */
    static nextTabStop(visibleColumn: number, tabSize: number): number;
    /**
     * ATTENTION: This works with 0-based columns (as oposed to the regular 1-based columns)
     */
    static prevTabStop(column: number, tabSize: number): number;
}
