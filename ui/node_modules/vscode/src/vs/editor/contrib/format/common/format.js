/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var errors_1 = require('vs/base/common/errors');
var uri_1 = require('vs/base/common/uri');
var winjs_base_1 = require('vs/base/common/winjs.base');
var range_1 = require('vs/editor/common/core/range');
var editorCommonExtensions_1 = require('vs/editor/common/editorCommonExtensions');
var modes_1 = require('vs/editor/common/modes');
var modelService_1 = require('vs/editor/common/services/modelService');
var async_1 = require('vs/base/common/async');
function getDocumentRangeFormattingEdits(model, range, options) {
    var support = modes_1.DocumentRangeFormattingEditProviderRegistry.ordered(model)[0];
    if (!support) {
        return winjs_base_1.TPromise.as(undefined);
    }
    return async_1.asWinJsPromise(function (token) {
        return support.provideDocumentRangeFormattingEdits(model, range, options, token);
    });
}
exports.getDocumentRangeFormattingEdits = getDocumentRangeFormattingEdits;
function getDocumentFormattingEdits(model, options) {
    var support = modes_1.DocumentFormattingEditProviderRegistry.ordered(model)[0];
    if (!support) {
        return getDocumentRangeFormattingEdits(model, model.getFullModelRange(), options);
    }
    return async_1.asWinJsPromise(function (token) {
        return support.provideDocumentFormattingEdits(model, options, token);
    });
}
exports.getDocumentFormattingEdits = getDocumentFormattingEdits;
function getOnTypeFormattingEdits(model, position, ch, options) {
    var support = modes_1.OnTypeFormattingEditProviderRegistry.ordered(model)[0];
    if (!support) {
        return winjs_base_1.TPromise.as(undefined);
    }
    if (support.autoFormatTriggerCharacters.indexOf(ch) < 0) {
        return winjs_base_1.TPromise.as(undefined);
    }
    return async_1.asWinJsPromise(function (token) {
        return support.provideOnTypeFormattingEdits(model, position, ch, options, token);
    });
}
exports.getOnTypeFormattingEdits = getOnTypeFormattingEdits;
editorCommonExtensions_1.CommonEditorRegistry.registerLanguageCommand('_executeFormatRangeProvider', function (accessor, args) {
    var resource = args.resource, range = args.range, options = args.options;
    if (!(resource instanceof uri_1.default) || !range_1.Range.isIRange(range)) {
        throw errors_1.illegalArgument();
    }
    var model = accessor.get(modelService_1.IModelService).getModel(resource);
    if (!model) {
        throw errors_1.illegalArgument('resource');
    }
    return getDocumentRangeFormattingEdits(model, range_1.Range.lift(range), options);
});
editorCommonExtensions_1.CommonEditorRegistry.registerLanguageCommand('_executeFormatDocumentProvider', function (accessor, args) {
    var resource = args.resource, options = args.options;
    if (!(resource instanceof uri_1.default)) {
        throw errors_1.illegalArgument('resource');
    }
    var model = accessor.get(modelService_1.IModelService).getModel(resource);
    if (!model) {
        throw errors_1.illegalArgument('resource');
    }
    return getDocumentFormattingEdits(model, options);
});
editorCommonExtensions_1.CommonEditorRegistry.registerDefaultLanguageCommand('_executeFormatOnTypeProvider', function (model, position, args) {
    var ch = args.ch, options = args.options;
    if (typeof ch !== 'string') {
        throw errors_1.illegalArgument('ch');
    }
    return getOnTypeFormattingEdits(model, position, ch, options);
});
