/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var nls = require('vs/nls');
var arrays = require('vs/base/common/arrays');
var lifecycle_1 = require('vs/base/common/lifecycle');
var winjs_base_1 = require('vs/base/common/winjs.base');
var editorCommon = require('vs/editor/common/editorCommon');
var contextkey_1 = require('vs/platform/contextkey/common/contextkey');
var editorCommonExtensions_1 = require('vs/editor/common/editorCommonExtensions');
var modes_1 = require('vs/editor/common/modes');
var format_1 = require('../common/format');
var formatCommand_1 = require('./formatCommand');
var ModeContextKeys = editorCommon.ModeContextKeys;
var EditorContextKeys = editorCommon.EditorContextKeys;
var FormatOnType = (function () {
    function FormatOnType(editor) {
        var _this = this;
        this.editor = editor;
        this.callOnDispose = [];
        this.callOnModel = [];
        this.callOnDispose.push(editor.onDidChangeConfiguration(function () { return _this.update(); }));
        this.callOnDispose.push(editor.onDidChangeModel(function () { return _this.update(); }));
        this.callOnDispose.push(editor.onDidChangeModelMode(function () { return _this.update(); }));
        this.callOnDispose.push(modes_1.OnTypeFormattingEditProviderRegistry.onDidChange(this.update, this));
    }
    FormatOnType.prototype.update = function () {
        var _this = this;
        // clean up
        this.callOnModel = lifecycle_1.dispose(this.callOnModel);
        // we are disabled
        if (!this.editor.getConfiguration().contribInfo.formatOnType) {
            return;
        }
        // no model
        if (!this.editor.getModel()) {
            return;
        }
        var model = this.editor.getModel();
        // no support
        var support = modes_1.OnTypeFormattingEditProviderRegistry.ordered(model)[0];
        if (!support || !support.autoFormatTriggerCharacters) {
            return;
        }
        // register typing listeners that will trigger the format
        support.autoFormatTriggerCharacters.forEach(function (ch) {
            _this.callOnModel.push(_this.editor.addTypingListener(ch, _this.trigger.bind(_this, ch)));
        });
    };
    FormatOnType.prototype.trigger = function (ch) {
        var _this = this;
        if (this.editor.getSelections().length > 1) {
            return;
        }
        var model = this.editor.getModel(), position = this.editor.getPosition(), canceled = false;
        // install a listener that checks if edits happens before the
        // position on which we format right now. If so, we won't
        // apply the format edits
        var unbind = this.editor.onDidChangeModelRawContent(function (e) {
            if (e.changeType === editorCommon.EventType.ModelRawContentChangedFlush) {
                // a model.setValue() was called
                canceled = true;
            }
            else if (e.changeType === editorCommon.EventType.ModelRawContentChangedLineChanged) {
                var changedLine = e.lineNumber;
                canceled = changedLine <= position.lineNumber;
            }
            else if (e.changeType === editorCommon.EventType.ModelRawContentChangedLinesInserted) {
                var insertLine = e.fromLineNumber;
                canceled = insertLine <= position.lineNumber;
            }
            else if (e.changeType === editorCommon.EventType.ModelRawContentChangedLinesDeleted) {
                var deleteLine2 = e.toLineNumber;
                canceled = deleteLine2 <= position.lineNumber;
            }
            if (canceled) {
                // cancel only once
                unbind.dispose();
            }
        });
        var modelOpts = model.getOptions();
        format_1.getOnTypeFormattingEdits(model, position, ch, {
            tabSize: modelOpts.tabSize,
            insertSpaces: modelOpts.insertSpaces
        }).then(function (edits) {
            unbind.dispose();
            if (canceled || arrays.isFalsyOrEmpty(edits)) {
                return;
            }
            _this.editor.executeCommand(_this.getId(), new formatCommand_1.EditOperationsCommand(edits, _this.editor.getSelection()));
        }, function (err) {
            unbind.dispose();
            throw err;
        });
    };
    FormatOnType.prototype.getId = function () {
        return FormatOnType.ID;
    };
    FormatOnType.prototype.dispose = function () {
        this.callOnDispose = lifecycle_1.dispose(this.callOnDispose);
        this.callOnModel = lifecycle_1.dispose(this.callOnModel);
    };
    FormatOnType.ID = 'editor.contrib.autoFormat';
    FormatOnType = __decorate([
        editorCommonExtensions_1.commonEditorContribution
    ], FormatOnType);
    return FormatOnType;
}());
var FormatAction = (function (_super) {
    __extends(FormatAction, _super);
    function FormatAction() {
        _super.call(this, {
            id: 'editor.action.format',
            label: nls.localize('formatAction.label', "Format Code"),
            alias: 'Format Code',
            precondition: contextkey_1.ContextKeyExpr.and(EditorContextKeys.Writable, ModeContextKeys.hasFormattingProvider),
            kbOpts: {
                kbExpr: EditorContextKeys.TextFocus,
                primary: 16384 /* Shift */ | 8192 /* Alt */ | 36 /* KEY_F */,
                linux: { primary: 32768 /* CtrlCmd */ | 16384 /* Shift */ | 39 /* KEY_I */ }
            },
            menuOpts: {
                group: '1_modification',
                order: 1.3
            }
        });
    }
    FormatAction.prototype.run = function (accessor, editor) {
        var _this = this;
        var model = editor.getModel();
        var editorSelection = editor.getSelection();
        var modelOpts = model.getOptions();
        var options = {
            tabSize: modelOpts.tabSize,
            insertSpaces: modelOpts.insertSpaces,
        };
        var formattingPromise;
        if (editorSelection.isEmpty()) {
            formattingPromise = format_1.getDocumentFormattingEdits(model, options);
        }
        else {
            formattingPromise = format_1.getDocumentRangeFormattingEdits(model, editorSelection, options);
        }
        if (!formattingPromise) {
            return winjs_base_1.TPromise.as(void 0);
        }
        // Capture the state of the editor
        var state = editor.captureState(editorCommon.CodeEditorStateFlag.Value, editorCommon.CodeEditorStateFlag.Position);
        // Receive formatted value from worker
        return formattingPromise.then(function (result) {
            if (!state.validate(editor)) {
                return;
            }
            if (!result || result.length === 0) {
                return;
            }
            _this.apply(editor, editorSelection, result);
            editor.focus();
        });
    };
    FormatAction.prototype.apply = function (editor, editorSelection, value) {
        var command = new formatCommand_1.EditOperationsCommand(value, editorSelection);
        editor.executeCommand(this.id, command);
    };
    FormatAction = __decorate([
        editorCommonExtensions_1.editorAction
    ], FormatAction);
    return FormatAction;
}(editorCommonExtensions_1.EditorAction));
exports.FormatAction = FormatAction;
