/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var nls = require('vs/nls');
var keyCodes_1 = require('vs/base/common/keyCodes');
var sortLinesCommand_1 = require('vs/editor/contrib/linesOperations/common/sortLinesCommand');
var trimTrailingWhitespaceCommand_1 = require('vs/editor/common/commands/trimTrailingWhitespaceCommand');
var editorCommon_1 = require('vs/editor/common/editorCommon');
var editorCommonExtensions_1 = require('vs/editor/common/editorCommonExtensions');
var copyLinesCommand_1 = require('./copyLinesCommand');
var deleteLinesCommand_1 = require('./deleteLinesCommand');
var moveLinesCommand_1 = require('./moveLinesCommand');
// copy lines
var AbstractCopyLinesAction = (function (_super) {
    __extends(AbstractCopyLinesAction, _super);
    function AbstractCopyLinesAction(down, opts) {
        _super.call(this, opts);
        this.down = down;
    }
    AbstractCopyLinesAction.prototype.run = function (accessor, editor) {
        var commands = [];
        var selections = editor.getSelections();
        for (var i = 0; i < selections.length; i++) {
            commands.push(new copyLinesCommand_1.CopyLinesCommand(selections[i], this.down));
        }
        editor.executeCommands(this.id, commands);
    };
    return AbstractCopyLinesAction;
}(editorCommonExtensions_1.EditorAction));
var CopyLinesUpAction = (function (_super) {
    __extends(CopyLinesUpAction, _super);
    function CopyLinesUpAction() {
        _super.call(this, false, {
            id: 'editor.action.copyLinesUpAction',
            label: nls.localize('lines.copyUp', "Copy Line Up"),
            alias: 'Copy Line Up',
            precondition: editorCommon_1.EditorContextKeys.Writable,
            kbOpts: {
                kbExpr: editorCommon_1.EditorContextKeys.TextFocus,
                primary: 8192 /* Alt */ | 16384 /* Shift */ | 16 /* UpArrow */,
                linux: { primary: 32768 /* CtrlCmd */ | 8192 /* Alt */ | 16384 /* Shift */ | 16 /* UpArrow */ }
            }
        });
    }
    CopyLinesUpAction = __decorate([
        editorCommonExtensions_1.editorAction
    ], CopyLinesUpAction);
    return CopyLinesUpAction;
}(AbstractCopyLinesAction));
var CopyLinesDownAction = (function (_super) {
    __extends(CopyLinesDownAction, _super);
    function CopyLinesDownAction() {
        _super.call(this, true, {
            id: 'editor.action.copyLinesDownAction',
            label: nls.localize('lines.copyDown', "Copy Line Down"),
            alias: 'Copy Line Down',
            precondition: editorCommon_1.EditorContextKeys.Writable,
            kbOpts: {
                kbExpr: editorCommon_1.EditorContextKeys.TextFocus,
                primary: 8192 /* Alt */ | 16384 /* Shift */ | 18 /* DownArrow */,
                linux: { primary: 32768 /* CtrlCmd */ | 8192 /* Alt */ | 16384 /* Shift */ | 18 /* DownArrow */ }
            }
        });
    }
    CopyLinesDownAction = __decorate([
        editorCommonExtensions_1.editorAction
    ], CopyLinesDownAction);
    return CopyLinesDownAction;
}(AbstractCopyLinesAction));
// move lines
var AbstractMoveLinesAction = (function (_super) {
    __extends(AbstractMoveLinesAction, _super);
    function AbstractMoveLinesAction(down, opts) {
        _super.call(this, opts);
        this.down = down;
    }
    AbstractMoveLinesAction.prototype.run = function (accessor, editor) {
        var commands = [];
        var selections = editor.getSelections();
        for (var i = 0; i < selections.length; i++) {
            commands.push(new moveLinesCommand_1.MoveLinesCommand(selections[i], this.down));
        }
        editor.executeCommands(this.id, commands);
    };
    return AbstractMoveLinesAction;
}(editorCommonExtensions_1.EditorAction));
var MoveLinesUpAction = (function (_super) {
    __extends(MoveLinesUpAction, _super);
    function MoveLinesUpAction() {
        _super.call(this, false, {
            id: 'editor.action.moveLinesUpAction',
            label: nls.localize('lines.moveUp', "Move Line Up"),
            alias: 'Move Line Up',
            precondition: editorCommon_1.EditorContextKeys.Writable,
            kbOpts: {
                kbExpr: editorCommon_1.EditorContextKeys.TextFocus,
                primary: 8192 /* Alt */ | 16 /* UpArrow */,
                linux: { primary: 8192 /* Alt */ | 16 /* UpArrow */ }
            }
        });
    }
    MoveLinesUpAction = __decorate([
        editorCommonExtensions_1.editorAction
    ], MoveLinesUpAction);
    return MoveLinesUpAction;
}(AbstractMoveLinesAction));
var MoveLinesDownAction = (function (_super) {
    __extends(MoveLinesDownAction, _super);
    function MoveLinesDownAction() {
        _super.call(this, true, {
            id: 'editor.action.moveLinesDownAction',
            label: nls.localize('lines.moveDown', "Move Line Down"),
            alias: 'Move Line Down',
            precondition: editorCommon_1.EditorContextKeys.Writable,
            kbOpts: {
                kbExpr: editorCommon_1.EditorContextKeys.TextFocus,
                primary: 8192 /* Alt */ | 18 /* DownArrow */,
                linux: { primary: 8192 /* Alt */ | 18 /* DownArrow */ }
            }
        });
    }
    MoveLinesDownAction = __decorate([
        editorCommonExtensions_1.editorAction
    ], MoveLinesDownAction);
    return MoveLinesDownAction;
}(AbstractMoveLinesAction));
var AbstractSortLinesAction = (function (_super) {
    __extends(AbstractSortLinesAction, _super);
    function AbstractSortLinesAction(descending, opts) {
        _super.call(this, opts);
        this.descending = descending;
    }
    AbstractSortLinesAction.prototype.run = function (accessor, editor) {
        if (!sortLinesCommand_1.SortLinesCommand.canRun(editor.getModel(), editor.getSelection(), this.descending)) {
            return;
        }
        var command = new sortLinesCommand_1.SortLinesCommand(editor.getSelection(), this.descending);
        editor.executeCommands(this.id, [command]);
    };
    return AbstractSortLinesAction;
}(editorCommonExtensions_1.EditorAction));
var SortLinesAscendingAction = (function (_super) {
    __extends(SortLinesAscendingAction, _super);
    function SortLinesAscendingAction() {
        _super.call(this, false, {
            id: 'editor.action.sortLinesAscending',
            label: nls.localize('lines.sortAscending', "Sort Lines Ascending"),
            alias: 'Sort Lines Ascending',
            precondition: editorCommon_1.EditorContextKeys.Writable
        });
    }
    SortLinesAscendingAction = __decorate([
        editorCommonExtensions_1.editorAction
    ], SortLinesAscendingAction);
    return SortLinesAscendingAction;
}(AbstractSortLinesAction));
var SortLinesDescendingAction = (function (_super) {
    __extends(SortLinesDescendingAction, _super);
    function SortLinesDescendingAction() {
        _super.call(this, true, {
            id: 'editor.action.sortLinesDescending',
            label: nls.localize('lines.sortDescending', "Sort Lines Descending"),
            alias: 'Sort Lines Descending',
            precondition: editorCommon_1.EditorContextKeys.Writable
        });
    }
    SortLinesDescendingAction = __decorate([
        editorCommonExtensions_1.editorAction
    ], SortLinesDescendingAction);
    return SortLinesDescendingAction;
}(AbstractSortLinesAction));
var TrimTrailingWhitespaceAction = (function (_super) {
    __extends(TrimTrailingWhitespaceAction, _super);
    function TrimTrailingWhitespaceAction() {
        _super.call(this, {
            id: TrimTrailingWhitespaceAction.ID,
            label: nls.localize('lines.trimTrailingWhitespace', "Trim Trailing Whitespace"),
            alias: 'Trim Trailing Whitespace',
            precondition: editorCommon_1.EditorContextKeys.Writable,
            kbOpts: {
                kbExpr: editorCommon_1.EditorContextKeys.TextFocus,
                primary: keyCodes_1.KeyChord(32768 /* CtrlCmd */ | 41 /* KEY_K */, 32768 /* CtrlCmd */ | 54 /* KEY_X */)
            }
        });
    }
    TrimTrailingWhitespaceAction.prototype.run = function (accessor, editor) {
        var command = new trimTrailingWhitespaceCommand_1.TrimTrailingWhitespaceCommand(editor.getSelection());
        editor.executeCommands(this.id, [command]);
    };
    TrimTrailingWhitespaceAction.ID = 'editor.action.trimTrailingWhitespace';
    TrimTrailingWhitespaceAction = __decorate([
        editorCommonExtensions_1.editorAction
    ], TrimTrailingWhitespaceAction);
    return TrimTrailingWhitespaceAction;
}(editorCommonExtensions_1.EditorAction));
exports.TrimTrailingWhitespaceAction = TrimTrailingWhitespaceAction;
var AbstractRemoveLinesAction = (function (_super) {
    __extends(AbstractRemoveLinesAction, _super);
    function AbstractRemoveLinesAction() {
        _super.apply(this, arguments);
    }
    AbstractRemoveLinesAction.prototype._getLinesToRemove = function (editor) {
        // Construct delete operations
        var operations = editor.getSelections().map(function (s) {
            var endLineNumber = s.endLineNumber;
            if (s.startLineNumber < s.endLineNumber && s.endColumn === 1) {
                endLineNumber -= 1;
            }
            return {
                startLineNumber: s.startLineNumber,
                endLineNumber: endLineNumber,
                positionColumn: s.positionColumn
            };
        });
        // Sort delete operations
        operations.sort(function (a, b) {
            return a.startLineNumber - b.startLineNumber;
        });
        // Merge delete operations on consecutive lines
        var mergedOperations = [];
        var previousOperation = operations[0];
        for (var i = 1; i < operations.length; i++) {
            if (previousOperation.endLineNumber + 1 === operations[i].startLineNumber) {
                // Merge current operations into the previous one
                previousOperation.endLineNumber = operations[i].endLineNumber;
            }
            else {
                // Push previous operation
                mergedOperations.push(previousOperation);
                previousOperation = operations[i];
            }
        }
        // Push the last operation
        mergedOperations.push(previousOperation);
        return mergedOperations;
    };
    return AbstractRemoveLinesAction;
}(editorCommonExtensions_1.EditorAction));
var DeleteLinesAction = (function (_super) {
    __extends(DeleteLinesAction, _super);
    function DeleteLinesAction() {
        _super.call(this, {
            id: 'editor.action.deleteLines',
            label: nls.localize('lines.delete', "Delete Line"),
            alias: 'Delete Line',
            precondition: editorCommon_1.EditorContextKeys.Writable,
            kbOpts: {
                kbExpr: editorCommon_1.EditorContextKeys.TextFocus,
                primary: 32768 /* CtrlCmd */ | 16384 /* Shift */ | 41 /* KEY_K */
            }
        });
    }
    DeleteLinesAction.prototype.run = function (accessor, editor) {
        var ops = this._getLinesToRemove(editor);
        // Finally, construct the delete lines commands
        var commands = ops.map(function (op) {
            return new deleteLinesCommand_1.DeleteLinesCommand(op.startLineNumber, op.endLineNumber, op.positionColumn);
        });
        editor.executeCommands(this.id, commands);
    };
    DeleteLinesAction = __decorate([
        editorCommonExtensions_1.editorAction
    ], DeleteLinesAction);
    return DeleteLinesAction;
}(AbstractRemoveLinesAction));
var IndentLinesAction = (function (_super) {
    __extends(IndentLinesAction, _super);
    function IndentLinesAction() {
        _super.call(this, {
            id: 'editor.action.indentLines',
            label: nls.localize('lines.indent', "Indent Line"),
            alias: 'Indent Line',
            precondition: editorCommon_1.EditorContextKeys.Writable,
            handlerId: editorCommon_1.Handler.Indent,
            kbOpts: {
                kbExpr: editorCommon_1.EditorContextKeys.TextFocus,
                primary: 32768 /* CtrlCmd */ | 89 /* US_CLOSE_SQUARE_BRACKET */
            }
        });
    }
    IndentLinesAction = __decorate([
        editorCommonExtensions_1.editorAction
    ], IndentLinesAction);
    return IndentLinesAction;
}(editorCommonExtensions_1.HandlerEditorAction));
var OutdentLinesAction = (function (_super) {
    __extends(OutdentLinesAction, _super);
    function OutdentLinesAction() {
        _super.call(this, {
            id: 'editor.action.outdentLines',
            label: nls.localize('lines.outdent', "Outdent Line"),
            alias: 'Outdent Line',
            precondition: editorCommon_1.EditorContextKeys.Writable,
            handlerId: editorCommon_1.Handler.Outdent,
            kbOpts: {
                kbExpr: editorCommon_1.EditorContextKeys.TextFocus,
                primary: 32768 /* CtrlCmd */ | 87 /* US_OPEN_SQUARE_BRACKET */
            }
        });
    }
    OutdentLinesAction = __decorate([
        editorCommonExtensions_1.editorAction
    ], OutdentLinesAction);
    return OutdentLinesAction;
}(editorCommonExtensions_1.HandlerEditorAction));
var InsertLineBeforeAction = (function (_super) {
    __extends(InsertLineBeforeAction, _super);
    function InsertLineBeforeAction() {
        _super.call(this, {
            id: 'editor.action.insertLineBefore',
            label: nls.localize('lines.insertBefore', "Insert Line Above"),
            alias: 'Insert Line Above',
            precondition: editorCommon_1.EditorContextKeys.Writable,
            handlerId: editorCommon_1.Handler.LineInsertBefore,
            kbOpts: {
                kbExpr: editorCommon_1.EditorContextKeys.TextFocus,
                primary: 32768 /* CtrlCmd */ | 16384 /* Shift */ | 3 /* Enter */
            }
        });
    }
    InsertLineBeforeAction = __decorate([
        editorCommonExtensions_1.editorAction
    ], InsertLineBeforeAction);
    return InsertLineBeforeAction;
}(editorCommonExtensions_1.HandlerEditorAction));
var InsertLineAfterAction = (function (_super) {
    __extends(InsertLineAfterAction, _super);
    function InsertLineAfterAction() {
        _super.call(this, {
            id: 'editor.action.insertLineAfter',
            label: nls.localize('lines.insertAfter', "Insert Line Below"),
            alias: 'Insert Line Below',
            precondition: editorCommon_1.EditorContextKeys.Writable,
            handlerId: editorCommon_1.Handler.LineInsertAfter,
            kbOpts: {
                kbExpr: editorCommon_1.EditorContextKeys.TextFocus,
                primary: 32768 /* CtrlCmd */ | 3 /* Enter */
            }
        });
    }
    InsertLineAfterAction = __decorate([
        editorCommonExtensions_1.editorAction
    ], InsertLineAfterAction);
    return InsertLineAfterAction;
}(editorCommonExtensions_1.HandlerEditorAction));
