/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
require("./defineKeybinding.css");
var nls = require("vs/nls");
var async_1 = require("vs/base/common/async");
var keyCodes_1 = require("vs/base/common/keyCodes");
var keybinding_1 = require("vs/base/common/keybinding");
var lifecycle_1 = require("vs/base/common/lifecycle");
var dom = require("vs/base/browser/dom");
var htmlContentRenderer_1 = require("vs/base/browser/htmlContentRenderer");
var keyboardEvent_1 = require("vs/base/browser/keyboardEvent");
var styleMutator_1 = require("vs/base/browser/styleMutator");
var keybindingResolver_1 = require("vs/platform/keybinding/common/keybindingResolver");
var keybinding_2 = require("vs/platform/keybinding/common/keybinding");
var contextkey_1 = require("vs/platform/contextkey/common/contextkey");
var range_1 = require("vs/editor/common/core/range");
var editorCommon = require("vs/editor/common/editorCommon");
var editorCommonExtensions_1 = require("vs/editor/common/editorCommonExtensions");
var editorBrowser_1 = require("vs/editor/browser/editorBrowser");
var editorBrowserExtensions_1 = require("vs/editor/browser/editorBrowserExtensions");
var snippet_1 = require("vs/editor/contrib/snippet/common/snippet");
var snippetController_1 = require("vs/editor/contrib/snippet/common/snippetController");
var smartSnippetInserter_1 = require("vs/editor/contrib/defineKeybinding/common/smartSnippetInserter");
var EditorContextKeys = editorCommon.EditorContextKeys;
var NLS_LAUNCH_MESSAGE = nls.localize('defineKeybinding.start', "Define Keybinding");
var NLS_DEFINE_MESSAGE = nls.localize('defineKeybinding.initial', "Press desired key combination and ENTER");
var NLS_KB_LAYOUT_INFO_MESSAGE = nls.localize('defineKeybinding.kbLayoutInfoMessage', "For your current keyboard layout press ");
var NLS_KB_LAYOUT_ERROR_MESSAGE = nls.localize('defineKeybinding.kbLayoutErrorMessage', "You won't be able to produce this key combination under your current keyboard layout.");
var INTERESTING_FILE = /keybindings\.json$/;
var DefineKeybindingController = DefineKeybindingController_1 = (function () {
    function DefineKeybindingController(editor, keybindingService) {
        var _this = this;
        this._dec = [];
        this._editor = editor;
        this._keybindingService = keybindingService;
        this._toDispose = [];
        this._launchWidget = new DefineKeybindingLauncherWidget(this._editor, keybindingService, function () { return _this.launch(); });
        this._defineWidget = new DefineKeybindingWidget(this._editor, keybindingService, function (keybinding) { return _this._onAccepted(keybinding); });
        this._toDispose.push(this._editor.onDidChangeConfiguration(function (e) {
            if (isInterestingEditorModel(_this._editor)) {
                _this._launchWidget.show();
            }
            else {
                _this._launchWidget.hide();
            }
        }));
        this._toDispose.push(this._editor.onDidChangeModel(function (e) {
            if (isInterestingEditorModel(_this._editor)) {
                _this._launchWidget.show();
            }
            else {
                _this._launchWidget.hide();
            }
            _this._onModel();
        }));
        this._updateDecorations = new async_1.RunOnceScheduler(function () { return _this._updateDecorationsNow(); }, 500);
        this._toDispose.push(this._updateDecorations);
        this._modelToDispose = [];
        this._onModel();
    }
    DefineKeybindingController.get = function (editor) {
        return editor.getContribution(DefineKeybindingController_1.ID);
    };
    DefineKeybindingController.prototype.getId = function () {
        return DefineKeybindingController_1.ID;
    };
    DefineKeybindingController.prototype.dispose = function () {
        this._modelToDispose = lifecycle_1.dispose(this._modelToDispose);
        this._toDispose = lifecycle_1.dispose(this._toDispose);
        this._launchWidget.dispose();
        this._launchWidget = null;
        this._defineWidget.dispose();
        this._defineWidget = null;
    };
    DefineKeybindingController.prototype.launch = function () {
        if (isInterestingEditorModel(this._editor)) {
            this._defineWidget.start();
        }
    };
    DefineKeybindingController.prototype._onAccepted = function (keybinding) {
        var snippetText = [
            '{',
            '\t"key": ' + JSON.stringify(keybinding) + ',',
            '\t"command": "${1:commandId}",',
            '\t"when": "${2:editorTextFocus}"',
            '}$0'
        ].join('\n');
        var smartInsertInfo = smartSnippetInserter_1.SmartSnippetInserter.insertSnippet(this._editor.getModel(), this._editor.getPosition());
        snippetText = smartInsertInfo.prepend + snippetText + smartInsertInfo.append;
        this._editor.setPosition(smartInsertInfo.position);
        snippetController_1.SnippetController.get(this._editor).run(snippet_1.CodeSnippet.fromTextmate(snippetText), 0, 0);
    };
    DefineKeybindingController.prototype._onModel = function () {
        var _this = this;
        this._modelToDispose = lifecycle_1.dispose(this._modelToDispose);
        var model = this._editor.getModel();
        if (!model) {
            return;
        }
        var url = model.uri.toString();
        if (!INTERESTING_FILE.test(url)) {
            return;
        }
        this._modelToDispose.push(model.onDidChangeContent(function (e) { return _this._updateDecorations.schedule(); }));
        this._modelToDispose.push({
            dispose: function () {
                _this._dec = _this._editor.deltaDecorations(_this._dec, []);
                _this._updateDecorations.cancel();
            }
        });
        this._updateDecorations.schedule();
    };
    DefineKeybindingController.prototype._updateDecorationsNow = function () {
        var _this = this;
        var model = this._editor.getModel();
        var regex = keybinding_1.Keybinding.getUserSettingsKeybindingRegex();
        var m = model.findMatches(regex, false, true, false, false);
        var data = m.map(function (range) {
            var text = model.getValueInRange(range);
            var strKeybinding = text.substring(1, text.length - 1);
            strKeybinding = strKeybinding.replace(/\\\\/g, '\\');
            var numKeybinding = keybindingResolver_1.IOSupport.readKeybinding(strKeybinding);
            var keybinding = new keybinding_1.Keybinding(numKeybinding);
            return {
                strKeybinding: strKeybinding,
                keybinding: keybinding,
                usLabel: keybinding._toUSLabel(),
                label: _this._keybindingService.getLabelFor(keybinding),
                range: range
            };
        });
        data = data.filter(function (entry) {
            return (entry.usLabel !== entry.label);
        });
        var newDecorations = [];
        data.forEach(function (item) {
            var msg;
            var className;
            var inlineClassName;
            var overviewRulerColor;
            if (!item.label) {
                // this is the error case
                msg = [NLS_KB_LAYOUT_ERROR_MESSAGE];
                className = 'keybindingError';
                inlineClassName = 'inlineKeybindingError';
                overviewRulerColor = 'rgba(250, 100, 100, 0.6)';
            }
            else {
                // this is the info case
                msg = [NLS_KB_LAYOUT_INFO_MESSAGE];
                msg = msg.concat(_this._keybindingService.getLabelFor(item.keybinding));
                className = 'keybindingInfo';
                inlineClassName = 'inlineKeybindingInfo';
                overviewRulerColor = 'rgba(100, 100, 250, 0.6)';
            }
            // icon decoration
            newDecorations.push({
                range: new range_1.Range(item.range.startLineNumber, item.range.startColumn, item.range.startLineNumber, item.range.startColumn + 1),
                options: {
                    stickiness: editorCommon.TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges,
                    inlineClassName: inlineClassName
                }
            });
            // highlight + message decoration
            newDecorations.push({
                range: item.range,
                options: {
                    stickiness: editorCommon.TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges,
                    className: className,
                    hoverMessage: msg,
                    overviewRuler: {
                        color: overviewRulerColor,
                        darkColor: overviewRulerColor,
                        position: editorCommon.OverviewRulerLane.Right
                    }
                }
            });
        });
        this._dec = this._editor.deltaDecorations(this._dec, newDecorations);
    };
    return DefineKeybindingController;
}());
DefineKeybindingController.ID = 'editor.contrib.defineKeybinding';
DefineKeybindingController = DefineKeybindingController_1 = __decorate([
    editorBrowserExtensions_1.editorContribution,
    __param(1, keybinding_2.IKeybindingService)
], DefineKeybindingController);
exports.DefineKeybindingController = DefineKeybindingController;
var DefineKeybindingLauncherWidget = (function () {
    function DefineKeybindingLauncherWidget(editor, keybindingService, onLaunch) {
        this._editor = editor;
        this._domNode = document.createElement('div');
        this._domNode.className = 'defineKeybindingLauncher';
        this._domNode.style.display = 'none';
        this._isVisible = false;
        var keybinding = keybindingService.lookupKeybindings(DefineKeybindingAction.ID);
        var extra = '';
        if (keybinding.length > 0) {
            extra += ' (' + keybindingService.getLabelFor(keybinding[0]) + ')';
        }
        this._domNode.appendChild(document.createTextNode(NLS_LAUNCH_MESSAGE + extra));
        this._toDispose = [];
        this._toDispose.push(dom.addDisposableListener(this._domNode, 'click', function (e) {
            onLaunch();
        }));
        this._editor.addOverlayWidget(this);
    }
    DefineKeybindingLauncherWidget.prototype.dispose = function () {
        this._editor.removeOverlayWidget(this);
        this._toDispose = lifecycle_1.dispose(this._toDispose);
    };
    DefineKeybindingLauncherWidget.prototype.show = function () {
        if (this._isVisible) {
            return;
        }
        this._domNode.style.display = 'block';
        this._isVisible = true;
        this._editor.layoutOverlayWidget(this);
    };
    DefineKeybindingLauncherWidget.prototype.hide = function () {
        if (!this._isVisible) {
            return;
        }
        this._domNode.style.display = 'none';
        this._isVisible = false;
        this._editor.layoutOverlayWidget(this);
    };
    // ----- IOverlayWidget API
    DefineKeybindingLauncherWidget.prototype.getId = function () {
        return DefineKeybindingLauncherWidget.ID;
    };
    DefineKeybindingLauncherWidget.prototype.getDomNode = function () {
        return this._domNode;
    };
    DefineKeybindingLauncherWidget.prototype.getPosition = function () {
        return {
            preference: this._isVisible ? editorBrowser_1.OverlayWidgetPositionPreference.BOTTOM_RIGHT_CORNER : null
        };
    };
    return DefineKeybindingLauncherWidget;
}());
DefineKeybindingLauncherWidget.ID = 'editor.contrib.defineKeybindingLauncherWidget';
var DefineKeybindingWidget = (function () {
    function DefineKeybindingWidget(editor, keybindingService, onAccepted) {
        var _this = this;
        this._editor = editor;
        this._keybindingService = keybindingService;
        this._onAccepted = onAccepted;
        this._toDispose = [];
        this._lastKeybinding = null;
        this._domNode = document.createElement('div');
        this._domNode.className = 'defineKeybindingWidget';
        styleMutator_1.StyleMutator.setWidth(this._domNode, DefineKeybindingWidget.WIDTH);
        styleMutator_1.StyleMutator.setHeight(this._domNode, DefineKeybindingWidget.HEIGHT);
        this._domNode.style.display = 'none';
        this._isVisible = false;
        this._messageNode = document.createElement('div');
        this._messageNode.className = 'message';
        this._messageNode.innerText = NLS_DEFINE_MESSAGE;
        this._domNode.appendChild(this._messageNode);
        this._inputNode = document.createElement('input');
        this._inputNode.className = 'input';
        this._inputNode.type = 'text';
        this._domNode.appendChild(this._inputNode);
        this._outputNode = document.createElement('div');
        this._outputNode.className = 'output';
        this._domNode.appendChild(this._outputNode);
        this._toDispose.push(dom.addDisposableListener(this._inputNode, 'keydown', function (e) {
            var keyEvent = new keyboardEvent_1.StandardKeyboardEvent(e);
            keyEvent.preventDefault();
            keyEvent.stopPropagation();
            var kb = keyEvent.toKeybinding();
            switch (kb.value) {
                case 3 /* Enter */:
                    if (_this._lastKeybinding) {
                        _this._onAccepted(_this._lastKeybinding.toUserSettingsLabel());
                    }
                    _this._stop();
                    return;
                case 9 /* Escape */:
                    _this._stop();
                    return;
            }
            _this._lastKeybinding = kb;
            _this._inputNode.value = _this._lastKeybinding.toUserSettingsLabel().toLowerCase();
            _this._inputNode.title = 'keyCode: ' + keyEvent.browserEvent.keyCode;
            dom.clearNode(_this._outputNode);
            var htmlkb = _this._keybindingService.getHTMLLabelFor(_this._lastKeybinding);
            htmlkb.forEach(function (item) { return _this._outputNode.appendChild(htmlContentRenderer_1.renderHtml(item)); });
        }));
        this._toDispose.push(this._editor.onDidChangeConfiguration(function (e) {
            if (_this._isVisible) {
                _this._layout();
            }
        }));
        this._toDispose.push(dom.addDisposableListener(this._inputNode, 'blur', function (e) { return _this._stop(); }));
        this._editor.addOverlayWidget(this);
    }
    DefineKeybindingWidget.prototype.dispose = function () {
        this._editor.removeOverlayWidget(this);
        this._toDispose = lifecycle_1.dispose(this._toDispose);
    };
    DefineKeybindingWidget.prototype.getId = function () {
        return DefineKeybindingWidget.ID;
    };
    DefineKeybindingWidget.prototype.getDomNode = function () {
        return this._domNode;
    };
    DefineKeybindingWidget.prototype.getPosition = function () {
        return {
            preference: null
        };
    };
    DefineKeybindingWidget.prototype._show = function () {
        if (this._isVisible) {
            return;
        }
        this._isVisible = true;
        this._layout();
        this._domNode.style.display = 'block';
    };
    DefineKeybindingWidget.prototype._hide = function () {
        if (!this._isVisible) {
            return;
        }
        this._isVisible = false;
        this._domNode.style.display = 'none';
    };
    DefineKeybindingWidget.prototype._layout = function () {
        var editorLayout = this._editor.getLayoutInfo();
        var top = Math.round((editorLayout.height - DefineKeybindingWidget.HEIGHT) / 2);
        styleMutator_1.StyleMutator.setTop(this._domNode, top);
        var left = Math.round((editorLayout.width - DefineKeybindingWidget.WIDTH) / 2);
        styleMutator_1.StyleMutator.setLeft(this._domNode, left);
    };
    DefineKeybindingWidget.prototype.start = function () {
        this._editor.revealPositionInCenterIfOutsideViewport(this._editor.getPosition());
        this._show();
        this._lastKeybinding = null;
        this._inputNode.value = '';
        dom.clearNode(this._outputNode);
        this._inputNode.focus();
    };
    DefineKeybindingWidget.prototype._stop = function () {
        this._editor.focus();
        this._hide();
    };
    return DefineKeybindingWidget;
}());
DefineKeybindingWidget.ID = 'editor.contrib.defineKeybindingWidget';
DefineKeybindingWidget.WIDTH = 340;
DefineKeybindingWidget.HEIGHT = 90;
var DefineKeybindingAction = DefineKeybindingAction_1 = (function (_super) {
    __extends(DefineKeybindingAction, _super);
    function DefineKeybindingAction() {
        return _super.call(this, {
            id: DefineKeybindingAction_1.ID,
            label: nls.localize('DefineKeybindingAction', "Define Keybinding"),
            alias: 'Define Keybinding',
            precondition: contextkey_1.ContextKeyExpr.and(EditorContextKeys.Writable, EditorContextKeys.LanguageId.isEqualTo('json')),
            kbOpts: {
                kbExpr: EditorContextKeys.TextFocus,
                primary: keyCodes_1.KeyChord(32768 /* CtrlCmd */ | 41 /* KEY_K */, 32768 /* CtrlCmd */ | 41 /* KEY_K */)
            }
        }) || this;
    }
    DefineKeybindingAction.prototype.run = function (accessor, editor) {
        if (!isInterestingEditorModel(editor)) {
            return;
        }
        var controller = DefineKeybindingController.get(editor);
        if (controller) {
            controller.launch();
        }
    };
    return DefineKeybindingAction;
}(editorCommonExtensions_1.EditorAction));
DefineKeybindingAction.ID = 'editor.action.defineKeybinding';
DefineKeybindingAction = DefineKeybindingAction_1 = __decorate([
    editorCommonExtensions_1.editorAction
], DefineKeybindingAction);
exports.DefineKeybindingAction = DefineKeybindingAction;
function isInterestingEditorModel(editor) {
    if (editor.getConfiguration().readOnly) {
        return false;
    }
    var model = editor.getModel();
    if (!model) {
        return false;
    }
    var url = model.uri.toString();
    return INTERESTING_FILE.test(url);
}
var DefineKeybindingController_1, DefineKeybindingAction_1;
