/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
require('./accessibility.css');
var nls = require('vs/nls');
var lifecycle_1 = require('vs/base/common/lifecycle');
var strings = require('vs/base/common/strings');
var dom_1 = require('vs/base/browser/dom');
var htmlContentRenderer_1 = require('vs/base/browser/htmlContentRenderer');
var styleMutator_1 = require('vs/base/browser/styleMutator');
var widget_1 = require('vs/base/browser/ui/widget');
var keybinding_1 = require('vs/platform/keybinding/common/keybinding');
var contextkey_1 = require('vs/platform/contextkey/common/contextkey');
var keybindingsRegistry_1 = require('vs/platform/keybinding/common/keybindingsRegistry');
var commonEditorConfig_1 = require('vs/editor/common/config/commonEditorConfig');
var editorCommon_1 = require('vs/editor/common/editorCommon');
var editorCommonExtensions_1 = require('vs/editor/common/editorCommonExtensions');
var editorBrowserExtensions_1 = require('vs/editor/browser/editorBrowserExtensions');
var toggleTabFocusMode_1 = require('vs/editor/contrib/toggleTabFocusMode/common/toggleTabFocusMode');
var CONTEXT_ACCESSIBILITY_WIDGET_VISIBLE = new contextkey_1.RawContextKey('accessibilityHelpWidgetVisible', false);
var TOGGLE_EXPERIMENTAL_SCREEN_READER_SUPPORT_COMMAND_ID = 'toggleExperimentalScreenReaderSupport';
var AccessibilityHelpController = (function (_super) {
    __extends(AccessibilityHelpController, _super);
    function AccessibilityHelpController(editor, contextKeyService, keybindingService) {
        _super.call(this);
        this._editor = editor;
        this._widget = this._register(new AccessibilityHelpWidget(this._editor, contextKeyService, keybindingService));
    }
    AccessibilityHelpController.get = function (editor) {
        return editor.getContribution(AccessibilityHelpController.ID);
    };
    AccessibilityHelpController.prototype.getId = function () {
        return AccessibilityHelpController.ID;
    };
    AccessibilityHelpController.prototype.show = function () {
        this._widget.show();
    };
    AccessibilityHelpController.prototype.hide = function () {
        this._widget.hide();
    };
    AccessibilityHelpController.ID = 'editor.contrib.accessibilityHelpController';
    AccessibilityHelpController = __decorate([
        editorBrowserExtensions_1.editorContribution,
        __param(1, contextkey_1.IContextKeyService),
        __param(2, keybinding_1.IKeybindingService)
    ], AccessibilityHelpController);
    return AccessibilityHelpController;
}(lifecycle_1.Disposable));
var AccessibilityHelpWidget = (function (_super) {
    __extends(AccessibilityHelpWidget, _super);
    function AccessibilityHelpWidget(editor, contextKeyService, keybindingService) {
        var _this = this;
        _super.call(this);
        this._editor = editor;
        this._keybindingService = keybindingService;
        this._isVisibleKey = CONTEXT_ACCESSIBILITY_WIDGET_VISIBLE.bindTo(contextKeyService);
        this._domNode = document.createElement('div');
        this._domNode.className = 'accessibilityHelpWidget';
        styleMutator_1.StyleMutator.setWidth(this._domNode, AccessibilityHelpWidget.WIDTH);
        styleMutator_1.StyleMutator.setHeight(this._domNode, AccessibilityHelpWidget.HEIGHT);
        this._domNode.style.display = 'none';
        this._domNode.setAttribute('role', 'tooltip');
        this._domNode.setAttribute('aria-hidden', 'true');
        this._isVisible = false;
        this._register(this._editor.onDidLayoutChange(function () {
            if (_this._isVisible) {
                _this._layout();
            }
        }));
        this.onblur(this._domNode, function () {
            _this.hide();
        });
        this._editor.addOverlayWidget(this);
    }
    AccessibilityHelpWidget.prototype.dispose = function () {
        this._editor.removeOverlayWidget(this);
        _super.prototype.dispose.call(this);
    };
    AccessibilityHelpWidget.prototype.getId = function () {
        return AccessibilityHelpWidget.ID;
    };
    AccessibilityHelpWidget.prototype.getDomNode = function () {
        return this._domNode;
    };
    AccessibilityHelpWidget.prototype.getPosition = function () {
        return {
            preference: null
        };
    };
    AccessibilityHelpWidget.prototype.show = function () {
        if (this._isVisible) {
            return;
        }
        this._isVisible = true;
        this._isVisibleKey.set(true);
        this._layout();
        this._domNode.style.display = 'block';
        this._domNode.setAttribute('aria-hidden', 'false');
        this._domNode.tabIndex = 0;
        this._buildContent();
        this._domNode.focus();
    };
    AccessibilityHelpWidget.prototype._descriptionForCommand = function (commandId, msg, noKbMsg) {
        var keybindings = this._keybindingService.lookupKeybindings(commandId);
        if (keybindings.length > 0) {
            return strings.format(msg, this._keybindingService.getAriaLabelFor(keybindings[0]));
        }
        return strings.format(noKbMsg, commandId);
    };
    AccessibilityHelpWidget.prototype._buildContent = function () {
        var opts = this._editor.getConfiguration();
        var text = nls.localize('introMsg', "Thank you for trying out VS Code's experimental accessibility options.");
        text += '\n\n' + nls.localize('status', "Status:");
        var NLS_TAB_FOCUS_MODE_ON = nls.localize('tabFocusModeOnMsg', "Pressing Tab in this editor will move focus to the next focusable element. Toggle this behaviour by pressing {0}.");
        var NLS_TAB_FOCUS_MODE_ON_NO_KB = nls.localize('tabFocusModeOnMsgNoKb', "Pressing Tab in this editor will move focus to the next focusable element. The command {0} is currently not triggerable by a keybinding.");
        var NLS_TAB_FOCUS_MODE_OFF = nls.localize('tabFocusModeOffMsg', "Pressing Tab in this editor will insert the tab character. Toggle this behaviour by pressing {0}.");
        var NLS_TAB_FOCUS_MODE_OFF_NO_KB = nls.localize('tabFocusModeOffMsgNoKb', "Pressing Tab in this editor will move focus to the next focusable element. The command {0} is currently not triggerable by a keybinding.");
        if (opts.tabFocusMode) {
            text += '\n\n - ' + this._descriptionForCommand(toggleTabFocusMode_1.ToggleTabFocusModeAction.ID, NLS_TAB_FOCUS_MODE_ON, NLS_TAB_FOCUS_MODE_ON_NO_KB);
        }
        else {
            text += '\n\n - ' + this._descriptionForCommand(toggleTabFocusMode_1.ToggleTabFocusModeAction.ID, NLS_TAB_FOCUS_MODE_OFF, NLS_TAB_FOCUS_MODE_OFF_NO_KB);
        }
        text += '\n\n' + nls.localize('outroMsg', "You can dismiss this tooltip and return to the editor by pressing Escape.");
        this._domNode.appendChild(htmlContentRenderer_1.renderHtml({
            formattedText: text
        }));
    };
    AccessibilityHelpWidget.prototype.hide = function () {
        if (!this._isVisible) {
            return;
        }
        this._isVisible = false;
        this._isVisibleKey.reset();
        this._domNode.style.display = 'none';
        this._domNode.setAttribute('aria-hidden', 'true');
        this._domNode.tabIndex = -1;
        dom_1.clearNode(this._domNode);
        this._editor.focus();
    };
    AccessibilityHelpWidget.prototype._layout = function () {
        var editorLayout = this._editor.getLayoutInfo();
        var top = Math.round((editorLayout.height - AccessibilityHelpWidget.HEIGHT) / 2);
        styleMutator_1.StyleMutator.setTop(this._domNode, top);
        var left = Math.round((editorLayout.width - AccessibilityHelpWidget.WIDTH) / 2);
        styleMutator_1.StyleMutator.setLeft(this._domNode, left);
    };
    AccessibilityHelpWidget.ID = 'editor.contrib.accessibilityHelpWidget';
    AccessibilityHelpWidget.WIDTH = 500;
    AccessibilityHelpWidget.HEIGHT = 300;
    return AccessibilityHelpWidget;
}(widget_1.Widget));
var ShowAccessibilityHelpAction = (function (_super) {
    __extends(ShowAccessibilityHelpAction, _super);
    function ShowAccessibilityHelpAction() {
        _super.call(this, {
            id: 'editor.action.showAccessibilityHelp',
            label: nls.localize('ShowAccessibilityHelpAction', "Show Accessibility Help"),
            alias: 'Show Accessibility Help',
            precondition: null,
            kbOpts: {
                kbExpr: editorCommon_1.EditorContextKeys.Focus,
                primary: 8192 /* Alt */ | 59 /* F1 */
            }
        });
    }
    ShowAccessibilityHelpAction.prototype.run = function (accessor, editor) {
        var controller = AccessibilityHelpController.get(editor);
        if (controller) {
            controller.show();
        }
    };
    ShowAccessibilityHelpAction = __decorate([
        editorCommonExtensions_1.editorAction
    ], ShowAccessibilityHelpAction);
    return ShowAccessibilityHelpAction;
}(editorCommonExtensions_1.EditorAction));
var AccessibilityHelpCommand = editorCommonExtensions_1.EditorCommand.bindToContribution(AccessibilityHelpController.get);
editorCommonExtensions_1.CommonEditorRegistry.registerEditorCommand(new AccessibilityHelpCommand({
    id: 'closeAccessibilityHelp',
    precondition: CONTEXT_ACCESSIBILITY_WIDGET_VISIBLE,
    handler: function (x) { return x.hide(); },
    kbOpts: {
        weight: editorCommonExtensions_1.CommonEditorRegistry.commandWeight(100),
        kbExpr: editorCommon_1.EditorContextKeys.Focus,
        primary: 9 /* Escape */, secondary: [16384 /* Shift */ | 9 /* Escape */]
    }
}));
var ToggleExperimentalScreenReaderSupportCommand = (function (_super) {
    __extends(ToggleExperimentalScreenReaderSupportCommand, _super);
    function ToggleExperimentalScreenReaderSupportCommand() {
        _super.call(this, {
            id: TOGGLE_EXPERIMENTAL_SCREEN_READER_SUPPORT_COMMAND_ID,
            precondition: null,
            kbOpts: {
                weight: keybindingsRegistry_1.KeybindingsRegistry.WEIGHT.workbenchContrib(),
                kbExpr: null,
                primary: 32768 /* CtrlCmd */ | 16384 /* Shift */ | 48 /* KEY_R */
            }
        });
    }
    ToggleExperimentalScreenReaderSupportCommand.prototype.runCommand = function (accessor, args) {
        var currentValue = commonEditorConfig_1.GlobalScreenReaderNVDA.getValue();
        commonEditorConfig_1.GlobalScreenReaderNVDA.setValue(!currentValue);
    };
    return ToggleExperimentalScreenReaderSupportCommand;
}(editorCommonExtensions_1.Command));
editorCommonExtensions_1.CommonEditorRegistry.registerEditorCommand(new ToggleExperimentalScreenReaderSupportCommand());
