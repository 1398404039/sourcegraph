/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var errors_1 = require('vs/base/common/errors');
var uri_1 = require('vs/base/common/uri');
var winjs_base_1 = require('vs/base/common/winjs.base');
var range_1 = require('vs/editor/common/core/range');
var editorCommonExtensions_1 = require('vs/editor/common/editorCommonExtensions');
var modes_1 = require('vs/editor/common/modes');
var modelService_1 = require('vs/editor/common/services/modelService');
var async_1 = require('vs/base/common/async');
function getDocumentSymbols(model) {
    var entries = [];
    var promises = modes_1.DocumentSymbolProviderRegistry.all(model).map(function (support) {
        return async_1.asWinJsPromise(function (token) {
            return support.provideDocumentSymbols(model, token);
        }).then(function (result) {
            if (Array.isArray(result)) {
                entries.push.apply(entries, result);
            }
        }, function (err) {
            errors_1.onUnexpectedError(err);
        });
    });
    return winjs_base_1.TPromise.join(promises).then(function () {
        var flatEntries = [];
        flatten(flatEntries, entries, '');
        flatEntries.sort(compareEntriesUsingStart);
        return {
            entries: flatEntries,
        };
    });
}
exports.getDocumentSymbols = getDocumentSymbols;
function compareEntriesUsingStart(a, b) {
    return range_1.Range.compareRangesUsingStarts(range_1.Range.lift(a.location.range), range_1.Range.lift(b.location.range));
}
function flatten(bucket, entries, overrideContainerLabel) {
    for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {
        var entry = entries_1[_i];
        bucket.push({
            kind: entry.kind,
            location: entry.location,
            name: entry.name,
            containerName: entry.containerName || overrideContainerLabel
        });
    }
}
editorCommonExtensions_1.CommonEditorRegistry.registerLanguageCommand('_executeDocumentSymbolProvider', function (accessor, args) {
    var resource = args.resource;
    if (!(resource instanceof uri_1.default)) {
        throw errors_1.illegalArgument('resource');
    }
    var model = accessor.get(modelService_1.IModelService).getModel(resource);
    if (!model) {
        throw errors_1.illegalArgument('resource');
    }
    return getDocumentSymbols(model);
});
