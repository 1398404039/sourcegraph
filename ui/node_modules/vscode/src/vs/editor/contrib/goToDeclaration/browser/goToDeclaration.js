/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
require("./goToDeclaration.css");
var nls = require("vs/nls");
var async_1 = require("vs/base/common/async");
var errors_1 = require("vs/base/common/errors");
var keyCodes_1 = require("vs/base/common/keyCodes");
var platform = require("vs/base/common/platform");
var severity_1 = require("vs/base/common/severity");
var strings = require("vs/base/common/strings");
var winjs_base_1 = require("vs/base/common/winjs.base");
var browser = require("vs/base/browser/browser");
var editor_1 = require("vs/platform/editor/common/editor");
var modeService_1 = require("vs/editor/common/services/modeService");
var message_1 = require("vs/platform/message/common/message");
var range_1 = require("vs/editor/common/core/range");
var editorCommon = require("vs/editor/common/editorCommon");
var editorCommonExtensions_1 = require("vs/editor/common/editorCommonExtensions");
var modes_1 = require("vs/editor/common/modes");
var editorBrowserExtensions_1 = require("vs/editor/browser/editorBrowserExtensions");
var goToDeclaration_1 = require("vs/editor/contrib/goToDeclaration/common/goToDeclaration");
var referencesController_1 = require("vs/editor/contrib/referenceSearch/browser/referencesController");
var referencesModel_1 = require("vs/editor/contrib/referenceSearch/browser/referencesModel");
var lifecycle_1 = require("vs/base/common/lifecycle");
var peekViewWidget_1 = require("vs/editor/contrib/zoneWidget/browser/peekViewWidget");
var contextkey_1 = require("vs/platform/contextkey/common/contextkey");
var resolverService_1 = require("vs/editor/common/services/resolverService");
var ModeContextKeys = editorCommon.ModeContextKeys;
var EditorContextKeys = editorCommon.EditorContextKeys;
var DefinitionActionConfig = (function () {
    function DefinitionActionConfig(openToSide, openInPeek, filterCurrent) {
        if (openToSide === void 0) { openToSide = false; }
        if (openInPeek === void 0) { openInPeek = false; }
        if (filterCurrent === void 0) { filterCurrent = true; }
        this.openToSide = openToSide;
        this.openInPeek = openInPeek;
        this.filterCurrent = filterCurrent;
        //
    }
    return DefinitionActionConfig;
}());
exports.DefinitionActionConfig = DefinitionActionConfig;
var DefinitionAction = (function (_super) {
    __extends(DefinitionAction, _super);
    function DefinitionAction(configuration, opts) {
        var _this = _super.call(this, opts) || this;
        _this._configuration = configuration;
        return _this;
    }
    DefinitionAction.prototype.run = function (accessor, editor) {
        var _this = this;
        var messageService = accessor.get(message_1.IMessageService);
        var editorService = accessor.get(editor_1.IEditorService);
        var model = editor.getModel();
        var pos = editor.getPosition();
        return goToDeclaration_1.getDeclarationsAtPosition(model, pos).then(function (references) {
            if (!references) {
                return;
            }
            // * remove falsy references
            // * remove reference at the current pos
            // * collapse ranges to start pos
            var result = [];
            for (var i = 0; i < references.length; i++) {
                var reference = references[i];
                if (!reference) {
                    continue;
                }
                var uri = reference.uri, range = reference.range;
                if (!_this._configuration.filterCurrent
                    || uri.toString() !== model.uri.toString()
                    || !range_1.Range.containsPosition(range, pos)) {
                    result.push({
                        uri: uri,
                        range: range_1.Range.collapseToStart(range)
                    });
                }
            }
            if (result.length === 0) {
                return;
            }
            return _this._onResult(editorService, editor, new referencesModel_1.ReferencesModel(result));
        }, function (err) {
            // report an error
            messageService.show(severity_1.default.Error, err);
            return false;
        });
    };
    DefinitionAction.prototype._onResult = function (editorService, editor, model) {
        var _this = this;
        if (this._configuration.openInPeek) {
            this._openInPeek(editorService, editor, model);
        }
        else {
            var next = model.nearestReference(editor.getModel().uri, editor.getPosition());
            this._openReference(editorService, next, this._configuration.openToSide).then(function (editor) {
                if (model.references.length > 1) {
                    _this._openInPeek(editorService, editor, model);
                }
                else {
                    model.dispose();
                }
            });
        }
    };
    DefinitionAction.prototype._openReference = function (editorService, reference, sideBySide) {
        var uri = reference.uri, range = reference.range;
        return editorService.openEditor({
            resource: uri,
            options: {
                selection: range,
                revealIfVisible: !sideBySide
            }
        }, sideBySide).then(function (editor) {
            return editor.getControl();
        });
    };
    DefinitionAction.prototype._openInPeek = function (editorService, target, model) {
        var _this = this;
        var controller = referencesController_1.ReferencesController.get(target);
        if (controller) {
            controller.toggleWidget(target.getSelection(), winjs_base_1.TPromise.as(model), {
                getMetaTitle: function (model) {
                    return model.references.length > 1 && nls.localize('meta.title', " â€“ {0} definitions", model.references.length);
                },
                onGoto: function (reference) {
                    controller.closeWidget();
                    return _this._openReference(editorService, reference, false);
                }
            });
        }
        else {
            model.dispose();
        }
    };
    return DefinitionAction;
}(editorCommonExtensions_1.EditorAction));
exports.DefinitionAction = DefinitionAction;
var goToDeclarationKb = platform.isWeb
    ? 32768 /* CtrlCmd */ | 70 /* F12 */
    : 70 /* F12 */;
var GoToDefinitionAction = GoToDefinitionAction_1 = (function (_super) {
    __extends(GoToDefinitionAction, _super);
    function GoToDefinitionAction() {
        return _super.call(this, new DefinitionActionConfig(), {
            id: GoToDefinitionAction_1.ID,
            label: nls.localize('actions.goToDecl.label', "Go to Definition"),
            alias: 'Go to Definition',
            precondition: ModeContextKeys.hasDefinitionProvider,
            kbOpts: {
                kbExpr: EditorContextKeys.TextFocus,
                primary: goToDeclarationKb
            },
            menuOpts: {
                group: 'navigation',
                order: 1.1
            }
        }) || this;
    }
    return GoToDefinitionAction;
}(DefinitionAction));
GoToDefinitionAction.ID = 'editor.action.goToDeclaration';
GoToDefinitionAction = GoToDefinitionAction_1 = __decorate([
    editorCommonExtensions_1.editorAction
], GoToDefinitionAction);
exports.GoToDefinitionAction = GoToDefinitionAction;
var OpenDefinitionToSideAction = OpenDefinitionToSideAction_1 = (function (_super) {
    __extends(OpenDefinitionToSideAction, _super);
    function OpenDefinitionToSideAction() {
        return _super.call(this, new DefinitionActionConfig(true), {
            id: OpenDefinitionToSideAction_1.ID,
            label: nls.localize('actions.goToDeclToSide.label', "Open Definition to the Side"),
            alias: 'Open Definition to the Side',
            precondition: ModeContextKeys.hasDefinitionProvider,
            kbOpts: {
                kbExpr: EditorContextKeys.TextFocus,
                primary: keyCodes_1.KeyChord(32768 /* CtrlCmd */ | 41 /* KEY_K */, goToDeclarationKb)
            }
        }) || this;
    }
    return OpenDefinitionToSideAction;
}(DefinitionAction));
OpenDefinitionToSideAction.ID = 'editor.action.openDeclarationToTheSide';
OpenDefinitionToSideAction = OpenDefinitionToSideAction_1 = __decorate([
    editorCommonExtensions_1.editorAction
], OpenDefinitionToSideAction);
exports.OpenDefinitionToSideAction = OpenDefinitionToSideAction;
var PeekDefinitionAction = (function (_super) {
    __extends(PeekDefinitionAction, _super);
    function PeekDefinitionAction() {
        return _super.call(this, new DefinitionActionConfig(void 0, true, false), {
            id: 'editor.action.previewDeclaration',
            label: nls.localize('actions.previewDecl.label', "Peek Definition"),
            alias: 'Peek Definition',
            precondition: contextkey_1.ContextKeyExpr.and(ModeContextKeys.hasDefinitionProvider, peekViewWidget_1.PeekContext.notInPeekEditor),
            kbOpts: {
                kbExpr: EditorContextKeys.TextFocus,
                primary: 8192 /* Alt */ | 70 /* F12 */,
                linux: { primary: 32768 /* CtrlCmd */ | 16384 /* Shift */ | 68 /* F10 */ }
            },
            menuOpts: {
                group: 'navigation',
                order: 1.2
            }
        }) || this;
    }
    return PeekDefinitionAction;
}(DefinitionAction));
PeekDefinitionAction = __decorate([
    editorCommonExtensions_1.editorAction
], PeekDefinitionAction);
exports.PeekDefinitionAction = PeekDefinitionAction;
// --- Editor Contribution to goto definition using the mouse and a modifier key
var GotoDefinitionWithMouseEditorContribution = GotoDefinitionWithMouseEditorContribution_1 = (function () {
    function GotoDefinitionWithMouseEditorContribution(editor, textModelResolverService, modeService) {
        var _this = this;
        this.textModelResolverService = textModelResolverService;
        this.modeService = modeService;
        this.toUnhook = [];
        this.decorations = [];
        this.editor = editor;
        this.throttler = new async_1.Throttler();
        this.toUnhook.push(this.editor.onMouseDown(function (e) { return _this.onEditorMouseDown(e); }));
        this.toUnhook.push(this.editor.onMouseUp(function (e) { return _this.onEditorMouseUp(e); }));
        this.toUnhook.push(this.editor.onMouseMove(function (e) { return _this.onEditorMouseMove(e); }));
        this.toUnhook.push(this.editor.onKeyDown(function (e) { return _this.onEditorKeyDown(e); }));
        this.toUnhook.push(this.editor.onKeyUp(function (e) { return _this.onEditorKeyUp(e); }));
        this.toUnhook.push(this.editor.onDidChangeCursorSelection(function (e) { return _this.onDidChangeCursorSelection(e); }));
        this.toUnhook.push(this.editor.onDidChangeModel(function (e) { return _this.resetHandler(); }));
        this.toUnhook.push(this.editor.onDidChangeModelContent(function () { return _this.resetHandler(); }));
        this.toUnhook.push(this.editor.onDidScrollChange(function (e) {
            if (e.scrollTopChanged || e.scrollLeftChanged) {
                _this.resetHandler();
            }
        }));
    }
    GotoDefinitionWithMouseEditorContribution.prototype.onDidChangeCursorSelection = function (e) {
        if (e.selection && e.selection.startColumn !== e.selection.endColumn) {
            this.resetHandler(); // immediately stop this feature if the user starts to select (https://github.com/Microsoft/vscode/issues/7827)
        }
    };
    GotoDefinitionWithMouseEditorContribution.prototype.onEditorMouseMove = function (mouseEvent, withKey) {
        this.lastMouseMoveEvent = mouseEvent;
        this.startFindDefinition(mouseEvent, withKey);
    };
    GotoDefinitionWithMouseEditorContribution.prototype.startFindDefinition = function (mouseEvent, withKey) {
        var _this = this;
        if (!this.isEnabled(mouseEvent, withKey)) {
            this.currentWordUnderMouse = null;
            this.removeDecorations();
            return;
        }
        // Find word at mouse position
        var position = mouseEvent.target.position;
        var word = position ? this.editor.getModel().getWordAtPosition(position) : null;
        if (!word) {
            this.currentWordUnderMouse = null;
            this.removeDecorations();
            return;
        }
        // Return early if word at position is still the same
        if (this.currentWordUnderMouse && this.currentWordUnderMouse.startColumn === word.startColumn && this.currentWordUnderMouse.endColumn === word.endColumn && this.currentWordUnderMouse.word === word.word) {
            return;
        }
        this.currentWordUnderMouse = word;
        // Find definition and decorate word if found
        var state = this.editor.captureState(editorCommon.CodeEditorStateFlag.Position, editorCommon.CodeEditorStateFlag.Value, editorCommon.CodeEditorStateFlag.Selection, editorCommon.CodeEditorStateFlag.Scroll);
        this.throttler.queue(function () {
            return state.validate(_this.editor)
                ? _this.findDefinition(mouseEvent.target)
                : winjs_base_1.TPromise.as(null);
        }).then(function (results) {
            if (!results || !results.length || !state.validate(_this.editor)) {
                _this.removeDecorations();
                return;
            }
            // Multiple results
            if (results.length > 1) {
                _this.addDecoration({
                    startLineNumber: position.lineNumber,
                    startColumn: word.startColumn,
                    endLineNumber: position.lineNumber,
                    endColumn: word.endColumn
                }, nls.localize('multipleResults', "Click to show {0} definitions.", results.length));
            }
            else {
                var result_1 = results[0];
                _this.textModelResolverService.createModelReference(result_1.uri).then(function (ref) {
                    var model = ref.object;
                    var hoverMessage;
                    if (model && model.textEditorModel) {
                        var editorModel = model.textEditorModel;
                        var from = Math.max(1, result_1.range.startLineNumber);
                        var to = void 0;
                        // if we have a range, take that into consideration for the "to" position, otherwise fallback to MAX_SOURCE_PREVIEW_LINES
                        if (!range_1.Range.isEmpty(result_1.range)) {
                            to = Math.min(result_1.range.endLineNumber, result_1.range.startLineNumber + GotoDefinitionWithMouseEditorContribution_1.MAX_SOURCE_PREVIEW_LINES, editorModel.getLineCount());
                        }
                        else {
                            to = Math.min(from + GotoDefinitionWithMouseEditorContribution_1.MAX_SOURCE_PREVIEW_LINES, editorModel.getLineCount());
                        }
                        var source = editorModel.getValueInRange({
                            startLineNumber: from,
                            startColumn: 1,
                            endLineNumber: to,
                            endColumn: editorModel.getLineMaxColumn(to)
                        }).trim();
                        // remove common leading whitespace
                        var min = Number.MAX_VALUE, regexp = /^[ \t]*/, match = void 0, contents = void 0;
                        while (from <= to && min > 0) {
                            contents = editorModel.getLineContent(from++);
                            if (contents.trim().length === 0) {
                                // empty or whitespace only
                                continue;
                            }
                            match = regexp.exec(contents);
                            min = Math.min(min, match[0].length);
                        }
                        source = source.replace(new RegExp("^([ \\t]{" + min + "})", 'gm'), strings.empty);
                        if (to < editorModel.getLineCount()) {
                            source += '\n\u2026';
                        }
                        var language = _this.modeService.getModeIdByFilenameOrFirstLine(editorModel.uri.fragment);
                        hoverMessage = {
                            language: language,
                            value: source
                        };
                    }
                    ref.dispose();
                    _this.addDecoration({
                        startLineNumber: position.lineNumber,
                        startColumn: word.startColumn,
                        endLineNumber: position.lineNumber,
                        endColumn: word.endColumn
                    }, hoverMessage);
                });
            }
        }).done(undefined, errors_1.onUnexpectedError);
    };
    GotoDefinitionWithMouseEditorContribution.prototype.addDecoration = function (range, hoverMessage) {
        var newDecorations = {
            range: range,
            options: {
                inlineClassName: 'goto-definition-link',
                hoverMessage: hoverMessage
            }
        };
        this.decorations = this.editor.deltaDecorations(this.decorations, [newDecorations]);
    };
    GotoDefinitionWithMouseEditorContribution.prototype.removeDecorations = function () {
        if (this.decorations.length > 0) {
            this.decorations = this.editor.deltaDecorations(this.decorations, []);
        }
    };
    GotoDefinitionWithMouseEditorContribution.prototype.onEditorKeyDown = function (e) {
        if (this.lastMouseMoveEvent && (e.keyCode === GotoDefinitionWithMouseEditorContribution_1.TRIGGER_KEY_VALUE ||
            e.keyCode === GotoDefinitionWithMouseEditorContribution_1.TRIGGER_SIDEBYSIDE_KEY_VALUE && e[GotoDefinitionWithMouseEditorContribution_1.TRIGGER_MODIFIER] // User pressed Ctrl/Cmd+Alt (goto definition to the side)
        )) {
            this.startFindDefinition(this.lastMouseMoveEvent, e);
        }
        else if (e[GotoDefinitionWithMouseEditorContribution_1.TRIGGER_MODIFIER]) {
            this.removeDecorations(); // remove decorations if user holds another key with ctrl/cmd to prevent accident goto declaration
        }
    };
    GotoDefinitionWithMouseEditorContribution.prototype.resetHandler = function () {
        this.lastMouseMoveEvent = null;
        this.hasTriggerKeyOnMouseDown = false;
        this.removeDecorations();
    };
    GotoDefinitionWithMouseEditorContribution.prototype.onEditorMouseDown = function (mouseEvent) {
        // We need to record if we had the trigger key on mouse down because someone might select something in the editor
        // holding the mouse down and then while mouse is down start to press Ctrl/Cmd to start a copy operation and then
        // release the mouse button without wanting to do the navigation.
        // With this flag we prevent goto definition if the mouse was down before the trigger key was pressed.
        this.hasTriggerKeyOnMouseDown = !!mouseEvent.event[GotoDefinitionWithMouseEditorContribution_1.TRIGGER_MODIFIER];
    };
    GotoDefinitionWithMouseEditorContribution.prototype.onEditorMouseUp = function (mouseEvent) {
        var _this = this;
        if (this.isEnabled(mouseEvent) && this.hasTriggerKeyOnMouseDown) {
            this.gotoDefinition(mouseEvent.target, mouseEvent.event.altKey).done(function () {
                _this.removeDecorations();
            }, function (error) {
                _this.removeDecorations();
                errors_1.onUnexpectedError(error);
            });
        }
    };
    GotoDefinitionWithMouseEditorContribution.prototype.onEditorKeyUp = function (e) {
        if (e.keyCode === GotoDefinitionWithMouseEditorContribution_1.TRIGGER_KEY_VALUE) {
            this.removeDecorations();
            this.currentWordUnderMouse = null;
        }
    };
    GotoDefinitionWithMouseEditorContribution.prototype.isEnabled = function (mouseEvent, withKey) {
        return this.editor.getModel() &&
            (browser.isIE11orEarlier || mouseEvent.event.detail <= 1) &&
            mouseEvent.target.type === editorCommon.MouseTargetType.CONTENT_TEXT &&
            (mouseEvent.event[GotoDefinitionWithMouseEditorContribution_1.TRIGGER_MODIFIER] || (withKey && withKey.keyCode === GotoDefinitionWithMouseEditorContribution_1.TRIGGER_KEY_VALUE)) &&
            modes_1.DefinitionProviderRegistry.has(this.editor.getModel());
    };
    GotoDefinitionWithMouseEditorContribution.prototype.findDefinition = function (target) {
        var model = this.editor.getModel();
        if (!model) {
            return winjs_base_1.TPromise.as(null);
        }
        return goToDeclaration_1.getDeclarationsAtPosition(this.editor.getModel(), target.position);
    };
    GotoDefinitionWithMouseEditorContribution.prototype.gotoDefinition = function (target, sideBySide) {
        var targetAction = sideBySide
            ? OpenDefinitionToSideAction.ID
            : GoToDefinitionAction.ID;
        // just run the corresponding action
        this.editor.setPosition(target.position);
        return this.editor.getAction(targetAction).run();
    };
    GotoDefinitionWithMouseEditorContribution.prototype.getId = function () {
        return GotoDefinitionWithMouseEditorContribution_1.ID;
    };
    GotoDefinitionWithMouseEditorContribution.prototype.dispose = function () {
        this.toUnhook = lifecycle_1.dispose(this.toUnhook);
    };
    return GotoDefinitionWithMouseEditorContribution;
}());
GotoDefinitionWithMouseEditorContribution.ID = 'editor.contrib.gotodefinitionwithmouse';
GotoDefinitionWithMouseEditorContribution.TRIGGER_MODIFIER = platform.isMacintosh ? 'metaKey' : 'ctrlKey';
GotoDefinitionWithMouseEditorContribution.TRIGGER_SIDEBYSIDE_KEY_VALUE = 6 /* Alt */;
GotoDefinitionWithMouseEditorContribution.TRIGGER_KEY_VALUE = platform.isMacintosh ? 57 /* Meta */ : 5 /* Ctrl */;
GotoDefinitionWithMouseEditorContribution.MAX_SOURCE_PREVIEW_LINES = 7;
GotoDefinitionWithMouseEditorContribution = GotoDefinitionWithMouseEditorContribution_1 = __decorate([
    editorBrowserExtensions_1.editorContribution,
    __param(1, resolverService_1.ITextModelResolverService),
    __param(2, modeService_1.IModeService)
], GotoDefinitionWithMouseEditorContribution);
var GoToDefinitionAction_1, OpenDefinitionToSideAction_1, GotoDefinitionWithMouseEditorContribution_1;
