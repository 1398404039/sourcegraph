/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var hoverOperation_1 = require('./hoverOperation');
var hoverWidgets_1 = require('./hoverWidgets');
var dom_1 = require('vs/base/browser/dom');
var htmlContentRenderer_1 = require('vs/base/browser/htmlContentRenderer');
var opener_1 = require('vs/platform/opener/common/opener');
var uri_1 = require('vs/base/common/uri');
var errors_1 = require('vs/base/common/errors');
var textToHtmlTokenizer_1 = require('vs/editor/common/modes/textToHtmlTokenizer');
var MarginComputer = (function () {
    function MarginComputer(editor) {
        this._editor = editor;
        this._lineNumber = -1;
    }
    MarginComputer.prototype.setLineNumber = function (lineNumber) {
        this._lineNumber = lineNumber;
        this._result = [];
    };
    MarginComputer.prototype.clearResult = function () {
        this._result = [];
    };
    MarginComputer.prototype.computeSync = function () {
        var result = [], lineDecorations = this._editor.getLineDecorations(this._lineNumber), i, len, d;
        for (i = 0, len = lineDecorations.length; i < len; i++) {
            d = lineDecorations[i];
            if (d.options.glyphMarginClassName && d.options.glyphMarginHoverMessage) {
                result.push({
                    value: d.options.glyphMarginHoverMessage
                });
            }
        }
        return result;
    };
    MarginComputer.prototype.onResult = function (result, isFromSynchronousComputation) {
        this._result = this._result.concat(result);
    };
    MarginComputer.prototype.getResult = function () {
        return this._result;
    };
    MarginComputer.prototype.getResultWithLoadingMessage = function () {
        return this.getResult();
    };
    return MarginComputer;
}());
var ModesGlyphHoverWidget = (function (_super) {
    __extends(ModesGlyphHoverWidget, _super);
    function ModesGlyphHoverWidget(editor, openerService, modeService) {
        var _this = this;
        _super.call(this, ModesGlyphHoverWidget.ID, editor);
        this.openerService = openerService;
        this.modeService = modeService;
        this.openerService = openerService || opener_1.NullOpenerService;
        this._lastLineNumber = -1;
        this._computer = new MarginComputer(this._editor);
        this._hoverOperation = new hoverOperation_1.HoverOperation(this._computer, function (result) { return _this._withResult(result); }, null, function (result) { return _this._withResult(result); });
    }
    ModesGlyphHoverWidget.prototype.dispose = function () {
        this._hoverOperation.cancel();
        _super.prototype.dispose.call(this);
    };
    ModesGlyphHoverWidget.prototype.onModelDecorationsChanged = function () {
        if (this.isVisible) {
            // The decorations have changed and the hover is visible,
            // we need to recompute the displayed text
            this._hoverOperation.cancel();
            this._computer.clearResult();
            this._hoverOperation.start();
        }
    };
    ModesGlyphHoverWidget.prototype.startShowingAt = function (lineNumber) {
        if (this._lastLineNumber === lineNumber) {
            // We have to show the widget at the exact same line number as before, so no work is needed
            return;
        }
        this._hoverOperation.cancel();
        this.hide();
        this._lastLineNumber = lineNumber;
        this._computer.setLineNumber(lineNumber);
        this._hoverOperation.start();
    };
    ModesGlyphHoverWidget.prototype.hide = function () {
        this._lastLineNumber = -1;
        this._hoverOperation.cancel();
        _super.prototype.hide.call(this);
    };
    ModesGlyphHoverWidget.prototype._withResult = function (result) {
        this._messages = result;
        if (this._messages.length > 0) {
            this._renderMessages(this._lastLineNumber, this._messages);
        }
        else {
            this.hide();
        }
    };
    ModesGlyphHoverWidget.prototype._renderMessages = function (lineNumber, messages) {
        var _this = this;
        var fragment = document.createDocumentFragment();
        messages.forEach(function (msg) {
            var renderedContents = htmlContentRenderer_1.renderMarkedString(msg.value, {
                actionCallback: function (content) { return _this.openerService.open(uri_1.default.parse(content)).then(undefined, errors_1.onUnexpectedError); },
                codeBlockRenderer: function (languageAlias, value) {
                    // In markdown, it is possible that we stumble upon language aliases (e.g. js instead of javascript)
                    var modeId = _this.modeService.getModeIdForLanguageName(languageAlias);
                    return _this.modeService.getOrCreateMode(modeId).then(function (_) {
                        return "<div class=\"code\">" + textToHtmlTokenizer_1.tokenizeToString(value, modeId) + "</div>";
                    });
                }
            });
            fragment.appendChild(dom_1.$('div.hover-row', null, renderedContents));
        });
        this.updateContents(fragment);
        this.showAt(lineNumber);
    };
    ModesGlyphHoverWidget.ID = 'editor.contrib.modesGlyphHoverWidget';
    return ModesGlyphHoverWidget;
}(hoverWidgets_1.GlyphHoverWidget));
exports.ModesGlyphHoverWidget = ModesGlyphHoverWidget;
