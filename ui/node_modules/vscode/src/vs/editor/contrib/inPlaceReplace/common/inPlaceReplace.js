/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var nls = require("vs/nls");
var winjs_base_1 = require("vs/base/common/winjs.base");
var range_1 = require("vs/editor/common/core/range");
var selection_1 = require("vs/editor/common/core/selection");
var editorCommon_1 = require("vs/editor/common/editorCommon");
var editorCommonExtensions_1 = require("vs/editor/common/editorCommonExtensions");
var editorWorkerService_1 = require("vs/editor/common/services/editorWorkerService");
var inPlaceReplaceCommand_1 = require("./inPlaceReplaceCommand");
var InPlaceReplaceController = InPlaceReplaceController_1 = (function () {
    function InPlaceReplaceController(editor, editorWorkerService) {
        this.editor = editor;
        this.editorWorkerService = editorWorkerService;
        this.requestIdPool = 0;
        this.currentRequest = winjs_base_1.TPromise.as(null);
        this.decorationRemover = winjs_base_1.TPromise.as(null);
        this.decorationIds = [];
    }
    InPlaceReplaceController.get = function (editor) {
        return editor.getContribution(InPlaceReplaceController_1.ID);
    };
    InPlaceReplaceController.prototype.dispose = function () {
    };
    InPlaceReplaceController.prototype.getId = function () {
        return InPlaceReplaceController_1.ID;
    };
    InPlaceReplaceController.prototype.run = function (source, up) {
        var _this = this;
        // cancel any pending request
        this.currentRequest.cancel();
        var selection = this.editor.getSelection(), model = this.editor.getModel(), modelURI = model.uri;
        if (selection.startLineNumber !== selection.endLineNumber) {
            // Can't accept multiline selection
            return null;
        }
        var state = this.editor.captureState(editorCommon_1.CodeEditorStateFlag.Value, editorCommon_1.CodeEditorStateFlag.Position);
        this.currentRequest = this.editorWorkerService.navigateValueSet(modelURI, selection, up);
        this.currentRequest = this.currentRequest.then(function (basicResult) {
            if (basicResult && basicResult.range && basicResult.value) {
                return basicResult;
            }
            return null;
        });
        return this.currentRequest.then(function (result) {
            if (!result || !result.range || !result.value) {
                // No proper result
                return;
            }
            if (!state.validate(_this.editor)) {
                // state has changed
                return;
            }
            // Selection
            var editRange = range_1.Range.lift(result.range), highlightRange = result.range, diff = result.value.length - (selection.endColumn - selection.startColumn);
            // highlight
            highlightRange = {
                startLineNumber: highlightRange.startLineNumber,
                startColumn: highlightRange.startColumn,
                endLineNumber: highlightRange.endLineNumber,
                endColumn: highlightRange.startColumn + result.value.length
            };
            if (diff > 1) {
                selection = new selection_1.Selection(selection.startLineNumber, selection.startColumn, selection.endLineNumber, selection.endColumn + diff - 1);
            }
            // Insert new text
            var command = new inPlaceReplaceCommand_1.InPlaceReplaceCommand(editRange, selection, result.value);
            _this.editor.executeCommand(source, command);
            // add decoration
            _this.decorationIds = _this.editor.deltaDecorations(_this.decorationIds, [{
                    range: highlightRange,
                    options: InPlaceReplaceController_1.DECORATION
                }]);
            // remove decoration after delay
            _this.decorationRemover.cancel();
            _this.decorationRemover = winjs_base_1.TPromise.timeout(350);
            _this.decorationRemover.then(function () {
                _this.editor.changeDecorations(function (accessor) {
                    _this.decorationIds = accessor.deltaDecorations(_this.decorationIds, []);
                });
            });
        });
    };
    return InPlaceReplaceController;
}());
InPlaceReplaceController.ID = 'editor.contrib.inPlaceReplaceController';
InPlaceReplaceController.DECORATION = {
    className: 'valueSetReplacement'
};
InPlaceReplaceController = InPlaceReplaceController_1 = __decorate([
    editorCommonExtensions_1.commonEditorContribution,
    __param(1, editorWorkerService_1.IEditorWorkerService)
], InPlaceReplaceController);
var InPlaceReplaceUp = (function (_super) {
    __extends(InPlaceReplaceUp, _super);
    function InPlaceReplaceUp() {
        return _super.call(this, {
            id: 'editor.action.inPlaceReplace.up',
            label: nls.localize('InPlaceReplaceAction.previous.label', "Replace with Previous Value"),
            alias: 'Replace with Previous Value',
            precondition: editorCommon_1.EditorContextKeys.Writable,
            kbOpts: {
                kbExpr: editorCommon_1.EditorContextKeys.TextFocus,
                primary: 32768 /* CtrlCmd */ | 16384 /* Shift */ | 82 /* US_COMMA */
            }
        }) || this;
    }
    InPlaceReplaceUp.prototype.run = function (accessor, editor) {
        var controller = InPlaceReplaceController.get(editor);
        if (!controller) {
            return;
        }
        return controller.run(this.id, true);
    };
    return InPlaceReplaceUp;
}(editorCommonExtensions_1.EditorAction));
InPlaceReplaceUp = __decorate([
    editorCommonExtensions_1.editorAction
], InPlaceReplaceUp);
var InPlaceReplaceDown = (function (_super) {
    __extends(InPlaceReplaceDown, _super);
    function InPlaceReplaceDown() {
        return _super.call(this, {
            id: 'editor.action.inPlaceReplace.down',
            label: nls.localize('InPlaceReplaceAction.next.label', "Replace with Next Value"),
            alias: 'Replace with Next Value',
            precondition: editorCommon_1.EditorContextKeys.Writable,
            kbOpts: {
                kbExpr: editorCommon_1.EditorContextKeys.TextFocus,
                primary: 32768 /* CtrlCmd */ | 16384 /* Shift */ | 84 /* US_DOT */
            }
        }) || this;
    }
    InPlaceReplaceDown.prototype.run = function (accessor, editor) {
        var controller = InPlaceReplaceController.get(editor);
        if (!controller) {
            return;
        }
        return controller.run(this.id, false);
    };
    return InPlaceReplaceDown;
}(editorCommonExtensions_1.EditorAction));
InPlaceReplaceDown = __decorate([
    editorCommonExtensions_1.editorAction
], InPlaceReplaceDown);
var InPlaceReplaceController_1;
