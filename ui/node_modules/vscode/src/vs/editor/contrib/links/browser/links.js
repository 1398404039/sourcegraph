/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
require('./links.css');
var nls = require('vs/nls');
var errors_1 = require('vs/base/common/errors');
var platform = require('vs/base/common/platform');
var severity_1 = require('vs/base/common/severity');
var winjs_base_1 = require('vs/base/common/winjs.base');
var message_1 = require('vs/platform/message/common/message');
var opener_1 = require('vs/platform/opener/common/opener');
var editorCommon = require('vs/editor/common/editorCommon');
var editorCommonExtensions_1 = require('vs/editor/common/editorCommonExtensions');
var modes_1 = require('vs/editor/common/modes');
var editorWorkerService_1 = require('vs/editor/common/services/editorWorkerService');
var links_1 = require('vs/editor/contrib/links/common/links');
var lifecycle_1 = require('vs/base/common/lifecycle');
var editorBrowserExtensions_1 = require('vs/editor/browser/editorBrowserExtensions');
var LinkOccurence = (function () {
    function LinkOccurence(link, decorationId /*, changeAccessor:editorCommon.IModelDecorationsChangeAccessor*/) {
        this.link = link;
        this.decorationId = decorationId;
    }
    LinkOccurence.decoration = function (link) {
        return {
            range: {
                startLineNumber: link.range.startLineNumber,
                startColumn: link.range.startColumn,
                endLineNumber: link.range.startLineNumber,
                endColumn: link.range.endColumn
            },
            options: LinkOccurence._getOptions(link, false)
        };
    };
    LinkOccurence._getOptions = function (link, isActive) {
        var result = '';
        if (isActive) {
            result += LinkDetector.CLASS_NAME_ACTIVE;
        }
        else {
            result += LinkDetector.CLASS_NAME;
        }
        return {
            stickiness: editorCommon.TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges,
            inlineClassName: result,
            hoverMessage: LinkDetector.HOVER_MESSAGE_GENERAL
        };
    };
    LinkOccurence.prototype.activate = function (changeAccessor) {
        changeAccessor.changeDecorationOptions(this.decorationId, LinkOccurence._getOptions(this.link, true));
    };
    LinkOccurence.prototype.deactivate = function (changeAccessor) {
        changeAccessor.changeDecorationOptions(this.decorationId, LinkOccurence._getOptions(this.link, false));
    };
    return LinkOccurence;
}());
var LinkDetector = (function () {
    function LinkDetector(editor, openerService, messageService, editorWorkerService) {
        var _this = this;
        this.editor = editor;
        this.openerService = openerService;
        this.messageService = messageService;
        this.editorWorkerService = editorWorkerService;
        this.listenersToRemove = [];
        this.listenersToRemove.push(editor.onDidChangeModelContent(function (e) { return _this.onChange(); }));
        this.listenersToRemove.push(editor.onDidChangeModel(function (e) { return _this.onModelChanged(); }));
        this.listenersToRemove.push(editor.onDidChangeModelMode(function (e) { return _this.onModelModeChanged(); }));
        this.listenersToRemove.push(modes_1.LinkProviderRegistry.onDidChange(function (e) { return _this.onModelModeChanged(); }));
        this.listenersToRemove.push(this.editor.onMouseUp(function (e) { return _this.onEditorMouseUp(e); }));
        this.listenersToRemove.push(this.editor.onMouseMove(function (e) { return _this.onEditorMouseMove(e); }));
        this.listenersToRemove.push(this.editor.onKeyDown(function (e) { return _this.onEditorKeyDown(e); }));
        this.listenersToRemove.push(this.editor.onKeyUp(function (e) { return _this.onEditorKeyUp(e); }));
        this.timeoutPromise = null;
        this.computePromise = null;
        this.currentOccurences = {};
        this.activeLinkDecorationId = null;
        this.beginCompute();
    }
    LinkDetector.get = function (editor) {
        return editor.getContribution(LinkDetector.ID);
    };
    LinkDetector.prototype.getId = function () {
        return LinkDetector.ID;
    };
    LinkDetector.prototype.isComputing = function () {
        return winjs_base_1.TPromise.is(this.computePromise);
    };
    LinkDetector.prototype.onModelChanged = function () {
        this.lastMouseEvent = null;
        this.currentOccurences = {};
        this.activeLinkDecorationId = null;
        this.stop();
        this.beginCompute();
    };
    LinkDetector.prototype.onModelModeChanged = function () {
        this.stop();
        this.beginCompute();
    };
    LinkDetector.prototype.onChange = function () {
        var _this = this;
        if (!this.timeoutPromise) {
            this.timeoutPromise = winjs_base_1.TPromise.timeout(LinkDetector.RECOMPUTE_TIME);
            this.timeoutPromise.then(function () {
                _this.timeoutPromise = null;
                _this.beginCompute();
            });
        }
    };
    LinkDetector.prototype.beginCompute = function () {
        var _this = this;
        if (!this.editor.getModel()) {
            return;
        }
        if (!modes_1.LinkProviderRegistry.has(this.editor.getModel())) {
            return;
        }
        this.computePromise = links_1.getLinks(this.editor.getModel()).then(function (links) {
            _this.updateDecorations(links);
            _this.computePromise = null;
        });
    };
    LinkDetector.prototype.updateDecorations = function (links) {
        var _this = this;
        this.editor.changeDecorations(function (changeAccessor) {
            var oldDecorations = [];
            var keys = Object.keys(_this.currentOccurences);
            for (var i_1 = 0, len = keys.length; i_1 < len; i_1++) {
                var decorationId = keys[i_1];
                var occurance_1 = _this.currentOccurences[decorationId];
                oldDecorations.push(occurance_1.decorationId);
            }
            var newDecorations = [];
            if (links) {
                // Not sure why this is sometimes null
                for (var i = 0; i < links.length; i++) {
                    newDecorations.push(LinkOccurence.decoration(links[i]));
                }
            }
            var decorations = changeAccessor.deltaDecorations(oldDecorations, newDecorations);
            _this.currentOccurences = {};
            _this.activeLinkDecorationId = null;
            for (var i_2 = 0, len = decorations.length; i_2 < len; i_2++) {
                var occurance = new LinkOccurence(links[i_2], decorations[i_2]);
                _this.currentOccurences[occurance.decorationId] = occurance;
            }
        });
    };
    LinkDetector.prototype.onEditorKeyDown = function (e) {
        if (e.keyCode === LinkDetector.TRIGGER_KEY_VALUE && this.lastMouseEvent) {
            this.onEditorMouseMove(this.lastMouseEvent, e);
        }
    };
    LinkDetector.prototype.onEditorKeyUp = function (e) {
        if (e.keyCode === LinkDetector.TRIGGER_KEY_VALUE) {
            this.cleanUpActiveLinkDecoration();
        }
    };
    LinkDetector.prototype.onEditorMouseMove = function (mouseEvent, withKey) {
        var _this = this;
        this.lastMouseEvent = mouseEvent;
        if (this.isEnabled(mouseEvent, withKey)) {
            this.cleanUpActiveLinkDecoration(); // always remove previous link decoration as their can only be one
            var occurence = this.getLinkOccurence(mouseEvent.target.position);
            if (occurence) {
                this.editor.changeDecorations(function (changeAccessor) {
                    occurence.activate(changeAccessor);
                    _this.activeLinkDecorationId = occurence.decorationId;
                });
            }
        }
        else {
            this.cleanUpActiveLinkDecoration();
        }
    };
    LinkDetector.prototype.cleanUpActiveLinkDecoration = function () {
        if (this.activeLinkDecorationId) {
            var occurence = this.currentOccurences[this.activeLinkDecorationId];
            if (occurence) {
                this.editor.changeDecorations(function (changeAccessor) {
                    occurence.deactivate(changeAccessor);
                });
            }
            this.activeLinkDecorationId = null;
        }
    };
    LinkDetector.prototype.onEditorMouseUp = function (mouseEvent) {
        if (!this.isEnabled(mouseEvent)) {
            return;
        }
        var occurence = this.getLinkOccurence(mouseEvent.target.position);
        if (!occurence) {
            return;
        }
        this.openLinkOccurence(occurence, mouseEvent.event.altKey);
    };
    LinkDetector.prototype.openLinkOccurence = function (occurence, openToSide) {
        var _this = this;
        if (!this.openerService) {
            return;
        }
        var link = occurence.link;
        link.resolve().then(function (uri) {
            // open the uri
            return _this.openerService.open(uri, { openToSide: openToSide });
        }, function (err) {
            // different error cases
            if (err === 'invalid') {
                _this.messageService.show(severity_1.default.Warning, nls.localize('invalid.url', 'Sorry, failed to open this link because it is not well-formed: {0}', link.url));
            }
            else if (err === 'missing') {
                _this.messageService.show(severity_1.default.Warning, nls.localize('missing.url', 'Sorry, failed to open this link because its target is missing.'));
            }
            else {
                errors_1.onUnexpectedError(err);
            }
        }).done(null, errors_1.onUnexpectedError);
    };
    LinkDetector.prototype.getLinkOccurence = function (position) {
        var decorations = this.editor.getModel().getDecorationsInRange({
            startLineNumber: position.lineNumber,
            startColumn: position.column,
            endLineNumber: position.lineNumber,
            endColumn: position.column
        }, null, true);
        for (var i = 0; i < decorations.length; i++) {
            var decoration = decorations[i];
            var currentOccurence = this.currentOccurences[decoration.id];
            if (currentOccurence) {
                return currentOccurence;
            }
        }
        return null;
    };
    LinkDetector.prototype.isEnabled = function (mouseEvent, withKey) {
        return mouseEvent.target.type === editorCommon.MouseTargetType.CONTENT_TEXT &&
            (mouseEvent.event[LinkDetector.TRIGGER_MODIFIER] || (withKey && withKey.keyCode === LinkDetector.TRIGGER_KEY_VALUE));
    };
    LinkDetector.prototype.stop = function () {
        if (this.timeoutPromise) {
            this.timeoutPromise.cancel();
            this.timeoutPromise = null;
        }
        if (this.computePromise) {
            this.computePromise.cancel();
            this.computePromise = null;
        }
    };
    LinkDetector.prototype.dispose = function () {
        this.listenersToRemove = lifecycle_1.dispose(this.listenersToRemove);
        this.stop();
    };
    LinkDetector.ID = 'editor.linkDetector';
    LinkDetector.RECOMPUTE_TIME = 1000; // ms
    LinkDetector.TRIGGER_KEY_VALUE = platform.isMacintosh ? 57 /* Meta */ : 5 /* Ctrl */;
    LinkDetector.TRIGGER_MODIFIER = platform.isMacintosh ? 'metaKey' : 'ctrlKey';
    LinkDetector.HOVER_MESSAGE_GENERAL = platform.isMacintosh ? nls.localize('links.navigate.mac', "Cmd + click to follow link") : nls.localize('links.navigate', "Ctrl + click to follow link");
    LinkDetector.CLASS_NAME = 'detected-link';
    LinkDetector.CLASS_NAME_ACTIVE = 'detected-link-active';
    LinkDetector = __decorate([
        editorBrowserExtensions_1.editorContribution,
        __param(1, opener_1.IOpenerService),
        __param(2, message_1.IMessageService),
        __param(3, editorWorkerService_1.IEditorWorkerService)
    ], LinkDetector);
    return LinkDetector;
}());
var OpenLinkAction = (function (_super) {
    __extends(OpenLinkAction, _super);
    function OpenLinkAction() {
        _super.call(this, {
            id: 'editor.action.openLink',
            label: nls.localize('label', "Open Link"),
            alias: 'Open Link',
            precondition: null
        });
    }
    OpenLinkAction.prototype.run = function (accessor, editor) {
        var linkDetector = LinkDetector.get(editor);
        if (!linkDetector) {
            return;
        }
        var link = linkDetector.getLinkOccurence(editor.getPosition());
        if (link) {
            linkDetector.openLinkOccurence(link, false);
        }
    };
    OpenLinkAction = __decorate([
        editorCommonExtensions_1.editorAction
    ], OpenLinkAction);
    return OpenLinkAction;
}(editorCommonExtensions_1.EditorAction));
