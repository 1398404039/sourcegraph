/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
require('./gotoError.css');
var nls = require('vs/nls');
var errors_1 = require('vs/base/common/errors');
var event_1 = require('vs/base/common/event');
var lifecycle_1 = require('vs/base/common/lifecycle');
var severity_1 = require('vs/base/common/severity');
var dom = require('vs/base/browser/dom');
var commands_1 = require('vs/platform/commands/common/commands');
var contextkey_1 = require('vs/platform/contextkey/common/contextkey');
var markers_1 = require('vs/platform/markers/common/markers');
var telemetry_1 = require('vs/platform/telemetry/common/telemetry');
var position_1 = require('vs/editor/common/core/position');
var range_1 = require('vs/editor/common/core/range');
var editorCommon = require('vs/editor/common/editorCommon');
var editorCommonExtensions_1 = require('vs/editor/common/editorCommonExtensions');
var editorBrowserExtensions_1 = require('vs/editor/browser/editorBrowserExtensions');
var zoneWidget_1 = require('vs/editor/contrib/zoneWidget/browser/zoneWidget');
var quickFix_1 = require('vs/editor/contrib/quickFix/common/quickFix');
var EditorContextKeys = editorCommon.EditorContextKeys;
var MarkerModel = (function () {
    function MarkerModel(editor, markers) {
        var _this = this;
        this._editor = editor;
        this._markers = null;
        this._nextIdx = -1;
        this._toUnbind = [];
        this._ignoreSelectionChange = false;
        this._onCurrentMarkerChanged = new event_1.Emitter();
        this._onMarkerSetChanged = new event_1.Emitter();
        this.setMarkers(markers);
        // listen on editor
        this._toUnbind.push(this._editor.onDidDispose(function () { return _this.dispose(); }));
        this._toUnbind.push(this._editor.onDidChangeCursorPosition(function () {
            if (!_this._ignoreSelectionChange) {
                _this._nextIdx = -1;
            }
        }));
    }
    Object.defineProperty(MarkerModel.prototype, "onCurrentMarkerChanged", {
        get: function () {
            return this._onCurrentMarkerChanged.event;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MarkerModel.prototype, "onMarkerSetChanged", {
        get: function () {
            return this._onMarkerSetChanged.event;
        },
        enumerable: true,
        configurable: true
    });
    MarkerModel.prototype.setMarkers = function (markers) {
        // assign
        this._markers = markers || [];
        // sort markers
        this._markers.sort(function (left, right) { return severity_1.default.compare(left.severity, right.severity) || range_1.Range.compareRangesUsingStarts(left, right); });
        this._nextIdx = -1;
        this._onMarkerSetChanged.fire(this);
    };
    MarkerModel.prototype.withoutWatchingEditorPosition = function (callback) {
        this._ignoreSelectionChange = true;
        try {
            callback();
        }
        finally {
            this._ignoreSelectionChange = false;
        }
    };
    MarkerModel.prototype.initIdx = function (fwd) {
        var found = false;
        var position = this._editor.getPosition();
        for (var i = 0, len = this._markers.length; i < len && !found; i++) {
            var pos = { lineNumber: this._markers[i].startLineNumber, column: this._markers[i].startColumn };
            if (position.isBeforeOrEqual(pos)) {
                this._nextIdx = i + (fwd ? 0 : -1);
                found = true;
            }
        }
        if (!found) {
            // after the last change
            this._nextIdx = fwd ? 0 : this._markers.length - 1;
        }
        if (this._nextIdx < 0) {
            this._nextIdx = this._markers.length - 1;
        }
    };
    MarkerModel.prototype.move = function (fwd) {
        if (!this.canNavigate()) {
            this._onCurrentMarkerChanged.fire(undefined);
            return;
        }
        if (this._nextIdx === -1) {
            this.initIdx(fwd);
        }
        else if (fwd) {
            this._nextIdx += 1;
            if (this._nextIdx >= this._markers.length) {
                this._nextIdx = 0;
            }
        }
        else {
            this._nextIdx -= 1;
            if (this._nextIdx < 0) {
                this._nextIdx = this._markers.length - 1;
            }
        }
        var marker = this._markers[this._nextIdx];
        this._onCurrentMarkerChanged.fire(marker);
    };
    MarkerModel.prototype.canNavigate = function () {
        return this._markers.length > 0;
    };
    MarkerModel.prototype.next = function () {
        this.move(true);
    };
    MarkerModel.prototype.previous = function () {
        this.move(false);
    };
    MarkerModel.prototype.findMarkerAtPosition = function (pos) {
        for (var _i = 0, _a = this._markers; _i < _a.length; _i++) {
            var marker = _a[_i];
            if (range_1.Range.containsPosition(marker, pos)) {
                return marker;
            }
        }
    };
    Object.defineProperty(MarkerModel.prototype, "stats", {
        get: function () {
            var errors = 0;
            var others = 0;
            for (var _i = 0, _a = this._markers; _i < _a.length; _i++) {
                var marker = _a[_i];
                if (marker.severity === severity_1.default.Error) {
                    errors += 1;
                }
                else {
                    others += 1;
                }
            }
            return { errors: errors, others: others };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MarkerModel.prototype, "total", {
        get: function () {
            return this._markers.length;
        },
        enumerable: true,
        configurable: true
    });
    MarkerModel.prototype.indexOf = function (marker) {
        return 1 + this._markers.indexOf(marker);
    };
    MarkerModel.prototype.reveal = function () {
        var _this = this;
        if (this._nextIdx === -1) {
            return;
        }
        this.withoutWatchingEditorPosition(function () {
            var pos = new position_1.Position(_this._markers[_this._nextIdx].startLineNumber, _this._markers[_this._nextIdx].startColumn);
            _this._editor.setPosition(pos);
            _this._editor.revealPositionInCenter(pos);
        });
    };
    MarkerModel.prototype.dispose = function () {
        this._toUnbind = lifecycle_1.dispose(this._toUnbind);
    };
    return MarkerModel;
}());
var FixesWidget = (function () {
    function FixesWidget(container, _markerWidget, _commandService) {
        var _this = this;
        this._markerWidget = _markerWidget;
        this._commandService = _commandService;
        this._disposeOnUpdate = [];
        this.domNode = document.createElement('div');
        container.appendChild(this.domNode);
        this._listener = dom.addStandardDisposableListener(container, 'keydown', function (e) {
            switch (e.asKeybinding()) {
                case 15 /* LeftArrow */:
                    _this._move(true);
                    e.preventDefault();
                    e.stopPropagation();
                    break;
                case 17 /* RightArrow */:
                    _this._move(false);
                    e.preventDefault();
                    e.stopPropagation();
                    break;
            }
        });
    }
    FixesWidget.prototype.dispose = function () {
        this._disposeOnUpdate = lifecycle_1.dispose(this._disposeOnUpdate);
        this._listener = lifecycle_1.dispose(this._listener);
    };
    FixesWidget.prototype.update = function (marker) {
        var _this = this;
        this._disposeOnUpdate = lifecycle_1.dispose(this._disposeOnUpdate);
        this.domNode.style.display = 'none';
        if (marker) {
            var fixes = quickFix_1.getCodeActions(this._markerWidget.editor.getModel(), range_1.Range.lift(marker));
            return fixes.then(function (fixes) { return _this._doUpdate(fixes); }, errors_1.onUnexpectedError);
        }
    };
    FixesWidget.prototype._doUpdate = function (fixes) {
        var _this = this;
        dom.clearNode(this.domNode);
        if (!fixes || fixes.length === 0) {
            return;
        }
        // light bulb and label
        var quickfixhead = document.createElement('span');
        quickfixhead.className = 'quickfixhead';
        quickfixhead.appendChild(document.createTextNode(fixes.length > 1
            ? nls.localize('quickfix.multiple.label', 'Suggested fixes: ')
            : nls.localize('quickfix.single.label', 'Suggested fix: ')));
        this.domNode.appendChild(quickfixhead);
        // each fix as entry
        var container = document.createElement('span');
        container.className = 'quickfixcontainer';
        fixes.forEach(function (fix, idx, arr) {
            if (idx > 0) {
                var separator = document.createElement('span');
                separator.appendChild(document.createTextNode(', '));
                container.appendChild(separator);
            }
            var entry = document.createElement('a');
            entry.tabIndex = 0;
            entry.className = "quickfixentry";
            entry.dataset['idx'] = String(idx);
            entry.dataset['next'] = String(idx < arr.length - 1 ? idx + 1 : 0);
            entry.dataset['prev'] = String(idx > 0 ? idx - 1 : arr.length - 1);
            entry.appendChild(document.createTextNode(fix.command.title));
            _this._disposeOnUpdate.push(dom.addDisposableListener(entry, dom.EventType.CLICK, function (e) {
                (_a = _this._commandService).executeCommand.apply(_a, [fix.command.id].concat(fix.command.arguments));
                _this._markerWidget.focus();
                e.preventDefault();
                var _a;
            }));
            _this._disposeOnUpdate.push(dom.addStandardDisposableListener(entry, 'keydown', function (e) {
                switch (e.asKeybinding()) {
                    case 3 /* Enter */:
                    case 10 /* Space */:
                        (_a = _this._commandService).executeCommand.apply(_a, [fix.command.id].concat(fix.command.arguments));
                        _this._markerWidget.focus();
                        e.preventDefault();
                        e.stopPropagation();
                }
                var _a;
            }));
            container.appendChild(entry);
        });
        this.domNode.appendChild(container);
        this.domNode.style.display = '';
    };
    FixesWidget.prototype._move = function (left) {
        var target;
        if (document.activeElement.classList.contains('quickfixentry')) {
            var current = document.activeElement;
            var idx = left ? current.dataset['prev'] : current.dataset['next'];
            target = this.domNode.querySelector("a[data-idx='" + idx + "']");
        }
        else {
            target = this.domNode.querySelector('.quickfixentry');
        }
        target.focus();
    };
    FixesWidget = __decorate([
        __param(2, commands_1.ICommandService)
    ], FixesWidget);
    return FixesWidget;
}());
var MessageWidget = (function () {
    function MessageWidget(container) {
        this.domNode = document.createElement('div');
        this.domNode.className = 'block descriptioncontainer';
        this.domNode.setAttribute('aria-live', 'assertive');
        this.domNode.setAttribute('role', 'alert');
        container.appendChild(this.domNode);
    }
    MessageWidget.prototype.update = function (_a) {
        var source = _a.source, message = _a.message;
        if (source) {
            var indent_1 = new Array(source.length + 3 + 1).join(' ');
            message = ("[" + source + "] ") + message.replace(/\r\n|\r|\n/g, function () {
                return '\n' + indent_1;
            });
        }
        this.domNode.innerText = message;
    };
    return MessageWidget;
}());
var MarkerNavigationWidget = (function (_super) {
    __extends(MarkerNavigationWidget, _super);
    function MarkerNavigationWidget(editor, _model, _commandService) {
        _super.call(this, editor, { showArrow: true, showFrame: true, isAccessible: true });
        this._model = _model;
        this._commandService = _commandService;
        this._callOnDispose = [];
        this.create();
        this._wireModelAndView();
    }
    MarkerNavigationWidget.prototype.dispose = function () {
        this._callOnDispose = lifecycle_1.dispose(this._callOnDispose);
        _super.prototype.dispose.call(this);
    };
    MarkerNavigationWidget.prototype.focus = function () {
        this._parentContainer.focus();
    };
    MarkerNavigationWidget.prototype._fillContainer = function (container) {
        this._parentContainer = container;
        dom.addClass(container, 'marker-widget');
        this._parentContainer.tabIndex = 0;
        this._parentContainer.setAttribute('role', 'tooltip');
        this._container = document.createElement('div');
        container.appendChild(this._container);
        this._title = document.createElement('div');
        this._title.className = 'block title';
        this._container.appendChild(this._title);
        this._message = new MessageWidget(this._container);
        this.editor.applyFontInfo(this._message.domNode);
        this._fixesWidget = new FixesWidget(this._container, this, this._commandService);
        this._fixesWidget.domNode.classList.add('fixes');
        this._callOnDispose.push(this._fixesWidget);
    };
    MarkerNavigationWidget.prototype.show = function (where, heightInLines) {
        _super.prototype.show.call(this, where, heightInLines);
        this.focus();
    };
    MarkerNavigationWidget.prototype._wireModelAndView = function () {
        // listen to events
        this._model.onCurrentMarkerChanged(this.showAtMarker, this, this._callOnDispose);
        this._model.onMarkerSetChanged(this._onMarkersChanged, this, this._callOnDispose);
    };
    MarkerNavigationWidget.prototype.showAtMarker = function (marker) {
        var _this = this;
        if (!marker) {
            return;
        }
        // update:
        // * title
        // * message
        // * quick fixes
        this._container.classList.remove('stale');
        this._title.innerHTML = nls.localize('title.wo_source', "({0}/{1})", this._model.indexOf(marker), this._model.total);
        this._message.update(marker);
        this._fixesWidget.update(marker).then(function () { return _this._relayout(); });
        this._model.withoutWatchingEditorPosition(function () {
            // update frame color (only applied on 'show')
            switch (marker.severity) {
                case severity_1.default.Error:
                    _this.options.frameColor = '#ff5a5a';
                    break;
                case severity_1.default.Warning:
                case severity_1.default.Info:
                    _this.options.frameColor = '#5aac5a';
                    break;
            }
            _this.show({
                lineNumber: marker.startLineNumber,
                column: marker.startColumn
            }, _this.computeRequiredHeight());
        });
    };
    MarkerNavigationWidget.prototype._onMarkersChanged = function () {
        var _this = this;
        var marker = this._model.findMarkerAtPosition(this.position);
        if (marker) {
            this._container.classList.remove('stale');
            this._message.update(marker);
            this._relayout();
            this._fixesWidget.update(marker).then(function () { return _this._relayout(); });
        }
        else {
            this._container.classList.add('stale');
            this._fixesWidget.update(marker);
            this._relayout();
        }
    };
    MarkerNavigationWidget.prototype._relayout = function () {
        _super.prototype._relayout.call(this, this.computeRequiredHeight());
    };
    MarkerNavigationWidget.prototype.computeRequiredHeight = function () {
        // minimum one line content, add one line for zone widget decorations
        var lineHeight = this.editor.getConfiguration().lineHeight || 12;
        return Math.max(1, Math.ceil(this._container.clientHeight / lineHeight)) + 1;
    };
    return MarkerNavigationWidget;
}(zoneWidget_1.ZoneWidget));
var MarkerNavigationAction = (function (_super) {
    __extends(MarkerNavigationAction, _super);
    function MarkerNavigationAction(next, opts) {
        _super.call(this, opts);
        this._isNext = next;
    }
    MarkerNavigationAction.prototype.run = function (accessor, editor) {
        var telemetryService = accessor.get(telemetry_1.ITelemetryService);
        var controller = MarkerController.get(editor);
        if (!controller) {
            return;
        }
        var model = controller.getOrCreateModel();
        telemetryService.publicLog('zoneWidgetShown', { mode: 'go to error' });
        if (model) {
            if (this._isNext) {
                model.next();
            }
            else {
                model.previous();
            }
            model.reveal();
        }
    };
    return MarkerNavigationAction;
}(editorCommonExtensions_1.EditorAction));
var MarkerController = (function () {
    function MarkerController(editor, _markerService, _contextKeyService, _commandService) {
        this._markerService = _markerService;
        this._contextKeyService = _contextKeyService;
        this._commandService = _commandService;
        this._callOnClose = [];
        this._editor = editor;
        this._markersNavigationVisible = CONTEXT_MARKERS_NAVIGATION_VISIBLE.bindTo(this._contextKeyService);
    }
    MarkerController.get = function (editor) {
        return editor.getContribution(MarkerController.ID);
    };
    MarkerController.prototype.getId = function () {
        return MarkerController.ID;
    };
    MarkerController.prototype.dispose = function () {
        this._cleanUp();
    };
    MarkerController.prototype._cleanUp = function () {
        this._markersNavigationVisible.reset();
        this._callOnClose = lifecycle_1.dispose(this._callOnClose);
        this._zone = null;
        this._model = null;
    };
    MarkerController.prototype.getOrCreateModel = function () {
        var _this = this;
        if (this._model) {
            return this._model;
        }
        var markers = this._getMarkers();
        this._model = new MarkerModel(this._editor, markers);
        this._zone = new MarkerNavigationWidget(this._editor, this._model, this._commandService);
        this._markersNavigationVisible.set(true);
        this._callOnClose.push(this._model);
        this._callOnClose.push(this._zone);
        this._callOnClose.push(this._editor.onDidChangeModel(function () { return _this._cleanUp(); }));
        this._model.onCurrentMarkerChanged(function (marker) { return !marker && _this._cleanUp(); }, undefined, this._callOnClose);
        this._markerService.onMarkerChanged(this._onMarkerChanged, this, this._callOnClose);
        return this._model;
    };
    MarkerController.prototype.closeMarkersNavigation = function () {
        this._cleanUp();
        this._editor.focus();
    };
    MarkerController.prototype._onMarkerChanged = function (changedResources) {
        var _this = this;
        if (!changedResources.some(function (r) { return _this._editor.getModel().uri.toString() === r.toString(); })) {
            return;
        }
        this._model.setMarkers(this._getMarkers());
    };
    MarkerController.prototype._getMarkers = function () {
        var resource = this._editor.getModel().uri, markers = this._markerService.read({ resource: resource });
        return markers;
    };
    MarkerController.ID = 'editor.contrib.markerController';
    MarkerController = __decorate([
        editorBrowserExtensions_1.editorContribution,
        __param(1, markers_1.IMarkerService),
        __param(2, contextkey_1.IContextKeyService),
        __param(3, commands_1.ICommandService)
    ], MarkerController);
    return MarkerController;
}());
var NextMarkerAction = (function (_super) {
    __extends(NextMarkerAction, _super);
    function NextMarkerAction() {
        _super.call(this, true, {
            id: 'editor.action.marker.next',
            label: nls.localize('markerAction.next.label', "Go to Next Error or Warning"),
            alias: 'Go to Next Error or Warning',
            precondition: EditorContextKeys.Writable,
            kbOpts: {
                kbExpr: EditorContextKeys.Focus,
                primary: 66 /* F8 */
            }
        });
    }
    NextMarkerAction = __decorate([
        editorCommonExtensions_1.editorAction
    ], NextMarkerAction);
    return NextMarkerAction;
}(MarkerNavigationAction));
var PrevMarkerAction = (function (_super) {
    __extends(PrevMarkerAction, _super);
    function PrevMarkerAction() {
        _super.call(this, false, {
            id: 'editor.action.marker.prev',
            label: nls.localize('markerAction.previous.label', "Go to Previous Error or Warning"),
            alias: 'Go to Previous Error or Warning',
            precondition: EditorContextKeys.Writable,
            kbOpts: {
                kbExpr: EditorContextKeys.Focus,
                primary: 16384 /* Shift */ | 66 /* F8 */
            }
        });
    }
    PrevMarkerAction = __decorate([
        editorCommonExtensions_1.editorAction
    ], PrevMarkerAction);
    return PrevMarkerAction;
}(MarkerNavigationAction));
var CONTEXT_MARKERS_NAVIGATION_VISIBLE = new contextkey_1.RawContextKey('markersNavigationVisible', false);
var MarkerCommand = editorCommonExtensions_1.EditorCommand.bindToContribution(MarkerController.get);
editorCommonExtensions_1.CommonEditorRegistry.registerEditorCommand(new MarkerCommand({
    id: 'closeMarkersNavigation',
    precondition: CONTEXT_MARKERS_NAVIGATION_VISIBLE,
    handler: function (x) { return x.closeMarkersNavigation(); },
    kbOpts: {
        weight: editorCommonExtensions_1.CommonEditorRegistry.commandWeight(50),
        kbExpr: EditorContextKeys.Focus,
        primary: 9 /* Escape */,
        secondary: [16384 /* Shift */ | 9 /* Escape */]
    }
}));
