/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var errors_1 = require("vs/base/common/errors");
var uri_1 = require("vs/base/common/uri");
var winjs_base_1 = require("vs/base/common/winjs.base");
var range_1 = require("vs/editor/common/core/range");
var editorCommonExtensions_1 = require("vs/editor/common/editorCommonExtensions");
var modes_1 = require("vs/editor/common/modes");
var modelService_1 = require("vs/editor/common/services/modelService");
var async_1 = require("vs/base/common/async");
function getCodeActions(model, range) {
    var allResults = [];
    var promises = modes_1.CodeActionProviderRegistry.all(model).map(function (support) {
        return async_1.asWinJsPromise(function (token) { return support.provideCodeActions(model, range, token); }).then(function (result) {
            if (Array.isArray(result)) {
                allResults.push.apply(allResults, result);
            }
        }, function (err) {
            errors_1.onUnexpectedExternalError(err);
        });
    });
    return winjs_base_1.TPromise.join(promises).then(function () { return allResults; });
}
exports.getCodeActions = getCodeActions;
editorCommonExtensions_1.CommonEditorRegistry.registerLanguageCommand('_executeCodeActionProvider', function (accessor, args) {
    var resource = args.resource, range = args.range;
    if (!(resource instanceof uri_1.default) || !range_1.Range.isIRange(range)) {
        throw errors_1.illegalArgument();
    }
    var model = accessor.get(modelService_1.IModelService).getModel(resource);
    if (!model) {
        throw errors_1.illegalArgument();
    }
    return getCodeActions(model, model.validateRange(range));
});
