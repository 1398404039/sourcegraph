/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
require('./lightBulbWidget.css');
var lifecycle_1 = require('vs/base/common/lifecycle');
var event_1 = require('vs/base/common/event');
var dom = require('vs/base/browser/dom');
var position_1 = require('vs/editor/common/core/position');
var LightBulbWidget = (function () {
    function LightBulbWidget(editor) {
        var _this = this;
        this._onClick = new event_1.Emitter();
        this._toDispose = [];
        this._editor = editor;
        this._editor.addOverlayWidget(this);
        this._toDispose.push(this._editor.onDidScrollChange(function () {
            if (_this._visible) {
                _this._layout();
            }
        }));
        this._toDispose.push(this._editor.onDidChangeModelDecorations(function () {
            // hide when something has been added to glyph margin
            if (_this._visible && !_this._hasSpaceInGlyphMargin(_this._position.lineNumber)) {
                _this.hide();
            }
        }));
    }
    LightBulbWidget.prototype.dispose = function () {
        this._editor.removeOverlayWidget(this);
        this._toDispose = lifecycle_1.dispose(this._toDispose);
    };
    Object.defineProperty(LightBulbWidget.prototype, "onClick", {
        get: function () {
            return this._onClick.event;
        },
        enumerable: true,
        configurable: true
    });
    LightBulbWidget.prototype.getId = function () {
        return '__lightBulbWidget';
    };
    LightBulbWidget.prototype.getDomNode = function () {
        var _this = this;
        if (!this._domNode) {
            this._domNode = document.createElement('div');
            this._domNode.style.width = '20px';
            this._domNode.style.height = '20px';
            this._domNode.className = 'lightbulb-glyph hidden';
            this._toDispose.push(dom.addDisposableListener(this._domNode, 'mousedown', function (e) {
                e.preventDefault();
                // a bit of extra work to make sure the menu
                // doesn't cover the line-text
                var _a = dom.getDomNodePagePosition(_this._domNode), top = _a.top, height = _a.height;
                var lineHeight = _this._editor.getConfiguration().lineHeight;
                _this._onClick.fire({
                    x: e.clientX,
                    y: top + height + Math.floor(lineHeight / 3)
                });
            }));
        }
        return this._domNode;
    };
    LightBulbWidget.prototype.getPosition = function () {
        return null;
    };
    Object.defineProperty(LightBulbWidget.prototype, "model", {
        get: function () {
            return this._model;
        },
        set: function (e) {
            var _this = this;
            this._model = e;
            this.hide();
            var modelNow = this._model;
            e.fixes.done(function (fixes) {
                if (modelNow === _this._model && fixes && fixes.length > 0) {
                    _this.show(e.position);
                }
                else {
                    _this.hide();
                }
            }, function (err) {
                _this.hide();
            });
        },
        enumerable: true,
        configurable: true
    });
    LightBulbWidget.prototype.show = function (where) {
        if (!this._hasSpaceInGlyphMargin(where.lineNumber)) {
            return;
        }
        if (!this._visible || !position_1.Position.equals(this._position, where)) {
            this._position = where;
            this._visible = true;
            this._layout();
        }
    };
    LightBulbWidget.prototype._hasSpaceInGlyphMargin = function (line) {
        for (var _i = 0, _a = this._editor.getLineDecorations(line); _i < _a.length; _i++) {
            var options = _a[_i].options;
            if (options.glyphMarginClassName) {
                return false;
            }
        }
        return true;
    };
    LightBulbWidget.prototype._layout = function () {
        var topForLineNumber = this._editor.getTopForLineNumber(this._position.lineNumber);
        var editorScrollTop = this._editor.getScrollTop();
        var top = topForLineNumber - editorScrollTop;
        this._domNode.style.top = top + "px";
        this._domNode.style.left = 0 + "px";
        this._domNode.classList.remove('hidden');
    };
    LightBulbWidget.prototype.hide = function () {
        if (this._visible) {
            this._visible = false;
            this._domNode.classList.add('hidden');
        }
    };
    return LightBulbWidget;
}());
exports.LightBulbWidget = LightBulbWidget;
