/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
require('./quickFix.css');
var event_1 = require('vs/base/common/event');
var nls_1 = require('vs/nls');
var dom_1 = require('vs/base/browser/dom');
var listWidget_1 = require('vs/base/browser/ui/list/listWidget');
var editorBrowser_1 = require('vs/editor/browser/editorBrowser');
var aria_1 = require('vs/base/browser/ui/aria/aria');
var quickFixRenderer = new (function () {
    function class_1() {
        this.templateId = 'command';
    }
    class_1.prototype.renderTemplate = function (container) {
        container.classList.add('quickfix-entry');
        return container;
    };
    class_1.prototype.renderElement = function (element, index, templateData) {
        templateData.innerText = element.command.title;
    };
    class_1.prototype.disposeTemplate = function (templateData) {
    };
    return class_1;
}());
var QuickFixList = (function () {
    function QuickFixList(editor) {
        this._onDidSelect = new event_1.Emitter();
        this._editor = editor;
        this.createElements();
    }
    QuickFixList.prototype.dispose = function () {
        this._widgetSubscription.dispose();
    };
    QuickFixList.prototype.createElements = function () {
        var _this = this;
        this.domNode = document.createElement('div');
        var delegate = {
            getHeight: function () { return _this._editor.getConfiguration().lineHeight; },
            getTemplateId: function () { return 'command'; }
        };
        this._widget = new listWidget_1.List(this.domNode, delegate, [quickFixRenderer], { useShadows: false });
        this._widgetSubscription = this._widget.onSelectionChange(function (event) {
            var first = event.elements[0];
            if (first) {
                aria_1.alert(nls_1.localize('quickFixAccepted', "{0}, accepted", first.command.title));
                _this._onDidSelect.fire(first);
            }
        });
    };
    Object.defineProperty(QuickFixList.prototype, "onDidSelectQuickFix", {
        get: function () {
            return this._onDidSelect.event;
        },
        enumerable: true,
        configurable: true
    });
    QuickFixList.prototype.setInput = function (fixes) {
        (_a = this._widget).splice.apply(_a, [0, this._widget.length].concat(fixes));
        this._widget.layout(Math.min(5, fixes.length) * this._editor.getConfiguration().lineHeight);
        var _a;
    };
    QuickFixList.prototype.focusNext = function () {
        this._widget.focusNext();
    };
    QuickFixList.prototype.focusPrevious = function () {
        this._widget.focusPrevious();
    };
    QuickFixList.prototype.focusNextPage = function () {
        this._widget.focusNextPage();
    };
    QuickFixList.prototype.focusPreviousPage = function () {
        this._widget.focusPreviousPage();
    };
    QuickFixList.prototype.select = function () {
        var first = this._widget.getFocus()[0];
        if (typeof first === 'number') {
            this._widget.setSelection(first);
        }
    };
    return QuickFixList;
}());
exports.QuickFixList = QuickFixList;
var Message = (function () {
    function Message(editor) {
        this.domNode = document.createElement('div');
        this.domNode.style.height = editor.getConfiguration().lineHeight + 'px';
    }
    Object.defineProperty(Message.prototype, "value", {
        set: function (value) {
            this.domNode.innerText = value;
        },
        enumerable: true,
        configurable: true
    });
    Message.Loading = nls_1.localize('QuickFixSelectionWidget.loading', "Loading...");
    Message.NoFixes = nls_1.localize('QuickFixSelectionWidget.noSuggestions', "No fix suggestions.");
    return Message;
}());
exports.Message = Message;
var QuickFixContentWidget = (function () {
    function QuickFixContentWidget(editor) {
        this._editor = editor;
        this._editor.addContentWidget(this);
        this.message = new Message(this._editor);
        this.list = new QuickFixList(this._editor);
        dom_1.hide(this.message.domNode);
        dom_1.hide(this.list.domNode);
        this.domNode = document.createElement('div');
        this.domNode.classList.add('quickfix-widget');
        this.domNode.appendChild(this.message.domNode);
        this.domNode.appendChild(this.list.domNode);
    }
    QuickFixContentWidget.prototype.dispose = function () {
        this._editor.removeContentWidget(this);
    };
    QuickFixContentWidget.prototype.getId = function () {
        return 'QuickFixContentWidget';
    };
    QuickFixContentWidget.prototype.getDomNode = function () {
        return this.domNode;
    };
    QuickFixContentWidget.prototype.show = function (fixes, position) {
        var _this = this;
        this._position = position;
        dom_1.hide(this.list.domNode);
        dom_1.show(this.message.domNode);
        this.message.value = Message.Loading;
        this._layout();
        fixes.then(function (values) {
            if (values.length > 0) {
                dom_1.hide(_this.message.domNode);
                dom_1.show(_this.list.domNode);
                _this._layout(Math.min(5, values.length));
                _this.list.setInput(values);
            }
            else {
                _this.message.value = Message.NoFixes;
            }
        }, function (err) {
            _this.hide();
        });
    };
    QuickFixContentWidget.prototype._layout = function (heightInLines) {
        if (heightInLines === void 0) { heightInLines = 1; }
        var lineHeight = this._editor.getConfiguration().lineHeight;
        var width = 18 * lineHeight + 'px';
        var height = heightInLines * lineHeight + 'px';
        this.domNode.style.width = width;
        this.domNode.style.height = height;
        this._editor.layoutContentWidget(this);
    };
    QuickFixContentWidget.prototype.hide = function () {
        this._position = undefined;
        this._layout();
    };
    QuickFixContentWidget.prototype.isVisible = function () {
        return !!this._position;
    };
    QuickFixContentWidget.prototype.isListVisible = function () {
        return this.isVisible() && this.list.domNode.style.display !== 'none';
    };
    QuickFixContentWidget.prototype.isMessageVisible = function () {
        return this.isVisible() && this.message.domNode.style.display !== 'none';
    };
    QuickFixContentWidget.prototype.getPosition = function () {
        if (this._position) {
            return { position: this._position, preference: [editorBrowser_1.ContentWidgetPositionPreference.BELOW] };
        }
        else {
            return null;
        }
    };
    return QuickFixContentWidget;
}());
exports.QuickFixContentWidget = QuickFixContentWidget;
