/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var nls = require('vs/nls');
var errors_1 = require('vs/base/common/errors');
var lifecycle_1 = require('vs/base/common/lifecycle');
var commands_1 = require('vs/platform/commands/common/commands');
var contextkey_1 = require('vs/platform/contextkey/common/contextkey');
var markers_1 = require('vs/platform/markers/common/markers');
var selection_1 = require('vs/editor/common/core/selection');
var editorCommon_1 = require('vs/editor/common/editorCommon');
var editorCommonExtensions_1 = require('vs/editor/common/editorCommonExtensions');
var editorBrowserExtensions_1 = require('vs/editor/browser/editorBrowserExtensions');
var quickFixWidget_1 = require('./quickFixWidget');
var lightBulbWidget_1 = require('./lightBulbWidget');
var quickFixModel_1 = require('./quickFixModel');
var QuickFixController = (function () {
    function QuickFixController(editor, markerService, contextKeyService, _commandService) {
        var _this = this;
        this._commandService = _commandService;
        this._disposables = [];
        this._editor = editor;
        this._model = new quickFixModel_1.QuickFixModel(this._editor, markerService);
        this._quickFixWidgetVisible = CONTEXT_QUICK_FIX_WIDGET_VISIBLE.bindTo(contextKeyService);
        this._quickFixWidget = new quickFixWidget_1.QuickFixContentWidget(editor);
        this._lightBulbWidget = new lightBulbWidget_1.LightBulbWidget(editor);
        this._disposables.push(this._quickFixWidget.list.onDidSelectQuickFix(this._handleQuickFixSelect, this), this._lightBulbWidget.onClick(this._handleLightBulbSelect, this), this._model.onDidChangeFixes(function (e) { return _this._onQuickFixEvent(e); }), this._editor.onDidChangeCursorSelection(function () { return _this.closeWidget(); }));
    }
    QuickFixController.get = function (editor) {
        return editor.getContribution(QuickFixController.ID);
    };
    QuickFixController.prototype.dispose = function () {
        this._quickFixWidget.dispose();
        this._model.dispose();
        lifecycle_1.dispose(this._disposables);
    };
    QuickFixController.prototype._onQuickFixEvent = function (e) {
        var _this = this;
        if (e.type === 'manual') {
            this._lightBulbWidget.hide();
            this._quickFixWidgetVisible.set(true);
            this._quickFixWidget.show(e.fixes, e.position);
        }
        else if (e.fixes) {
            // auto magically triggered
            // * update an existing list of code actions
            // * manage light bulb
            if (this._quickFixWidget.isVisible()) {
                this._quickFixWidget.show(e.fixes, e.position);
            }
            else {
                e.fixes.then(function (fixes) {
                    if (fixes && fixes.length > 0) {
                        _this._lightBulbWidget.show(e.position);
                    }
                    else {
                        _this._lightBulbWidget.hide();
                    }
                }, function (err) {
                    _this._lightBulbWidget.hide();
                });
            }
        }
        else {
            this._lightBulbWidget.hide();
        }
    };
    QuickFixController.prototype.getId = function () {
        return QuickFixController.ID;
    };
    QuickFixController.prototype._handleQuickFixSelect = function (_a) {
        var command = _a.command;
        this.closeWidget();
        this._editor.focus();
        return (_b = this._commandService).executeCommand.apply(_b, [command.id].concat(command.arguments)).done(void 0, errors_1.onUnexpectedError);
        var _b;
    };
    QuickFixController.prototype._handleLightBulbSelect = function (pos) {
        var selection = new selection_1.Selection(pos.lineNumber, pos.column, pos.lineNumber, pos.column);
        this._model.triggerManual(selection);
    };
    QuickFixController.prototype.triggerFromEditorSelection = function () {
        this._model.triggerManual(this._editor.getSelection());
    };
    QuickFixController.prototype.acceptSelectedSuggestion = function () {
        if (this._quickFixWidget.isListVisible()) {
            this._quickFixWidget.list.select();
        }
    };
    QuickFixController.prototype.closeWidget = function () {
        this._lightBulbWidget.hide();
        this._quickFixWidget.hide();
        this._quickFixWidgetVisible.reset();
    };
    QuickFixController.prototype.selectNextSuggestion = function () {
        if (this._quickFixWidget.isListVisible()) {
            this._quickFixWidget.list.focusNext();
        }
    };
    QuickFixController.prototype.selectNextPageSuggestion = function () {
        if (this._quickFixWidget.isListVisible()) {
            this._quickFixWidget.list.focusNextPage();
        }
    };
    QuickFixController.prototype.selectPrevSuggestion = function () {
        if (this._quickFixWidget.isListVisible()) {
            this._quickFixWidget.list.focusPrevious();
        }
    };
    QuickFixController.prototype.selectPrevPageSuggestion = function () {
        if (this._quickFixWidget.isListVisible()) {
            this._quickFixWidget.list.focusPreviousPage();
        }
    };
    QuickFixController.ID = 'editor.contrib.quickFixController';
    QuickFixController = __decorate([
        editorBrowserExtensions_1.editorContribution,
        __param(1, markers_1.IMarkerService),
        __param(2, contextkey_1.IContextKeyService),
        __param(3, commands_1.ICommandService)
    ], QuickFixController);
    return QuickFixController;
}());
exports.QuickFixController = QuickFixController;
var QuickFixAction = (function (_super) {
    __extends(QuickFixAction, _super);
    function QuickFixAction() {
        _super.call(this, {
            id: 'editor.action.quickFix',
            label: nls.localize('quickfix.trigger.label', "Quick Fix"),
            alias: 'Quick Fix',
            precondition: contextkey_1.ContextKeyExpr.and(editorCommon_1.EditorContextKeys.Writable, editorCommon_1.ModeContextKeys.hasCodeActionsProvider),
            kbOpts: {
                kbExpr: editorCommon_1.EditorContextKeys.TextFocus,
                primary: 32768 /* CtrlCmd */ | 84 /* US_DOT */
            }
        });
    }
    QuickFixAction.prototype.run = function (accessor, editor) {
        var controller = QuickFixController.get(editor);
        if (controller) {
            controller.triggerFromEditorSelection();
        }
    };
    QuickFixAction = __decorate([
        editorCommonExtensions_1.editorAction
    ], QuickFixAction);
    return QuickFixAction;
}(editorCommonExtensions_1.EditorAction));
exports.QuickFixAction = QuickFixAction;
var CONTEXT_QUICK_FIX_WIDGET_VISIBLE = new contextkey_1.RawContextKey('quickFixWidgetVisible', false);
var QuickFixCommand = editorCommonExtensions_1.EditorCommand.bindToContribution(QuickFixController.get);
// register action
editorCommonExtensions_1.CommonEditorRegistry.registerEditorCommand(new QuickFixCommand({
    id: 'acceptQuickFixSuggestion',
    precondition: CONTEXT_QUICK_FIX_WIDGET_VISIBLE,
    handler: function (x) { return x.acceptSelectedSuggestion(); },
    kbOpts: {
        weight: editorCommonExtensions_1.CommonEditorRegistry.commandWeight(80),
        kbExpr: editorCommon_1.EditorContextKeys.Focus,
        primary: 3 /* Enter */,
        secondary: [2 /* Tab */]
    }
}));
editorCommonExtensions_1.CommonEditorRegistry.registerEditorCommand(new QuickFixCommand({
    id: 'closeQuickFixWidget',
    precondition: CONTEXT_QUICK_FIX_WIDGET_VISIBLE,
    handler: function (x) { return x.closeWidget(); },
    kbOpts: {
        weight: editorCommonExtensions_1.CommonEditorRegistry.commandWeight(80),
        kbExpr: editorCommon_1.EditorContextKeys.Focus,
        primary: 9 /* Escape */,
        secondary: [16384 /* Shift */ | 9 /* Escape */]
    }
}));
editorCommonExtensions_1.CommonEditorRegistry.registerEditorCommand(new QuickFixCommand({
    id: 'selectNextQuickFix',
    precondition: CONTEXT_QUICK_FIX_WIDGET_VISIBLE,
    handler: function (x) { return x.selectNextSuggestion(); },
    kbOpts: {
        weight: editorCommonExtensions_1.CommonEditorRegistry.commandWeight(80),
        kbExpr: editorCommon_1.EditorContextKeys.Focus,
        primary: 18 /* DownArrow */,
        mac: { primary: 18 /* DownArrow */, secondary: [4096 /* WinCtrl */ | 44 /* KEY_N */] }
    }
}));
editorCommonExtensions_1.CommonEditorRegistry.registerEditorCommand(new QuickFixCommand({
    id: 'selectNextPageQuickFix',
    precondition: CONTEXT_QUICK_FIX_WIDGET_VISIBLE,
    handler: function (x) { return x.selectNextPageSuggestion(); },
    kbOpts: {
        weight: editorCommonExtensions_1.CommonEditorRegistry.commandWeight(80),
        kbExpr: editorCommon_1.EditorContextKeys.Focus,
        primary: 12 /* PageDown */
    }
}));
editorCommonExtensions_1.CommonEditorRegistry.registerEditorCommand(new QuickFixCommand({
    id: 'selectPrevQuickFix',
    precondition: CONTEXT_QUICK_FIX_WIDGET_VISIBLE,
    handler: function (x) { return x.selectPrevSuggestion(); },
    kbOpts: {
        weight: editorCommonExtensions_1.CommonEditorRegistry.commandWeight(80),
        kbExpr: editorCommon_1.EditorContextKeys.Focus,
        primary: 16 /* UpArrow */,
        mac: { primary: 16 /* UpArrow */, secondary: [4096 /* WinCtrl */ | 46 /* KEY_P */] }
    }
}));
editorCommonExtensions_1.CommonEditorRegistry.registerEditorCommand(new QuickFixCommand({
    id: 'selectPrevPageQuickFix',
    precondition: CONTEXT_QUICK_FIX_WIDGET_VISIBLE,
    handler: function (x) { return x.selectPrevPageSuggestion(); },
    kbOpts: {
        weight: editorCommonExtensions_1.CommonEditorRegistry.commandWeight(80),
        kbExpr: editorCommon_1.EditorContextKeys.Focus,
        primary: 11 /* PageUp */
    }
}));
