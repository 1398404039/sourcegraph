/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var contextkey_1 = require('vs/platform/contextkey/common/contextkey');
var keybindingsRegistry_1 = require('vs/platform/keybinding/common/keybindingsRegistry');
var snippetsRegistry_1 = require('vs/editor/common/modes/snippetsRegistry');
var platform_1 = require('vs/platform/platform');
var strings_1 = require('vs/base/common/strings');
var editorCommon = require('vs/editor/common/editorCommon');
var editorCommonExtensions_1 = require('vs/editor/common/editorCommonExtensions');
var snippet_1 = require('vs/editor/contrib/snippet/common/snippet');
var snippetController_1 = require('vs/editor/contrib/snippet/common/snippetController');
var EditorContextKeys = editorCommon.EditorContextKeys;
var snippetsRegistry = platform_1.Registry.as(snippetsRegistry_1.Extensions.Snippets);
var TabCompletionController = (function () {
    function TabCompletionController(editor, contextKeyService) {
        var _this = this;
        this._currentSnippets = [];
        this._snippetController = snippetController_1.SnippetController.get(editor);
        var hasSnippets = TabCompletionController.ContextKey.bindTo(contextKeyService);
        this._cursorChangeSubscription = editor.onDidChangeCursorSelection(function (e) {
            _this._currentSnippets.length = 0;
            var selectFn;
            if (e.selection.isEmpty()) {
                // empty selection -> real text (no whitespace) left of cursor
                var prefix_1 = snippetsRegistry_1.getNonWhitespacePrefix(editor.getModel(), editor.getPosition());
                selectFn = prefix_1 && (function (snippet) { return strings_1.endsWith(prefix_1, snippet.prefix); });
            }
            else {
                // actual selection -> snippet must be a full match
                var selected_1 = editor.getModel().getValueInRange(e.selection);
                selectFn = function (snippet) { return selected_1 === snippet.prefix; };
            }
            if (selectFn) {
                snippetsRegistry.visitSnippets(editor.getModel().getModeId(), function (s) {
                    if (selectFn(s)) {
                        _this._currentSnippets.push(s);
                    }
                    return true;
                });
            }
            hasSnippets.set(_this._currentSnippets.length === 1); //todo@joh make it work with N
        });
    }
    TabCompletionController.get = function (editor) {
        return editor.getContribution(TabCompletionController.ID);
    };
    TabCompletionController.prototype.dispose = function () {
        this._cursorChangeSubscription.dispose();
    };
    TabCompletionController.prototype.performSnippetCompletions = function () {
        if (this._currentSnippets.length === 1) {
            var snippet = this._currentSnippets[0];
            var codeSnippet = snippet_1.CodeSnippet.fromTextmate(snippet.codeSnippet);
            this._snippetController.run(codeSnippet, snippet.prefix.length, 0);
        }
    };
    TabCompletionController.prototype.getId = function () {
        return TabCompletionController.ID;
    };
    TabCompletionController.ID = 'editor.tabCompletionController';
    TabCompletionController.ContextKey = new contextkey_1.RawContextKey('hasSnippetCompletions', undefined);
    TabCompletionController = __decorate([
        editorCommonExtensions_1.commonEditorContribution,
        __param(1, contextkey_1.IContextKeyService)
    ], TabCompletionController);
    return TabCompletionController;
}());
exports.TabCompletionController = TabCompletionController;
var TabCompletionCommand = editorCommonExtensions_1.EditorCommand.bindToContribution(TabCompletionController.get);
editorCommonExtensions_1.CommonEditorRegistry.registerEditorCommand(new TabCompletionCommand({
    id: 'insertSnippet',
    precondition: TabCompletionController.ContextKey,
    handler: function (x) { return x.performSnippetCompletions(); },
    kbOpts: {
        weight: keybindingsRegistry_1.KeybindingsRegistry.WEIGHT.editorContrib(),
        kbExpr: contextkey_1.ContextKeyExpr.and(EditorContextKeys.TextFocus, EditorContextKeys.TabDoesNotMoveFocus, snippetController_1.CONTEXT_SNIPPET_MODE.toNegated(), contextkey_1.ContextKeyExpr.has('config.editor.tabCompletion')),
        primary: 2 /* Tab */
    }
}));
