/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var nls = require('vs/nls');
var errors_1 = require('vs/base/common/errors');
var lifecycle_1 = require('vs/base/common/lifecycle');
var instantiation_1 = require('vs/platform/instantiation/common/instantiation');
var telemetry_1 = require('vs/platform/telemetry/common/telemetry');
var contextkey_1 = require('vs/platform/contextkey/common/contextkey');
var commands_1 = require('vs/platform/commands/common/commands');
var editorCommon_1 = require('vs/editor/common/editorCommon');
var editorCommonExtensions_1 = require('vs/editor/common/editorCommonExtensions');
var editorBrowserExtensions_1 = require('vs/editor/browser/editorBrowserExtensions');
var editOperation_1 = require('vs/editor/common/core/editOperation');
var snippet_1 = require('vs/editor/contrib/snippet/common/snippet');
var snippetController_1 = require('vs/editor/contrib/snippet/common/snippetController');
var suggest_1 = require('vs/editor/contrib/suggest/common/suggest');
var suggestModel_1 = require('../common/suggestModel');
var suggestWidget_1 = require('./suggestWidget');
var SuggestController = (function () {
    function SuggestController(editor, commandService, telemetryService, contextKeyService, instantiationService) {
        var _this = this;
        this.editor = editor;
        this.commandService = commandService;
        this.telemetryService = telemetryService;
        this.toDispose = [];
        this.model = new suggestModel_1.SuggestModel(this.editor);
        this.toDispose.push(this.model.onDidTrigger(function (e) { return _this.widget.showTriggered(e.auto); }));
        this.toDispose.push(this.model.onDidSuggest(function (e) { return _this.widget.showSuggestions(e.completionModel, e.isFrozen, e.auto); }));
        this.toDispose.push(this.model.onDidCancel(function (e) { return !e.retrigger && _this.widget.hideWidget(); }));
        // Manage the acceptSuggestionsOnEnter context key
        var acceptSuggestionsOnEnter = suggest_1.Context.AcceptSuggestionsOnEnter.bindTo(contextKeyService);
        var updateFromConfig = function () {
            acceptSuggestionsOnEnter.set(_this.editor.getConfiguration().contribInfo.acceptSuggestionOnEnter);
        };
        this.toDispose.push(this.editor.onDidChangeConfiguration(function (e) { return updateFromConfig(); }));
        updateFromConfig();
        this.widget = instantiationService.createInstance(suggestWidget_1.SuggestWidget, this.editor);
        this.toDispose.push(this.widget.onDidSelect(this.onDidSelectItem, this));
    }
    SuggestController.get = function (editor) {
        return editor.getContribution(SuggestController.ID);
    };
    SuggestController.prototype.getId = function () {
        return SuggestController.ID;
    };
    SuggestController.prototype.dispose = function () {
        this.toDispose = lifecycle_1.dispose(this.toDispose);
        if (this.widget) {
            this.widget.dispose();
            this.widget = null;
        }
        if (this.model) {
            this.model.dispose();
            this.model = null;
        }
    };
    SuggestController.prototype.onDidSelectItem = function (item) {
        if (item) {
            var suggestion = item.suggestion, position = item.position;
            var columnDelta = this.editor.getPosition().column - position.column;
            if (Array.isArray(suggestion.additionalTextEdits)) {
                this.editor.pushUndoStop();
                this.editor.executeEdits('suggestController.additionalTextEdits', suggestion.additionalTextEdits.map(function (edit) { return editOperation_1.EditOperation.replace(edit.range, edit.text); }));
                this.editor.pushUndoStop();
            }
            var snippet = suggestion.isTMSnippet
                ? snippet_1.CodeSnippet.fromTextmate(suggestion.insertText)
                : snippet_1.CodeSnippet.fromInternal(suggestion.insertText);
            snippetController_1.SnippetController.get(this.editor).run(snippet, suggestion.overwriteBefore + columnDelta, suggestion.overwriteAfter);
            if (suggestion.command) {
                (_a = this.commandService).executeCommand.apply(_a, [suggestion.command.id].concat(suggestion.command.arguments)).done(undefined, errors_1.onUnexpectedError);
            }
            if (item.support !== suggest_1.snippetSuggestSupport) {
                this.telemetryService.publicLog('suggestSnippetInsert', {
                    hasPlaceholders: snippet.placeHolders.length > 0
                });
            }
        }
        this.model.cancel();
        var _a;
    };
    SuggestController.prototype.triggerSuggest = function () {
        this.model.trigger(false, false);
        this.editor.focus();
    };
    SuggestController.prototype.acceptSelectedSuggestion = function () {
        if (this.widget) {
            var item = this.widget.getFocusedItem();
            this.onDidSelectItem(item);
        }
    };
    SuggestController.prototype.cancelSuggestWidget = function () {
        if (this.widget) {
            this.widget.hideDetailsOrHideWidget();
        }
    };
    SuggestController.prototype.selectNextSuggestion = function () {
        if (this.widget) {
            this.widget.selectNext();
        }
    };
    SuggestController.prototype.selectNextPageSuggestion = function () {
        if (this.widget) {
            this.widget.selectNextPage();
        }
    };
    SuggestController.prototype.selectPrevSuggestion = function () {
        if (this.widget) {
            this.widget.selectPrevious();
        }
    };
    SuggestController.prototype.selectPrevPageSuggestion = function () {
        if (this.widget) {
            this.widget.selectPreviousPage();
        }
    };
    SuggestController.prototype.toggleSuggestionDetails = function () {
        if (this.widget) {
            this.widget.toggleDetails();
        }
    };
    SuggestController.ID = 'editor.contrib.suggestController';
    SuggestController = __decorate([
        editorBrowserExtensions_1.editorContribution,
        __param(1, commands_1.ICommandService),
        __param(2, telemetry_1.ITelemetryService),
        __param(3, contextkey_1.IContextKeyService),
        __param(4, instantiation_1.IInstantiationService)
    ], SuggestController);
    return SuggestController;
}());
exports.SuggestController = SuggestController;
var TriggerSuggestAction = (function (_super) {
    __extends(TriggerSuggestAction, _super);
    function TriggerSuggestAction() {
        _super.call(this, {
            id: 'editor.action.triggerSuggest',
            label: nls.localize('suggest.trigger.label', "Trigger Suggest"),
            alias: 'Trigger Suggest',
            precondition: contextkey_1.ContextKeyExpr.and(editorCommon_1.EditorContextKeys.Writable, editorCommon_1.ModeContextKeys.hasCompletionItemProvider),
            kbOpts: {
                kbExpr: editorCommon_1.EditorContextKeys.TextFocus,
                primary: 32768 /* CtrlCmd */ | 10 /* Space */,
                mac: { primary: 4096 /* WinCtrl */ | 10 /* Space */ }
            }
        });
    }
    TriggerSuggestAction.prototype.run = function (accessor, editor) {
        SuggestController.get(editor).triggerSuggest();
    };
    TriggerSuggestAction = __decorate([
        editorCommonExtensions_1.editorAction
    ], TriggerSuggestAction);
    return TriggerSuggestAction;
}(editorCommonExtensions_1.EditorAction));
exports.TriggerSuggestAction = TriggerSuggestAction;
var weight = editorCommonExtensions_1.CommonEditorRegistry.commandWeight(90);
var SuggestCommand = editorCommonExtensions_1.EditorCommand.bindToContribution(SuggestController.get);
editorCommonExtensions_1.CommonEditorRegistry.registerEditorCommand(new SuggestCommand({
    id: 'acceptSelectedSuggestion',
    precondition: suggest_1.Context.Visible,
    handler: function (x) { return x.acceptSelectedSuggestion(); },
    kbOpts: {
        weight: weight,
        kbExpr: editorCommon_1.EditorContextKeys.TextFocus,
        primary: 2 /* Tab */
    }
}));
editorCommonExtensions_1.CommonEditorRegistry.registerEditorCommand(new SuggestCommand({
    id: 'acceptSelectedSuggestionOnEnter',
    precondition: suggest_1.Context.Visible,
    handler: function (x) { return x.acceptSelectedSuggestion(); },
    kbOpts: {
        weight: weight,
        kbExpr: contextkey_1.ContextKeyExpr.and(editorCommon_1.EditorContextKeys.TextFocus, suggest_1.Context.AcceptSuggestionsOnEnter),
        primary: 3 /* Enter */
    }
}));
editorCommonExtensions_1.CommonEditorRegistry.registerEditorCommand(new SuggestCommand({
    id: 'hideSuggestWidget',
    precondition: suggest_1.Context.Visible,
    handler: function (x) { return x.cancelSuggestWidget(); },
    kbOpts: {
        weight: weight,
        kbExpr: editorCommon_1.EditorContextKeys.TextFocus,
        primary: 9 /* Escape */,
        secondary: [16384 /* Shift */ | 9 /* Escape */]
    }
}));
editorCommonExtensions_1.CommonEditorRegistry.registerEditorCommand(new SuggestCommand({
    id: 'selectNextSuggestion',
    precondition: contextkey_1.ContextKeyExpr.and(suggest_1.Context.Visible, suggest_1.Context.MultipleSuggestions),
    handler: function (c) { return c.selectNextSuggestion(); },
    kbOpts: {
        weight: weight,
        kbExpr: editorCommon_1.EditorContextKeys.TextFocus,
        primary: 18 /* DownArrow */,
        secondary: [8192 /* Alt */ | 18 /* DownArrow */],
        mac: { primary: 18 /* DownArrow */, secondary: [8192 /* Alt */ | 18 /* DownArrow */, 4096 /* WinCtrl */ | 44 /* KEY_N */] }
    }
}));
editorCommonExtensions_1.CommonEditorRegistry.registerEditorCommand(new SuggestCommand({
    id: 'selectNextPageSuggestion',
    precondition: contextkey_1.ContextKeyExpr.and(suggest_1.Context.Visible, suggest_1.Context.MultipleSuggestions),
    handler: function (c) { return c.selectNextPageSuggestion(); },
    kbOpts: {
        weight: weight,
        kbExpr: editorCommon_1.EditorContextKeys.TextFocus,
        primary: 12 /* PageDown */,
        secondary: [8192 /* Alt */ | 12 /* PageDown */]
    }
}));
editorCommonExtensions_1.CommonEditorRegistry.registerEditorCommand(new SuggestCommand({
    id: 'selectPrevSuggestion',
    precondition: contextkey_1.ContextKeyExpr.and(suggest_1.Context.Visible, suggest_1.Context.MultipleSuggestions),
    handler: function (c) { return c.selectPrevSuggestion(); },
    kbOpts: {
        weight: weight,
        kbExpr: editorCommon_1.EditorContextKeys.TextFocus,
        primary: 16 /* UpArrow */,
        secondary: [8192 /* Alt */ | 16 /* UpArrow */],
        mac: { primary: 16 /* UpArrow */, secondary: [8192 /* Alt */ | 16 /* UpArrow */, 4096 /* WinCtrl */ | 46 /* KEY_P */] }
    }
}));
editorCommonExtensions_1.CommonEditorRegistry.registerEditorCommand(new SuggestCommand({
    id: 'selectPrevPageSuggestion',
    precondition: contextkey_1.ContextKeyExpr.and(suggest_1.Context.Visible, suggest_1.Context.MultipleSuggestions),
    handler: function (c) { return c.selectPrevPageSuggestion(); },
    kbOpts: {
        weight: weight,
        kbExpr: editorCommon_1.EditorContextKeys.TextFocus,
        primary: 11 /* PageUp */,
        secondary: [8192 /* Alt */ | 11 /* PageUp */]
    }
}));
editorCommonExtensions_1.CommonEditorRegistry.registerEditorCommand(new SuggestCommand({
    id: 'toggleSuggestionDetails',
    precondition: suggest_1.Context.Visible,
    handler: function (x) { return x.toggleSuggestionDetails(); },
    kbOpts: {
        weight: weight,
        kbExpr: editorCommon_1.EditorContextKeys.TextFocus,
        primary: 32768 /* CtrlCmd */ | 10 /* Space */,
        mac: { primary: 4096 /* WinCtrl */ | 10 /* Space */ }
    }
}));
