/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
require('./suggest.css');
var nls = require('vs/nls');
var strings = require('vs/base/common/strings');
var event_1 = require('vs/base/common/event');
var winjs_base_1 = require('vs/base/common/winjs.base');
var errors_1 = require('vs/base/common/errors');
var lifecycle_1 = require('vs/base/common/lifecycle');
var dom_1 = require('vs/base/browser/dom');
var highlightedLabel_1 = require('vs/base/browser/ui/highlightedlabel/highlightedLabel');
var listWidget_1 = require('vs/base/browser/ui/list/listWidget');
var scrollableElement_1 = require('vs/base/browser/ui/scrollbar/scrollableElement');
var instantiation_1 = require('vs/platform/instantiation/common/instantiation');
var keybinding_1 = require('vs/platform/keybinding/common/keybinding');
var contextkey_1 = require('vs/platform/contextkey/common/contextkey');
var editorBrowser_1 = require('vs/editor/browser/editorBrowser');
var suggest_1 = require('../common/suggest');
var aria_1 = require('vs/base/browser/ui/aria/aria');
var telemetry_1 = require('vs/platform/telemetry/common/telemetry');
var sticky = false; // for development purposes
var colorRegExp = /^(#([\da-f]{3}){1,2}|(rgb|hsl)a\(\s*(\d{1,3}%?\s*,\s*){3}(1|0?\.\d+)\)|(rgb|hsl)\(\s*\d{1,3}%?(\s*,\s*\d{1,3}%?){2}\s*\))$/i;
function matchesColor(text) {
    return text && text.match(colorRegExp) ? text : null;
}
var Renderer = (function () {
    function Renderer(widget, editor, keybindingService) {
        this.widget = widget;
        this.editor = editor;
        var keybindings = keybindingService.lookupKeybindings('editor.action.triggerSuggest');
        this.triggerKeybindingLabel = keybindings.length === 0 ? '' : " (" + keybindingService.getLabelFor(keybindings[0]) + ")";
    }
    Object.defineProperty(Renderer.prototype, "templateId", {
        get: function () {
            return 'suggestion';
        },
        enumerable: true,
        configurable: true
    });
    Renderer.prototype.renderTemplate = function (container) {
        var _this = this;
        var data = Object.create(null);
        data.disposables = [];
        data.root = container;
        data.icon = dom_1.append(container, dom_1.$('.icon'));
        data.colorspan = dom_1.append(data.icon, dom_1.$('span.colorspan'));
        var text = dom_1.append(container, dom_1.$('.text'));
        var main = dom_1.append(text, dom_1.$('.main'));
        data.highlightedLabel = new highlightedLabel_1.HighlightedLabel(main);
        data.disposables.push(data.highlightedLabel);
        data.typeLabel = dom_1.append(main, dom_1.$('span.type-label'));
        var docs = dom_1.append(text, dom_1.$('.docs'));
        data.documentation = dom_1.append(docs, dom_1.$('span.docs-text'));
        data.documentationDetails = dom_1.append(docs, dom_1.$('span.docs-details'));
        data.documentationDetails.title = nls.localize('readMore', "Read More...{0}", this.triggerKeybindingLabel);
        var configureFont = function () {
            var fontInfo = _this.editor.getConfiguration().fontInfo;
            data.root.style.fontSize = fontInfo.fontSize + "px";
            main.style.fontFamily = fontInfo.fontFamily;
        };
        configureFont();
        event_1.chain(this.editor.onDidChangeConfiguration.bind(this.editor))
            .filter(function (e) { return e.fontInfo; })
            .on(configureFont, null, data.disposables);
        return data;
    };
    Renderer.prototype.renderElement = function (element, index, templateData) {
        var _this = this;
        var data = templateData;
        var suggestion = element.suggestion;
        if (suggestion.documentation) {
            data.root.setAttribute('aria-label', nls.localize('suggestionWithDetailsAriaLabel', "{0}, suggestion, has details", suggestion.label));
        }
        else {
            data.root.setAttribute('aria-label', nls.localize('suggestionAriaLabel', "{0}, suggestion", suggestion.label));
        }
        data.icon.className = 'icon ' + suggestion.type;
        data.colorspan.style.backgroundColor = '';
        if (suggestion.type === 'color') {
            var color = matchesColor(suggestion.label) || matchesColor(suggestion.documentation);
            if (color) {
                data.icon.className = 'icon customcolor';
                data.colorspan.style.backgroundColor = color;
            }
        }
        data.highlightedLabel.set(suggestion.label, element.highlights);
        data.typeLabel.textContent = (suggestion.detail || '').replace(/\n.*$/m, '');
        data.documentation.textContent = suggestion.documentation || '';
        if (suggestion.documentation) {
            dom_1.show(data.documentationDetails);
            data.documentationDetails.onmousedown = function (e) {
                e.stopPropagation();
                e.preventDefault();
            };
            data.documentationDetails.onclick = function (e) {
                e.stopPropagation();
                e.preventDefault();
                _this.widget.toggleDetails();
            };
        }
        else {
            dom_1.hide(data.documentationDetails);
            data.documentationDetails.onmousedown = null;
            data.documentationDetails.onclick = null;
        }
    };
    Renderer.prototype.disposeTemplate = function (templateData) {
        templateData.highlightedLabel.dispose();
        templateData.disposables = lifecycle_1.dispose(templateData.disposables);
    };
    Renderer = __decorate([
        __param(2, keybinding_1.IKeybindingService)
    ], Renderer);
    return Renderer;
}());
var State;
(function (State) {
    State[State["Hidden"] = 0] = "Hidden";
    State[State["Loading"] = 1] = "Loading";
    State[State["Empty"] = 2] = "Empty";
    State[State["Open"] = 3] = "Open";
    State[State["Frozen"] = 4] = "Frozen";
    State[State["Details"] = 5] = "Details";
})(State || (State = {}));
var SuggestionDetails = (function () {
    function SuggestionDetails(container, widget, editor) {
        var _this = this;
        this.widget = widget;
        this.editor = editor;
        this.disposables = [];
        this.el = dom_1.append(container, dom_1.$('.details'));
        this.disposables.push(lifecycle_1.toDisposable(function () { return container.removeChild(_this.el); }));
        var header = dom_1.append(this.el, dom_1.$('.header'));
        this.title = dom_1.append(header, dom_1.$('span.title'));
        this.titleLabel = new highlightedLabel_1.HighlightedLabel(this.title);
        this.disposables.push(this.titleLabel);
        this.back = dom_1.append(header, dom_1.$('span.go-back'));
        this.back.title = nls.localize('goback', "Go back");
        this.body = dom_1.$('.body');
        this.scrollbar = new scrollableElement_1.DomScrollableElement(this.body, { canUseTranslate3d: false });
        dom_1.append(this.el, this.scrollbar.getDomNode());
        this.disposables.push(this.scrollbar);
        this.type = dom_1.append(this.body, dom_1.$('p.type'));
        this.docs = dom_1.append(this.body, dom_1.$('p.docs'));
        this.ariaLabel = null;
        this.configureFont();
        event_1.chain(this.editor.onDidChangeConfiguration.bind(this.editor))
            .filter(function (e) { return e.fontInfo; })
            .on(this.configureFont, this, this.disposables);
    }
    Object.defineProperty(SuggestionDetails.prototype, "element", {
        get: function () {
            return this.el;
        },
        enumerable: true,
        configurable: true
    });
    SuggestionDetails.prototype.render = function (item) {
        var _this = this;
        if (!item) {
            this.titleLabel.set('');
            this.type.textContent = '';
            this.docs.textContent = '';
            this.ariaLabel = null;
            return;
        }
        this.titleLabel.set(item.suggestion.label, item.highlights);
        this.type.innerText = item.suggestion.detail || '';
        this.docs.textContent = item.suggestion.documentation;
        this.back.onmousedown = function (e) {
            e.preventDefault();
            e.stopPropagation();
        };
        this.back.onclick = function (e) {
            e.preventDefault();
            e.stopPropagation();
            _this.widget.toggleDetails();
        };
        this.body.scrollTop = 0;
        this.scrollbar.scanDomNode();
        this.ariaLabel = strings.format('{0}\n{1}\n{2}', item.suggestion.label || '', item.suggestion.detail || '', item.suggestion.documentation || '');
    };
    SuggestionDetails.prototype.getAriaLabel = function () {
        return this.ariaLabel;
    };
    SuggestionDetails.prototype.scrollDown = function (much) {
        if (much === void 0) { much = 8; }
        this.body.scrollTop += much;
    };
    SuggestionDetails.prototype.scrollUp = function (much) {
        if (much === void 0) { much = 8; }
        this.body.scrollTop -= much;
    };
    SuggestionDetails.prototype.pageDown = function () {
        this.scrollDown(80);
    };
    SuggestionDetails.prototype.pageUp = function () {
        this.scrollUp(80);
    };
    SuggestionDetails.prototype.configureFont = function () {
        var fontInfo = this.editor.getConfiguration().fontInfo;
        var fontSize = fontInfo.fontSize + "px";
        this.el.style.fontSize = fontSize;
        this.title.style.fontFamily = fontInfo.fontFamily;
        this.type.style.fontFamily = fontInfo.fontFamily;
    };
    SuggestionDetails.prototype.dispose = function () {
        this.disposables = lifecycle_1.dispose(this.disposables);
    };
    return SuggestionDetails;
}());
var SuggestWidget = (function () {
    function SuggestWidget(editor, telemetryService, contextKeyService, instantiationService) {
        var _this = this;
        this.editor = editor;
        this.telemetryService = telemetryService;
        this.allowEditorOverflow = true; // Editor.IContentWidget.allowEditorOverflow
        this.onDidSelectEmitter = new event_1.Emitter();
        this.isAuto = false;
        this.focusedItem = null;
        this.element = dom_1.$('.editor-widget.suggest-widget');
        if (!this.editor.getConfiguration().contribInfo.iconsInSuggestions) {
            dom_1.addClass(this.element, 'no-icons');
        }
        this.messageElement = dom_1.append(this.element, dom_1.$('.message'));
        this.listElement = dom_1.append(this.element, dom_1.$('.tree'));
        this.details = new SuggestionDetails(this.element, this, this.editor);
        var renderer = instantiationService.createInstance(Renderer, this, this.editor);
        this.list = new listWidget_1.List(this.listElement, this, [renderer], { useShadows: false });
        this.toDispose = [
            editor.onDidBlurEditorText(function () { return _this.onEditorBlur(); }),
            this.list.onSelectionChange(function (e) { return _this.onListSelection(e); }),
            this.list.onFocusChange(function (e) { return _this.onListFocus(e); }),
            this.editor.onDidChangeCursorSelection(function () { return _this.onCursorSelectionChanged(); })
        ];
        this.suggestWidgetVisible = suggest_1.Context.Visible.bindTo(contextKeyService);
        this.suggestWidgetMultipleSuggestions = suggest_1.Context.MultipleSuggestions.bindTo(contextKeyService);
        this.suggestionSupportsAutoAccept = suggest_1.Context.AcceptOnKey.bindTo(contextKeyService);
        this.editor.addContentWidget(this);
        this.setState(0 /* Hidden */);
        // TODO@Alex: this is useful, but spammy
        // var isVisible = false;
        // this.onDidVisibilityChange((newIsVisible) => {
        // 	if (isVisible === newIsVisible) {
        // 		return;
        // 	}
        // 	isVisible = newIsVisible;
        // 	if (isVisible) {
        // 		alert(nls.localize('suggestWidgetAriaVisible', "Suggestions opened"));
        // 	} else {
        // 		alert(nls.localize('suggestWidgetAriaInvisible', "Suggestions closed"));
        // 	}
        // });
    }
    SuggestWidget.prototype.onCursorSelectionChanged = function () {
        if (this.state === 0 /* Hidden */) {
            return;
        }
        this.editor.layoutContentWidget(this);
    };
    SuggestWidget.prototype.onEditorBlur = function () {
        var _this = this;
        if (sticky) {
            return;
        }
        this.editorBlurTimeout = winjs_base_1.TPromise.timeout(150).then(function () {
            if (!_this.editor.isFocused()) {
                _this.setState(0 /* Hidden */);
            }
        });
    };
    SuggestWidget.prototype.onListSelection = function (e) {
        if (!e.elements.length) {
            return;
        }
        var item = e.elements[0];
        this.onDidSelectEmitter.fire(item);
        aria_1.alert(nls.localize('suggestionAriaAccepted', "{0}, accepted", item.suggestion.label));
        this.editor.focus();
    };
    SuggestWidget.prototype._getSuggestionAriaAlertLabel = function (item) {
        if (item.suggestion.documentation) {
            return nls.localize('ariaCurrentSuggestionWithDetails', "{0}, suggestion, has details", item.suggestion.label);
        }
        else {
            return nls.localize('ariaCurrentSuggestion', "{0}, suggestion", item.suggestion.label);
        }
    };
    SuggestWidget.prototype._ariaAlert = function (newAriaAlertLabel) {
        if (this._lastAriaAlertLabel === newAriaAlertLabel) {
            return;
        }
        this._lastAriaAlertLabel = newAriaAlertLabel;
        if (this._lastAriaAlertLabel) {
            aria_1.alert(this._lastAriaAlertLabel);
        }
    };
    SuggestWidget.prototype.onListFocus = function (e) {
        var _this = this;
        if (!e.elements.length) {
            if (this.currentSuggestionDetails) {
                this.currentSuggestionDetails.cancel();
                this.currentSuggestionDetails = null;
                this.focusedItem = null;
            }
            this._ariaAlert(null);
            // TODO@Alex: Chromium bug
            // this.editor.setAriaActiveDescendant(null);
            return;
        }
        var item = e.elements[0];
        this._ariaAlert(this._getSuggestionAriaAlertLabel(item));
        // TODO@Alex: Chromium bug
        // // TODO@Alex: the list is not done rendering...
        // setTimeout(() => {
        // 	this.editor.setAriaActiveDescendant(this.list.getElementId(e.indexes[0]));
        // }, 100);
        if (item === this.focusedItem) {
            return;
        }
        if (this.currentSuggestionDetails) {
            this.currentSuggestionDetails.cancel();
            this.currentSuggestionDetails = null;
        }
        var index = e.indexes[0];
        this.suggestionSupportsAutoAccept.set(!item.suggestion.noAutoAccept);
        this.focusedItem = item;
        this.updateWidgetHeight();
        this.list.reveal(index);
        this.currentSuggestionDetails = item.resolve()
            .then(function () {
            _this.list.setFocus(index);
            _this.updateWidgetHeight();
            _this.list.reveal(index);
            _this._ariaAlert(_this._getSuggestionAriaAlertLabel(item));
        })
            .then(null, function (err) { return !errors_1.isPromiseCanceledError(err) && errors_1.onUnexpectedError(err); })
            .then(function () { return _this.currentSuggestionDetails = null; });
    };
    SuggestWidget.prototype.setState = function (state) {
        if (!this.element) {
            return;
        }
        var stateChanged = this.state !== state;
        this.state = state;
        dom_1.toggleClass(this.element, 'frozen', state === 4 /* Frozen */);
        switch (state) {
            case 0 /* Hidden */:
                dom_1.hide(this.messageElement, this.details.element);
                dom_1.show(this.listElement);
                this.hide();
                if (stateChanged) {
                    this.list.splice(0, this.list.length);
                }
                break;
            case 1 /* Loading */:
                this.messageElement.textContent = SuggestWidget.LOADING_MESSAGE;
                dom_1.hide(this.listElement, this.details.element);
                dom_1.show(this.messageElement);
                this.show();
                break;
            case 2 /* Empty */:
                this.messageElement.textContent = SuggestWidget.NO_SUGGESTIONS_MESSAGE;
                dom_1.hide(this.listElement, this.details.element);
                dom_1.show(this.messageElement);
                this.show();
                break;
            case 3 /* Open */:
                dom_1.hide(this.messageElement, this.details.element);
                dom_1.show(this.listElement);
                this.show();
                break;
            case 4 /* Frozen */:
                dom_1.hide(this.messageElement, this.details.element);
                dom_1.show(this.listElement);
                this.show();
                break;
            case 5 /* Details */:
                dom_1.hide(this.messageElement, this.listElement);
                dom_1.show(this.details.element);
                this.show();
                this._ariaAlert(this.details.getAriaLabel());
                break;
        }
        if (stateChanged) {
            this.editor.layoutContentWidget(this);
        }
    };
    Object.defineProperty(SuggestWidget.prototype, "onDidSelect", {
        get: function () {
            return this.onDidSelectEmitter.event;
        },
        enumerable: true,
        configurable: true
    });
    SuggestWidget.prototype.showTriggered = function (auto) {
        var _this = this;
        if (this.state !== 0 /* Hidden */) {
            return;
        }
        this.isAuto = !!auto;
        if (!this.isAuto) {
            this.loadingTimeout = setTimeout(function () {
                _this.loadingTimeout = null;
                _this.setState(1 /* Loading */);
            }, 50);
        }
    };
    SuggestWidget.prototype.showSuggestions = function (completionModel, isFrozen, isAuto) {
        if (this.loadingTimeout) {
            clearTimeout(this.loadingTimeout);
            this.loadingTimeout = null;
        }
        this.completionModel = completionModel;
        if (isFrozen && this.state !== 2 /* Empty */) {
            this.setState(4 /* Frozen */);
            return;
        }
        var visibleCount = this.completionModel.items.length;
        var isEmpty = visibleCount === 0;
        this.suggestWidgetMultipleSuggestions.set(visibleCount > 1);
        if (isEmpty) {
            if (isAuto) {
                this.setState(0 /* Hidden */);
            }
            else {
                this.setState(2 /* Empty */);
            }
            this.completionModel = null;
        }
        else {
            var stats = this.completionModel.stats;
            stats['wasAutomaticallyTriggered'] = !!isAuto;
            this.telemetryService.publicLog('suggestWidget', stats);
            (_a = this.list).splice.apply(_a, [0, this.list.length].concat(this.completionModel.items));
            this.list.setFocus(this.completionModel.topScoreIdx);
            this.list.reveal(this.completionModel.topScoreIdx, 0);
            this.setState(3 /* Open */);
        }
        var _a;
    };
    SuggestWidget.prototype.selectNextPage = function () {
        switch (this.state) {
            case 0 /* Hidden */:
                return false;
            case 5 /* Details */:
                this.details.pageDown();
                return true;
            case 1 /* Loading */:
                return !this.isAuto;
            default:
                this.list.focusNextPage();
                return true;
        }
    };
    SuggestWidget.prototype.selectNext = function () {
        switch (this.state) {
            case 0 /* Hidden */:
                return false;
            case 5 /* Details */:
                this.details.scrollDown();
                return true;
            case 1 /* Loading */:
                return !this.isAuto;
            default:
                this.list.focusNext(1, true);
                return true;
        }
    };
    SuggestWidget.prototype.selectPreviousPage = function () {
        switch (this.state) {
            case 0 /* Hidden */:
                return false;
            case 5 /* Details */:
                this.details.pageUp();
                return true;
            case 1 /* Loading */:
                return !this.isAuto;
            default:
                this.list.focusPreviousPage();
                return true;
        }
    };
    SuggestWidget.prototype.selectPrevious = function () {
        switch (this.state) {
            case 0 /* Hidden */:
                return false;
            case 5 /* Details */:
                this.details.scrollUp();
                return true;
            case 1 /* Loading */:
                return !this.isAuto;
            default:
                this.list.focusPrevious(1, true);
                return false;
        }
    };
    SuggestWidget.prototype.getFocusedItem = function () {
        if (this.state !== 0 /* Hidden */
            && this.state !== 2 /* Empty */
            && this.state !== 1 /* Loading */) {
            return this.list.getFocusedElements()[0];
        }
    };
    SuggestWidget.prototype.toggleDetails = function () {
        if (this.state === 5 /* Details */) {
            this.setState(3 /* Open */);
            this.editor.focus();
            return;
        }
        if (this.state !== 3 /* Open */) {
            return;
        }
        var item = this.list.getFocusedElements()[0];
        if (!item || !item.suggestion.documentation) {
            return;
        }
        this.setState(5 /* Details */);
        this.editor.focus();
    };
    SuggestWidget.prototype.show = function () {
        var _this = this;
        this.updateWidgetHeight();
        this.suggestWidgetVisible.set(true);
        this.renderDetails();
        this.showTimeout = winjs_base_1.TPromise.timeout(100).then(function () {
            dom_1.addClass(_this.element, 'visible');
        });
    };
    SuggestWidget.prototype.hide = function () {
        this.suggestWidgetVisible.reset();
        dom_1.removeClass(this.element, 'visible');
    };
    SuggestWidget.prototype.hideWidget = function () {
        clearTimeout(this.loadingTimeout);
        this.setState(0 /* Hidden */);
    };
    SuggestWidget.prototype.hideDetailsOrHideWidget = function () {
        if (this.state === 5 /* Details */) {
            this.toggleDetails();
        }
        else {
            this.hideWidget();
        }
    };
    SuggestWidget.prototype.getPosition = function () {
        if (this.state === 0 /* Hidden */) {
            return null;
        }
        return {
            position: this.editor.getPosition(),
            preference: [editorBrowser_1.ContentWidgetPositionPreference.BELOW, editorBrowser_1.ContentWidgetPositionPreference.ABOVE]
        };
    };
    SuggestWidget.prototype.getDomNode = function () {
        return this.element;
    };
    SuggestWidget.prototype.getId = function () {
        return SuggestWidget.ID;
    };
    SuggestWidget.prototype.updateWidgetHeight = function () {
        var height = 0;
        if (this.state === 2 /* Empty */ || this.state === 1 /* Loading */) {
            height = this.unfocusedHeight;
        }
        else if (this.state === 5 /* Details */) {
            height = 12 * this.unfocusedHeight;
        }
        else {
            var focus_1 = this.list.getFocusedElements()[0];
            var focusHeight = focus_1 ? this.getHeight(focus_1) : this.unfocusedHeight;
            height = focusHeight;
            var suggestionCount = (this.list.contentHeight - focusHeight) / this.unfocusedHeight;
            height += Math.min(suggestionCount, 11) * this.unfocusedHeight;
        }
        this.element.style.lineHeight = this.unfocusedHeight + "px";
        this.element.style.height = height + "px";
        this.list.layout(height);
        this.editor.layoutContentWidget(this);
        return height;
    };
    SuggestWidget.prototype.renderDetails = function () {
        if (this.state !== 5 /* Details */) {
            this.details.render(null);
        }
        else {
            this.details.render(this.list.getFocusedElements()[0]);
        }
    };
    Object.defineProperty(SuggestWidget.prototype, "focusHeight", {
        // Heights
        get: function () {
            return this.unfocusedHeight * 2;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SuggestWidget.prototype, "unfocusedHeight", {
        get: function () {
            var fontInfo = this.editor.getConfiguration().fontInfo;
            return fontInfo.lineHeight;
        },
        enumerable: true,
        configurable: true
    });
    // IDelegate
    SuggestWidget.prototype.getHeight = function (element) {
        var focus = this.list.getFocusedElements()[0];
        if (element.suggestion.documentation && element === focus) {
            return this.focusHeight;
        }
        return this.unfocusedHeight;
    };
    SuggestWidget.prototype.getTemplateId = function (element) {
        return 'suggestion';
    };
    SuggestWidget.prototype.dispose = function () {
        this.state = null;
        this.suggestionSupportsAutoAccept = null;
        this.currentSuggestionDetails = null;
        this.focusedItem = null;
        this.element = null;
        this.messageElement = null;
        this.listElement = null;
        this.details.dispose();
        this.details = null;
        this.list.dispose();
        this.list = null;
        this.toDispose = lifecycle_1.dispose(this.toDispose);
        if (this.loadingTimeout) {
            clearTimeout(this.loadingTimeout);
            this.loadingTimeout = null;
        }
        if (this.editorBlurTimeout) {
            this.editorBlurTimeout.cancel();
            this.editorBlurTimeout = null;
        }
        if (this.showTimeout) {
            this.showTimeout.cancel();
            this.showTimeout = null;
        }
    };
    SuggestWidget.ID = 'editor.widget.suggestWidget';
    SuggestWidget.LOADING_MESSAGE = nls.localize('suggestWidget.loading', "Loading...");
    SuggestWidget.NO_SUGGESTIONS_MESSAGE = nls.localize('suggestWidget.noSuggestions', "No suggestions.");
    SuggestWidget = __decorate([
        __param(1, telemetry_1.ITelemetryService),
        __param(2, contextkey_1.IContextKeyService),
        __param(3, instantiation_1.IInstantiationService)
    ], SuggestWidget);
    return SuggestWidget;
}());
exports.SuggestWidget = SuggestWidget;
