/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var errors_1 = require('vs/base/common/errors');
var uri_1 = require('vs/base/common/uri');
var winjs_base_1 = require('vs/base/common/winjs.base');
var range_1 = require('vs/editor/common/core/range');
var editorCommonExtensions_1 = require('vs/editor/common/editorCommonExtensions');
var modes_1 = require('vs/editor/common/modes');
var modelService_1 = require('vs/editor/common/services/modelService');
var async_1 = require('vs/base/common/async');
function getCodeLensData(model) {
    var symbols = [];
    var provider = modes_1.CodeLensProviderRegistry.ordered(model);
    var promises = provider.map(function (provider) { return async_1.asWinJsPromise(function (token) { return provider.provideCodeLenses(model, token); }).then(function (result) {
        if (Array.isArray(result)) {
            for (var _i = 0, result_1 = result; _i < result_1.length; _i++) {
                var symbol = result_1[_i];
                symbols.push({ symbol: symbol, provider: provider });
            }
        }
    }, errors_1.onUnexpectedError); });
    return winjs_base_1.TPromise.join(promises).then(function () {
        return symbols.sort(function (a, b) {
            // sort by range and provider rank
            var ret = range_1.Range.compareRangesUsingStarts(a.symbol.range, b.symbol.range);
            if (ret === 0) {
                ret = provider.indexOf(a.provider) - provider.indexOf(b.provider);
            }
            return ret;
        });
    });
}
exports.getCodeLensData = getCodeLensData;
editorCommonExtensions_1.CommonEditorRegistry.registerLanguageCommand('_executeCodeLensProvider', function (accessor, args) {
    var resource = args.resource;
    if (!(resource instanceof uri_1.default)) {
        throw errors_1.illegalArgument();
    }
    var model = accessor.get(modelService_1.IModelService).getModel(resource);
    if (!model) {
        throw errors_1.illegalArgument();
    }
    return getCodeLensData(model);
});
