/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var async_1 = require('vs/base/common/async');
var lifecycle_1 = require('vs/base/common/lifecycle');
var replace_1 = require('vs/platform/search/common/replace');
var replaceCommand_1 = require('vs/editor/common/commands/replaceCommand');
var position_1 = require('vs/editor/common/core/position');
var range_1 = require('vs/editor/common/core/range');
var editorCommon = require('vs/editor/common/editorCommon');
var textModel_1 = require('vs/editor/common/model/textModel');
var findDecorations_1 = require('./findDecorations');
var replaceAllCommand_1 = require('./replaceAllCommand');
var selection_1 = require('vs/editor/common/core/selection');
exports.ToggleCaseSensitiveKeybinding = {
    primary: 8192 /* Alt */ | 33 /* KEY_C */,
    mac: { primary: 32768 /* CtrlCmd */ | 8192 /* Alt */ | 33 /* KEY_C */ }
};
exports.ToggleWholeWordKeybinding = {
    primary: 8192 /* Alt */ | 53 /* KEY_W */,
    mac: { primary: 32768 /* CtrlCmd */ | 8192 /* Alt */ | 53 /* KEY_W */ }
};
exports.ToggleRegexKeybinding = {
    primary: 8192 /* Alt */ | 48 /* KEY_R */,
    mac: { primary: 32768 /* CtrlCmd */ | 8192 /* Alt */ | 48 /* KEY_R */ }
};
exports.ShowPreviousFindTermKeybinding = {
    primary: 8192 /* Alt */ | 16 /* UpArrow */
};
exports.ShowNextFindTermKeybinding = {
    primary: 8192 /* Alt */ | 18 /* DownArrow */
};
exports.FIND_IDS = {
    StartFindAction: 'actions.find',
    NextMatchFindAction: 'editor.action.nextMatchFindAction',
    PreviousMatchFindAction: 'editor.action.previousMatchFindAction',
    NextSelectionMatchFindAction: 'editor.action.nextSelectionMatchFindAction',
    PreviousSelectionMatchFindAction: 'editor.action.previousSelectionMatchFindAction',
    AddSelectionToNextFindMatchAction: 'editor.action.addSelectionToNextFindMatch',
    AddSelectionToPreviousFindMatchAction: 'editor.action.addSelectionToPreviousFindMatch',
    MoveSelectionToNextFindMatchAction: 'editor.action.moveSelectionToNextFindMatch',
    MoveSelectionToPreviousFindMatchAction: 'editor.action.moveSelectionToPreviousFindMatch',
    StartFindReplaceAction: 'editor.action.startFindReplaceAction',
    CloseFindWidgetCommand: 'closeFindWidget',
    ToggleCaseSensitiveCommand: 'toggleFindCaseSensitive',
    ToggleWholeWordCommand: 'toggleFindWholeWord',
    ToggleRegexCommand: 'toggleFindRegex',
    ReplaceOneAction: 'editor.action.replaceOne',
    ReplaceAllAction: 'editor.action.replaceAll',
    SelectAllMatchesAction: 'editor.action.selectAllMatches',
    ShowPreviousFindTermAction: 'find.history.showPrevious',
    ShowNextFindTermAction: 'find.history.showNext'
};
exports.MATCHES_LIMIT = 999;
var FindModelBoundToEditorModel = (function () {
    function FindModelBoundToEditorModel(editor, state) {
        var _this = this;
        this._editor = editor;
        this._state = state;
        this._toDispose = [];
        this._isDisposed = false;
        this._decorations = new findDecorations_1.FindDecorations(editor);
        this._toDispose.push(this._decorations);
        this._updateDecorationsScheduler = new async_1.RunOnceScheduler(function () { return _this.research(false); }, 100);
        this._toDispose.push(this._updateDecorationsScheduler);
        this._toDispose.push(this._editor.onDidChangeCursorPosition(function (e) {
            if (e.reason === editorCommon.CursorChangeReason.Explicit
                || e.reason === editorCommon.CursorChangeReason.Undo
                || e.reason === editorCommon.CursorChangeReason.Redo) {
                _this._decorations.setStartPosition(_this._editor.getPosition());
            }
        }));
        this._ignoreModelContentChanged = false;
        this._toDispose.push(this._editor.onDidChangeModelRawContent(function (e) {
            if (_this._ignoreModelContentChanged) {
                return;
            }
            if (e.changeType === editorCommon.EventType.ModelRawContentChangedFlush) {
                // a model.setValue() was called
                _this._decorations.reset();
            }
            _this._decorations.setStartPosition(_this._editor.getPosition());
            _this._updateDecorationsScheduler.schedule();
        }));
        this._toDispose.push(this._state.addChangeListener(function (e) { return _this._onStateChanged(e); }));
        this.research(false, this._state.searchScope);
    }
    FindModelBoundToEditorModel.prototype.dispose = function () {
        this._isDisposed = true;
        this._toDispose = lifecycle_1.dispose(this._toDispose);
    };
    FindModelBoundToEditorModel.prototype._onStateChanged = function (e) {
        if (this._isDisposed) {
            // The find model is disposed during a find state changed event
            return;
        }
        if (e.searchString || e.isReplaceRevealed || e.isRegex || e.wholeWord || e.matchCase || e.searchScope) {
            if (e.searchScope) {
                this.research(e.moveCursor, this._state.searchScope);
            }
            else {
                this.research(e.moveCursor);
            }
        }
    };
    FindModelBoundToEditorModel._getSearchRange = function (model, searchOnlyEditableRange, findScope) {
        var searchRange;
        if (searchOnlyEditableRange) {
            searchRange = model.getEditableRange();
        }
        else {
            searchRange = model.getFullModelRange();
        }
        // If we have set now or before a find scope, use it for computing the search range
        if (findScope) {
            searchRange = searchRange.intersectRanges(findScope);
        }
        return searchRange;
    };
    FindModelBoundToEditorModel.prototype.research = function (moveCursor, newFindScope) {
        var findScope = null;
        if (typeof newFindScope !== 'undefined') {
            findScope = newFindScope;
        }
        else {
            findScope = this._decorations.getFindScope();
        }
        if (findScope !== null) {
            findScope = new range_1.Range(findScope.startLineNumber, 1, findScope.endLineNumber, this._editor.getModel().getLineMaxColumn(findScope.endLineNumber));
        }
        var findMatches = this._findMatches(findScope, exports.MATCHES_LIMIT);
        this._decorations.set(findMatches, findScope);
        this._state.changeMatchInfo(this._decorations.getCurrentMatchesPosition(this._editor.getSelection()), this._decorations.getCount(), undefined);
        if (moveCursor) {
            this._moveToNextMatch(this._decorations.getStartPosition());
        }
    };
    FindModelBoundToEditorModel.prototype._hasMatches = function () {
        return (this._state.matchesCount > 0);
    };
    FindModelBoundToEditorModel.prototype._cannotFind = function () {
        if (!this._hasMatches()) {
            var findScope = this._decorations.getFindScope();
            if (findScope) {
                // Reveal the selection so user is reminded that 'selection find' is on.
                this._editor.revealRangeInCenterIfOutsideViewport(findScope);
            }
            return true;
        }
        return false;
    };
    FindModelBoundToEditorModel.prototype._setCurrentFindMatch = function (match) {
        var matchesPosition = this._decorations.setCurrentFindMatch(match);
        this._state.changeMatchInfo(matchesPosition, this._decorations.getCount(), match);
        this._editor.setSelection(match);
        this._editor.revealRangeInCenterIfOutsideViewport(match);
    };
    FindModelBoundToEditorModel.prototype._moveToPrevMatch = function (before, isRecursed) {
        if (isRecursed === void 0) { isRecursed = false; }
        if (this._cannotFind()) {
            return;
        }
        var findScope = this._decorations.getFindScope();
        var searchRange = FindModelBoundToEditorModel._getSearchRange(this._editor.getModel(), this._state.isReplaceRevealed, findScope);
        // ...(----)...|...
        if (searchRange.getEndPosition().isBefore(before)) {
            before = searchRange.getEndPosition();
        }
        // ...|...(----)...
        if (before.isBefore(searchRange.getStartPosition())) {
            before = searchRange.getEndPosition();
        }
        var lineNumber = before.lineNumber, column = before.column;
        var model = this._editor.getModel();
        var position = new position_1.Position(lineNumber, column);
        var prevMatch = model.findPreviousMatch(this._state.searchString, position, this._state.isRegex, this._state.matchCase, this._state.wholeWord);
        if (prevMatch && prevMatch.isEmpty() && prevMatch.getStartPosition().equals(position)) {
            // Looks like we're stuck at this position, unacceptable!
            var isUsingLineStops = this._state.isRegex && (this._state.searchString.indexOf('^') >= 0
                || this._state.searchString.indexOf('$') >= 0);
            if (isUsingLineStops || column === 1) {
                if (lineNumber === 1) {
                    lineNumber = model.getLineCount();
                }
                else {
                    lineNumber--;
                }
                column = model.getLineMaxColumn(lineNumber);
            }
            else {
                column--;
            }
            position = new position_1.Position(lineNumber, column);
            prevMatch = model.findPreviousMatch(this._state.searchString, position, this._state.isRegex, this._state.matchCase, this._state.wholeWord);
        }
        if (!prevMatch) {
            // there is precisely one match and selection is on top of it
            return;
        }
        if (!isRecursed && !searchRange.containsRange(prevMatch)) {
            return this._moveToPrevMatch(prevMatch.getStartPosition(), true);
        }
        this._setCurrentFindMatch(prevMatch);
    };
    FindModelBoundToEditorModel.prototype.moveToPrevMatch = function () {
        this._moveToPrevMatch(this._editor.getSelection().getStartPosition());
    };
    FindModelBoundToEditorModel.prototype._moveToNextMatch = function (arg) {
        // @sandeep TS(2.0.2) - Adding cast to keep semantic. Necessary since the test are for interface but the code expects
        // implemations.
        var nextMatch = range_1.Range.isIRange(arg) ? arg : position_1.Position.isIPosition(arg) ? this._getNextMatch(arg) : null;
        if (nextMatch) {
            this._setCurrentFindMatch(nextMatch);
        }
    };
    FindModelBoundToEditorModel.prototype._getNextMatch = function (after, isRecursed) {
        if (isRecursed === void 0) { isRecursed = false; }
        if (this._cannotFind()) {
            return null;
        }
        var findScope = this._decorations.getFindScope();
        var searchRange = FindModelBoundToEditorModel._getSearchRange(this._editor.getModel(), this._state.isReplaceRevealed, findScope);
        // ...(----)...|...
        if (searchRange.getEndPosition().isBefore(after)) {
            after = searchRange.getStartPosition();
        }
        // ...|...(----)...
        if (after.isBefore(searchRange.getStartPosition())) {
            after = searchRange.getStartPosition();
        }
        var lineNumber = after.lineNumber, column = after.column;
        var model = this._editor.getModel();
        var position = new position_1.Position(lineNumber, column);
        var nextMatch = model.findNextMatch(this._state.searchString, position, this._state.isRegex, this._state.matchCase, this._state.wholeWord);
        if (nextMatch && nextMatch.isEmpty() && nextMatch.getStartPosition().equals(position)) {
            // Looks like we're stuck at this position, unacceptable!
            var isUsingLineStops = this._state.isRegex && (this._state.searchString.indexOf('^') >= 0
                || this._state.searchString.indexOf('$') >= 0);
            if (isUsingLineStops || column === model.getLineMaxColumn(lineNumber)) {
                if (lineNumber === model.getLineCount()) {
                    lineNumber = 1;
                }
                else {
                    lineNumber++;
                }
                column = 1;
            }
            else {
                column++;
            }
            position = new position_1.Position(lineNumber, column);
            nextMatch = model.findNextMatch(this._state.searchString, position, this._state.isRegex, this._state.matchCase, this._state.wholeWord);
        }
        if (!nextMatch) {
            // there is precisely one match and selection is on top of it
            return;
        }
        if (!isRecursed && !searchRange.containsRange(nextMatch)) {
            return this._getNextMatch(nextMatch.getEndPosition(), true);
        }
        return nextMatch;
    };
    FindModelBoundToEditorModel.prototype.moveToNextMatch = function () {
        this._moveToNextMatch(this._editor.getSelection().getEndPosition());
    };
    FindModelBoundToEditorModel.prototype.getReplaceString = function (matchRange) {
        if (this._state.isRegex) {
            var regExp = textModel_1.TextModel.parseSearchRequest(this._state.searchString, this._state.isRegex, this._state.matchCase, this._state.wholeWord);
            var replacePattern = new replace_1.ReplacePattern(this._state.replaceString, true, regExp);
            var model = this._editor.getModel();
            var matchedString = model.getValueInRange(matchRange);
            var replacedString = replacePattern.getReplaceString(matchedString);
            // If matched string is not matching then regex pattern has a lookahead expression
            if (replacedString === null) {
                replacedString = replacePattern.getReplaceString(this._getTextToMatch(matchRange, regExp));
            }
            return replacedString;
        }
        return this._state.replaceString;
    };
    FindModelBoundToEditorModel.prototype._getTextToMatch = function (matchRange, regExp) {
        var model = this._editor.getModel();
        // If regex is multiline, then return the text from starting of the matching range till end of the model.
        if (regExp.multiline) {
            var lineCount = model.getLineCount();
            return model.getValueInRange(new range_1.Range(matchRange.startLineNumber, matchRange.startColumn, lineCount, model.getLineMaxColumn(lineCount)));
        }
        // If regex is not multiline, then return the text from starting of the matching range till end of the line.
        return model.getValueInRange(new range_1.Range(matchRange.startLineNumber, matchRange.startColumn, matchRange.endLineNumber, model.getLineMaxColumn(matchRange.endLineNumber)));
    };
    FindModelBoundToEditorModel.prototype.replace = function () {
        if (!this._hasMatches()) {
            return;
        }
        var selection = this._editor.getSelection();
        var nextMatch = this._getNextMatch(selection.getStartPosition());
        if (nextMatch) {
            if (selection.equalsRange(nextMatch)) {
                // selection sits on a find match => replace it!
                var replaceString = this.getReplaceString(selection);
                var command = new replaceCommand_1.ReplaceCommand(selection, replaceString);
                this._executeEditorCommand('replace', command);
                this._decorations.setStartPosition(new position_1.Position(selection.startLineNumber, selection.startColumn + replaceString.length));
                this.research(true);
            }
            else {
                this._decorations.setStartPosition(this._editor.getPosition());
                this._moveToNextMatch(nextMatch);
            }
        }
    };
    FindModelBoundToEditorModel.prototype._findMatches = function (findScope, limitResultCount) {
        var searchRange = FindModelBoundToEditorModel._getSearchRange(this._editor.getModel(), this._state.isReplaceRevealed, findScope);
        return this._editor.getModel().findMatches(this._state.searchString, searchRange, this._state.isRegex, this._state.matchCase, this._state.wholeWord, limitResultCount);
    };
    FindModelBoundToEditorModel.prototype.replaceAll = function () {
        if (!this._hasMatches()) {
            return;
        }
        var findScope = this._decorations.getFindScope();
        // Get all the ranges (even more than the highlighted ones)
        var ranges = this._findMatches(findScope, Number.MAX_VALUE);
        var replaceStrings = [];
        for (var i = 0, len = ranges.length; i < len; i++) {
            replaceStrings.push(this.getReplaceString(ranges[i]));
        }
        var command = new replaceAllCommand_1.ReplaceAllCommand(this._editor.getSelection(), ranges, replaceStrings);
        this._executeEditorCommand('replaceAll', command);
        this.research(false);
    };
    FindModelBoundToEditorModel.prototype.selectAllMatches = function () {
        if (!this._hasMatches()) {
            return;
        }
        var findScope = this._decorations.getFindScope();
        // Get all the ranges (even more than the highlighted ones)
        var ranges = this._findMatches(findScope, Number.MAX_VALUE);
        this._editor.setSelections(ranges.map(function (r) { return new selection_1.Selection(r.startLineNumber, r.startColumn, r.endLineNumber, r.endColumn); }));
    };
    FindModelBoundToEditorModel.prototype._executeEditorCommand = function (source, command) {
        try {
            this._ignoreModelContentChanged = true;
            this._editor.executeCommand(source, command);
        }
        finally {
            this._ignoreModelContentChanged = false;
        }
    };
    return FindModelBoundToEditorModel;
}());
exports.FindModelBoundToEditorModel = FindModelBoundToEditorModel;
