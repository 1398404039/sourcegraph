/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
require('./zoneWidget.css');
var lifecycle_1 = require('vs/base/common/lifecycle');
var objects = require('vs/base/common/objects');
var dom = require('vs/base/browser/dom');
var sash_1 = require('vs/base/browser/ui/sash/sash');
var range_1 = require('vs/editor/common/core/range');
var defaultOptions = {
    showArrow: true,
    showFrame: true,
    frameColor: '',
    className: ''
};
var WIDGET_ID = 'vs.editor.contrib.zoneWidget';
var ViewZoneDelegate = (function () {
    function ViewZoneDelegate(domNode, afterLineNumber, afterColumn, heightInLines, onDomNodeTop, onComputedHeight) {
        this.domNode = domNode;
        this.afterLineNumber = afterLineNumber;
        this.afterColumn = afterColumn;
        this.heightInLines = heightInLines;
        this._onDomNodeTop = onDomNodeTop;
        this._onComputedHeight = onComputedHeight;
    }
    ViewZoneDelegate.prototype.onDomNodeTop = function (top) {
        this._onDomNodeTop(top);
    };
    ViewZoneDelegate.prototype.onComputedHeight = function (height) {
        this._onComputedHeight(height);
    };
    return ViewZoneDelegate;
}());
exports.ViewZoneDelegate = ViewZoneDelegate;
var OverlayWidgetDelegate = (function () {
    function OverlayWidgetDelegate(id, domNode) {
        this._id = id;
        this._domNode = domNode;
    }
    OverlayWidgetDelegate.prototype.getId = function () {
        return this._id;
    };
    OverlayWidgetDelegate.prototype.getDomNode = function () {
        return this._domNode;
    };
    OverlayWidgetDelegate.prototype.getPosition = function () {
        return null;
    };
    return OverlayWidgetDelegate;
}());
exports.OverlayWidgetDelegate = OverlayWidgetDelegate;
var ZoneWidget = (function () {
    function ZoneWidget(editor, options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        this._overlayWidget = null;
        this._positionMarkerId = [];
        this._viewZone = null;
        this._disposables = new lifecycle_1.Disposables();
        this.container = null;
        this.editor = editor;
        this.options = objects.mixin(objects.clone(defaultOptions), options);
        this.domNode = document.createElement('div');
        if (!this.options.isAccessible) {
            this.domNode.setAttribute('aria-hidden', 'true');
            this.domNode.setAttribute('role', 'presentation');
        }
        this._disposables.add(this.editor.onDidLayoutChange(function (info) {
            var width = _this._getWidth(info);
            _this.domNode.style.width = width + 'px';
            _this._onWidth(width);
        }));
    }
    ZoneWidget.prototype.dispose = function () {
        var _this = this;
        this._disposables.dispose();
        if (this._overlayWidget) {
            this.editor.removeOverlayWidget(this._overlayWidget);
            this._overlayWidget = null;
        }
        if (this._viewZone) {
            this.editor.changeViewZones(function (accessor) {
                accessor.removeZone(_this._viewZone.id);
                _this._viewZone = null;
            });
        }
        this.editor.deltaDecorations(this._positionMarkerId, []);
    };
    ZoneWidget.prototype.create = function () {
        dom.addClass(this.domNode, 'zone-widget');
        dom.addClass(this.domNode, this.options.className);
        this.container = document.createElement('div');
        dom.addClass(this.container, 'zone-widget-container');
        this.domNode.appendChild(this.container);
        this._fillContainer(this.container);
        this._initSash();
    };
    ZoneWidget.prototype._getWidth = function (info) {
        if (info === void 0) { info = this.editor.getLayoutInfo(); }
        return info.width - info.verticalScrollbarWidth;
    };
    ZoneWidget.prototype._onViewZoneTop = function (top) {
        this.domNode.style.top = top + 'px';
    };
    ZoneWidget.prototype._onViewZoneHeight = function (height) {
        this.domNode.style.height = height + "px";
        var containerHeight = height - this._decoratingElementsHeight();
        this.container.style.height = containerHeight + "px";
        this._doLayout(containerHeight, this._getWidth());
        this._resizeSash.layout();
    };
    Object.defineProperty(ZoneWidget.prototype, "position", {
        get: function () {
            var id = this._positionMarkerId[0];
            if (id) {
                return this.editor.getModel().getDecorationRange(id).getStartPosition();
            }
        },
        enumerable: true,
        configurable: true
    });
    ZoneWidget.prototype.show = function (rangeOrPos, heightInLines) {
        var range = range_1.Range.isIRange(rangeOrPos)
            ? rangeOrPos
            : new range_1.Range(rangeOrPos.lineNumber, rangeOrPos.column, rangeOrPos.lineNumber, rangeOrPos.column);
        this._showImpl(range, heightInLines);
        this._positionMarkerId = this.editor.deltaDecorations(this._positionMarkerId, [{ range: range, options: {} }]);
    };
    ZoneWidget.prototype._decoratingElementsHeight = function () {
        var lineHeight = this.editor.getConfiguration().lineHeight;
        var result = 0;
        if (this.options.showArrow) {
            var arrowHeight = Math.round(lineHeight / 3);
            result += 2 * arrowHeight;
        }
        if (this.options.showFrame) {
            var frameThickness = Math.round(lineHeight / 9);
            result += 2 * frameThickness;
        }
        return result;
    };
    ZoneWidget.prototype._showImpl = function (where, heightInLines) {
        var _this = this;
        var position = {
            lineNumber: where.startLineNumber,
            column: where.startColumn
        };
        var width = this._getWidth();
        this.domNode.style.width = width + "px";
        // Reveal position, to get the line rendered, such that the arrow can be positioned properly
        this.editor.revealPosition(position);
        // Render the widget as zone (rendering) and widget (lifecycle)
        var viewZoneDomNode = document.createElement('div'), arrow = document.createElement('div'), lineHeight = this.editor.getConfiguration().lineHeight, arrowHeight = 0, frameThickness = 0;
        // Render the arrow one 1/3 of an editor line height
        if (this.options.showArrow) {
            arrowHeight = Math.round(lineHeight / 3);
            arrow = document.createElement('div');
            arrow.className = 'zone-widget-arrow below';
            arrow.style.top = -arrowHeight + 'px';
            arrow.style.borderWidth = arrowHeight + 'px';
            arrow.style.left = this.editor.getOffsetForColumn(position.lineNumber, position.column) + 'px';
            arrow.style.borderBottomColor = this.options.frameColor;
            viewZoneDomNode.appendChild(arrow);
        }
        // Render the frame as 1/9 of an editor line height
        if (this.options.showFrame) {
            frameThickness = Math.round(lineHeight / 9);
        }
        // insert zone widget
        this.editor.changeViewZones(function (accessor) {
            if (_this._viewZone) {
                accessor.removeZone(_this._viewZone.id);
            }
            if (_this._overlayWidget) {
                _this.editor.removeOverlayWidget(_this._overlayWidget);
                _this._overlayWidget = null;
            }
            _this.domNode.style.top = '-1000px';
            _this._viewZone = new ViewZoneDelegate(viewZoneDomNode, position.lineNumber, position.column, heightInLines, function (top) { return _this._onViewZoneTop(top); }, function (height) { return _this._onViewZoneHeight(height); });
            _this._viewZone.id = accessor.addZone(_this._viewZone);
            _this._overlayWidget = new OverlayWidgetDelegate(WIDGET_ID + _this._viewZone.id, _this.domNode);
            _this.editor.addOverlayWidget(_this._overlayWidget);
        });
        if (this.options.showFrame) {
            var width_1 = this.options.frameWidth ? this.options.frameWidth : frameThickness;
            this.container.style.borderTopColor = this.options.frameColor;
            this.container.style.borderBottomColor = this.options.frameColor;
            this.container.style.borderTopWidth = width_1 + 'px';
            this.container.style.borderBottomWidth = width_1 + 'px';
        }
        var containerHeight = heightInLines * lineHeight - this._decoratingElementsHeight();
        this.container.style.top = arrowHeight + 'px';
        this.container.style.height = containerHeight + 'px';
        this.container.style.overflow = 'hidden';
        this._doLayout(containerHeight, width);
        this.editor.setSelection(where);
        // Reveal the line above or below the zone widget, to get the zone widget in the viewport
        var revealLineNumber = Math.min(this.editor.getModel().getLineCount(), Math.max(1, where.endLineNumber + 1));
        this.editor.revealLine(revealLineNumber);
    };
    ZoneWidget.prototype._onWidth = function (widthInPixel) {
        // implement in subclass
    };
    ZoneWidget.prototype._doLayout = function (heightInPixel, widthInPixel) {
        // implement in subclass
    };
    ZoneWidget.prototype._relayout = function (newHeightInLines) {
        var _this = this;
        if (this._viewZone.heightInLines !== newHeightInLines) {
            this.editor.changeViewZones(function (accessor) {
                _this._viewZone.heightInLines = newHeightInLines;
                accessor.layoutZone(_this._viewZone.id);
            });
        }
    };
    // --- sash
    ZoneWidget.prototype._initSash = function () {
        var _this = this;
        this._resizeSash = new sash_1.Sash(this.domNode, this, { orientation: sash_1.Orientation.HORIZONTAL });
        if (!this.options.isResizeable) {
            this._resizeSash.hide();
            this._resizeSash.disable();
        }
        var data;
        this._disposables.add(this._resizeSash.addListener2('start', function (e) {
            if (_this._viewZone) {
                data = {
                    startY: e.startY,
                    heightInLines: _this._viewZone.heightInLines,
                };
            }
        }));
        this._disposables.add(this._resizeSash.addListener2('end', function () {
            data = undefined;
        }));
        this._disposables.add(this._resizeSash.addListener2('change', function (evt) {
            if (data) {
                var lineDelta = (evt.currentY - data.startY) / _this.editor.getConfiguration().lineHeight;
                var roundedLineDelta = lineDelta < 0 ? Math.ceil(lineDelta) : Math.floor(lineDelta);
                var newHeightInLines = data.heightInLines + roundedLineDelta;
                if (newHeightInLines > 5 && newHeightInLines < 35) {
                    _this._relayout(newHeightInLines);
                }
            }
        }));
    };
    ZoneWidget.prototype.getHorizontalSashLeft = function () {
        return 0;
    };
    ZoneWidget.prototype.getHorizontalSashTop = function () {
        return parseInt(this.domNode.style.height) - (this._decoratingElementsHeight() / 2);
    };
    ZoneWidget.prototype.getHorizontalSashWidth = function () {
        return this.editor.getLayoutInfo().width;
    };
    return ZoneWidget;
}());
exports.ZoneWidget = ZoneWidget;
