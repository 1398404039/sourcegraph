/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var nls = require("vs/nls");
var editorCommon_1 = require("vs/editor/common/editorCommon");
var editorCommonExtensions_1 = require("vs/editor/common/editorCommonExtensions");
var ToggleWordWrapAction = (function (_super) {
    __extends(ToggleWordWrapAction, _super);
    function ToggleWordWrapAction() {
        return _super.call(this, {
            id: 'editor.action.toggleWordWrap',
            label: nls.localize('toggle.wordwrap', "View: Toggle Word Wrap"),
            alias: 'View: Toggle Word Wrap',
            precondition: null,
            kbOpts: {
                kbExpr: editorCommon_1.EditorContextKeys.TextFocus,
                primary: 8192 /* Alt */ | 56 /* KEY_Z */
            }
        }) || this;
    }
    ToggleWordWrapAction.prototype.run = function (accessor, editor) {
        var wrappingInfo = editor.getConfiguration().wrappingInfo;
        var newWrappingColumn;
        if (!wrappingInfo.isViewportWrapping) {
            newWrappingColumn = 0;
        }
        else {
            newWrappingColumn = -1;
        }
        editor.updateOptions({
            wrappingColumn: newWrappingColumn
        });
    };
    return ToggleWordWrapAction;
}(editorCommonExtensions_1.EditorAction));
ToggleWordWrapAction = __decorate([
    editorCommonExtensions_1.editorAction
], ToggleWordWrapAction);
