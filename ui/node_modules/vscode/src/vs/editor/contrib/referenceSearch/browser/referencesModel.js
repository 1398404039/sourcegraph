/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var eventEmitter_1 = require('vs/base/common/eventEmitter');
var event_1 = require('vs/base/common/event');
var paths_1 = require('vs/base/common/paths');
var strings = require('vs/base/common/strings');
var idGenerator_1 = require('vs/base/common/idGenerator');
var winjs_base_1 = require('vs/base/common/winjs.base');
var range_1 = require('vs/editor/common/core/range');
var OneReference = (function () {
    function OneReference(_parent, _range, _eventBus) {
        this._parent = _parent;
        this._range = _range;
        this._eventBus = _eventBus;
        this._id = idGenerator_1.defaultGenerator.nextId();
    }
    Object.defineProperty(OneReference.prototype, "id", {
        get: function () {
            return this._id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OneReference.prototype, "model", {
        get: function () {
            return this._parent;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OneReference.prototype, "parent", {
        get: function () {
            return this._parent;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OneReference.prototype, "uri", {
        get: function () {
            return this._parent.uri;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OneReference.prototype, "name", {
        get: function () {
            return this._parent.name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OneReference.prototype, "directory", {
        get: function () {
            return this._parent.directory;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OneReference.prototype, "range", {
        get: function () {
            return this._range;
        },
        set: function (value) {
            this._range = value;
            this._eventBus.emit('ref/changed', this);
        },
        enumerable: true,
        configurable: true
    });
    return OneReference;
}());
exports.OneReference = OneReference;
var FilePreview = (function () {
    function FilePreview(_value) {
        this._value = _value;
    }
    FilePreview.prototype.preview = function (range, n) {
        if (n === void 0) { n = 8; }
        var startLineNumber = range.startLineNumber, startColumn = range.startColumn, endColumn = range.endColumn;
        var word = this._value.getWordUntilPosition({ lineNumber: startLineNumber, column: startColumn - n });
        var beforeRange = new range_1.Range(startLineNumber, word.startColumn, startLineNumber, startColumn);
        var afterRange = new range_1.Range(startLineNumber, endColumn, startLineNumber, Number.MAX_VALUE);
        var ret = {
            before: this._value.getValueInRange(beforeRange).replace(/^\s+/, strings.empty),
            inside: this._value.getValueInRange(range),
            after: this._value.getValueInRange(afterRange).replace(/\s+$/, strings.empty)
        };
        return ret;
    };
    return FilePreview;
}());
exports.FilePreview = FilePreview;
var FileReferences = (function () {
    function FileReferences(_parent, _uri) {
        this._parent = _parent;
        this._uri = _uri;
        this._children = [];
    }
    Object.defineProperty(FileReferences.prototype, "id", {
        get: function () {
            return this._uri.toString();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FileReferences.prototype, "parent", {
        get: function () {
            return this._parent;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FileReferences.prototype, "children", {
        get: function () {
            return this._children;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FileReferences.prototype, "uri", {
        get: function () {
            return this._uri;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FileReferences.prototype, "name", {
        get: function () {
            return paths_1.basename(this.uri.fsPath);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FileReferences.prototype, "directory", {
        get: function () {
            return paths_1.dirname(this.uri.fsPath);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FileReferences.prototype, "preview", {
        get: function () {
            return this._preview;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FileReferences.prototype, "failure", {
        get: function () {
            return this._loadFailure;
        },
        enumerable: true,
        configurable: true
    });
    FileReferences.prototype.resolve = function (editorService) {
        var _this = this;
        if (this._resolved) {
            return winjs_base_1.TPromise.as(this);
        }
        return editorService.resolveEditorModel({ resource: this._uri }).then(function (model) {
            if (!model) {
                throw new Error();
            }
            _this._preview = new FilePreview(model.textEditorModel);
            _this._resolved = true;
            return _this;
        }, function (err) {
            // something wrong here
            _this._children = [];
            _this._resolved = true;
            _this._loadFailure = err;
            return _this;
        });
    };
    return FileReferences;
}());
exports.FileReferences = FileReferences;
var ReferencesModel = (function () {
    function ReferencesModel(references) {
        this._groups = [];
        this._references = [];
        this._eventBus = new eventEmitter_1.EventEmitter();
        this.onDidChangeReferenceRange = event_1.fromEventEmitter(this._eventBus, 'ref/changed');
        // grouping and sorting
        references.sort(ReferencesModel._compareReferences);
        var current;
        for (var _i = 0, references_1 = references; _i < references_1.length; _i++) {
            var ref = references_1[_i];
            if (!current || current.uri.toString() !== ref.uri.toString()) {
                // new group
                current = new FileReferences(this, ref.uri);
                this.groups.push(current);
            }
            // append, check for equality first!
            if (current.children.length === 0
                || !range_1.Range.equalsRange(ref.range, current.children[current.children.length - 1].range)) {
                var oneRef = new OneReference(current, ref.range, this._eventBus);
                this._references.push(oneRef);
                current.children.push(oneRef);
            }
        }
    }
    Object.defineProperty(ReferencesModel.prototype, "empty", {
        get: function () {
            return this._groups.length === 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReferencesModel.prototype, "references", {
        get: function () {
            return this._references;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReferencesModel.prototype, "groups", {
        get: function () {
            return this._groups;
        },
        enumerable: true,
        configurable: true
    });
    ReferencesModel.prototype.nextReference = function (reference) {
        var idx = reference.parent.children.indexOf(reference), len = reference.parent.children.length, totalLength = reference.parent.parent.groups.length;
        if (idx + 1 < len || totalLength === 1) {
            return reference.parent.children[(idx + 1) % len];
        }
        idx = reference.parent.parent.groups.indexOf(reference.parent);
        idx = (idx + 1) % totalLength;
        return reference.parent.parent.groups[idx].children[0];
    };
    ReferencesModel.prototype.nearestReference = function (resource, position) {
        var nearest = this._references.map(function (ref, idx) {
            return {
                idx: idx,
                prefixLen: strings.commonPrefixLength(ref.uri.toString(), resource.toString()),
                offsetDist: Math.abs(ref.range.startLineNumber - position.lineNumber) * 100 + Math.abs(ref.range.startColumn - position.column)
            };
        }).sort(function (a, b) {
            if (a.prefixLen > b.prefixLen) {
                return -1;
            }
            else if (a.prefixLen < b.prefixLen) {
                return 1;
            }
            else if (a.offsetDist < b.offsetDist) {
                return -1;
            }
            else if (a.offsetDist > b.offsetDist) {
                return 1;
            }
            else {
                return 0;
            }
        })[0];
        if (nearest) {
            return this._references[nearest.idx];
        }
    };
    ReferencesModel._compareReferences = function (a, b) {
        if (a.uri.toString() < b.uri.toString()) {
            return -1;
        }
        else if (a.uri.toString() > b.uri.toString()) {
            return 1;
        }
        else {
            return range_1.Range.compareRangesUsingStarts(a.range, b.range);
        }
    };
    return ReferencesModel;
}());
exports.ReferencesModel = ReferencesModel;
