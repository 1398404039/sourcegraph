export declare enum TokenType {
    Dollar = 0,
    Colon = 1,
    CurlyOpen = 2,
    CurlyClose = 3,
    Backslash = 4,
    Int = 5,
    VariableName = 6,
    Format = 7,
    EOF = 8,
}
export interface Token {
    type: TokenType;
    pos: number;
    len: number;
}
export declare class Scanner {
    private static _table;
    static isDigitCharacter(ch: number): boolean;
    static isVariableCharacter(ch: number): boolean;
    value: string;
    pos: number;
    constructor();
    text(value: string): void;
    tokenText(token: Token): string;
    next(): Token;
}
export declare abstract class Marker {
    _markerBrand: any;
    static toString(marker?: Marker[]): string;
    toString(): string;
}
export declare class Text extends Marker {
    string: string;
    constructor(string: string);
    toString(): string;
}
export declare class Placeholder extends Marker {
    name: string;
    defaultValue: Marker[];
    constructor(name: string, defaultValue: Marker[]);
    toString(): string;
}
export declare class Variable extends Marker {
    name: string;
    defaultValue: Marker[];
    resolvedValue: string;
    constructor(name: string, defaultValue: Marker[]);
    readonly isDefined: boolean;
    toString(): string;
}
export declare class SnippetParser {
    private _enableTextMate;
    private _enableInternal;
    private _scanner;
    private _token;
    private _prevToken;
    constructor(enableTextMate?: boolean, enableInternal?: boolean);
    escape(value: string): string;
    parse(value: string): Marker[];
    private _accept(type);
    private _return(token);
    private _parseAny(marker);
    private _parseText(marker);
    private _parseTM(marker);
    private _parseInternal(marker);
    private _parseEscaped(marker);
}
