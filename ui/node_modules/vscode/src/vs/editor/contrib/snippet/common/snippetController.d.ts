import { RawContextKey, IContextKeyService } from 'vs/platform/contextkey/common/contextkey';
import { Range } from 'vs/editor/common/core/range';
import * as editorCommon from 'vs/editor/common/editorCommon';
import { ICodeSnippet, CodeSnippet } from './snippet';
export declare class InsertSnippetController {
    private editor;
    private model;
    private finishPlaceHolderIndex;
    private listenersToRemove;
    private trackedPlaceHolders;
    private placeHolderDecorations;
    private currentPlaceHolderIndex;
    private highlightDecorationId;
    private isFinished;
    private _onStop;
    private _initialAlternativeVersionId;
    constructor(editor: editorCommon.ICommonCodeEditor, adaptedSnippet: ICodeSnippet, startLineNumber: number, initialAlternativeVersionId: number, onStop: () => void);
    dispose(): void;
    private initialize(adaptedSnippet, startLineNumber);
    onNextPlaceHolder(): boolean;
    onPrevPlaceHolder(): boolean;
    private changePlaceHolder(goToNext);
    onAccept(): boolean;
    onEscape(): boolean;
    private doLinkEditing();
    private stopAll();
}
export interface ITrackedPlaceHolder {
    ranges: string[];
}
export declare class SnippetController {
    private static ID;
    static get(editor: editorCommon.ICommonCodeEditor): SnippetController;
    private _editor;
    protected _currentController: InsertSnippetController;
    private _inSnippetMode;
    constructor(editor: editorCommon.ICommonCodeEditor, contextKeyService: IContextKeyService);
    dispose(): void;
    getId(): string;
    run(snippet: CodeSnippet, overwriteBefore: number, overwriteAfter: number, stripPrefix?: boolean): void;
    /**
     * Inserts once `snippet` at the start of `replaceRange`, after deleting `replaceRange`.
     */
    runWithReplaceRange(snippet: CodeSnippet, replaceRange: Range): void;
    private _runAndRestoreController(callback);
    private static _getTypeRangeForSelection(model, selection, overwriteBefore, overwriteAfter);
    private static _getAdaptedSnippet(model, snippet, typeRange);
    private static _addCommandForSnippet(model, adaptedSnippet, typeRange, out);
    private _runPreparedSnippetForPrimarySelection(prepared, undoStops);
    private _runForAllSelections(snippet, overwriteBefore, overwriteAfter, stripPrefix?);
    private static _prepareSnippet(editor, selection, snippet, overwriteBefore, overwriteAfter, stripPrefix?);
    private static _getSnippetCursorOnly(snippet);
    jumpToNextPlaceholder(): void;
    jumpToPrevPlaceholder(): void;
    acceptSnippet(): void;
    leaveSnippet(): void;
}
export declare var CONTEXT_SNIPPET_MODE: RawContextKey<boolean>;
