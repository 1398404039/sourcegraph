/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var event_1 = require("vs/base/common/event");
var ipc_1 = require("vs/base/parts/ipc/common/ipc");
var WindowsChannel = (function () {
    function WindowsChannel(service) {
        this.service = service;
        this.onWindowOpen = event_1.buffer(service.onWindowOpen, true);
        this.onWindowFocus = event_1.buffer(service.onWindowFocus, true);
    }
    WindowsChannel.prototype.call = function (command, arg) {
        switch (command) {
            case 'event:onWindowOpen': return ipc_1.eventToCall(this.onWindowOpen);
            case 'event:onWindowFocus': return ipc_1.eventToCall(this.onWindowFocus);
            case 'openFileFolderPicker': return this.service.openFileFolderPicker(arg[0], arg[1]);
            case 'openFilePicker': return this.service.openFilePicker(arg[0], arg[1], arg[2]);
            case 'openFolderPicker': return this.service.openFolderPicker(arg[0], arg[1]);
            case 'reloadWindow': return this.service.reloadWindow(arg);
            case 'openDevTools': return this.service.openDevTools(arg);
            case 'toggleDevTools': return this.service.toggleDevTools(arg);
            case 'closeFolder': return this.service.closeFolder(arg);
            case 'toggleFullScreen': return this.service.toggleFullScreen(arg);
            case 'setRepresentedFilename': return this.service.setRepresentedFilename(arg[0], arg[1]);
            case 'addToRecentlyOpen': return this.service.addToRecentlyOpen(arg);
            case 'removeFromRecentlyOpen': return this.service.removeFromRecentlyOpen(arg);
            case 'getRecentlyOpen': return this.service.getRecentlyOpen(arg);
            case 'focusWindow': return this.service.focusWindow(arg);
            case 'isMaximized': return this.service.isMaximized(arg);
            case 'maximizeWindow': return this.service.maximizeWindow(arg);
            case 'unmaximizeWindow': return this.service.unmaximizeWindow(arg);
            case 'setDocumentEdited': return this.service.setDocumentEdited(arg[0], arg[1]);
            case 'toggleMenuBar': return this.service.toggleMenuBar(arg);
            case 'windowOpen': return this.service.windowOpen(arg[0], arg[1]);
            case 'openNewWindow': return this.service.openNewWindow();
            case 'showWindow': return this.service.showWindow(arg);
            case 'getWindows': return this.service.getWindows();
            case 'getWindowCount': return this.service.getWindowCount();
            case 'quit': return this.service.quit();
            case 'log': return this.service.log(arg[0], arg[1]);
            case 'closeExtensionHostWindow': return this.service.closeExtensionHostWindow(arg);
            case 'showItemInFolder': return this.service.showItemInFolder(arg);
            case 'openExternal': return this.service.openExternal(arg);
            case 'startCrashReporter': return this.service.startCrashReporter(arg);
        }
    };
    return WindowsChannel;
}());
exports.WindowsChannel = WindowsChannel;
var WindowsChannelClient = (function () {
    function WindowsChannelClient(channel) {
        this.channel = channel;
        this._onWindowOpen = ipc_1.eventFromCall(this.channel, 'event:onWindowOpen');
        this._onWindowFocus = ipc_1.eventFromCall(this.channel, 'event:onWindowFocus');
    }
    Object.defineProperty(WindowsChannelClient.prototype, "onWindowOpen", {
        get: function () { return this._onWindowOpen; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WindowsChannelClient.prototype, "onWindowFocus", {
        get: function () { return this._onWindowFocus; },
        enumerable: true,
        configurable: true
    });
    WindowsChannelClient.prototype.openFileFolderPicker = function (windowId, forceNewWindow) {
        return this.channel.call('openFileFolderPicker', [windowId, forceNewWindow]);
    };
    WindowsChannelClient.prototype.openFilePicker = function (windowId, forceNewWindow, path) {
        return this.channel.call('openFilePicker', [windowId, forceNewWindow, path]);
    };
    WindowsChannelClient.prototype.openFolderPicker = function (windowId, forceNewWindow) {
        return this.channel.call('openFolderPicker', [windowId, forceNewWindow]);
    };
    WindowsChannelClient.prototype.reloadWindow = function (windowId) {
        return this.channel.call('reloadWindow', windowId);
    };
    WindowsChannelClient.prototype.openDevTools = function (windowId) {
        return this.channel.call('openDevTools', windowId);
    };
    WindowsChannelClient.prototype.toggleDevTools = function (windowId) {
        return this.channel.call('toggleDevTools', windowId);
    };
    WindowsChannelClient.prototype.closeFolder = function (windowId) {
        return this.channel.call('closeFolder', windowId);
    };
    WindowsChannelClient.prototype.toggleFullScreen = function (windowId) {
        return this.channel.call('toggleFullScreen', windowId);
    };
    WindowsChannelClient.prototype.setRepresentedFilename = function (windowId, fileName) {
        return this.channel.call('setRepresentedFilename', [windowId, fileName]);
    };
    WindowsChannelClient.prototype.addToRecentlyOpen = function (paths) {
        return this.channel.call('addToRecentlyOpen', paths);
    };
    WindowsChannelClient.prototype.removeFromRecentlyOpen = function (paths) {
        return this.channel.call('removeFromRecentlyOpen', paths);
    };
    WindowsChannelClient.prototype.getRecentlyOpen = function (windowId) {
        return this.channel.call('getRecentlyOpen', windowId);
    };
    WindowsChannelClient.prototype.focusWindow = function (windowId) {
        return this.channel.call('focusWindow', windowId);
    };
    WindowsChannelClient.prototype.isMaximized = function (windowId) {
        return this.channel.call('isMaximized', windowId);
    };
    WindowsChannelClient.prototype.maximizeWindow = function (windowId) {
        return this.channel.call('maximizeWindow', windowId);
    };
    WindowsChannelClient.prototype.unmaximizeWindow = function (windowId) {
        return this.channel.call('unmaximizeWindow', windowId);
    };
    WindowsChannelClient.prototype.setDocumentEdited = function (windowId, flag) {
        return this.channel.call('setDocumentEdited', [windowId, flag]);
    };
    WindowsChannelClient.prototype.toggleMenuBar = function (windowId) {
        return this.channel.call('toggleMenuBar', windowId);
    };
    WindowsChannelClient.prototype.quit = function () {
        return this.channel.call('quit');
    };
    WindowsChannelClient.prototype.windowOpen = function (paths, forceNewWindow) {
        return this.channel.call('windowOpen', [paths, forceNewWindow]);
    };
    WindowsChannelClient.prototype.openNewWindow = function () {
        return this.channel.call('openNewWindow');
    };
    WindowsChannelClient.prototype.showWindow = function (windowId) {
        return this.channel.call('showWindow', windowId);
    };
    WindowsChannelClient.prototype.getWindows = function () {
        return this.channel.call('getWindows');
    };
    WindowsChannelClient.prototype.getWindowCount = function () {
        return this.channel.call('getWindowCount');
    };
    WindowsChannelClient.prototype.log = function (severity) {
        var messages = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            messages[_i - 1] = arguments[_i];
        }
        return this.channel.call('log', [severity, messages]);
    };
    WindowsChannelClient.prototype.closeExtensionHostWindow = function (extensionDevelopmentPath) {
        return this.channel.call('closeExtensionHostWindow', extensionDevelopmentPath);
    };
    WindowsChannelClient.prototype.showItemInFolder = function (path) {
        return this.channel.call('showItemInFolder', path);
    };
    WindowsChannelClient.prototype.openExternal = function (url) {
        return this.channel.call('openExternal', url);
    };
    WindowsChannelClient.prototype.startCrashReporter = function (config) {
        return this.channel.call('startCrashReporter', config);
    };
    return WindowsChannelClient;
}());
exports.WindowsChannelClient = WindowsChannelClient;
