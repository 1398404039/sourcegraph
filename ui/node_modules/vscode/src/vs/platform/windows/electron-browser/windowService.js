/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var windows_1 = require("vs/platform/windows/common/windows");
var WindowService = (function () {
    function WindowService(windowId, windowsService) {
        this.windowId = windowId;
        this.windowsService = windowsService;
    }
    WindowService.prototype.getCurrentWindowId = function () {
        return this.windowId;
    };
    WindowService.prototype.openFileFolderPicker = function (forceNewWindow) {
        return this.windowsService.openFileFolderPicker(this.windowId, forceNewWindow);
    };
    WindowService.prototype.openFilePicker = function (forceNewWindow, path) {
        return this.windowsService.openFilePicker(this.windowId, forceNewWindow, path);
    };
    WindowService.prototype.openFolderPicker = function (forceNewWindow) {
        return this.windowsService.openFolderPicker(this.windowId, forceNewWindow);
    };
    WindowService.prototype.reloadWindow = function () {
        return this.windowsService.reloadWindow(this.windowId);
    };
    WindowService.prototype.openDevTools = function () {
        return this.windowsService.openDevTools(this.windowId);
    };
    WindowService.prototype.toggleDevTools = function () {
        return this.windowsService.toggleDevTools(this.windowId);
    };
    WindowService.prototype.closeFolder = function () {
        return this.windowsService.closeFolder(this.windowId);
    };
    WindowService.prototype.toggleFullScreen = function () {
        return this.windowsService.toggleFullScreen(this.windowId);
    };
    WindowService.prototype.setRepresentedFilename = function (fileName) {
        return this.windowsService.setRepresentedFilename(this.windowId, fileName);
    };
    WindowService.prototype.addToRecentlyOpen = function (paths) {
        return this.windowsService.addToRecentlyOpen(paths);
    };
    WindowService.prototype.removeFromRecentlyOpen = function (paths) {
        return this.windowsService.removeFromRecentlyOpen(paths);
    };
    WindowService.prototype.getRecentlyOpen = function () {
        return this.windowsService.getRecentlyOpen(this.windowId);
    };
    WindowService.prototype.focusWindow = function () {
        return this.windowsService.focusWindow(this.windowId);
    };
    WindowService.prototype.isMaximized = function () {
        return this.windowsService.isMaximized(this.windowId);
    };
    WindowService.prototype.maximizeWindow = function () {
        return this.windowsService.maximizeWindow(this.windowId);
    };
    WindowService.prototype.unmaximizeWindow = function () {
        return this.windowsService.unmaximizeWindow(this.windowId);
    };
    WindowService.prototype.setDocumentEdited = function (flag) {
        return this.windowsService.setDocumentEdited(this.windowId, flag);
    };
    WindowService.prototype.toggleMenuBar = function () {
        return this.windowsService.toggleMenuBar(this.windowId);
    };
    return WindowService;
}());
WindowService = __decorate([
    __param(1, windows_1.IWindowsService)
], WindowService);
exports.WindowService = WindowService;
