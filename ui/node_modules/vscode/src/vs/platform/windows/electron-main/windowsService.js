/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var winjs_base_1 = require("vs/base/common/winjs.base");
var lifecycle_1 = require("vs/base/common/lifecycle");
var objects_1 = require("vs/base/common/objects");
var environment_1 = require("vs/platform/environment/common/environment");
var electron_1 = require("electron");
var event_1 = require("vs/base/common/event");
var event_2 = require("vs/base/node/event");
var url_1 = require("vs/platform/url/common/url");
// TODO@Joao: remove this dependency, move all implementation to this class
var windows_1 = require("vs/code/electron-main/windows");
var WindowsService = (function () {
    function WindowsService(windowsMainService, environmentService, urlService) {
        this.windowsMainService = windowsMainService;
        this.environmentService = environmentService;
        this.disposables = [];
        this.onWindowOpen = event_2.fromEventEmitter(electron_1.app, 'browser-window-created', function (_, w) { return w.id; });
        this.onWindowFocus = event_2.fromEventEmitter(electron_1.app, 'browser-window-focus', function (_, w) { return w.id; });
        event_1.chain(urlService.onOpenURL)
            .filter(function (uri) { return uri.authority === 'file' && !!uri.path; })
            .map(function (uri) { return uri.path; })
            .on(this.openFileForURI, this, this.disposables);
    }
    WindowsService.prototype.openFileFolderPicker = function (windowId, forceNewWindow) {
        this.windowsMainService.openFileFolderPicker(forceNewWindow);
        return winjs_base_1.TPromise.as(null);
    };
    WindowsService.prototype.openFilePicker = function (windowId, forceNewWindow, path) {
        this.windowsMainService.openFilePicker(forceNewWindow, path);
        return winjs_base_1.TPromise.as(null);
    };
    WindowsService.prototype.openFolderPicker = function (windowId, forceNewWindow) {
        var vscodeWindow = this.windowsMainService.getWindowById(windowId);
        this.windowsMainService.openFolderPicker(forceNewWindow, vscodeWindow);
        return winjs_base_1.TPromise.as(null);
    };
    WindowsService.prototype.reloadWindow = function (windowId) {
        var vscodeWindow = this.windowsMainService.getWindowById(windowId);
        if (vscodeWindow) {
            this.windowsMainService.reload(vscodeWindow);
        }
        return winjs_base_1.TPromise.as(null);
    };
    WindowsService.prototype.openDevTools = function (windowId) {
        var vscodeWindow = this.windowsMainService.getWindowById(windowId);
        if (vscodeWindow) {
            vscodeWindow.win.webContents.openDevTools();
        }
        return winjs_base_1.TPromise.as(null);
    };
    WindowsService.prototype.toggleDevTools = function (windowId) {
        var vscodeWindow = this.windowsMainService.getWindowById(windowId);
        if (vscodeWindow) {
            var contents = vscodeWindow.win.webContents;
            if (vscodeWindow.hasHiddenTitleBarStyle() && !vscodeWindow.win.isFullScreen() && !contents.isDevToolsOpened()) {
                contents.openDevTools({ mode: 'undocked' }); // due to https://github.com/electron/electron/issues/3647
            }
            else {
                contents.toggleDevTools();
            }
        }
        return winjs_base_1.TPromise.as(null);
    };
    WindowsService.prototype.closeFolder = function (windowId) {
        var vscodeWindow = this.windowsMainService.getWindowById(windowId);
        if (vscodeWindow) {
            this.windowsMainService.open({ cli: this.environmentService.args, forceEmpty: true, windowToUse: vscodeWindow });
        }
        return winjs_base_1.TPromise.as(null);
    };
    WindowsService.prototype.toggleFullScreen = function (windowId) {
        var vscodeWindow = this.windowsMainService.getWindowById(windowId);
        if (vscodeWindow) {
            vscodeWindow.toggleFullScreen();
        }
        return winjs_base_1.TPromise.as(null);
    };
    WindowsService.prototype.setRepresentedFilename = function (windowId, fileName) {
        var vscodeWindow = this.windowsMainService.getWindowById(windowId);
        if (vscodeWindow) {
            vscodeWindow.win.setRepresentedFilename(fileName);
        }
        return winjs_base_1.TPromise.as(null);
    };
    WindowsService.prototype.addToRecentlyOpen = function (paths) {
        this.windowsMainService.addToRecentPathsList(paths);
        return winjs_base_1.TPromise.as(null);
    };
    WindowsService.prototype.removeFromRecentlyOpen = function (paths) {
        this.windowsMainService.removeFromRecentPathsList(paths);
        return winjs_base_1.TPromise.as(null);
    };
    WindowsService.prototype.getRecentlyOpen = function (windowId) {
        var vscodeWindow = this.windowsMainService.getWindowById(windowId);
        if (vscodeWindow) {
            var _a = this.windowsMainService.getRecentPathsList(vscodeWindow.config.workspacePath, vscodeWindow.config.filesToOpen), files = _a.files, folders = _a.folders;
            return winjs_base_1.TPromise.as({ files: files, folders: folders });
        }
        return winjs_base_1.TPromise.as({ files: [], folders: [] });
    };
    WindowsService.prototype.focusWindow = function (windowId) {
        var vscodeWindow = this.windowsMainService.getWindowById(windowId);
        if (vscodeWindow) {
            vscodeWindow.win.focus();
        }
        return winjs_base_1.TPromise.as(null);
    };
    WindowsService.prototype.isMaximized = function (windowId) {
        var vscodeWindow = this.windowsMainService.getWindowById(windowId);
        if (vscodeWindow) {
            return winjs_base_1.TPromise.as(vscodeWindow.win.isMaximized());
        }
        return winjs_base_1.TPromise.as(null);
    };
    WindowsService.prototype.maximizeWindow = function (windowId) {
        var vscodeWindow = this.windowsMainService.getWindowById(windowId);
        if (vscodeWindow) {
            vscodeWindow.win.maximize();
        }
        return winjs_base_1.TPromise.as(null);
    };
    WindowsService.prototype.unmaximizeWindow = function (windowId) {
        var vscodeWindow = this.windowsMainService.getWindowById(windowId);
        if (vscodeWindow) {
            vscodeWindow.win.unmaximize();
        }
        return winjs_base_1.TPromise.as(null);
    };
    WindowsService.prototype.setDocumentEdited = function (windowId, flag) {
        var vscodeWindow = this.windowsMainService.getWindowById(windowId);
        if (vscodeWindow && vscodeWindow.win.isDocumentEdited() !== flag) {
            vscodeWindow.win.setDocumentEdited(flag);
        }
        return winjs_base_1.TPromise.as(null);
    };
    WindowsService.prototype.toggleMenuBar = function (windowId) {
        this.windowsMainService.toggleMenuBar(windowId);
        return winjs_base_1.TPromise.as(null);
    };
    WindowsService.prototype.windowOpen = function (paths, forceNewWindow) {
        if (!paths || !paths.length) {
            return winjs_base_1.TPromise.as(null);
        }
        this.windowsMainService.open({ cli: this.environmentService.args, pathsToOpen: paths, forceNewWindow: forceNewWindow });
        return winjs_base_1.TPromise.as(null);
    };
    WindowsService.prototype.openNewWindow = function () {
        this.windowsMainService.openNewWindow();
        return winjs_base_1.TPromise.as(null);
    };
    WindowsService.prototype.showWindow = function (windowId) {
        var vscodeWindow = this.windowsMainService.getWindowById(windowId);
        if (vscodeWindow) {
            vscodeWindow.win.show();
        }
        return winjs_base_1.TPromise.as(null);
    };
    WindowsService.prototype.getWindows = function () {
        var windows = this.windowsMainService.getWindows();
        var result = windows.map(function (w) { return ({ path: w.openedWorkspacePath, title: w.win.getTitle(), id: w.id }); });
        return winjs_base_1.TPromise.as(result);
    };
    WindowsService.prototype.getWindowCount = function () {
        return winjs_base_1.TPromise.as(this.windowsMainService.getWindows().length);
    };
    WindowsService.prototype.log = function (severity) {
        var messages = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            messages[_i - 1] = arguments[_i];
        }
        (_a = console[severity]).apply.apply(_a, [console].concat(messages));
        return winjs_base_1.TPromise.as(null);
        var _a;
    };
    WindowsService.prototype.closeExtensionHostWindow = function (extensionDevelopmentPath) {
        var windowOnExtension = this.windowsMainService.findWindow(null, null, extensionDevelopmentPath);
        if (windowOnExtension) {
            windowOnExtension.win.close();
        }
        return winjs_base_1.TPromise.as(null);
    };
    WindowsService.prototype.showItemInFolder = function (path) {
        electron_1.shell.showItemInFolder(path);
        return winjs_base_1.TPromise.as(null);
    };
    WindowsService.prototype.openExternal = function (url) {
        electron_1.shell.openExternal(url);
        return winjs_base_1.TPromise.as(null);
    };
    WindowsService.prototype.startCrashReporter = function (config) {
        electron_1.crashReporter.start(config);
        return winjs_base_1.TPromise.as(null);
    };
    WindowsService.prototype.quit = function () {
        this.windowsMainService.quit();
        return winjs_base_1.TPromise.as(null);
    };
    WindowsService.prototype.openFileForURI = function (filePath) {
        var cli = objects_1.assign(Object.create(null), this.environmentService.args, { goto: true });
        var pathsToOpen = [filePath];
        this.windowsMainService.open({ cli: cli, pathsToOpen: pathsToOpen });
        return winjs_base_1.TPromise.as(null);
    };
    WindowsService.prototype.dispose = function () {
        this.disposables = lifecycle_1.dispose(this.disposables);
    };
    return WindowsService;
}());
WindowsService = __decorate([
    __param(0, windows_1.IWindowsMainService),
    __param(1, environment_1.IEnvironmentService),
    __param(2, url_1.IURLService)
], WindowsService);
exports.WindowsService = WindowsService;
