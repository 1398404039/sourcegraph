/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var platform_1 = require('vs/platform/platform');
var types = require('vs/base/common/types');
var configurationRegistry_1 = require('vs/platform/configuration/common/configurationRegistry');
function setNode(root, key, value) {
    var segments = key.split('.');
    var last = segments.pop();
    var curr = root;
    segments.forEach(function (s) {
        var obj = curr[s];
        switch (typeof obj) {
            case 'undefined':
                obj = curr[s] = Object.create(null);
                break;
            case 'object':
                break;
            default:
                console.log('Conflicting configuration setting: ' + key + ' at ' + s + ' with ' + JSON.stringify(obj));
        }
        curr = obj;
    });
    curr[last] = value;
}
exports.setNode = setNode;
function processDefaultValues(withConfig) {
    var configurations = platform_1.Registry.as(configurationRegistry_1.Extensions.Configuration).getConfigurations();
    var visit = function (config, level) {
        var handled = withConfig(config, level === 0);
        if (Array.isArray(config.allOf)) {
            config.allOf.forEach(function (c) {
                // if the config node only contains an `allOf` we treat the `allOf` children as if they were at the top level
                visit(c, (!handled && level === 0) ? level : level + 1);
            });
        }
    };
    configurations.sort(function (c1, c2) {
        if (typeof c1.order !== 'number') {
            return 1;
        }
        if (typeof c2.order !== 'number') {
            return -1;
        }
        if (c1.order === c2.order) {
            var title1 = c1.title || '';
            var title2 = c2.title || '';
            return title1.localeCompare(title2);
        }
        return c1.order - c2.order;
    }).forEach(function (config) {
        visit(config, 0);
    });
}
function getDefaultValues() {
    var ret = Object.create(null);
    var handleConfig = function (config, isTop) {
        if (config.properties) {
            Object.keys(config.properties).forEach(function (key) {
                var prop = config.properties[key];
                var value = prop.default;
                if (types.isUndefined(prop.default)) {
                    value = getDefaultValue(prop.type);
                }
                setNode(ret, key, value);
            });
            return true;
        }
        return false;
    };
    processDefaultValues(handleConfig);
    return ret;
}
exports.getDefaultValues = getDefaultValues;
function getDefaultValuesContent(indent) {
    var lastEntry = -1;
    var result = [];
    result.push('{');
    var handleConfig = function (config, isTop) {
        var handled = false;
        if (config.title) {
            handled = true;
            if (isTop) {
                result.push('');
                result.push('// ' + config.title);
            }
            else {
                result.push(indent + '// ' + config.title);
            }
            result.push('');
        }
        if (config.properties) {
            handled = true;
            Object.keys(config.properties).forEach(function (key) {
                var prop = config.properties[key];
                var defaultValue = prop.default;
                if (types.isUndefined(defaultValue)) {
                    defaultValue = getDefaultValue(prop.type);
                }
                if (prop.description) {
                    result.push(indent + '// ' + prop.description);
                }
                var valueString = JSON.stringify(defaultValue, null, indent);
                if (valueString && (typeof defaultValue === 'object')) {
                    valueString = addIndent(valueString, indent);
                }
                if (lastEntry !== -1) {
                    result[lastEntry] += ',';
                }
                lastEntry = result.length;
                result.push(indent + JSON.stringify(key) + ': ' + valueString);
                result.push('');
            });
        }
        return handled;
    };
    processDefaultValues(handleConfig);
    result.push('}');
    return result.join('\n');
}
exports.getDefaultValuesContent = getDefaultValuesContent;
function addIndent(str, indent) {
    return str.split('\n').join('\n' + indent);
}
function getDefaultValue(type) {
    var t = Array.isArray(type) ? type[0] : type;
    switch (t) {
        case 'boolean':
            return false;
        case 'integer':
        case 'number':
            return 0;
        case 'string':
            return '';
        case 'array':
            return [];
        case 'object':
            return {};
        default:
            return null;
    }
}
function flatten(contents) {
    var root = Object.create(null);
    for (var key in contents) {
        setNode(root, key, contents[key]);
    }
    return root;
}
exports.flatten = flatten;
function getConfigurationKeys() {
    var keys = [];
    var configurations = platform_1.Registry.as(configurationRegistry_1.Extensions.Configuration).getConfigurations();
    configurations.forEach(function (config) {
        if (config.properties) {
            keys.push.apply(keys, Object.keys(config.properties));
        }
    });
    return keys;
}
exports.getConfigurationKeys = getConfigurationKeys;
