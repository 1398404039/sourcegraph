/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var winjs_base_1 = require('vs/base/common/winjs.base');
var objects = require('vs/base/common/objects');
var model_1 = require('vs/platform/configuration/common/model');
var config_1 = require('vs/base/node/config');
var platform_1 = require('vs/platform/platform');
var configurationRegistry_1 = require('vs/platform/configuration/common/configurationRegistry');
var lifecycle_1 = require('vs/base/common/lifecycle');
var configuration_1 = require('vs/platform/configuration/common/configuration');
var event_1 = require('vs/base/common/event');
var environment_1 = require('vs/platform/environment/common/environment');
var ConfigurationService = (function () {
    function ConfigurationService(environmentService) {
        var _this = this;
        this.disposables = [];
        this._onDidUpdateConfiguration = new event_1.Emitter();
        this.disposables.push(this._onDidUpdateConfiguration);
        this.rawConfig = new config_1.ConfigWatcher(environmentService.appSettingsPath, { changeBufferDelay: 300, defaultConfig: Object.create(null) });
        this.disposables.push(lifecycle_1.toDisposable(function () { return _this.rawConfig.dispose(); }));
        // Listeners
        this.disposables.push(this.rawConfig.onDidUpdateConfiguration(function (event) {
            _this.onConfigurationChange();
            if (_this._telemetryService) {
                _this._telemetryService.publicLog('updateUserConfiguration', { userConfigurationKeys: Object.keys(event.config) });
            }
        }));
        this.disposables.push(platform_1.Registry.as(configurationRegistry_1.Extensions.Configuration).onDidRegisterConfiguration(function () { return _this.onConfigurationChange(); }));
    }
    ConfigurationService.prototype.onConfigurationChange = function () {
        this.cache = void 0; // reset our caches
        this._onDidUpdateConfiguration.fire({ config: this.getConfiguration() });
    };
    Object.defineProperty(ConfigurationService.prototype, "onDidUpdateConfiguration", {
        get: function () {
            return this._onDidUpdateConfiguration.event;
        },
        enumerable: true,
        configurable: true
    });
    ConfigurationService.prototype.reloadConfiguration = function (section) {
        var _this = this;
        return new winjs_base_1.TPromise(function (c) {
            _this.rawConfig.reload(function () {
                _this.cache = void 0; // reset our caches
                c(_this.getConfiguration(section));
            });
        });
    };
    ConfigurationService.prototype.getConfiguration = function (section) {
        var consolidatedConfig = this.cache;
        if (!consolidatedConfig) {
            consolidatedConfig = this.getConsolidatedConfig();
            this.cache = consolidatedConfig;
        }
        return section ? consolidatedConfig[section] : consolidatedConfig;
    };
    ConfigurationService.prototype.lookup = function (key) {
        // make sure to clone the configuration so that the receiver does not tamper with the values
        return {
            default: objects.clone(configuration_1.getConfigurationValue(model_1.getDefaultValues(), key)),
            user: objects.clone(configuration_1.getConfigurationValue(model_1.flatten(this.rawConfig.getConfig()), key)),
            value: objects.clone(configuration_1.getConfigurationValue(this.getConfiguration(), key))
        };
    };
    ConfigurationService.prototype.getConsolidatedConfig = function () {
        var defaults = model_1.getDefaultValues(); // defaults coming from contributions to registries
        var user = model_1.flatten(this.rawConfig.getConfig()); // user configured settings
        return objects.mixin(objects.clone(defaults), // target: default values (but dont modify!)
        user, // source: user settings
        true // overwrite
        );
    };
    ConfigurationService.prototype.dispose = function () {
        this.disposables = lifecycle_1.dispose(this.disposables);
    };
    Object.defineProperty(ConfigurationService.prototype, "telemetryService", {
        set: function (value) {
            this._telemetryService = value;
        },
        enumerable: true,
        configurable: true
    });
    ConfigurationService = __decorate([
        __param(0, environment_1.IEnvironmentService)
    ], ConfigurationService);
    return ConfigurationService;
}());
exports.ConfigurationService = ConfigurationService;
