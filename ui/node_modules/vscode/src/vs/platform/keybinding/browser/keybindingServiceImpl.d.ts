import './keybindings.css';
import { IHTMLContentElement } from 'vs/base/common/htmlContent';
import { Keybinding } from 'vs/base/common/keybinding';
import { IDisposable } from 'vs/base/common/lifecycle';
import { IKeyboardEvent } from 'vs/base/browser/keyboardEvent';
import { ICommandService } from 'vs/platform/commands/common/commands';
import { IKeybindingItem, IKeybindingService } from 'vs/platform/keybinding/common/keybinding';
import { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';
import { IStatusbarService } from 'vs/platform/statusbar/common/statusbar';
import { IMessageService } from 'vs/platform/message/common/message';
import Event from 'vs/base/common/event';
export declare abstract class KeybindingService implements IKeybindingService {
    _serviceBrand: any;
    protected toDispose: IDisposable[];
    private _cachedResolver;
    private _firstTimeComputingResolver;
    private _currentChord;
    private _currentChordStatusMessage;
    private _onDidUpdateKeybindings;
    private _contextKeyService;
    protected _commandService: ICommandService;
    private _statusService;
    private _messageService;
    constructor(contextKeyService: IContextKeyService, commandService: ICommandService, messageService: IMessageService, statusService?: IStatusbarService);
    dispose(): void;
    protected _beginListening(domNode: HTMLElement): void;
    private _getResolver();
    readonly onDidUpdateKeybindings: Event<void>;
    getLabelFor(keybinding: Keybinding): string;
    getHTMLLabelFor(keybinding: Keybinding): IHTMLContentElement[];
    getAriaLabelFor(keybinding: Keybinding): string;
    getElectronAcceleratorFor(keybinding: Keybinding): string;
    protected updateResolver(): void;
    protected _getExtraKeybindings(isFirstTime: boolean): IKeybindingItem[];
    getDefaultKeybindings(): string;
    customKeybindingsCount(): number;
    lookupKeybindings(commandId: string): Keybinding[];
    private _getAllCommandsAsComment();
    protected _dispatch(e: IKeyboardEvent): void;
}
