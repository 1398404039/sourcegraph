import { IKeybindingItem, IKeybindings } from 'vs/platform/keybinding/common/keybinding';
import { ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';
import { ICommandHandler, ICommandHandlerDescription } from 'vs/platform/commands/common/commands';
export interface IKeybindingRule extends IKeybindings {
    id: string;
    weight: number;
    when: ContextKeyExpr;
}
export interface ICommandAndKeybindingRule extends IKeybindingRule {
    handler: ICommandHandler;
    description?: ICommandHandlerDescription;
}
export interface IKeybindingsRegistry {
    registerKeybindingRule(rule: IKeybindingRule): any;
    registerCommandAndKeybindingRule(desc: ICommandAndKeybindingRule): void;
    getDefaultKeybindings(): IKeybindingItem[];
    WEIGHT: {
        editorCore(importance?: number): number;
        editorContrib(importance?: number): number;
        workbenchContrib(importance?: number): number;
        builtinExtension(importance?: number): number;
        externalExtension(importance?: number): number;
    };
}
export declare let KeybindingsRegistry: IKeybindingsRegistry;
export declare let Extensions: {
    EditorModes: string;
};
