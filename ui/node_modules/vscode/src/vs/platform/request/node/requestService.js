/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var objects_1 = require("vs/base/common/objects");
var request_1 = require("vs/base/node/request");
var proxy_1 = require("vs/base/node/proxy");
var configuration_1 = require("vs/platform/configuration/common/configuration");
/**
 * This service exposes the `request` API, while using the global
 * or configured proxy settings.
 */
var RequestService = (function () {
    function RequestService(configurationService) {
        this.disposables = [];
        this.configure(configurationService.getConfiguration());
        configurationService.onDidUpdateConfiguration(this.onDidUpdateConfiguration, this, this.disposables);
    }
    RequestService.prototype.onDidUpdateConfiguration = function (e) {
        this.configure(e.config);
    };
    RequestService.prototype.configure = function (config) {
        this.proxyUrl = config.http && config.http.proxy;
        this.strictSSL = config.http && config.http.proxyStrictSSL;
        this.authorization = config.http && config.http.proxyAuthorization;
    };
    RequestService.prototype.request = function (options, requestFn) {
        if (requestFn === void 0) { requestFn = request_1.request; }
        var _a = this, proxyUrl = _a.proxyUrl, strictSSL = _a.strictSSL;
        options.agent = options.agent || proxy_1.getProxyAgent(options.url, { proxyUrl: proxyUrl, strictSSL: strictSSL });
        options.strictSSL = strictSSL;
        if (this.authorization) {
            options.headers = objects_1.assign(options.headers || {}, { 'Proxy-Authorization': this.authorization });
        }
        return requestFn(options);
    };
    return RequestService;
}());
RequestService = __decorate([
    __param(0, configuration_1.IConfigurationService)
], RequestService);
exports.RequestService = RequestService;
