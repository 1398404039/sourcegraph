import { TPromise } from 'vs/base/common/winjs.base';
import { IGalleryExtension, IExtensionGalleryService, IQueryOptions } from 'vs/platform/extensionManagement/common/extensionManagement';
import { IRequestService } from 'vs/platform/request/common/request';
import { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';
import { IPager } from 'vs/base/common/paging';
import { IRequestContext } from 'vs/base/node/request';
import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
export declare class ExtensionGalleryService implements IExtensionGalleryService {
    private requestService;
    private telemetryService;
    private configurationService;
    _serviceBrand: any;
    private extensionsGalleryUrl;
    private readonly commonHeaders;
    constructor(requestService: IRequestService, telemetryService: ITelemetryService, configurationService: IConfigurationService);
    private api(path?);
    isEnabled(): boolean;
    query(options?: IQueryOptions): TPromise<IPager<IGalleryExtension>>;
    private queryGallery(query);
    download(extension: IGalleryExtension): TPromise<string>;
    getAsset(url: string): TPromise<IRequestContext>;
    getAllDependencies(extension: IGalleryExtension): TPromise<IGalleryExtension[]>;
    loadCompatibleVersion(extension: IGalleryExtension): TPromise<IGalleryExtension>;
    private loadDependencies(extensionNames);
    private getDependenciesReccursively(toGet, result);
    /**
     * Always try with the `redirect=true` query string.
     * If that does not return 200, try without it.
     */
    private _getAsset(options);
    private getLastValidExtensionVersion(extension, versions);
    private getLastValidExtensionVersionFromProperties(extension, versions);
    private getLastValidExtensionVersionReccursively(extension, versions);
    private isEngineValid(engine);
    private static hasExtensionByName(extensions, name);
}
