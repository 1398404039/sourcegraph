/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var extensionManagement_1 = require('vs/platform/extensionManagement/common/extensionManagement');
var winjs_base_1 = require('vs/base/common/winjs.base');
var semver = require('semver');
function extensionEquals(one, other) {
    return one.publisher === other.publisher && one.name === other.name;
}
exports.extensionEquals = extensionEquals;
function getTelemetryData(extension) {
    var local = extension;
    var gallery = extension;
    if (local.path) {
        return {
            id: local.manifest.publisher + "." + local.manifest.name,
            name: local.manifest.name,
            galleryId: local.metadata ? local.metadata.id : null,
            publisherId: local.metadata ? local.metadata.publisherId : null,
            publisherName: local.manifest.publisher,
            publisherDisplayName: local.metadata ? local.metadata.publisherDisplayName : null
        };
    }
    else {
        return {
            id: gallery.publisher + "." + gallery.name,
            name: gallery.name,
            galleryId: gallery.id,
            publisherId: gallery.publisherId,
            publisherName: gallery.publisher,
            publisherDisplayName: gallery.publisherDisplayName
        };
    }
}
exports.getTelemetryData = getTelemetryData;
function getOutdatedExtensions(extensionsService, galleryService) {
    if (!galleryService.isEnabled()) {
        return winjs_base_1.TPromise.as([]);
    }
    return extensionsService.getInstalled(extensionManagement_1.LocalExtensionType.User).then(function (installed) {
        var names = installed.map(function (_a) {
            var manifest = _a.manifest;
            return (manifest.publisher + "." + manifest.name);
        });
        if (installed.length === 0) {
            return winjs_base_1.TPromise.as([]);
        }
        return galleryService.query({ names: names, pageSize: names.length }).then(function (result) {
            var available = result.firstPage;
            return available.map(function (extension) {
                var local = installed.filter(function (local) { return extensionEquals(local.manifest, extension); })[0];
                if (local && semver.lt(local.manifest.version, extension.version)) {
                    return local;
                }
                else {
                    return null;
                }
            }).filter(function (e) { return !!e; });
        });
    });
}
exports.getOutdatedExtensions = getOutdatedExtensions;
