/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var uri_1 = require('vs/base/common/uri');
var marshalling_1 = require('vs/base/common/marshalling');
var network_1 = require('vs/base/common/network');
var winjs_base_1 = require('vs/base/common/winjs.base');
var editor_1 = require('vs/platform/editor/common/editor');
var paths_1 = require('vs/base/common/paths');
var commands_1 = require('vs/platform/commands/common/commands');
var OpenerService = (function () {
    function OpenerService(_editorService, _commandService) {
        this._editorService = _editorService;
        this._commandService = _commandService;
        //
    }
    OpenerService.prototype.open = function (resource, options) {
        var scheme = resource.scheme, path = resource.path, query = resource.query, fragment = resource.fragment;
        var promise;
        if (scheme === network_1.Schemas.http || scheme === network_1.Schemas.https) {
            // open http
            window.open(resource.toString(true));
        }
        else if (scheme === 'command' && commands_1.CommandsRegistry.getCommand(path)) {
            // execute as command
            var args = [];
            try {
                args = marshalling_1.parse(query);
                if (!Array.isArray(args)) {
                    args = [args];
                }
            }
            catch (e) {
            }
            promise = (_a = this._commandService).executeCommand.apply(_a, [path].concat(args));
        }
        else {
            var selection = void 0;
            var match = /^L?(\d+)(?:,(\d+))?/.exec(fragment);
            if (match) {
                // support file:///some/file.js#73,84
                // support file:///some/file.js#L73
                selection = {
                    startLineNumber: parseInt(match[1]),
                    startColumn: match[2] ? parseInt(match[2]) : 1
                };
                // remove fragment
                resource = resource.with({ fragment: '' });
            }
            else if (resource.scheme === network_1.Schemas.file) {
                resource = uri_1.default.file(paths_1.normalize(resource.fsPath)); // TODO@Ben workaround for non-normalized paths (https://github.com/Microsoft/vscode/issues/12954)
            }
            promise = this._editorService.openEditor({ resource: resource, options: { selection: selection, } }, options && options.openToSide);
        }
        return winjs_base_1.TPromise.as(promise);
        var _a;
    };
    OpenerService = __decorate([
        __param(0, editor_1.IEditorService),
        __param(1, commands_1.ICommandService)
    ], OpenerService);
    return OpenerService;
}());
exports.OpenerService = OpenerService;
