/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var winjs_base_1 = require('vs/base/common/winjs.base');
var instantiation_1 = require('vs/platform/instantiation/common/instantiation');
exports.ITelemetryService = instantiation_1.createDecorator('telemetryService');
exports.defaultExperiments = {
    showDefaultViewlet: false,
    showCommandsWatermark: false,
    openUntitledFile: true
};
exports.NullTelemetryService = {
    _serviceBrand: undefined,
    _experiments: exports.defaultExperiments,
    publicLog: function (eventName, data) {
        return winjs_base_1.TPromise.as(null);
    },
    isOptedIn: true,
    getTelemetryInfo: function () {
        return winjs_base_1.TPromise.as({
            instanceId: 'someValue.instanceId',
            sessionId: 'someValue.sessionId',
            machineId: 'someValue.machineId'
        });
    },
    getExperiments: function () {
        return this._experiments;
    }
};
function loadExperiments(storageService, configurationService) {
    var key = 'experiments.randomness';
    var valueString = storageService.get(key);
    if (!valueString) {
        valueString = Math.random().toString();
        storageService.store(key, valueString);
    }
    var random0 = parseFloat(valueString);
    var _a = splitRandom(random0), random1 = _a[0], showDefaultViewlet = _a[1];
    var _b = splitRandom(random1), random2 = _b[0], showCommandsWatermark = _b[1];
    var _c = splitRandom(random2), openUntitledFile = _c[1];
    return applyOverrides(configurationService, {
        showDefaultViewlet: showDefaultViewlet,
        showCommandsWatermark: showCommandsWatermark,
        openUntitledFile: openUntitledFile
    });
}
exports.loadExperiments = loadExperiments;
function applyOverrides(configurationService, experiments) {
    var config = configurationService.getConfiguration('telemetry');
    var experimentsConfig = config && config.experiments || {};
    Object.keys(experiments).forEach(function (key) {
        if (key in experimentsConfig) {
            experiments[key] = experimentsConfig[key];
        }
    });
    return experiments;
}
exports.applyOverrides = applyOverrides;
function splitRandom(random) {
    var scaled = random * 2;
    var i = Math.floor(scaled);
    return [scaled - i, i === 1];
}
function combinedAppender() {
    var appenders = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        appenders[_i - 0] = arguments[_i];
    }
    return { log: function (e, d) { return appenders.forEach(function (a) { return a.log(e, d); }); } };
}
exports.combinedAppender = combinedAppender;
exports.NullAppender = { log: function () { return null; } };
// --- util
function anonymize(input) {
    if (!input) {
        return input;
    }
    var r = '';
    for (var i = 0; i < input.length; i++) {
        var ch = input[i];
        if (ch >= '0' && ch <= '9') {
            r += '0';
            continue;
        }
        if (ch >= 'a' && ch <= 'z') {
            r += 'a';
            continue;
        }
        if (ch >= 'A' && ch <= 'Z') {
            r += 'A';
            continue;
        }
        r += ch;
    }
    return r;
}
exports.anonymize = anonymize;
