import { TPromise } from 'vs/base/common/winjs.base';
import { IDisposable } from 'vs/base/common/lifecycle';
import URI from 'vs/base/common/uri';
import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
import { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';
import { ILifecycleService } from 'vs/platform/lifecycle/common/lifecycle';
import { IStorageService } from 'vs/platform/storage/common/storage';
import { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';
export declare const ITelemetryService: {
    (...args: any[]): void;
    type: ITelemetryService;
};
export interface ITelemetryInfo {
    sessionId: string;
    machineId: string;
    instanceId: string;
}
export interface ITelemetryExperiments {
    showNewUserWatermark: boolean;
    openUntitledFile: boolean;
    openGettingStarted?: boolean;
}
export interface ITelemetryService {
    _serviceBrand: any;
    /**
     * Sends a telemetry event that has been privacy approved.
     * Do not call this unless you have been given approval.
     */
    publicLog(eventName: string, data?: any): TPromise<void>;
    getTelemetryInfo(): TPromise<ITelemetryInfo>;
    isOptedIn: boolean;
    getExperiments(): ITelemetryExperiments;
}
export declare const defaultExperiments: ITelemetryExperiments;
export declare const NullTelemetryService: {
    _serviceBrand: any;
    _experiments: ITelemetryExperiments;
    publicLog(eventName: string, data?: any): TPromise<void>;
    isOptedIn: boolean;
    getTelemetryInfo(): TPromise<ITelemetryInfo>;
    getExperiments(): ITelemetryExperiments;
};
export declare function loadExperiments(contextService: IWorkspaceContextService, storageService: IStorageService, configurationService: IConfigurationService): ITelemetryExperiments;
export declare function applyOverrides(configurationService: IConfigurationService, experiments: ITelemetryExperiments): ITelemetryExperiments;
export interface ITelemetryAppender {
    log(eventName: string, data: any): void;
}
export declare function combinedAppender(...appenders: ITelemetryAppender[]): ITelemetryAppender;
export declare const NullAppender: ITelemetryAppender;
export declare function anonymize(input: string): string;
export interface URIDescriptor {
    mimeType?: string;
    ext?: string;
    path?: string;
}
export declare function telemetryURIDescriptor(uri: URI): URIDescriptor;
export declare function configurationTelemetry(telemetryService: ITelemetryService, configurationService: IConfigurationService): IDisposable;
export declare function lifecycleTelemetry(telemetryService: ITelemetryService, lifecycleService: ILifecycleService): IDisposable;
export declare function keybindingsTelemetry(telemetryService: ITelemetryService, keybindingService: IKeybindingService): IDisposable;
