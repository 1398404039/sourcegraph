/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var async_1 = require('vs/base/common/async');
var event_1 = require('vs/base/common/event');
var lifecycle_1 = require('vs/base/common/lifecycle');
var dom = require('vs/base/browser/dom');
(function (UserStatus) {
    UserStatus[UserStatus["Idle"] = 0] = "Idle";
    UserStatus[UserStatus["Active"] = 1] = "Active";
})(exports.UserStatus || (exports.UserStatus = {}));
var UserStatus = exports.UserStatus;
var IdleMonitor = (function (_super) {
    __extends(IdleMonitor, _super);
    function IdleMonitor(idleTime) {
        var _this = this;
        _super.call(this);
        this._status = null;
        this._idleCheckTimeout = this._register(new async_1.TimeoutTimer());
        this._lastActiveTime = -1;
        this._idleTime = idleTime;
        this._onStatusChange = new event_1.Emitter();
        this._register(dom.addDisposableListener(document, 'mousemove', function () { return _this._onUserActive(); }));
        this._register(dom.addDisposableListener(document, 'keydown', function () { return _this._onUserActive(); }));
        this._onUserActive();
    }
    Object.defineProperty(IdleMonitor.prototype, "onStatusChange", {
        get: function () { return this._onStatusChange.event; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IdleMonitor.prototype, "status", {
        get: function () {
            return this._status;
        },
        enumerable: true,
        configurable: true
    });
    IdleMonitor.prototype._onUserActive = function () {
        this._lastActiveTime = (new Date()).getTime();
        if (this._status !== UserStatus.Active) {
            this._status = UserStatus.Active;
            this._scheduleIdleCheck();
            this._onStatusChange.fire(this._status);
        }
    };
    IdleMonitor.prototype._onUserIdle = function () {
        if (this._status !== UserStatus.Idle) {
            this._status = UserStatus.Idle;
            this._onStatusChange.fire(this._status);
        }
    };
    IdleMonitor.prototype._scheduleIdleCheck = function () {
        var _this = this;
        var minimumTimeWhenUserCanBecomeIdle = this._lastActiveTime + this._idleTime;
        var timeout = minimumTimeWhenUserCanBecomeIdle - (new Date()).getTime();
        this._idleCheckTimeout.setIfNotSet(function () { return _this._checkIfUserIsIdle(); }, timeout);
    };
    IdleMonitor.prototype._checkIfUserIsIdle = function () {
        var actualIdleTime = (new Date()).getTime() - this._lastActiveTime;
        if (actualIdleTime >= this._idleTime) {
            this._onUserIdle();
        }
        else {
            this._scheduleIdleCheck();
        }
    };
    return IdleMonitor;
}(lifecycle_1.Disposable));
exports.IdleMonitor = IdleMonitor;
