/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var event_1 = require('vs/base/common/event');
var event_2 = require('vs/base/node/event');
var product_1 = require('vs/platform/product');
var electron_1 = require('electron');
var uri_1 = require('vs/base/common/uri');
var URLService = (function () {
    function URLService(initial) {
        if (initial === void 0) { initial = []; }
        this.openUrlEmitter = new event_1.Emitter();
        var globalBuffer = (global.getOpenUrls() || []);
        var initialBuffer = (typeof initial === 'string' ? [initial] : initial).concat(globalBuffer);
        electron_1.app.setAsDefaultProtocolClient(product_1.default.urlProtocol, process.execPath, ['--open-url']);
        var rawOnOpenUrl = event_2.fromEventEmitter(electron_1.app, 'open-url', function (event, url) { return ({ event: event, url: url }); });
        // always prevent default and return the url as string
        var preventedOnOpenUrl = event_1.mapEvent(rawOnOpenUrl, function (_a) {
            var event = _a.event, url = _a.url;
            event.preventDefault();
            return url;
        });
        // buffer all `onOpenUrl` events until someone starts listening
        var bufferedOnOpenUrl = event_1.buffer(preventedOnOpenUrl, true, initialBuffer);
        this.onOpenURL = event_1.chain(event_1.any(bufferedOnOpenUrl, this.openUrlEmitter.event))
            .map(function (url) {
            try {
                return uri_1.default.parse(url);
            }
            catch (e) {
                return null;
            }
        })
            .filter(function (uri) { return !!uri; })
            .event;
    }
    URLService.prototype.open = function (url) {
        this.openUrlEmitter.fire(url);
    };
    return URLService;
}());
exports.URLService = URLService;
