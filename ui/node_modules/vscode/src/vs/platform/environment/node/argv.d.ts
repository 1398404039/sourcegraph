import * as minimist from 'minimist';
export interface ParsedArgs extends minimist.ParsedArgs {
    help?: boolean;
    version?: boolean;
    wait?: boolean;
    diff?: boolean;
    goto?: boolean;
    'new-window'?: boolean;
    'reuse-window'?: boolean;
    locale?: string;
    'user-data-dir'?: string;
    performance?: boolean;
    verbose?: boolean;
    logExtensionHostCommunication?: boolean;
    'disable-extensions'?: boolean;
    extensionHomePath?: string;
    extensionDevelopmentPath?: string;
    extensionTestsPath?: string;
    debugBrkPluginHost?: string;
    debugPluginHost?: string;
    'list-extensions'?: boolean;
    'install-extension'?: string | string[];
    'uninstall-extension'?: string | string[];
    'open-url'?: string | string[];
}
/**
 * Use this to parse raw code process.argv such as: `Electron . --verbose --wait`
 */
export declare function parseMainProcessArgv(processArgv: string[]): ParsedArgs;
/**
 * Use this to parse raw code CLI process.argv such as: `Electron cli.js . --verbose --wait`
 */
export declare function parseCLIProcessArgv(processArgv: string[]): ParsedArgs;
/**
 * Use this to parse code arguments such as `--verbose --wait`
 */
export declare function parseArgs(args: string[]): ParsedArgs;
export declare const optionsHelp: {
    [name: string]: string;
};
export declare function formatOptions(options: {
    [name: string]: string;
}, columns: number): string;
export declare function buildHelpMessage(fullName: string, name: string, version: string): string;
