/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
var os = require('os');
var minimist = require('minimist');
var assert = require('assert');
var arrays_1 = require('vs/base/common/arrays');
var nls_1 = require('vs/nls');
var options = {
    string: [
        'locale',
        'user-data-dir',
        'extensionHomePath',
        'extensionDevelopmentPath',
        'extensionTestsPath',
        'install-extension',
        'uninstall-extension',
        'debugBrkPluginHost',
        'debugPluginHost',
        'open-url'
    ],
    boolean: [
        'help',
        'version',
        'wait',
        'diff',
        'goto',
        'new-window',
        'reuse-window',
        'performance',
        'verbose',
        'logExtensionHostCommunication',
        'disable-extensions',
        'list-extensions'
    ],
    alias: {
        help: 'h',
        version: 'v',
        wait: 'w',
        diff: 'd',
        goto: 'g',
        'new-window': 'n',
        'reuse-window': 'r',
        performance: 'p',
        'disable-extensions': 'disableExtensions'
    }
};
function validate(args) {
    if (args.goto) {
        args._.forEach(function (arg) { return assert(/^(\w:)?[^:]+(:\d*){0,2}$/.test(arg), nls_1.localize('gotoValidation', "Arguments in `--goto` mode should be in the format of `FILE(:LINE(:COLUMN))`.")); });
    }
    return args;
}
function stripAppPath(argv) {
    var index = arrays_1.firstIndex(argv, function (a) { return !/^-/.test(a); });
    if (index > -1) {
        return argv.slice(0, index).concat(argv.slice(index + 1));
    }
}
/**
 * Use this to parse raw code process.argv such as: `Electron . --verbose --wait`
 */
function parseMainProcessArgv(processArgv) {
    var args = processArgv.slice(1);
    // If dev, remove the first non-option argument: it's the app location
    if (process.env['VSCODE_DEV']) {
        args = stripAppPath(args);
    }
    return validate(parseArgs(args));
}
exports.parseMainProcessArgv = parseMainProcessArgv;
/**
 * Use this to parse raw code CLI process.argv such as: `Electron cli.js . --verbose --wait`
 */
function parseCLIProcessArgv(processArgv) {
    var args = processArgv.slice(2);
    if (process.env['VSCODE_DEV']) {
        args = stripAppPath(args);
    }
    return validate(parseArgs(args));
}
exports.parseCLIProcessArgv = parseCLIProcessArgv;
/**
 * Use this to parse code arguments such as `--verbose --wait`
 */
function parseArgs(args) {
    return minimist(args, options);
}
exports.parseArgs = parseArgs;
exports.optionsHelp = {
    '-d, --diff': nls_1.localize('diff', "Open a diff editor. Requires to pass two file paths as arguments."),
    '-g, --goto': nls_1.localize('goto', "Open the file at path at the line and column (add :line[:column] to path)."),
    '--locale <locale>': nls_1.localize('locale', "The locale to use (e.g. en-US or zh-TW)."),
    '-n, --new-window': nls_1.localize('newWindow', "Force a new instance of Code."),
    '-p, --performance': nls_1.localize('performance', "Start with the 'Developer: Startup Performance' command enabled."),
    '-r, --reuse-window': nls_1.localize('reuseWindow', "Force opening a file or folder in the last active window."),
    '--user-data-dir <dir>': nls_1.localize('userDataDir', "Specifies the directory that user data is kept in, useful when running as root."),
    '--verbose': nls_1.localize('verbose', "Print verbose output (implies --wait)."),
    '-w, --wait': nls_1.localize('wait', "Wait for the window to be closed before returning."),
    '--extensionHomePath': nls_1.localize('extensionHomePath', "Set the root path for extensions."),
    '--list-extensions': nls_1.localize('listExtensions', "List the installed extensions."),
    '--install-extension <ext>': nls_1.localize('installExtension', "Installs an extension."),
    '--uninstall-extension <ext>': nls_1.localize('uninstallExtension', "Uninstalls an extension."),
    '--disable-extensions': nls_1.localize('disableExtensions', "Disable all installed extensions."),
    '-v, --version': nls_1.localize('version', "Print version."),
    '-h, --help': nls_1.localize('help', "Print usage.")
};
function formatOptions(options, columns) {
    var keys = Object.keys(options);
    var argLength = Math.max.apply(null, keys.map(function (k) { return k.length; })) + 2 /*left padding*/ + 1;
    if (columns - argLength < 25) {
        // Use a condensed version on narrow terminals
        return keys.reduce(function (r, key) { return r.concat([("  " + key), ("      " + options[key])]); }, []).join('\n');
    }
    var descriptionColumns = columns - argLength - 1;
    var result = '';
    keys.forEach(function (k) {
        var wrappedDescription = wrapText(options[k], descriptionColumns);
        var keyPadding = ' '.repeat(argLength - k.length - 2 /*left padding*/);
        if (result.length > 0) {
            result += '\n';
        }
        result += '  ' + k + keyPadding + wrappedDescription[0];
        for (var i = 1; i < wrappedDescription.length; i++) {
            result += '\n' + ' '.repeat(argLength) + wrappedDescription[i];
        }
    });
    return result;
}
exports.formatOptions = formatOptions;
function wrapText(text, columns) {
    var lines = [];
    while (text.length) {
        var index = text.length < columns ? text.length : text.lastIndexOf(' ', columns);
        var line = text.slice(0, index).trim();
        text = text.slice(index);
        lines.push(line);
    }
    return lines;
}
function buildHelpMessage(fullName, name, version) {
    var columns = process.stdout.isTTY ? process.stdout.columns : 80;
    var executable = "" + name + (os.platform() === 'win32' ? '.exe' : '');
    return fullName + " " + version + "\n\n" + nls_1.localize('usage', "Usage") + ": " + executable + " [" + nls_1.localize('options', "options") + "] [" + nls_1.localize('paths', 'paths') + "...]\n\n" + nls_1.localize('optionsUpperCase', "Options") + ":\n" + formatOptions(exports.optionsHelp, columns);
}
exports.buildHelpMessage = buildHelpMessage;
