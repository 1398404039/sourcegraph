/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var crypto = require('crypto');
var paths = require('vs/base/node/paths');
var os = require('os');
var path = require('path');
var uri_1 = require('vs/base/common/uri');
var decorators_1 = require('vs/base/common/decorators');
var package_1 = require('vs/platform/package');
var product_1 = require('vs/platform/product');
function getUniqueUserId() {
    var username;
    if (process.platform === 'win32') {
        username = process.env.USERNAME;
    }
    else {
        username = process.env.USER;
    }
    if (!username) {
        return ''; // fail gracefully if there is no user name
    }
    // use sha256 to ensure the userid value can be used in filenames and are unique
    return crypto.createHash('sha256').update(username).digest('hex').substr(0, 6);
}
function getIPCHandleBaseName() {
    var name = package_1.default.name;
    // Support to run VS Code multiple times as different user
    // by making the socket unique over the logged in user
    var userId = getUniqueUserId();
    if (userId) {
        name += "-" + userId;
    }
    if (process.platform === 'win32') {
        return "\\\\.\\pipe\\" + name;
    }
    return path.join(os.tmpdir(), name);
}
var IPCHandlePrefix = getIPCHandleBaseName();
var IPCHandleSuffix = process.platform === 'win32' ? '-sock' : '.sock';
var EnvironmentService = (function () {
    function EnvironmentService(_args, _execPath) {
        this._args = _args;
        this._execPath = _execPath;
    }
    Object.defineProperty(EnvironmentService.prototype, "args", {
        get: function () { return this._args; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EnvironmentService.prototype, "appRoot", {
        get: function () { return path.dirname(uri_1.default.parse(require.toUrl('')).fsPath); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EnvironmentService.prototype, "execPath", {
        get: function () { return this._execPath; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EnvironmentService.prototype, "userHome", {
        get: function () { return path.join(os.homedir(), product_1.default.dataFolderName); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EnvironmentService.prototype, "userDataPath", {
        get: function () { return path.resolve(this._args['user-data-dir'] || paths.getDefaultUserDataPath(process.platform)); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EnvironmentService.prototype, "appSettingsHome", {
        get: function () { return path.join(this.userDataPath, 'User'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EnvironmentService.prototype, "appSettingsPath", {
        get: function () { return path.join(this.appSettingsHome, 'settings.json'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EnvironmentService.prototype, "appKeybindingsPath", {
        get: function () { return path.join(this.appSettingsHome, 'keybindings.json'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EnvironmentService.prototype, "extensionsPath", {
        get: function () { return path.normalize(this._args.extensionHomePath || path.join(this.userHome, 'extensions')); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EnvironmentService.prototype, "extensionDevelopmentPath", {
        get: function () { return this._args.extensionDevelopmentPath ? path.normalize(this._args.extensionDevelopmentPath) : this._args.extensionDevelopmentPath; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EnvironmentService.prototype, "extensionTestsPath", {
        get: function () { return this._args.extensionTestsPath ? path.normalize(this._args.extensionTestsPath) : this._args.extensionTestsPath; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EnvironmentService.prototype, "disableExtensions", {
        get: function () { return this._args['disable-extensions']; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EnvironmentService.prototype, "debugExtensionHost", {
        get: function () { return parseExtensionHostPort(this._args, this.isBuilt); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EnvironmentService.prototype, "isBuilt", {
        get: function () { return !process.env['VSCODE_DEV']; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EnvironmentService.prototype, "verbose", {
        get: function () { return this._args.verbose; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EnvironmentService.prototype, "wait", {
        get: function () { return this._args.wait; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EnvironmentService.prototype, "performance", {
        get: function () { return this._args.performance; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EnvironmentService.prototype, "logExtensionHostCommunication", {
        get: function () { return this._args.logExtensionHostCommunication; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EnvironmentService.prototype, "mainIPCHandle", {
        get: function () { return IPCHandlePrefix + "-" + package_1.default.version + IPCHandleSuffix; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EnvironmentService.prototype, "sharedIPCHandle", {
        get: function () { return IPCHandlePrefix + "-" + package_1.default.version + "-shared" + IPCHandleSuffix; },
        enumerable: true,
        configurable: true
    });
    __decorate([
        decorators_1.memoize
    ], EnvironmentService.prototype, "appRoot", null);
    __decorate([
        decorators_1.memoize
    ], EnvironmentService.prototype, "userHome", null);
    __decorate([
        decorators_1.memoize
    ], EnvironmentService.prototype, "userDataPath", null);
    __decorate([
        decorators_1.memoize
    ], EnvironmentService.prototype, "appSettingsHome", null);
    __decorate([
        decorators_1.memoize
    ], EnvironmentService.prototype, "appSettingsPath", null);
    __decorate([
        decorators_1.memoize
    ], EnvironmentService.prototype, "appKeybindingsPath", null);
    __decorate([
        decorators_1.memoize
    ], EnvironmentService.prototype, "extensionsPath", null);
    __decorate([
        decorators_1.memoize
    ], EnvironmentService.prototype, "extensionDevelopmentPath", null);
    __decorate([
        decorators_1.memoize
    ], EnvironmentService.prototype, "extensionTestsPath", null);
    __decorate([
        decorators_1.memoize
    ], EnvironmentService.prototype, "debugExtensionHost", null);
    __decorate([
        decorators_1.memoize
    ], EnvironmentService.prototype, "mainIPCHandle", null);
    __decorate([
        decorators_1.memoize
    ], EnvironmentService.prototype, "sharedIPCHandle", null);
    return EnvironmentService;
}());
exports.EnvironmentService = EnvironmentService;
function parseExtensionHostPort(args, isBuild) {
    var portStr = args.debugBrkPluginHost || args.debugPluginHost;
    var port = Number(portStr) || (!isBuild ? 5870 : null);
    var brk = port ? Boolean(!!args.debugBrkPluginHost) : false;
    return { port: port, break: brk };
}
exports.parseExtensionHostPort = parseExtensionHostPort;
