/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var actions_1 = require('vs/base/common/actions');
var winjs_base_1 = require('vs/base/common/winjs.base');
var descriptors_1 = require('vs/platform/instantiation/common/descriptors');
var commands_1 = require('vs/platform/commands/common/commands');
var instantiation_1 = require('vs/platform/instantiation/common/instantiation');
(function (MenuId) {
    MenuId[MenuId["EditorTitle"] = 1] = "EditorTitle";
    MenuId[MenuId["EditorTitleContext"] = 2] = "EditorTitleContext";
    MenuId[MenuId["EditorContext"] = 3] = "EditorContext";
    MenuId[MenuId["ExplorerContext"] = 4] = "ExplorerContext";
    MenuId[MenuId["ProblemsPanelContext"] = 5] = "ProblemsPanelContext";
})(exports.MenuId || (exports.MenuId = {}));
var MenuId = exports.MenuId;
exports.IMenuService = instantiation_1.createDecorator('menuService');
exports.MenuRegistry = new (function () {
    function class_1() {
        this.commands = Object.create(null);
        this.menuItems = Object.create(null);
    }
    class_1.prototype.addCommand = function (command) {
        var old = this.commands[command.id];
        this.commands[command.id] = command;
        return old !== void 0;
    };
    class_1.prototype.getCommand = function (id) {
        return this.commands[id];
    };
    class_1.prototype.appendMenuItem = function (loc, item) {
        var array = this.menuItems[loc];
        if (!array) {
            this.menuItems[loc] = array = [item];
        }
        else {
            array.push(item);
        }
        return {
            dispose: function () {
                var idx = array.indexOf(item);
                if (idx >= 0) {
                    array.splice(idx, 1);
                }
            }
        };
    };
    class_1.prototype.getMenuItems = function (loc) {
        return this.menuItems[loc] || [];
    };
    return class_1;
}());
var MenuItemAction = (function (_super) {
    __extends(MenuItemAction, _super);
    function MenuItemAction(_item, _commandService) {
        _super.call(this, MenuItemAction._getMenuItemId(_item), _item.command.title);
        this._item = _item;
        this._commandService = _commandService;
        this.order = this._item.order; //TODO@Ben order is menu item property, not an action property
    }
    MenuItemAction._getMenuItemId = function (item) {
        var result = item.command.id;
        if (item.alt) {
            result += "||" + item.alt.id;
        }
        return result;
    };
    Object.defineProperty(MenuItemAction.prototype, "resource", {
        get: function () {
            return this._resource;
        },
        set: function (value) {
            this._resource = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MenuItemAction.prototype, "item", {
        get: function () {
            return this._item;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MenuItemAction.prototype, "command", {
        get: function () {
            return this._item.command;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MenuItemAction.prototype, "altCommand", {
        get: function () {
            return this._item.alt;
        },
        enumerable: true,
        configurable: true
    });
    MenuItemAction.prototype.run = function (alt) {
        var id = (alt === true && this._item.alt || this._item.command).id;
        return this._commandService.executeCommand(id, this._resource);
    };
    MenuItemAction = __decorate([
        __param(1, commands_1.ICommandService)
    ], MenuItemAction);
    return MenuItemAction;
}(actions_1.Action));
exports.MenuItemAction = MenuItemAction;
var ExecuteCommandAction = (function (_super) {
    __extends(ExecuteCommandAction, _super);
    function ExecuteCommandAction(id, label, _commandService) {
        _super.call(this, id, label);
        this._commandService = _commandService;
    }
    ExecuteCommandAction.prototype.run = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i - 0] = arguments[_i];
        }
        return (_a = this._commandService).executeCommand.apply(_a, [this.id].concat(args));
        var _a;
    };
    ExecuteCommandAction = __decorate([
        __param(2, commands_1.ICommandService)
    ], ExecuteCommandAction);
    return ExecuteCommandAction;
}(actions_1.Action));
exports.ExecuteCommandAction = ExecuteCommandAction;
var SyncActionDescriptor = (function () {
    function SyncActionDescriptor(ctor, id, label, keybindings, keybindingContext, keybindingWeight) {
        this._id = id;
        this._label = label;
        this._keybindings = keybindings;
        this._keybindingContext = keybindingContext;
        this._keybindingWeight = keybindingWeight;
        this._descriptor = descriptors_1.createSyncDescriptor(ctor, this._id, this._label);
    }
    Object.defineProperty(SyncActionDescriptor.prototype, "syncDescriptor", {
        get: function () {
            return this._descriptor;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SyncActionDescriptor.prototype, "id", {
        get: function () {
            return this._id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SyncActionDescriptor.prototype, "label", {
        get: function () {
            return this._label;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SyncActionDescriptor.prototype, "keybindings", {
        get: function () {
            return this._keybindings;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SyncActionDescriptor.prototype, "keybindingContext", {
        get: function () {
            return this._keybindingContext;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SyncActionDescriptor.prototype, "keybindingWeight", {
        get: function () {
            return this._keybindingWeight;
        },
        enumerable: true,
        configurable: true
    });
    return SyncActionDescriptor;
}());
exports.SyncActionDescriptor = SyncActionDescriptor;
/**
 * A proxy for an action that needs to load code in order to confunction. Can be used from contributions to defer
 * module loading up to the point until the run method is being executed.
 */
var DeferredAction = (function (_super) {
    __extends(DeferredAction, _super);
    function DeferredAction(_instantiationService, _descriptor, id, label, cssClass, enabled) {
        if (label === void 0) { label = ''; }
        if (cssClass === void 0) { cssClass = ''; }
        if (enabled === void 0) { enabled = true; }
        _super.call(this, id, label, cssClass, enabled);
        this._instantiationService = _instantiationService;
        this._descriptor = _descriptor;
    }
    Object.defineProperty(DeferredAction.prototype, "cachedAction", {
        get: function () {
            return this._cachedAction;
        },
        set: function (action) {
            this._cachedAction = action;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DeferredAction.prototype, "id", {
        get: function () {
            if (this._cachedAction instanceof actions_1.Action) {
                return this._cachedAction.id;
            }
            return this._id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DeferredAction.prototype, "label", {
        get: function () {
            if (this._cachedAction instanceof actions_1.Action) {
                return this._cachedAction.label;
            }
            return this._label;
        },
        set: function (value) {
            if (this._cachedAction instanceof actions_1.Action) {
                this._cachedAction.label = value;
            }
            else {
                this._setLabel(value);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DeferredAction.prototype, "class", {
        get: function () {
            if (this._cachedAction instanceof actions_1.Action) {
                return this._cachedAction.class;
            }
            return this._cssClass;
        },
        set: function (value) {
            if (this._cachedAction instanceof actions_1.Action) {
                this._cachedAction.class = value;
            }
            else {
                this._setClass(value);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DeferredAction.prototype, "enabled", {
        get: function () {
            if (this._cachedAction instanceof actions_1.Action) {
                return this._cachedAction.enabled;
            }
            return this._enabled;
        },
        set: function (value) {
            if (this._cachedAction instanceof actions_1.Action) {
                this._cachedAction.enabled = value;
            }
            else {
                this._setEnabled(value);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DeferredAction.prototype, "order", {
        get: function () {
            if (this._cachedAction instanceof actions_1.Action) {
                return this._cachedAction.order;
            }
            return this._order;
        },
        set: function (order) {
            if (this._cachedAction instanceof actions_1.Action) {
                this._cachedAction.order = order;
            }
            else {
                this._order = order;
            }
        },
        enumerable: true,
        configurable: true
    });
    DeferredAction.prototype.run = function (event) {
        if (this._cachedAction) {
            return this._cachedAction.run(event);
        }
        return this._createAction().then(function (action) {
            return action.run(event);
        });
    };
    DeferredAction.prototype._createAction = function () {
        var _this = this;
        var promise = winjs_base_1.TPromise.as(undefined);
        return promise.then(function () {
            return _this._instantiationService.createInstance(_this._descriptor);
        }).then(function (action) {
            if (action instanceof actions_1.Action) {
                _this._cachedAction = action;
                // Pipe events from the instantated action through this deferred action
                _this._emitterUnbind = action.onDidChange(function (e) { return _this._onDidChange.fire(e); });
            }
            else {
                throw new Error('Action must be an instanceof Base Action');
            }
            return action;
        });
    };
    DeferredAction.prototype.dispose = function () {
        if (this._emitterUnbind) {
            this._emitterUnbind.dispose();
        }
        if (this._cachedAction) {
            this._cachedAction.dispose();
        }
        _super.prototype.dispose.call(this);
    };
    return DeferredAction;
}(actions_1.Action));
exports.DeferredAction = DeferredAction;
