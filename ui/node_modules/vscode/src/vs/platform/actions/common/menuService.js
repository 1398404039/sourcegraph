/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var event_1 = require('vs/base/common/event');
var lifecycle_1 = require('vs/base/common/lifecycle');
var collections_1 = require('vs/base/common/collections');
var contextkey_1 = require('vs/platform/contextkey/common/contextkey');
var actions_1 = require('vs/platform/actions/common/actions');
var extensions_1 = require('vs/platform/extensions/common/extensions');
var commands_1 = require('vs/platform/commands/common/commands');
var resourceContextKey_1 = require('vs/platform/actions/common/resourceContextKey');
var MenuService = (function () {
    function MenuService(_extensionService, _commandService) {
        this._extensionService = _extensionService;
        this._commandService = _commandService;
        //
    }
    MenuService.prototype.createMenu = function (id, contextKeyService) {
        return new Menu(id, this._commandService, contextKeyService, this._extensionService);
    };
    MenuService.prototype.getCommandActions = function () {
        return collections_1.values(actions_1.MenuRegistry.commands);
    };
    MenuService = __decorate([
        __param(0, extensions_1.IExtensionService),
        __param(1, commands_1.ICommandService)
    ], MenuService);
    return MenuService;
}());
exports.MenuService = MenuService;
var Menu = (function () {
    function Menu(id, _commandService, _contextKeyService, _extensionService) {
        var _this = this;
        this._commandService = _commandService;
        this._contextKeyService = _contextKeyService;
        this._extensionService = _extensionService;
        this._menuGroups = [];
        this._disposables = [];
        this._onDidChange = new event_1.Emitter();
        this._extensionService.onReady().then(function (_) {
            var menuItems = actions_1.MenuRegistry.getMenuItems(id);
            var keysFilter = Object.create(null);
            var group;
            menuItems.sort(Menu._compareMenuItems);
            for (var _i = 0, menuItems_1 = menuItems; _i < menuItems_1.length; _i++) {
                var item = menuItems_1[_i];
                // group by groupId
                var groupName = item.group;
                if (!group || group[0] !== groupName) {
                    group = [groupName, []];
                    _this._menuGroups.push(group);
                }
                group[1].push(new actions_1.MenuItemAction(item, _this._commandService));
                // keep keys for eventing
                Menu._fillInKbExprKeys(item.when, keysFilter);
            }
            // subscribe to context changes
            _this._disposables.push(_this._contextKeyService.onDidChangeContext(function (keys) {
                for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
                    var k = keys_1[_i];
                    if (keysFilter[k]) {
                        _this._onDidChange.fire();
                        return;
                    }
                }
            }));
            _this._onDidChange.fire(_this);
        });
    }
    Menu.prototype.dispose = function () {
        this._disposables = lifecycle_1.dispose(this._disposables);
        this._onDidChange.dispose();
    };
    Object.defineProperty(Menu.prototype, "onDidChange", {
        get: function () {
            return this._onDidChange.event;
        },
        enumerable: true,
        configurable: true
    });
    Menu.prototype.getActions = function () {
        var result = [];
        for (var _i = 0, _a = this._menuGroups; _i < _a.length; _i++) {
            var group = _a[_i];
            var id = group[0], actions = group[1];
            var activeActions = [];
            for (var _b = 0, actions_2 = actions; _b < actions_2.length; _b++) {
                var action = actions_2[_b];
                if (this._contextKeyService.contextMatchesRules(action.item.when)) {
                    action.resource = resourceContextKey_1.ResourceContextKey.Resource.getValue(this._contextKeyService);
                    activeActions.push(action);
                }
            }
            if (activeActions.length > 0) {
                result.push([id, activeActions]);
            }
        }
        return result;
    };
    Menu._fillInKbExprKeys = function (exp, set) {
        if (exp) {
            for (var _i = 0, _a = exp.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                set[key] = true;
            }
        }
    };
    Menu._compareMenuItems = function (a, b) {
        var aGroup = a.group;
        var bGroup = b.group;
        if (aGroup !== bGroup) {
            // Falsy groups come last
            if (!aGroup) {
                return 1;
            }
            else if (!bGroup) {
                return -1;
            }
            // 'navigation' group comes first
            if (aGroup === 'navigation') {
                return -1;
            }
            else if (bGroup === 'navigation') {
                return 1;
            }
            // lexical sort for groups
            var value = aGroup.localeCompare(bGroup);
            if (value !== 0) {
                return value;
            }
        }
        // sort on priority - default is 0
        var aPrio = a.order || 0;
        var bPrio = b.order || 0;
        if (aPrio < bPrio) {
            return -1;
        }
        else if (aPrio > bPrio) {
            return 1;
        }
        // sort on titles
        return a.command.title.localeCompare(b.command.title);
    };
    Menu = __decorate([
        __param(1, commands_1.ICommandService),
        __param(2, contextkey_1.IContextKeyService),
        __param(3, extensions_1.IExtensionService)
    ], Menu);
    return Menu;
}());
