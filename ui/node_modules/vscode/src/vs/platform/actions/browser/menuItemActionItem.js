/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var nls_1 = require('vs/nls');
var keybinding_1 = require('vs/platform/keybinding/common/keybinding');
var actions_1 = require('vs/platform/actions/common/actions');
var message_1 = require('vs/platform/message/common/message');
var severity_1 = require('vs/base/common/severity');
var lifecycle_1 = require('vs/base/common/lifecycle');
var actionbar_1 = require('vs/base/browser/ui/actionbar/actionbar');
var event_1 = require('vs/base/browser/event');
var event_2 = require('vs/base/common/event');
function fillInActions(menu, target) {
    var groups = menu.getActions();
    if (groups.length === 0) {
        return;
    }
    for (var _i = 0, groups_1 = groups; _i < groups_1.length; _i++) {
        var tuple = groups_1[_i];
        var group = tuple[0], actions = tuple[1];
        if (group === 'navigation') {
            var head = Array.isArray(target) ? target : target.primary;
            // split contributed actions at the point where order
            // changes form lt zero to gte
            var pivot = 0;
            for (; pivot < actions.length; pivot++) {
                if (actions[pivot].order >= 0) {
                    break;
                }
            }
            // prepend contributed actions with order lte zero
            head.unshift.apply(head, actions.slice(0, pivot));
            // find the first separator which marks the end of the
            // navigation group - might be the whole array length
            var sep = 0;
            while (sep < head.length) {
                if (head[sep] instanceof actionbar_1.Separator) {
                    break;
                }
                sep++;
            }
            // append contributed actions with order gt zero
            head.splice.apply(head, [sep, 0].concat(actions.slice(pivot)));
        }
        else {
            if (Array.isArray(target)) {
                target.push.apply(target, [new actionbar_1.Separator()].concat(actions));
            }
            else {
                (_a = target.secondary).push.apply(_a, [new actionbar_1.Separator()].concat(actions));
            }
        }
    }
    var _a;
}
exports.fillInActions = fillInActions;
function createActionItem(action, keybindingService, messageService) {
    if (action instanceof actions_1.MenuItemAction) {
        return new MenuItemActionItem(action, keybindingService, messageService);
    }
}
exports.createActionItem = createActionItem;
var _altKey = new (function (_super) {
    __extends(class_1, _super);
    function class_1() {
        var _this = this;
        _super.call(this);
        this._subscriptions = [];
        this._subscriptions.push(event_1.domEvent(document.body, 'keydown')(function (e) { return _this.fire(e.altKey); }));
        this._subscriptions.push(event_1.domEvent(document.body, 'keyup')(function (e) { return _this.fire(false); }));
        this._subscriptions.push(event_1.domEvent(document.body, 'mouseleave')(function (e) { return _this.fire(false); }));
        this._subscriptions.push(event_1.domEvent(document.body, 'blur')(function (e) { return _this.fire(false); }));
    }
    class_1.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this._subscriptions = lifecycle_1.dispose(this._subscriptions);
    };
    return class_1;
}(event_2.Emitter));
var MenuItemActionItem = (function (_super) {
    __extends(MenuItemActionItem, _super);
    function MenuItemActionItem(action, _keybindingService, _messageService) {
        _super.call(this, undefined, action, { icon: !!action.command.iconClass, label: !action.command.iconClass });
        this._keybindingService = _keybindingService;
        this._messageService = _messageService;
        this._wantsAltCommand = false;
    }
    Object.defineProperty(MenuItemActionItem.prototype, "_command", {
        get: function () {
            var _a = this._action, command = _a.command, altCommand = _a.altCommand;
            return this._wantsAltCommand && altCommand || command;
        },
        enumerable: true,
        configurable: true
    });
    MenuItemActionItem.prototype.onClick = function (event) {
        var _this = this;
        event.preventDefault();
        event.stopPropagation();
        this._action.run(this._wantsAltCommand).done(undefined, function (err) {
            _this._messageService.show(severity_1.default.Error, err);
        });
    };
    MenuItemActionItem.prototype.render = function (container) {
        var _this = this;
        _super.prototype.render.call(this, container);
        var mouseOver = false;
        var altDown = false;
        var updateAltState = function () {
            var wantsAltCommand = mouseOver && altDown;
            if (wantsAltCommand !== _this._wantsAltCommand) {
                _this._wantsAltCommand = wantsAltCommand;
                _this._updateLabel();
                _this._updateTooltip();
                _this._updateClass();
            }
        };
        this._callOnDispose.push(_altKey.event(function (value) {
            altDown = value;
            updateAltState();
        }));
        this._callOnDispose.push(event_1.domEvent(container, 'mouseleave')(function (_) {
            mouseOver = false;
            updateAltState();
        }));
        this._callOnDispose.push(event_1.domEvent(container, 'mouseenter')(function (e) {
            mouseOver = true;
            updateAltState();
        }));
    };
    MenuItemActionItem.prototype._updateLabel = function () {
        if (this.options.label) {
            this.$e.text(this._command.title);
        }
    };
    MenuItemActionItem.prototype._updateTooltip = function () {
        var element = this.$e.getHTMLElement();
        var keybinding = this._keybindingService.lookupKeybindings(this._command.id)[0];
        var keybindingLabel = keybinding && this._keybindingService.getLabelFor(keybinding);
        element.title = keybindingLabel
            ? nls_1.localize('titleAndKb', "{0} ({1})", this._command.title, keybindingLabel)
            : this._command.title;
    };
    MenuItemActionItem.prototype._updateClass = function () {
        if (this.options.icon) {
            var element = this.$e.getHTMLElement();
            var _a = this._action, command = _a.command, altCommand = _a.altCommand;
            if (this._command !== command) {
                element.classList.remove(command.iconClass);
            }
            else if (altCommand) {
                element.classList.remove(altCommand.iconClass);
            }
            element.classList.add('icon', this._command.iconClass);
        }
    };
    MenuItemActionItem = __decorate([
        __param(1, keybinding_1.IKeybindingService),
        __param(2, message_1.IMessageService)
    ], MenuItemActionItem);
    return MenuItemActionItem;
}(actionbar_1.ActionItem));
