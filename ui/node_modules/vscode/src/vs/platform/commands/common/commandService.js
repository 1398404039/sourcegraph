/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var winjs_base_1 = require('vs/base/common/winjs.base');
var instantiation_1 = require('vs/platform/instantiation/common/instantiation');
var commands_1 = require('vs/platform/commands/common/commands');
var extensions_1 = require('vs/platform/extensions/common/extensions');
var CommandService = (function () {
    function CommandService(_instantiationService, _extensionService) {
        var _this = this;
        this._instantiationService = _instantiationService;
        this._extensionService = _extensionService;
        this._extensionHostIsReady = false;
        this._extensionService.onReady().then(function (value) { return _this._extensionHostIsReady = value; });
    }
    CommandService.prototype.executeCommand = function (id) {
        // we always send an activation event, but
        // we don't wait for it when the extension
        // host didn't yet start
        var _this = this;
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var activation = this._extensionService.activateByEvent("onCommand:" + id);
        return this._extensionHostIsReady
            ? activation.then(function (_) { return _this._tryExecuteCommand(id, args); })
            : this._tryExecuteCommand(id, args);
    };
    CommandService.prototype._tryExecuteCommand = function (id, args) {
        var command = this._getCommand(id);
        if (!command) {
            return winjs_base_1.TPromise.wrapError(new Error("command '" + id + "' not found"));
        }
        try {
            var result = this._instantiationService.invokeFunction.apply(this._instantiationService, [command.handler].concat(args));
            return winjs_base_1.TPromise.as(result);
        }
        catch (err) {
            return winjs_base_1.TPromise.wrapError(err);
        }
    };
    CommandService.prototype._getCommand = function (id) {
        return commands_1.CommandsRegistry.getCommand(id);
    };
    CommandService = __decorate([
        __param(0, instantiation_1.IInstantiationService),
        __param(1, extensions_1.IExtensionService)
    ], CommandService);
    return CommandService;
}());
exports.CommandService = CommandService;
