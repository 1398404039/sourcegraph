/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var event_1 = require("vs/base/common/event");
var WatchDog = (function () {
    function WatchDog(timeout, threshold) {
        this._onAlert = new event_1.Emitter();
        this._timeout = timeout;
        this._threshold = threshold;
    }
    WatchDog.prototype.dispose = function () {
        this.stop();
    };
    Object.defineProperty(WatchDog.prototype, "onAlert", {
        get: function () {
            return this._onAlert.event;
        },
        enumerable: true,
        configurable: true
    });
    WatchDog.prototype.start = function () {
        this.reset();
        this._handle = setInterval(this._check.bind(this), this._timeout * 1.5);
    };
    WatchDog.prototype.stop = function () {
        clearInterval(this._handle);
    };
    WatchDog.prototype.reset = function () {
        this._lastSignal = Date.now();
        this._missed = 0;
    };
    WatchDog.prototype._check = function () {
        if ((Date.now() - this._lastSignal) > this._timeout) {
            this._missed += 1;
            if (this._missed > this._threshold) {
                this._onAlert.fire(this);
                this._missed = 0;
            }
        }
    };
    return WatchDog;
}());
exports.WatchDog = WatchDog;
