/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var Platform = require("vs/base/common/platform");
var errors = require("vs/base/common/errors");
var precision = require("vs/base/common/stopwatch");
exports.ENABLE_TIMER = false;
var msWriteProfilerMark = Platform.globals['msWriteProfilerMark'];
var Topic;
(function (Topic) {
    Topic[Topic["EDITOR"] = 0] = "EDITOR";
    Topic[Topic["LANGUAGES"] = 1] = "LANGUAGES";
    Topic[Topic["WORKER"] = 2] = "WORKER";
    Topic[Topic["WORKBENCH"] = 3] = "WORKBENCH";
    Topic[Topic["STARTUP"] = 4] = "STARTUP";
})(Topic = exports.Topic || (exports.Topic = {}));
var NullTimerEvent = (function () {
    function NullTimerEvent() {
    }
    NullTimerEvent.prototype.stop = function () {
        return;
    };
    NullTimerEvent.prototype.timeTaken = function () {
        return -1;
    };
    return NullTimerEvent;
}());
var TimerEvent = (function () {
    function TimerEvent(timeKeeper, name, topic, startTime, description) {
        this.timeKeeper = timeKeeper;
        this.name = name;
        this.description = description;
        this.topic = topic;
        this.stopTime = null;
        if (startTime) {
            this.startTime = startTime;
            return;
        }
        this.startTime = new Date();
        this.sw = precision.StopWatch.create();
        if (msWriteProfilerMark) {
            var profilerName = ['Monaco', this.topic, this.name, 'start'];
            msWriteProfilerMark(profilerName.join('|'));
        }
    }
    TimerEvent.prototype.stop = function (stopTime) {
        // already stopped
        if (this.stopTime !== null) {
            return;
        }
        if (stopTime) {
            this.stopTime = stopTime;
            this.sw = null;
            this.timeKeeper._onEventStopped(this);
            return;
        }
        this.stopTime = new Date();
        if (this.sw) {
            this.sw.stop();
        }
        this.timeKeeper._onEventStopped(this);
        if (msWriteProfilerMark) {
            var profilerName = ['Monaco', this.topic, this.name, 'stop'];
            msWriteProfilerMark(profilerName.join('|'));
        }
    };
    TimerEvent.prototype.timeTaken = function () {
        if (this.sw) {
            return this.sw.elapsed();
        }
        if (this.stopTime) {
            return this.stopTime.getTime() - this.startTime.getTime();
        }
        return -1;
    };
    return TimerEvent;
}());
var TimeKeeper = (function () {
    function TimeKeeper() {
        this.cleaningIntervalId = -1;
        this.collectedEvents = [];
        this.listeners = [];
    }
    TimeKeeper.prototype.isEnabled = function () {
        return exports.ENABLE_TIMER;
    };
    TimeKeeper.prototype.start = function (topic, name, start, description) {
        if (!this.isEnabled()) {
            return exports.nullEvent;
        }
        var strTopic;
        if (typeof topic === 'string') {
            strTopic = topic;
        }
        else if (topic === Topic.EDITOR) {
            strTopic = 'Editor';
        }
        else if (topic === Topic.LANGUAGES) {
            strTopic = 'Languages';
        }
        else if (topic === Topic.WORKER) {
            strTopic = 'Worker';
        }
        else if (topic === Topic.WORKBENCH) {
            strTopic = 'Workbench';
        }
        else if (topic === Topic.STARTUP) {
            strTopic = 'Startup';
        }
        this.initAutoCleaning();
        var event = new TimerEvent(this, name, strTopic, start, description);
        this.addEvent(event);
        return event;
    };
    TimeKeeper.prototype.dispose = function () {
        if (this.cleaningIntervalId !== -1) {
            Platform.clearInterval(this.cleaningIntervalId);
            this.cleaningIntervalId = -1;
        }
    };
    TimeKeeper.prototype.addListener = function (listener) {
        var _this = this;
        this.listeners.push(listener);
        return {
            dispose: function () {
                for (var i = 0; i < _this.listeners.length; i++) {
                    if (_this.listeners[i] === listener) {
                        _this.listeners.splice(i, 1);
                        return;
                    }
                }
            }
        };
    };
    TimeKeeper.prototype.addEvent = function (event) {
        event.id = TimeKeeper.EVENT_ID;
        TimeKeeper.EVENT_ID++;
        this.collectedEvents.push(event);
        // expire items from the front of the cache
        if (this.collectedEvents.length > TimeKeeper._EVENT_CACHE_LIMIT) {
            this.collectedEvents.shift();
        }
    };
    TimeKeeper.prototype.initAutoCleaning = function () {
        var _this = this;
        if (this.cleaningIntervalId === -1) {
            this.cleaningIntervalId = Platform.setInterval(function () {
                var now = Date.now();
                _this.collectedEvents.forEach(function (event) {
                    if (!event.stopTime && (now - event.startTime.getTime()) >= TimeKeeper._MAX_TIMER_LENGTH) {
                        event.stop();
                    }
                });
            }, TimeKeeper._CLEAN_UP_INTERVAL);
        }
    };
    TimeKeeper.prototype.getCollectedEvents = function () {
        return this.collectedEvents.slice(0);
    };
    TimeKeeper.prototype.clearCollectedEvents = function () {
        this.collectedEvents = [];
    };
    TimeKeeper.prototype._onEventStopped = function (event) {
        var emitEvents = [event];
        var listeners = this.listeners.slice(0);
        for (var i = 0; i < listeners.length; i++) {
            try {
                listeners[i](emitEvents);
            }
            catch (e) {
                errors.onUnexpectedError(e);
            }
        }
    };
    TimeKeeper.prototype.setInitialCollectedEvents = function (events, startTime) {
        var _this = this;
        if (!this.isEnabled()) {
            return;
        }
        if (startTime) {
            TimeKeeper.PARSE_TIME = startTime;
        }
        events.forEach(function (event) {
            var e = new TimerEvent(_this, event.name, event.topic, event.startTime, event.description);
            e.stop(event.stopTime);
            _this.addEvent(e);
        });
    };
    return TimeKeeper;
}());
/**
 * After being started for 1 minute, all timers are automatically stopped.
 */
TimeKeeper._MAX_TIMER_LENGTH = 60000; // 1 minute
/**
 * Every 2 minutes, a sweep of current started timers is done.
 */
TimeKeeper._CLEAN_UP_INTERVAL = 120000; // 2 minutes
/**
 * Collect at most 1000 events.
 */
TimeKeeper._EVENT_CACHE_LIMIT = 1000;
TimeKeeper.EVENT_ID = 1;
TimeKeeper.PARSE_TIME = new Date();
exports.TimeKeeper = TimeKeeper;
var timeKeeper = new TimeKeeper();
exports.nullEvent = new NullTimerEvent();
function start(topic, name, start, description) {
    return timeKeeper.start(topic, name, start, description);
}
exports.start = start;
function getTimeKeeper() {
    return timeKeeper;
}
exports.getTimeKeeper = getTimeKeeper;
