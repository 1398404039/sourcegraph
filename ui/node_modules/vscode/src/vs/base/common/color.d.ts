export interface RGBA {
    r: number;
    g: number;
    b: number;
    a: number;
}
export interface HSLA {
    h: number;
    s: number;
    l: number;
    a: number;
}
export declare class Color {
    private rgba;
    private hsla;
    private str;
    constructor(arg: string | RGBA);
    /**
     * http://www.w3.org/TR/WCAG20/#relativeluminancedef
     * Returns the number in the set [0, 1]. O => Darkest Black. 1 => Lightest white.
     */
    getLuminosity(): number;
    /**
     * http://www.w3.org/TR/WCAG20/#contrast-ratiodef
     * Returns the contrast ration number in the set [1, 21].
     */
    getContrast(another: Color): number;
    /**
     *	http://24ways.org/2010/calculating-color-contrast
     *  Return 'true' if darker color otherwise 'false'
     */
    isDarker(): boolean;
    /**
     *	http://24ways.org/2010/calculating-color-contrast
     *  Return 'true' if lighter color otherwise 'false'
     */
    isLighter(): boolean;
    isLighterThan(another: Color): boolean;
    isDarkerThan(another: Color): boolean;
    lighten(factor: number): Color;
    darken(factor: number): Color;
    transparent(factor: number): Color;
    opposite(): Color;
    toString(): string;
    toHSLA(): HSLA;
    toRGBA(): RGBA;
    static fromRGBA(rgba: RGBA): Color;
    static fromHex(hex: string): Color;
    static fromHSLA(hsla: HSLA): Color;
    static getLighterColor(of: Color, relative: Color, factor?: number): Color;
    static getDarkerColor(of: Color, relative: Color, factor?: number): Color;
}
