import { IHTMLContentElement } from 'vs/base/common/htmlContent';
import { KeyCode } from 'vs/base/common/keyCodes';
export interface ISimplifiedPlatform {
    isMacintosh: boolean;
    isWindows: boolean;
}
export declare class Keybinding {
    /**
     * Format the binding to a format appropiate for rendering in the UI
     */
    private static _toUSLabel(value, Platform);
    /**
     * Format the binding to a format appropiate for placing in an aria-label.
     */
    private static _toUSAriaLabel(value, Platform);
    /**
     * Format the binding to a format appropiate for rendering in the UI
     */
    private static _toUSHTMLLabel(value, Platform);
    /**
     * Format the binding to a format appropiate for rendering in the UI
     */
    private static _toCustomLabel(value, labelProvider, Platform);
    /**
     * Format the binding to a format appropiate for rendering in the UI
     */
    private static _toCustomHTMLLabel(value, labelProvider, Platform);
    /**
     * This prints the binding in a format suitable for electron's accelerators.
     * See https://github.com/electron/electron/blob/master/docs/api/accelerator.md
     */
    private static _toElectronAccelerator(value, Platform);
    private static _cachedKeybindingRegex;
    static getUserSettingsKeybindingRegex(): string;
    /**
     * Format the binding to a format appropiate for the user settings file.
     */
    static toUserSettingsLabel(value: number, Platform?: ISimplifiedPlatform): string;
    static fromUserSettingsLabel(input: string, Platform?: ISimplifiedPlatform): number;
    value: number;
    constructor(keybinding: number);
    hasCtrlCmd(): boolean;
    hasShift(): boolean;
    hasAlt(): boolean;
    hasWinCtrl(): boolean;
    extractKeyCode(): KeyCode;
    /**
     * Format the binding to a format appropiate for rendering in the UI
     */
    _toUSLabel(Platform?: ISimplifiedPlatform): string;
    /**
     * Format the binding to a format appropiate for placing in an aria-label.
     */
    _toUSAriaLabel(Platform?: ISimplifiedPlatform): string;
    /**
     * Format the binding to a format appropiate for rendering in the UI
     */
    _toUSHTMLLabel(Platform?: ISimplifiedPlatform): IHTMLContentElement[];
    /**
     * Format the binding to a format appropiate for rendering in the UI
     */
    toCustomLabel(labelProvider: IKeyBindingLabelProvider, Platform?: ISimplifiedPlatform): string;
    /**
     * Format the binding to a format appropiate for rendering in the UI
     */
    toCustomHTMLLabel(labelProvider: IKeyBindingLabelProvider, Platform?: ISimplifiedPlatform): IHTMLContentElement[];
    /**
     * This prints the binding in a format suitable for electron's accelerators.
     * See https://github.com/electron/electron/blob/master/docs/api/accelerator.md
     */
    _toElectronAccelerator(Platform?: ISimplifiedPlatform): string;
    /**
     * Format the binding to a format appropiate for the user settings file.
     */
    toUserSettingsLabel(Platform?: ISimplifiedPlatform): string;
}
export interface IKeyBindingLabelProvider {
    ctrlKeyLabel: string;
    shiftKeyLabel: string;
    altKeyLabel: string;
    cmdKeyLabel: string;
    windowsKeyLabel: string;
    modifierSeparator: string;
    getLabelForKey(keyCode: KeyCode): string;
}
/**
 * Print for Electron
 */
export declare class ElectronAcceleratorLabelProvider implements IKeyBindingLabelProvider {
    static INSTANCE: ElectronAcceleratorLabelProvider;
    ctrlKeyLabel: string;
    shiftKeyLabel: string;
    altKeyLabel: string;
    cmdKeyLabel: string;
    windowsKeyLabel: string;
    modifierSeparator: string;
    getLabelForKey(keyCode: KeyCode): string;
}
/**
 * Print for Mac UI
 */
export declare class MacUIKeyLabelProvider implements IKeyBindingLabelProvider {
    static INSTANCE: MacUIKeyLabelProvider;
    private static leftArrowUnicodeLabel;
    private static upArrowUnicodeLabel;
    private static rightArrowUnicodeLabel;
    private static downArrowUnicodeLabel;
    ctrlKeyLabel: string;
    shiftKeyLabel: string;
    altKeyLabel: string;
    cmdKeyLabel: string;
    windowsKeyLabel: string;
    modifierSeparator: string;
    getLabelForKey(keyCode: KeyCode): string;
}
/**
 * Aria label provider for Mac.
 */
export declare class AriaKeyLabelProvider implements IKeyBindingLabelProvider {
    static INSTANCE: MacUIKeyLabelProvider;
    ctrlKeyLabel: string;
    shiftKeyLabel: string;
    altKeyLabel: string;
    cmdKeyLabel: string;
    windowsKeyLabel: string;
    modifierSeparator: string;
    getLabelForKey(keyCode: KeyCode): string;
}
/**
 * Print for Windows, Linux UI
 */
export declare class ClassicUIKeyLabelProvider implements IKeyBindingLabelProvider {
    static INSTANCE: ClassicUIKeyLabelProvider;
    ctrlKeyLabel: string;
    shiftKeyLabel: string;
    altKeyLabel: string;
    cmdKeyLabel: string;
    windowsKeyLabel: string;
    modifierSeparator: string;
    getLabelForKey(keyCode: KeyCode): string;
}
