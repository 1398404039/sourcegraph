/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
var Object = require('vs/base/common/objects');
/**
 * Converts an Hex color value to RGB.
 * returns r, g, and b are contained in the set [0, 255]
 */
function hex2rgba(hex) {
    function parseHex(str) {
        return parseInt('0x' + str);
    }
    if (hex.charAt(0) === '#' && hex.length >= 7) {
        var r = parseHex(hex.substr(1, 2));
        var g = parseHex(hex.substr(3, 2));
        var b = parseHex(hex.substr(5, 2));
        var a = hex.length === 9 ? parseHex(hex.substr(7, 2)) / 0xff : 1;
        return { r: r, g: g, b: b, a: a };
    }
    return { r: 255, g: 0, b: 0, a: 1 };
}
/**
 * Converts an RGB color value to HSL. Conversion formula
 * adapted from http://en.wikipedia.org/wiki/HSL_color_space.
 * Assumes r, g, and b are contained in the set [0, 255] and
 * returns h in the set [0, 360], s, and l in the set [0, 1].
 */
function rgba2hsla(rgba) {
    var r = rgba.r / 255;
    var g = rgba.g / 255;
    var b = rgba.b / 255;
    var a = rgba.a === void 0 ? rgba.a : 1;
    var max = Math.max(r, g, b), min = Math.min(r, g, b);
    var h = 0, s = 0, l = Math.round(((min + max) / 2) * 1000) / 1000, chroma = max - min;
    if (chroma > 0) {
        s = Math.min(Math.round((l <= 0.5 ? chroma / (2 * l) : chroma / (2 - (2 * l))) * 1000) / 1000, 1);
        switch (max) {
            case r:
                h = (g - b) / chroma + (g < b ? 6 : 0);
                break;
            case g:
                h = (b - r) / chroma + 2;
                break;
            case b:
                h = (r - g) / chroma + 4;
                break;
        }
        h *= 60;
        h = Math.round(h);
    }
    return { h: h, s: s, l: l, a: a };
}
/**
 * Converts an HSL color value to RGB. Conversion formula
 * adapted from http://en.wikipedia.org/wiki/HSL_color_space.
 * Assumes h in the set [0, 360] s, and l are contained in the set [0, 1] and
 * returns r, g, and b in the set [0, 255].
 */
function hsla2rgba(hsla) {
    var h = hsla.h / 360;
    var s = Math.min(hsla.s, 1);
    var l = Math.min(hsla.l, 1);
    var a = hsla.a === void 0 ? hsla.a : 1;
    var r, g, b;
    if (s === 0) {
        r = g = b = l; // achromatic
    }
    else {
        var hue2rgb = function hue2rgb(p, q, t) {
            if (t < 0) {
                t += 1;
            }
            if (t > 1) {
                t -= 1;
            }
            if (t < 1 / 6) {
                return p + (q - p) * 6 * t;
            }
            if (t < 1 / 2) {
                return q;
            }
            if (t < 2 / 3) {
                return p + (q - p) * (2 / 3 - t) * 6;
            }
            return p;
        };
        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
        var p = 2 * l - q;
        r = hue2rgb(p, q, h + 1 / 3);
        g = hue2rgb(p, q, h);
        b = hue2rgb(p, q, h - 1 / 3);
    }
    return { r: Math.round(r * 255), g: Math.round(g * 255), b: Math.round(b * 255), a: a };
}
var Color = (function () {
    function Color(arg) {
        this.rgba = typeof arg === 'string' ? hex2rgba(arg) : arg;
        this.str = null;
    }
    /**
     * http://www.w3.org/TR/WCAG20/#relativeluminancedef
     * Returns the number in the set [0, 1]. O => Darkest Black. 1 => Lightest white.
     */
    Color.prototype.getLuminosity = function () {
        var luminosityFor = function (color) {
            var c = color / 255;
            return (c <= 0.03928) ? c / 12.92 : Math.pow(((c + 0.055) / 1.055), 2.4);
        };
        var R = luminosityFor(this.rgba.r);
        var G = luminosityFor(this.rgba.g);
        var B = luminosityFor(this.rgba.b);
        var luminosity = 0.2126 * R + 0.7152 * G + 0.0722 * B;
        return Math.round(luminosity * 10000) / 10000;
    };
    /**
     * http://www.w3.org/TR/WCAG20/#contrast-ratiodef
     * Returns the contrast ration number in the set [1, 21].
     */
    Color.prototype.getContrast = function (another) {
        var lum1 = this.getLuminosity();
        var lum2 = another.getLuminosity();
        return lum1 > lum2 ? (lum1 + 0.05) / (lum2 + 0.05) : (lum2 + 0.05) / (lum1 + 0.05);
    };
    /**
     *	http://24ways.org/2010/calculating-color-contrast
     *  Return 'true' if darker color otherwise 'false'
     */
    Color.prototype.isDarker = function () {
        var yiq = (this.rgba.r * 299 + this.rgba.g * 587 + this.rgba.b * 114) / 1000;
        return yiq < 128;
    };
    /**
     *	http://24ways.org/2010/calculating-color-contrast
     *  Return 'true' if lighter color otherwise 'false'
     */
    Color.prototype.isLighter = function () {
        var yiq = (this.rgba.r * 299 + this.rgba.g * 587 + this.rgba.b * 114) / 1000;
        return yiq >= 128;
    };
    Color.prototype.isLighterThan = function (another) {
        var lum1 = this.getLuminosity();
        var lum2 = another.getLuminosity();
        return lum1 > lum2;
    };
    Color.prototype.isDarkerThan = function (another) {
        var lum1 = this.getLuminosity();
        var lum2 = another.getLuminosity();
        return lum1 < lum2;
    };
    Color.prototype.lighten = function (factor) {
        var hsl = this.toHSLA();
        hsl.l += hsl.l * factor;
        return new Color(hsla2rgba(hsl));
    };
    Color.prototype.darken = function (factor) {
        var hsl = this.toHSLA();
        hsl.l -= hsl.l * factor;
        return new Color(hsla2rgba(hsl));
    };
    Color.prototype.transparent = function (factor) {
        var p = this.rgba;
        return new Color({ r: p.r, g: p.g, b: p.b, a: p.a * factor });
    };
    Color.prototype.opposite = function () {
        return new Color({
            r: 255 - this.rgba.r,
            g: 255 - this.rgba.g,
            b: 255 - this.rgba.b,
            a: this.rgba.a
        });
    };
    Color.prototype.toString = function () {
        if (!this.str) {
            var p = this.rgba;
            this.str = "rgba(" + p.r + ", " + p.g + ", " + p.b + ", " + +p.a.toFixed(2) + ")";
        }
        return this.str;
    };
    Color.prototype.toHSLA = function () {
        if (!this.hsla) {
            this.hsla = rgba2hsla(this.rgba);
        }
        return Object.clone(this.hsla);
    };
    Color.prototype.toRGBA = function () {
        return Object.clone(this.rgba);
    };
    Color.fromRGBA = function (rgba) {
        return new Color(rgba);
    };
    Color.fromHex = function (hex) {
        return new Color(hex);
    };
    Color.fromHSLA = function (hsla) {
        return new Color(hsla2rgba(hsla));
    };
    Color.getLighterColor = function (of, relative, factor) {
        if (of.isLighterThan(relative)) {
            return of;
        }
        factor = factor ? factor : 0.5;
        var lum1 = of.getLuminosity(), lum2 = relative.getLuminosity();
        factor = factor * (lum2 - lum1) / lum2;
        return of.lighten(factor);
    };
    Color.getDarkerColor = function (of, relative, factor) {
        if (of.isDarkerThan(relative)) {
            return of;
        }
        factor = factor ? factor : 0.5;
        var lum1 = of.getLuminosity(), lum2 = relative.getLuminosity();
        factor = factor * (lum1 - lum2) / lum1;
        return of.darken(factor);
    };
    return Color;
}());
exports.Color = Color;
