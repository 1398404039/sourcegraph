/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
/**
 * Virtual Key Codes, the value does not hold any inherent meaning.
 * Inspired somewhat from https://msdn.microsoft.com/en-us/library/windows/desktop/dd375731(v=vs.85).aspx
 * But these are "more general", as they should work across browsers & OS`s.
 */
(function (KeyCode) {
    /**
     * Placed first to cover the 0 value of the enum.
     */
    KeyCode[KeyCode["Unknown"] = 0] = "Unknown";
    KeyCode[KeyCode["Backspace"] = 1] = "Backspace";
    KeyCode[KeyCode["Tab"] = 2] = "Tab";
    KeyCode[KeyCode["Enter"] = 3] = "Enter";
    KeyCode[KeyCode["Shift"] = 4] = "Shift";
    KeyCode[KeyCode["Ctrl"] = 5] = "Ctrl";
    KeyCode[KeyCode["Alt"] = 6] = "Alt";
    KeyCode[KeyCode["PauseBreak"] = 7] = "PauseBreak";
    KeyCode[KeyCode["CapsLock"] = 8] = "CapsLock";
    KeyCode[KeyCode["Escape"] = 9] = "Escape";
    KeyCode[KeyCode["Space"] = 10] = "Space";
    KeyCode[KeyCode["PageUp"] = 11] = "PageUp";
    KeyCode[KeyCode["PageDown"] = 12] = "PageDown";
    KeyCode[KeyCode["End"] = 13] = "End";
    KeyCode[KeyCode["Home"] = 14] = "Home";
    KeyCode[KeyCode["LeftArrow"] = 15] = "LeftArrow";
    KeyCode[KeyCode["UpArrow"] = 16] = "UpArrow";
    KeyCode[KeyCode["RightArrow"] = 17] = "RightArrow";
    KeyCode[KeyCode["DownArrow"] = 18] = "DownArrow";
    KeyCode[KeyCode["Insert"] = 19] = "Insert";
    KeyCode[KeyCode["Delete"] = 20] = "Delete";
    KeyCode[KeyCode["KEY_0"] = 21] = "KEY_0";
    KeyCode[KeyCode["KEY_1"] = 22] = "KEY_1";
    KeyCode[KeyCode["KEY_2"] = 23] = "KEY_2";
    KeyCode[KeyCode["KEY_3"] = 24] = "KEY_3";
    KeyCode[KeyCode["KEY_4"] = 25] = "KEY_4";
    KeyCode[KeyCode["KEY_5"] = 26] = "KEY_5";
    KeyCode[KeyCode["KEY_6"] = 27] = "KEY_6";
    KeyCode[KeyCode["KEY_7"] = 28] = "KEY_7";
    KeyCode[KeyCode["KEY_8"] = 29] = "KEY_8";
    KeyCode[KeyCode["KEY_9"] = 30] = "KEY_9";
    KeyCode[KeyCode["KEY_A"] = 31] = "KEY_A";
    KeyCode[KeyCode["KEY_B"] = 32] = "KEY_B";
    KeyCode[KeyCode["KEY_C"] = 33] = "KEY_C";
    KeyCode[KeyCode["KEY_D"] = 34] = "KEY_D";
    KeyCode[KeyCode["KEY_E"] = 35] = "KEY_E";
    KeyCode[KeyCode["KEY_F"] = 36] = "KEY_F";
    KeyCode[KeyCode["KEY_G"] = 37] = "KEY_G";
    KeyCode[KeyCode["KEY_H"] = 38] = "KEY_H";
    KeyCode[KeyCode["KEY_I"] = 39] = "KEY_I";
    KeyCode[KeyCode["KEY_J"] = 40] = "KEY_J";
    KeyCode[KeyCode["KEY_K"] = 41] = "KEY_K";
    KeyCode[KeyCode["KEY_L"] = 42] = "KEY_L";
    KeyCode[KeyCode["KEY_M"] = 43] = "KEY_M";
    KeyCode[KeyCode["KEY_N"] = 44] = "KEY_N";
    KeyCode[KeyCode["KEY_O"] = 45] = "KEY_O";
    KeyCode[KeyCode["KEY_P"] = 46] = "KEY_P";
    KeyCode[KeyCode["KEY_Q"] = 47] = "KEY_Q";
    KeyCode[KeyCode["KEY_R"] = 48] = "KEY_R";
    KeyCode[KeyCode["KEY_S"] = 49] = "KEY_S";
    KeyCode[KeyCode["KEY_T"] = 50] = "KEY_T";
    KeyCode[KeyCode["KEY_U"] = 51] = "KEY_U";
    KeyCode[KeyCode["KEY_V"] = 52] = "KEY_V";
    KeyCode[KeyCode["KEY_W"] = 53] = "KEY_W";
    KeyCode[KeyCode["KEY_X"] = 54] = "KEY_X";
    KeyCode[KeyCode["KEY_Y"] = 55] = "KEY_Y";
    KeyCode[KeyCode["KEY_Z"] = 56] = "KEY_Z";
    KeyCode[KeyCode["Meta"] = 57] = "Meta";
    KeyCode[KeyCode["ContextMenu"] = 58] = "ContextMenu";
    KeyCode[KeyCode["F1"] = 59] = "F1";
    KeyCode[KeyCode["F2"] = 60] = "F2";
    KeyCode[KeyCode["F3"] = 61] = "F3";
    KeyCode[KeyCode["F4"] = 62] = "F4";
    KeyCode[KeyCode["F5"] = 63] = "F5";
    KeyCode[KeyCode["F6"] = 64] = "F6";
    KeyCode[KeyCode["F7"] = 65] = "F7";
    KeyCode[KeyCode["F8"] = 66] = "F8";
    KeyCode[KeyCode["F9"] = 67] = "F9";
    KeyCode[KeyCode["F10"] = 68] = "F10";
    KeyCode[KeyCode["F11"] = 69] = "F11";
    KeyCode[KeyCode["F12"] = 70] = "F12";
    KeyCode[KeyCode["F13"] = 71] = "F13";
    KeyCode[KeyCode["F14"] = 72] = "F14";
    KeyCode[KeyCode["F15"] = 73] = "F15";
    KeyCode[KeyCode["F16"] = 74] = "F16";
    KeyCode[KeyCode["F17"] = 75] = "F17";
    KeyCode[KeyCode["F18"] = 76] = "F18";
    KeyCode[KeyCode["F19"] = 77] = "F19";
    KeyCode[KeyCode["NumLock"] = 78] = "NumLock";
    KeyCode[KeyCode["ScrollLock"] = 79] = "ScrollLock";
    /**
     * Used for miscellaneous characters; it can vary by keyboard.
     * For the US standard keyboard, the ';:' key
     */
    KeyCode[KeyCode["US_SEMICOLON"] = 80] = "US_SEMICOLON";
    /**
     * For any country/region, the '+' key
     * For the US standard keyboard, the '=+' key
     */
    KeyCode[KeyCode["US_EQUAL"] = 81] = "US_EQUAL";
    /**
     * For any country/region, the ',' key
     * For the US standard keyboard, the ',<' key
     */
    KeyCode[KeyCode["US_COMMA"] = 82] = "US_COMMA";
    /**
     * For any country/region, the '-' key
     * For the US standard keyboard, the '-_' key
     */
    KeyCode[KeyCode["US_MINUS"] = 83] = "US_MINUS";
    /**
     * For any country/region, the '.' key
     * For the US standard keyboard, the '.>' key
     */
    KeyCode[KeyCode["US_DOT"] = 84] = "US_DOT";
    /**
     * Used for miscellaneous characters; it can vary by keyboard.
     * For the US standard keyboard, the '/?' key
     */
    KeyCode[KeyCode["US_SLASH"] = 85] = "US_SLASH";
    /**
     * Used for miscellaneous characters; it can vary by keyboard.
     * For the US standard keyboard, the '`~' key
     */
    KeyCode[KeyCode["US_BACKTICK"] = 86] = "US_BACKTICK";
    /**
     * Used for miscellaneous characters; it can vary by keyboard.
     * For the US standard keyboard, the '[{' key
     */
    KeyCode[KeyCode["US_OPEN_SQUARE_BRACKET"] = 87] = "US_OPEN_SQUARE_BRACKET";
    /**
     * Used for miscellaneous characters; it can vary by keyboard.
     * For the US standard keyboard, the '\|' key
     */
    KeyCode[KeyCode["US_BACKSLASH"] = 88] = "US_BACKSLASH";
    /**
     * Used for miscellaneous characters; it can vary by keyboard.
     * For the US standard keyboard, the ']}' key
     */
    KeyCode[KeyCode["US_CLOSE_SQUARE_BRACKET"] = 89] = "US_CLOSE_SQUARE_BRACKET";
    /**
     * Used for miscellaneous characters; it can vary by keyboard.
     * For the US standard keyboard, the ''"' key
     */
    KeyCode[KeyCode["US_QUOTE"] = 90] = "US_QUOTE";
    /**
     * Used for miscellaneous characters; it can vary by keyboard.
     */
    KeyCode[KeyCode["OEM_8"] = 91] = "OEM_8";
    /**
     * Either the angle bracket key or the backslash key on the RT 102-key keyboard.
     */
    KeyCode[KeyCode["OEM_102"] = 92] = "OEM_102";
    KeyCode[KeyCode["NUMPAD_0"] = 93] = "NUMPAD_0";
    KeyCode[KeyCode["NUMPAD_1"] = 94] = "NUMPAD_1";
    KeyCode[KeyCode["NUMPAD_2"] = 95] = "NUMPAD_2";
    KeyCode[KeyCode["NUMPAD_3"] = 96] = "NUMPAD_3";
    KeyCode[KeyCode["NUMPAD_4"] = 97] = "NUMPAD_4";
    KeyCode[KeyCode["NUMPAD_5"] = 98] = "NUMPAD_5";
    KeyCode[KeyCode["NUMPAD_6"] = 99] = "NUMPAD_6";
    KeyCode[KeyCode["NUMPAD_7"] = 100] = "NUMPAD_7";
    KeyCode[KeyCode["NUMPAD_8"] = 101] = "NUMPAD_8";
    KeyCode[KeyCode["NUMPAD_9"] = 102] = "NUMPAD_9";
    KeyCode[KeyCode["NUMPAD_MULTIPLY"] = 103] = "NUMPAD_MULTIPLY";
    KeyCode[KeyCode["NUMPAD_ADD"] = 104] = "NUMPAD_ADD";
    KeyCode[KeyCode["NUMPAD_SEPARATOR"] = 105] = "NUMPAD_SEPARATOR";
    KeyCode[KeyCode["NUMPAD_SUBTRACT"] = 106] = "NUMPAD_SUBTRACT";
    KeyCode[KeyCode["NUMPAD_DECIMAL"] = 107] = "NUMPAD_DECIMAL";
    KeyCode[KeyCode["NUMPAD_DIVIDE"] = 108] = "NUMPAD_DIVIDE";
    /**
     * Placed last to cover the length of the enum.
     * Please do not depend on this value!
     */
    KeyCode[KeyCode["MAX_VALUE"] = 109] = "MAX_VALUE";
})(exports.KeyCode || (exports.KeyCode = {}));
var KeyCode = exports.KeyCode;
var Mapping = (function () {
    function Mapping(fromKeyCode, toKeyCode) {
        this._fromKeyCode = fromKeyCode;
        this._toKeyCode = toKeyCode;
    }
    Mapping.prototype.fromKeyCode = function (keyCode) {
        return this._fromKeyCode[keyCode];
    };
    Mapping.prototype.toKeyCode = function (str) {
        if (this._toKeyCode.hasOwnProperty(str)) {
            return this._toKeyCode[str];
        }
        return 0 /* Unknown */;
    };
    return Mapping;
}());
exports.Mapping = Mapping;
function createMapping(fill1, fill2) {
    var MAP = [];
    fill1(MAP);
    var REVERSE_MAP = {};
    for (var i = 0, len = MAP.length; i < len; i++) {
        if (!MAP[i]) {
            continue;
        }
        REVERSE_MAP[MAP[i]] = i;
    }
    fill2(REVERSE_MAP);
    var FINAL_REVERSE_MAP = {};
    for (var entry in REVERSE_MAP) {
        if (REVERSE_MAP.hasOwnProperty(entry)) {
            FINAL_REVERSE_MAP[entry] = REVERSE_MAP[entry];
            FINAL_REVERSE_MAP[entry.toLowerCase()] = REVERSE_MAP[entry];
        }
    }
    return new Mapping(MAP, FINAL_REVERSE_MAP);
}
var STRING = createMapping(function (TO_STRING_MAP) {
    TO_STRING_MAP[0 /* Unknown */] = 'unknown';
    TO_STRING_MAP[1 /* Backspace */] = 'Backspace';
    TO_STRING_MAP[2 /* Tab */] = 'Tab';
    TO_STRING_MAP[3 /* Enter */] = 'Enter';
    TO_STRING_MAP[4 /* Shift */] = 'Shift';
    TO_STRING_MAP[5 /* Ctrl */] = 'Ctrl';
    TO_STRING_MAP[6 /* Alt */] = 'Alt';
    TO_STRING_MAP[7 /* PauseBreak */] = 'PauseBreak';
    TO_STRING_MAP[8 /* CapsLock */] = 'CapsLock';
    TO_STRING_MAP[9 /* Escape */] = 'Escape';
    TO_STRING_MAP[10 /* Space */] = 'Space';
    TO_STRING_MAP[11 /* PageUp */] = 'PageUp';
    TO_STRING_MAP[12 /* PageDown */] = 'PageDown';
    TO_STRING_MAP[13 /* End */] = 'End';
    TO_STRING_MAP[14 /* Home */] = 'Home';
    TO_STRING_MAP[15 /* LeftArrow */] = 'LeftArrow';
    TO_STRING_MAP[16 /* UpArrow */] = 'UpArrow';
    TO_STRING_MAP[17 /* RightArrow */] = 'RightArrow';
    TO_STRING_MAP[18 /* DownArrow */] = 'DownArrow';
    TO_STRING_MAP[19 /* Insert */] = 'Insert';
    TO_STRING_MAP[20 /* Delete */] = 'Delete';
    TO_STRING_MAP[21 /* KEY_0 */] = '0';
    TO_STRING_MAP[22 /* KEY_1 */] = '1';
    TO_STRING_MAP[23 /* KEY_2 */] = '2';
    TO_STRING_MAP[24 /* KEY_3 */] = '3';
    TO_STRING_MAP[25 /* KEY_4 */] = '4';
    TO_STRING_MAP[26 /* KEY_5 */] = '5';
    TO_STRING_MAP[27 /* KEY_6 */] = '6';
    TO_STRING_MAP[28 /* KEY_7 */] = '7';
    TO_STRING_MAP[29 /* KEY_8 */] = '8';
    TO_STRING_MAP[30 /* KEY_9 */] = '9';
    TO_STRING_MAP[31 /* KEY_A */] = 'A';
    TO_STRING_MAP[32 /* KEY_B */] = 'B';
    TO_STRING_MAP[33 /* KEY_C */] = 'C';
    TO_STRING_MAP[34 /* KEY_D */] = 'D';
    TO_STRING_MAP[35 /* KEY_E */] = 'E';
    TO_STRING_MAP[36 /* KEY_F */] = 'F';
    TO_STRING_MAP[37 /* KEY_G */] = 'G';
    TO_STRING_MAP[38 /* KEY_H */] = 'H';
    TO_STRING_MAP[39 /* KEY_I */] = 'I';
    TO_STRING_MAP[40 /* KEY_J */] = 'J';
    TO_STRING_MAP[41 /* KEY_K */] = 'K';
    TO_STRING_MAP[42 /* KEY_L */] = 'L';
    TO_STRING_MAP[43 /* KEY_M */] = 'M';
    TO_STRING_MAP[44 /* KEY_N */] = 'N';
    TO_STRING_MAP[45 /* KEY_O */] = 'O';
    TO_STRING_MAP[46 /* KEY_P */] = 'P';
    TO_STRING_MAP[47 /* KEY_Q */] = 'Q';
    TO_STRING_MAP[48 /* KEY_R */] = 'R';
    TO_STRING_MAP[49 /* KEY_S */] = 'S';
    TO_STRING_MAP[50 /* KEY_T */] = 'T';
    TO_STRING_MAP[51 /* KEY_U */] = 'U';
    TO_STRING_MAP[52 /* KEY_V */] = 'V';
    TO_STRING_MAP[53 /* KEY_W */] = 'W';
    TO_STRING_MAP[54 /* KEY_X */] = 'X';
    TO_STRING_MAP[55 /* KEY_Y */] = 'Y';
    TO_STRING_MAP[56 /* KEY_Z */] = 'Z';
    TO_STRING_MAP[58 /* ContextMenu */] = 'ContextMenu';
    TO_STRING_MAP[59 /* F1 */] = 'F1';
    TO_STRING_MAP[60 /* F2 */] = 'F2';
    TO_STRING_MAP[61 /* F3 */] = 'F3';
    TO_STRING_MAP[62 /* F4 */] = 'F4';
    TO_STRING_MAP[63 /* F5 */] = 'F5';
    TO_STRING_MAP[64 /* F6 */] = 'F6';
    TO_STRING_MAP[65 /* F7 */] = 'F7';
    TO_STRING_MAP[66 /* F8 */] = 'F8';
    TO_STRING_MAP[67 /* F9 */] = 'F9';
    TO_STRING_MAP[68 /* F10 */] = 'F10';
    TO_STRING_MAP[69 /* F11 */] = 'F11';
    TO_STRING_MAP[70 /* F12 */] = 'F12';
    TO_STRING_MAP[71 /* F13 */] = 'F13';
    TO_STRING_MAP[72 /* F14 */] = 'F14';
    TO_STRING_MAP[73 /* F15 */] = 'F15';
    TO_STRING_MAP[74 /* F16 */] = 'F16';
    TO_STRING_MAP[75 /* F17 */] = 'F17';
    TO_STRING_MAP[76 /* F18 */] = 'F18';
    TO_STRING_MAP[77 /* F19 */] = 'F19';
    TO_STRING_MAP[78 /* NumLock */] = 'NumLock';
    TO_STRING_MAP[79 /* ScrollLock */] = 'ScrollLock';
    TO_STRING_MAP[80 /* US_SEMICOLON */] = ';';
    TO_STRING_MAP[81 /* US_EQUAL */] = '=';
    TO_STRING_MAP[82 /* US_COMMA */] = ',';
    TO_STRING_MAP[83 /* US_MINUS */] = '-';
    TO_STRING_MAP[84 /* US_DOT */] = '.';
    TO_STRING_MAP[85 /* US_SLASH */] = '/';
    TO_STRING_MAP[86 /* US_BACKTICK */] = '`';
    TO_STRING_MAP[87 /* US_OPEN_SQUARE_BRACKET */] = '[';
    TO_STRING_MAP[88 /* US_BACKSLASH */] = '\\';
    TO_STRING_MAP[89 /* US_CLOSE_SQUARE_BRACKET */] = ']';
    TO_STRING_MAP[90 /* US_QUOTE */] = '\'';
    TO_STRING_MAP[91 /* OEM_8 */] = 'OEM_8';
    TO_STRING_MAP[92 /* OEM_102 */] = 'OEM_102';
    TO_STRING_MAP[93 /* NUMPAD_0 */] = 'NumPad0';
    TO_STRING_MAP[94 /* NUMPAD_1 */] = 'NumPad1';
    TO_STRING_MAP[95 /* NUMPAD_2 */] = 'NumPad2';
    TO_STRING_MAP[96 /* NUMPAD_3 */] = 'NumPad3';
    TO_STRING_MAP[97 /* NUMPAD_4 */] = 'NumPad4';
    TO_STRING_MAP[98 /* NUMPAD_5 */] = 'NumPad5';
    TO_STRING_MAP[99 /* NUMPAD_6 */] = 'NumPad6';
    TO_STRING_MAP[100 /* NUMPAD_7 */] = 'NumPad7';
    TO_STRING_MAP[101 /* NUMPAD_8 */] = 'NumPad8';
    TO_STRING_MAP[102 /* NUMPAD_9 */] = 'NumPad9';
    TO_STRING_MAP[103 /* NUMPAD_MULTIPLY */] = 'NumPad_Multiply';
    TO_STRING_MAP[104 /* NUMPAD_ADD */] = 'NumPad_Add';
    TO_STRING_MAP[105 /* NUMPAD_SEPARATOR */] = 'NumPad_Separator';
    TO_STRING_MAP[106 /* NUMPAD_SUBTRACT */] = 'NumPad_Subtract';
    TO_STRING_MAP[107 /* NUMPAD_DECIMAL */] = 'NumPad_Decimal';
    TO_STRING_MAP[108 /* NUMPAD_DIVIDE */] = 'NumPad_Divide';
    // for (let i = 0; i < KeyCode.MAX_VALUE; i++) {
    // 	if (!TO_STRING_MAP[i]) {
    // 		console.warn('Missing string representation for ' + KeyCode[i]);
    // 	}
    // }
}, function (FROM_STRING_MAP) {
    FROM_STRING_MAP['\r'] = 3 /* Enter */;
});
exports.USER_SETTINGS = createMapping(function (TO_USER_SETTINGS_MAP) {
    for (var i = 0, len = STRING._fromKeyCode.length; i < len; i++) {
        TO_USER_SETTINGS_MAP[i] = STRING._fromKeyCode[i];
    }
    TO_USER_SETTINGS_MAP[15 /* LeftArrow */] = 'Left';
    TO_USER_SETTINGS_MAP[16 /* UpArrow */] = 'Up';
    TO_USER_SETTINGS_MAP[17 /* RightArrow */] = 'Right';
    TO_USER_SETTINGS_MAP[18 /* DownArrow */] = 'Down';
}, function (FROM_USER_SETTINGS_MAP) {
    FROM_USER_SETTINGS_MAP['OEM_1'] = 80 /* US_SEMICOLON */;
    FROM_USER_SETTINGS_MAP['OEM_PLUS'] = 81 /* US_EQUAL */;
    FROM_USER_SETTINGS_MAP['OEM_COMMA'] = 82 /* US_COMMA */;
    FROM_USER_SETTINGS_MAP['OEM_MINUS'] = 83 /* US_MINUS */;
    FROM_USER_SETTINGS_MAP['OEM_PERIOD'] = 84 /* US_DOT */;
    FROM_USER_SETTINGS_MAP['OEM_2'] = 85 /* US_SLASH */;
    FROM_USER_SETTINGS_MAP['OEM_3'] = 86 /* US_BACKTICK */;
    FROM_USER_SETTINGS_MAP['OEM_4'] = 87 /* US_OPEN_SQUARE_BRACKET */;
    FROM_USER_SETTINGS_MAP['OEM_5'] = 88 /* US_BACKSLASH */;
    FROM_USER_SETTINGS_MAP['OEM_6'] = 89 /* US_CLOSE_SQUARE_BRACKET */;
    FROM_USER_SETTINGS_MAP['OEM_7'] = 90 /* US_QUOTE */;
    FROM_USER_SETTINGS_MAP['OEM_8'] = 91 /* OEM_8 */;
    FROM_USER_SETTINGS_MAP['OEM_102'] = 92 /* OEM_102 */;
});
var KeyCodeUtils;
(function (KeyCodeUtils) {
    function toString(key) {
        return STRING.fromKeyCode(key);
    }
    KeyCodeUtils.toString = toString;
    function fromString(key) {
        return STRING.toKeyCode(key);
    }
    KeyCodeUtils.fromString = fromString;
})(KeyCodeUtils = exports.KeyCodeUtils || (exports.KeyCodeUtils = {}));
// Binary encoding strategy:
// 15:  1 bit for ctrlCmd
// 14:  1 bit for shift
// 13:  1 bit for alt
// 12:  1 bit for winCtrl
//  0: 12 bits for keyCode (up to a maximum keyCode of 4096. Given we have 83 at this point thats good enough)
var BinaryKeybindingsMask;
(function (BinaryKeybindingsMask) {
    BinaryKeybindingsMask[BinaryKeybindingsMask["CtrlCmd"] = 32768] = "CtrlCmd";
    BinaryKeybindingsMask[BinaryKeybindingsMask["Shift"] = 16384] = "Shift";
    BinaryKeybindingsMask[BinaryKeybindingsMask["Alt"] = 8192] = "Alt";
    BinaryKeybindingsMask[BinaryKeybindingsMask["WinCtrl"] = 4096] = "WinCtrl";
    BinaryKeybindingsMask[BinaryKeybindingsMask["KeyCode"] = 4095] = "KeyCode";
})(BinaryKeybindingsMask || (BinaryKeybindingsMask = {}));
(function (KeyMod) {
    KeyMod[KeyMod["CtrlCmd"] = 32768] = "CtrlCmd";
    KeyMod[KeyMod["Shift"] = 16384] = "Shift";
    KeyMod[KeyMod["Alt"] = 8192] = "Alt";
    KeyMod[KeyMod["WinCtrl"] = 4096] = "WinCtrl";
})(exports.KeyMod || (exports.KeyMod = {}));
var KeyMod = exports.KeyMod;
function KeyChord(firstPart, secondPart) {
    return firstPart | ((secondPart & 0x0000ffff) << 16);
}
exports.KeyChord = KeyChord;
var BinaryKeybindings = (function () {
    function BinaryKeybindings() {
    }
    BinaryKeybindings.extractFirstPart = function (keybinding) {
        return keybinding & 0x0000ffff;
    };
    BinaryKeybindings.extractChordPart = function (keybinding) {
        return (keybinding >> 16) & 0x0000ffff;
    };
    BinaryKeybindings.hasChord = function (keybinding) {
        return (this.extractChordPart(keybinding) !== 0);
    };
    BinaryKeybindings.hasCtrlCmd = function (keybinding) {
        return (keybinding & 32768 /* CtrlCmd */ ? true : false);
    };
    BinaryKeybindings.hasShift = function (keybinding) {
        return (keybinding & 16384 /* Shift */ ? true : false);
    };
    BinaryKeybindings.hasAlt = function (keybinding) {
        return (keybinding & 8192 /* Alt */ ? true : false);
    };
    BinaryKeybindings.hasWinCtrl = function (keybinding) {
        return (keybinding & 4096 /* WinCtrl */ ? true : false);
    };
    BinaryKeybindings.extractKeyCode = function (keybinding) {
        return (keybinding & 4095 /* KeyCode */);
    };
    return BinaryKeybindings;
}());
exports.BinaryKeybindings = BinaryKeybindings;
