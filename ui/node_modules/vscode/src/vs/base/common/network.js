/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var winjs_base_1 = require('vs/base/common/winjs.base');
var Schemas;
(function (Schemas) {
    /**
     * A schema that is used for models that exist in memory
     * only and that have no correspondence on a server or such.
     */
    Schemas.inMemory = 'inmemory';
    /**
     * A schema that is used for setting files
     */
    Schemas.vscode = 'vscode';
    /**
     * A schema that is used for internal private files
     */
    Schemas.internal = 'private';
    Schemas.http = 'http';
    Schemas.https = 'https';
    Schemas.file = 'file';
})(Schemas = exports.Schemas || (exports.Schemas = {}));
function xhr(options) {
    var req = null;
    var canceled = false;
    return new winjs_base_1.TPromise(function (c, e, p) {
        req = new XMLHttpRequest();
        req.onreadystatechange = function () {
            if (canceled) {
                return;
            }
            if (req.readyState === 4) {
                // Handle 1223: http://bugs.jquery.com/ticket/1450
                if ((req.status >= 200 && req.status < 300) || req.status === 1223) {
                    c(req);
                }
                else {
                    e(req);
                }
                req.onreadystatechange = function () { };
            }
            else {
                p(req);
            }
        };
        req.open(options.type || 'GET', options.url, 
        // Promise based XHR does not support sync.
        //
        true, options.user, options.password);
        req.responseType = options.responseType || '';
        Object.keys(options.headers || {}).forEach(function (k) {
            req.setRequestHeader(k, options.headers[k]);
        });
        if (options.customRequestInitializer) {
            options.customRequestInitializer(req);
        }
        req.send(options.data);
    }, function () {
        canceled = true;
        req.abort();
    });
}
exports.xhr = xhr;
