import { TPromise } from 'vs/base/common/winjs.base';
import { IDisposable } from 'vs/base/common/lifecycle';
import Event from 'vs/base/common/event';
export interface IMessagePassingProtocol {
    send(request: any): void;
    onMessage: Event<any>;
}
export interface IChannel {
    call(command: string, arg?: any): TPromise<any>;
}
export interface IChannelServer {
    registerChannel(channelName: string, channel: IChannel): void;
}
export interface IChannelClient {
    getChannel<T extends IChannel>(channelName: string): T;
}
export interface IClientRouter {
    routeCall(command: string, arg: any): string;
}
export interface IRoutingChannelClient {
    getChannel<T extends IChannel>(channelName: string, router: IClientRouter): T;
}
export declare class ChannelServer {
    private protocol;
    private channels;
    private activeRequests;
    private protocolListener;
    constructor(protocol: IMessagePassingProtocol);
    registerChannel(channelName: string, channel: IChannel): void;
    private onMessage(request);
    private onCommonRequest(request);
    private onCancelRequest(request);
    dispose(): void;
}
export declare class ChannelClient implements IChannelClient, IDisposable {
    private protocol;
    private state;
    private activeRequests;
    private bufferedRequests;
    private handlers;
    private lastRequestId;
    private protocolListener;
    constructor(protocol: IMessagePassingProtocol);
    getChannel<T extends IChannel>(channelName: string): T;
    private request(channelName, name, arg);
    private doRequest(request);
    private bufferRequest(request);
    private onMessage(response);
    private send(raw);
    dispose(): void;
}
export declare function getDelayedChannel<T extends IChannel>(promise: TPromise<T>): T;
export declare function getNextTickChannel<T extends IChannel>(channel: T): T;
export declare type Serializer<T, R> = (obj: T) => R;
export declare type Deserializer<T, R> = (raw: R) => T;
export declare function eventToCall<T>(event: Event<T>, serializer?: Serializer<T, any>): TPromise<void>;
export declare function eventFromCall<T>(channel: IChannel, name: string, arg?: any, deserializer?: Deserializer<T, any>): Event<T>;
