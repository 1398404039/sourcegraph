import { IDisposable } from 'vs/base/common/lifecycle';
import { IChannelServer, IChannelClient, IChannel } from 'vs/base/parts/ipc/common/ipc';
export interface Sender {
    send(channel: string, ...args: any[]): void;
}
export interface IPC extends Sender, NodeJS.EventEmitter {
}
export declare class Server implements IChannelServer, IDisposable {
    private ipc;
    private channels;
    constructor(ipc: NodeJS.EventEmitter);
    registerChannel(channelName: string, channel: IChannel): void;
    private onHello(sender);
    private createScopedEvent(eventName, senderId);
    dispose(): void;
}
export declare class Client implements IChannelClient, IDisposable {
    private ipc;
    private protocol;
    private ipcClient;
    constructor(ipc: IPC);
    getChannel<T extends IChannel>(channelName: string): T;
    dispose(): void;
}
