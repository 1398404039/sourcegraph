/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var winjs_base_1 = require('vs/base/common/winjs.base');
var lifecycle_1 = require('vs/base/common/lifecycle');
var event_1 = require('vs/base/common/event');
var MessageType;
(function (MessageType) {
    MessageType[MessageType["RequestCommon"] = 0] = "RequestCommon";
    MessageType[MessageType["RequestCancel"] = 1] = "RequestCancel";
    MessageType[MessageType["ResponseInitialize"] = 2] = "ResponseInitialize";
    MessageType[MessageType["ResponseSuccess"] = 3] = "ResponseSuccess";
    MessageType[MessageType["ResponseProgress"] = 4] = "ResponseProgress";
    MessageType[MessageType["ResponseError"] = 5] = "ResponseError";
    MessageType[MessageType["ResponseErrorObj"] = 6] = "ResponseErrorObj";
})(MessageType || (MessageType = {}));
function isResponse(messageType) {
    return messageType >= MessageType.ResponseInitialize;
}
var State;
(function (State) {
    State[State["Uninitialized"] = 0] = "Uninitialized";
    State[State["Idle"] = 1] = "Idle";
})(State || (State = {}));
var ChannelServer = (function () {
    function ChannelServer(protocol) {
        var _this = this;
        this.protocol = protocol;
        this.channels = Object.create(null);
        this.activeRequests = Object.create(null);
        this.protocolListener = this.protocol.onMessage(function (r) { return _this.onMessage(r); });
        this.protocol.send({ type: MessageType.ResponseInitialize });
    }
    ChannelServer.prototype.registerChannel = function (channelName, channel) {
        this.channels[channelName] = channel;
    };
    ChannelServer.prototype.onMessage = function (request) {
        switch (request.type) {
            case MessageType.RequestCommon:
                this.onCommonRequest(request);
                break;
            case MessageType.RequestCancel:
                this.onCancelRequest(request);
                break;
        }
    };
    ChannelServer.prototype.onCommonRequest = function (request) {
        var _this = this;
        var channel = this.channels[request.channelName];
        var promise;
        try {
            promise = channel.call(request.name, request.arg);
        }
        catch (err) {
            promise = winjs_base_1.Promise.wrapError(err);
        }
        var id = request.id;
        var requestPromise = promise.then(function (data) {
            _this.protocol.send({ id: id, data: data, type: MessageType.ResponseSuccess });
            delete _this.activeRequests[request.id];
        }, function (data) {
            if (data instanceof Error) {
                _this.protocol.send({ id: id, data: {
                        message: data.message,
                        name: data.name,
                        stack: data.stack ? data.stack.split('\n') : void 0
                    }, type: MessageType.ResponseError });
            }
            else {
                _this.protocol.send({ id: id, data: data, type: MessageType.ResponseErrorObj });
            }
            delete _this.activeRequests[request.id];
        }, function (data) {
            _this.protocol.send({ id: id, data: data, type: MessageType.ResponseProgress });
        });
        this.activeRequests[request.id] = lifecycle_1.toDisposable(function () { return requestPromise.cancel(); });
    };
    ChannelServer.prototype.onCancelRequest = function (request) {
        var disposable = this.activeRequests[request.id];
        if (disposable) {
            disposable.dispose();
            delete this.activeRequests[request.id];
        }
    };
    ChannelServer.prototype.dispose = function () {
        var _this = this;
        this.protocolListener.dispose();
        this.protocolListener = null;
        Object.keys(this.activeRequests).forEach(function (id) {
            _this.activeRequests[id].dispose();
        });
        this.activeRequests = null;
    };
    return ChannelServer;
}());
exports.ChannelServer = ChannelServer;
var ChannelClient = (function () {
    function ChannelClient(protocol) {
        var _this = this;
        this.protocol = protocol;
        this.state = State.Uninitialized;
        this.activeRequests = [];
        this.bufferedRequests = [];
        this.handlers = Object.create(null);
        this.lastRequestId = 0;
        this.protocolListener = this.protocol.onMessage(function (r) { return _this.onMessage(r); });
    }
    ChannelClient.prototype.getChannel = function (channelName) {
        var _this = this;
        var call = function (command, arg) { return _this.request(channelName, command, arg); };
        return { call: call };
    };
    ChannelClient.prototype.request = function (channelName, name, arg) {
        var _this = this;
        var request = {
            raw: {
                id: this.lastRequestId++,
                type: MessageType.RequestCommon,
                channelName: channelName,
                name: name,
                arg: arg
            }
        };
        var activeRequest = this.state === State.Uninitialized
            ? this.bufferRequest(request)
            : this.doRequest(request);
        this.activeRequests.push(activeRequest);
        activeRequest
            .then(null, function (_) { return null; })
            .done(function () { return _this.activeRequests = _this.activeRequests.filter(function (i) { return i !== activeRequest; }); });
        return activeRequest;
    };
    ChannelClient.prototype.doRequest = function (request) {
        var _this = this;
        var id = request.raw.id;
        return new winjs_base_1.Promise(function (c, e, p) {
            _this.handlers[id] = function (response) {
                switch (response.type) {
                    case MessageType.ResponseSuccess:
                        delete _this.handlers[id];
                        c(response.data);
                        break;
                    case MessageType.ResponseError:
                        delete _this.handlers[id];
                        var error = new Error(response.data.message);
                        error.stack = response.data.stack;
                        error.name = response.data.name;
                        e(error);
                        break;
                    case MessageType.ResponseErrorObj:
                        delete _this.handlers[id];
                        e(response.data);
                        break;
                    case MessageType.ResponseProgress:
                        p(response.data);
                        break;
                }
            };
            _this.send(request.raw);
        }, function () { return _this.send({ id: id, type: MessageType.RequestCancel }); });
    };
    ChannelClient.prototype.bufferRequest = function (request) {
        var _this = this;
        var flushedRequest = null;
        return new winjs_base_1.Promise(function (c, e, p) {
            _this.bufferedRequests.push(request);
            request.flush = function () {
                request.flush = null;
                flushedRequest = _this.doRequest(request).then(c, e, p);
            };
        }, function () {
            request.flush = null;
            if (_this.state !== State.Uninitialized) {
                if (flushedRequest) {
                    flushedRequest.cancel();
                    flushedRequest = null;
                }
                return;
            }
            var idx = _this.bufferedRequests.indexOf(request);
            if (idx === -1) {
                return;
            }
            _this.bufferedRequests.splice(idx, 1);
        });
    };
    ChannelClient.prototype.onMessage = function (response) {
        if (!isResponse(response.type)) {
            return;
        }
        if (this.state === State.Uninitialized && response.type === MessageType.ResponseInitialize) {
            this.state = State.Idle;
            this.bufferedRequests.forEach(function (r) { return r.flush && r.flush(); });
            this.bufferedRequests = null;
            return;
        }
        var handler = this.handlers[response.id];
        if (handler) {
            handler(response);
        }
    };
    ChannelClient.prototype.send = function (raw) {
        try {
            this.protocol.send(raw);
        }
        catch (err) {
        }
    };
    ChannelClient.prototype.dispose = function () {
        this.protocolListener.dispose();
        this.protocolListener = null;
        this.activeRequests.forEach(function (r) { return r.cancel(); });
        this.activeRequests = [];
    };
    return ChannelClient;
}());
exports.ChannelClient = ChannelClient;
function getDelayedChannel(promise) {
    var call = function (command, arg) { return promise.then(function (c) { return c.call(command, arg); }); };
    return { call: call };
}
exports.getDelayedChannel = getDelayedChannel;
function getNextTickChannel(channel) {
    var didTick = false;
    var call = function (command, arg) {
        if (didTick) {
            return channel.call(command, arg);
        }
        return winjs_base_1.TPromise.timeout(0)
            .then(function () { return didTick = true; })
            .then(function () { return channel.call(command, arg); });
    };
    return { call: call };
}
exports.getNextTickChannel = getNextTickChannel;
function eventToCall(event, serializer) {
    if (serializer === void 0) { serializer = function (t) { return t; }; }
    var disposable;
    return new winjs_base_1.Promise(function (c, e, p) { return disposable = event(function (t) { return p(serializer(t)); }); }, function () { return disposable.dispose(); });
}
exports.eventToCall = eventToCall;
function eventFromCall(channel, name, arg, deserializer) {
    if (arg === void 0) { arg = null; }
    if (deserializer === void 0) { deserializer = function (t) { return t; }; }
    var promise;
    var emitter = new event_1.Emitter({
        onFirstListenerAdd: function () {
            promise = channel.call(name, arg)
                .then(null, function (err) { return null; }, function (e) { return emitter.fire(deserializer(e)); });
        },
        onLastListenerRemove: function () {
            promise.cancel();
            promise = null;
        }
    });
    return emitter.event;
}
exports.eventFromCall = eventFromCall;
