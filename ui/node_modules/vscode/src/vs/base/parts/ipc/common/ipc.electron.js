/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
var lifecycle_1 = require('vs/base/common/lifecycle');
var event_1 = require('vs/base/common/event');
var event_2 = require('vs/base/node/event');
var ipc_1 = require('vs/base/parts/ipc/common/ipc');
var Hello = 'ipc:hello';
var Goodbye = 'ipc:goodbye';
var Message = 'ipc:message';
var Protocol = (function () {
    function Protocol(sender, onMessageEvent) {
        this.sender = sender;
        this.onMessageEvent = onMessageEvent;
        var emitter = new event_1.Emitter();
        onMessageEvent(function (msg) { return emitter.fire(msg); });
        this._onMessage = emitter.event;
    }
    Object.defineProperty(Protocol.prototype, "onMessage", {
        get: function () { return this._onMessage; },
        enumerable: true,
        configurable: true
    });
    Protocol.prototype.send = function (message) {
        this.sender.send(Message, message);
    };
    Protocol.prototype.dispose = function () {
        this.listener = lifecycle_1.dispose(this.listener);
    };
    return Protocol;
}());
var Server = (function () {
    function Server(ipc) {
        var _this = this;
        this.ipc = ipc;
        this.channels = Object.create(null);
        ipc.on(Hello, function (_a) {
            var sender = _a.sender;
            return _this.onHello(sender);
        });
    }
    Server.prototype.registerChannel = function (channelName, channel) {
        this.channels[channelName] = channel;
    };
    Server.prototype.onHello = function (sender) {
        var _this = this;
        var senderId = sender.getId();
        var onMessage = this.createScopedEvent(Message, senderId);
        var protocol = new Protocol(sender, onMessage);
        var ipcServer = new ipc_1.ChannelServer(protocol);
        Object.keys(this.channels)
            .forEach(function (name) { return ipcServer.registerChannel(name, _this.channels[name]); });
        var onGoodbye = this.createScopedEvent(Goodbye, senderId);
        var listener = onGoodbye(function () {
            listener.dispose();
            ipcServer.dispose();
            protocol.dispose();
        });
    };
    Server.prototype.createScopedEvent = function (eventName, senderId) {
        return event_1.chain(event_2.fromEventEmitter(this.ipc, eventName, function (event, message) { return ({ event: event, message: message }); }))
            .filter(function (_a) {
            var event = _a.event;
            return event.sender.getId() === senderId;
        })
            .map(function (_a) {
            var message = _a.message;
            return message;
        })
            .event;
    };
    Server.prototype.dispose = function () {
        this.channels = null;
    };
    return Server;
}());
exports.Server = Server;
var Client = (function () {
    function Client(ipc) {
        this.ipc = ipc;
        ipc.send(Hello);
        var receiverEvent = event_2.fromEventEmitter(ipc, Message, function (_, message) { return message; });
        this.protocol = new Protocol(ipc, receiverEvent);
        this.ipcClient = new ipc_1.ChannelClient(this.protocol);
    }
    Client.prototype.getChannel = function (channelName) {
        return this.ipcClient.getChannel(channelName);
    };
    Client.prototype.dispose = function () {
        this.ipc.send(Goodbye);
        this.ipcClient = lifecycle_1.dispose(this.ipcClient);
        this.protocol = lifecycle_1.dispose(this.protocol);
    };
    return Client;
}());
exports.Client = Client;
