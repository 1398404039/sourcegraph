/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
require('./selectBox.css');
var lifecycle_1 = require('vs/base/common/lifecycle');
var event_1 = require('vs/base/common/event');
var widget_1 = require('vs/base/browser/ui/widget');
var dom = require('vs/base/browser/dom');
var SelectBox = (function (_super) {
    __extends(SelectBox, _super);
    function SelectBox(options, selected) {
        var _this = this;
        _super.call(this);
        this.select = document.createElement('select');
        this.select.className = 'select-box';
        this.options = options;
        this.selected = selected;
        this.toDispose = [];
        this._onDidSelect = new event_1.Emitter();
        this.toDispose.push(dom.addStandardDisposableListener(this.select, 'change', function (e) {
            _this._onDidSelect.fire(e.target.value);
        }));
    }
    Object.defineProperty(SelectBox.prototype, "onDidSelect", {
        get: function () {
            return this._onDidSelect.event;
        },
        enumerable: true,
        configurable: true
    });
    SelectBox.prototype.setOptions = function (options, selected) {
        this.options = options;
        if (selected >= 0) {
            this.selected = selected;
        }
        else if (this.selected < 0 || this.selected > this.options.length) {
            this.selected = 0;
        }
        this.doSetOptions();
    };
    SelectBox.prototype.focus = function () {
        if (this.select) {
            this.select.focus();
        }
    };
    Object.defineProperty(SelectBox.prototype, "enabled", {
        set: function (value) {
            this.select.disabled = !value;
        },
        enumerable: true,
        configurable: true
    });
    SelectBox.prototype.blur = function () {
        if (this.select) {
            this.select.blur();
        }
    };
    SelectBox.prototype.render = function (container) {
        dom.addClass(container, 'select-container');
        container.appendChild(this.select);
        this.doSetOptions();
    };
    SelectBox.prototype.getSelected = function () {
        return this.options && this.selected >= 0 && this.selected < this.options.length ? this.options[this.selected] : null;
    };
    SelectBox.prototype.doSetOptions = function () {
        var _this = this;
        this.select.options.length = 0;
        this.options.forEach(function (option) {
            _this.select.add(_this.createOption(option));
        });
        if (this.selected >= 0) {
            this.select.selectedIndex = this.selected;
            this.select.title = this.options[this.selected];
        }
    };
    SelectBox.prototype.createOption = function (value) {
        var option = document.createElement('option');
        option.value = value;
        option.text = value;
        return option;
    };
    SelectBox.prototype.dispose = function () {
        this.toDispose = lifecycle_1.dispose(this.toDispose);
        _super.prototype.dispose.call(this);
    };
    return SelectBox;
}(widget_1.Widget));
exports.SelectBox = SelectBox;
