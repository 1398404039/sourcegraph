/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
require('./iconlabel.css');
var dom = require('vs/base/browser/dom');
var highlightedLabel_1 = require('vs/base/browser/ui/highlightedlabel/highlightedLabel');
var paths = require('vs/base/common/paths');
var types = require('vs/base/common/types');
var labels_1 = require('vs/base/common/labels');
var IconLabel = (function () {
    function IconLabel(container, options) {
        this.domNode = dom.append(container, dom.$('.monaco-icon-label'));
        if (options && options.supportHighlights) {
            this.labelNode = new highlightedLabel_1.HighlightedLabel(dom.append(this.domNode, dom.$('a.label-name')));
        }
        else {
            this.labelNode = dom.append(this.domNode, dom.$('a.label-name'));
        }
        this.descriptionNode = dom.append(this.domNode, dom.$('span.label-description'));
    }
    Object.defineProperty(IconLabel.prototype, "element", {
        get: function () {
            return this.domNode;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IconLabel.prototype, "labelElement", {
        get: function () {
            var labelNode = this.labelNode;
            if (labelNode instanceof highlightedLabel_1.HighlightedLabel) {
                return labelNode.element;
            }
            else {
                return labelNode;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IconLabel.prototype, "descriptionElement", {
        get: function () {
            return this.descriptionNode;
        },
        enumerable: true,
        configurable: true
    });
    IconLabel.prototype.setValue = function (label, description, options) {
        var labelNode = this.labelNode;
        if (labelNode instanceof highlightedLabel_1.HighlightedLabel) {
            labelNode.set(label || '', options ? options.matches : void 0);
        }
        else {
            labelNode.textContent = label || '';
        }
        this.descriptionNode.textContent = description || '';
        if (!description) {
            dom.addClass(this.descriptionNode, 'empty');
        }
        else {
            dom.removeClass(this.descriptionNode, 'empty');
        }
        this.domNode.title = options && options.title ? options.title : '';
        var classes = ['monaco-icon-label'];
        if (options) {
            if (options.extraClasses) {
                classes.push.apply(classes, options.extraClasses);
            }
            if (options.italic) {
                classes.push('italic');
            }
        }
        this.domNode.className = classes.join(' ');
    };
    IconLabel.prototype.dispose = function () {
        var labelNode = this.labelNode;
        if (labelNode instanceof highlightedLabel_1.HighlightedLabel) {
            labelNode.dispose();
        }
    };
    return IconLabel;
}());
exports.IconLabel = IconLabel;
var FileLabel = (function (_super) {
    __extends(FileLabel, _super);
    function FileLabel(container, file, provider) {
        _super.call(this, container);
        this.setFile(file, provider);
    }
    FileLabel.prototype.setFile = function (file, provider) {
        var path = getPath(file);
        var parent = paths.dirname(path);
        this.setValue(paths.basename(path), parent && parent !== '.' ? labels_1.getPathLabel(parent, provider) : '', { title: path });
    };
    return FileLabel;
}(IconLabel));
exports.FileLabel = FileLabel;
function getPath(arg1) {
    if (!arg1) {
        return null;
    }
    if (types.isFunction(arg1.getWorkspace)) {
        var ws = arg1.getWorkspace();
        return ws ? ws.resource.fsPath : void 0;
    }
    return arg1.fsPath;
}
