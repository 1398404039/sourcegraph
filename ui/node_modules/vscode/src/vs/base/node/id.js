/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
var getmac = require("getmac");
var crypto = require("crypto");
var winjs_base_1 = require("vs/base/common/winjs.base");
var errors = require("vs/base/common/errors");
var uuid = require("vs/base/common/uuid");
var os_1 = require("os");
var mac = new (function () {
    function class_1() {
    }
    Object.defineProperty(class_1.prototype, "value", {
        get: function () {
            if (this._value === void 0) {
                this._initValue();
            }
            return this._value;
        },
        enumerable: true,
        configurable: true
    });
    class_1.prototype._initValue = function () {
        this._value = null;
        var interfaces = os_1.networkInterfaces();
        for (var key in interfaces) {
            for (var _i = 0, _a = interfaces[key]; _i < _a.length; _i++) {
                var i = _a[_i];
                if (!i.internal) {
                    this._value = crypto.createHash('sha256').update(i.mac, 'utf8').digest('hex');
                    return;
                }
            }
        }
        this._value = "missing-" + uuid.generateUuid();
    };
    return class_1;
}());
function _futureMachineIdExperiment() {
    return mac.value;
}
exports._futureMachineIdExperiment = _futureMachineIdExperiment;
function getMachineId() {
    return new winjs_base_1.TPromise(function (resolve) {
        try {
            getmac.getMac(function (error, macAddress) {
                if (!error) {
                    resolve(crypto.createHash('sha256').update(macAddress, 'utf8').digest('hex'));
                }
                else {
                    resolve(uuid.generateUuid()); // fallback, generate a UUID
                }
            });
        }
        catch (err) {
            errors.onUnexpectedError(err);
            resolve(uuid.generateUuid()); // fallback, generate a UUID
        }
    });
}
exports.getMachineId = getMachineId;
