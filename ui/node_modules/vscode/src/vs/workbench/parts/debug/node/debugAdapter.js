/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var nls = require("vs/nls");
var winjs_base_1 = require("vs/base/common/winjs.base");
var strings = require("vs/base/common/strings");
var objects = require("vs/base/common/objects");
var paths = require("vs/base/common/paths");
var platform = require("vs/base/common/platform");
var configurationResolver_1 = require("vs/workbench/services/configurationResolver/common/configurationResolver");
var configuration_1 = require("vs/platform/configuration/common/configuration");
var commands_1 = require("vs/platform/commands/common/commands");
var Adapter = (function () {
    function Adapter(rawAdapter, extensionDescription, configurationResolverService, configurationService, commandService) {
        this.rawAdapter = rawAdapter;
        this.extensionDescription = extensionDescription;
        this.configurationResolverService = configurationResolverService;
        this.configurationService = configurationService;
        this.commandService = commandService;
        if (rawAdapter.windows) {
            rawAdapter.win = rawAdapter.windows;
        }
    }
    Object.defineProperty(Adapter.prototype, "runtime", {
        get: function () {
            var runtime = this.getAttributeBasedOnPlatform('runtime');
            if (runtime && runtime.indexOf('./') === 0) {
                runtime = this.configurationResolverService ? this.configurationResolverService.resolve(runtime) : runtime;
                runtime = paths.join(this.extensionDescription.extensionFolderPath, runtime);
            }
            return runtime;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Adapter.prototype, "program", {
        get: function () {
            var program = this.getAttributeBasedOnPlatform('program');
            if (program) {
                program = this.configurationResolverService ? this.configurationResolverService.resolve(program) : program;
                program = paths.join(this.extensionDescription.extensionFolderPath, program);
            }
            return program;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Adapter.prototype, "runtimeArgs", {
        get: function () {
            return this.getAttributeBasedOnPlatform('runtimeArgs');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Adapter.prototype, "args", {
        get: function () {
            return this.getAttributeBasedOnPlatform('args');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Adapter.prototype, "aiKey", {
        get: function () {
            return this.rawAdapter.aiKey;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Adapter.prototype, "label", {
        get: function () {
            return this.rawAdapter.label || this.rawAdapter.type;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Adapter.prototype, "type", {
        get: function () {
            return this.rawAdapter.type;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Adapter.prototype, "variables", {
        get: function () {
            return this.rawAdapter.variables;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Adapter.prototype, "configurationSnippets", {
        get: function () {
            return this.rawAdapter.configurationSnippets;
        },
        enumerable: true,
        configurable: true
    });
    Adapter.prototype.merge = function (secondRawAdapter, extensionDescription) {
        // Give priority to built in debug adapters
        if (extensionDescription.isBuiltin) {
            this.extensionDescription = extensionDescription;
        }
        objects.mixin(this.rawAdapter, secondRawAdapter, extensionDescription.isBuiltin);
    };
    Adapter.prototype.getInitialConfigurationContent = function () {
        var editorConfig = this.configurationService.getConfiguration();
        if (typeof this.rawAdapter.initialConfigurations === 'string') {
            // Contributed initialConfigurations is a command that needs to be invoked
            // Debug adapter will dynamically provide the full launch.json
            return this.commandService.executeCommand(this.rawAdapter.initialConfigurations).then(function (content) {
                // Debug adapter returned the full content of the launch.json - return it after format
                if (editorConfig.editor.insertSpaces) {
                    content = content.replace(new RegExp('\t', 'g'), strings.repeat(' ', editorConfig.editor.tabSize));
                }
                return content;
            });
        }
        return winjs_base_1.TPromise.as(JSON.stringify({
            version: '0.2.0',
            configurations: this.rawAdapter.initialConfigurations || []
        }, null, editorConfig.editor && editorConfig.editor.insertSpaces ? strings.repeat(' ', editorConfig.editor.tabSize) : '\t'));
    };
    ;
    Adapter.prototype.getSchemaAttributes = function () {
        var _this = this;
        if (!this.rawAdapter.configurationAttributes) {
            return null;
        }
        // fill in the default configuration attributes shared by all adapters.
        return Object.keys(this.rawAdapter.configurationAttributes).map(function (request) {
            var attributes = _this.rawAdapter.configurationAttributes[request];
            var defaultRequired = ['name', 'type', 'request'];
            attributes.required = attributes.required && attributes.required.length ? defaultRequired.concat(attributes.required) : defaultRequired;
            attributes.additionalProperties = false;
            attributes.type = 'object';
            if (!attributes.properties) {
                attributes.properties = {};
            }
            var properties = attributes.properties;
            properties['type'] = {
                enum: [_this.type],
                description: nls.localize('debugType', "Type of configuration.")
            };
            properties['name'] = {
                type: 'string',
                description: nls.localize('debugName', "Name of configuration; appears in the launch configuration drop down menu."),
                default: 'Launch'
            };
            properties['request'] = {
                enum: [request],
                description: nls.localize('debugRequest', "Request type of configuration. Can be \"launch\" or \"attach\"."),
            };
            properties['debugServer'] = {
                type: 'number',
                description: nls.localize('debugServer', "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode")
            };
            properties['preLaunchTask'] = {
                type: ['string', 'null'],
                default: null,
                description: nls.localize('debugPrelaunchTask', "Task to run before debug session starts.")
            };
            properties['internalConsoleOptions'] = {
                enum: ['neverOpen', 'openOnSessionStart', 'openOnFirstSessionStart'],
                default: 'openOnFirstSessionStart',
                description: nls.localize('internalConsoleOptions', "Controls behavior of the internal debug console.")
            };
            var osProperties = objects.deepClone(properties);
            properties['windows'] = {
                type: 'object',
                description: nls.localize('debugWindowsConfiguration', "Windows specific launch configuration attributes."),
                properties: osProperties
            };
            properties['osx'] = {
                type: 'object',
                description: nls.localize('debugOSXConfiguration', "OS X specific launch configuration attributes."),
                properties: osProperties
            };
            properties['linux'] = {
                type: 'object',
                description: nls.localize('debugLinuxConfiguration', "Linux specific launch configuration attributes."),
                properties: osProperties
            };
            return attributes;
        });
    };
    Adapter.prototype.getAttributeBasedOnPlatform = function (key) {
        var result;
        if (platform.isWindows && !process.env.hasOwnProperty('PROCESSOR_ARCHITEW6432') && this.rawAdapter.winx86) {
            result = this.rawAdapter.winx86[key];
        }
        else if (platform.isWindows && this.rawAdapter.win) {
            result = this.rawAdapter.win[key];
        }
        else if (platform.isMacintosh && this.rawAdapter.osx) {
            result = this.rawAdapter.osx[key];
        }
        else if (platform.isLinux && this.rawAdapter.linux) {
            result = this.rawAdapter.linux[key];
        }
        return result || this.rawAdapter[key];
    };
    return Adapter;
}());
Adapter = __decorate([
    __param(2, configurationResolver_1.IConfigurationResolverService),
    __param(3, configuration_1.IConfigurationService),
    __param(4, commands_1.ICommandService)
], Adapter);
exports.Adapter = Adapter;
