/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var lifecycle = require('vs/base/common/lifecycle');
var errors = require('vs/base/common/errors');
var severity_1 = require('vs/base/common/severity');
var builder = require('vs/base/browser/builder');
var dom = require('vs/base/browser/dom');
var mouseEvent_1 = require('vs/base/browser/mouseEvent');
var events = require('vs/base/common/events');
var actionbar = require('vs/base/browser/ui/actionbar/actionbar');
var partService_1 = require('vs/workbench/services/part/common/partService');
var debug = require('vs/workbench/parts/debug/common/debug');
var debugActions_1 = require('vs/workbench/parts/debug/browser/debugActions');
var instantiation_1 = require('vs/platform/instantiation/common/instantiation');
var storage_1 = require('vs/platform/storage/common/storage');
var message_1 = require('vs/platform/message/common/message');
var telemetry_1 = require('vs/platform/telemetry/common/telemetry');
var IDebugService = debug.IDebugService;
var $ = builder.$;
var DEBUG_ACTIONS_WIDGET_POSITION_KEY = 'debug.actionswidgetposition';
var DebugActionsWidget = (function () {
    function DebugActionsWidget(messageService, telemetryService, debugService, instantiationService, partService, storageService) {
        this.messageService = messageService;
        this.telemetryService = telemetryService;
        this.debugService = debugService;
        this.instantiationService = instantiationService;
        this.partService = partService;
        this.storageService = storageService;
        this.$el = $().div().addClass('debug-actions-widget');
        this.dragArea = $().div().addClass('drag-area');
        this.$el.append(this.dragArea);
        var actionBarContainter = $().div().addClass('.action-bar-container');
        this.$el.append(actionBarContainter);
        this.toDispose = [];
        this.actionBar = new actionbar.ActionBar(actionBarContainter, {
            orientation: actionbar.ActionsOrientation.HORIZONTAL
        });
        this.toDispose.push(this.actionBar);
        this.registerListeners();
        this.hide();
        this.isBuilt = false;
    }
    DebugActionsWidget.prototype.registerListeners = function () {
        var _this = this;
        this.toDispose.push(this.debugService.onDidChangeState(function (state) {
            _this.onDebugStateChange(state);
        }));
        this.toDispose.push(this.actionBar.actionRunner.addListener2(events.EventType.RUN, function (e) {
            // check for error
            if (e.error && !errors.isPromiseCanceledError(e.error)) {
                _this.messageService.show(severity_1.default.Error, e.error);
            }
            // log in telemetry
            if (_this.telemetryService) {
                _this.telemetryService.publicLog('workbenchActionExecuted', { id: e.action.id, from: 'debugActionsWidget' });
            }
        }));
        $(window).on(dom.EventType.RESIZE, function () { return _this.setXCoordinate(); }, this.toDispose);
        this.dragArea.on(dom.EventType.MOUSE_UP, function (event) {
            var mouseClickEvent = new mouseEvent_1.StandardMouseEvent(event);
            if (mouseClickEvent.detail === 2) {
                // double click on debug bar centers it again #8250
                _this.setXCoordinate(0.5 * window.innerWidth);
            }
        });
        this.dragArea.on(dom.EventType.MOUSE_DOWN, function (event) {
            var $window = $(window);
            _this.dragArea.addClass('dragged');
            $window.on('mousemove', function (e) {
                var mouseMoveEvent = new mouseEvent_1.StandardMouseEvent(e);
                // Prevent default to stop editor selecting text #8524
                mouseMoveEvent.preventDefault();
                _this.setXCoordinate(mouseMoveEvent.posx);
            }).once('mouseup', function (e) {
                var mouseMoveEvent = new mouseEvent_1.StandardMouseEvent(e);
                _this.storageService.store(DEBUG_ACTIONS_WIDGET_POSITION_KEY, mouseMoveEvent.posx / window.innerWidth, storage_1.StorageScope.WORKSPACE);
                _this.dragArea.removeClass('dragged');
                $window.off('mousemove');
            });
        });
    };
    DebugActionsWidget.prototype.setXCoordinate = function (x) {
        if (!this.isVisible) {
            return;
        }
        if (!x) {
            x = parseFloat(this.storageService.get(DEBUG_ACTIONS_WIDGET_POSITION_KEY, storage_1.StorageScope.WORKSPACE, '0.5')) * window.innerWidth;
        }
        var halfWidgetWidth = this.$el.getHTMLElement().clientWidth / 2;
        x = x + halfWidgetWidth - 16; // take into account half the size of the widget
        x = Math.max(148, x); // do not allow the widget to overflow on the left
        x = Math.min(x, window.innerWidth - halfWidgetWidth - 10); // do not allow the widget to overflow on the right
        this.$el.style('left', x + "px");
    };
    DebugActionsWidget.prototype.getId = function () {
        return DebugActionsWidget.ID;
    };
    DebugActionsWidget.prototype.onDebugStateChange = function (state) {
        if (state === debug.State.Disabled || state === debug.State.Inactive) {
            return this.hide();
        }
        this.actionBar.clear();
        this.actionBar.push(this.getActions(this.instantiationService, this.debugService.state), { icon: true, label: false });
        this.show();
    };
    DebugActionsWidget.prototype.show = function () {
        if (this.isVisible) {
            return;
        }
        if (!this.isBuilt) {
            this.isBuilt = true;
            this.$el.build(builder.withElementById(this.partService.getWorkbenchElementId()).getHTMLElement());
        }
        this.isVisible = true;
        this.$el.show();
        this.setXCoordinate();
    };
    DebugActionsWidget.prototype.hide = function () {
        this.isVisible = false;
        this.$el.hide();
    };
    DebugActionsWidget.prototype.getActions = function (instantiationService, state) {
        var _this = this;
        if (!this.actions) {
            this.continueAction = instantiationService.createInstance(debugActions_1.ContinueAction, debugActions_1.ContinueAction.ID, debugActions_1.ContinueAction.LABEL);
            this.pauseAction = instantiationService.createInstance(debugActions_1.PauseAction, debugActions_1.PauseAction.ID, debugActions_1.PauseAction.LABEL);
            this.stopAction = instantiationService.createInstance(debugActions_1.StopAction, debugActions_1.StopAction.ID, debugActions_1.StopAction.LABEL);
            this.disconnectAction = instantiationService.createInstance(debugActions_1.DisconnectAction, debugActions_1.DisconnectAction.ID, debugActions_1.DisconnectAction.LABEL);
            this.actions = [
                this.continueAction,
                instantiationService.createInstance(debugActions_1.StepOverAction, debugActions_1.StepOverAction.ID, debugActions_1.StepOverAction.LABEL),
                instantiationService.createInstance(debugActions_1.StepIntoAction, debugActions_1.StepIntoAction.ID, debugActions_1.StepIntoAction.LABEL),
                instantiationService.createInstance(debugActions_1.StepOutAction, debugActions_1.StepOutAction.ID, debugActions_1.StepOutAction.LABEL),
                instantiationService.createInstance(debugActions_1.RestartAction, debugActions_1.RestartAction.ID, debugActions_1.RestartAction.LABEL),
                this.stopAction
            ];
            this.actions.forEach(function (a) {
                _this.toDispose.push(a);
            });
            this.toDispose.push(this.pauseAction);
            this.toDispose.push(this.disconnectAction);
        }
        this.actions[0] = state === debug.State.Running ? this.pauseAction : this.continueAction;
        var session = this.debugService.getActiveSession();
        var configuration = this.debugService.getConfigurationManager().configuration;
        this.actions[5] = configuration && configuration.request === 'attach' ? this.disconnectAction : this.stopAction;
        if (session && session.configuration.capabilities.supportsStepBack) {
            if (!this.stepBackAction) {
                this.stepBackAction = instantiationService.createInstance(debugActions_1.StepBackAction, debugActions_1.StepBackAction.ID, debugActions_1.StepBackAction.LABEL);
                this.toDispose.push(this.stepBackAction);
            }
            // Return a copy of this.actions containing stepBackAction
            return this.actions.slice(0, 4).concat([this.stepBackAction], this.actions.slice(4));
        }
        else {
            return this.actions;
        }
    };
    DebugActionsWidget.prototype.dispose = function () {
        this.toDispose = lifecycle.dispose(this.toDispose);
        if (this.$el) {
            this.$el.destroy();
            delete this.$el;
        }
    };
    DebugActionsWidget.ID = 'debug.actionsWidget';
    DebugActionsWidget = __decorate([
        __param(0, message_1.IMessageService),
        __param(1, telemetry_1.ITelemetryService),
        __param(2, IDebugService),
        __param(3, instantiation_1.IInstantiationService),
        __param(4, partService_1.IPartService),
        __param(5, storage_1.IStorageService)
    ], DebugActionsWidget);
    return DebugActionsWidget;
}());
exports.DebugActionsWidget = DebugActionsWidget;
