/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var nls = require('vs/nls');
var errors = require('vs/base/common/errors');
var actionbar_1 = require('vs/base/browser/ui/actionbar/actionbar');
var debug_1 = require('vs/workbench/parts/debug/common/debug');
var configuration_1 = require('vs/platform/configuration/common/configuration');
var DebugSelectActionItem = (function (_super) {
    __extends(DebugSelectActionItem, _super);
    function DebugSelectActionItem(action, debugService, configurationService) {
        var _this = this;
        _super.call(this, null, action, [], -1);
        this.debugService = debugService;
        this.toDispose.push(configurationService.onDidUpdateConfiguration(function (e) {
            _this.updateOptions(true).done(null, errors.onUnexpectedError);
        }));
        this.toDispose.push(this.debugService.getConfigurationManager().onDidConfigurationChange(function (name) {
            _this.updateOptions(false).done(null, errors.onUnexpectedError);
        }));
        this.toDispose.push(this.debugService.onDidChangeState(function (state) {
            _this.enabled = state === debug_1.State.Inactive;
        }));
    }
    DebugSelectActionItem.prototype.render = function (container) {
        _super.prototype.render.call(this, container);
        this.updateOptions(true).done(null, errors.onUnexpectedError);
        this.enabled = this.debugService.state === debug_1.State.Inactive;
    };
    DebugSelectActionItem.prototype.updateOptions = function (changeDebugConfiguration) {
        var _this = this;
        var configurationManager = this.debugService.getConfigurationManager();
        return configurationManager.loadLaunchConfig().then(function (config) {
            if (!config || !config.configurations || config.configurations.length === 0) {
                _this.setOptions([nls.localize('noConfigurations', "No Configurations")], 0);
                return changeDebugConfiguration ? _this.actionRunner.run(_this._action, null) : null;
            }
            var configurationNames = config.configurations.filter(function (cfg) { return !!cfg.name; }).map(function (cfg) { return cfg.name; });
            var configurationName = configurationManager.configuration ? configurationManager.configuration.name : null;
            var selected = configurationNames.indexOf(configurationName);
            _this.setOptions(configurationNames, selected);
            if (changeDebugConfiguration) {
                return _this.actionRunner.run(_this._action, _this.getSelected());
            }
        });
    };
    DebugSelectActionItem = __decorate([
        __param(1, debug_1.IDebugService),
        __param(2, configuration_1.IConfigurationService)
    ], DebugSelectActionItem);
    return DebugSelectActionItem;
}(actionbar_1.SelectActionItem));
exports.DebugSelectActionItem = DebugSelectActionItem;
