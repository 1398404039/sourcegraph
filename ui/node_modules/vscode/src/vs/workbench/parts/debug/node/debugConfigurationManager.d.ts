import { TPromise } from 'vs/base/common/winjs.base';
import { IModel } from 'vs/editor/common/editorCommon';
import * as extensionsRegistry from 'vs/platform/extensions/common/extensionsRegistry';
import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
import { IFileService } from 'vs/platform/files/common/files';
import { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';
import { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import * as debug from 'vs/workbench/parts/debug/common/debug';
import { Adapter } from 'vs/workbench/parts/debug/node/debugAdapter';
import { IWorkbenchEditorService } from 'vs/workbench/services/editor/common/editorService';
import { IQuickOpenService } from 'vs/workbench/services/quickopen/common/quickOpenService';
import { IConfigurationResolverService } from 'vs/workbench/services/configurationResolver/common/configurationResolver';
export declare const debuggersExtPoint: extensionsRegistry.IExtensionPoint<debug.IRawAdapter[]>;
export declare const breakpointsExtPoint: extensionsRegistry.IExtensionPoint<debug.IRawBreakpointContribution[]>;
export declare const schemaId = "vscode://schemas/launch";
export declare class ConfigurationManager implements debug.IConfigurationManager {
    private contextService;
    private fileService;
    private telemetryService;
    private editorService;
    private configurationService;
    private quickOpenService;
    private configurationResolverService;
    private instantiationService;
    private adapters;
    private allModeIdsForBreakpoints;
    constructor(contextService: IWorkspaceContextService, fileService: IFileService, telemetryService: ITelemetryService, editorService: IWorkbenchEditorService, configurationService: IConfigurationService, quickOpenService: IQuickOpenService, configurationResolverService: IConfigurationResolverService, instantiationService: IInstantiationService);
    private registerListeners();
    getAdapter(type: string): Adapter;
    getCompound(name: string): debug.ICompound;
    getConfiguration(nameOrConfig: string | debug.IConfig): TPromise<debug.IConfig>;
    openConfigFile(sideBySide: boolean): TPromise<boolean>;
    canSetBreakpointsIn(model: IModel): boolean;
}
