/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var nls = require('vs/nls');
var actions = require('vs/base/common/actions');
var winjs_base_1 = require('vs/base/common/winjs.base');
var electron_1 = require('electron');
var debugModel_1 = require('vs/workbench/parts/debug/common/debugModel');
var debug_1 = require('vs/workbench/parts/debug/common/debug');
var CopyValueAction = (function (_super) {
    __extends(CopyValueAction, _super);
    function CopyValueAction(id, label, value, debugService) {
        _super.call(this, id, label, 'debug-action copy-value');
        this.value = value;
        this.debugService = debugService;
    }
    CopyValueAction.prototype.run = function () {
        var _this = this;
        if (this.value instanceof debugModel_1.Variable) {
            var frameId = this.debugService.getViewModel().getFocusedStackFrame().frameId;
            var session = this.debugService.getActiveSession();
            return session.evaluate({ expression: debugModel_1.getFullExpressionName(this.value, session.configuration.type), frameId: frameId }).then(function (result) {
                electron_1.clipboard.writeText(result.body.result);
            }, function (err) { return electron_1.clipboard.writeText(_this.value.value); });
        }
        electron_1.clipboard.writeText(this.value);
        return winjs_base_1.TPromise.as(null);
    };
    CopyValueAction.ID = 'workbench.debug.viewlet.action.copyValue';
    CopyValueAction.LABEL = nls.localize('copyValue', "Copy Value");
    CopyValueAction = __decorate([
        __param(3, debug_1.IDebugService)
    ], CopyValueAction);
    return CopyValueAction;
}(actions.Action));
exports.CopyValueAction = CopyValueAction;
var CopyAction = (function (_super) {
    __extends(CopyAction, _super);
    function CopyAction() {
        _super.apply(this, arguments);
    }
    CopyAction.prototype.run = function () {
        electron_1.clipboard.writeText(window.getSelection().toString());
        return winjs_base_1.TPromise.as(null);
    };
    CopyAction.ID = 'workbench.debug.action.copy';
    CopyAction.LABEL = nls.localize('copy', "Copy");
    return CopyAction;
}(actions.Action));
exports.CopyAction = CopyAction;
