/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var nls = require('vs/nls');
var lifecycle = require('vs/base/common/lifecycle');
var mime_1 = require('vs/base/common/mime');
var event_1 = require('vs/base/common/event');
var uri_1 = require('vs/base/common/uri');
var async_1 = require('vs/base/common/async');
var actions_1 = require('vs/base/common/actions');
var arrays = require('vs/base/common/arrays');
var types = require('vs/base/common/types');
var errors = require('vs/base/common/errors');
var severity_1 = require('vs/base/common/severity');
var winjs_base_1 = require('vs/base/common/winjs.base');
var aria = require('vs/base/browser/ui/aria/aria');
var contextkey_1 = require('vs/platform/contextkey/common/contextkey');
var markers_1 = require('vs/platform/markers/common/markers');
var lifecycle_1 = require('vs/platform/lifecycle/common/lifecycle');
var extensions_1 = require('vs/platform/extensions/common/extensions');
var instantiation_1 = require('vs/platform/instantiation/common/instantiation');
var files_1 = require('vs/platform/files/common/files');
var event_2 = require('vs/platform/event/common/event');
var message_1 = require('vs/platform/message/common/message');
var telemetry_1 = require('vs/platform/telemetry/common/telemetry');
var telemetryService_1 = require('vs/platform/telemetry/common/telemetryService');
var telemetryIpc_1 = require('vs/platform/telemetry/common/telemetryIpc');
var storage_1 = require('vs/platform/storage/common/storage');
var groupService_1 = require('vs/workbench/services/group/common/groupService');
var editor_1 = require('vs/workbench/common/editor');
var debug = require('vs/workbench/parts/debug/common/debug');
var rawDebugSession_1 = require('vs/workbench/parts/debug/electron-browser/rawDebugSession');
var model = require('vs/workbench/parts/debug/common/debugModel');
var debugEditorInputs_1 = require('vs/workbench/parts/debug/browser/debugEditorInputs');
var viewmodel = require('vs/workbench/parts/debug/common/debugViewModel');
var debugactions = require('vs/workbench/parts/debug/browser/debugActions');
var debugConfigurationManager_1 = require('vs/workbench/parts/debug/node/debugConfigurationManager');
var debugSource_1 = require('vs/workbench/parts/debug/common/debugSource');
var taskService_1 = require('vs/workbench/parts/tasks/common/taskService');
var taskSystem_1 = require('vs/workbench/parts/tasks/common/taskSystem');
var viewletService_1 = require('vs/workbench/services/viewlet/common/viewletService');
var panelService_1 = require('vs/workbench/services/panel/common/panelService');
var partService_1 = require('vs/workbench/services/part/common/partService');
var files_2 = require('vs/workbench/parts/files/common/files');
var configuration_1 = require('vs/platform/configuration/common/configuration');
var workspace_1 = require('vs/platform/workspace/common/workspace');
var editorService_1 = require('vs/workbench/services/editor/common/editorService');
var windowService_1 = require('vs/workbench/services/window/electron-browser/windowService');
var threadService_1 = require('vs/workbench/services/thread/electron-browser/threadService');
var electron_1 = require('electron');
var ipc_cp_1 = require('vs/base/parts/ipc/node/ipc.cp');
var DEBUG_BREAKPOINTS_KEY = 'debug.breakpoint';
var DEBUG_BREAKPOINTS_ACTIVATED_KEY = 'debug.breakpointactivated';
var DEBUG_FUNCTION_BREAKPOINTS_KEY = 'debug.functionbreakpoint';
var DEBUG_EXCEPTION_BREAKPOINTS_KEY = 'debug.exceptionbreakpoint';
var DEBUG_WATCH_EXPRESSIONS_KEY = 'debug.watchexpressions';
var DEBUG_SELECTED_CONFIG_NAME_KEY = 'debug.selectedconfigname';
var DebugService = (function () {
    function DebugService(storageService, editorService, textFileService, viewletService, panelService, fileService, messageService, partService, windowService, telemetryService, contextService, contextKeyService, editorGroupService, eventService, lifecycleService, instantiationService, extensionService, markerService, taskService, configurationService) {
        this.storageService = storageService;
        this.editorService = editorService;
        this.textFileService = textFileService;
        this.viewletService = viewletService;
        this.panelService = panelService;
        this.fileService = fileService;
        this.messageService = messageService;
        this.partService = partService;
        this.windowService = windowService;
        this.telemetryService = telemetryService;
        this.contextService = contextService;
        this.editorGroupService = editorGroupService;
        this.instantiationService = instantiationService;
        this.extensionService = extensionService;
        this.markerService = markerService;
        this.taskService = taskService;
        this.configurationService = configurationService;
        this.toDispose = [];
        this.toDisposeOnSessionEnd = [];
        this.session = null;
        this.breakpointsToSendOnResourceSaved = {};
        this._state = debug.State.Inactive;
        this._onDidChangeState = new event_1.Emitter();
        if (!this.contextService.getWorkspace()) {
            this._state = debug.State.Disabled;
        }
        this.configurationManager = this.instantiationService.createInstance(debugConfigurationManager_1.ConfigurationManager, this.storageService.get(DEBUG_SELECTED_CONFIG_NAME_KEY, storage_1.StorageScope.WORKSPACE, 'null'));
        this.inDebugMode = debug.CONTEXT_IN_DEBUG_MODE.bindTo(contextKeyService);
        this.model = new model.Model(this.loadBreakpoints(), this.storageService.getBoolean(DEBUG_BREAKPOINTS_ACTIVATED_KEY, storage_1.StorageScope.WORKSPACE, true), this.loadFunctionBreakpoints(), this.loadExceptionBreakpoints(), this.loadWatchExpressions());
        this.toDispose.push(this.model);
        this.viewModel = new viewmodel.ViewModel();
        this.registerListeners(eventService, lifecycleService);
    }
    DebugService.prototype.registerListeners = function (eventService, lifecycleService) {
        var _this = this;
        this.toDispose.push(eventService.addListener2(files_1.EventType.FILE_CHANGES, function (e) { return _this.onFileChanges(e); }));
        if (this.taskService) {
            this.toDispose.push(this.taskService.addListener2(taskService_1.TaskServiceEvents.Active, function (e) {
                _this.lastTaskEvent = e;
            }));
            this.toDispose.push(this.taskService.addListener2(taskService_1.TaskServiceEvents.Inactive, function (e) {
                if (e.type === taskService_1.TaskType.SingleRun) {
                    _this.lastTaskEvent = null;
                }
            }));
            this.toDispose.push(this.taskService.addListener2(taskService_1.TaskServiceEvents.Terminated, function (e) {
                _this.lastTaskEvent = null;
            }));
        }
        lifecycleService.onShutdown(this.store, this);
        lifecycleService.onShutdown(this.dispose, this);
        this.toDispose.push(this.windowService.onBroadcast(this.onBroadcast, this));
    };
    DebugService.prototype.onBroadcast = function (broadcast) {
        // attach: PH is ready to be attached to
        if (broadcast.channel === threadService_1.EXTENSION_ATTACH_BROADCAST_CHANNEL) {
            this.rawAttach(broadcast.payload.port);
            return;
        }
        if (broadcast.channel === threadService_1.EXTENSION_TERMINATE_BROADCAST_CHANNEL) {
            this.onSessionEnd();
            return;
        }
        // from this point on we require an active session
        var session = this.getActiveSession();
        if (!session || session.configuration.type !== 'extensionHost') {
            return; // we are only intersted if we have an active debug session for extensionHost
        }
        // a plugin logged output, show it inside the REPL
        if (broadcast.channel === threadService_1.EXTENSION_LOG_BROADCAST_CHANNEL) {
            var extensionOutput = broadcast.payload;
            var sev = extensionOutput.severity === 'warn' ? severity_1.default.Warning : extensionOutput.severity === 'error' ? severity_1.default.Error : severity_1.default.Info;
            var args = [];
            try {
                var parsed_1 = JSON.parse(extensionOutput.arguments);
                args.push.apply(args, Object.getOwnPropertyNames(parsed_1).map(function (o) { return parsed_1[o]; }));
            }
            catch (error) {
                args.push(extensionOutput.arguments);
            }
            // add output for each argument logged
            var simpleVals = [];
            for (var i = 0; i < args.length; i++) {
                var a = args[i];
                // undefined gets printed as 'undefined'
                if (typeof a === 'undefined') {
                    simpleVals.push('undefined');
                }
                else if (a === null) {
                    simpleVals.push('null');
                }
                else if (types.isObject(a) || Array.isArray(a)) {
                    // flush any existing simple values logged
                    if (simpleVals.length) {
                        this.logToRepl(simpleVals.join(' '), sev);
                        simpleVals = [];
                    }
                    // show object
                    this.logToRepl(a, sev);
                }
                else if (typeof a === 'string') {
                    var buf = '';
                    for (var j = 0, len = a.length; j < len; j++) {
                        if (a[j] === '%' && (a[j + 1] === 's' || a[j + 1] === 'i' || a[j + 1] === 'd')) {
                            i++; // read over substitution
                            buf += !types.isUndefinedOrNull(args[i]) ? args[i] : ''; // replace
                            j++; // read over directive
                        }
                        else {
                            buf += a[j];
                        }
                    }
                    simpleVals.push(buf);
                }
                else {
                    simpleVals.push(a);
                }
            }
            // flush simple values
            if (simpleVals.length) {
                this.logToRepl(simpleVals.join(' '), sev);
            }
        }
    };
    DebugService.prototype.registerSessionListeners = function () {
        var _this = this;
        this.toDisposeOnSessionEnd.push(this.session);
        this.toDisposeOnSessionEnd.push(this.session.onDidInitialize(function (event) {
            aria.status(nls.localize('debuggingStarted', "Debugging started."));
            var sendConfigurationDone = function () {
                if (_this.session && _this.session.configuration.capabilities.supportsConfigurationDoneRequest) {
                    _this.session.configurationDone().done(null, function (e) {
                        // Disconnect the debug session on configuration done error #10596
                        if (_this.session) {
                            _this.session.disconnect().done(null, errors.onUnexpectedError);
                        }
                        _this.messageService.show(severity_1.default.Error, e.message);
                    });
                }
            };
            _this.sendAllBreakpoints().done(sendConfigurationDone, sendConfigurationDone);
        }));
        this.toDisposeOnSessionEnd.push(this.session.onDidStop(function (event) {
            _this.setStateAndEmit(debug.State.Stopped);
            var threadId = event.body.threadId;
            _this.getThreadData().done(function () {
                _this.model.rawUpdate({
                    threadId: threadId,
                    stoppedDetails: event.body,
                    allThreadsStopped: event.body.allThreadsStopped
                });
                var thread = _this.model.getThreads()[threadId];
                thread.getCallStack(_this).then(function (callStack) {
                    if (callStack.length > 0) {
                        // focus first stack frame from top that has source location
                        var stackFrameToFocus = arrays.first(callStack, function (sf) { return sf.source && sf.source.available; }, callStack[0]);
                        _this.setFocusedStackFrameAndEvaluate(stackFrameToFocus, thread).done(null, errors.onUnexpectedError);
                        _this.windowService.getWindow().focus();
                        aria.alert(nls.localize('debuggingPaused', "Debugging paused, reason {0}, {1} {2}", event.body.reason, stackFrameToFocus.source ? stackFrameToFocus.source.name : '', stackFrameToFocus.lineNumber));
                        return _this.openOrRevealSource(stackFrameToFocus.source, stackFrameToFocus.lineNumber, false, false);
                    }
                    else {
                        _this.setFocusedStackFrameAndEvaluate(null, thread).done(null, errors.onUnexpectedError);
                    }
                });
            }, errors.onUnexpectedError);
        }));
        this.toDisposeOnSessionEnd.push(this.session.onDidThread(function (event) {
            if (event.body.reason === 'started') {
                _this.getThreadData().done(null, errors.onUnexpectedError);
            }
            else if (event.body.reason === 'exited') {
                _this.model.clearThreads(true, event.body.threadId);
            }
        }));
        this.toDisposeOnSessionEnd.push(this.session.onDidTerminateDebugee(function (event) {
            aria.status(nls.localize('debuggingStopped', "Debugging stopped."));
            if (_this.session && _this.session.getId() === event.body.sessionId) {
                if (event.body && typeof event.body.restart === 'boolean' && event.body.restart) {
                    _this.restartSession().done(null, function (err) { return _this.messageService.show(severity_1.default.Error, err.message); });
                }
                else {
                    _this.session.disconnect().done(null, errors.onUnexpectedError);
                }
            }
        }));
        this.toDisposeOnSessionEnd.push(this.session.onDidContinued(function (event) {
            _this.lazyTransitionToRunningState(event.body.allThreadsContinued ? undefined : event.body.threadId);
        }));
        this.toDisposeOnSessionEnd.push(this.session.onDidOutput(function (event) {
            if (event.body && event.body.category === 'telemetry') {
                // only log telemetry events from debug adapter if the adapter provided the telemetry key
                // and the user opted in telemetry
                if (_this.customTelemetryService && _this.telemetryService.isOptedIn) {
                    _this.customTelemetryService.publicLog(event.body.output, event.body.data);
                }
            }
            else if (event.body && typeof event.body.output === 'string' && event.body.output.length > 0) {
                _this.onOutput(event);
            }
        }));
        this.toDisposeOnSessionEnd.push(this.session.onDidBreakpoint(function (event) {
            var id = event.body && event.body.breakpoint ? event.body.breakpoint.id : undefined;
            var breakpoint = _this.model.getBreakpoints().filter(function (bp) { return bp.idFromAdapter === id; }).pop();
            if (breakpoint) {
                _this.model.updateBreakpoints((_a = {}, _a[breakpoint.getId()] = event.body.breakpoint, _a));
            }
            else {
                var functionBreakpoint = _this.model.getFunctionBreakpoints().filter(function (bp) { return bp.idFromAdapter === id; }).pop();
                if (functionBreakpoint) {
                    _this.model.updateFunctionBreakpoints((_b = {}, _b[functionBreakpoint.getId()] = event.body.breakpoint, _b));
                }
            }
            var _a, _b;
        }));
        this.toDisposeOnSessionEnd.push(this.session.onDidExitAdapter(function (event) {
            // 'Run without debugging' mode VSCode must terminate the extension host. More details: #3905
            if (_this.session && _this.session.configuration.type === 'extensionHost' && _this._state === debug.State.RunningNoDebug) {
                electron_1.ipcRenderer.send('vscode:closeExtensionHostWindow', _this.contextService.getWorkspace().resource.fsPath);
            }
            if (_this.session && _this.session.getId() === event.body.sessionId) {
                _this.onSessionEnd();
            }
        }));
    };
    DebugService.prototype.onOutput = function (event) {
        var outputSeverity = event.body.category === 'stderr' ? severity_1.default.Error : event.body.category === 'console' ? severity_1.default.Warning : severity_1.default.Info;
        this.appendReplOutput(event.body.output, outputSeverity);
    };
    DebugService.prototype.getThreadData = function () {
        var _this = this;
        return this.session.threads().then(function (response) {
            if (response && response.body && response.body.threads) {
                response.body.threads.forEach(function (thread) { return _this.model.rawUpdate({ threadId: thread.id, thread: thread }); });
            }
        });
    };
    DebugService.prototype.loadBreakpoints = function () {
        var result;
        try {
            result = JSON.parse(this.storageService.get(DEBUG_BREAKPOINTS_KEY, storage_1.StorageScope.WORKSPACE, '[]')).map(function (breakpoint) {
                return new model.Breakpoint(new debugSource_1.Source(breakpoint.source.raw ? breakpoint.source.raw : { path: uri_1.default.parse(breakpoint.source.uri).fsPath, name: breakpoint.source.name }), breakpoint.desiredLineNumber || breakpoint.lineNumber, breakpoint.enabled, breakpoint.condition);
            });
        }
        catch (e) { }
        return result || [];
    };
    DebugService.prototype.loadFunctionBreakpoints = function () {
        var result;
        try {
            result = JSON.parse(this.storageService.get(DEBUG_FUNCTION_BREAKPOINTS_KEY, storage_1.StorageScope.WORKSPACE, '[]')).map(function (fb) {
                return new model.FunctionBreakpoint(fb.name, fb.enabled);
            });
        }
        catch (e) { }
        return result || [];
    };
    DebugService.prototype.loadExceptionBreakpoints = function () {
        var result;
        try {
            result = JSON.parse(this.storageService.get(DEBUG_EXCEPTION_BREAKPOINTS_KEY, storage_1.StorageScope.WORKSPACE, '[]')).map(function (exBreakpoint) {
                return new model.ExceptionBreakpoint(exBreakpoint.filter || exBreakpoint.name, exBreakpoint.label, exBreakpoint.enabled);
            });
        }
        catch (e) { }
        return result || [];
    };
    DebugService.prototype.loadWatchExpressions = function () {
        var result;
        try {
            result = JSON.parse(this.storageService.get(DEBUG_WATCH_EXPRESSIONS_KEY, storage_1.StorageScope.WORKSPACE, '[]')).map(function (watchStoredData) {
                return new model.Expression(watchStoredData.name, false, watchStoredData.id);
            });
        }
        catch (e) { }
        return result || [];
    };
    Object.defineProperty(DebugService.prototype, "state", {
        get: function () {
            return this._state;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DebugService.prototype, "onDidChangeState", {
        get: function () {
            return this._onDidChangeState.event;
        },
        enumerable: true,
        configurable: true
    });
    DebugService.prototype.setStateAndEmit = function (newState) {
        this._state = newState;
        this._onDidChangeState.fire(newState);
    };
    Object.defineProperty(DebugService.prototype, "enabled", {
        get: function () {
            return !!this.contextService.getWorkspace();
        },
        enumerable: true,
        configurable: true
    });
    DebugService.prototype.setFocusedStackFrameAndEvaluate = function (focusedStackFrame, thread) {
        if (!thread && focusedStackFrame) {
            thread = this.model.getThreads()[focusedStackFrame.threadId];
        }
        this.viewModel.setFocusedStackFrame(focusedStackFrame, thread);
        if (focusedStackFrame) {
            return this.model.evaluateWatchExpressions(this.session, focusedStackFrame);
        }
        else {
            this.model.clearWatchExpressionValues();
            return winjs_base_1.TPromise.as(null);
        }
    };
    DebugService.prototype.enableOrDisableBreakpoints = function (enable, breakpoint) {
        if (breakpoint) {
            this.model.setEnablement(breakpoint, enable);
            if (breakpoint instanceof model.Breakpoint) {
                return this.sendBreakpoints(breakpoint.source.uri);
            }
            else if (breakpoint instanceof model.FunctionBreakpoint) {
                return this.sendFunctionBreakpoints();
            }
            return this.sendExceptionBreakpoints();
        }
        this.model.enableOrDisableAllBreakpoints(enable);
        return this.sendAllBreakpoints();
    };
    DebugService.prototype.addBreakpoints = function (rawBreakpoints) {
        var _this = this;
        this.model.addBreakpoints(rawBreakpoints);
        var uris = arrays.distinct(rawBreakpoints, function (raw) { return raw.uri.toString(); }).map(function (raw) { return raw.uri; });
        rawBreakpoints.forEach(function (rbp) { return aria.status(nls.localize('breakpointAdded', "Added breakpoint, line {0}, file {1}", rbp.lineNumber, rbp.uri.fsPath)); });
        return winjs_base_1.TPromise.join(uris.map(function (uri) { return _this.sendBreakpoints(uri); }));
    };
    DebugService.prototype.removeBreakpoints = function (id) {
        var _this = this;
        var toRemove = this.model.getBreakpoints().filter(function (bp) { return !id || bp.getId() === id; });
        toRemove.forEach(function (bp) { return aria.status(nls.localize('breakpointRemoved', "Removed breakpoint, line {0}, file {1}", bp.lineNumber, bp.source.uri.fsPath)); });
        var urisToClear = arrays.distinct(toRemove, function (bp) { return bp.source.uri.toString(); }).map(function (bp) { return bp.source.uri; });
        this.model.removeBreakpoints(toRemove);
        return winjs_base_1.TPromise.join(urisToClear.map(function (uri) { return _this.sendBreakpoints(uri); }));
    };
    DebugService.prototype.setBreakpointsActivated = function (activated) {
        this.model.setBreakpointsActivated(activated);
        return this.sendAllBreakpoints();
    };
    DebugService.prototype.addFunctionBreakpoint = function () {
        this.model.addFunctionBreakpoint('');
    };
    DebugService.prototype.renameFunctionBreakpoint = function (id, newFunctionName) {
        this.model.updateFunctionBreakpoints((_a = {}, _a[id] = { name: newFunctionName }, _a));
        return this.sendFunctionBreakpoints();
        var _a;
    };
    DebugService.prototype.removeFunctionBreakpoints = function (id) {
        this.model.removeFunctionBreakpoints(id);
        return this.sendFunctionBreakpoints();
    };
    DebugService.prototype.addReplExpression = function (name) {
        var _this = this;
        this.telemetryService.publicLog('debugService/addReplExpression');
        var focussedStackFrame = this.viewModel.getFocusedStackFrame();
        return this.model.addReplExpression(this.session, focussedStackFrame, name)
            .then(function () { return _this.setFocusedStackFrameAndEvaluate(focussedStackFrame); });
    };
    DebugService.prototype.logToRepl = function (value, severity) {
        this.model.logToRepl(value, severity);
    };
    DebugService.prototype.appendReplOutput = function (value, severity) {
        this.model.appendReplOutput(value, severity);
    };
    DebugService.prototype.removeReplExpressions = function () {
        this.model.removeReplExpressions();
    };
    DebugService.prototype.setVariable = function (variable, value) {
        var _this = this;
        if (!this.session || !(variable instanceof model.Variable)) {
            return winjs_base_1.TPromise.as(null);
        }
        return this.session.setVariable({
            name: variable.name,
            value: value,
            variablesReference: variable.parent.reference
        }).then(function (response) {
            if (response && response.body) {
                variable.value = response.body.value;
            }
            // Evaluate all watch expressions again since changing variable value might have changed some #8118.
            return _this.setFocusedStackFrameAndEvaluate(_this.viewModel.getFocusedStackFrame());
        }, function (err) {
            variable.errorMessage = err.message;
        });
    };
    DebugService.prototype.addWatchExpression = function (name) {
        return this.model.addWatchExpression(this.session, this.viewModel.getFocusedStackFrame(), name);
    };
    DebugService.prototype.renameWatchExpression = function (id, newName) {
        return this.model.renameWatchExpression(this.session, this.viewModel.getFocusedStackFrame(), id, newName);
    };
    DebugService.prototype.removeWatchExpressions = function (id) {
        this.model.removeWatchExpressions(id);
    };
    DebugService.prototype.createSession = function (noDebug, configuration) {
        var _this = this;
        this.removeReplExpressions();
        return this.textFileService.saveAll() // make sure all dirty files are saved
            .then(function () { return _this.configurationService.reloadConfiguration() // make sure configuration is up to date
            .then(function () { return _this.extensionService.onReady()
            .then(function () { return _this.configurationManager.setConfiguration(configuration || _this.configurationManager.configurationName)
            .then(function () { return _this.configurationManager.resolveInteractiveVariables(); })
            .then(function (resolvedConfiguration) {
            configuration = resolvedConfiguration;
            if (!configuration) {
                return _this.configurationManager.openConfigFile(false).then(function (openend) {
                    if (openend) {
                        _this.messageService.show(severity_1.default.Info, nls.localize('NewLaunchConfig', "Please set up the launch configuration file for your application."));
                    }
                });
            }
            if (configuration.silentlyAbort) {
                return;
            }
            configuration.noDebug = noDebug;
            if (!_this.configurationManager.adapter) {
                return configuration.type ? winjs_base_1.TPromise.wrapError(new Error(nls.localize('debugTypeNotSupported', "Configured debug type '{0}' is not supported.", configuration.type)))
                    : winjs_base_1.TPromise.wrapError(errors.create(nls.localize('debugTypeMissing', "Missing property 'type' for the chosen launch configuration."), { actions: [_this.instantiationService.createInstance(debugactions.ConfigureAction, debugactions.ConfigureAction.ID, debugactions.ConfigureAction.LABEL), message_1.CloseAction] }));
            }
            return _this.runPreLaunchTask(configuration.preLaunchTask).then(function (taskSummary) {
                var errorCount = configuration.preLaunchTask ? _this.markerService.getStatistics().errors : 0;
                var successExitCode = taskSummary && taskSummary.exitCode === 0;
                var failureExitCode = taskSummary && taskSummary.exitCode !== undefined && taskSummary.exitCode !== 0;
                if (successExitCode || (errorCount === 0 && !failureExitCode)) {
                    return _this.doCreateSession(configuration);
                }
                _this.messageService.show(severity_1.default.Error, {
                    message: errorCount > 1 ? nls.localize('preLaunchTaskErrors', "Build errors have been detected during preLaunchTask '{0}'.", configuration.preLaunchTask) :
                        errorCount === 1 ? nls.localize('preLaunchTaskError', "Build error has been detected during preLaunchTask '{0}'.", configuration.preLaunchTask) :
                            nls.localize('preLaunchTaskExitCode', "The preLaunchTask '{0}' terminated with exit code {1}.", configuration.preLaunchTask, taskSummary.exitCode),
                    actions: [new actions_1.Action('debug.continue', nls.localize('debugAnyway', "Debug Anyway"), null, true, function () {
                            _this.messageService.hideAll();
                            return _this.doCreateSession(configuration);
                        }), message_1.CloseAction]
                });
            }, function (err) {
                if (err.code !== taskSystem_1.TaskErrors.NotConfigured) {
                    throw err;
                }
                _this.messageService.show(err.severity, {
                    message: err.message,
                    actions: [_this.taskService.configureAction(), message_1.CloseAction]
                });
            });
        }); }); }); });
    };
    DebugService.prototype.doCreateSession = function (configuration) {
        var _this = this;
        this.setStateAndEmit(debug.State.Initializing);
        return this.telemetryService.getTelemetryInfo().then(function (info) {
            var telemetryInfo = Object.create(null);
            telemetryInfo['common.vscodemachineid'] = info.machineId;
            telemetryInfo['common.vscodesessionid'] = info.sessionId;
            return telemetryInfo;
        }).then(function (data) {
            var _a = _this.configurationManager.adapter, aiKey = _a.aiKey, type = _a.type;
            var publisher = _this.configurationManager.adapter.extensionDescription.publisher;
            _this.customTelemetryService = null;
            if (aiKey) {
                var client = new ipc_cp_1.Client(uri_1.default.parse(require.toUrl('bootstrap')).fsPath, {
                    serverName: 'Debug Telemetry',
                    timeout: 1000 * 60 * 5,
                    args: [(publisher + "." + type), JSON.stringify(data), aiKey],
                    env: {
                        ELECTRON_RUN_AS_NODE: 1,
                        PIPE_LOGGING: 'true',
                        AMD_ENTRYPOINT: 'vs/workbench/parts/debug/node/telemetryApp'
                    }
                });
                var channel = client.getChannel('telemetryAppender');
                var appender = new telemetryIpc_1.TelemetryAppenderClient(channel);
                _this.toDisposeOnSessionEnd.push(client);
                _this.customTelemetryService = new telemetryService_1.TelemetryService({ appender: appender }, _this.configurationService);
            }
            _this.session = _this.instantiationService.createInstance(rawDebugSession_1.RawDebugSession, configuration.debugServer, _this.configurationManager.adapter, _this.customTelemetryService);
            _this.registerSessionListeners();
            return _this.session.initialize({
                adapterID: configuration.type,
                pathFormat: 'path',
                linesStartAt1: true,
                columnsStartAt1: true,
                supportsVariableType: true,
                supportsVariablePaging: true,
                supportsRunInTerminalRequest: true // #10574
            }).then(function (result) {
                if (!_this.session) {
                    return winjs_base_1.TPromise.wrapError(new Error(nls.localize('debugAdapterCrash', "Debug adapter process has terminated unexpectedly")));
                }
                _this.model.setExceptionBreakpoints(_this.session.configuration.capabilities.exceptionBreakpointFilters);
                return configuration.request === 'attach' ? _this.session.attach(configuration) : _this.session.launch(configuration);
            }).then(function (result) {
                if (!_this.session) {
                    return winjs_base_1.TPromise.as(null);
                }
                if (configuration.internalConsoleOptions === 'openOnSessionStart' || (!_this.viewModel.changedWorkbenchViewState && configuration.internalConsoleOptions !== 'neverOpen')) {
                    _this.panelService.openPanel(debug.REPL_ID, false).done(undefined, errors.onUnexpectedError);
                }
                if (!_this.viewModel.changedWorkbenchViewState && !_this.partService.isSideBarHidden()) {
                    // We only want to change the workbench view state on the first debug session #5738 and if the side bar is not hidden
                    _this.viewModel.changedWorkbenchViewState = true;
                    _this.viewletService.openViewlet(debug.VIEWLET_ID);
                }
                // Do not change status bar to orange if we are just running without debug.
                if (!configuration.noDebug) {
                    _this.partService.addClass('debugging');
                }
                _this.extensionService.activateByEvent("onDebug:" + configuration.type).done(null, errors.onUnexpectedError);
                _this.inDebugMode.set(true);
                _this.lazyTransitionToRunningState();
                _this.telemetryService.publicLog('debugSessionStart', {
                    type: configuration.type,
                    breakpointCount: _this.model.getBreakpoints().length,
                    exceptionBreakpoints: _this.model.getExceptionBreakpoints(),
                    watchExpressionsCount: _this.model.getWatchExpressions().length,
                    extensionName: _this.configurationManager.adapter.extensionDescription.publisher + "." + _this.configurationManager.adapter.extensionDescription.name,
                    isBuiltin: _this.configurationManager.adapter.extensionDescription.isBuiltin
                });
            }).then(undefined, function (error) {
                if (error instanceof Error && error.message === 'Canceled') {
                    // Do not show 'canceled' error messages to the user #7906
                    return winjs_base_1.TPromise.as(null);
                }
                _this.telemetryService.publicLog('debugMisconfiguration', { type: configuration ? configuration.type : undefined });
                _this.setStateAndEmit(debug.State.Inactive);
                if (_this.session) {
                    _this.session.disconnect().done(null, errors.onUnexpectedError);
                }
                // Show the repl if some error got logged there #5870
                if (_this.model.getReplElements().length > 0) {
                    _this.panelService.openPanel(debug.REPL_ID, false).done(undefined, errors.onUnexpectedError);
                }
                var configureAction = _this.instantiationService.createInstance(debugactions.ConfigureAction, debugactions.ConfigureAction.ID, debugactions.ConfigureAction.LABEL);
                var actions = (error.actions && error.actions.length) ? error.actions.concat([configureAction]) : [message_1.CloseAction, configureAction];
                return winjs_base_1.TPromise.wrapError(errors.create(error.message, { actions: actions }));
            });
        });
    };
    DebugService.prototype.runPreLaunchTask = function (taskName) {
        var _this = this;
        if (!taskName) {
            return winjs_base_1.TPromise.as(null);
        }
        // run a task before starting a debug session
        return this.taskService.tasks().then(function (descriptions) {
            var filteredTasks = descriptions.filter(function (task) { return task.name === taskName; });
            if (filteredTasks.length !== 1) {
                return winjs_base_1.TPromise.wrapError(errors.create(nls.localize('DebugTaskNotFound', "Could not find the preLaunchTask \'{0}\'.", taskName), {
                    actions: [
                        _this.instantiationService.createInstance(debugactions.ConfigureAction, debugactions.ConfigureAction.ID, debugactions.ConfigureAction.LABEL),
                        _this.taskService.configureAction(),
                        message_1.CloseAction
                    ]
                }));
            }
            // task is already running - nothing to do.
            if (_this.lastTaskEvent && _this.lastTaskEvent.taskName === taskName) {
                return winjs_base_1.TPromise.as(null);
            }
            if (_this.lastTaskEvent) {
                // there is a different task running currently.
                return winjs_base_1.TPromise.wrapError(errors.create(nls.localize('differentTaskRunning', "There is a task {0} running. Can not run pre launch task {1}.", _this.lastTaskEvent.taskName, taskName)));
            }
            // no task running, execute the preLaunchTask.
            var taskPromise = _this.taskService.run(filteredTasks[0].id).then(function (result) {
                _this.lastTaskEvent = null;
                return result;
            }, function (err) {
                _this.lastTaskEvent = null;
            });
            if (filteredTasks[0].isWatching) {
                return new winjs_base_1.TPromise(function (c, e) { return _this.taskService.addOneTimeDisposableListener(taskService_1.TaskServiceEvents.Inactive, function () { return c(null); }); });
            }
            return taskPromise;
        });
    };
    DebugService.prototype.rawAttach = function (port) {
        if (this.session) {
            return this.session.attach({ port: port });
        }
        this.setStateAndEmit(debug.State.Initializing);
        var configuration = this.configurationManager.configuration;
        return this.doCreateSession({
            type: configuration.type,
            request: 'attach',
            port: port,
            sourceMaps: configuration.sourceMaps,
            outDir: configuration.outDir,
            debugServer: configuration.debugServer
        });
    };
    DebugService.prototype.restartSession = function () {
        var _this = this;
        return this.session ? this.session.disconnect(true).then(function () {
            return new winjs_base_1.TPromise(function (c, e) {
                setTimeout(function () {
                    _this.createSession(false, null).then(function () { return c(null); }, function (err) { return e(err); });
                }, 300);
            });
        }) : this.createSession(false, null);
    };
    DebugService.prototype.getActiveSession = function () {
        return this.session;
    };
    DebugService.prototype.onSessionEnd = function () {
        if (this.session) {
            var bpsExist = this.model.getBreakpoints().length > 0;
            this.telemetryService.publicLog('debugSessionStop', {
                type: this.session.configuration.type,
                success: this.session.emittedStopped || !bpsExist,
                sessionLengthInSeconds: this.session.getLengthInSeconds(),
                breakpointCount: this.model.getBreakpoints().length,
                watchExpressionsCount: this.model.getWatchExpressions().length
            });
        }
        this.session = null;
        try {
            this.toDisposeOnSessionEnd = lifecycle.dispose(this.toDisposeOnSessionEnd);
        }
        catch (e) {
        }
        this.partService.removeClass('debugging');
        this.model.clearThreads(true);
        this.setFocusedStackFrameAndEvaluate(null).done(null, errors.onUnexpectedError);
        this.setStateAndEmit(debug.State.Inactive);
        // set breakpoints back to unverified since the session ended.
        // source reference changes across sessions, so we do not use it to persist the source.
        var data = {};
        this.model.getBreakpoints().forEach(function (bp) {
            delete bp.source.raw.sourceReference;
            data[bp.getId()] = { line: bp.lineNumber, verified: false };
        });
        this.model.updateBreakpoints(data);
        this.inDebugMode.reset();
    };
    DebugService.prototype.getModel = function () {
        return this.model;
    };
    DebugService.prototype.getViewModel = function () {
        return this.viewModel;
    };
    DebugService.prototype.openOrRevealSource = function (source, lineNumber, preserveFocus, sideBySide) {
        var _this = this;
        var visibleEditors = this.editorService.getVisibleEditors();
        for (var i = 0; i < visibleEditors.length; i++) {
            var fileInput = editor_1.asFileEditorInput(visibleEditors[i].input);
            if ((fileInput && fileInput.getResource().toString() === source.uri.toString()) ||
                (visibleEditors[i].input instanceof debugEditorInputs_1.DebugStringEditorInput && visibleEditors[i].input.getResource().toString() === source.uri.toString())) {
                var control = visibleEditors[i].getControl();
                if (control) {
                    control.revealLineInCenterIfOutsideViewport(lineNumber);
                    control.setSelection({ startLineNumber: lineNumber, startColumn: 1, endLineNumber: lineNumber, endColumn: 1 });
                    this.editorGroupService.activateGroup(i);
                    if (!preserveFocus) {
                        this.editorGroupService.focusGroup(i);
                    }
                }
                return winjs_base_1.TPromise.as(null);
            }
        }
        if (source.inMemory) {
            // internal module
            if (source.reference !== 0 && this.session && source.available) {
                return this.session.source({ sourceReference: source.reference }).then(function (response) {
                    var mime = response && response.body && response.body.mimeType ? response.body.mimeType : mime_1.guessMimeTypes(source.name)[0];
                    var inputValue = response && response.body ? response.body.content : '';
                    return _this.getDebugStringEditorInput(source, inputValue, mime);
                }, function (err) {
                    // Display the error from debug adapter using a temporary editor #8836
                    return _this.getDebugErrorEditorInput(source, err.message);
                }).then(function (editorInput) {
                    return _this.editorService.openEditor(editorInput, { preserveFocus: preserveFocus, selection: { startLineNumber: lineNumber, startColumn: 1, endLineNumber: lineNumber, endColumn: 1 } }, sideBySide);
                });
            }
            return this.sourceIsUnavailable(source, sideBySide);
        }
        return this.fileService.resolveFile(source.uri).then(function () {
            return _this.editorService.openEditor({
                resource: source.uri,
                options: {
                    selection: {
                        startLineNumber: lineNumber,
                        startColumn: 1,
                        endLineNumber: lineNumber,
                        endColumn: 1
                    },
                    preserveFocus: preserveFocus
                }
            }, sideBySide);
        }, function (err) { return _this.sourceIsUnavailable(source, sideBySide); });
    };
    DebugService.prototype.sourceIsUnavailable = function (source, sideBySide) {
        this.model.sourceIsUnavailable(source);
        var editorInput = this.getDebugErrorEditorInput(source, nls.localize('debugSourceNotAvailable', "Source {0} is not available.", source.name));
        return this.editorService.openEditor(editorInput, { preserveFocus: true }, sideBySide);
    };
    DebugService.prototype.getConfigurationManager = function () {
        return this.configurationManager;
    };
    DebugService.prototype.next = function (threadId) {
        var _this = this;
        if (!this.session) {
            return winjs_base_1.TPromise.as(null);
        }
        return this.session.next({ threadId: threadId }).then(function () {
            _this.lazyTransitionToRunningState(threadId);
        });
    };
    DebugService.prototype.stepIn = function (threadId) {
        var _this = this;
        if (!this.session) {
            return winjs_base_1.TPromise.as(null);
        }
        return this.session.stepIn({ threadId: threadId }).then(function () {
            _this.lazyTransitionToRunningState(threadId);
        });
    };
    DebugService.prototype.stepOut = function (threadId) {
        var _this = this;
        if (!this.session) {
            return winjs_base_1.TPromise.as(null);
        }
        return this.session.stepOut({ threadId: threadId }).then(function () {
            _this.lazyTransitionToRunningState(threadId);
        });
    };
    DebugService.prototype.stepBack = function (threadId) {
        var _this = this;
        if (!this.session) {
            return winjs_base_1.TPromise.as(null);
        }
        return this.session.stepBack({ threadId: threadId }).then(function () {
            _this.lazyTransitionToRunningState(threadId);
        });
    };
    DebugService.prototype.continue = function (threadId) {
        var _this = this;
        if (!this.session) {
            return winjs_base_1.TPromise.as(null);
        }
        return this.session.continue({ threadId: threadId }).then(function (response) {
            var allThreadsContinued = response && response.body ? response.body.allThreadsContinued !== false : true;
            _this.lazyTransitionToRunningState(allThreadsContinued ? undefined : threadId);
        });
    };
    DebugService.prototype.pause = function (threadId) {
        if (!this.session) {
            return winjs_base_1.TPromise.as(null);
        }
        return this.session.pause({ threadId: threadId });
    };
    DebugService.prototype.restartFrame = function (frameId) {
        if (!this.session) {
            return winjs_base_1.TPromise.as(null);
        }
        return this.session.restartFrame({ frameId: frameId });
    };
    DebugService.prototype.completions = function (text, position) {
        if (!this.session || !this.session.configuration.capabilities.supportsCompletionsRequest) {
            return winjs_base_1.TPromise.as([]);
        }
        var focussedStackFrame = this.viewModel.getFocusedStackFrame();
        return this.session.completions({
            frameId: focussedStackFrame ? focussedStackFrame.frameId : undefined,
            text: text,
            column: position.column,
            line: position.lineNumber
        }).then(function (response) {
            return response && response.body && response.body.targets ? response.body.targets.map(function (item) { return ({
                label: item.label,
                insertText: item.text || item.label,
                type: item.type
            }); }) : [];
        }, function (err) { return []; });
    };
    DebugService.prototype.lazyTransitionToRunningState = function (threadId) {
        var _this = this;
        var setNewFocusedStackFrameScheduler;
        var toDispose = this.session.onDidStop(function (e) {
            if (e.body.threadId === threadId || e.body.allThreadsStopped || !threadId) {
                setNewFocusedStackFrameScheduler.cancel();
            }
        });
        this.model.clearThreads(false, threadId);
        // Get a top stack frame of a stopped thread if there is any.
        var threads = this.model.getThreads();
        var stoppedReference = Object.keys(threads).filter(function (ref) { return threads[ref].stopped; }).pop();
        var stoppedThread = stoppedReference ? threads[parseInt(stoppedReference)] : null;
        var callStack = stoppedThread ? stoppedThread.getCachedCallStack() : null;
        var stackFrameToFocus = callStack && callStack.length > 0 ? callStack[0] : null;
        if (!stoppedThread) {
            this.setStateAndEmit(this.configurationManager.configuration.noDebug ? debug.State.RunningNoDebug : debug.State.Running);
        }
        // Do not immediatly set a new focused stack frame since that might cause unnecessery flickering
        // of the tree in the debug viewlet. Only set focused stack frame if no stopped event has arrived in 500ms.
        setNewFocusedStackFrameScheduler = new async_1.RunOnceScheduler(function () {
            toDispose.dispose();
            aria.status(nls.localize('debuggingContinued', "Debugging continued."));
            _this.setFocusedStackFrameAndEvaluate(stackFrameToFocus).done(null, errors.onUnexpectedError);
        }, 500);
        setNewFocusedStackFrameScheduler.schedule();
    };
    DebugService.prototype.getDebugStringEditorInput = function (source, value, mtype) {
        var result = this.instantiationService.createInstance(debugEditorInputs_1.DebugStringEditorInput, source.name, source.uri, source.origin, value, mtype, void 0);
        this.toDisposeOnSessionEnd.push(result);
        return result;
    };
    DebugService.prototype.getDebugErrorEditorInput = function (source, value) {
        var result = this.instantiationService.createInstance(debugEditorInputs_1.DebugErrorEditorInput, source.name, value);
        this.toDisposeOnSessionEnd.push(result);
        return result;
    };
    DebugService.prototype.sendAllBreakpoints = function () {
        var _this = this;
        return winjs_base_1.TPromise.join(arrays.distinct(this.model.getBreakpoints(), function (bp) { return bp.source.uri.toString(); }).map(function (bp) { return _this.sendBreakpoints(bp.source.uri); }))
            .then(function () { return _this.sendFunctionBreakpoints(); })
            .then(function () { return _this.sendExceptionBreakpoints(); });
    };
    DebugService.prototype.sendBreakpoints = function (modelUri, sourceModified) {
        var _this = this;
        if (sourceModified === void 0) { sourceModified = false; }
        if (!this.session || !this.session.readyForBreakpoints) {
            return winjs_base_1.TPromise.as(null);
        }
        if (this.textFileService.isDirty(modelUri)) {
            // Only send breakpoints for a file once it is not dirty #8077
            this.breakpointsToSendOnResourceSaved[modelUri.toString()] = true;
            return winjs_base_1.TPromise.as(null);
        }
        var breakpointsToSend = arrays.distinct(this.model.getBreakpoints().filter(function (bp) { return _this.model.areBreakpointsActivated() && bp.enabled && bp.source.uri.toString() === modelUri.toString(); }), function (bp) { return ("" + bp.desiredLineNumber); });
        var rawSource = breakpointsToSend.length > 0 ? breakpointsToSend[0].source.raw : debugSource_1.Source.toRawSource(modelUri, this.model);
        return this.session.setBreakpoints({
            source: rawSource,
            lines: breakpointsToSend.map(function (bp) { return bp.desiredLineNumber; }),
            breakpoints: breakpointsToSend.map(function (bp) { return ({ line: bp.desiredLineNumber, condition: bp.condition }); }),
            sourceModified: sourceModified
        }).then(function (response) {
            if (!response || !response.body) {
                return;
            }
            var data = {};
            for (var i = 0; i < breakpointsToSend.length; i++) {
                data[breakpointsToSend[i].getId()] = response.body.breakpoints[i];
            }
            _this.model.updateBreakpoints(data);
        });
    };
    DebugService.prototype.sendFunctionBreakpoints = function () {
        var _this = this;
        if (!this.session || !this.session.readyForBreakpoints || !this.session.configuration.capabilities.supportsFunctionBreakpoints) {
            return winjs_base_1.TPromise.as(null);
        }
        var breakpointsToSend = this.model.getFunctionBreakpoints().filter(function (fbp) { return fbp.enabled && _this.model.areBreakpointsActivated(); });
        return this.session.setFunctionBreakpoints({ breakpoints: breakpointsToSend }).then(function (response) {
            if (!response || !response.body) {
                return;
            }
            var data = {};
            for (var i = 0; i < breakpointsToSend.length; i++) {
                data[breakpointsToSend[i].getId()] = response.body.breakpoints[i];
            }
            _this.model.updateFunctionBreakpoints(data);
        });
    };
    DebugService.prototype.sendExceptionBreakpoints = function () {
        if (!this.session || !this.session.readyForBreakpoints || this.model.getExceptionBreakpoints().length === 0) {
            return winjs_base_1.TPromise.as(null);
        }
        var enabledExceptionBps = this.model.getExceptionBreakpoints().filter(function (exb) { return exb.enabled; });
        return this.session.setExceptionBreakpoints({ filters: enabledExceptionBps.map(function (exb) { return exb.filter; }) });
    };
    DebugService.prototype.onFileChanges = function (fileChangesEvent) {
        var _this = this;
        this.model.removeBreakpoints(this.model.getBreakpoints().filter(function (bp) {
            return fileChangesEvent.contains(bp.source.uri, files_1.FileChangeType.DELETED);
        }));
        fileChangesEvent.getUpdated().forEach(function (event) {
            if (_this.breakpointsToSendOnResourceSaved[event.resource.toString()]) {
                _this.breakpointsToSendOnResourceSaved[event.resource.toString()] = false;
                _this.sendBreakpoints(event.resource, true).done(null, errors.onUnexpectedError);
            }
        });
    };
    DebugService.prototype.store = function () {
        this.storageService.store(DEBUG_BREAKPOINTS_KEY, JSON.stringify(this.model.getBreakpoints()), storage_1.StorageScope.WORKSPACE);
        this.storageService.store(DEBUG_BREAKPOINTS_ACTIVATED_KEY, this.model.areBreakpointsActivated() ? 'true' : 'false', storage_1.StorageScope.WORKSPACE);
        this.storageService.store(DEBUG_FUNCTION_BREAKPOINTS_KEY, JSON.stringify(this.model.getFunctionBreakpoints()), storage_1.StorageScope.WORKSPACE);
        this.storageService.store(DEBUG_EXCEPTION_BREAKPOINTS_KEY, JSON.stringify(this.model.getExceptionBreakpoints()), storage_1.StorageScope.WORKSPACE);
        this.storageService.store(DEBUG_SELECTED_CONFIG_NAME_KEY, this.configurationManager.configurationName, storage_1.StorageScope.WORKSPACE);
        this.storageService.store(DEBUG_WATCH_EXPRESSIONS_KEY, JSON.stringify(this.model.getWatchExpressions().map(function (we) { return ({ name: we.name, id: we.getId() }); })), storage_1.StorageScope.WORKSPACE);
    };
    DebugService.prototype.dispose = function () {
        this.toDisposeOnSessionEnd = lifecycle.dispose(this.toDisposeOnSessionEnd);
        this.toDispose = lifecycle.dispose(this.toDispose);
    };
    DebugService = __decorate([
        __param(0, storage_1.IStorageService),
        __param(1, editorService_1.IWorkbenchEditorService),
        __param(2, files_2.ITextFileService),
        __param(3, viewletService_1.IViewletService),
        __param(4, panelService_1.IPanelService),
        __param(5, files_1.IFileService),
        __param(6, message_1.IMessageService),
        __param(7, partService_1.IPartService),
        __param(8, windowService_1.IWindowService),
        __param(9, telemetry_1.ITelemetryService),
        __param(10, workspace_1.IWorkspaceContextService),
        __param(11, contextkey_1.IContextKeyService),
        __param(12, groupService_1.IEditorGroupService),
        __param(13, event_2.IEventService),
        __param(14, lifecycle_1.ILifecycleService),
        __param(15, instantiation_1.IInstantiationService),
        __param(16, extensions_1.IExtensionService),
        __param(17, markers_1.IMarkerService),
        __param(18, taskService_1.ITaskService),
        __param(19, configuration_1.IConfigurationService)
    ], DebugService);
    return DebugService;
}());
exports.DebugService = DebugService;
