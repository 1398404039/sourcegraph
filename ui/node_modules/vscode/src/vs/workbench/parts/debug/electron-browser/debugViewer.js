/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var nls = require('vs/nls');
var winjs_base_1 = require('vs/base/common/winjs.base');
var lifecycle = require('vs/base/common/lifecycle');
var paths = require('vs/base/common/paths');
var async = require('vs/base/common/async');
var errors = require('vs/base/common/errors');
var strings = require('vs/base/common/strings');
var platform_1 = require('vs/base/common/platform');
var dom = require('vs/base/browser/dom');
var labels = require('vs/base/common/labels');
var actionbar = require('vs/base/browser/ui/actionbar/actionbar');
var inputBox_1 = require('vs/base/browser/ui/inputbox/inputBox');
var treedefaults = require('vs/base/parts/tree/browser/treeDefaults');
var debug = require('vs/workbench/parts/debug/common/debug');
var model = require('vs/workbench/parts/debug/common/debugModel');
var viewmodel = require('vs/workbench/parts/debug/common/debugViewModel');
var debugactions = require('vs/workbench/parts/debug/browser/debugActions');
var electronDebugActions_1 = require('vs/workbench/parts/debug/electron-browser/electronDebugActions');
var contextView_1 = require('vs/platform/contextview/browser/contextView');
var instantiation_1 = require('vs/platform/instantiation/common/instantiation');
var workspace_1 = require('vs/platform/workspace/common/workspace');
var $ = dom.$;
var booleanRegex = /^true|false$/i;
var stringRegex = /^(['"]).*\1$/;
var MAX_VALUE_RENDER_LENGTH_IN_VIEWLET = 1024;
function renderExpressionValue(expressionOrValue, container, showChanged, maxValueRenderLength) {
    var value = typeof expressionOrValue === 'string' ? expressionOrValue : expressionOrValue.value;
    // remove stale classes
    container.className = 'value';
    // when resolving expressions we represent errors from the server as a variable with name === null.
    if (value === null || ((expressionOrValue instanceof model.Expression || expressionOrValue instanceof model.Variable) && !expressionOrValue.available)) {
        dom.addClass(container, 'unavailable');
        if (value !== model.Expression.DEFAULT_VALUE) {
            dom.addClass(container, 'error');
        }
    }
    else if (!isNaN(+value)) {
        dom.addClass(container, 'number');
    }
    else if (booleanRegex.test(value)) {
        dom.addClass(container, 'boolean');
    }
    else if (stringRegex.test(value)) {
        dom.addClass(container, 'string');
    }
    if (showChanged && expressionOrValue.valueChanged) {
        // value changed color has priority over other colors.
        container.className = 'value changed';
    }
    if (maxValueRenderLength && value.length > maxValueRenderLength) {
        value = value.substr(0, maxValueRenderLength) + '...';
    }
    container.textContent = value;
    container.title = value;
}
exports.renderExpressionValue = renderExpressionValue;
function renderVariable(tree, variable, data, showChanged) {
    if (variable.available) {
        data.name.textContent = variable.name;
        data.name.title = variable.type ? variable.type : '';
    }
    if (variable.value) {
        data.name.textContent += ':';
        renderExpressionValue(variable, data.value, showChanged, MAX_VALUE_RENDER_LENGTH_IN_VIEWLET);
        data.value.title = variable.value;
    }
    else {
        data.value.textContent = '';
        data.value.title = '';
    }
}
exports.renderVariable = renderVariable;
function renderRenameBox(debugService, contextViewService, tree, element, container, options) {
    var inputBoxContainer = dom.append(container, $('.inputBoxContainer'));
    var inputBox = new inputBox_1.InputBox(inputBoxContainer, contextViewService, {
        validationOptions: options.validationOptions,
        placeholder: options.placeholder,
        ariaLabel: options.ariaLabel
    });
    inputBox.value = options.initialValue ? options.initialValue : '';
    inputBox.focus();
    inputBox.select();
    var disposed = false;
    var toDispose = [inputBox];
    var wrapUp = async.once(function (renamed) {
        if (!disposed) {
            disposed = true;
            if (element instanceof model.Expression && renamed && inputBox.value) {
                debugService.renameWatchExpression(element.getId(), inputBox.value).done(null, errors.onUnexpectedError);
            }
            else if (element instanceof model.Expression && !element.name) {
                debugService.removeWatchExpressions(element.getId());
            }
            else if (element instanceof model.FunctionBreakpoint && renamed && inputBox.value) {
                debugService.renameFunctionBreakpoint(element.getId(), inputBox.value).done(null, errors.onUnexpectedError);
            }
            else if (element instanceof model.FunctionBreakpoint && !element.name) {
                debugService.removeFunctionBreakpoints(element.getId()).done(null, errors.onUnexpectedError);
            }
            else if (element instanceof model.Variable) {
                element.errorMessage = null;
                if (renamed && element.value !== inputBox.value) {
                    debugService.setVariable(element, inputBox.value)
                        .done(function () { return tree.refresh(element, false); }, errors.onUnexpectedError);
                }
            }
            tree.clearHighlight();
            tree.DOMFocus();
            tree.setFocus(element);
            // need to remove the input box since this template will be reused.
            container.removeChild(inputBoxContainer);
            lifecycle.dispose(toDispose);
        }
    });
    toDispose.push(dom.addStandardDisposableListener(inputBox.inputElement, 'keydown', function (e) {
        var isEscape = e.equals(9 /* Escape */);
        var isEnter = e.equals(3 /* Enter */);
        if (isEscape || isEnter) {
            wrapUp(isEnter);
        }
    }));
    toDispose.push(dom.addDisposableListener(inputBox.inputElement, 'blur', function () {
        wrapUp(true);
    }));
}
function getSourceName(source, contextService) {
    if (source.inMemory) {
        return source.name;
    }
    return labels.getPathLabel(paths.basename(source.uri.fsPath), contextService);
}
var BaseDebugController = (function (_super) {
    __extends(BaseDebugController, _super);
    function BaseDebugController(debugService, contextMenuService, actionProvider, focusOnContextMenu) {
        if (focusOnContextMenu === void 0) { focusOnContextMenu = true; }
        _super.call(this);
        this.debugService = debugService;
        this.contextMenuService = contextMenuService;
        this.actionProvider = actionProvider;
        this.focusOnContextMenu = focusOnContextMenu;
        if (platform_1.isMacintosh) {
            this.downKeyBindingDispatcher.set(32768 /* CtrlCmd */ | 1 /* Backspace */, this.onDelete.bind(this));
        }
        else {
            this.downKeyBindingDispatcher.set(20 /* Delete */, this.onDelete.bind(this));
            this.downKeyBindingDispatcher.set(16384 /* Shift */ | 20 /* Delete */, this.onDelete.bind(this));
        }
    }
    BaseDebugController.prototype.onContextMenu = function (tree, element, event) {
        var _this = this;
        if (event.target && event.target.tagName && event.target.tagName.toLowerCase() === 'input') {
            return false;
        }
        event.preventDefault();
        event.stopPropagation();
        if (this.focusOnContextMenu) {
            tree.setFocus(element);
        }
        if (this.actionProvider.hasSecondaryActions(tree, element)) {
            var anchor_1 = { x: event.posx + 1, y: event.posy };
            this.contextMenuService.showContextMenu({
                getAnchor: function () { return anchor_1; },
                getActions: function () { return _this.actionProvider.getSecondaryActions(tree, element); },
                onHide: function (wasCancelled) {
                    if (wasCancelled) {
                        tree.DOMFocus();
                    }
                },
                getActionsContext: function () { return element; }
            });
            return true;
        }
        return false;
    };
    BaseDebugController.prototype.onDelete = function (tree, event) {
        return false;
    };
    return BaseDebugController;
}(treedefaults.DefaultController));
exports.BaseDebugController = BaseDebugController;
// call stack
var CallStackController = (function (_super) {
    __extends(CallStackController, _super);
    function CallStackController() {
        _super.apply(this, arguments);
    }
    CallStackController.prototype.onLeftClick = function (tree, element, event) {
        if (typeof element === 'number') {
            return this.showMoreStackFrames(tree, element);
        }
        if (element instanceof model.StackFrame) {
            this.focusStackFrame(element, event, true);
        }
        return _super.prototype.onLeftClick.call(this, tree, element, event);
    };
    CallStackController.prototype.onEnter = function (tree, event) {
        var element = tree.getFocus();
        if (typeof element === 'number') {
            return this.showMoreStackFrames(tree, element);
        }
        if (element instanceof model.StackFrame) {
            this.focusStackFrame(element, event, false);
        }
        return _super.prototype.onEnter.call(this, tree, event);
    };
    CallStackController.prototype.onUp = function (tree, event) {
        _super.prototype.onUp.call(this, tree, event);
        this.focusStackFrame(tree.getFocus(), event, true);
        return true;
    };
    CallStackController.prototype.onPageUp = function (tree, event) {
        _super.prototype.onPageUp.call(this, tree, event);
        this.focusStackFrame(tree.getFocus(), event, true);
        return true;
    };
    CallStackController.prototype.onDown = function (tree, event) {
        _super.prototype.onDown.call(this, tree, event);
        this.focusStackFrame(tree.getFocus(), event, true);
        return true;
    };
    CallStackController.prototype.onPageDown = function (tree, event) {
        _super.prototype.onPageDown.call(this, tree, event);
        this.focusStackFrame(tree.getFocus(), event, true);
        return true;
    };
    // user clicked / pressed on 'Load More Stack Frames', get those stack frames and refresh the tree.
    CallStackController.prototype.showMoreStackFrames = function (tree, threadId) {
        var thread = this.debugService.getModel().getThreads()[threadId];
        if (thread) {
            thread.getCallStack(this.debugService, true)
                .done(function () { return tree.refresh(); }, errors.onUnexpectedError);
        }
        return true;
    };
    CallStackController.prototype.focusStackFrame = function (stackFrame, event, preserveFocus) {
        this.debugService.setFocusedStackFrameAndEvaluate(stackFrame).done(null, errors.onUnexpectedError);
        var sideBySide = (event && (event.ctrlKey || event.metaKey));
        this.debugService.openOrRevealSource(stackFrame.source, stackFrame.lineNumber, preserveFocus, sideBySide).done(null, errors.onUnexpectedError);
    };
    return CallStackController;
}(BaseDebugController));
exports.CallStackController = CallStackController;
var CallStackActionProvider = (function () {
    function CallStackActionProvider(instantiationService, debugService) {
        this.instantiationService = instantiationService;
        this.debugService = debugService;
        // noop
    }
    CallStackActionProvider.prototype.hasActions = function (tree, element) {
        return false;
    };
    CallStackActionProvider.prototype.getActions = function (tree, element) {
        return winjs_base_1.TPromise.as([]);
    };
    CallStackActionProvider.prototype.hasSecondaryActions = function (tree, element) {
        return element instanceof model.Thread || element instanceof model.StackFrame;
    };
    CallStackActionProvider.prototype.getSecondaryActions = function (tree, element) {
        var actions = [];
        if (element instanceof model.Thread) {
            var thread = element;
            if (thread.stopped) {
                actions.push(this.instantiationService.createInstance(debugactions.ContinueAction, debugactions.ContinueAction.ID, debugactions.ContinueAction.LABEL));
                actions.push(this.instantiationService.createInstance(debugactions.StepOverAction, debugactions.StepOverAction.ID, debugactions.StepOverAction.LABEL));
                actions.push(this.instantiationService.createInstance(debugactions.StepIntoAction, debugactions.StepIntoAction.ID, debugactions.StepIntoAction.LABEL));
                actions.push(this.instantiationService.createInstance(debugactions.StepOutAction, debugactions.StepOutAction.ID, debugactions.StepOutAction.LABEL));
            }
            else {
                actions.push(this.instantiationService.createInstance(debugactions.PauseAction, debugactions.PauseAction.ID, debugactions.PauseAction.LABEL));
            }
        }
        else if (element instanceof model.StackFrame) {
            var capabilities = this.debugService.getActiveSession().configuration.capabilities;
            if (typeof capabilities.supportsRestartFrame === 'boolean' && capabilities.supportsRestartFrame) {
                actions.push(this.instantiationService.createInstance(debugactions.RestartFrameAction, debugactions.RestartFrameAction.ID, debugactions.RestartFrameAction.LABEL));
            }
        }
        return winjs_base_1.TPromise.as(actions);
    };
    CallStackActionProvider.prototype.getActionItem = function (tree, element, action) {
        return null;
    };
    CallStackActionProvider = __decorate([
        __param(0, instantiation_1.IInstantiationService),
        __param(1, debug.IDebugService)
    ], CallStackActionProvider);
    return CallStackActionProvider;
}());
exports.CallStackActionProvider = CallStackActionProvider;
var CallStackDataSource = (function () {
    function CallStackDataSource(debugService) {
        this.debugService = debugService;
        // noop
    }
    CallStackDataSource.prototype.getId = function (tree, element) {
        if (typeof element === 'number') {
            return element.toString();
        }
        if (typeof element === 'string') {
            return element;
        }
        return element.getId();
    };
    CallStackDataSource.prototype.hasChildren = function (tree, element) {
        return element instanceof model.Model || (element instanceof model.Thread && element.stopped);
    };
    CallStackDataSource.prototype.getChildren = function (tree, element) {
        if (element instanceof model.Thread) {
            return this.getThreadChildren(element);
        }
        var threads = element.getThreads();
        return winjs_base_1.TPromise.as(Object.keys(threads).map(function (ref) { return threads[ref]; }));
    };
    CallStackDataSource.prototype.getThreadChildren = function (thread) {
        return thread.getCallStack(this.debugService).then(function (callStack) {
            if (thread.stoppedDetails.framesErrorMessage) {
                return callStack.concat([thread.stoppedDetails.framesErrorMessage]);
            }
            if (thread.stoppedDetails && thread.stoppedDetails.totalFrames > callStack.length) {
                return callStack.concat([thread.threadId]);
            }
            return callStack;
        });
    };
    CallStackDataSource.prototype.getParent = function (tree, element) {
        return winjs_base_1.TPromise.as(null);
    };
    CallStackDataSource = __decorate([
        __param(0, debug.IDebugService)
    ], CallStackDataSource);
    return CallStackDataSource;
}());
exports.CallStackDataSource = CallStackDataSource;
var CallStackRenderer = (function () {
    function CallStackRenderer(contextService) {
        this.contextService = contextService;
        // noop
    }
    CallStackRenderer.prototype.getHeight = function (tree, element) {
        return 22;
    };
    CallStackRenderer.prototype.getTemplateId = function (tree, element) {
        if (element instanceof model.Thread) {
            return CallStackRenderer.THREAD_TEMPLATE_ID;
        }
        if (element instanceof model.StackFrame) {
            return CallStackRenderer.STACK_FRAME_TEMPLATE_ID;
        }
        if (typeof element === 'string') {
            return CallStackRenderer.ERROR_TEMPLATE_ID;
        }
        return CallStackRenderer.LOAD_MORE_TEMPLATE_ID;
    };
    CallStackRenderer.prototype.renderTemplate = function (tree, templateId, container) {
        if (templateId === CallStackRenderer.LOAD_MORE_TEMPLATE_ID) {
            var data_1 = Object.create(null);
            data_1.label = dom.append(container, $('.load-more'));
            return data_1;
        }
        if (templateId === CallStackRenderer.ERROR_TEMPLATE_ID) {
            var data_2 = Object.create(null);
            data_2.label = dom.append(container, $('.error'));
            return data_2;
        }
        if (templateId === CallStackRenderer.THREAD_TEMPLATE_ID) {
            var data_3 = Object.create(null);
            data_3.thread = dom.append(container, $('.thread'));
            data_3.name = dom.append(data_3.thread, $('.name'));
            data_3.state = dom.append(data_3.thread, $('.state'));
            data_3.stateLabel = dom.append(data_3.state, $('span.label'));
            return data_3;
        }
        var data = Object.create(null);
        data.stackFrame = dom.append(container, $('.stack-frame'));
        data.label = dom.append(data.stackFrame, $('span.label'));
        data.file = dom.append(data.stackFrame, $('.file'));
        data.fileName = dom.append(data.file, $('span.file-name'));
        data.lineNumber = dom.append(data.file, $('span.line-number'));
        return data;
    };
    CallStackRenderer.prototype.renderElement = function (tree, element, templateId, templateData) {
        if (templateId === CallStackRenderer.THREAD_TEMPLATE_ID) {
            this.renderThread(element, templateData);
        }
        else if (templateId === CallStackRenderer.STACK_FRAME_TEMPLATE_ID) {
            this.renderStackFrame(element, templateData);
        }
        else if (templateId === CallStackRenderer.ERROR_TEMPLATE_ID) {
            this.renderError(element, templateData);
        }
        else {
            this.renderLoadMore(element, templateData);
        }
    };
    CallStackRenderer.prototype.renderThread = function (thread, data) {
        data.thread.title = nls.localize('thread', "Thread");
        data.name.textContent = thread.name;
        data.stateLabel.textContent = thread.stopped ? nls.localize('paused', "paused")
            : nls.localize({ key: 'running', comment: ['indicates state'] }, "running");
    };
    CallStackRenderer.prototype.renderError = function (element, data) {
        data.label.textContent = element;
        data.label.title = element;
    };
    CallStackRenderer.prototype.renderLoadMore = function (element, data) {
        data.label.textContent = nls.localize('loadMoreStackFrames', "Load More Stack Frames");
    };
    CallStackRenderer.prototype.renderStackFrame = function (stackFrame, data) {
        stackFrame.source.available ? dom.removeClass(data.stackFrame, 'disabled') : dom.addClass(data.stackFrame, 'disabled');
        data.file.title = stackFrame.source.uri.fsPath;
        data.label.textContent = stackFrame.name;
        data.label.title = stackFrame.name;
        data.fileName.textContent = getSourceName(stackFrame.source, this.contextService);
        if (stackFrame.lineNumber !== undefined) {
            data.lineNumber.textContent = "" + stackFrame.lineNumber;
            dom.removeClass(data.lineNumber, 'unavailable');
        }
        else {
            dom.addClass(data.lineNumber, 'unavailable');
        }
    };
    CallStackRenderer.prototype.disposeTemplate = function (tree, templateId, templateData) {
        // noop
    };
    CallStackRenderer.THREAD_TEMPLATE_ID = 'thread';
    CallStackRenderer.STACK_FRAME_TEMPLATE_ID = 'stackFrame';
    CallStackRenderer.ERROR_TEMPLATE_ID = 'error';
    CallStackRenderer.LOAD_MORE_TEMPLATE_ID = 'loadMore';
    CallStackRenderer = __decorate([
        __param(0, workspace_1.IWorkspaceContextService)
    ], CallStackRenderer);
    return CallStackRenderer;
}());
exports.CallStackRenderer = CallStackRenderer;
var CallstackAccessibilityProvider = (function () {
    function CallstackAccessibilityProvider(contextService) {
        this.contextService = contextService;
        // noop
    }
    CallstackAccessibilityProvider.prototype.getAriaLabel = function (tree, element) {
        if (element instanceof model.Thread) {
            return nls.localize('threadAriaLabel', "Thread {0}, callstack, debug", element.name);
        }
        if (element instanceof model.StackFrame) {
            return nls.localize('stackFrameAriaLabel', "Stack Frame {0} line {1} {2}, callstack, debug", element.name, element.lineNumber, getSourceName(element.source, this.contextService));
        }
        return null;
    };
    CallstackAccessibilityProvider = __decorate([
        __param(0, workspace_1.IWorkspaceContextService)
    ], CallstackAccessibilityProvider);
    return CallstackAccessibilityProvider;
}());
exports.CallstackAccessibilityProvider = CallstackAccessibilityProvider;
// variables
var VariablesActionProvider = (function () {
    function VariablesActionProvider(instantiationService) {
        this.instantiationService = instantiationService;
        // noop
    }
    VariablesActionProvider.prototype.hasActions = function (tree, element) {
        return false;
    };
    VariablesActionProvider.prototype.getActions = function (tree, element) {
        return winjs_base_1.TPromise.as([]);
    };
    VariablesActionProvider.prototype.hasSecondaryActions = function (tree, element) {
        return element instanceof model.Variable;
    };
    VariablesActionProvider.prototype.getSecondaryActions = function (tree, element) {
        var actions = [];
        var variable = element;
        if (variable.reference === 0) {
            actions.push(this.instantiationService.createInstance(debugactions.SetValueAction, debugactions.SetValueAction.ID, debugactions.SetValueAction.LABEL, variable));
            actions.push(this.instantiationService.createInstance(electronDebugActions_1.CopyValueAction, electronDebugActions_1.CopyValueAction.ID, electronDebugActions_1.CopyValueAction.LABEL, variable));
            actions.push(new actionbar.Separator());
        }
        actions.push(this.instantiationService.createInstance(debugactions.AddToWatchExpressionsAction, debugactions.AddToWatchExpressionsAction.ID, debugactions.AddToWatchExpressionsAction.LABEL, variable));
        return winjs_base_1.TPromise.as(actions);
    };
    VariablesActionProvider.prototype.getActionItem = function (tree, element, action) {
        return null;
    };
    return VariablesActionProvider;
}());
exports.VariablesActionProvider = VariablesActionProvider;
var VariablesDataSource = (function () {
    function VariablesDataSource(debugService) {
        this.debugService = debugService;
        // noop
    }
    VariablesDataSource.prototype.getId = function (tree, element) {
        return element.getId();
    };
    VariablesDataSource.prototype.hasChildren = function (tree, element) {
        if (element instanceof viewmodel.ViewModel || element instanceof model.Scope) {
            return true;
        }
        var variable = element;
        return variable.reference !== 0 && !strings.equalsIgnoreCase(variable.value, 'null');
    };
    VariablesDataSource.prototype.getChildren = function (tree, element) {
        if (element instanceof viewmodel.ViewModel) {
            var focusedStackFrame = element.getFocusedStackFrame();
            return focusedStackFrame ? focusedStackFrame.getScopes(this.debugService) : winjs_base_1.TPromise.as([]);
        }
        var scope = element;
        return scope.getChildren(this.debugService);
    };
    VariablesDataSource.prototype.getParent = function (tree, element) {
        return winjs_base_1.TPromise.as(null);
    };
    return VariablesDataSource;
}());
exports.VariablesDataSource = VariablesDataSource;
var VariablesRenderer = (function () {
    function VariablesRenderer(debugService, contextViewService) {
        this.debugService = debugService;
        this.contextViewService = contextViewService;
        // noop
    }
    VariablesRenderer.prototype.getHeight = function (tree, element) {
        return 22;
    };
    VariablesRenderer.prototype.getTemplateId = function (tree, element) {
        if (element instanceof model.Scope) {
            return VariablesRenderer.SCOPE_TEMPLATE_ID;
        }
        if (element instanceof model.Variable) {
            return VariablesRenderer.VARIABLE_TEMPLATE_ID;
        }
        return null;
    };
    VariablesRenderer.prototype.renderTemplate = function (tree, templateId, container) {
        if (templateId === VariablesRenderer.SCOPE_TEMPLATE_ID) {
            var data_4 = Object.create(null);
            data_4.name = dom.append(container, $('.scope'));
            return data_4;
        }
        var data = Object.create(null);
        data.expression = dom.append(container, $('.expression'));
        data.name = dom.append(data.expression, $('span.name'));
        data.value = dom.append(data.expression, $('span.value'));
        return data;
    };
    VariablesRenderer.prototype.renderElement = function (tree, element, templateId, templateData) {
        if (templateId === VariablesRenderer.SCOPE_TEMPLATE_ID) {
            this.renderScope(element, templateData);
        }
        else {
            var variable_1 = element;
            if (variable_1 === this.debugService.getViewModel().getSelectedExpression() || variable_1.errorMessage) {
                renderRenameBox(this.debugService, this.contextViewService, tree, variable_1, templateData.expression, {
                    initialValue: variable_1.value,
                    ariaLabel: nls.localize('variableValueAriaLabel', "Type new variable value"),
                    validationOptions: {
                        validation: function (value) { return variable_1.errorMessage ? ({ content: variable_1.errorMessage }) : null; }
                    }
                });
            }
            else {
                renderVariable(tree, variable_1, templateData, true);
            }
        }
    };
    VariablesRenderer.prototype.renderScope = function (scope, data) {
        data.name.textContent = scope.name;
    };
    VariablesRenderer.prototype.disposeTemplate = function (tree, templateId, templateData) {
        // noop
    };
    VariablesRenderer.SCOPE_TEMPLATE_ID = 'scope';
    VariablesRenderer.VARIABLE_TEMPLATE_ID = 'variable';
    VariablesRenderer = __decorate([
        __param(0, debug.IDebugService),
        __param(1, contextView_1.IContextViewService)
    ], VariablesRenderer);
    return VariablesRenderer;
}());
exports.VariablesRenderer = VariablesRenderer;
var VariablesAccessibilityProvider = (function () {
    function VariablesAccessibilityProvider() {
    }
    VariablesAccessibilityProvider.prototype.getAriaLabel = function (tree, element) {
        if (element instanceof model.Scope) {
            return nls.localize('variableScopeAriaLabel', "Scope {0}, variables, debug", element.name);
        }
        if (element instanceof model.Variable) {
            return nls.localize('variableAriaLabel', "{0} value {1}, variables, debug", element.name, element.value);
        }
        return null;
    };
    return VariablesAccessibilityProvider;
}());
exports.VariablesAccessibilityProvider = VariablesAccessibilityProvider;
var VariablesController = (function (_super) {
    __extends(VariablesController, _super);
    function VariablesController(debugService, contextMenuService, actionProvider) {
        _super.call(this, debugService, contextMenuService, actionProvider);
        this.downKeyBindingDispatcher.set(3 /* Enter */, this.setSelectedExpression.bind(this));
    }
    VariablesController.prototype.onLeftClick = function (tree, element, event) {
        // double click on primitive value: open input box to be able to set the value
        if (element instanceof model.Variable && event.detail === 2) {
            var expression = element;
            if (expression.reference === 0) {
                this.debugService.getViewModel().setSelectedExpression(expression);
            }
            return true;
        }
        return _super.prototype.onLeftClick.call(this, tree, element, event);
    };
    VariablesController.prototype.setSelectedExpression = function (tree, event) {
        var element = tree.getFocus();
        if (element instanceof model.Variable && element.reference === 0) {
            this.debugService.getViewModel().setSelectedExpression(element);
            return true;
        }
        return false;
    };
    return VariablesController;
}(BaseDebugController));
exports.VariablesController = VariablesController;
// watch expressions
var WatchExpressionsActionProvider = (function () {
    function WatchExpressionsActionProvider(instantiationService) {
        this.instantiationService = instantiationService;
    }
    WatchExpressionsActionProvider.prototype.hasActions = function (tree, element) {
        return element instanceof model.Expression && !!element.name;
    };
    WatchExpressionsActionProvider.prototype.hasSecondaryActions = function (tree, element) {
        return true;
    };
    WatchExpressionsActionProvider.prototype.getActions = function (tree, element) {
        return winjs_base_1.TPromise.as(this.getExpressionActions());
    };
    WatchExpressionsActionProvider.prototype.getExpressionActions = function () {
        return [this.instantiationService.createInstance(debugactions.RemoveWatchExpressionAction, debugactions.RemoveWatchExpressionAction.ID, debugactions.RemoveWatchExpressionAction.LABEL)];
    };
    WatchExpressionsActionProvider.prototype.getSecondaryActions = function (tree, element) {
        var actions = [];
        if (element instanceof model.Expression) {
            var expression = element;
            actions.push(this.instantiationService.createInstance(debugactions.AddWatchExpressionAction, debugactions.AddWatchExpressionAction.ID, debugactions.AddWatchExpressionAction.LABEL));
            actions.push(this.instantiationService.createInstance(debugactions.RenameWatchExpressionAction, debugactions.RenameWatchExpressionAction.ID, debugactions.RenameWatchExpressionAction.LABEL, expression));
            if (expression.reference === 0) {
                actions.push(this.instantiationService.createInstance(electronDebugActions_1.CopyValueAction, electronDebugActions_1.CopyValueAction.ID, electronDebugActions_1.CopyValueAction.LABEL, expression.value));
            }
            actions.push(new actionbar.Separator());
            actions.push(this.instantiationService.createInstance(debugactions.RemoveWatchExpressionAction, debugactions.RemoveWatchExpressionAction.ID, debugactions.RemoveWatchExpressionAction.LABEL));
            actions.push(this.instantiationService.createInstance(debugactions.RemoveAllWatchExpressionsAction, debugactions.RemoveAllWatchExpressionsAction.ID, debugactions.RemoveAllWatchExpressionsAction.LABEL));
        }
        else {
            actions.push(this.instantiationService.createInstance(debugactions.AddWatchExpressionAction, debugactions.AddWatchExpressionAction.ID, debugactions.AddWatchExpressionAction.LABEL));
            if (element instanceof model.Variable) {
                var variable = element;
                if (variable.reference === 0) {
                    actions.push(this.instantiationService.createInstance(electronDebugActions_1.CopyValueAction, electronDebugActions_1.CopyValueAction.ID, electronDebugActions_1.CopyValueAction.LABEL, variable.value));
                }
                actions.push(new actionbar.Separator());
            }
            actions.push(this.instantiationService.createInstance(debugactions.RemoveAllWatchExpressionsAction, debugactions.RemoveAllWatchExpressionsAction.ID, debugactions.RemoveAllWatchExpressionsAction.LABEL));
        }
        return winjs_base_1.TPromise.as(actions);
    };
    WatchExpressionsActionProvider.prototype.getActionItem = function (tree, element, action) {
        return null;
    };
    return WatchExpressionsActionProvider;
}());
exports.WatchExpressionsActionProvider = WatchExpressionsActionProvider;
var WatchExpressionsDataSource = (function () {
    function WatchExpressionsDataSource(debugService) {
        this.debugService = debugService;
        // noop
    }
    WatchExpressionsDataSource.prototype.getId = function (tree, element) {
        return element.getId();
    };
    WatchExpressionsDataSource.prototype.hasChildren = function (tree, element) {
        if (element instanceof model.Model) {
            return true;
        }
        var watchExpression = element;
        return watchExpression.reference !== 0 && !strings.equalsIgnoreCase(watchExpression.value, 'null');
    };
    WatchExpressionsDataSource.prototype.getChildren = function (tree, element) {
        if (element instanceof model.Model) {
            return winjs_base_1.TPromise.as(element.getWatchExpressions());
        }
        var expression = element;
        return expression.getChildren(this.debugService);
    };
    WatchExpressionsDataSource.prototype.getParent = function (tree, element) {
        return winjs_base_1.TPromise.as(null);
    };
    return WatchExpressionsDataSource;
}());
exports.WatchExpressionsDataSource = WatchExpressionsDataSource;
var WatchExpressionsRenderer = (function () {
    function WatchExpressionsRenderer(actionProvider, actionRunner, debugService, contextViewService) {
        this.actionRunner = actionRunner;
        this.debugService = debugService;
        this.contextViewService = contextViewService;
        this.toDispose = [];
        this.actionProvider = actionProvider;
    }
    WatchExpressionsRenderer.prototype.getHeight = function (tree, element) {
        return 22;
    };
    WatchExpressionsRenderer.prototype.getTemplateId = function (tree, element) {
        if (element instanceof model.Expression) {
            return WatchExpressionsRenderer.WATCH_EXPRESSION_TEMPLATE_ID;
        }
        return WatchExpressionsRenderer.VARIABLE_TEMPLATE_ID;
    };
    WatchExpressionsRenderer.prototype.renderTemplate = function (tree, templateId, container) {
        var data = Object.create(null);
        if (templateId === WatchExpressionsRenderer.WATCH_EXPRESSION_TEMPLATE_ID) {
            data.actionBar = new actionbar.ActionBar(container, { actionRunner: this.actionRunner });
            data.actionBar.push(this.actionProvider.getExpressionActions(), { icon: true, label: false });
        }
        data.expression = dom.append(container, $('.expression'));
        data.name = dom.append(data.expression, $('span.name'));
        data.value = dom.append(data.expression, $('span.value'));
        return data;
    };
    WatchExpressionsRenderer.prototype.renderElement = function (tree, element, templateId, templateData) {
        if (templateId === WatchExpressionsRenderer.WATCH_EXPRESSION_TEMPLATE_ID) {
            this.renderWatchExpression(tree, element, templateData);
        }
        else {
            renderVariable(tree, element, templateData, true);
        }
    };
    WatchExpressionsRenderer.prototype.renderWatchExpression = function (tree, watchExpression, data) {
        var selectedExpression = this.debugService.getViewModel().getSelectedExpression();
        if ((selectedExpression instanceof model.Expression && selectedExpression.getId() === watchExpression.getId()) || (watchExpression instanceof model.Expression && !watchExpression.name)) {
            renderRenameBox(this.debugService, this.contextViewService, tree, watchExpression, data.expression, {
                initialValue: watchExpression.name,
                placeholder: nls.localize('watchExpressionPlaceholder', "Expression to watch"),
                ariaLabel: nls.localize('watchExpressionInputAriaLabel', "Type watch expression")
            });
        }
        data.actionBar.context = watchExpression;
        data.name.textContent = watchExpression.name;
        if (watchExpression.value) {
            data.name.textContent += ':';
            renderExpressionValue(watchExpression, data.value, true, MAX_VALUE_RENDER_LENGTH_IN_VIEWLET);
            data.name.title = watchExpression.type ? watchExpression.type : watchExpression.value;
        }
    };
    WatchExpressionsRenderer.prototype.disposeTemplate = function (tree, templateId, templateData) {
        if (templateId === WatchExpressionsRenderer.WATCH_EXPRESSION_TEMPLATE_ID) {
            templateData.actionBar.dispose();
        }
    };
    WatchExpressionsRenderer.prototype.dispose = function () {
        this.toDispose = lifecycle.dispose(this.toDispose);
    };
    WatchExpressionsRenderer.WATCH_EXPRESSION_TEMPLATE_ID = 'watchExpression';
    WatchExpressionsRenderer.VARIABLE_TEMPLATE_ID = 'variables';
    WatchExpressionsRenderer = __decorate([
        __param(2, debug.IDebugService),
        __param(3, contextView_1.IContextViewService)
    ], WatchExpressionsRenderer);
    return WatchExpressionsRenderer;
}());
exports.WatchExpressionsRenderer = WatchExpressionsRenderer;
var WatchExpressionsAccessibilityProvider = (function () {
    function WatchExpressionsAccessibilityProvider() {
    }
    WatchExpressionsAccessibilityProvider.prototype.getAriaLabel = function (tree, element) {
        if (element instanceof model.Expression) {
            return nls.localize('watchExpressionAriaLabel', "{0} value {1}, watch, debug", element.name, element.value);
        }
        if (element instanceof model.Variable) {
            return nls.localize('watchVariableAriaLabel', "{0} value {1}, watch, debug", element.name, element.value);
        }
        return null;
    };
    return WatchExpressionsAccessibilityProvider;
}());
exports.WatchExpressionsAccessibilityProvider = WatchExpressionsAccessibilityProvider;
var WatchExpressionsController = (function (_super) {
    __extends(WatchExpressionsController, _super);
    function WatchExpressionsController(debugService, contextMenuService, actionProvider) {
        _super.call(this, debugService, contextMenuService, actionProvider);
        if (platform_1.isMacintosh) {
            this.downKeyBindingDispatcher.set(3 /* Enter */, this.onRename.bind(this));
        }
        else {
            this.downKeyBindingDispatcher.set(60 /* F2 */, this.onRename.bind(this));
        }
    }
    WatchExpressionsController.prototype.onLeftClick = function (tree, element, event) {
        // double click on primitive value: open input box to be able to select and copy value.
        if (element instanceof model.Expression && event.detail === 2) {
            var expression = element;
            if (expression.reference === 0) {
                this.debugService.getViewModel().setSelectedExpression(expression);
            }
            return true;
        }
        return _super.prototype.onLeftClick.call(this, tree, element, event);
    };
    WatchExpressionsController.prototype.onRename = function (tree, event) {
        var element = tree.getFocus();
        if (element instanceof model.Expression) {
            var watchExpression = element;
            if (watchExpression.reference === 0) {
                this.debugService.getViewModel().setSelectedExpression(watchExpression);
            }
            return true;
        }
        return false;
    };
    WatchExpressionsController.prototype.onDelete = function (tree, event) {
        var element = tree.getFocus();
        if (element instanceof model.Expression) {
            var we = element;
            this.debugService.removeWatchExpressions(we.getId());
            return true;
        }
        return false;
    };
    return WatchExpressionsController;
}(BaseDebugController));
exports.WatchExpressionsController = WatchExpressionsController;
// breakpoints
var BreakpointsActionProvider = (function () {
    function BreakpointsActionProvider(instantiationService) {
        this.instantiationService = instantiationService;
        // noop
    }
    BreakpointsActionProvider.prototype.hasActions = function (tree, element) {
        return element instanceof model.Breakpoint;
    };
    BreakpointsActionProvider.prototype.hasSecondaryActions = function (tree, element) {
        return element instanceof model.Breakpoint || element instanceof model.ExceptionBreakpoint || element instanceof model.FunctionBreakpoint;
    };
    BreakpointsActionProvider.prototype.getActions = function (tree, element) {
        if (element instanceof model.Breakpoint) {
            return winjs_base_1.TPromise.as(this.getBreakpointActions());
        }
        return winjs_base_1.TPromise.as([]);
    };
    BreakpointsActionProvider.prototype.getBreakpointActions = function () {
        return [this.instantiationService.createInstance(debugactions.RemoveBreakpointAction, debugactions.RemoveBreakpointAction.ID, debugactions.RemoveBreakpointAction.LABEL)];
    };
    BreakpointsActionProvider.prototype.getSecondaryActions = function (tree, element) {
        var actions = [this.instantiationService.createInstance(debugactions.ToggleEnablementAction, debugactions.ToggleEnablementAction.ID, debugactions.ToggleEnablementAction.LABEL)];
        actions.push(new actionbar.Separator());
        if (element instanceof model.Breakpoint || element instanceof model.FunctionBreakpoint) {
            actions.push(this.instantiationService.createInstance(debugactions.RemoveBreakpointAction, debugactions.RemoveBreakpointAction.ID, debugactions.RemoveBreakpointAction.LABEL));
        }
        actions.push(this.instantiationService.createInstance(debugactions.RemoveAllBreakpointsAction, debugactions.RemoveAllBreakpointsAction.ID, debugactions.RemoveAllBreakpointsAction.LABEL));
        actions.push(new actionbar.Separator());
        actions.push(this.instantiationService.createInstance(debugactions.ToggleBreakpointsActivatedAction, debugactions.ToggleBreakpointsActivatedAction.ID, debugactions.ToggleBreakpointsActivatedAction.ACTIVATE_LABEL));
        actions.push(new actionbar.Separator());
        actions.push(this.instantiationService.createInstance(debugactions.EnableAllBreakpointsAction, debugactions.EnableAllBreakpointsAction.ID, debugactions.EnableAllBreakpointsAction.LABEL));
        actions.push(this.instantiationService.createInstance(debugactions.DisableAllBreakpointsAction, debugactions.DisableAllBreakpointsAction.ID, debugactions.DisableAllBreakpointsAction.LABEL));
        actions.push(new actionbar.Separator());
        actions.push(this.instantiationService.createInstance(debugactions.AddFunctionBreakpointAction, debugactions.AddFunctionBreakpointAction.ID, debugactions.AddFunctionBreakpointAction.LABEL));
        if (element instanceof model.FunctionBreakpoint) {
            actions.push(this.instantiationService.createInstance(debugactions.RenameFunctionBreakpointAction, debugactions.RenameFunctionBreakpointAction.ID, debugactions.RenameFunctionBreakpointAction.LABEL));
        }
        actions.push(new actionbar.Separator());
        actions.push(this.instantiationService.createInstance(debugactions.ReapplyBreakpointsAction, debugactions.ReapplyBreakpointsAction.ID, debugactions.ReapplyBreakpointsAction.LABEL));
        return winjs_base_1.TPromise.as(actions);
    };
    BreakpointsActionProvider.prototype.getActionItem = function (tree, element, action) {
        return null;
    };
    return BreakpointsActionProvider;
}());
exports.BreakpointsActionProvider = BreakpointsActionProvider;
var BreakpointsDataSource = (function () {
    function BreakpointsDataSource() {
    }
    BreakpointsDataSource.prototype.getId = function (tree, element) {
        return element.getId();
    };
    BreakpointsDataSource.prototype.hasChildren = function (tree, element) {
        return element instanceof model.Model;
    };
    BreakpointsDataSource.prototype.getChildren = function (tree, element) {
        var model = element;
        var exBreakpoints = model.getExceptionBreakpoints();
        return winjs_base_1.TPromise.as(exBreakpoints.concat(model.getFunctionBreakpoints()).concat(model.getBreakpoints()));
    };
    BreakpointsDataSource.prototype.getParent = function (tree, element) {
        return winjs_base_1.TPromise.as(null);
    };
    return BreakpointsDataSource;
}());
exports.BreakpointsDataSource = BreakpointsDataSource;
var BreakpointsRenderer = (function () {
    function BreakpointsRenderer(actionProvider, actionRunner, contextService, debugService, contextViewService) {
        this.actionProvider = actionProvider;
        this.actionRunner = actionRunner;
        this.contextService = contextService;
        this.debugService = debugService;
        this.contextViewService = contextViewService;
        // noop
    }
    BreakpointsRenderer.prototype.getHeight = function (tree, element) {
        return 22;
    };
    BreakpointsRenderer.prototype.getTemplateId = function (tree, element) {
        if (element instanceof model.Breakpoint) {
            return BreakpointsRenderer.BREAKPOINT_TEMPLATE_ID;
        }
        if (element instanceof model.FunctionBreakpoint) {
            return BreakpointsRenderer.FUNCTION_BREAKPOINT_TEMPLATE_ID;
        }
        if (element instanceof model.ExceptionBreakpoint) {
            return BreakpointsRenderer.EXCEPTION_BREAKPOINT_TEMPLATE_ID;
        }
        return null;
    };
    BreakpointsRenderer.prototype.renderTemplate = function (tree, templateId, container) {
        var data = Object.create(null);
        if (templateId === BreakpointsRenderer.BREAKPOINT_TEMPLATE_ID || templateId === BreakpointsRenderer.FUNCTION_BREAKPOINT_TEMPLATE_ID) {
            data.actionBar = new actionbar.ActionBar(container, { actionRunner: this.actionRunner });
            data.actionBar.push(this.actionProvider.getBreakpointActions(), { icon: true, label: false });
        }
        data.breakpoint = dom.append(container, $('.breakpoint'));
        data.toDisposeBeforeRender = [];
        data.checkbox = $('input');
        data.checkbox.type = 'checkbox';
        dom.append(data.breakpoint, data.checkbox);
        data.name = dom.append(data.breakpoint, $('span.name'));
        if (templateId === BreakpointsRenderer.BREAKPOINT_TEMPLATE_ID) {
            data.lineNumber = dom.append(data.breakpoint, $('span.line-number'));
            data.filePath = dom.append(data.breakpoint, $('span.file-path'));
        }
        return data;
    };
    BreakpointsRenderer.prototype.renderElement = function (tree, element, templateId, templateData) {
        var _this = this;
        templateData.toDisposeBeforeRender = lifecycle.dispose(templateData.toDisposeBeforeRender);
        templateData.toDisposeBeforeRender.push(dom.addStandardDisposableListener(templateData.checkbox, 'change', function (e) {
            _this.debugService.enableOrDisableBreakpoints(!element.enabled, element);
        }));
        if (templateId === BreakpointsRenderer.EXCEPTION_BREAKPOINT_TEMPLATE_ID) {
            this.renderExceptionBreakpoint(element, templateData);
        }
        else if (templateId === BreakpointsRenderer.FUNCTION_BREAKPOINT_TEMPLATE_ID) {
            this.renderFunctionBreakpoint(tree, element, templateData);
        }
        else {
            this.renderBreakpoint(tree, element, templateData);
        }
    };
    BreakpointsRenderer.prototype.renderExceptionBreakpoint = function (exceptionBreakpoint, data) {
        data.name.textContent = exceptionBreakpoint.label || exceptionBreakpoint.filter + " exceptions";
        ;
        data.breakpoint.title = data.name.textContent;
        data.checkbox.checked = exceptionBreakpoint.enabled;
    };
    BreakpointsRenderer.prototype.renderFunctionBreakpoint = function (tree, functionBreakpoint, data) {
        var selected = this.debugService.getViewModel().getSelectedFunctionBreakpoint();
        if (!functionBreakpoint.name || (selected && selected.getId() === functionBreakpoint.getId())) {
            renderRenameBox(this.debugService, this.contextViewService, tree, functionBreakpoint, data.breakpoint, {
                initialValue: functionBreakpoint.name,
                placeholder: nls.localize('functionBreakpointPlaceholder', "Function to break on"),
                ariaLabel: nls.localize('functionBreakPointInputAriaLabel', "Type function breakpoint")
            });
        }
        else {
            data.name.textContent = functionBreakpoint.name;
            data.checkbox.checked = functionBreakpoint.enabled;
            data.breakpoint.title = functionBreakpoint.name;
            // Mark function breakpoints as disabled if deactivated or if debug type does not support them #9099
            var session = this.debugService.getActiveSession();
            if ((session && !session.configuration.capabilities.supportsFunctionBreakpoints) || !this.debugService.getModel().areBreakpointsActivated()) {
                tree.addTraits('disabled', [functionBreakpoint]);
                if (session && !session.configuration.capabilities.supportsFunctionBreakpoints) {
                    data.breakpoint.title = nls.localize('functionBreakpointsNotSupported', "Function breakpoints are not supported by this debug type");
                }
            }
            else {
                tree.removeTraits('disabled', [functionBreakpoint]);
            }
        }
        data.actionBar.context = functionBreakpoint;
    };
    BreakpointsRenderer.prototype.renderBreakpoint = function (tree, breakpoint, data) {
        this.debugService.getModel().areBreakpointsActivated() ? tree.removeTraits('disabled', [breakpoint]) : tree.addTraits('disabled', [breakpoint]);
        data.name.textContent = labels.getPathLabel(paths.basename(breakpoint.source.uri.fsPath), this.contextService);
        data.lineNumber.textContent = breakpoint.desiredLineNumber !== breakpoint.lineNumber ? breakpoint.desiredLineNumber + ' \u2192 ' + breakpoint.lineNumber : '' + breakpoint.lineNumber;
        data.filePath.textContent = labels.getPathLabel(paths.dirname(breakpoint.source.uri.fsPath), this.contextService);
        data.checkbox.checked = breakpoint.enabled;
        data.actionBar.context = breakpoint;
        var debugActive = this.debugService.state === debug.State.Running || this.debugService.state === debug.State.Stopped || this.debugService.state === debug.State.Initializing;
        if (debugActive && !breakpoint.verified) {
            tree.addTraits('disabled', [breakpoint]);
            if (breakpoint.message) {
                data.breakpoint.title = breakpoint.message;
            }
        }
        else if (breakpoint.condition) {
            data.breakpoint.title = breakpoint.condition;
        }
    };
    BreakpointsRenderer.prototype.disposeTemplate = function (tree, templateId, templateData) {
        if (templateId === BreakpointsRenderer.BREAKPOINT_TEMPLATE_ID || templateId === BreakpointsRenderer.FUNCTION_BREAKPOINT_TEMPLATE_ID) {
            templateData.actionBar.dispose();
        }
    };
    BreakpointsRenderer.EXCEPTION_BREAKPOINT_TEMPLATE_ID = 'exceptionBreakpoint';
    BreakpointsRenderer.FUNCTION_BREAKPOINT_TEMPLATE_ID = 'functionBreakpoint';
    BreakpointsRenderer.BREAKPOINT_TEMPLATE_ID = 'breakpoint';
    BreakpointsRenderer = __decorate([
        __param(2, workspace_1.IWorkspaceContextService),
        __param(3, debug.IDebugService),
        __param(4, contextView_1.IContextViewService)
    ], BreakpointsRenderer);
    return BreakpointsRenderer;
}());
exports.BreakpointsRenderer = BreakpointsRenderer;
var BreakpointsAccessibilityProvider = (function () {
    function BreakpointsAccessibilityProvider(contextService) {
        this.contextService = contextService;
        // noop
    }
    BreakpointsAccessibilityProvider.prototype.getAriaLabel = function (tree, element) {
        if (element instanceof model.Breakpoint) {
            return nls.localize('breakpointAriaLabel', "Breakpoint line {0} {1}, breakpoints, debug", element.lineNumber, getSourceName(element.source, this.contextService));
        }
        if (element instanceof model.FunctionBreakpoint) {
            return nls.localize('functionBreakpointAriaLabel', "Function breakpoint {0}, breakpoints, debug", element.name);
        }
        if (element instanceof model.ExceptionBreakpoint) {
            return nls.localize('exceptionBreakpointAriaLabel', "Exception breakpoint {0}, breakpoints, debug", element.filter);
        }
        return null;
    };
    BreakpointsAccessibilityProvider = __decorate([
        __param(0, workspace_1.IWorkspaceContextService)
    ], BreakpointsAccessibilityProvider);
    return BreakpointsAccessibilityProvider;
}());
exports.BreakpointsAccessibilityProvider = BreakpointsAccessibilityProvider;
var BreakpointsController = (function (_super) {
    __extends(BreakpointsController, _super);
    function BreakpointsController(debugService, contextMenuService, actionProvider) {
        _super.call(this, debugService, contextMenuService, actionProvider);
        if (platform_1.isMacintosh) {
            this.downKeyBindingDispatcher.set(3 /* Enter */, this.onRename.bind(this));
        }
        else {
            this.downKeyBindingDispatcher.set(60 /* F2 */, this.onRename.bind(this));
        }
    }
    BreakpointsController.prototype.onLeftClick = function (tree, element, event) {
        if (element instanceof model.FunctionBreakpoint && event.detail === 2) {
            this.debugService.getViewModel().setSelectedFunctionBreakpoint(element);
            return true;
        }
        if (element instanceof model.Breakpoint) {
            this.openBreakpointSource(element, event, true);
        }
        return _super.prototype.onLeftClick.call(this, tree, element, event);
    };
    BreakpointsController.prototype.onRename = function (tree, event) {
        var element = tree.getFocus();
        if (element instanceof model.FunctionBreakpoint && element.name) {
            this.debugService.getViewModel().setSelectedFunctionBreakpoint(element);
            return true;
        }
        if (element instanceof model.Breakpoint) {
            this.openBreakpointSource(element, event, false);
        }
        return _super.prototype.onEnter.call(this, tree, event);
    };
    BreakpointsController.prototype.onSpace = function (tree, event) {
        _super.prototype.onSpace.call(this, tree, event);
        var element = tree.getFocus();
        this.debugService.enableOrDisableBreakpoints(!element.enabled, element).done(null, errors.onUnexpectedError);
        return true;
    };
    BreakpointsController.prototype.onDelete = function (tree, event) {
        var element = tree.getFocus();
        if (element instanceof model.Breakpoint) {
            this.debugService.removeBreakpoints(element.getId()).done(null, errors.onUnexpectedError);
            return true;
        }
        else if (element instanceof model.FunctionBreakpoint) {
            var fbp = element;
            this.debugService.removeFunctionBreakpoints(fbp.getId()).done(null, errors.onUnexpectedError);
            return true;
        }
        return false;
    };
    BreakpointsController.prototype.openBreakpointSource = function (breakpoint, event, preserveFocus) {
        if (!breakpoint.source.inMemory) {
            var sideBySide = (event && (event.ctrlKey || event.metaKey));
            this.debugService.openOrRevealSource(breakpoint.source, breakpoint.lineNumber, preserveFocus, sideBySide).done(null, errors.onUnexpectedError);
        }
    };
    return BreakpointsController;
}(BaseDebugController));
exports.BreakpointsController = BreakpointsController;
