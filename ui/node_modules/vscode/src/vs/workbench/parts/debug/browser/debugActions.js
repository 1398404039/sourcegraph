/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var nls = require('vs/nls');
var actions_1 = require('vs/base/common/actions');
var lifecycle = require('vs/base/common/lifecycle');
var winjs_base_1 = require('vs/base/common/winjs.base');
var keyCodes_1 = require('vs/base/common/keyCodes');
var range_1 = require('vs/editor/common/core/range');
var editorCommon = require('vs/editor/common/editorCommon');
var editorCommonExtensions_1 = require('vs/editor/common/editorCommonExtensions');
var keybinding_1 = require('vs/platform/keybinding/common/keybinding');
var contextkey_1 = require('vs/platform/contextkey/common/contextkey');
var commands_1 = require('vs/platform/commands/common/commands');
var instantiation_1 = require('vs/platform/instantiation/common/instantiation');
var debug = require('vs/workbench/parts/debug/common/debug');
var model = require('vs/workbench/parts/debug/common/debugModel');
var breakpointWidget_1 = require('vs/workbench/parts/debug/browser/breakpointWidget');
var partService_1 = require('vs/workbench/services/part/common/partService');
var panelService_1 = require('vs/workbench/services/panel/common/panelService');
var viewletService_1 = require('vs/workbench/services/viewlet/common/viewletService');
var panel_1 = require('vs/workbench/browser/panel');
var IDebugService = debug.IDebugService;
var EditorContextKeys = editorCommon.EditorContextKeys;
var AbstractDebugAction = (function (_super) {
    __extends(AbstractDebugAction, _super);
    function AbstractDebugAction(id, label, cssClass, debugService, keybindingService) {
        var _this = this;
        _super.call(this, id, label, cssClass, false);
        this.debugService = debugService;
        this.keybindingService = keybindingService;
        this.debugService = debugService;
        this.toDispose = [];
        this.toDispose.push(this.debugService.onDidChangeState(function (state) { return _this.updateEnablement(state); }));
        var keys = this.keybindingService.lookupKeybindings(id).map(function (k) { return _this.keybindingService.getLabelFor(k); });
        if (keys && keys.length) {
            this.keybinding = keys[0];
        }
        this.updateLabel(label);
        this.updateEnablement(this.debugService.state);
    }
    AbstractDebugAction.prototype.run = function (e) {
        throw new Error('implement me');
    };
    AbstractDebugAction.prototype.updateLabel = function (newLabel) {
        if (this.keybinding) {
            this.label = nls.localize('debugActionLabelAndKeybinding', "{0} ({1})", newLabel, this.keybinding);
        }
        else {
            this.label = newLabel;
        }
    };
    AbstractDebugAction.prototype.updateEnablement = function (state) {
        this.enabled = this.isEnabled(state);
    };
    AbstractDebugAction.prototype.isEnabled = function (state) {
        return state !== debug.State.Disabled;
    };
    AbstractDebugAction.prototype.dispose = function () {
        this.debugService = null;
        this.toDispose = lifecycle.dispose(this.toDispose);
        _super.prototype.dispose.call(this);
    };
    AbstractDebugAction = __decorate([
        __param(3, IDebugService),
        __param(4, keybinding_1.IKeybindingService)
    ], AbstractDebugAction);
    return AbstractDebugAction;
}(actions_1.Action));
exports.AbstractDebugAction = AbstractDebugAction;
var ConfigureAction = (function (_super) {
    __extends(ConfigureAction, _super);
    function ConfigureAction(id, label, debugService, keybindingService) {
        var _this = this;
        _super.call(this, id, label, 'debug-action configure', debugService, keybindingService);
        this.toDispose.push(debugService.getConfigurationManager().onDidConfigurationChange(function (configurationName) {
            if (configurationName) {
                _this.class = 'debug-action configure';
                _this.tooltip = ConfigureAction.LABEL;
            }
            else {
                _this.class = 'debug-action configure notification';
                _this.tooltip = nls.localize('launchJsonNeedsConfigurtion', "Configure or Fix 'launch.json'");
            }
        }));
    }
    ConfigureAction.prototype.run = function (event) {
        var sideBySide = !!(event && (event.ctrlKey || event.metaKey));
        return this.debugService.getConfigurationManager().openConfigFile(sideBySide);
    };
    ConfigureAction.ID = 'workbench.action.debug.configure';
    ConfigureAction.LABEL = nls.localize('openLaunchJson', "Open {0}", 'launch.json');
    ConfigureAction = __decorate([
        __param(2, IDebugService),
        __param(3, keybinding_1.IKeybindingService)
    ], ConfigureAction);
    return ConfigureAction;
}(AbstractDebugAction));
exports.ConfigureAction = ConfigureAction;
var SelectConfigAction = (function (_super) {
    __extends(SelectConfigAction, _super);
    function SelectConfigAction(id, label, debugService, keybindingService) {
        _super.call(this, id, label, 'debug-action select-active-config', debugService, keybindingService);
    }
    SelectConfigAction.prototype.run = function (configName) {
        return this.debugService.getConfigurationManager().setConfiguration(configName);
    };
    SelectConfigAction.prototype.isEnabled = function (state) {
        return _super.prototype.isEnabled.call(this, state) && state === debug.State.Inactive;
    };
    SelectConfigAction.ID = 'workbench.debug.action.setActiveConfig';
    SelectConfigAction.LABEL = nls.localize('selectConfig', "Select Configuration");
    SelectConfigAction = __decorate([
        __param(2, IDebugService),
        __param(3, keybinding_1.IKeybindingService)
    ], SelectConfigAction);
    return SelectConfigAction;
}(AbstractDebugAction));
exports.SelectConfigAction = SelectConfigAction;
var StartAction = (function (_super) {
    __extends(StartAction, _super);
    function StartAction(id, label, debugService, keybindingService, commandService) {
        _super.call(this, id, label, 'debug-action start', debugService, keybindingService);
        this.commandService = commandService;
    }
    StartAction.prototype.run = function () {
        return this.commandService.executeCommand('_workbench.startDebug');
    };
    StartAction.prototype.isEnabled = function (state) {
        return _super.prototype.isEnabled.call(this, state) && state === debug.State.Inactive;
    };
    StartAction.ID = 'workbench.action.debug.start';
    StartAction.LABEL = nls.localize('startDebug', "Start Debugging");
    StartAction = __decorate([
        __param(2, IDebugService),
        __param(3, keybinding_1.IKeybindingService),
        __param(4, commands_1.ICommandService)
    ], StartAction);
    return StartAction;
}(AbstractDebugAction));
exports.StartAction = StartAction;
var RestartAction = (function (_super) {
    __extends(RestartAction, _super);
    function RestartAction(id, label, debugService, keybindingService) {
        var _this = this;
        _super.call(this, id, label, 'debug-action restart', debugService, keybindingService);
        this.setLabel(this.debugService.getConfigurationManager().configuration);
        this.toDispose.push(this.debugService.getConfigurationManager().onDidConfigurationChange(function (config) { return _this.setLabel(config); }));
    }
    RestartAction.prototype.setLabel = function (config) {
        this.updateLabel(config && config.request === 'attach' ? RestartAction.RECONNECT_LABEL : RestartAction.LABEL);
    };
    RestartAction.prototype.run = function () {
        return this.debugService.restartSession();
    };
    RestartAction.prototype.isEnabled = function (state) {
        return _super.prototype.isEnabled.call(this, state) && state !== debug.State.Inactive;
    };
    RestartAction.ID = 'workbench.action.debug.restart';
    RestartAction.LABEL = nls.localize('restartDebug', "Restart");
    RestartAction.RECONNECT_LABEL = nls.localize('reconnectDebug', "Reconnect");
    RestartAction = __decorate([
        __param(2, IDebugService),
        __param(3, keybinding_1.IKeybindingService)
    ], RestartAction);
    return RestartAction;
}(AbstractDebugAction));
exports.RestartAction = RestartAction;
var StepOverAction = (function (_super) {
    __extends(StepOverAction, _super);
    function StepOverAction(id, label, debugService, keybindingService) {
        _super.call(this, id, label, 'debug-action step-over', debugService, keybindingService);
    }
    StepOverAction.prototype.run = function (thread) {
        var threadId = thread && thread instanceof model.Thread ? thread.threadId
            : this.debugService.getViewModel().getFocusedThreadId();
        return this.debugService.next(threadId);
    };
    StepOverAction.prototype.isEnabled = function (state) {
        return _super.prototype.isEnabled.call(this, state) && state === debug.State.Stopped;
    };
    StepOverAction.ID = 'workbench.action.debug.stepOver';
    StepOverAction.LABEL = nls.localize('stepOverDebug', "Step Over");
    StepOverAction = __decorate([
        __param(2, IDebugService),
        __param(3, keybinding_1.IKeybindingService)
    ], StepOverAction);
    return StepOverAction;
}(AbstractDebugAction));
exports.StepOverAction = StepOverAction;
var StepIntoAction = (function (_super) {
    __extends(StepIntoAction, _super);
    function StepIntoAction(id, label, debugService, keybindingService) {
        _super.call(this, id, label, 'debug-action step-into', debugService, keybindingService);
    }
    StepIntoAction.prototype.run = function (thread) {
        var threadId = thread && thread instanceof model.Thread ? thread.threadId
            : this.debugService.getViewModel().getFocusedThreadId();
        return this.debugService.stepIn(threadId);
    };
    StepIntoAction.prototype.isEnabled = function (state) {
        return _super.prototype.isEnabled.call(this, state) && state === debug.State.Stopped;
    };
    StepIntoAction.ID = 'workbench.action.debug.stepInto';
    StepIntoAction.LABEL = nls.localize('stepIntoDebug', "Step Into");
    StepIntoAction = __decorate([
        __param(2, IDebugService),
        __param(3, keybinding_1.IKeybindingService)
    ], StepIntoAction);
    return StepIntoAction;
}(AbstractDebugAction));
exports.StepIntoAction = StepIntoAction;
var StepOutAction = (function (_super) {
    __extends(StepOutAction, _super);
    function StepOutAction(id, label, debugService, keybindingService) {
        _super.call(this, id, label, 'debug-action step-out', debugService, keybindingService);
    }
    StepOutAction.prototype.run = function (thread) {
        var threadId = thread && thread instanceof model.Thread ? thread.threadId
            : this.debugService.getViewModel().getFocusedThreadId();
        return this.debugService.stepOut(threadId);
    };
    StepOutAction.prototype.isEnabled = function (state) {
        return _super.prototype.isEnabled.call(this, state) && state === debug.State.Stopped;
    };
    StepOutAction.ID = 'workbench.action.debug.stepOut';
    StepOutAction.LABEL = nls.localize('stepOutDebug', "Step Out");
    StepOutAction = __decorate([
        __param(2, IDebugService),
        __param(3, keybinding_1.IKeybindingService)
    ], StepOutAction);
    return StepOutAction;
}(AbstractDebugAction));
exports.StepOutAction = StepOutAction;
var StepBackAction = (function (_super) {
    __extends(StepBackAction, _super);
    function StepBackAction(id, label, debugService, keybindingService) {
        _super.call(this, id, label, 'debug-action step-back', debugService, keybindingService);
    }
    StepBackAction.prototype.run = function (thread) {
        var threadId = thread && thread instanceof model.Thread ? thread.threadId
            : this.debugService.getViewModel().getFocusedThreadId();
        return this.debugService.stepBack(threadId);
    };
    StepBackAction.prototype.isEnabled = function (state) {
        var activeSession = this.debugService.getActiveSession();
        return _super.prototype.isEnabled.call(this, state) && state === debug.State.Stopped &&
            activeSession && activeSession.configuration.capabilities.supportsStepBack;
    };
    StepBackAction.ID = 'workbench.action.debug.stepBack';
    StepBackAction.LABEL = nls.localize('stepBackDebug', "Step Back");
    StepBackAction = __decorate([
        __param(2, IDebugService),
        __param(3, keybinding_1.IKeybindingService)
    ], StepBackAction);
    return StepBackAction;
}(AbstractDebugAction));
exports.StepBackAction = StepBackAction;
var StopAction = (function (_super) {
    __extends(StopAction, _super);
    function StopAction(id, label, debugService, keybindingService) {
        _super.call(this, id, label, 'debug-action stop', debugService, keybindingService);
    }
    StopAction.prototype.run = function () {
        var session = this.debugService.getActiveSession();
        return session ? session.disconnect(false, true) : winjs_base_1.TPromise.as(null);
    };
    StopAction.prototype.isEnabled = function (state) {
        return _super.prototype.isEnabled.call(this, state) && state !== debug.State.Inactive;
    };
    StopAction.ID = 'workbench.action.debug.stop';
    StopAction.LABEL = nls.localize('stopDebug', "Stop");
    StopAction = __decorate([
        __param(2, IDebugService),
        __param(3, keybinding_1.IKeybindingService)
    ], StopAction);
    return StopAction;
}(AbstractDebugAction));
exports.StopAction = StopAction;
var DisconnectAction = (function (_super) {
    __extends(DisconnectAction, _super);
    function DisconnectAction(id, label, debugService, keybindingService) {
        _super.call(this, id, label, 'debug-action disconnect', debugService, keybindingService);
    }
    DisconnectAction.prototype.run = function () {
        var session = this.debugService.getActiveSession();
        return session ? session.disconnect(false, true) : winjs_base_1.TPromise.as(null);
    };
    DisconnectAction.prototype.isEnabled = function (state) {
        return _super.prototype.isEnabled.call(this, state) && state !== debug.State.Inactive;
    };
    DisconnectAction.ID = 'workbench.action.debug.disconnect';
    DisconnectAction.LABEL = nls.localize('disconnectDebug', "Disconnect");
    DisconnectAction = __decorate([
        __param(2, IDebugService),
        __param(3, keybinding_1.IKeybindingService)
    ], DisconnectAction);
    return DisconnectAction;
}(AbstractDebugAction));
exports.DisconnectAction = DisconnectAction;
var ContinueAction = (function (_super) {
    __extends(ContinueAction, _super);
    function ContinueAction(id, label, debugService, keybindingService) {
        _super.call(this, id, label, 'debug-action continue', debugService, keybindingService);
    }
    ContinueAction.prototype.run = function (thread) {
        var threadId = thread && thread instanceof model.Thread ? thread.threadId
            : this.debugService.getViewModel().getFocusedThreadId();
        return this.debugService.continue(threadId);
    };
    ContinueAction.prototype.isEnabled = function (state) {
        return _super.prototype.isEnabled.call(this, state) && state === debug.State.Stopped;
    };
    ContinueAction.ID = 'workbench.action.debug.continue';
    ContinueAction.LABEL = nls.localize('continueDebug', "Continue");
    ContinueAction = __decorate([
        __param(2, IDebugService),
        __param(3, keybinding_1.IKeybindingService)
    ], ContinueAction);
    return ContinueAction;
}(AbstractDebugAction));
exports.ContinueAction = ContinueAction;
var PauseAction = (function (_super) {
    __extends(PauseAction, _super);
    function PauseAction(id, label, debugService, keybindingService) {
        _super.call(this, id, label, 'debug-action pause', debugService, keybindingService);
    }
    PauseAction.prototype.run = function (thread) {
        var threadId = thread && thread instanceof model.Thread ? thread.threadId
            : this.debugService.getViewModel().getFocusedThreadId();
        return this.debugService.pause(threadId);
    };
    PauseAction.prototype.isEnabled = function (state) {
        return _super.prototype.isEnabled.call(this, state) && state === debug.State.Running;
    };
    PauseAction.ID = 'workbench.action.debug.pause';
    PauseAction.LABEL = nls.localize('pauseDebug', "Pause");
    PauseAction = __decorate([
        __param(2, IDebugService),
        __param(3, keybinding_1.IKeybindingService)
    ], PauseAction);
    return PauseAction;
}(AbstractDebugAction));
exports.PauseAction = PauseAction;
var RestartFrameAction = (function (_super) {
    __extends(RestartFrameAction, _super);
    function RestartFrameAction(id, label, debugService, keybindingService) {
        _super.call(this, id, label, 'debug-action restart-frame', debugService, keybindingService);
    }
    RestartFrameAction.prototype.run = function (frame) {
        var frameId = (frame && frame instanceof model.StackFrame)
            ? frame.frameId
            : this.debugService.getViewModel().getFocusedStackFrame().frameId;
        return this.debugService.restartFrame(frameId);
    };
    RestartFrameAction.ID = 'workbench.action.debug.restartFrame';
    RestartFrameAction.LABEL = nls.localize('restartFrame', "Restart Frame");
    RestartFrameAction = __decorate([
        __param(2, IDebugService),
        __param(3, keybinding_1.IKeybindingService)
    ], RestartFrameAction);
    return RestartFrameAction;
}(AbstractDebugAction));
exports.RestartFrameAction = RestartFrameAction;
var RemoveBreakpointAction = (function (_super) {
    __extends(RemoveBreakpointAction, _super);
    function RemoveBreakpointAction(id, label, debugService, keybindingService) {
        _super.call(this, id, label, 'debug-action remove', debugService, keybindingService);
    }
    RemoveBreakpointAction.prototype.run = function (breakpoint) {
        return breakpoint instanceof model.Breakpoint ? this.debugService.removeBreakpoints(breakpoint.getId())
            : this.debugService.removeFunctionBreakpoints(breakpoint.getId());
    };
    RemoveBreakpointAction.ID = 'workbench.debug.viewlet.action.removeBreakpoint';
    RemoveBreakpointAction.LABEL = nls.localize('removeBreakpoint', "Remove Breakpoint");
    RemoveBreakpointAction = __decorate([
        __param(2, IDebugService),
        __param(3, keybinding_1.IKeybindingService)
    ], RemoveBreakpointAction);
    return RemoveBreakpointAction;
}(AbstractDebugAction));
exports.RemoveBreakpointAction = RemoveBreakpointAction;
var RemoveAllBreakpointsAction = (function (_super) {
    __extends(RemoveAllBreakpointsAction, _super);
    function RemoveAllBreakpointsAction(id, label, debugService, keybindingService) {
        var _this = this;
        _super.call(this, id, label, 'debug-action remove-all', debugService, keybindingService);
        this.toDispose.push(this.debugService.getModel().onDidChangeBreakpoints(function () { return _this.updateEnablement(_this.debugService.state); }));
    }
    RemoveAllBreakpointsAction.prototype.run = function () {
        return winjs_base_1.TPromise.join([this.debugService.removeBreakpoints(), this.debugService.removeFunctionBreakpoints()]);
    };
    RemoveAllBreakpointsAction.prototype.isEnabled = function (state) {
        var model = this.debugService.getModel();
        return _super.prototype.isEnabled.call(this, state) && (model.getBreakpoints().length > 0 || model.getFunctionBreakpoints().length > 0);
    };
    RemoveAllBreakpointsAction.ID = 'workbench.debug.viewlet.action.removeAllBreakpoints';
    RemoveAllBreakpointsAction.LABEL = nls.localize('removeAllBreakpoints', "Remove All Breakpoints");
    RemoveAllBreakpointsAction = __decorate([
        __param(2, IDebugService),
        __param(3, keybinding_1.IKeybindingService)
    ], RemoveAllBreakpointsAction);
    return RemoveAllBreakpointsAction;
}(AbstractDebugAction));
exports.RemoveAllBreakpointsAction = RemoveAllBreakpointsAction;
var ToggleEnablementAction = (function (_super) {
    __extends(ToggleEnablementAction, _super);
    function ToggleEnablementAction(id, label, debugService, keybindingService) {
        _super.call(this, id, label, 'debug-action toggle-enablement', debugService, keybindingService);
    }
    ToggleEnablementAction.prototype.run = function (element) {
        return this.debugService.enableOrDisableBreakpoints(!element.enabled, element);
    };
    ToggleEnablementAction.ID = 'workbench.debug.viewlet.action.toggleBreakpointEnablement';
    ToggleEnablementAction.LABEL = nls.localize('toggleEnablement', "Enable/Disable Breakpoint");
    ToggleEnablementAction = __decorate([
        __param(2, IDebugService),
        __param(3, keybinding_1.IKeybindingService)
    ], ToggleEnablementAction);
    return ToggleEnablementAction;
}(AbstractDebugAction));
exports.ToggleEnablementAction = ToggleEnablementAction;
var EnableAllBreakpointsAction = (function (_super) {
    __extends(EnableAllBreakpointsAction, _super);
    function EnableAllBreakpointsAction(id, label, debugService, keybindingService) {
        var _this = this;
        _super.call(this, id, label, 'debug-action enable-all-breakpoints', debugService, keybindingService);
        this.toDispose.push(this.debugService.getModel().onDidChangeBreakpoints(function () { return _this.updateEnablement(_this.debugService.state); }));
    }
    EnableAllBreakpointsAction.prototype.run = function () {
        return this.debugService.enableOrDisableBreakpoints(true);
    };
    EnableAllBreakpointsAction.prototype.isEnabled = function (state) {
        var model = this.debugService.getModel();
        return _super.prototype.isEnabled.call(this, state) && model.getBreakpoints().concat(model.getFunctionBreakpoints()).concat(model.getExceptionBreakpoints()).some(function (bp) { return !bp.enabled; });
    };
    EnableAllBreakpointsAction.ID = 'workbench.debug.viewlet.action.enableAllBreakpoints';
    EnableAllBreakpointsAction.LABEL = nls.localize('enableAllBreakpoints', "Enable All Breakpoints");
    EnableAllBreakpointsAction = __decorate([
        __param(2, IDebugService),
        __param(3, keybinding_1.IKeybindingService)
    ], EnableAllBreakpointsAction);
    return EnableAllBreakpointsAction;
}(AbstractDebugAction));
exports.EnableAllBreakpointsAction = EnableAllBreakpointsAction;
var DisableAllBreakpointsAction = (function (_super) {
    __extends(DisableAllBreakpointsAction, _super);
    function DisableAllBreakpointsAction(id, label, debugService, keybindingService) {
        var _this = this;
        _super.call(this, id, label, 'debug-action disable-all-breakpoints', debugService, keybindingService);
        this.toDispose.push(this.debugService.getModel().onDidChangeBreakpoints(function () { return _this.updateEnablement(_this.debugService.state); }));
    }
    DisableAllBreakpointsAction.prototype.run = function () {
        return this.debugService.enableOrDisableBreakpoints(false);
    };
    DisableAllBreakpointsAction.prototype.isEnabled = function (state) {
        var model = this.debugService.getModel();
        return _super.prototype.isEnabled.call(this, state) && model.getBreakpoints().concat(model.getFunctionBreakpoints()).concat(model.getExceptionBreakpoints()).some(function (bp) { return bp.enabled; });
    };
    DisableAllBreakpointsAction.ID = 'workbench.debug.viewlet.action.disableAllBreakpoints';
    DisableAllBreakpointsAction.LABEL = nls.localize('disableAllBreakpoints', "Disable All Breakpoints");
    DisableAllBreakpointsAction = __decorate([
        __param(2, IDebugService),
        __param(3, keybinding_1.IKeybindingService)
    ], DisableAllBreakpointsAction);
    return DisableAllBreakpointsAction;
}(AbstractDebugAction));
exports.DisableAllBreakpointsAction = DisableAllBreakpointsAction;
var ToggleBreakpointsActivatedAction = (function (_super) {
    __extends(ToggleBreakpointsActivatedAction, _super);
    function ToggleBreakpointsActivatedAction(id, label, debugService, keybindingService) {
        var _this = this;
        _super.call(this, id, label, 'debug-action breakpoints-activate', debugService, keybindingService);
        this.updateLabel(this.debugService.getModel().areBreakpointsActivated() ? ToggleBreakpointsActivatedAction.DEACTIVATE_LABEL : ToggleBreakpointsActivatedAction.ACTIVATE_LABEL);
        this.toDispose.push(this.debugService.getModel().onDidChangeBreakpoints(function () {
            _this.updateLabel(_this.debugService.getModel().areBreakpointsActivated() ? ToggleBreakpointsActivatedAction.DEACTIVATE_LABEL : ToggleBreakpointsActivatedAction.ACTIVATE_LABEL);
            _this.updateEnablement(_this.debugService.state);
        }));
    }
    ToggleBreakpointsActivatedAction.prototype.run = function () {
        return this.debugService.setBreakpointsActivated(!this.debugService.getModel().areBreakpointsActivated());
    };
    ToggleBreakpointsActivatedAction.prototype.isEnabled = function (state) {
        return (this.debugService.getModel().getFunctionBreakpoints().length + this.debugService.getModel().getBreakpoints().length) > 0;
    };
    ToggleBreakpointsActivatedAction.ID = 'workbench.debug.viewlet.action.toggleBreakpointsActivatedAction';
    ToggleBreakpointsActivatedAction.ACTIVATE_LABEL = nls.localize('activateBreakpoints', "Activate Breakpoints");
    ToggleBreakpointsActivatedAction.DEACTIVATE_LABEL = nls.localize('deactivateBreakpoints', "Deactivate Breakpoints");
    ToggleBreakpointsActivatedAction = __decorate([
        __param(2, IDebugService),
        __param(3, keybinding_1.IKeybindingService)
    ], ToggleBreakpointsActivatedAction);
    return ToggleBreakpointsActivatedAction;
}(AbstractDebugAction));
exports.ToggleBreakpointsActivatedAction = ToggleBreakpointsActivatedAction;
var ReapplyBreakpointsAction = (function (_super) {
    __extends(ReapplyBreakpointsAction, _super);
    function ReapplyBreakpointsAction(id, label, debugService, keybindingService) {
        var _this = this;
        _super.call(this, id, label, null, debugService, keybindingService);
        this.toDispose.push(this.debugService.getModel().onDidChangeBreakpoints(function () { return _this.updateEnablement(_this.debugService.state); }));
    }
    ReapplyBreakpointsAction.prototype.run = function () {
        return this.debugService.setBreakpointsActivated(true);
    };
    ReapplyBreakpointsAction.prototype.isEnabled = function (state) {
        var model = this.debugService.getModel();
        return _super.prototype.isEnabled.call(this, state) && state !== debug.State.Disabled && state !== debug.State.Inactive &&
            (model.getFunctionBreakpoints().length + model.getBreakpoints().length > 0);
    };
    ReapplyBreakpointsAction.ID = 'workbench.debug.viewlet.action.reapplyBreakpointsAction';
    ReapplyBreakpointsAction.LABEL = nls.localize('reapplyAllBreakpoints', "Reapply All Breakpoints");
    ReapplyBreakpointsAction = __decorate([
        __param(2, IDebugService),
        __param(3, keybinding_1.IKeybindingService)
    ], ReapplyBreakpointsAction);
    return ReapplyBreakpointsAction;
}(AbstractDebugAction));
exports.ReapplyBreakpointsAction = ReapplyBreakpointsAction;
var AddFunctionBreakpointAction = (function (_super) {
    __extends(AddFunctionBreakpointAction, _super);
    function AddFunctionBreakpointAction(id, label, debugService, keybindingService) {
        _super.call(this, id, label, 'debug-action add-function-breakpoint', debugService, keybindingService);
    }
    AddFunctionBreakpointAction.prototype.run = function () {
        this.debugService.addFunctionBreakpoint();
        return winjs_base_1.TPromise.as(null);
    };
    AddFunctionBreakpointAction.ID = 'workbench.debug.viewlet.action.addFunctionBreakpointAction';
    AddFunctionBreakpointAction.LABEL = nls.localize('addFunctionBreakpoint', "Add Function Breakpoint");
    AddFunctionBreakpointAction = __decorate([
        __param(2, IDebugService),
        __param(3, keybinding_1.IKeybindingService)
    ], AddFunctionBreakpointAction);
    return AddFunctionBreakpointAction;
}(AbstractDebugAction));
exports.AddFunctionBreakpointAction = AddFunctionBreakpointAction;
var RenameFunctionBreakpointAction = (function (_super) {
    __extends(RenameFunctionBreakpointAction, _super);
    function RenameFunctionBreakpointAction(id, label, debugService, keybindingService) {
        _super.call(this, id, label, null, debugService, keybindingService);
    }
    RenameFunctionBreakpointAction.prototype.run = function (fbp) {
        this.debugService.getViewModel().setSelectedFunctionBreakpoint(fbp);
        return winjs_base_1.TPromise.as(null);
    };
    RenameFunctionBreakpointAction.ID = 'workbench.debug.viewlet.action.renameFunctionBreakpointAction';
    RenameFunctionBreakpointAction.LABEL = nls.localize('renameFunctionBreakpoint', "Rename Function Breakpoint");
    RenameFunctionBreakpointAction = __decorate([
        __param(2, IDebugService),
        __param(3, keybinding_1.IKeybindingService)
    ], RenameFunctionBreakpointAction);
    return RenameFunctionBreakpointAction;
}(AbstractDebugAction));
exports.RenameFunctionBreakpointAction = RenameFunctionBreakpointAction;
var AddConditionalBreakpointAction = (function (_super) {
    __extends(AddConditionalBreakpointAction, _super);
    function AddConditionalBreakpointAction(id, label, editor, lineNumber, debugService, keybindingService, instantiationService) {
        _super.call(this, id, label, null, debugService, keybindingService);
        this.editor = editor;
        this.lineNumber = lineNumber;
        this.instantiationService = instantiationService;
    }
    AddConditionalBreakpointAction.prototype.run = function () {
        breakpointWidget_1.BreakpointWidget.createInstance(this.editor, this.lineNumber, this.instantiationService);
        return winjs_base_1.TPromise.as(null);
    };
    AddConditionalBreakpointAction.ID = 'workbench.debug.viewlet.action.addConditionalBreakpointAction';
    AddConditionalBreakpointAction.LABEL = nls.localize('addConditionalBreakpoint', "Add Conditional Breakpoint...");
    AddConditionalBreakpointAction = __decorate([
        __param(4, IDebugService),
        __param(5, keybinding_1.IKeybindingService),
        __param(6, instantiation_1.IInstantiationService)
    ], AddConditionalBreakpointAction);
    return AddConditionalBreakpointAction;
}(AbstractDebugAction));
exports.AddConditionalBreakpointAction = AddConditionalBreakpointAction;
var EditConditionalBreakpointAction = (function (_super) {
    __extends(EditConditionalBreakpointAction, _super);
    function EditConditionalBreakpointAction(id, label, editor, lineNumber, debugService, keybindingService, instantiationService) {
        _super.call(this, id, label, null, debugService, keybindingService);
        this.editor = editor;
        this.lineNumber = lineNumber;
        this.instantiationService = instantiationService;
    }
    EditConditionalBreakpointAction.prototype.run = function (breakpoint) {
        breakpointWidget_1.BreakpointWidget.createInstance(this.editor, this.lineNumber, this.instantiationService);
        return winjs_base_1.TPromise.as(null);
    };
    EditConditionalBreakpointAction.ID = 'workbench.debug.viewlet.action.editConditionalBreakpointAction';
    EditConditionalBreakpointAction.LABEL = nls.localize('editConditionalBreakpoint', "Edit Breakpoint...");
    EditConditionalBreakpointAction = __decorate([
        __param(4, IDebugService),
        __param(5, keybinding_1.IKeybindingService),
        __param(6, instantiation_1.IInstantiationService)
    ], EditConditionalBreakpointAction);
    return EditConditionalBreakpointAction;
}(AbstractDebugAction));
exports.EditConditionalBreakpointAction = EditConditionalBreakpointAction;
var ToggleBreakpointAction = (function (_super) {
    __extends(ToggleBreakpointAction, _super);
    function ToggleBreakpointAction() {
        _super.call(this, {
            id: 'editor.debug.action.toggleBreakpoint',
            label: nls.localize('toggleBreakpointAction', "Debug: Toggle Breakpoint"),
            alias: 'Debug: Toggle Breakpoint',
            precondition: null,
            kbOpts: {
                kbExpr: EditorContextKeys.TextFocus,
                primary: 67 /* F9 */
            }
        });
    }
    ToggleBreakpointAction.prototype.run = function (accessor, editor) {
        var debugService = accessor.get(IDebugService);
        var lineNumber = editor.getPosition().lineNumber;
        var modelUrl = editor.getModel().uri;
        if (debugService.getConfigurationManager().canSetBreakpointsIn(editor.getModel())) {
            var bp = debugService.getModel().getBreakpoints()
                .filter(function (bp) { return bp.lineNumber === lineNumber && bp.source.uri.toString() === modelUrl.toString(); }).pop();
            return bp ? debugService.removeBreakpoints(bp.getId())
                : debugService.addBreakpoints([{ uri: modelUrl, lineNumber: lineNumber }]);
        }
    };
    ToggleBreakpointAction = __decorate([
        editorCommonExtensions_1.editorAction
    ], ToggleBreakpointAction);
    return ToggleBreakpointAction;
}(editorCommonExtensions_1.EditorAction));
var EditorConditionalBreakpointAction = (function (_super) {
    __extends(EditorConditionalBreakpointAction, _super);
    function EditorConditionalBreakpointAction() {
        _super.call(this, {
            id: 'editor.debug.action.conditionalBreakpoint',
            label: nls.localize('conditionalBreakpointEditorAction', "Debug: Add Conditional Breakpoint..."),
            alias: 'Debug: Add Conditional Breakpoint...',
            precondition: null
        });
    }
    EditorConditionalBreakpointAction.prototype.run = function (accessor, editor) {
        var debugService = accessor.get(IDebugService);
        var instantiationService = accessor.get(instantiation_1.IInstantiationService);
        var lineNumber = editor.getPosition().lineNumber;
        if (debugService.getConfigurationManager().canSetBreakpointsIn(editor.getModel())) {
            breakpointWidget_1.BreakpointWidget.createInstance(editor, lineNumber, instantiationService);
        }
    };
    EditorConditionalBreakpointAction = __decorate([
        editorCommonExtensions_1.editorAction
    ], EditorConditionalBreakpointAction);
    return EditorConditionalBreakpointAction;
}(editorCommonExtensions_1.EditorAction));
var SetValueAction = (function (_super) {
    __extends(SetValueAction, _super);
    function SetValueAction(id, label, variable, debugService, keybindingService) {
        _super.call(this, id, label, null, debugService, keybindingService);
        this.variable = variable;
    }
    SetValueAction.prototype.run = function () {
        if (this.variable instanceof model.Variable) {
            this.debugService.getViewModel().setSelectedExpression(this.variable);
        }
        return winjs_base_1.TPromise.as(null);
    };
    SetValueAction.prototype.isEnabled = function (state) {
        var session = this.debugService.getActiveSession();
        return _super.prototype.isEnabled.call(this, state) && state === debug.State.Stopped && session && session.configuration.capabilities.supportsSetVariable;
    };
    SetValueAction.ID = 'workbench.debug.viewlet.action.setValue';
    SetValueAction.LABEL = nls.localize('setValue', "Set Value");
    SetValueAction = __decorate([
        __param(3, IDebugService),
        __param(4, keybinding_1.IKeybindingService)
    ], SetValueAction);
    return SetValueAction;
}(AbstractDebugAction));
exports.SetValueAction = SetValueAction;
var RunToCursorAction = (function (_super) {
    __extends(RunToCursorAction, _super);
    function RunToCursorAction() {
        _super.call(this, {
            id: 'editor.debug.action.runToCursor',
            label: nls.localize('runToCursor', "Debug: Run to Cursor"),
            alias: 'Debug: Run to Cursor',
            precondition: contextkey_1.ContextKeyExpr.and(debug.CONTEXT_IN_DEBUG_MODE, debug.CONTEXT_NOT_IN_DEBUG_REPL),
            menuOpts: {
                group: 'debug',
                order: 2
            }
        });
    }
    RunToCursorAction.prototype.run = function (accessor, editor) {
        var debugService = accessor.get(IDebugService);
        if (debugService.state !== debug.State.Stopped) {
            return winjs_base_1.TPromise.as(null);
        }
        var lineNumber = editor.getPosition().lineNumber;
        var uri = editor.getModel().uri;
        var oneTimeListener = debugService.getActiveSession().onDidEvent(function (event) {
            if (event.event === 'stopped' || event.event === 'exit') {
                var toRemove = debugService.getModel().getBreakpoints()
                    .filter(function (bp) { return bp.desiredLineNumber === lineNumber && bp.source.uri.toString() === uri.toString(); }).pop();
                if (toRemove) {
                    debugService.removeBreakpoints(toRemove.getId());
                }
                oneTimeListener.dispose();
            }
        });
        var bpExists = !!(debugService.getModel().getBreakpoints().filter(function (bp) { return bp.lineNumber === lineNumber && bp.source.uri.toString() === uri.toString(); }).pop());
        return (bpExists ? winjs_base_1.TPromise.as(null) : debugService.addBreakpoints([{ uri: uri, lineNumber: lineNumber }])).then(function () {
            debugService.continue(debugService.getViewModel().getFocusedThreadId());
        });
    };
    RunToCursorAction = __decorate([
        editorCommonExtensions_1.editorAction
    ], RunToCursorAction);
    return RunToCursorAction;
}(editorCommonExtensions_1.EditorAction));
var AddWatchExpressionAction = (function (_super) {
    __extends(AddWatchExpressionAction, _super);
    function AddWatchExpressionAction(id, label, debugService, keybindingService) {
        var _this = this;
        _super.call(this, id, label, 'debug-action add-watch-expression', debugService, keybindingService);
        this.toDispose.push(this.debugService.getModel().onDidChangeWatchExpressions(function () { return _this.updateEnablement(_this.debugService.state); }));
    }
    AddWatchExpressionAction.prototype.run = function () {
        return this.debugService.addWatchExpression();
    };
    AddWatchExpressionAction.prototype.isEnabled = function (state) {
        return _super.prototype.isEnabled.call(this, state) && this.debugService.getModel().getWatchExpressions().every(function (we) { return !!we.name; });
    };
    AddWatchExpressionAction.ID = 'workbench.debug.viewlet.action.addWatchExpression';
    AddWatchExpressionAction.LABEL = nls.localize('addWatchExpression', "Add Expression");
    AddWatchExpressionAction = __decorate([
        __param(2, IDebugService),
        __param(3, keybinding_1.IKeybindingService)
    ], AddWatchExpressionAction);
    return AddWatchExpressionAction;
}(AbstractDebugAction));
exports.AddWatchExpressionAction = AddWatchExpressionAction;
var SelectionToReplAction = (function (_super) {
    __extends(SelectionToReplAction, _super);
    function SelectionToReplAction() {
        _super.call(this, {
            id: 'editor.debug.action.selectionToRepl',
            label: nls.localize('debugEvaluate', "Debug: Evaluate"),
            alias: 'Debug: Evaluate',
            precondition: contextkey_1.ContextKeyExpr.and(EditorContextKeys.HasNonEmptySelection, debug.CONTEXT_IN_DEBUG_MODE, debug.CONTEXT_NOT_IN_DEBUG_REPL),
            menuOpts: {
                group: 'debug',
                order: 0
            }
        });
    }
    SelectionToReplAction.prototype.run = function (accessor, editor) {
        var debugService = accessor.get(IDebugService);
        var panelService = accessor.get(panelService_1.IPanelService);
        var text = editor.getModel().getValueInRange(editor.getSelection());
        return debugService.addReplExpression(text)
            .then(function () { return panelService.openPanel(debug.REPL_ID, true); })
            .then(function (_) { return void 0; });
    };
    SelectionToReplAction = __decorate([
        editorCommonExtensions_1.editorAction
    ], SelectionToReplAction);
    return SelectionToReplAction;
}(editorCommonExtensions_1.EditorAction));
var SelectionToWatchExpressionsAction = (function (_super) {
    __extends(SelectionToWatchExpressionsAction, _super);
    function SelectionToWatchExpressionsAction() {
        _super.call(this, {
            id: 'editor.debug.action.selectionToWatch',
            label: nls.localize('debugAddToWatch', "Debug: Add to Watch"),
            alias: 'Debug: Add to Watch',
            precondition: contextkey_1.ContextKeyExpr.and(EditorContextKeys.HasNonEmptySelection, debug.CONTEXT_IN_DEBUG_MODE, debug.CONTEXT_NOT_IN_DEBUG_REPL),
            menuOpts: {
                group: 'debug',
                order: 1
            }
        });
    }
    SelectionToWatchExpressionsAction.prototype.run = function (accessor, editor) {
        var debugService = accessor.get(IDebugService);
        var viewletService = accessor.get(viewletService_1.IViewletService);
        var text = editor.getModel().getValueInRange(editor.getSelection());
        return viewletService.openViewlet(debug.VIEWLET_ID).then(function () { return debugService.addWatchExpression(text); });
    };
    SelectionToWatchExpressionsAction = __decorate([
        editorCommonExtensions_1.editorAction
    ], SelectionToWatchExpressionsAction);
    return SelectionToWatchExpressionsAction;
}(editorCommonExtensions_1.EditorAction));
var ShowDebugHoverAction = (function (_super) {
    __extends(ShowDebugHoverAction, _super);
    function ShowDebugHoverAction() {
        _super.call(this, {
            id: 'editor.debug.action.showDebugHover',
            label: nls.localize('showDebugHover', "Debug: Show Hover"),
            alias: 'Debug: Show Hover',
            precondition: debug.CONTEXT_IN_DEBUG_MODE,
            kbOpts: {
                kbExpr: EditorContextKeys.TextFocus,
                primary: keyCodes_1.KeyChord(32768 /* CtrlCmd */ | 41 /* KEY_K */, 32768 /* CtrlCmd */ | 39 /* KEY_I */)
            }
        });
    }
    ShowDebugHoverAction.prototype.run = function (accessor, editor) {
        var position = editor.getPosition();
        var word = editor.getModel().getWordAtPosition(position);
        if (!word) {
            return winjs_base_1.TPromise.as(null);
        }
        var range = new range_1.Range(position.lineNumber, position.column, position.lineNumber, word.endColumn);
        return editor.getContribution(debug.EDITOR_CONTRIBUTION_ID).showHover(range, word.word, true);
    };
    ShowDebugHoverAction = __decorate([
        editorCommonExtensions_1.editorAction
    ], ShowDebugHoverAction);
    return ShowDebugHoverAction;
}(editorCommonExtensions_1.EditorAction));
var AddToWatchExpressionsAction = (function (_super) {
    __extends(AddToWatchExpressionsAction, _super);
    function AddToWatchExpressionsAction(id, label, expression, debugService, keybindingService) {
        _super.call(this, id, label, 'debug-action add-to-watch', debugService, keybindingService);
        this.expression = expression;
    }
    AddToWatchExpressionsAction.prototype.run = function () {
        return this.debugService.addWatchExpression(model.getFullExpressionName(this.expression, this.debugService.getActiveSession().configuration.type));
    };
    AddToWatchExpressionsAction.ID = 'workbench.debug.viewlet.action.addToWatchExpressions';
    AddToWatchExpressionsAction.LABEL = nls.localize('addToWatchExpressions', "Add to Watch");
    AddToWatchExpressionsAction = __decorate([
        __param(3, IDebugService),
        __param(4, keybinding_1.IKeybindingService)
    ], AddToWatchExpressionsAction);
    return AddToWatchExpressionsAction;
}(AbstractDebugAction));
exports.AddToWatchExpressionsAction = AddToWatchExpressionsAction;
var RenameWatchExpressionAction = (function (_super) {
    __extends(RenameWatchExpressionAction, _super);
    function RenameWatchExpressionAction(id, label, expression, debugService, keybindingService) {
        _super.call(this, id, label, 'debug-action rename', debugService, keybindingService);
        this.expression = expression;
    }
    RenameWatchExpressionAction.prototype.run = function () {
        this.debugService.getViewModel().setSelectedExpression(this.expression);
        return winjs_base_1.TPromise.as(null);
    };
    RenameWatchExpressionAction.ID = 'workbench.debug.viewlet.action.renameWatchExpression';
    RenameWatchExpressionAction.LABEL = nls.localize('renameWatchExpression', "Rename Expression");
    RenameWatchExpressionAction = __decorate([
        __param(3, IDebugService),
        __param(4, keybinding_1.IKeybindingService)
    ], RenameWatchExpressionAction);
    return RenameWatchExpressionAction;
}(AbstractDebugAction));
exports.RenameWatchExpressionAction = RenameWatchExpressionAction;
var RemoveWatchExpressionAction = (function (_super) {
    __extends(RemoveWatchExpressionAction, _super);
    function RemoveWatchExpressionAction(id, label, debugService, keybindingService) {
        _super.call(this, id, label, 'debug-action remove', debugService, keybindingService);
    }
    RemoveWatchExpressionAction.prototype.run = function (expression) {
        this.debugService.removeWatchExpressions(expression.getId());
        return winjs_base_1.TPromise.as(null);
    };
    RemoveWatchExpressionAction.ID = 'workbench.debug.viewlet.action.removeWatchExpression';
    RemoveWatchExpressionAction.LABEL = nls.localize('removeWatchExpression', "Remove Expression");
    RemoveWatchExpressionAction = __decorate([
        __param(2, IDebugService),
        __param(3, keybinding_1.IKeybindingService)
    ], RemoveWatchExpressionAction);
    return RemoveWatchExpressionAction;
}(AbstractDebugAction));
exports.RemoveWatchExpressionAction = RemoveWatchExpressionAction;
var RemoveAllWatchExpressionsAction = (function (_super) {
    __extends(RemoveAllWatchExpressionsAction, _super);
    function RemoveAllWatchExpressionsAction(id, label, debugService, keybindingService) {
        var _this = this;
        _super.call(this, id, label, 'debug-action remove-all', debugService, keybindingService);
        this.toDispose.push(this.debugService.getModel().onDidChangeWatchExpressions(function () { return _this.updateEnablement(_this.debugService.state); }));
    }
    RemoveAllWatchExpressionsAction.prototype.run = function () {
        this.debugService.removeWatchExpressions();
        return winjs_base_1.TPromise.as(null);
    };
    RemoveAllWatchExpressionsAction.prototype.isEnabled = function (state) {
        return _super.prototype.isEnabled.call(this, state) && this.debugService.getModel().getWatchExpressions().length > 0;
    };
    RemoveAllWatchExpressionsAction.ID = 'workbench.debug.viewlet.action.removeAllWatchExpressions';
    RemoveAllWatchExpressionsAction.LABEL = nls.localize('removeAllWatchExpressions', "Remove All Expressions");
    RemoveAllWatchExpressionsAction = __decorate([
        __param(2, IDebugService),
        __param(3, keybinding_1.IKeybindingService)
    ], RemoveAllWatchExpressionsAction);
    return RemoveAllWatchExpressionsAction;
}(AbstractDebugAction));
exports.RemoveAllWatchExpressionsAction = RemoveAllWatchExpressionsAction;
var ClearReplAction = (function (_super) {
    __extends(ClearReplAction, _super);
    function ClearReplAction(id, label, debugService, keybindingService, panelService) {
        _super.call(this, id, label, 'debug-action clear-repl', debugService, keybindingService);
        this.panelService = panelService;
    }
    ClearReplAction.prototype.run = function () {
        this.debugService.removeReplExpressions();
        // focus back to repl
        return this.panelService.openPanel(debug.REPL_ID, true);
    };
    ClearReplAction.ID = 'workbench.debug.panel.action.clearReplAction';
    ClearReplAction.LABEL = nls.localize('clearRepl', "Clear Console");
    ClearReplAction = __decorate([
        __param(2, IDebugService),
        __param(3, keybinding_1.IKeybindingService),
        __param(4, panelService_1.IPanelService)
    ], ClearReplAction);
    return ClearReplAction;
}(AbstractDebugAction));
exports.ClearReplAction = ClearReplAction;
var ToggleReplAction = (function (_super) {
    __extends(ToggleReplAction, _super);
    function ToggleReplAction(id, label, debugService, partService, panelService) {
        _super.call(this, id, label, debug.REPL_ID, panelService, partService, 'debug-action toggle-repl');
        this.debugService = debugService;
        this.toDispose = [];
        this.registerListeners();
    }
    ToggleReplAction.prototype.registerListeners = function () {
        var _this = this;
        this.toDispose.push(this.debugService.getModel().onDidChangeReplElements(function () {
            if (!_this.isReplVisible()) {
                _this.class = 'debug-action toggle-repl notification';
                _this.tooltip = nls.localize('unreadOutput', "New Output in Debug Console");
            }
        }));
        this.toDispose.push(this.panelService.onDidPanelOpen(function (panel) {
            if (panel.getId() === debug.REPL_ID) {
                _this.class = 'debug-action toggle-repl';
                _this.tooltip = ToggleReplAction.LABEL;
            }
        }));
    };
    ToggleReplAction.prototype.isReplVisible = function () {
        var panel = this.panelService.getActivePanel();
        return panel && panel.getId() === debug.REPL_ID;
    };
    ToggleReplAction.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.toDispose = lifecycle.dispose(this.toDispose);
    };
    ToggleReplAction.ID = 'workbench.debug.action.toggleRepl';
    ToggleReplAction.LABEL = nls.localize({ comment: ['Debug is a noun in this context, not a verb.'], key: 'debugConsoleAction' }, 'Debug Console');
    ToggleReplAction = __decorate([
        __param(2, IDebugService),
        __param(3, partService_1.IPartService),
        __param(4, panelService_1.IPanelService)
    ], ToggleReplAction);
    return ToggleReplAction;
}(panel_1.TogglePanelAction));
exports.ToggleReplAction = ToggleReplAction;
var FocusReplAction = (function (_super) {
    __extends(FocusReplAction, _super);
    function FocusReplAction(id, label, panelService) {
        _super.call(this, id, label);
        this.panelService = panelService;
    }
    FocusReplAction.prototype.run = function () {
        return this.panelService.openPanel(debug.REPL_ID, true);
    };
    FocusReplAction.ID = 'workbench.debug.action.focusRepl';
    FocusReplAction.LABEL = nls.localize({ comment: ['Debug is a noun in this context, not a verb.'], key: 'debugFocusConsole' }, 'Focus Debug Console');
    FocusReplAction = __decorate([
        __param(2, panelService_1.IPanelService)
    ], FocusReplAction);
    return FocusReplAction;
}(actions_1.Action));
exports.FocusReplAction = FocusReplAction;
var RunAction = (function (_super) {
    __extends(RunAction, _super);
    function RunAction(id, label, debugService, keybindingService) {
        _super.call(this, id, label, null, debugService, keybindingService);
    }
    RunAction.prototype.run = function () {
        return this.debugService.createSession(true);
    };
    RunAction.prototype.isEnabled = function (state) {
        return _super.prototype.isEnabled.call(this, state) && state === debug.State.Inactive;
    };
    RunAction.ID = 'workbench.action.debug.run';
    RunAction.LABEL = nls.localize('startWithoutDebugging', "Start Without Debugging");
    RunAction = __decorate([
        __param(2, IDebugService),
        __param(3, keybinding_1.IKeybindingService)
    ], RunAction);
    return RunAction;
}(AbstractDebugAction));
exports.RunAction = RunAction;
