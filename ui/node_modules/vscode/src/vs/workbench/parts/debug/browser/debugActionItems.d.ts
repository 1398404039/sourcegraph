import { IAction, IActionRunner } from 'vs/base/common/actions';
import { SelectActionItem, IActionItem } from 'vs/base/browser/ui/actionbar/actionbar';
import { EventEmitter } from 'vs/base/common/eventEmitter';
import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
import { IDebugService } from 'vs/workbench/parts/debug/common/debug';
export declare class StartDebugActionItem extends EventEmitter implements IActionItem {
    private context;
    private action;
    private debugService;
    private configurationService;
    actionRunner: IActionRunner;
    private container;
    private selectBox;
    private toDispose;
    constructor(context: any, action: IAction, debugService: IDebugService, configurationService: IConfigurationService);
    private registerListeners();
    render(container: HTMLElement): void;
    setActionContext(context: any): void;
    isEnabled(): boolean;
    focus(): void;
    blur(): void;
    dispose(): void;
    private updateOptions();
}
export declare class FocusProcessActionItem extends SelectActionItem {
    private debugService;
    constructor(action: IAction, debugService: IDebugService);
}
