/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var nls_1 = require('vs/nls');
var commands_1 = require('vs/platform/commands/common/commands');
var instantiation_1 = require('vs/platform/instantiation/common/instantiation');
var editorService_1 = require('vs/workbench/services/editor/common/editorService');
var uri_1 = require('vs/base/common/uri');
var htmlInput_1 = require('../common/htmlInput');
var htmlPreviewPart_1 = require('vs/workbench/parts/html/browser/htmlPreviewPart');
var platform_1 = require('vs/platform/platform');
var baseEditor_1 = require('vs/workbench/browser/parts/editor/baseEditor');
var editor_1 = require('vs/workbench/common/editor');
var descriptors_1 = require('vs/platform/instantiation/common/descriptors');
var groupService_1 = require('vs/workbench/services/group/common/groupService');
// --- Register Editor
platform_1.Registry.as(editor_1.Extensions.Editors).registerEditor(new baseEditor_1.EditorDescriptor(htmlPreviewPart_1.HtmlPreviewPart.ID, nls_1.localize('html.editor.label', "Html Preview"), 'vs/workbench/parts/html/browser/htmlPreviewPart', 'HtmlPreviewPart'), [new descriptors_1.SyncDescriptor(htmlInput_1.HtmlInput)]);
// --- Register Commands
commands_1.CommandsRegistry.registerCommand('_workbench.previewHtml', function (accessor, resource, position, label) {
    var uri = resource instanceof uri_1.default ? resource : uri_1.default.parse(resource);
    label = label || uri.fsPath;
    var input;
    // Find already opened HTML input if any
    var stacks = accessor.get(groupService_1.IEditorGroupService).getStacksModel();
    var targetGroup = stacks.groupAt(position) || stacks.activeGroup;
    if (targetGroup) {
        var existingInput = targetGroup.getEditor(uri);
        if (existingInput instanceof htmlInput_1.HtmlInput) {
            input = existingInput;
        }
    }
    // Otherwise, create new input and open it
    if (!input) {
        input = accessor.get(instantiation_1.IInstantiationService).createInstance(htmlInput_1.HtmlInput, label, '', uri);
    }
    else {
        input.setName(label); // make sure to use passed in label
    }
    return accessor.get(editorService_1.IWorkbenchEditorService)
        .openEditor(input, { pinned: true }, position)
        .then(function (editor) { return true; });
});
