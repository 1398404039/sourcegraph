/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
require('./watermark.css');
var builder_1 = require('vs/base/browser/builder');
var lifecycle_1 = require('vs/base/common/lifecycle');
var keybinding_1 = require('vs/platform/keybinding/common/keybinding');
var nls = require('vs/nls');
var partService_1 = require('vs/workbench/services/part/common/partService');
var platform_1 = require('vs/platform/platform');
var telemetry_1 = require('vs/platform/telemetry/common/telemetry');
var contributions_1 = require('vs/workbench/common/contributions');
var lifecycle_2 = require('vs/platform/lifecycle/common/lifecycle');
var entries = [
    {
        text: nls.localize('watermark.showCommands', "Command Palette"),
        ids: ['workbench.action.showCommands']
    },
    {
        text: nls.localize('watermark.quickOpen', "Go to File"),
        ids: ['workbench.action.quickOpen']
    },
    {
        text: nls.localize('watermark.moveLines', "Move Lines Up/Down"),
        ids: ['editor.action.moveLinesUpAction', 'editor.action.moveLinesDownAction']
    },
    {
        text: nls.localize('watermark.addCursor', "Add Cursors Above/Below"),
        ids: ['editor.action.insertCursorAbove', 'editor.action.insertCursorBelow']
    },
    {
        text: nls.localize('watermark.toggleTerminal', "Toggle Terminal"),
        ids: ['workbench.action.terminal.toggleTerminal']
    },
];
var UNBOUND = nls.localize('watermark.unboundCommand', "unbound");
var WatermarkContribution = (function () {
    function WatermarkContribution(lifecycleService, partService, keybindingService, telemetryService) {
        var _this = this;
        this.partService = partService;
        this.keybindingService = keybindingService;
        this.toDispose = [];
        if (telemetryService.getExperiments().showCommandsWatermark) {
            lifecycleService.onShutdown(this.dispose, this);
            this.partService.joinCreation().then(function () {
                _this.create();
            });
        }
    }
    WatermarkContribution.prototype.getId = function () {
        return 'vs.watermark';
    };
    WatermarkContribution.prototype.create = function () {
        var _this = this;
        var container = this.partService.getContainer(partService_1.Parts.EDITOR_PART);
        var watermark = builder_1.$()
            .div({ 'class': 'watermark' });
        var box = builder_1.$(watermark)
            .div({ 'class': 'watermark-box' });
        var update = function () {
            var builder = builder_1.$(box);
            builder.clearChildren();
            entries.map(function (entry) {
                builder.element('dl', {}, function (dl) {
                    dl.element('dt', {}, function (dt) { return dt.text(entry.text); });
                    dl.element('dd', {}, function (dd) { return dd.innerHtml(entry.ids
                        .map(function (id) { return _this.keybindingService.lookupKeybindings(id).slice(0, 1)
                        .map(function (k) { return ("<span class=\"shortcuts\">" + _this.keybindingService.getLabelFor(k) + "</span>"); })
                        .join('') || UNBOUND; })
                        .join(' / ')); });
                });
            });
        };
        update();
        watermark.build(container, 0);
        builder_1.$(container)
            .addClass('has-watermark');
        this.toDispose.push(this.keybindingService.onDidUpdateKeybindings(update));
    };
    WatermarkContribution.prototype.dispose = function () {
        this.toDispose = lifecycle_1.dispose(this.toDispose);
    };
    WatermarkContribution = __decorate([
        __param(0, lifecycle_2.ILifecycleService),
        __param(1, partService_1.IPartService),
        __param(2, keybinding_1.IKeybindingService),
        __param(3, telemetry_1.ITelemetryService)
    ], WatermarkContribution);
    return WatermarkContribution;
}());
exports.WatermarkContribution = WatermarkContribution;
platform_1.Registry.as(contributions_1.Extensions.Workbench)
    .registerWorkbenchContribution(WatermarkContribution);
