/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var nls = require("vs/nls");
var uri_1 = require("vs/base/common/uri");
var platform_1 = require("vs/platform/platform");
var actionRegistry_1 = require("vs/workbench/common/actionRegistry");
var editor_1 = require("vs/workbench/common/editor");
var baseEditor_1 = require("vs/workbench/browser/parts/editor/baseEditor");
var actions_1 = require("vs/platform/actions/common/actions");
var extensions_1 = require("vs/platform/instantiation/common/extensions");
var keyCodes_1 = require("vs/base/common/keyCodes");
var descriptors_1 = require("vs/platform/instantiation/common/descriptors");
var preferencesEditor_1 = require("vs/workbench/parts/preferences/browser/preferencesEditor");
var preferencesActions_1 = require("vs/workbench/parts/preferences/browser/preferencesActions");
var preferences_1 = require("vs/workbench/parts/preferences/common/preferences");
var preferencesService_1 = require("vs/workbench/parts/preferences/browser/preferencesService");
var contextkey_1 = require("vs/platform/contextkey/common/contextkey");
extensions_1.registerSingleton(preferences_1.IPreferencesService, preferencesService_1.PreferencesService);
platform_1.Registry.as(editor_1.Extensions.Editors).registerEditor(new baseEditor_1.EditorDescriptor(preferencesEditor_1.DefaultPreferencesEditor.ID, nls.localize('defaultPreferencesEditor', "Default Preferences Editor"), 'vs/workbench/parts/preferences/browser/preferencesEditor', 'DefaultPreferencesEditor'), [
    new descriptors_1.SyncDescriptor(preferencesEditor_1.DefaultPreferencesEditorInput)
]);
// Register Editor Input Factory for Default Preferences Input
var DefaultPreferencesEditorInputFactory = (function () {
    function DefaultPreferencesEditorInputFactory() {
    }
    DefaultPreferencesEditorInputFactory.prototype.serialize = function (editorInput) {
        var input = editorInput;
        var serialized = { resource: input.getResource().toString() };
        return JSON.stringify(serialized);
    };
    DefaultPreferencesEditorInputFactory.prototype.deserialize = function (instantiationService, serializedEditorInput) {
        var deserialized = JSON.parse(serializedEditorInput);
        return instantiationService.createInstance(preferencesEditor_1.DefaultPreferencesEditorInput, uri_1.default.parse(deserialized.resource));
    };
    return DefaultPreferencesEditorInputFactory;
}());
platform_1.Registry.as(editor_1.Extensions.Editors).registerEditorInputFactory(preferencesEditor_1.DefaultPreferencesEditorInput.ID, DefaultPreferencesEditorInputFactory);
// Contribute Global Actions
var category = nls.localize('preferences', "Preferences");
var registry = platform_1.Registry.as(actionRegistry_1.Extensions.WorkbenchActions);
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(preferencesActions_1.OpenGlobalSettingsAction, preferencesActions_1.OpenGlobalSettingsAction.ID, preferencesActions_1.OpenGlobalSettingsAction.LABEL, {
    primary: null,
    mac: { primary: 32768 /* CtrlCmd */ | 82 /* US_COMMA */ }
}), 'Preferences: Open User Settings', category);
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(preferencesActions_1.OpenGlobalKeybindingsAction, preferencesActions_1.OpenGlobalKeybindingsAction.ID, preferencesActions_1.OpenGlobalKeybindingsAction.LABEL, { primary: keyCodes_1.KeyChord(32768 /* CtrlCmd */ | 41 /* KEY_K */, 32768 /* CtrlCmd */ | 49 /* KEY_S */) }), 'Preferences: Open Keyboard Shortcuts', category);
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(preferencesActions_1.OpenWorkspaceSettingsAction, preferencesActions_1.OpenWorkspaceSettingsAction.ID, preferencesActions_1.OpenWorkspaceSettingsAction.LABEL), 'Preferences: Open Workspace Settings', category);
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(preferencesActions_1.StartSearchDefaultSettingsAction, preferencesActions_1.StartSearchDefaultSettingsAction.ID, preferencesActions_1.StartSearchDefaultSettingsAction.LABEL, { primary: 32768 /* CtrlCmd */ | 36 /* KEY_F */ }, contextkey_1.ContextKeyExpr.and(preferences_1.CONTEXT_DEFAULT_SETTINGS_EDITOR)), 'Preferences: Focus Default Settings Search', category);
actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.EditorTitle, {
    command: {
        id: preferences_1.DEFAULT_EDITOR_COMMAND_COLLAPSE_ALL,
        iconClass: 'collapseAll',
        title: nls.localize('collapseAll', "Collapse All")
    },
    when: contextkey_1.ContextKeyExpr.and(preferences_1.CONTEXT_DEFAULT_SETTINGS_EDITOR),
    group: 'navigation'
});
