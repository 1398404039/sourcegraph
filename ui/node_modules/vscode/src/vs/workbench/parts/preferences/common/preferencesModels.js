/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var nls = require("vs/nls");
var strings = require("vs/base/common/strings");
var objects_1 = require("vs/base/common/objects");
var map_1 = require("vs/base/common/map");
var lifecycle_1 = require("vs/base/common/lifecycle");
var platform_1 = require("vs/platform/platform");
var json_1 = require("vs/base/common/json");
var configurationRegistry_1 = require("vs/platform/configuration/common/configurationRegistry");
var keybinding_1 = require("vs/platform/keybinding/common/keybinding");
var filters_1 = require("vs/base/common/filters");
var AbstractSettingsModel = (function (_super) {
    __extends(AbstractSettingsModel, _super);
    function AbstractSettingsModel() {
        return _super.apply(this, arguments) || this;
    }
    Object.defineProperty(AbstractSettingsModel.prototype, "groupsTerms", {
        get: function () {
            return this.settingsGroups.map(function (group) { return '@' + group.id; });
        },
        enumerable: true,
        configurable: true
    });
    AbstractSettingsModel.prototype.doFilterSettings = function (filter, allGroups) {
        if (!filter) {
            return {
                filteredGroups: allGroups,
                allGroups: allGroups,
                matches: new map_1.LinkedMap()
            };
        }
        var group = this.filterByGroupTerm(filter);
        if (group) {
            return {
                filteredGroups: [group],
                allGroups: allGroups,
                matches: new map_1.LinkedMap()
            };
        }
        var matches = new map_1.LinkedMap();
        var filteredGroups = [];
        var regex = strings.createRegExp(filter, false, { global: true });
        for (var _i = 0, allGroups_1 = allGroups; _i < allGroups_1.length; _i++) {
            var group_1 = allGroups_1[_i];
            var groupMatched = regex.test(group_1.title);
            var sections = [];
            for (var _a = 0, _b = group_1.sections; _a < _b.length; _a++) {
                var section = _b[_a];
                var settings = [];
                for (var _c = 0, _d = section.settings; _c < _d.length; _c++) {
                    var setting = _d[_c];
                    var settingMatches = this._findMatchesInSetting(filter, regex, setting);
                    if (groupMatched || settingMatches.length > 0) {
                        settings.push(setting);
                    }
                    matches.set(group_1.title + setting.key, settingMatches);
                }
                if (settings.length) {
                    sections.push({
                        description: section.description,
                        settings: settings,
                        descriptionRange: section.descriptionRange
                    });
                }
            }
            if (sections.length) {
                filteredGroups.push({
                    id: group_1.id,
                    title: group_1.title,
                    titleRange: group_1.titleRange,
                    sections: sections,
                    range: group_1.range
                });
            }
        }
        return { filteredGroups: filteredGroups, matches: matches, allGroups: allGroups };
    };
    AbstractSettingsModel.prototype.filterByGroupTerm = function (filter) {
        if (this.groupsTerms.indexOf(filter) !== -1) {
            var id_1 = filter.substring(1);
            return this.settingsGroups.filter(function (group) { return group.id === id_1; })[0];
        }
        return null;
    };
    return AbstractSettingsModel;
}(lifecycle_1.Disposable));
AbstractSettingsModel._fuzzyFilter = filters_1.or(filters_1.matchesPrefix, filters_1.matchesContiguousSubString, filters_1.matchesWords, filters_1.matchesFuzzy);
exports.AbstractSettingsModel = AbstractSettingsModel;
var SettingsEditorModel = (function (_super) {
    __extends(SettingsEditorModel, _super);
    function SettingsEditorModel(model, _configurationTarget) {
        var _this = _super.call(this) || this;
        _this.model = model;
        _this._configurationTarget = _configurationTarget;
        _this._register(_this.model.onDidChangeContent(function () {
            _this._settingsGroups = null;
        }));
        return _this;
    }
    Object.defineProperty(SettingsEditorModel.prototype, "uri", {
        get: function () {
            return this.model.uri;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SettingsEditorModel.prototype, "configurationTarget", {
        get: function () {
            return this._configurationTarget;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SettingsEditorModel.prototype, "settingsGroups", {
        get: function () {
            if (!this._settingsGroups) {
                this.parse();
            }
            return this._settingsGroups;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SettingsEditorModel.prototype, "content", {
        get: function () {
            return this.model.getValue();
        },
        enumerable: true,
        configurable: true
    });
    SettingsEditorModel.prototype.filterSettings = function (filter) {
        return this.doFilterSettings(filter, this.settingsGroups);
    };
    SettingsEditorModel.prototype.parse = function () {
        var model = this.model;
        var settings = [];
        var currentProperty = null;
        var currentParent = [];
        var previousParents = [];
        var range = {
            startLineNumber: 0,
            startColumn: 0,
            endLineNumber: 0,
            endColumn: 0
        };
        function onValue(value, offset, length) {
            if (Array.isArray(currentParent)) {
                currentParent.push(value);
            }
            else if (currentProperty) {
                currentParent[currentProperty] = value;
            }
            if (previousParents.length === 1) {
                // settings value started
                var valueStartPosition = model.getPositionAt(offset);
                var valueEndPosition = model.getPositionAt(offset + length);
                settings[settings.length - 1].value = value;
                settings[settings.length - 1].valueRange = {
                    startLineNumber: valueStartPosition.lineNumber,
                    startColumn: valueStartPosition.column,
                    endLineNumber: valueEndPosition.lineNumber,
                    endColumn: valueEndPosition.column
                };
                settings[settings.length - 1].range = objects_1.assign(settings[settings.length - 1].range, {
                    endLineNumber: valueEndPosition.lineNumber,
                    endColumn: valueEndPosition.column
                });
            }
        }
        var visitor = {
            onObjectBegin: function (offset, length) {
                if (previousParents.length === 0) {
                    // Settings started
                    var position = model.getPositionAt(offset);
                    range.startLineNumber = position.lineNumber;
                    range.startColumn = position.column;
                }
                var object = {};
                onValue(object, offset, length);
                currentParent = object;
                currentProperty = null;
                previousParents.push(currentParent);
            },
            onObjectProperty: function (name, offset, length) {
                currentProperty = name;
                if (previousParents.length === 1) {
                    // setting started
                    var settingStartPosition = model.getPositionAt(offset);
                    settings.push({
                        description: '',
                        key: name,
                        keyRange: {
                            startLineNumber: settingStartPosition.lineNumber,
                            startColumn: settingStartPosition.column,
                            endLineNumber: settingStartPosition.lineNumber,
                            endColumn: settingStartPosition.column + length
                        },
                        range: {
                            startLineNumber: settingStartPosition.lineNumber,
                            startColumn: settingStartPosition.column,
                            endLineNumber: 0,
                            endColumn: 0
                        },
                        value: null,
                        valueRange: null,
                        descriptionRange: null,
                    });
                }
            },
            onObjectEnd: function (offset, length) {
                currentParent = previousParents.pop();
                if (previousParents.length === 1) {
                    // setting ended
                    var valueEndPosition = model.getPositionAt(offset + length);
                    settings[settings.length - 1].valueRange = objects_1.assign(settings[settings.length - 1].valueRange, {
                        endLineNumber: valueEndPosition.lineNumber,
                        endColumn: valueEndPosition.column
                    });
                    settings[settings.length - 1].range = objects_1.assign(settings[settings.length - 1].range, {
                        endLineNumber: valueEndPosition.lineNumber,
                        endColumn: valueEndPosition.column
                    });
                }
                if (previousParents.length === 0) {
                    // settings ended
                    var position = model.getPositionAt(offset);
                    range.endLineNumber = position.lineNumber;
                    range.endColumn = position.column;
                }
            },
            onArrayBegin: function (offset, length) {
                var array = [];
                onValue(array, offset, length);
                previousParents.push(currentParent);
                currentParent = array;
                currentProperty = null;
            },
            onArrayEnd: function (offset, length) {
                currentParent = previousParents.pop();
                if (previousParents.length === 1) {
                    // setting value ended
                    var valueEndPosition = model.getPositionAt(offset + length);
                    settings[settings.length - 1].valueRange = objects_1.assign(settings[settings.length - 1].valueRange, {
                        endLineNumber: valueEndPosition.lineNumber,
                        endColumn: valueEndPosition.column
                    });
                    settings[settings.length - 1].range = objects_1.assign(settings[settings.length - 1].range, {
                        endLineNumber: valueEndPosition.lineNumber,
                        endColumn: valueEndPosition.column
                    });
                }
            },
            onLiteralValue: onValue,
            onError: function (error) {
            }
        };
        json_1.visit(model.getValue(), visitor);
        this._settingsGroups = settings.length > 0 ? [{
                sections: [
                    {
                        settings: settings
                    }
                ],
                title: null,
                titleRange: null,
                range: range
            }] : [];
    };
    SettingsEditorModel.prototype._findMatchesInSetting = function (searchString, searchRegex, setting) {
        var result = [];
        for (var lineNumber = setting.range.startLineNumber; lineNumber <= setting.range.endLineNumber; lineNumber++) {
            result.push.apply(result, this._findMatchesInLine(searchString, lineNumber));
        }
        return result;
    };
    SettingsEditorModel.prototype._findMatchesInLine = function (searchString, lineNumber) {
        return this.model.findMatches(searchString, {
            startLineNumber: lineNumber, startColumn: this.model.getLineMinColumn(lineNumber), endLineNumber: lineNumber, endColumn: this.model.getLineMaxColumn(lineNumber),
        }, false, false, false);
    };
    return SettingsEditorModel;
}(AbstractSettingsModel));
exports.SettingsEditorModel = SettingsEditorModel;
var DefaultSettingsEditorModel = (function (_super) {
    __extends(DefaultSettingsEditorModel, _super);
    function DefaultSettingsEditorModel(_uri, _mostCommonlyUsedSettingsKeys) {
        var _this = _super.call(this) || this;
        _this._uri = _uri;
        _this._mostCommonlyUsedSettingsKeys = _mostCommonlyUsedSettingsKeys;
        _this.indent = '  ';
        return _this;
    }
    Object.defineProperty(DefaultSettingsEditorModel.prototype, "uri", {
        get: function () {
            return this._uri;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DefaultSettingsEditorModel.prototype, "content", {
        get: function () {
            if (!this._content) {
                this.parse();
            }
            return this._content;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DefaultSettingsEditorModel.prototype, "settingsGroups", {
        get: function () {
            if (!this._allSettingsGroups) {
                this.parse();
            }
            return this._allSettingsGroups;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DefaultSettingsEditorModel.prototype, "mostCommonlyUsedSettings", {
        get: function () {
            return this.settingsGroups[0];
        },
        enumerable: true,
        configurable: true
    });
    DefaultSettingsEditorModel.prototype.filterSettings = function (filter) {
        return this.doFilterSettings(filter, this.settingsGroups);
    };
    DefaultSettingsEditorModel.prototype.getSetting = function (key) {
        for (var _i = 0, _a = this.settingsGroups; _i < _a.length; _i++) {
            var group = _a[_i];
            for (var _b = 0, _c = group.sections; _b < _c.length; _b++) {
                var section = _c[_b];
                for (var _d = 0, _e = section.settings; _d < _e.length; _d++) {
                    var setting = _e[_d];
                    if (setting.key === key) {
                        return setting;
                    }
                }
            }
        }
        return null;
    };
    DefaultSettingsEditorModel.prototype.parse = function () {
        var _this = this;
        var configurations = platform_1.Registry.as(configurationRegistry_1.Extensions.Configuration).getConfigurations();
        var allSettingsGroups = configurations.sort(this.compareConfigurationNodes).reduce(function (result, config) { return _this.parseConfig(config, result); }, []);
        this._allSettingsGroups = [this.getMostCommonlyUsedSettings(allSettingsGroups)].concat(allSettingsGroups);
        this._content = this.toContent(this.settingsGroups);
    };
    DefaultSettingsEditorModel.prototype.getMostCommonlyUsedSettings = function (allSettingsGroups) {
        var map = new map_1.LinkedMap();
        for (var _i = 0, allSettingsGroups_1 = allSettingsGroups; _i < allSettingsGroups_1.length; _i++) {
            var group = allSettingsGroups_1[_i];
            for (var _a = 0, _b = group.sections; _a < _b.length; _a++) {
                var section = _b[_a];
                for (var _c = 0, _d = section.settings; _c < _d.length; _c++) {
                    var setting = _d[_c];
                    map.set(setting.key, setting);
                }
            }
        }
        var settings = this._mostCommonlyUsedSettingsKeys.map(function (key) {
            var setting = map.get(key);
            if (setting) {
                return {
                    description: setting.description,
                    key: setting.key,
                    value: setting.value,
                    range: null,
                    valueRange: null
                };
            }
            return null;
        }).filter(function (setting) { return !!setting; });
        return {
            id: 'mostCommonlyUsed',
            range: null,
            title: nls.localize('commonlyUsed', "Most Commonly Used"),
            titleRange: null,
            sections: [
                {
                    settings: settings
                }
            ]
        };
    };
    DefaultSettingsEditorModel.prototype.parseConfig = function (config, result, settingsGroup) {
        var _this = this;
        if (config.title) {
            if (!settingsGroup) {
                settingsGroup = result.filter(function (g) { return g.title === config.title; })[0];
                if (!settingsGroup) {
                    settingsGroup = { sections: [{ settings: [] }], id: config.id, title: config.title, titleRange: null, range: null };
                    result.push(settingsGroup);
                }
            }
            else {
                settingsGroup.sections[settingsGroup.sections.length - 1].description = config.title;
            }
        }
        if (config.properties) {
            if (!settingsGroup) {
                settingsGroup = { sections: [{ settings: [] }], id: config.id, title: config.id, titleRange: null, range: null };
                result.push(settingsGroup);
            }
            var configurationSettings = Object.keys(config.properties).map(function (key) {
                var prop = config.properties[key];
                var value = prop.default;
                var description = prop.description || '';
                return { key: key, value: value, description: description, range: null, keyRange: null, valueRange: null, descriptionRange: null };
            });
            (_a = settingsGroup.sections[settingsGroup.sections.length - 1].settings).push.apply(_a, configurationSettings);
        }
        if (config.allOf) {
            config.allOf.forEach(function (c) { return _this.parseConfig(c, result, settingsGroup); });
        }
        return result;
        var _a;
    };
    DefaultSettingsEditorModel.prototype.compareConfigurationNodes = function (c1, c2) {
        if (typeof c1.order !== 'number') {
            return 1;
        }
        if (typeof c2.order !== 'number') {
            return -1;
        }
        if (c1.order === c2.order) {
            var title1 = c1.title || '';
            var title2 = c2.title || '';
            return title1.localeCompare(title2);
        }
        return c1.order - c2.order;
    };
    DefaultSettingsEditorModel.prototype.toContent = function (settingsGroups) {
        var lastSetting = null;
        this._contentByLines = [];
        this._contentByLines.push('{');
        this._contentByLines.push('');
        for (var _i = 0, settingsGroups_1 = settingsGroups; _i < settingsGroups_1.length; _i++) {
            var group = settingsGroups_1[_i];
            this._contentByLines.push('');
            var groupStart = this._contentByLines.length + 1;
            for (var _a = 0, _b = group.sections; _a < _b.length; _a++) {
                var section = _b[_a];
                if (section.description) {
                    var sectionTitleStart = this._contentByLines.length + 1;
                    this.addDescription(section.description, this.indent, this._contentByLines);
                    section.descriptionRange = { startLineNumber: sectionTitleStart, startColumn: 1, endLineNumber: this._contentByLines.length, endColumn: this._contentByLines[this._contentByLines.length - 1].length };
                }
                for (var _c = 0, _d = section.settings; _c < _d.length; _c++) {
                    var setting = _d[_c];
                    var settingStart = this._contentByLines.length + 1;
                    this.addDescription(setting.description, this.indent, this._contentByLines);
                    setting.descriptionRange = { startLineNumber: settingStart, startColumn: 1, endLineNumber: this._contentByLines.length, endColumn: this._contentByLines[this._contentByLines.length - 1].length };
                    var preValueConent = this.indent;
                    var keyString = JSON.stringify(setting.key);
                    preValueConent += keyString;
                    setting.keyRange = { startLineNumber: this._contentByLines.length + 1, startColumn: preValueConent.indexOf(setting.key) + 1, endLineNumber: this._contentByLines.length + 1, endColumn: setting.key.length };
                    preValueConent += ': ';
                    var valueStart = this._contentByLines.length + 1;
                    var valueString = JSON.stringify(setting.value, null, this.indent);
                    if (valueString && (typeof setting.value === 'object')) {
                        var mulitLineValue = valueString.split('\n');
                        this._contentByLines.push(preValueConent + mulitLineValue[0]);
                        for (var i = 1; i < mulitLineValue.length; i++) {
                            this._contentByLines.push(this.indent + mulitLineValue[i]);
                        }
                    }
                    else {
                        this._contentByLines.push(preValueConent + valueString);
                    }
                    setting.valueRange = { startLineNumber: valueStart, startColumn: preValueConent.length + 1, endLineNumber: this._contentByLines.length, endColumn: this._contentByLines[this._contentByLines.length - 1].length + 1 };
                    this._contentByLines[this._contentByLines.length - 1] += ',';
                    lastSetting = setting;
                    this._contentByLines.push('');
                    setting.range = { startLineNumber: settingStart, startColumn: 1, endLineNumber: this._contentByLines.length, endColumn: this._contentByLines[this._contentByLines.length - 1].length };
                }
            }
            group.range = { startLineNumber: groupStart, startColumn: 1, endLineNumber: this._contentByLines.length, endColumn: this._contentByLines[this._contentByLines.length - 1].length };
        }
        if (lastSetting) {
            var content = this._contentByLines[lastSetting.range.endLineNumber - 2];
            this._contentByLines[lastSetting.range.endLineNumber - 2] = content.substring(0, content.length - 1);
        }
        this._contentByLines.push('}');
        return this._contentByLines.join('\n');
    };
    DefaultSettingsEditorModel.prototype.addDescription = function (description, indent, result) {
        var multiLines = description.split('\n');
        for (var _i = 0, multiLines_1 = multiLines; _i < multiLines_1.length; _i++) {
            var line = multiLines_1[_i];
            result.push(indent + '// ' + line);
        }
    };
    DefaultSettingsEditorModel.prototype._findMatchesInSetting = function (searchString, searchRegex, setting) {
        var result = this._findMatchesInDescription(searchString, setting).slice();
        for (var lineNumber = setting.valueRange.startLineNumber; lineNumber <= setting.valueRange.endLineNumber; lineNumber++) {
            result.push.apply(result, this._findMatchesInLine(searchRegex, lineNumber));
        }
        return result;
    };
    DefaultSettingsEditorModel.prototype._findMatchesInDescription = function (searchString, setting) {
        var result = [];
        var _loop_1 = function (lineNumber) {
            var content = this_1._contentByLines[lineNumber - 1];
            var matches = AbstractSettingsModel._fuzzyFilter(searchString, content);
            if (matches) {
                result.push.apply(result, matches.map(function (match) {
                    return {
                        startLineNumber: lineNumber,
                        startColumn: match.start + 1,
                        endLineNumber: lineNumber,
                        endColumn: match.end + 1
                    };
                }));
            }
        };
        var this_1 = this;
        for (var lineNumber = setting.descriptionRange.startLineNumber; lineNumber <= setting.descriptionRange.endLineNumber; lineNumber++) {
            _loop_1(lineNumber);
        }
        return result;
    };
    DefaultSettingsEditorModel.prototype._findMatchesInLine = function (searchRegex, lineNumber) {
        var result = [];
        var text = this._contentByLines[lineNumber - 1];
        var m;
        // Reset regex to search from the beginning
        searchRegex.lastIndex = 0;
        do {
            m = searchRegex.exec(text);
            if (m) {
                var range = { startLineNumber: lineNumber, startColumn: m.index + 1, endLineNumber: lineNumber, endColumn: m.index + 1 + m[0].length };
                result.push(range);
                if (m.index + m[0].length === text.length) {
                    // Reached the end of the line
                    return result;
                }
            }
        } while (m);
        return result;
    };
    return DefaultSettingsEditorModel;
}(AbstractSettingsModel));
exports.DefaultSettingsEditorModel = DefaultSettingsEditorModel;
var DefaultKeybindingsEditorModel = (function () {
    function DefaultKeybindingsEditorModel(_uri, keybindingService) {
        this._uri = _uri;
        this.keybindingService = keybindingService;
    }
    Object.defineProperty(DefaultKeybindingsEditorModel.prototype, "uri", {
        get: function () {
            return this._uri;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DefaultKeybindingsEditorModel.prototype, "content", {
        get: function () {
            if (!this._content) {
                var defaultsHeader = '// ' + nls.localize('defaultKeybindingsHeader', "Overwrite key bindings by placing them into your key bindings file.");
                this._content = defaultsHeader + '\n' + this.keybindingService.getDefaultKeybindings();
            }
            return this._content;
        },
        enumerable: true,
        configurable: true
    });
    return DefaultKeybindingsEditorModel;
}());
DefaultKeybindingsEditorModel = __decorate([
    __param(1, keybinding_1.IKeybindingService)
], DefaultKeybindingsEditorModel);
exports.DefaultKeybindingsEditorModel = DefaultKeybindingsEditorModel;
