/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var env = require('vs/base/common/platform');
var nls = require('vs/nls');
var quickopen_1 = require('vs/workbench/browser/quickopen');
var platform_1 = require('vs/platform/platform');
var actions_1 = require('vs/platform/actions/common/actions');
var actionRegistry_1 = require('vs/workbench/common/actionRegistry');
var gotoSymbolHandler_1 = require('vs/workbench/parts/quickopen/browser/gotoSymbolHandler');
var commandsHandler_1 = require('vs/workbench/parts/quickopen/browser/commandsHandler');
var gotoLineHandler_1 = require('vs/workbench/parts/quickopen/browser/gotoLineHandler');
var helpHandler_1 = require('vs/workbench/parts/quickopen/browser/helpHandler');
// Register Actions
var registry = platform_1.Registry.as(actionRegistry_1.Extensions.WorkbenchActions);
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(commandsHandler_1.ShowAllCommandsAction, commandsHandler_1.ShowAllCommandsAction.ID, commandsHandler_1.ShowAllCommandsAction.LABEL, {
    primary: 32768 /* CtrlCmd */ | 16384 /* Shift */ | 46 /* KEY_P */,
    secondary: [59 /* F1 */]
}), 'Show All Commands');
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(gotoLineHandler_1.GotoLineAction, gotoLineHandler_1.GotoLineAction.ID, gotoLineHandler_1.GotoLineAction.LABEL, {
    primary: 32768 /* CtrlCmd */ | 37 /* KEY_G */,
    mac: { primary: 4096 /* WinCtrl */ | 37 /* KEY_G */ }
}), 'Go to Line...');
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(gotoSymbolHandler_1.GotoSymbolAction, gotoSymbolHandler_1.GotoSymbolAction.ID, gotoSymbolHandler_1.GotoSymbolAction.LABEL, {
    primary: 32768 /* CtrlCmd */ | 16384 /* Shift */ | 45 /* KEY_O */
}), 'Go to Symbol...');
// Register Quick Open Handler
platform_1.Registry.as(quickopen_1.Extensions.Quickopen).registerQuickOpenHandler(new quickopen_1.QuickOpenHandlerDescriptor('vs/workbench/parts/quickopen/browser/commandsHandler', 'CommandsHandler', commandsHandler_1.ALL_COMMANDS_PREFIX, nls.localize('commandsHandlerDescriptionDefault', "Show and Run Commands")));
platform_1.Registry.as(quickopen_1.Extensions.Quickopen).registerQuickOpenHandler(new quickopen_1.QuickOpenHandlerDescriptor('vs/workbench/parts/quickopen/browser/gotoLineHandler', 'GotoLineHandler', gotoLineHandler_1.GOTO_LINE_PREFIX, [
    {
        prefix: gotoLineHandler_1.GOTO_LINE_PREFIX,
        needsEditor: true,
        description: env.isMacintosh ? nls.localize('gotoLineDescriptionMac', "Go to Line") : nls.localize('gotoLineDescriptionWin', "Go to Line")
    },
]));
platform_1.Registry.as(quickopen_1.Extensions.Quickopen).registerQuickOpenHandler(new quickopen_1.QuickOpenHandlerDescriptor('vs/workbench/parts/quickopen/browser/gotoSymbolHandler', 'GotoSymbolHandler', gotoSymbolHandler_1.GOTO_SYMBOL_PREFIX, [
    {
        prefix: gotoSymbolHandler_1.GOTO_SYMBOL_PREFIX,
        needsEditor: true,
        description: nls.localize('gotoSymbolDescription', "Go to Symbol in File")
    },
    {
        prefix: gotoSymbolHandler_1.GOTO_SYMBOL_PREFIX + gotoSymbolHandler_1.SCOPE_PREFIX,
        needsEditor: true,
        description: nls.localize('gotoSymbolDescriptionScoped', "Go to Symbol in File by Category")
    }
]));
platform_1.Registry.as(quickopen_1.Extensions.Quickopen).registerQuickOpenHandler(new quickopen_1.QuickOpenHandlerDescriptor('vs/workbench/parts/quickopen/browser/helpHandler', 'HelpHandler', helpHandler_1.HELP_PREFIX, nls.localize('helpDescription', "Show Help")));
