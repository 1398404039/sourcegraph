/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var winjs_base_1 = require('vs/base/common/winjs.base');
var uri_1 = require('vs/base/common/uri');
var paths = require('vs/base/common/paths');
var strings = require('vs/base/common/strings');
var arrays = require('vs/base/common/arrays');
var range_1 = require('vs/editor/common/core/range');
var OutputLinkComputer = (function () {
    function OutputLinkComputer(ctx, createData) {
        this._ctx = ctx;
        this._workspaceResource = uri_1.default.parse(createData.workspaceResourceUri);
        this._patterns = OutputLinkComputer.createPatterns(this._workspaceResource);
    }
    OutputLinkComputer.prototype._getModel = function (uri) {
        var models = this._ctx.getMirrorModels();
        for (var i = 0; i < models.length; i++) {
            var model = models[i];
            if (model.uri.toString() === uri) {
                return model;
            }
        }
        return null;
    };
    OutputLinkComputer.prototype.computeLinks = function (uri) {
        var _this = this;
        var model = this._getModel(uri);
        if (!model) {
            return;
        }
        var links = [];
        var resourceCreator = {
            toResource: function (workspaceRelativePath) {
                if (typeof workspaceRelativePath === 'string') {
                    return uri_1.default.file(paths.join(_this._workspaceResource.fsPath, workspaceRelativePath));
                }
                return null;
            }
        };
        var lines = model.getValue().split(/\r\n|\r|\n/);
        for (var i = 0, len = lines.length; i < len; i++) {
            links.push.apply(links, OutputLinkComputer.detectLinks(lines[i], i + 1, this._patterns, resourceCreator));
        }
        return winjs_base_1.TPromise.as(links);
    };
    OutputLinkComputer.createPatterns = function (workspaceResource) {
        var patterns = [];
        var workspaceRootVariants = arrays.distinct([
            paths.normalize(workspaceResource.fsPath, true),
            paths.normalize(workspaceResource.fsPath, false)
        ]);
        workspaceRootVariants.forEach(function (workspaceRoot) {
            // Example: C:\Users\someone\AppData\Local\Temp\_monacodata_9888\workspaces\express\server.js on line 8, column 13
            patterns.push(new RegExp(strings.escapeRegExpCharacters(workspaceRoot) + '(\\S*) on line ((\\d+)(, column (\\d+))?)', 'gi'));
            // Example: C:\Users\someone\AppData\Local\Temp\_monacodata_9888\workspaces\express\server.js:line 8, column 13
            patterns.push(new RegExp(strings.escapeRegExpCharacters(workspaceRoot) + '(\\S*):line ((\\d+)(, column (\\d+))?)', 'gi'));
            // Example: C:\Users\someone\AppData\Local\Temp\_monacodata_9888\workspaces\mankala\Features.ts(45): error
            // Example: C:\Users\someone\AppData\Local\Temp\_monacodata_9888\workspaces\mankala\Features.ts (45): error
            // Example: C:\Users\someone\AppData\Local\Temp\_monacodata_9888\workspaces\mankala\Features.ts(45,18): error
            // Example: C:\Users\someone\AppData\Local\Temp\_monacodata_9888\workspaces\mankala\Features.ts (45,18): error
            patterns.push(new RegExp(strings.escapeRegExpCharacters(workspaceRoot) + '([^\\s\\(\\)]*)(\\s?\\((\\d+)(,(\\d+))?)\\)', 'gi'));
            // Example: at C:\Users\someone\AppData\Local\Temp\_monacodata_9888\workspaces\mankala\Game.ts
            // Example: at C:\Users\someone\AppData\Local\Temp\_monacodata_9888\workspaces\mankala\Game.ts:336
            // Example: at C:\Users\someone\AppData\Local\Temp\_monacodata_9888\workspaces\mankala\Game.ts:336:9
            patterns.push(new RegExp(strings.escapeRegExpCharacters(workspaceRoot) + '([^:\\s\\(\\)<>\'\"\\[\\]]*)(:(\\d+))?(:(\\d+))?', 'gi'));
        });
        return patterns;
    };
    /**
     * Detect links. Made public static to allow for tests.
     */
    OutputLinkComputer.detectLinks = function (line, lineIndex, patterns, contextService) {
        var links = [];
        patterns.forEach(function (pattern) {
            pattern.lastIndex = 0; // the holy grail of software development
            var match;
            var offset = 0;
            while ((match = pattern.exec(line)) !== null) {
                // Convert the relative path information to a resource that we can use in links
                var workspaceRelativePath = strings.rtrim(match[1], '.').replace(/\\/g, '/'); // remove trailing "." that likely indicate end of sentence
                var resource = void 0;
                try {
                    resource = contextService.toResource(workspaceRelativePath).toString();
                }
                catch (error) {
                    continue; // we might find an invalid URI and then we dont want to loose all other links
                }
                // Append line/col information to URI if matching
                if (match[3]) {
                    var lineNumber = match[3];
                    if (match[5]) {
                        var columnNumber = match[5];
                        resource = strings.format('{0}#{1},{2}', resource, lineNumber, columnNumber);
                    }
                    else {
                        resource = strings.format('{0}#{1}', resource, lineNumber);
                    }
                }
                var fullMatch = strings.rtrim(match[0], '.'); // remove trailing "." that likely indicate end of sentence
                var index = line.indexOf(fullMatch, offset);
                offset += index + fullMatch.length;
                var linkRange = {
                    startColumn: index + 1,
                    startLineNumber: lineIndex,
                    endColumn: index + 1 + fullMatch.length,
                    endLineNumber: lineIndex
                };
                if (links.some(function (link) { return range_1.Range.areIntersectingOrTouching(link.range, linkRange); })) {
                    return; // Do not detect duplicate links
                }
                links.push({
                    range: linkRange,
                    url: resource
                });
            }
        });
        return links;
    };
    return OutputLinkComputer;
}());
exports.OutputLinkComputer = OutputLinkComputer;
function create(ctx, createData) {
    return new OutputLinkComputer(ctx, createData);
}
exports.create = create;
