/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var async_1 = require("vs/base/common/async");
var modes_1 = require("vs/editor/common/modes");
var output_1 = require("vs/workbench/parts/output/common/output");
var webWorker_1 = require("vs/editor/common/services/webWorker");
var OutputLinkProvider = (function () {
    function OutputLinkProvider(contextService, modelService) {
        var _this = this;
        var workspace = contextService.getWorkspace();
        // Does not do anything unless there is a workspace...
        if (workspace) {
            this._modelService = modelService;
            this._workspaceResource = workspace.resource;
            modes_1.LinkProviderRegistry.register(output_1.OUTPUT_MODE_ID, {
                provideLinks: function (model, token) {
                    return async_1.wireCancellationToken(token, _this._provideLinks(model.uri));
                }
            });
            this._worker = null;
            this._disposeWorker = new async_1.RunOnceScheduler(function () {
                if (_this._worker) {
                    _this._worker.dispose();
                    _this._worker = null;
                }
            }, OutputLinkProvider.DISPOSE_WORKER_TIME);
        }
    }
    OutputLinkProvider.prototype._getOrCreateWorker = function () {
        this._disposeWorker.schedule();
        if (!this._worker) {
            var createData = {
                workspaceResourceUri: this._workspaceResource.toString()
            };
            this._worker = webWorker_1.createWebWorker(this._modelService, {
                moduleId: 'vs/workbench/parts/output/common/outputLinkComputer',
                createData: createData,
                label: 'outputLinkComputer'
            });
        }
        return this._worker;
    };
    OutputLinkProvider.prototype._provideLinks = function (modelUri) {
        return this._getOrCreateWorker().withSyncedResources([modelUri]).then(function (linkComputer) {
            return linkComputer.computeLinks(modelUri.toString());
        });
    };
    return OutputLinkProvider;
}());
OutputLinkProvider.DISPOSE_WORKER_TIME = 3 * 60 * 1000; // dispose worker after 3 minutes of inactivity
exports.OutputLinkProvider = OutputLinkProvider;
