/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var nls = require('vs/nls');
var lifecycle = require('vs/base/common/lifecycle');
var telemetry_1 = require('vs/platform/telemetry/common/telemetry');
var storage_1 = require('vs/platform/storage/common/storage');
var configuration_1 = require('vs/platform/configuration/common/configuration');
var event_1 = require('vs/platform/event/common/event');
var instantiation_1 = require('vs/platform/instantiation/common/instantiation');
var message_1 = require('vs/platform/message/common/message');
var contextkey_1 = require('vs/platform/contextkey/common/contextkey');
var stringEditor_1 = require('vs/workbench/browser/parts/editor/stringEditor');
var output_1 = require('vs/workbench/parts/output/common/output');
var outputEditorInput_1 = require('vs/workbench/parts/output/browser/outputEditorInput');
var outputActions_1 = require('vs/workbench/parts/output/browser/outputActions');
var workspace_1 = require('vs/platform/workspace/common/workspace');
var editorService_1 = require('vs/workbench/services/editor/common/editorService');
var themeService_1 = require('vs/workbench/services/themes/common/themeService');
var untitledEditorService_1 = require('vs/workbench/services/untitled/common/untitledEditorService');
var OutputPanel = (function (_super) {
    __extends(OutputPanel, _super);
    function OutputPanel(telemetryService, instantiationService, contextService, storageService, messageService, configurationService, eventService, editorService, themeService, outputService, untitledEditorService, contextKeyService) {
        _super.call(this, telemetryService, instantiationService, contextService, storageService, messageService, configurationService, eventService, editorService, themeService, untitledEditorService);
        this.outputService = outputService;
        this.contextKeyService = contextKeyService;
        this.toDispose = [];
    }
    OutputPanel.prototype.getId = function () {
        return output_1.OUTPUT_PANEL_ID;
    };
    OutputPanel.prototype.getActions = function () {
        var _this = this;
        if (!this.actions) {
            this.actions = [
                this.instantiationService.createInstance(outputActions_1.SwitchOutputAction),
                this.instantiationService.createInstance(outputActions_1.ClearOutputAction, outputActions_1.ClearOutputAction.ID, outputActions_1.ClearOutputAction.LABEL)
            ];
            this.actions.forEach(function (a) {
                _this.toDispose.push(a);
            });
        }
        return this.actions;
    };
    OutputPanel.prototype.getActionItem = function (action) {
        if (action.id === outputActions_1.SwitchOutputAction.ID) {
            return this.instantiationService.createInstance(outputActions_1.SwitchOutputActionItem, action);
        }
        return _super.prototype.getActionItem.call(this, action);
    };
    OutputPanel.prototype.getCodeEditorOptions = function () {
        var options = _super.prototype.getCodeEditorOptions.call(this);
        options.wrappingColumn = 0; // all output editors wrap
        options.lineNumbers = 'off'; // all output editors hide line numbers
        options.glyphMargin = false;
        options.lineDecorationsWidth = 20;
        options.rulers = [];
        options.folding = false;
        options.scrollBeyondLastLine = false;
        var channel = this.outputService.getActiveChannel();
        options.ariaLabel = channel ? nls.localize('outputPanelWithInputAriaLabel', "{0}, Output panel", channel.label) : nls.localize('outputPanelAriaLabel', "Output panel");
        return options;
    };
    OutputPanel.prototype.setInput = function (input, options) {
        var _this = this;
        return _super.prototype.setInput.call(this, input, options).then(function () { return _this.revealLastLine(); });
    };
    OutputPanel.prototype.createEditor = function (parent) {
        _super.prototype.createEditor.call(this, parent);
        var scopedContextKeyService = this.contextKeyService.createScoped(this.getContainer().getHTMLElement());
        this.toDispose.push(scopedContextKeyService);
        output_1.CONTEXT_IN_OUTPUT.bindTo(scopedContextKeyService).set(true);
        this.setInput(outputEditorInput_1.OutputEditorInput.getInstance(this.instantiationService, this.outputService.getActiveChannel()), null);
    };
    OutputPanel.prototype.dispose = function () {
        this.toDispose = lifecycle.dispose(this.toDispose);
        _super.prototype.dispose.call(this);
    };
    OutputPanel = __decorate([
        __param(0, telemetry_1.ITelemetryService),
        __param(1, instantiation_1.IInstantiationService),
        __param(2, workspace_1.IWorkspaceContextService),
        __param(3, storage_1.IStorageService),
        __param(4, message_1.IMessageService),
        __param(5, configuration_1.IConfigurationService),
        __param(6, event_1.IEventService),
        __param(7, editorService_1.IWorkbenchEditorService),
        __param(8, themeService_1.IThemeService),
        __param(9, output_1.IOutputService),
        __param(10, untitledEditorService_1.IUntitledEditorService),
        __param(11, contextkey_1.IContextKeyService)
    ], OutputPanel);
    return OutputPanel;
}(stringEditor_1.StringEditor));
exports.OutputPanel = OutputPanel;
