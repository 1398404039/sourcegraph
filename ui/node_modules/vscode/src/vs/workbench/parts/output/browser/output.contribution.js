/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
require('../browser/media/output.contribution.css');
var nls = require('vs/nls');
var keyCodes_1 = require('vs/base/common/keyCodes');
var modesRegistry_1 = require('vs/editor/common/modes/modesRegistry');
var platform = require('vs/platform/platform');
var actions_1 = require('vs/platform/actions/common/actions');
var keybindingsRegistry_1 = require('vs/platform/keybinding/common/keybindingsRegistry');
var extensions_1 = require('vs/platform/instantiation/common/extensions');
var actionRegistry_1 = require('vs/workbench/common/actionRegistry');
var outputServices_1 = require('vs/workbench/parts/output/browser/outputServices');
var outputActions_1 = require('vs/workbench/parts/output/browser/outputActions');
var output_1 = require('vs/workbench/parts/output/common/output');
var panel = require('vs/workbench/browser/panel');
var editorCommon_1 = require('vs/editor/common/editorCommon');
var commands_1 = require('vs/platform/commands/common/commands');
// Register Service
extensions_1.registerSingleton(output_1.IOutputService, outputServices_1.OutputService);
// Register Output Mode
modesRegistry_1.ModesRegistry.registerLanguage({
    id: output_1.OUTPUT_MODE_ID,
    extensions: [],
    aliases: [null],
    mimetypes: [output_1.OUTPUT_MIME]
});
// Register Output Panel
platform.Registry.as(panel.Extensions.Panels).registerPanel(new panel.PanelDescriptor('vs/workbench/parts/output/browser/outputPanel', 'OutputPanel', output_1.OUTPUT_PANEL_ID, nls.localize('output', "Output"), 'output', 20));
// register toggle output action globally
var actionRegistry = platform.Registry.as(actionRegistry_1.Extensions.WorkbenchActions);
actionRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(outputActions_1.ToggleOutputAction, outputActions_1.ToggleOutputAction.ID, outputActions_1.ToggleOutputAction.LABEL, {
    primary: 32768 /* CtrlCmd */ | 16384 /* Shift */ | 51 /* KEY_U */,
    linux: {
        primary: keyCodes_1.KeyChord(32768 /* CtrlCmd */ | 41 /* KEY_K */, 32768 /* CtrlCmd */ | 38 /* KEY_H */) // On Ubuntu Ctrl+Shift+U is taken by some global OS command
    }
}), 'View: Toggle Output', nls.localize('viewCategory', "View"));
actionRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(outputActions_1.ClearOutputAction, outputActions_1.ClearOutputAction.ID, outputActions_1.ClearOutputAction.LABEL), 'View: Clear Output', nls.localize('viewCategory', "View"));
function registerAction(desc) {
    var id = desc.id, handler = desc.handler, title = desc.title, category = desc.category, iconClass = desc.iconClass, f1 = desc.f1, menu = desc.menu, keybinding = desc.keybinding;
    // 1) register as command
    commands_1.CommandsRegistry.registerCommand(id, handler);
    // 2) command palette
    var command = { id: id, title: title, iconClass: iconClass, category: category };
    if (f1) {
        actions_1.MenuRegistry.addCommand(command);
    }
    // 3) menus
    if (menu) {
        var menuId = menu.menuId, when = menu.when, group = menu.group;
        actions_1.MenuRegistry.appendMenuItem(menuId, {
            command: command,
            when: when,
            group: group
        });
    }
    // 4) keybindings
    if (keybinding) {
        var when = keybinding.when, weight = keybinding.weight, keys = keybinding.keys;
        keybindingsRegistry_1.KeybindingsRegistry.registerKeybindingRule({
            id: id,
            when: when,
            weight: weight,
            primary: keys.primary,
            secondary: keys.secondary,
            linux: keys.linux,
            mac: keys.mac,
            win: keys.win
        });
    }
}
// Define clear command, contribute to editor context menu
registerAction({
    id: 'editor.action.clearoutput',
    title: nls.localize('clearOutput.label', "Clear Output"),
    menu: {
        menuId: actions_1.MenuId.EditorContext,
        when: editorCommon_1.EditorContextKeys.LanguageId.isEqualTo(output_1.OUTPUT_MODE_ID)
    },
    handler: function (accessor) {
        accessor.get(output_1.IOutputService).getActiveChannel().clear();
    }
});
