/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var dom = require('vs/base/browser/dom');
var nls_1 = require('vs/nls');
var lifecycle_1 = require('vs/base/common/lifecycle');
var winjs_base_1 = require('vs/base/common/winjs.base');
var treeDefaults_1 = require('vs/base/parts/tree/browser/treeDefaults');
var actions_1 = require('vs/base/common/actions');
var extensions_1 = require('./extensions');
var event_1 = require('vs/base/common/event');
var event_2 = require('vs/base/browser/event');
var keybinding_1 = require('vs/base/common/keybinding');
var contextView_1 = require('vs/platform/contextview/browser/contextView');
var instantiation_1 = require('vs/platform/instantiation/common/instantiation');
var editorService_1 = require('vs/workbench/services/editor/common/editorService');
var editor_1 = require('vs/platform/editor/common/editor');
var DataSource = (function () {
    function DataSource() {
    }
    DataSource.prototype.getId = function (tree, element) {
        var _this = this;
        var id = element.extension.publisher + "." + element.extension.name;
        this.getParent(tree, element).then(function (parent) {
            id = parent ? _this.getId(tree, parent) + '/' + id : id;
        });
        return id;
    };
    DataSource.prototype.hasChildren = function (tree, element) {
        return element.hasDependencies;
    };
    DataSource.prototype.getChildren = function (tree, element) {
        return winjs_base_1.TPromise.as(element.dependencies);
    };
    DataSource.prototype.getParent = function (tree, element) {
        return winjs_base_1.TPromise.as(element.dependent);
    };
    return DataSource;
}());
exports.DataSource = DataSource;
var Renderer = (function () {
    function Renderer() {
    }
    Renderer.prototype.getHeight = function (tree, element) {
        return 62;
    };
    Renderer.prototype.getTemplateId = function (tree, element) {
        return Renderer.EXTENSION_TEMPLATE_ID;
    };
    Renderer.prototype.renderTemplate = function (tree, templateId, container) {
        dom.addClass(container, 'dependency');
        var data = Object.create(null);
        data.icon = dom.append(container, dom.$('img.icon'));
        var details = dom.append(container, dom.$('.details'));
        var header = dom.append(details, dom.$('.header'));
        data.name = dom.append(header, dom.$('span.name'));
        data.identifier = dom.append(header, dom.$('span.identifier'));
        var footer = dom.append(details, dom.$('.footer'));
        data.author = dom.append(footer, dom.$('.author'));
        return data;
    };
    Renderer.prototype.renderElement = function (tree, element, templateId, templateData) {
        var extension = element.extension;
        var data = templateData;
        var onError = event_1.once(event_2.domEvent(data.icon, 'error'));
        onError(function () { return data.icon.src = extension.iconUrlFallback; }, null, data.extensionDisposables);
        data.icon.src = extension.iconUrl;
        if (!data.icon.complete) {
            data.icon.style.visibility = 'hidden';
            data.icon.onload = function () { return data.icon.style.visibility = 'inherit'; };
        }
        else {
            data.icon.style.visibility = 'inherit';
        }
        data.name.textContent = extension.displayName;
        data.identifier.textContent = extension.publisher + "." + extension.name;
        data.author.textContent = extension.publisherDisplayName;
    };
    Renderer.prototype.disposeTemplate = function (tree, templateId, templateData) {
        templateData.extensionDisposables = lifecycle_1.dispose(templateData.extensionDisposables);
    };
    Renderer.EXTENSION_TEMPLATE_ID = 'extension-template';
    return Renderer;
}());
exports.Renderer = Renderer;
var Controller = (function (_super) {
    __extends(Controller, _super);
    function Controller(contextMenuService, extensionWorkbenchService, instantiationService) {
        var _this = this;
        _super.call(this);
        this.contextMenuService = contextMenuService;
        this.extensionWorkbenchService = extensionWorkbenchService;
        this.instantiationService = instantiationService;
        this.downKeyBindingDispatcher.set(OpenExtensionToSideAction.KEY_BINDING.value, function (tree, event) { _this.openExtension(tree.getFocus(), true); });
    }
    Controller.prototype.onLeftClick = function (tree, element, event) {
        var currentFoucssed = tree.getFocus();
        if (_super.prototype.onLeftClick.call(this, tree, element, event)) {
            if (element.dependent === null) {
                if (currentFoucssed) {
                    tree.setFocus(currentFoucssed);
                }
                else {
                    tree.focusFirst();
                }
                return true;
            }
        }
        return false;
    };
    Controller.prototype.onContextMenu = function (tree, element, event) {
        var _this = this;
        tree.setFocus(element);
        var anchor = { x: event.posx + 1, y: event.posy };
        this.contextMenuService.showContextMenu({
            getAnchor: function () { return anchor; },
            getActions: function () {
                return winjs_base_1.TPromise.as([_this.instantiationService.createInstance(OpenExtensionAction),
                    _this.instantiationService.createInstance(OpenExtensionToSideAction)]);
            },
            getActionItem: function () { return null; },
            getKeyBinding: function (action) {
                return _this.keybindingForAction(action.id);
            },
            getActionsContext: function (event) {
                return {
                    extension: tree.getFocus().extension
                };
            },
            onHide: function (wasCancelled) {
                if (wasCancelled) {
                    tree.DOMFocus();
                }
            }
        });
        return true;
    };
    Controller.prototype.onEnter = function (tree, event) {
        if (_super.prototype.onEnter.call(this, tree, event)) {
            return this.openExtension(tree.getFocus(), event.ctrlKey || event.metaKey);
        }
        return false;
    };
    Controller.prototype.openExtension = function (element, sideByside) {
        if (sideByside === void 0) { sideByside = false; }
        this.extensionWorkbenchService.open(element.extension, sideByside);
        return true;
    };
    Controller.prototype.keybindingForAction = function (id) {
        switch (id) {
            case OpenExtensionAction.ID:
                return OpenExtensionAction.KEY_BINDING;
            case OpenExtensionToSideAction.ID:
                return OpenExtensionToSideAction.KEY_BINDING;
        }
        return null;
    };
    Controller = __decorate([
        __param(0, contextView_1.IContextMenuService),
        __param(1, extensions_1.IExtensionsWorkbenchService),
        __param(2, instantiation_1.IInstantiationService)
    ], Controller);
    return Controller;
}(treeDefaults_1.DefaultController));
exports.Controller = Controller;
var OpenExtensionAction = (function (_super) {
    __extends(OpenExtensionAction, _super);
    function OpenExtensionAction(extensionsWorkdbenchService) {
        _super.call(this, OpenExtensionAction.ID, nls_1.localize('extensions.open', "Open"));
        this.extensionsWorkdbenchService = extensionsWorkdbenchService;
    }
    OpenExtensionAction.prototype.run = function (context) {
        this.extensionsWorkdbenchService.open(context.extension);
        return winjs_base_1.TPromise.as(null);
    };
    OpenExtensionAction.ID = 'extensions.action.open';
    OpenExtensionAction.KEY_BINDING = new keybinding_1.Keybinding(3 /* Enter */);
    OpenExtensionAction = __decorate([
        __param(0, extensions_1.IExtensionsWorkbenchService)
    ], OpenExtensionAction);
    return OpenExtensionAction;
}(actions_1.Action));
var OpenExtensionToSideAction = (function (_super) {
    __extends(OpenExtensionToSideAction, _super);
    function OpenExtensionToSideAction(extensionsWorkdbenchService, editorService) {
        _super.call(this, OpenExtensionToSideAction.ID, nls_1.localize('extensions.openSide', "Open to the Side"));
        this.extensionsWorkdbenchService = extensionsWorkdbenchService;
        this.editorService = editorService;
        this.updateEnablement();
    }
    OpenExtensionToSideAction.prototype.updateEnablement = function () {
        var activeEditor = this.editorService.getActiveEditor();
        this.enabled = (!activeEditor || activeEditor.position !== editor_1.Position.RIGHT);
    };
    OpenExtensionToSideAction.prototype.run = function (context) {
        this.extensionsWorkdbenchService.open(context.extension, true);
        return winjs_base_1.TPromise.as(null);
    };
    OpenExtensionToSideAction.ID = 'extensions.action.openSide';
    OpenExtensionToSideAction.KEY_BINDING = new keybinding_1.Keybinding(4096 /* WinCtrl */ | 3 /* Enter */);
    OpenExtensionToSideAction = __decorate([
        __param(0, extensions_1.IExtensionsWorkbenchService),
        __param(1, editorService_1.IWorkbenchEditorService)
    ], OpenExtensionToSideAction);
    return OpenExtensionToSideAction;
}(actions_1.Action));
