import './media/extensionsViewlet.css';
import { TPromise } from 'vs/base/common/winjs.base';
import { IWorkbenchContribution } from 'vs/workbench/common/contributions';
import { Builder, Dimension } from 'vs/base/browser/builder';
import { IAction } from 'vs/base/common/actions';
import { Viewlet } from 'vs/workbench/browser/viewlet';
import { IViewletService } from 'vs/workbench/services/viewlet/browser/viewlet';
import { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import { IExtensionsWorkbenchService, IExtensionsViewlet } from '../common/extensions';
import { IExtensionManagementService, IExtensionGalleryService, IExtensionTipsService } from 'vs/platform/extensionManagement/common/extensionManagement';
import { IProgressService } from 'vs/platform/progress/common/progress';
import { IWorkbenchEditorService } from 'vs/workbench/services/editor/common/editorService';
import { IEditorGroupService } from 'vs/workbench/services/group/common/groupService';
import { IMessageService } from 'vs/platform/message/common/message';
import { IActivityBarService } from 'vs/workbench/services/activity/common/activityBarService';
import { IExtensionService } from 'vs/platform/extensions/common/extensions';
export declare class ExtensionsViewlet extends Viewlet implements IExtensionsViewlet {
    private galleryService;
    private extensionManagementService;
    private progressService;
    private instantiationService;
    private editorService;
    private editorInputService;
    private extensionsWorkbenchService;
    private tipsService;
    private messageService;
    private viewletService;
    private extensionService;
    private onSearchChange;
    private searchDelayer;
    private root;
    private searchBox;
    private extensionsBox;
    private messageBox;
    private list;
    private primaryActions;
    private secondaryActions;
    private disposables;
    constructor(telemetryService: ITelemetryService, galleryService: IExtensionGalleryService, extensionManagementService: IExtensionManagementService, progressService: IProgressService, instantiationService: IInstantiationService, editorService: IWorkbenchEditorService, editorInputService: IEditorGroupService, extensionsWorkbenchService: IExtensionsWorkbenchService, tipsService: IExtensionTipsService, messageService: IMessageService, viewletService: IViewletService, extensionService: IExtensionService);
    create(parent: Builder): TPromise<void>;
    setVisible(visible: boolean): TPromise<void>;
    focus(): void;
    layout({height, width}: Dimension): void;
    getOptimalWidth(): number;
    getActions(): IAction[];
    getSecondaryActions(): IAction[];
    private setModel(model);
    search(value: string): void;
    private triggerSearch(value, immediate?, suggestPopular?);
    private doSearch(value?, suggestPopular?);
    private query(value);
    private getRecommendationsModel(query, options);
    private getWorkspaceRecommendationsModel(query, options);
    private getKeymapRecommendationsModel(query, options);
    private openExtension(extension);
    private onEnter();
    private onEscape();
    private onUpArrow();
    private onDownArrow();
    private onPageUpArrow();
    private onPageDownArrow();
    private progress<T>(promise);
    private onViewletOpen(viewlet);
    private onError(err);
    dispose(): void;
}
export declare class StatusUpdater implements IWorkbenchContribution {
    private activityBarService;
    private extensionsWorkbenchService;
    private disposables;
    constructor(activityBarService: IActivityBarService, extensionsWorkbenchService: IExtensionsWorkbenchService);
    getId(): string;
    private onServiceChange();
    dispose(): void;
}
