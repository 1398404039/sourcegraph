import './media/extensionsViewlet.css';
import Event from 'vs/base/common/event';
import { TPromise } from 'vs/base/common/winjs.base';
import { IPager } from 'vs/base/common/paging';
import { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';
import { IExtensionManagementService, IExtensionGalleryService, IQueryOptions } from 'vs/platform/extensionManagement/common/extensionManagement';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
import { IMessageService } from 'vs/platform/message/common/message';
import { IExtension, IExtensionDependencies, IExtensionsWorkbenchService } from './extensions';
import { IWorkbenchEditorService } from 'vs/workbench/services/editor/common/editorService';
import { IURLService } from 'vs/platform/url/common/url';
export declare class ExtensionsWorkbenchService implements IExtensionsWorkbenchService {
    private instantiationService;
    private editorService;
    private extensionService;
    private galleryService;
    private configurationService;
    private telemetryService;
    private messageService;
    private static SyncPeriod;
    _serviceBrand: any;
    private stateProvider;
    private installing;
    private uninstalling;
    private installed;
    private syncDelayer;
    private autoUpdateDelayer;
    private disposables;
    private _onChange;
    readonly onChange: Event<void>;
    constructor(instantiationService: IInstantiationService, editorService: IWorkbenchEditorService, extensionService: IExtensionManagementService, galleryService: IExtensionGalleryService, configurationService: IConfigurationService, telemetryService: ITelemetryService, messageService: IMessageService, urlService: IURLService);
    readonly local: IExtension[];
    queryLocal(): TPromise<IExtension[]>;
    queryGallery(options?: IQueryOptions): TPromise<IPager<IExtension>>;
    loadDependencies(extension: IExtension): TPromise<IExtensionDependencies>;
    open(extension: IExtension, sideByside?: boolean): TPromise<any>;
    private fromGallery(gallery);
    private syncLocalWithGalleryExtension(local, gallery);
    private eventuallySyncWithGallery(immediate?);
    private syncWithGallery();
    private eventuallyAutoUpdateExtensions();
    private autoUpdateExtensions();
    canInstall(extension: IExtension): boolean;
    install(extension: string | IExtension, promptToInstallDependencies?: boolean): TPromise<void>;
    uninstall(extension: IExtension): TPromise<void>;
    private onInstallExtension(event);
    private onDidInstallExtension(event);
    private onUninstallExtension(id);
    private onDidUninstallExtension(id);
    private getExtensionState(extension);
    private reportTelemetry(active, success);
    private onError(err);
    private onOpenExtensionUrl(uri);
    dispose(): void;
}
