/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
require('./media/extensionActions.css');
var nls_1 = require('vs/nls');
var winjs_base_1 = require('vs/base/common/winjs.base');
var actions_1 = require('vs/base/common/actions');
var severity_1 = require('vs/base/common/severity');
var paths = require('vs/base/common/paths');
var lifecycle_1 = require('vs/base/common/lifecycle');
var actions_2 = require('vs/workbench/electron-browser/actions');
var extensions_1 = require('./extensions');
var extensionManagement_1 = require('vs/platform/extensionManagement/common/extensionManagement');
var instantiation_1 = require('vs/platform/instantiation/common/instantiation');
var message_1 = require('vs/platform/message/common/message');
var environment_1 = require('vs/platform/environment/common/environment');
var viewlet_1 = require('vs/workbench/browser/viewlet');
var viewletService_1 = require('vs/workbench/services/viewlet/common/viewletService');
var editorService_1 = require('vs/workbench/services/editor/common/editorService');
var extensionQuery_1 = require('../common/extensionQuery');
var electron_1 = require('electron');
var extensionsFileTemplate_1 = require('vs/workbench/parts/extensions/electron-browser/extensionsFileTemplate');
var files_1 = require('vs/platform/files/common/files');
var workspace_1 = require('vs/platform/workspace/common/workspace');
var uri_1 = require('vs/base/common/uri');
var dialog = electron_1.remote.dialog;
var InstallAction = (function (_super) {
    __extends(InstallAction, _super);
    function InstallAction(extensionsWorkbenchService) {
        var _this = this;
        _super.call(this, 'extensions.install', InstallAction.InstallLabel, InstallAction.Class, false);
        this.extensionsWorkbenchService = extensionsWorkbenchService;
        this.disposables = [];
        this.disposables.push(this.extensionsWorkbenchService.onChange(function () { return _this.update(); }));
        this.update();
    }
    Object.defineProperty(InstallAction.prototype, "extension", {
        get: function () { return this._extension; },
        set: function (extension) { this._extension = extension; this.update(); },
        enumerable: true,
        configurable: true
    });
    InstallAction.prototype.update = function () {
        if (!this.extension || this.extension.type === extensionManagement_1.LocalExtensionType.System) {
            this.enabled = false;
            this.class = InstallAction.Class;
            this.label = InstallAction.InstallLabel;
            return;
        }
        this.enabled = this.extensionsWorkbenchService.canInstall(this.extension) && this.extension.state === extensions_1.ExtensionState.Uninstalled;
        if (this.extension.state === extensions_1.ExtensionState.Installing) {
            this.label = InstallAction.InstallingLabel;
            this.class = InstallAction.InstallingClass;
        }
        else {
            this.label = InstallAction.InstallLabel;
            this.class = InstallAction.Class;
        }
    };
    InstallAction.prototype.run = function () {
        return this.extensionsWorkbenchService.install(this.extension);
    };
    InstallAction.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.disposables = lifecycle_1.dispose(this.disposables);
    };
    InstallAction.InstallLabel = nls_1.localize('installAction', "Install");
    InstallAction.InstallingLabel = nls_1.localize('installing', "Installing");
    InstallAction.Class = 'extension-action install';
    InstallAction.InstallingClass = 'extension-action install installing';
    InstallAction = __decorate([
        __param(0, extensions_1.IExtensionsWorkbenchService)
    ], InstallAction);
    return InstallAction;
}(actions_1.Action));
exports.InstallAction = InstallAction;
var UninstallAction = (function (_super) {
    __extends(UninstallAction, _super);
    function UninstallAction(extensionsWorkbenchService, messageService, instantiationService) {
        var _this = this;
        _super.call(this, 'extensions.uninstall', nls_1.localize('uninstall', "Uninstall"), 'extension-action uninstall', false);
        this.extensionsWorkbenchService = extensionsWorkbenchService;
        this.messageService = messageService;
        this.instantiationService = instantiationService;
        this.disposables = [];
        this.disposables.push(this.extensionsWorkbenchService.onChange(function () { return _this.update(); }));
        this.update();
    }
    Object.defineProperty(UninstallAction.prototype, "extension", {
        get: function () { return this._extension; },
        set: function (extension) { this._extension = extension; this.update(); },
        enumerable: true,
        configurable: true
    });
    UninstallAction.prototype.update = function () {
        if (!this.extension) {
            this.enabled = false;
            return;
        }
        if (this.extension.type !== extensionManagement_1.LocalExtensionType.User) {
            this.enabled = false;
            return;
        }
        this.enabled = this.extension.state === extensions_1.ExtensionState.Installed || this.extension.state === extensions_1.ExtensionState.NeedsRestart;
    };
    UninstallAction.prototype.run = function () {
        var _this = this;
        if (!window.confirm(nls_1.localize('deleteSure', "Are you sure you want to uninstall '{0}'?", this.extension.displayName))) {
            return winjs_base_1.TPromise.as(null);
        }
        return this.extensionsWorkbenchService.uninstall(this.extension).then(function () {
            _this.messageService.show(severity_1.default.Info, {
                message: nls_1.localize('postUninstallMessage', "{0} was successfully uninstalled. Restart to deactivate it.", _this.extension.displayName),
                actions: [_this.instantiationService.createInstance(actions_2.ReloadWindowAction, actions_2.ReloadWindowAction.ID, nls_1.localize('restartNow', "Restart Now")), message_1.LaterAction]
            });
        });
    };
    UninstallAction.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.disposables = lifecycle_1.dispose(this.disposables);
    };
    UninstallAction = __decorate([
        __param(0, extensions_1.IExtensionsWorkbenchService),
        __param(1, message_1.IMessageService),
        __param(2, instantiation_1.IInstantiationService)
    ], UninstallAction);
    return UninstallAction;
}(actions_1.Action));
exports.UninstallAction = UninstallAction;
var CombinedInstallAction = (function (_super) {
    __extends(CombinedInstallAction, _super);
    function CombinedInstallAction(instantiationService) {
        _super.call(this, 'extensions.combinedInstall', '', '', false);
        this.disposables = [];
        this.installAction = instantiationService.createInstance(InstallAction);
        this.uninstallAction = instantiationService.createInstance(UninstallAction);
        this.disposables.push(this.installAction, this.uninstallAction);
        this.installAction.onDidChange(this.update, this, this.disposables);
        this.uninstallAction.onDidChange(this.update, this, this.disposables);
        this.update();
    }
    Object.defineProperty(CombinedInstallAction.prototype, "extension", {
        get: function () { return this._extension; },
        set: function (extension) {
            this._extension = extension;
            this.installAction.extension = extension;
            this.uninstallAction.extension = extension;
        },
        enumerable: true,
        configurable: true
    });
    CombinedInstallAction.prototype.update = function () {
        if (!this.extension || this.extension.type === extensionManagement_1.LocalExtensionType.System) {
            this.enabled = false;
            this.class = CombinedInstallAction.NoExtensionClass;
        }
        else if (this.installAction.enabled) {
            this.enabled = true;
            this.label = this.installAction.label;
            this.class = this.installAction.class;
        }
        else if (this.uninstallAction.enabled) {
            this.enabled = true;
            this.label = this.uninstallAction.label;
            this.class = this.uninstallAction.class;
        }
        else if (this.extension.state === extensions_1.ExtensionState.Installing) {
            this.enabled = false;
            this.label = this.installAction.label;
            this.class = this.installAction.class;
        }
        else {
            this.enabled = false;
            this.label = this.installAction.label;
            this.class = this.installAction.class;
        }
    };
    CombinedInstallAction.prototype.run = function () {
        if (this.installAction.enabled) {
            return this.installAction.run();
        }
        else if (this.uninstallAction.enabled) {
            return this.uninstallAction.run();
        }
        return winjs_base_1.TPromise.as(null);
    };
    CombinedInstallAction.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.disposables = lifecycle_1.dispose(this.disposables);
    };
    CombinedInstallAction.NoExtensionClass = 'extension-action install no-extension';
    CombinedInstallAction = __decorate([
        __param(0, instantiation_1.IInstantiationService)
    ], CombinedInstallAction);
    return CombinedInstallAction;
}(actions_1.Action));
exports.CombinedInstallAction = CombinedInstallAction;
var UpdateAction = (function (_super) {
    __extends(UpdateAction, _super);
    function UpdateAction(extensionsWorkbenchService) {
        var _this = this;
        _super.call(this, 'extensions.update', nls_1.localize('updateAction', "Update"), UpdateAction.DisabledClass, false);
        this.extensionsWorkbenchService = extensionsWorkbenchService;
        this.disposables = [];
        this.disposables.push(this.extensionsWorkbenchService.onChange(function () { return _this.update(); }));
        this.update();
    }
    Object.defineProperty(UpdateAction.prototype, "extension", {
        get: function () { return this._extension; },
        set: function (extension) { this._extension = extension; this.update(); },
        enumerable: true,
        configurable: true
    });
    UpdateAction.prototype.update = function () {
        if (!this.extension) {
            this.enabled = false;
            this.class = UpdateAction.DisabledClass;
            return;
        }
        if (this.extension.type !== extensionManagement_1.LocalExtensionType.User) {
            this.enabled = false;
            this.class = UpdateAction.DisabledClass;
            return;
        }
        var canInstall = this.extensionsWorkbenchService.canInstall(this.extension);
        var isInstalled = this.extension.state === extensions_1.ExtensionState.Installed
            || this.extension.state === extensions_1.ExtensionState.NeedsRestart;
        this.enabled = canInstall && isInstalled && this.extension.outdated;
        this.class = this.enabled ? UpdateAction.EnabledClass : UpdateAction.DisabledClass;
    };
    UpdateAction.prototype.run = function () {
        return this.extensionsWorkbenchService.install(this.extension);
    };
    UpdateAction.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.disposables = lifecycle_1.dispose(this.disposables);
    };
    UpdateAction.EnabledClass = 'extension-action update';
    UpdateAction.DisabledClass = UpdateAction.EnabledClass + " disabled";
    UpdateAction = __decorate([
        __param(0, extensions_1.IExtensionsWorkbenchService)
    ], UpdateAction);
    return UpdateAction;
}(actions_1.Action));
exports.UpdateAction = UpdateAction;
var EnableAction = (function (_super) {
    __extends(EnableAction, _super);
    function EnableAction(extensionsWorkbenchService, instantiationService) {
        var _this = this;
        _super.call(this, 'extensions.enable', nls_1.localize('enableAction', "Enable"), EnableAction.DisabledClass, false);
        this.extensionsWorkbenchService = extensionsWorkbenchService;
        this.instantiationService = instantiationService;
        this.disposables = [];
        this.disposables.push(this.extensionsWorkbenchService.onChange(function () { return _this.update(); }));
        this.update();
    }
    Object.defineProperty(EnableAction.prototype, "extension", {
        get: function () { return this._extension; },
        set: function (extension) { this._extension = extension; this.update(); },
        enumerable: true,
        configurable: true
    });
    EnableAction.prototype.update = function () {
        if (!this.extension) {
            this.enabled = false;
            this.class = EnableAction.DisabledClass;
            return;
        }
        this.enabled = this.extension.state === extensions_1.ExtensionState.NeedsRestart;
        this.class = this.enabled ? EnableAction.EnabledClass : EnableAction.DisabledClass;
    };
    EnableAction.prototype.run = function () {
        if (!window.confirm(nls_1.localize('restart', "In order to enable this extension, this window of VS Code needs to be restarted.\n\nDo you want to continue?"))) {
            return winjs_base_1.TPromise.as(null);
        }
        var action = this.instantiationService.createInstance(actions_2.ReloadWindowAction, actions_2.ReloadWindowAction.ID, nls_1.localize('restartNow', "Restart Now"));
        return action.run();
    };
    EnableAction.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.disposables = lifecycle_1.dispose(this.disposables);
    };
    EnableAction.EnabledClass = 'extension-action enable';
    EnableAction.DisabledClass = EnableAction.EnabledClass + " disabled";
    EnableAction = __decorate([
        __param(0, extensions_1.IExtensionsWorkbenchService),
        __param(1, instantiation_1.IInstantiationService)
    ], EnableAction);
    return EnableAction;
}(actions_1.Action));
exports.EnableAction = EnableAction;
var UpdateAllAction = (function (_super) {
    __extends(UpdateAllAction, _super);
    function UpdateAllAction(id, label, extensionsWorkbenchService) {
        var _this = this;
        if (id === void 0) { id = UpdateAllAction.ID; }
        if (label === void 0) { label = UpdateAllAction.LABEL; }
        _super.call(this, id, label, '', false);
        this.extensionsWorkbenchService = extensionsWorkbenchService;
        this.disposables = [];
        this.disposables.push(this.extensionsWorkbenchService.onChange(function () { return _this.update(); }));
        this.update();
    }
    Object.defineProperty(UpdateAllAction.prototype, "outdated", {
        get: function () {
            var _this = this;
            return this.extensionsWorkbenchService.local.filter(function (e) { return _this.extensionsWorkbenchService.canInstall(e)
                && e.type === extensionManagement_1.LocalExtensionType.User
                && (e.state === extensions_1.ExtensionState.Installed || e.state === extensions_1.ExtensionState.NeedsRestart)
                && e.outdated; });
        },
        enumerable: true,
        configurable: true
    });
    UpdateAllAction.prototype.update = function () {
        this.enabled = this.outdated.length > 0;
    };
    UpdateAllAction.prototype.run = function (promptToInstallDependencies) {
        var _this = this;
        if (promptToInstallDependencies === void 0) { promptToInstallDependencies = true; }
        return winjs_base_1.TPromise.join(this.outdated.map(function (e) { return _this.extensionsWorkbenchService.install(e, promptToInstallDependencies); }));
    };
    UpdateAllAction.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.disposables = lifecycle_1.dispose(this.disposables);
    };
    UpdateAllAction.ID = 'workbench.extensions.action.updateAllExtensions';
    UpdateAllAction.LABEL = nls_1.localize('updateAll', "Update All Extensions");
    UpdateAllAction = __decorate([
        __param(2, extensions_1.IExtensionsWorkbenchService)
    ], UpdateAllAction);
    return UpdateAllAction;
}(actions_1.Action));
exports.UpdateAllAction = UpdateAllAction;
var OpenExtensionsViewletAction = (function (_super) {
    __extends(OpenExtensionsViewletAction, _super);
    function OpenExtensionsViewletAction(id, label, viewletService, editorService) {
        _super.call(this, id, label, extensions_1.VIEWLET_ID, viewletService, editorService);
    }
    OpenExtensionsViewletAction.ID = extensions_1.VIEWLET_ID;
    OpenExtensionsViewletAction.LABEL = nls_1.localize('toggleExtensionsViewlet', "Show Extensions");
    OpenExtensionsViewletAction = __decorate([
        __param(2, viewletService_1.IViewletService),
        __param(3, editorService_1.IWorkbenchEditorService)
    ], OpenExtensionsViewletAction);
    return OpenExtensionsViewletAction;
}(viewlet_1.ToggleViewletAction));
exports.OpenExtensionsViewletAction = OpenExtensionsViewletAction;
var InstallExtensionsAction = (function (_super) {
    __extends(InstallExtensionsAction, _super);
    function InstallExtensionsAction() {
        _super.apply(this, arguments);
    }
    InstallExtensionsAction.ID = 'workbench.extensions.action.installExtensions';
    InstallExtensionsAction.LABEL = nls_1.localize('installExtensions', "Install Extensions");
    return InstallExtensionsAction;
}(OpenExtensionsViewletAction));
exports.InstallExtensionsAction = InstallExtensionsAction;
var ShowInstalledExtensionsAction = (function (_super) {
    __extends(ShowInstalledExtensionsAction, _super);
    function ShowInstalledExtensionsAction(id, label, viewletService, extensionsWorkbenchService) {
        _super.call(this, id, label, 'clear-extensions', true);
        this.viewletService = viewletService;
        this.extensionsWorkbenchService = extensionsWorkbenchService;
    }
    ShowInstalledExtensionsAction.prototype.run = function () {
        return this.viewletService.openViewlet(extensions_1.VIEWLET_ID, true)
            .then(function (viewlet) { return viewlet; })
            .then(function (viewlet) {
            viewlet.search('');
            viewlet.focus();
        });
    };
    ShowInstalledExtensionsAction.ID = 'workbench.extensions.action.showInstalledExtensions';
    ShowInstalledExtensionsAction.LABEL = nls_1.localize('showInstalledExtensions', "Show Installed Extensions");
    ShowInstalledExtensionsAction = __decorate([
        __param(2, viewletService_1.IViewletService),
        __param(3, extensions_1.IExtensionsWorkbenchService)
    ], ShowInstalledExtensionsAction);
    return ShowInstalledExtensionsAction;
}(actions_1.Action));
exports.ShowInstalledExtensionsAction = ShowInstalledExtensionsAction;
var ClearExtensionsInputAction = (function (_super) {
    __extends(ClearExtensionsInputAction, _super);
    function ClearExtensionsInputAction(id, label, onSearchChange, viewletService, extensionsWorkbenchService) {
        _super.call(this, id, label, viewletService, extensionsWorkbenchService);
        this.disposables = [];
        this.enabled = false;
        onSearchChange(this.onSearchChange, this, this.disposables);
    }
    ClearExtensionsInputAction.prototype.onSearchChange = function (value) {
        this.enabled = !!value;
    };
    ClearExtensionsInputAction.prototype.dispose = function () {
        this.disposables = lifecycle_1.dispose(this.disposables);
    };
    ClearExtensionsInputAction.ID = 'workbench.extensions.action.clearExtensionsInput';
    ClearExtensionsInputAction.LABEL = nls_1.localize('clearExtensionsInput', "Clear Extensions Input");
    ClearExtensionsInputAction = __decorate([
        __param(3, viewletService_1.IViewletService),
        __param(4, extensions_1.IExtensionsWorkbenchService)
    ], ClearExtensionsInputAction);
    return ClearExtensionsInputAction;
}(ShowInstalledExtensionsAction));
exports.ClearExtensionsInputAction = ClearExtensionsInputAction;
var ShowOutdatedExtensionsAction = (function (_super) {
    __extends(ShowOutdatedExtensionsAction, _super);
    function ShowOutdatedExtensionsAction(id, label, viewletService) {
        _super.call(this, id, label, null, true);
        this.viewletService = viewletService;
    }
    ShowOutdatedExtensionsAction.prototype.run = function () {
        return this.viewletService.openViewlet(extensions_1.VIEWLET_ID, true)
            .then(function (viewlet) { return viewlet; })
            .then(function (viewlet) {
            viewlet.search('@outdated ');
            viewlet.focus();
        });
    };
    ShowOutdatedExtensionsAction.prototype.isEnabled = function () {
        return true;
    };
    ShowOutdatedExtensionsAction.ID = 'workbench.extensions.action.listOutdatedExtensions';
    ShowOutdatedExtensionsAction.LABEL = nls_1.localize('showOutdatedExtensions', "Show Outdated Extensions");
    ShowOutdatedExtensionsAction = __decorate([
        __param(2, viewletService_1.IViewletService)
    ], ShowOutdatedExtensionsAction);
    return ShowOutdatedExtensionsAction;
}(actions_1.Action));
exports.ShowOutdatedExtensionsAction = ShowOutdatedExtensionsAction;
var ShowPopularExtensionsAction = (function (_super) {
    __extends(ShowPopularExtensionsAction, _super);
    function ShowPopularExtensionsAction(id, label, viewletService) {
        _super.call(this, id, label, null, true);
        this.viewletService = viewletService;
    }
    ShowPopularExtensionsAction.prototype.run = function () {
        return this.viewletService.openViewlet(extensions_1.VIEWLET_ID, true)
            .then(function (viewlet) { return viewlet; })
            .then(function (viewlet) {
            viewlet.search('@sort:installs ');
            viewlet.focus();
        });
    };
    ShowPopularExtensionsAction.prototype.isEnabled = function () {
        return true;
    };
    ShowPopularExtensionsAction.ID = 'workbench.extensions.action.showPopularExtensions';
    ShowPopularExtensionsAction.LABEL = nls_1.localize('showPopularExtensions', "Show Popular Extensions");
    ShowPopularExtensionsAction = __decorate([
        __param(2, viewletService_1.IViewletService)
    ], ShowPopularExtensionsAction);
    return ShowPopularExtensionsAction;
}(actions_1.Action));
exports.ShowPopularExtensionsAction = ShowPopularExtensionsAction;
var ShowRecommendedExtensionsAction = (function (_super) {
    __extends(ShowRecommendedExtensionsAction, _super);
    function ShowRecommendedExtensionsAction(id, label, viewletService) {
        _super.call(this, id, label, null, true);
        this.viewletService = viewletService;
    }
    ShowRecommendedExtensionsAction.prototype.run = function () {
        return this.viewletService.openViewlet(extensions_1.VIEWLET_ID, true)
            .then(function (viewlet) { return viewlet; })
            .then(function (viewlet) {
            viewlet.search('@recommended ');
            viewlet.focus();
        });
    };
    ShowRecommendedExtensionsAction.prototype.isEnabled = function () {
        return true;
    };
    ShowRecommendedExtensionsAction.ID = 'workbench.extensions.action.showRecommendedExtensions';
    ShowRecommendedExtensionsAction.LABEL = nls_1.localize('showRecommendedExtensions', "Show Recommended Extensions");
    ShowRecommendedExtensionsAction = __decorate([
        __param(2, viewletService_1.IViewletService)
    ], ShowRecommendedExtensionsAction);
    return ShowRecommendedExtensionsAction;
}(actions_1.Action));
exports.ShowRecommendedExtensionsAction = ShowRecommendedExtensionsAction;
var ShowWorkspaceRecommendedExtensionsAction = (function (_super) {
    __extends(ShowWorkspaceRecommendedExtensionsAction, _super);
    function ShowWorkspaceRecommendedExtensionsAction(id, label, viewletService) {
        _super.call(this, id, label, null, true);
        this.viewletService = viewletService;
    }
    ShowWorkspaceRecommendedExtensionsAction.prototype.run = function () {
        return this.viewletService.openViewlet(extensions_1.VIEWLET_ID, true)
            .then(function (viewlet) { return viewlet; })
            .then(function (viewlet) {
            viewlet.search('@recommended:workspace ');
            viewlet.focus();
        });
    };
    ShowWorkspaceRecommendedExtensionsAction.prototype.isEnabled = function () {
        return true;
    };
    ShowWorkspaceRecommendedExtensionsAction.ID = 'workbench.extensions.action.showWorkspaceRecommendedExtensions';
    ShowWorkspaceRecommendedExtensionsAction.LABEL = nls_1.localize('showWorkspaceRecommendedExtensions', "Show Workspace Recommended Extensions");
    ShowWorkspaceRecommendedExtensionsAction = __decorate([
        __param(2, viewletService_1.IViewletService)
    ], ShowWorkspaceRecommendedExtensionsAction);
    return ShowWorkspaceRecommendedExtensionsAction;
}(actions_1.Action));
exports.ShowWorkspaceRecommendedExtensionsAction = ShowWorkspaceRecommendedExtensionsAction;
var ChangeSortAction = (function (_super) {
    __extends(ChangeSortAction, _super);
    function ChangeSortAction(id, label, onSearchChange, sortBy, sortOrder, viewletService) {
        _super.call(this, id, label, null, true);
        this.sortBy = sortBy;
        this.sortOrder = sortOrder;
        this.viewletService = viewletService;
        this.disposables = [];
        if (sortBy === undefined && sortOrder === undefined) {
            throw new Error('bad arguments');
        }
        this.query = extensionQuery_1.Query.parse('');
        this.enabled = false;
        onSearchChange(this.onSearchChange, this, this.disposables);
    }
    ChangeSortAction.prototype.onSearchChange = function (value) {
        var query = extensionQuery_1.Query.parse(value);
        this.query = new extensionQuery_1.Query(query.value, this.sortBy || query.sortBy, this.sortOrder || query.sortOrder);
        this.enabled = value && this.query.isValid() && !this.query.equals(query);
    };
    ChangeSortAction.prototype.run = function () {
        var _this = this;
        return this.viewletService.openViewlet(extensions_1.VIEWLET_ID, true)
            .then(function (viewlet) { return viewlet; })
            .then(function (viewlet) {
            viewlet.search(_this.query.toString());
            viewlet.focus();
        });
    };
    ChangeSortAction.prototype.isEnabled = function () {
        return true;
    };
    ChangeSortAction = __decorate([
        __param(5, viewletService_1.IViewletService)
    ], ChangeSortAction);
    return ChangeSortAction;
}(actions_1.Action));
exports.ChangeSortAction = ChangeSortAction;
var OpenExtensionsFolderAction = (function (_super) {
    __extends(OpenExtensionsFolderAction, _super);
    function OpenExtensionsFolderAction(id, label, environmentService) {
        _super.call(this, id, label, null, true);
        this.environmentService = environmentService;
    }
    OpenExtensionsFolderAction.prototype.run = function () {
        var extensionsHome = this.environmentService.extensionsPath;
        electron_1.shell.showItemInFolder(paths.normalize(extensionsHome, true));
        return winjs_base_1.TPromise.as(true);
    };
    OpenExtensionsFolderAction.prototype.isEnabled = function () {
        return true;
    };
    OpenExtensionsFolderAction.ID = 'workbench.extensions.action.openExtensionsFolder';
    OpenExtensionsFolderAction.LABEL = nls_1.localize('openExtensionsFolder', "Open Extensions Folder");
    OpenExtensionsFolderAction = __decorate([
        __param(2, environment_1.IEnvironmentService)
    ], OpenExtensionsFolderAction);
    return OpenExtensionsFolderAction;
}(actions_1.Action));
exports.OpenExtensionsFolderAction = OpenExtensionsFolderAction;
var ConfigureWorkspaceRecommendedExtensionsAction = (function (_super) {
    __extends(ConfigureWorkspaceRecommendedExtensionsAction, _super);
    function ConfigureWorkspaceRecommendedExtensionsAction(id, label, fileService, contextService, extensionsService, editorService, messageService) {
        _super.call(this, id, label, null, true);
        this.fileService = fileService;
        this.contextService = contextService;
        this.extensionsService = extensionsService;
        this.editorService = editorService;
        this.messageService = messageService;
    }
    ConfigureWorkspaceRecommendedExtensionsAction.prototype.run = function (event) {
        return this.openExtensionsFile();
    };
    ConfigureWorkspaceRecommendedExtensionsAction.prototype.openExtensionsFile = function () {
        var _this = this;
        if (!this.contextService.getWorkspace()) {
            this.messageService.show(severity_1.default.Info, nls_1.localize('ConfigureWorkspaceRecommendations.noWorkspace', 'Recommendations are only available on a workspace folder.'));
            return winjs_base_1.TPromise.as(undefined);
        }
        return this.getOrCreateExtensionsFile().then(function (value) {
            return _this.editorService.openEditor({
                resource: value.extensionsFileResource,
                options: {
                    forceOpen: true,
                    pinned: value.created
                },
            });
        }, function (error) { return winjs_base_1.TPromise.wrapError(new Error(nls_1.localize('OpenExtensionsFile.failed', "Unable to create 'extensions.json' file inside the '.vscode' folder ({0}).", error))); });
    };
    ConfigureWorkspaceRecommendedExtensionsAction.prototype.getOrCreateExtensionsFile = function () {
        var _this = this;
        var extensionsFileResource = uri_1.default.file(paths.join(this.contextService.getWorkspace().resource.fsPath, '.vscode', extensions_1.ConfigurationKey + ".json"));
        return this.fileService.resolveContent(extensionsFileResource).then(function (content) {
            return { created: false, extensionsFileResource: extensionsFileResource };
        }, function (err) {
            return _this.fileService.updateContent(extensionsFileResource, extensionsFileTemplate_1.InitialContent).then(function () {
                return { created: true, extensionsFileResource: extensionsFileResource };
            });
        });
    };
    ConfigureWorkspaceRecommendedExtensionsAction.ID = 'workbench.extensions.action.configureWorkspaceRecommendedExtensions';
    ConfigureWorkspaceRecommendedExtensionsAction.LABEL = nls_1.localize('configureWorkspaceRecommendedExtensions', "Configure Workspace Recommended Extensions");
    ConfigureWorkspaceRecommendedExtensionsAction = __decorate([
        __param(2, files_1.IFileService),
        __param(3, workspace_1.IWorkspaceContextService),
        __param(4, extensions_1.IExtensionsWorkbenchService),
        __param(5, editorService_1.IWorkbenchEditorService),
        __param(6, message_1.IMessageService)
    ], ConfigureWorkspaceRecommendedExtensionsAction);
    return ConfigureWorkspaceRecommendedExtensionsAction;
}(actions_1.Action));
exports.ConfigureWorkspaceRecommendedExtensionsAction = ConfigureWorkspaceRecommendedExtensionsAction;
var InstallVSIXAction = (function (_super) {
    __extends(InstallVSIXAction, _super);
    function InstallVSIXAction(id, label, extensionsWorkbenchService) {
        if (id === void 0) { id = InstallVSIXAction.ID; }
        if (label === void 0) { label = InstallVSIXAction.LABEL; }
        _super.call(this, id, label, 'extension-action install-vsix', true);
        this.extensionsWorkbenchService = extensionsWorkbenchService;
    }
    InstallVSIXAction.prototype.run = function () {
        var _this = this;
        var result = dialog.showOpenDialog(electron_1.remote.getCurrentWindow(), {
            filters: [{ name: 'VSIX Extensions', extensions: ['vsix'] }],
            properties: ['openFile']
        });
        if (!result) {
            return winjs_base_1.TPromise.as(null);
        }
        return winjs_base_1.TPromise.join(result.map(function (vsix) { return _this.extensionsWorkbenchService.install(vsix); }));
    };
    InstallVSIXAction.ID = 'workbench.extensions.action.installVSIX';
    InstallVSIXAction.LABEL = nls_1.localize('installVSIX', "Install from VSIX...");
    InstallVSIXAction = __decorate([
        __param(2, extensions_1.IExtensionsWorkbenchService)
    ], InstallVSIXAction);
    return InstallVSIXAction;
}(actions_1.Action));
exports.InstallVSIXAction = InstallVSIXAction;
var BuiltinStatusLabelAction = (function (_super) {
    __extends(BuiltinStatusLabelAction, _super);
    function BuiltinStatusLabelAction() {
        _super.call(this, 'extensions.install', nls_1.localize('builtin', "Built-in"), '', false);
    }
    Object.defineProperty(BuiltinStatusLabelAction.prototype, "extension", {
        get: function () { return this._extension; },
        set: function (extension) { this._extension = extension; this.update(); },
        enumerable: true,
        configurable: true
    });
    BuiltinStatusLabelAction.prototype.update = function () {
        if (this.extension && this.extension.type === extensionManagement_1.LocalExtensionType.System) {
            this.class = BuiltinStatusLabelAction.Class + " system";
        }
        else {
            this.class = BuiltinStatusLabelAction.Class + " user";
        }
    };
    BuiltinStatusLabelAction.prototype.run = function () {
        return winjs_base_1.TPromise.as(null);
    };
    BuiltinStatusLabelAction.Class = 'extension-action built-in-status';
    return BuiltinStatusLabelAction;
}(actions_1.Action));
exports.BuiltinStatusLabelAction = BuiltinStatusLabelAction;
