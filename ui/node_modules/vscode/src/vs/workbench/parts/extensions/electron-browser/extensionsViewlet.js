/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
require('./media/extensionsViewlet.css');
var nls_1 = require('vs/nls');
var async_1 = require('vs/base/common/async');
var winjs_base_1 = require('vs/base/common/winjs.base');
var errors_1 = require('vs/base/common/errors');
var lifecycle_1 = require('vs/base/common/lifecycle');
var objects_1 = require('vs/base/common/objects');
var event_1 = require('vs/base/common/event');
var event_2 = require('vs/base/browser/event');
var actionbar_1 = require('vs/base/browser/ui/actionbar/actionbar');
var keyboardEvent_1 = require('vs/base/browser/keyboardEvent');
var viewlet_1 = require('vs/workbench/browser/viewlet');
var viewletService_1 = require('vs/workbench/services/viewlet/common/viewletService');
var dom_1 = require('vs/base/browser/dom');
var paging_1 = require('vs/base/common/paging');
var telemetry_1 = require('vs/platform/telemetry/common/telemetry');
var listPaging_1 = require('vs/base/browser/ui/list/listPaging');
var instantiation_1 = require('vs/platform/instantiation/common/instantiation');
var extensionsList_1 = require('./extensionsList');
var extensions_1 = require('./extensions');
var extensionsActions_1 = require('./extensionsActions');
var extensionManagement_1 = require('vs/platform/extensionManagement/common/extensionManagement');
var extensionsInput_1 = require('./extensionsInput');
var extensionQuery_1 = require('../common/extensionQuery');
var openSettings_1 = require('vs/workbench/browser/actions/openSettings');
var progress_1 = require('vs/platform/progress/common/progress');
var editorService_1 = require('vs/workbench/services/editor/common/editorService');
var groupService_1 = require('vs/workbench/services/group/common/groupService');
var message_1 = require('vs/platform/message/common/message');
var severity_1 = require('vs/base/common/severity');
var activityService_1 = require('vs/workbench/services/activity/common/activityService');
var ExtensionsViewlet = (function (_super) {
    __extends(ExtensionsViewlet, _super);
    function ExtensionsViewlet(telemetryService, galleryService, extensionService, progressService, instantiationService, editorService, editorInputService, extensionsWorkbenchService, tipsService, messageService, viewletService) {
        _super.call(this, extensions_1.VIEWLET_ID, telemetryService);
        this.galleryService = galleryService;
        this.extensionService = extensionService;
        this.progressService = progressService;
        this.instantiationService = instantiationService;
        this.editorService = editorService;
        this.editorInputService = editorInputService;
        this.extensionsWorkbenchService = extensionsWorkbenchService;
        this.tipsService = tipsService;
        this.messageService = messageService;
        this.viewletService = viewletService;
        this.disposables = [];
        this.searchDelayer = new async_1.ThrottledDelayer(500);
        this.disposables.push(viewletService.onDidViewletOpen(this.onViewletOpen, this, this.disposables));
    }
    ExtensionsViewlet.prototype.create = function (parent) {
        var _this = this;
        _super.prototype.create.call(this, parent);
        parent.addClass('extensions-viewlet');
        this.root = parent.getHTMLElement();
        var header = dom_1.append(this.root, dom_1.$('.header'));
        this.searchBox = dom_1.append(header, dom_1.$('input.search-box'));
        this.searchBox.placeholder = nls_1.localize('searchExtensions', "Search Extensions in Marketplace");
        this.disposables.push(dom_1.addStandardDisposableListener(this.searchBox, dom_1.EventType.FOCUS, function () { return dom_1.addClass(_this.searchBox, 'synthetic-focus'); }));
        this.disposables.push(dom_1.addStandardDisposableListener(this.searchBox, dom_1.EventType.BLUR, function () { return dom_1.removeClass(_this.searchBox, 'synthetic-focus'); }));
        this.extensionsBox = dom_1.append(this.root, dom_1.$('.extensions'));
        this.messageBox = dom_1.append(this.root, dom_1.$('.message'));
        var delegate = new extensionsList_1.Delegate();
        var renderer = this.instantiationService.createInstance(extensionsList_1.Renderer);
        this.list = new listPaging_1.PagedList(this.extensionsBox, delegate, [renderer]);
        var onKeyDown = event_1.chain(event_2.domEvent(this.searchBox, 'keydown'))
            .map(function (e) { return new keyboardEvent_1.StandardKeyboardEvent(e); });
        onKeyDown.filter(function (e) { return e.keyCode === 3 /* Enter */; }).on(this.onEnter, this, this.disposables);
        onKeyDown.filter(function (e) { return e.keyCode === 9 /* Escape */; }).on(this.onEscape, this, this.disposables);
        onKeyDown.filter(function (e) { return e.keyCode === 16 /* UpArrow */; }).on(this.onUpArrow, this, this.disposables);
        onKeyDown.filter(function (e) { return e.keyCode === 18 /* DownArrow */; }).on(this.onDownArrow, this, this.disposables);
        onKeyDown.filter(function (e) { return e.keyCode === 11 /* PageUp */; }).on(this.onPageUpArrow, this, this.disposables);
        onKeyDown.filter(function (e) { return e.keyCode === 12 /* PageDown */; }).on(this.onPageDownArrow, this, this.disposables);
        var onSearchInput = event_2.domEvent(this.searchBox, 'input');
        onSearchInput(function (e) { return _this.triggerSearch(e.target.value, e.immediate); }, null, this.disposables);
        this.onSearchChange = event_1.mapEvent(onSearchInput, function (e) { return e.target.value; });
        event_1.chain(this.list.onSelectionChange)
            .map(function (e) { return e.elements[0]; })
            .filter(function (e) { return !!e; })
            .on(this.openExtension, this, this.disposables);
        return winjs_base_1.TPromise.as(null);
    };
    ExtensionsViewlet.prototype.setVisible = function (visible) {
        var _this = this;
        return _super.prototype.setVisible.call(this, visible).then(function () {
            if (visible) {
                _this.searchBox.focus();
                _this.searchBox.setSelectionRange(0, _this.searchBox.value.length);
                _this.triggerSearch(_this.searchBox.value, true, true);
            }
            else {
                _this.setModel(new paging_1.PagedModel([]));
            }
        });
    };
    ExtensionsViewlet.prototype.focus = function () {
        this.searchBox.focus();
    };
    ExtensionsViewlet.prototype.layout = function (_a) {
        var height = _a.height, width = _a.width;
        this.list.layout(height - 38);
        dom_1.toggleClass(this.root, 'narrow', width <= 300);
    };
    ExtensionsViewlet.prototype.getOptimalWidth = function () {
        return 400;
    };
    ExtensionsViewlet.prototype.getActions = function () {
        if (!this.primaryActions) {
            this.primaryActions = [
                this.instantiationService.createInstance(extensionsActions_1.ClearExtensionsInputAction, extensionsActions_1.ClearExtensionsInputAction.ID, extensionsActions_1.ClearExtensionsInputAction.LABEL, this.onSearchChange)
            ];
        }
        return this.primaryActions;
    };
    ExtensionsViewlet.prototype.getSecondaryActions = function () {
        if (!this.secondaryActions) {
            this.secondaryActions = [
                this.instantiationService.createInstance(extensionsActions_1.UpdateAllAction, extensionsActions_1.UpdateAllAction.ID, extensionsActions_1.UpdateAllAction.LABEL),
                new actionbar_1.Separator(),
                this.instantiationService.createInstance(extensionsActions_1.ShowInstalledExtensionsAction, extensionsActions_1.ShowInstalledExtensionsAction.ID, extensionsActions_1.ShowInstalledExtensionsAction.LABEL),
                this.instantiationService.createInstance(extensionsActions_1.ShowOutdatedExtensionsAction, extensionsActions_1.ShowOutdatedExtensionsAction.ID, extensionsActions_1.ShowOutdatedExtensionsAction.LABEL),
                this.instantiationService.createInstance(extensionsActions_1.ShowRecommendedExtensionsAction, extensionsActions_1.ShowRecommendedExtensionsAction.ID, extensionsActions_1.ShowRecommendedExtensionsAction.LABEL),
                this.instantiationService.createInstance(extensionsActions_1.ShowWorkspaceRecommendedExtensionsAction, extensionsActions_1.ShowWorkspaceRecommendedExtensionsAction.ID, extensionsActions_1.ShowWorkspaceRecommendedExtensionsAction.LABEL),
                this.instantiationService.createInstance(extensionsActions_1.ShowPopularExtensionsAction, extensionsActions_1.ShowPopularExtensionsAction.ID, extensionsActions_1.ShowPopularExtensionsAction.LABEL),
                new actionbar_1.Separator(),
                this.instantiationService.createInstance(extensionsActions_1.ChangeSortAction, 'extensions.sort.install', nls_1.localize('sort by installs', "Sort By: Install Count"), this.onSearchChange, 'installs', undefined),
                this.instantiationService.createInstance(extensionsActions_1.ChangeSortAction, 'extensions.sort.rating', nls_1.localize('sort by rating', "Sort By: Rating"), this.onSearchChange, 'rating', undefined),
                new actionbar_1.Separator(),
                this.instantiationService.createInstance(extensionsActions_1.ChangeSortAction, 'extensions.sort..asc', nls_1.localize('ascending', "Sort Order: ↑"), this.onSearchChange, undefined, 'asc'),
                this.instantiationService.createInstance(extensionsActions_1.ChangeSortAction, 'extensions.sort..desc', nls_1.localize('descending', "Sort Order: ↓"), this.onSearchChange, undefined, 'desc'),
                new actionbar_1.Separator(),
                this.instantiationService.createInstance(extensionsActions_1.InstallVSIXAction, extensionsActions_1.InstallVSIXAction.ID, extensionsActions_1.InstallVSIXAction.LABEL),
                this.instantiationService.createInstance(extensionsActions_1.ConfigureWorkspaceRecommendedExtensionsAction, extensionsActions_1.ConfigureWorkspaceRecommendedExtensionsAction.ID, extensionsActions_1.ConfigureWorkspaceRecommendedExtensionsAction.LABEL)
            ];
        }
        return this.secondaryActions;
    };
    ExtensionsViewlet.prototype.setModel = function (model) {
        this.list.model = model;
        this.list.scrollTop = 0;
        dom_1.toggleClass(this.extensionsBox, 'hidden', model.length === 0);
        dom_1.toggleClass(this.messageBox, 'hidden', model.length > 0);
        if (model.length === 0 && this.isVisible()) {
            this.messageBox.textContent = nls_1.localize('no extensions found', "No extensions found.");
        }
        else {
            this.messageBox.textContent = '';
        }
    };
    ExtensionsViewlet.prototype.search = function (value) {
        var event = new Event('input', { bubbles: true });
        event.immediate = true;
        this.searchBox.value = value;
        this.searchBox.dispatchEvent(event);
    };
    ExtensionsViewlet.prototype.triggerSearch = function (value, immediate, suggestPopular) {
        var _this = this;
        if (immediate === void 0) { immediate = false; }
        if (suggestPopular === void 0) { suggestPopular = false; }
        this.searchDelayer.trigger(function () { return _this.doSearch(value, suggestPopular); }, immediate || !value ? 0 : 500)
            .done(null, function (err) { return _this.onError(err); });
    };
    ExtensionsViewlet.prototype.doSearch = function (value, suggestPopular) {
        var _this = this;
        if (value === void 0) { value = ''; }
        if (suggestPopular === void 0) { suggestPopular = false; }
        return this.progress(this.query(value))
            .then(function (model) {
            if (!value && model.length === 0 && suggestPopular) {
                return _this.search('@sort:installs');
            }
            _this.setModel(model);
        });
    };
    ExtensionsViewlet.prototype.query = function (value) {
        if (!value) {
            // Show installed extensions
            return this.extensionsWorkbenchService.queryLocal()
                .then(function (result) { return result.filter(function (e) { return e.type === extensionManagement_1.LocalExtensionType.User; }); })
                .then(function (result) { return new paging_1.PagedModel(result); });
        }
        if (/@outdated/i.test(value)) {
            return this.extensionsWorkbenchService.queryLocal()
                .then(function (extensions) { return extensions.filter(function (extension) { return extension.outdated; }); })
                .then(function (result) { return new paging_1.PagedModel(result); });
        }
        var query = extensionQuery_1.Query.parse(value);
        var options = {};
        switch (query.sortBy) {
            case 'installs':
                options = objects_1.assign(options, { sortBy: extensionManagement_1.SortBy.InstallCount });
                break;
            case 'rating':
                options = objects_1.assign(options, { sortBy: extensionManagement_1.SortBy.AverageRating });
                break;
        }
        switch (query.sortOrder) {
            case 'asc':
                options = objects_1.assign(options, { sortOrder: extensionManagement_1.SortOrder.Ascending });
                break;
            case 'desc':
                options = objects_1.assign(options, { sortOrder: extensionManagement_1.SortOrder.Descending });
                break;
        }
        if (/@recommended:workspace/i.test(query.value)) {
            return this.getWorkspaceRecommendationsModel(query, options);
        }
        else if (/@recommended/i.test(query.value)) {
            return this.getRecommendationsModel(query, options);
        }
        if (query.value) {
            options = objects_1.assign(options, { text: query.value.substr(0, 200) });
        }
        return this.extensionsWorkbenchService.queryGallery(options)
            .then(function (result) { return new paging_1.PagedModel(result); });
    };
    ExtensionsViewlet.prototype.getRecommendationsModel = function (query, options) {
        var _this = this;
        var value = query.value.replace(/@recommended/g, '').trim().toLowerCase();
        return this.extensionsWorkbenchService.queryLocal()
            .then(function (result) { return result.filter(function (e) { return e.type === extensionManagement_1.LocalExtensionType.User; }); })
            .then(function (local) {
            var names = _this.tipsService.getRecommendations()
                .filter(function (name) { return local.every(function (ext) { return ext.publisher + "." + ext.name !== name; }); })
                .filter(function (name) { return name.toLowerCase().indexOf(value) > -1; });
            _this.telemetryService.publicLog('extensionRecommendations:open', { count: names.length });
            if (!names.length) {
                return winjs_base_1.TPromise.as(new paging_1.PagedModel([]));
            }
            return _this.extensionsWorkbenchService.queryGallery(objects_1.assign(options, { names: names, pageSize: names.length }))
                .then(function (result) { return new paging_1.PagedModel(result); });
        });
    };
    ExtensionsViewlet.prototype.getWorkspaceRecommendationsModel = function (query, options) {
        var value = query.value.replace(/@recommended:workspace/g, '').trim().toLowerCase();
        var names = this.tipsService.getWorkspaceRecommendations()
            .filter(function (name) { return name.toLowerCase().indexOf(value) > -1; });
        this.telemetryService.publicLog('extensionWorkspaceRecommendations:open', { count: names.length });
        if (!names.length) {
            return winjs_base_1.TPromise.as(new paging_1.PagedModel([]));
        }
        return this.extensionsWorkbenchService.queryGallery(objects_1.assign(options, { names: names, pageSize: names.length }))
            .then(function (result) { return new paging_1.PagedModel(result); });
    };
    ExtensionsViewlet.prototype.openExtension = function (extension) {
        var _this = this;
        this.extensionsWorkbenchService.open(extension).done(null, function (err) { return _this.onError(err); });
    };
    ExtensionsViewlet.prototype.onEnter = function () {
        (_a = this.list).setSelection.apply(_a, this.list.getFocus());
        var _a;
    };
    ExtensionsViewlet.prototype.onEscape = function () {
        this.search('');
    };
    ExtensionsViewlet.prototype.onUpArrow = function () {
        this.list.focusPrevious();
        this.list.reveal(this.list.getFocus()[0]);
    };
    ExtensionsViewlet.prototype.onDownArrow = function () {
        this.list.focusNext();
        this.list.reveal(this.list.getFocus()[0]);
    };
    ExtensionsViewlet.prototype.onPageUpArrow = function () {
        this.list.focusPreviousPage();
        this.list.reveal(this.list.getFocus()[0]);
    };
    ExtensionsViewlet.prototype.onPageDownArrow = function () {
        this.list.focusNextPage();
        this.list.reveal(this.list.getFocus()[0]);
    };
    ExtensionsViewlet.prototype.progress = function (promise) {
        var progressRunner = this.progressService.show(true);
        return async_1.always(promise, function () { return progressRunner.done(); });
    };
    ExtensionsViewlet.prototype.onViewletOpen = function (viewlet) {
        var _this = this;
        if (!viewlet || viewlet.getId() === extensions_1.VIEWLET_ID) {
            return;
        }
        var model = this.editorInputService.getStacksModel();
        var promises = model.groups.map(function (group) {
            var position = model.positionOfGroup(group);
            var inputs = group.getEditors().filter(function (input) { return input instanceof extensionsInput_1.ExtensionsInput; });
            var promises = inputs.map(function (input) { return _this.editorService.closeEditor(position, input); });
            return winjs_base_1.TPromise.join(promises);
        });
        winjs_base_1.TPromise.join(promises).done(null, errors_1.onUnexpectedError);
    };
    ExtensionsViewlet.prototype.onError = function (err) {
        if (errors_1.isPromiseCanceledError(err)) {
            return;
        }
        var message = err && err.message || '';
        if (/ECONNREFUSED/.test(message)) {
            var error = errors_1.create(nls_1.localize('suggestProxyError', "Marketplace returned 'ECONNREFUSED'. Please check the 'http.proxy' setting."), {
                actions: [
                    this.instantiationService.createInstance(openSettings_1.OpenGlobalSettingsAction, openSettings_1.OpenGlobalSettingsAction.ID, openSettings_1.OpenGlobalSettingsAction.LABEL),
                    message_1.CloseAction
                ]
            });
            this.messageService.show(severity_1.default.Error, error);
            return;
        }
        this.messageService.show(severity_1.default.Error, err);
    };
    ExtensionsViewlet.prototype.dispose = function () {
        this.disposables = lifecycle_1.dispose(this.disposables);
        _super.prototype.dispose.call(this);
    };
    ExtensionsViewlet = __decorate([
        __param(0, telemetry_1.ITelemetryService),
        __param(1, extensionManagement_1.IExtensionGalleryService),
        __param(2, extensionManagement_1.IExtensionManagementService),
        __param(3, progress_1.IProgressService),
        __param(4, instantiation_1.IInstantiationService),
        __param(5, editorService_1.IWorkbenchEditorService),
        __param(6, groupService_1.IEditorGroupService),
        __param(7, extensions_1.IExtensionsWorkbenchService),
        __param(8, extensionManagement_1.IExtensionTipsService),
        __param(9, message_1.IMessageService),
        __param(10, viewletService_1.IViewletService)
    ], ExtensionsViewlet);
    return ExtensionsViewlet;
}(viewlet_1.Viewlet));
exports.ExtensionsViewlet = ExtensionsViewlet;
var StatusUpdater = (function () {
    function StatusUpdater(activityService, extensionsWorkbenchService) {
        this.activityService = activityService;
        this.extensionsWorkbenchService = extensionsWorkbenchService;
        extensionsWorkbenchService.onChange(this.onServiceChange, this, this.disposables);
    }
    StatusUpdater.prototype.getId = function () {
        return 'vs.extensions.statusupdater';
    };
    StatusUpdater.prototype.onServiceChange = function () {
        if (this.extensionsWorkbenchService.local.some(function (e) { return e.state === extensions_1.ExtensionState.Installing; })) {
            this.activityService.showActivity(extensions_1.VIEWLET_ID, new activityService_1.ProgressBadge(function () { return nls_1.localize('extensions', 'Extensions'); }), 'extensions-badge progress-badge');
            return;
        }
        var outdated = this.extensionsWorkbenchService.local.reduce(function (r, e) { return r + (e.outdated ? 1 : 0); }, 0);
        if (outdated > 0) {
            var badge = new activityService_1.NumberBadge(outdated, function (n) { return nls_1.localize('outdatedExtensions', '{0} Outdated Extensions', n); });
            this.activityService.showActivity(extensions_1.VIEWLET_ID, badge, 'extensions-badge count-badge');
        }
        else {
            this.activityService.showActivity(extensions_1.VIEWLET_ID, null, 'extensions-badge');
        }
    };
    StatusUpdater.prototype.dispose = function () {
        this.disposables = lifecycle_1.dispose(this.disposables);
    };
    StatusUpdater = __decorate([
        __param(0, activityService_1.IActivityService),
        __param(1, extensions_1.IExtensionsWorkbenchService)
    ], StatusUpdater);
    return StatusUpdater;
}());
exports.StatusUpdater = StatusUpdater;
