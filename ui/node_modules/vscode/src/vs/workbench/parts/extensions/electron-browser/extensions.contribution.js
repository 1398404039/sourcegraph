/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
require("./media/extensions.css");
var nls_1 = require("vs/nls");
var errors = require("vs/base/common/errors");
var keyCodes_1 = require("vs/base/common/keyCodes");
var platform_1 = require("vs/platform/platform");
var actions_1 = require("vs/platform/actions/common/actions");
var extensions_1 = require("vs/platform/instantiation/common/extensions");
var extensionManagement_1 = require("vs/platform/extensionManagement/common/extensionManagement");
var extensionGalleryService_1 = require("vs/platform/extensionManagement/node/extensionGalleryService");
var actionRegistry_1 = require("vs/workbench/common/actionRegistry");
var extensionTipsService_1 = require("vs/workbench/parts/extensions/browser/extensionTipsService");
var contributions_1 = require("vs/workbench/common/contributions");
var output_1 = require("vs/workbench/parts/output/common/output");
var baseEditor_1 = require("vs/workbench/browser/parts/editor/baseEditor");
var editor_1 = require("vs/workbench/common/editor");
var descriptors_1 = require("vs/platform/instantiation/common/descriptors");
var extensions_2 = require("../common/extensions");
var extensionsWorkbenchService_1 = require("vs/workbench/parts/extensions/node/extensionsWorkbenchService");
var extensionsActions_1 = require("vs/workbench/parts/extensions/browser/extensionsActions");
var extensionsActions_2 = require("vs/workbench/parts/extensions/electron-browser/extensionsActions");
var extensionsInput_1 = require("vs/workbench/parts/extensions/common/extensionsInput");
var viewlet_1 = require("vs/workbench/browser/viewlet");
var extensionEditor_1 = require("vs/workbench/parts/extensions/browser/extensionEditor");
var extensionsViewlet_1 = require("vs/workbench/parts/extensions/electron-browser/extensionsViewlet");
var quickopen_1 = require("vs/workbench/browser/quickopen");
var configurationRegistry_1 = require("vs/platform/configuration/common/configurationRegistry");
var jsonContributionRegistry = require("vs/platform/jsonschemas/common/jsonContributionRegistry");
var extensionsFileTemplate_1 = require("vs/workbench/parts/extensions/common/extensionsFileTemplate");
var commands_1 = require("vs/platform/commands/common/commands");
// Singletons
extensions_1.registerSingleton(extensionManagement_1.IExtensionGalleryService, extensionGalleryService_1.ExtensionGalleryService);
extensions_1.registerSingleton(extensionManagement_1.IExtensionTipsService, extensionTipsService_1.ExtensionTipsService);
extensions_1.registerSingleton(extensions_2.IExtensionsWorkbenchService, extensionsWorkbenchService_1.ExtensionsWorkbenchService);
platform_1.Registry.as(contributions_1.Extensions.Workbench)
    .registerWorkbenchContribution(extensionsViewlet_1.StatusUpdater);
platform_1.Registry.as(output_1.Extensions.OutputChannels)
    .registerChannel(extensionManagement_1.ExtensionsChannelId, extensionManagement_1.ExtensionsLabel);
// Quickopen
platform_1.Registry.as(quickopen_1.Extensions.Quickopen).registerQuickOpenHandler(new quickopen_1.QuickOpenHandlerDescriptor('vs/workbench/parts/extensions/browser/extensionsQuickOpen', 'ExtensionsHandler', 'ext ', nls_1.localize('extensionsCommands', "Manage Extensions"), true));
platform_1.Registry.as(quickopen_1.Extensions.Quickopen).registerQuickOpenHandler(new quickopen_1.QuickOpenHandlerDescriptor('vs/workbench/parts/extensions/browser/extensionsQuickOpen', 'GalleryExtensionsHandler', 'ext install ', nls_1.localize('galleryExtensionsCommands', "Install Gallery Extensions"), true));
// Editor
var editorDescriptor = new baseEditor_1.EditorDescriptor(extensionEditor_1.ExtensionEditor.ID, nls_1.localize('extension', "Extension"), 'vs/workbench/parts/extensions/browser/extensionEditor', 'ExtensionEditor');
platform_1.Registry.as(editor_1.Extensions.Editors)
    .registerEditor(editorDescriptor, [new descriptors_1.SyncDescriptor(extensionsInput_1.ExtensionsInput)]);
// Viewlet
var viewletDescriptor = new viewlet_1.ViewletDescriptor('vs/workbench/parts/extensions/electron-browser/extensionsViewlet', 'ExtensionsViewlet', extensions_2.VIEWLET_ID, nls_1.localize('extensions', "Extensions"), 'extensions', 100);
platform_1.Registry.as(viewlet_1.Extensions.Viewlets)
    .registerViewlet(viewletDescriptor);
// Global actions
var actionRegistry = platform_1.Registry.as(actionRegistry_1.Extensions.WorkbenchActions);
var openViewletActionDescriptor = new actions_1.SyncActionDescriptor(extensionsActions_1.OpenExtensionsViewletAction, extensionsActions_1.OpenExtensionsViewletAction.ID, extensionsActions_1.OpenExtensionsViewletAction.LABEL, { primary: 32768 /* CtrlCmd */ | 16384 /* Shift */ | 54 /* KEY_X */ });
actionRegistry.registerWorkbenchAction(openViewletActionDescriptor, 'View: Show Extensions', nls_1.localize('view', "View"));
var installActionDescriptor = new actions_1.SyncActionDescriptor(extensionsActions_1.InstallExtensionsAction, extensionsActions_1.InstallExtensionsAction.ID, extensionsActions_1.InstallExtensionsAction.LABEL);
actionRegistry.registerWorkbenchAction(installActionDescriptor, 'Extensions: Install', extensionManagement_1.ExtensionsLabel);
var listOutdatedActionDescriptor = new actions_1.SyncActionDescriptor(extensionsActions_1.ShowOutdatedExtensionsAction, extensionsActions_1.ShowOutdatedExtensionsAction.ID, extensionsActions_1.ShowOutdatedExtensionsAction.LABEL);
actionRegistry.registerWorkbenchAction(listOutdatedActionDescriptor, 'Extensions: Show Outdated Extensions', extensionManagement_1.ExtensionsLabel);
var recommendationsActionDescriptor = new actions_1.SyncActionDescriptor(extensionsActions_1.ShowRecommendedExtensionsAction, extensionsActions_1.ShowRecommendedExtensionsAction.ID, extensionsActions_1.ShowRecommendedExtensionsAction.LABEL);
actionRegistry.registerWorkbenchAction(recommendationsActionDescriptor, 'Extensions: Show Recommended Extensions', extensionManagement_1.ExtensionsLabel);
var keymapRecommendationsActionDescriptor = new actions_1.SyncActionDescriptor(extensionsActions_1.ShowRecommendedKeymapExtensionsAction, extensionsActions_1.ShowRecommendedKeymapExtensionsAction.ID, extensionsActions_1.ShowRecommendedKeymapExtensionsAction.SHORT_LABEL, { primary: keyCodes_1.KeyChord(32768 /* CtrlCmd */ | 41 /* KEY_K */, 32768 /* CtrlCmd */ | 43 /* KEY_M */) });
actionRegistry.registerWorkbenchAction(keymapRecommendationsActionDescriptor, 'Preferences: Keymaps', extensionManagement_1.PreferencesLabel);
var workspaceRecommendationsActionDescriptor = new actions_1.SyncActionDescriptor(extensionsActions_1.ShowWorkspaceRecommendedExtensionsAction, extensionsActions_1.ShowWorkspaceRecommendedExtensionsAction.ID, extensionsActions_1.ShowWorkspaceRecommendedExtensionsAction.LABEL);
actionRegistry.registerWorkbenchAction(workspaceRecommendationsActionDescriptor, 'Extensions: Show Workspace Recommended Extensions', extensionManagement_1.ExtensionsLabel);
var popularActionDescriptor = new actions_1.SyncActionDescriptor(extensionsActions_1.ShowPopularExtensionsAction, extensionsActions_1.ShowPopularExtensionsAction.ID, extensionsActions_1.ShowPopularExtensionsAction.LABEL);
actionRegistry.registerWorkbenchAction(popularActionDescriptor, 'Extensions: Show Popular Extensions', extensionManagement_1.ExtensionsLabel);
var installedActionDescriptor = new actions_1.SyncActionDescriptor(extensionsActions_1.ShowInstalledExtensionsAction, extensionsActions_1.ShowInstalledExtensionsAction.ID, extensionsActions_1.ShowInstalledExtensionsAction.LABEL);
actionRegistry.registerWorkbenchAction(installedActionDescriptor, 'Extensions: Show Installed Extensions', extensionManagement_1.ExtensionsLabel);
var disabledActionDescriptor = new actions_1.SyncActionDescriptor(extensionsActions_1.ShowDisabledExtensionsAction, extensionsActions_1.ShowDisabledExtensionsAction.ID, extensionsActions_1.ShowDisabledExtensionsAction.LABEL);
actionRegistry.registerWorkbenchAction(disabledActionDescriptor, 'Extensions: Show Disabled Extensions', extensionManagement_1.ExtensionsLabel);
var updateAllActionDescriptor = new actions_1.SyncActionDescriptor(extensionsActions_1.UpdateAllAction, extensionsActions_1.UpdateAllAction.ID, extensionsActions_1.UpdateAllAction.LABEL);
actionRegistry.registerWorkbenchAction(updateAllActionDescriptor, 'Extensions: Update All Extensions', extensionManagement_1.ExtensionsLabel);
var openExtensionsFolderActionDescriptor = new actions_1.SyncActionDescriptor(extensionsActions_2.OpenExtensionsFolderAction, extensionsActions_2.OpenExtensionsFolderAction.ID, extensionsActions_2.OpenExtensionsFolderAction.LABEL);
actionRegistry.registerWorkbenchAction(openExtensionsFolderActionDescriptor, 'Extensions: Open Extensions Folder', extensionManagement_1.ExtensionsLabel);
var openExtensionsFileActionDescriptor = new actions_1.SyncActionDescriptor(extensionsActions_1.ConfigureWorkspaceRecommendedExtensionsAction, extensionsActions_1.ConfigureWorkspaceRecommendedExtensionsAction.ID, extensionsActions_1.ConfigureWorkspaceRecommendedExtensionsAction.LABEL);
actionRegistry.registerWorkbenchAction(openExtensionsFileActionDescriptor, 'Extensions: Open Extensions File', extensionManagement_1.ExtensionsLabel);
var installVSIXActionDescriptor = new actions_1.SyncActionDescriptor(extensionsActions_2.InstallVSIXAction, extensionsActions_2.InstallVSIXAction.ID, extensionsActions_2.InstallVSIXAction.LABEL);
actionRegistry.registerWorkbenchAction(installVSIXActionDescriptor, 'Extensions: Install from VSIX...', extensionManagement_1.ExtensionsLabel);
var disableAllAction = new actions_1.SyncActionDescriptor(extensionsActions_1.DisableAllAction, extensionsActions_1.DisableAllAction.ID, extensionsActions_1.DisableAllAction.LABEL);
actionRegistry.registerWorkbenchAction(disableAllAction, 'Extensions: Disable All', extensionManagement_1.ExtensionsLabel);
var disableAllWorkspaceAction = new actions_1.SyncActionDescriptor(extensionsActions_1.DisableAllWorkpsaceAction, extensionsActions_1.DisableAllWorkpsaceAction.ID, extensionsActions_1.DisableAllWorkpsaceAction.LABEL);
actionRegistry.registerWorkbenchAction(disableAllWorkspaceAction, 'Extensions: Disable All (Workspace)', extensionManagement_1.ExtensionsLabel);
var enableAllAction = new actions_1.SyncActionDescriptor(extensionsActions_1.EnableAllAction, extensionsActions_1.EnableAllAction.ID, extensionsActions_1.EnableAllAction.LABEL);
actionRegistry.registerWorkbenchAction(enableAllAction, 'Extensions: Enable All', extensionManagement_1.ExtensionsLabel);
var enableAllWorkspaceAction = new actions_1.SyncActionDescriptor(extensionsActions_1.EnableAllWorkpsaceAction, extensionsActions_1.EnableAllWorkpsaceAction.ID, extensionsActions_1.EnableAllWorkpsaceAction.LABEL);
actionRegistry.registerWorkbenchAction(enableAllWorkspaceAction, 'Extensions: Enable All (Workspace)', extensionManagement_1.ExtensionsLabel);
var checkForUpdatesAction = new actions_1.SyncActionDescriptor(extensionsActions_1.CheckForUpdatesAction, extensionsActions_1.CheckForUpdatesAction.ID, extensionsActions_1.CheckForUpdatesAction.LABEL);
actionRegistry.registerWorkbenchAction(checkForUpdatesAction, "Extensions: " + extensionsActions_1.CheckForUpdatesAction.LABEL, extensionManagement_1.ExtensionsLabel);
platform_1.Registry.as(configurationRegistry_1.Extensions.Configuration)
    .registerConfiguration({
    id: 'extensions',
    order: 30,
    title: nls_1.localize('extensionsConfigurationTitle', "Extensions"),
    type: 'object',
    properties: {
        'extensions.autoUpdate': {
            type: 'boolean',
            description: nls_1.localize('extensionsAutoUpdate', "Automatically update extensions"),
            default: false
        }
    }
});
var jsonRegistry = platform_1.Registry.as(jsonContributionRegistry.Extensions.JSONContribution);
jsonRegistry.registerSchema(extensionsFileTemplate_1.ExtensionsConfigurationSchemaId, extensionsFileTemplate_1.ExtensionsConfigurationSchema);
// Register Commands
commands_1.CommandsRegistry.registerCommand('_extensions.manage', function (accessor, extensionId) {
    var extensionService = accessor.get(extensions_2.IExtensionsWorkbenchService);
    var extension = extensionService.local.filter(function (e) { return e.identifier === extensionId; });
    if (extension.length === 1) {
        extensionService.open(extension[0]).done(null, errors.onUnexpectedError);
    }
});
