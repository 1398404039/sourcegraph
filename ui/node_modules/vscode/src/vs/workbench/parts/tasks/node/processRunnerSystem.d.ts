import { TPromise } from 'vs/base/common/winjs.base';
import { EventEmitter } from 'vs/base/common/eventEmitter';
import { TerminateResponse } from 'vs/base/common/processes';
import { IOutputService } from 'vs/workbench/parts/output/common/output';
import { IConfigurationResolverService } from 'vs/workbench/services/configurationResolver/common/configurationResolver';
import { IMarkerService } from 'vs/platform/markers/common/markers';
import { IModelService } from 'vs/editor/common/services/modelService';
import { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';
import { ITaskSystem, ITaskExecuteResult, TaskDescription } from 'vs/workbench/parts/tasks/common/taskSystem';
import * as FileConfig from './processRunnerConfiguration';
export declare class ProcessRunnerSystem extends EventEmitter implements ITaskSystem {
    static TelemetryEventName: string;
    private fileConfig;
    private markerService;
    private modelService;
    private outputService;
    private telemetryService;
    private configurationResolverService;
    private validationStatus;
    private defaultBuildTaskIdentifier;
    private defaultTestTaskIdentifier;
    private configuration;
    private outputChannel;
    private errorsShown;
    private childProcess;
    private activeTaskIdentifier;
    private activeTaskPromise;
    constructor(fileConfig: FileConfig.ExternalTaskRunnerConfiguration, markerService: IMarkerService, modelService: IModelService, telemetryService: ITelemetryService, outputService: IOutputService, configurationResolverService: IConfigurationResolverService, outputChannelId: string, clearOutput?: boolean);
    build(): ITaskExecuteResult;
    rebuild(): ITaskExecuteResult;
    clean(): ITaskExecuteResult;
    runTest(): ITaskExecuteResult;
    run(taskIdentifier: string): ITaskExecuteResult;
    isActive(): TPromise<boolean>;
    isActiveSync(): boolean;
    canAutoTerminate(): boolean;
    terminate(): TPromise<TerminateResponse>;
    tasks(): TPromise<TaskDescription[]>;
    private executeTask(taskIdentifier, trigger?);
    private doExecuteTask(task, telemetryEvent);
    private childProcessEnded();
    private handleError(task, error);
    private checkTerminated(task, data);
    private resolveOptions(options);
    private resolveVariables(value);
    private resolveMatchers<T>(values);
    private resolveVariable(value);
    log(value: string): void;
    private showOutput();
    private clearOutput();
}
