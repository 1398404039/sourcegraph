import { ICommonCodeEditor } from 'vs/editor/common/editorCommon';
import emmet = require('emmet');
export interface IGrammarContributions {
    getGrammar(mode: string): string;
}
export declare class EditorAccessor implements emmet.Editor {
    private _editor;
    private _syntaxProfiles;
    private _excludedLanguages;
    private _grammars;
    private _hasMadeEdits;
    private emmetSupportedModes;
    constructor(editor: ICommonCodeEditor, syntaxProfiles: any, excludedLanguages: String[], grammars: IGrammarContributions);
    isEmmetEnabledMode(): boolean;
    getSelectionRange(): emmet.Range;
    getCurrentLineRange(): emmet.Range;
    getCaretPos(): number;
    setCaretPos(pos: number): void;
    getCurrentLine(): string;
    onBeforeEmmetAction(): void;
    replaceContent(value: string, start: number, end: number, no_indent: boolean): void;
    onAfterEmmetAction(): void;
    getContent(): string;
    createSelection(startOffset: number, endOffset?: number): void;
    getSyntax(): string;
    private getSyntaxProfile(syntax);
    private checkParentMode(syntax);
    getProfileName(): string;
    prompt(title: string): any;
    getSelection(): string;
    getFilePath(): string;
    private getPositionFromOffset(offset);
    private getOffsetFromPosition(position);
}
