/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var nls = require('vs/nls');
var emmetActions_1 = require('vs/workbench/parts/emmet/node/emmetActions');
var editorCommonExtensions_1 = require('vs/editor/common/editorCommonExtensions');
var editorCommon_1 = require('vs/editor/common/editorCommon');
var contextkey_1 = require('vs/platform/contextkey/common/contextkey');
var ExpandAbbreviationAction = (function (_super) {
    __extends(ExpandAbbreviationAction, _super);
    function ExpandAbbreviationAction() {
        _super.call(this, 'editor.emmet.action.expandAbbreviation', nls.localize('expandAbbreviationAction', "Emmet: Expand Abbreviation"), 'Emmet: Expand Abbreviation', 'expand_abbreviation', {
            primary: 2 /* Tab */,
            kbExpr: contextkey_1.ContextKeyExpr.and(editorCommon_1.EditorContextKeys.TextFocus, editorCommon_1.EditorContextKeys.HasOnlyEmptySelection, editorCommon_1.EditorContextKeys.HasSingleSelection, editorCommon_1.EditorContextKeys.TabDoesNotMoveFocus, contextkey_1.ContextKeyExpr.has('config.emmet.triggerExpansionOnTab'))
        });
    }
    ExpandAbbreviationAction.prototype.noExpansionOccurred = function (editor) {
        // forward the tab key back to the editor
        editor.trigger('emmet', editorCommon_1.Handler.Tab, {});
    };
    ExpandAbbreviationAction = __decorate([
        editorCommonExtensions_1.editorAction
    ], ExpandAbbreviationAction);
    return ExpandAbbreviationAction;
}(emmetActions_1.BasicEmmetEditorAction));
