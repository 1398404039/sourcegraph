/// <reference path="emmet.d.ts" />
import { TPromise } from 'vs/base/common/winjs.base';
import { ICommonCodeEditor } from 'vs/editor/common/editorCommon';
import { EditorAction, ServicesAccessor } from 'vs/editor/common/editorCommonExtensions';
import { ICommandKeybindingsOptions } from 'vs/editor/common/config/config';
import { EditorAccessor } from 'vs/workbench/parts/emmet/node/editorAccessor';
import * as emmet from 'emmet';
export declare class EmmetActionContext {
    editor: ICommonCodeEditor;
    emmet: typeof emmet;
    editorAccessor: EditorAccessor;
    constructor(editor: ICommonCodeEditor, _emmet: typeof emmet, editorAccessor: EditorAccessor);
}
export declare abstract class EmmetEditorAction extends EditorAction {
    abstract runEmmetAction(accessor: ServicesAccessor, ctx: EmmetActionContext): any;
    protected noExpansionOccurred(editor: ICommonCodeEditor): void;
    private _lastGrammarContributions;
    private _lastExtensionService;
    private _withGrammarContributions(extensionService);
    run(accessor: ServicesAccessor, editor: ICommonCodeEditor): TPromise<void>;
}
export declare class BasicEmmetEditorAction extends EmmetEditorAction {
    private emmetActionName;
    constructor(id: string, label: string, alias: string, actionName: string, kbOpts?: ICommandKeybindingsOptions);
    runEmmetAction(accessor: ServicesAccessor, ctx: EmmetActionContext): void;
}
