/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var nls = require("vs/nls");
var winjs_base_1 = require("vs/base/common/winjs.base");
var editorCommon_1 = require("vs/editor/common/editorCommon");
var editorCommonExtensions_1 = require("vs/editor/common/editorCommonExtensions");
var indentationCommands_1 = require("vs/workbench/parts/indentation/common/indentationCommands");
var quickOpenService_1 = require("vs/workbench/services/quickopen/common/quickOpenService");
var modelService_1 = require("vs/editor/common/services/modelService");
var IndentationToSpacesAction = IndentationToSpacesAction_1 = (function (_super) {
    __extends(IndentationToSpacesAction, _super);
    function IndentationToSpacesAction() {
        return _super.call(this, {
            id: IndentationToSpacesAction_1.ID,
            label: nls.localize('indentationToSpaces', "Convert Indentation to Spaces"),
            alias: 'Convert Indentation to Spaces',
            precondition: editorCommon_1.EditorContextKeys.Writable
        }) || this;
    }
    IndentationToSpacesAction.prototype.run = function (accessor, editor) {
        var model = editor.getModel();
        if (!model) {
            return;
        }
        var modelOpts = model.getOptions();
        var command = new indentationCommands_1.IndentationToSpacesCommand(editor.getSelection(), modelOpts.tabSize);
        editor.executeCommands(this.id, [command]);
        model.updateOptions({
            insertSpaces: true
        });
    };
    return IndentationToSpacesAction;
}(editorCommonExtensions_1.EditorAction));
IndentationToSpacesAction.ID = 'editor.action.indentationToSpaces';
IndentationToSpacesAction = IndentationToSpacesAction_1 = __decorate([
    editorCommonExtensions_1.editorAction
], IndentationToSpacesAction);
exports.IndentationToSpacesAction = IndentationToSpacesAction;
var IndentationToTabsAction = IndentationToTabsAction_1 = (function (_super) {
    __extends(IndentationToTabsAction, _super);
    function IndentationToTabsAction() {
        return _super.call(this, {
            id: IndentationToTabsAction_1.ID,
            label: nls.localize('indentationToTabs', "Convert Indentation to Tabs"),
            alias: 'Convert Indentation to Tabs',
            precondition: editorCommon_1.EditorContextKeys.Writable
        }) || this;
    }
    IndentationToTabsAction.prototype.run = function (accessor, editor) {
        var model = editor.getModel();
        if (!model) {
            return;
        }
        var modelOpts = model.getOptions();
        var command = new indentationCommands_1.IndentationToTabsCommand(editor.getSelection(), modelOpts.tabSize);
        editor.executeCommands(this.id, [command]);
        model.updateOptions({
            insertSpaces: false
        });
    };
    return IndentationToTabsAction;
}(editorCommonExtensions_1.EditorAction));
IndentationToTabsAction.ID = 'editor.action.indentationToTabs';
IndentationToTabsAction = IndentationToTabsAction_1 = __decorate([
    editorCommonExtensions_1.editorAction
], IndentationToTabsAction);
exports.IndentationToTabsAction = IndentationToTabsAction;
var ChangeIndentationSizeAction = (function (_super) {
    __extends(ChangeIndentationSizeAction, _super);
    function ChangeIndentationSizeAction(insertSpaces, opts) {
        var _this = _super.call(this, opts) || this;
        _this.insertSpaces = insertSpaces;
        return _this;
    }
    ChangeIndentationSizeAction.prototype.run = function (accessor, editor) {
        var _this = this;
        var quickOpenService = accessor.get(quickOpenService_1.IQuickOpenService);
        var modelService = accessor.get(modelService_1.IModelService);
        var model = editor.getModel();
        if (!model) {
            return;
        }
        var creationOpts = modelService.getCreationOptions();
        var picks = [1, 2, 3, 4, 5, 6, 7, 8].map(function (n) { return ({
            id: n.toString(),
            label: n.toString(),
            // add description for tabSize value set in the configuration
            description: n === creationOpts.tabSize ? nls.localize('configuredTabSize', "Configured Tab Size") : null
        }); });
        // auto focus the tabSize set for the current editor
        var autoFocusIndex = Math.min(model.getOptions().tabSize - 1, 7);
        return winjs_base_1.TPromise.timeout(50 /* quick open is sensitive to being opened so soon after another */).then(function () {
            return quickOpenService.pick(picks, { placeHolder: nls.localize({ key: 'selectTabWidth', comment: ['Tab corresponds to the tab key'] }, "Select Tab Size for Current File"), autoFocus: { autoFocusIndex: autoFocusIndex } }).then(function (pick) {
                if (pick) {
                    model.updateOptions({
                        tabSize: parseInt(pick.label, 10),
                        insertSpaces: _this.insertSpaces
                    });
                }
            });
        });
    };
    return ChangeIndentationSizeAction;
}(editorCommonExtensions_1.EditorAction));
exports.ChangeIndentationSizeAction = ChangeIndentationSizeAction;
var IndentUsingTabs = IndentUsingTabs_1 = (function (_super) {
    __extends(IndentUsingTabs, _super);
    function IndentUsingTabs() {
        return _super.call(this, false, {
            id: IndentUsingTabs_1.ID,
            label: nls.localize('indentUsingTabs', "Indent Using Tabs"),
            alias: 'Indent Using Tabs',
            precondition: null
        }) || this;
    }
    return IndentUsingTabs;
}(ChangeIndentationSizeAction));
IndentUsingTabs.ID = 'editor.action.indentUsingTabs';
IndentUsingTabs = IndentUsingTabs_1 = __decorate([
    editorCommonExtensions_1.editorAction
], IndentUsingTabs);
exports.IndentUsingTabs = IndentUsingTabs;
var IndentUsingSpaces = IndentUsingSpaces_1 = (function (_super) {
    __extends(IndentUsingSpaces, _super);
    function IndentUsingSpaces() {
        return _super.call(this, true, {
            id: IndentUsingSpaces_1.ID,
            label: nls.localize('indentUsingSpaces', "Indent Using Spaces"),
            alias: 'Indent Using Spaces',
            precondition: null
        }) || this;
    }
    return IndentUsingSpaces;
}(ChangeIndentationSizeAction));
IndentUsingSpaces.ID = 'editor.action.indentUsingSpaces';
IndentUsingSpaces = IndentUsingSpaces_1 = __decorate([
    editorCommonExtensions_1.editorAction
], IndentUsingSpaces);
exports.IndentUsingSpaces = IndentUsingSpaces;
var DetectIndentation = DetectIndentation_1 = (function (_super) {
    __extends(DetectIndentation, _super);
    function DetectIndentation() {
        return _super.call(this, {
            id: DetectIndentation_1.ID,
            label: nls.localize('detectIndentation', "Detect Indentation from Content"),
            alias: 'Detect Indentation from Content',
            precondition: null
        }) || this;
    }
    DetectIndentation.prototype.run = function (accessor, editor) {
        var modelService = accessor.get(modelService_1.IModelService);
        var model = editor.getModel();
        if (!model) {
            return;
        }
        var creationOpts = modelService.getCreationOptions();
        model.detectIndentation(creationOpts.insertSpaces, creationOpts.tabSize);
    };
    return DetectIndentation;
}(editorCommonExtensions_1.EditorAction));
DetectIndentation.ID = 'editor.action.detectIndentation';
DetectIndentation = DetectIndentation_1 = __decorate([
    editorCommonExtensions_1.editorAction
], DetectIndentation);
exports.DetectIndentation = DetectIndentation;
var ToggleRenderWhitespaceAction = (function (_super) {
    __extends(ToggleRenderWhitespaceAction, _super);
    function ToggleRenderWhitespaceAction() {
        return _super.call(this, {
            id: 'editor.action.toggleRenderWhitespace',
            label: nls.localize('toggleRenderWhitespace', "Toggle Render Whitespace"),
            alias: 'Toggle Render Whitespace',
            precondition: null
        }) || this;
    }
    ToggleRenderWhitespaceAction.prototype.run = function (accessor, editor) {
        var renderWhitespace = editor.getConfiguration().viewInfo.renderWhitespace;
        if (renderWhitespace === 'none') {
            editor.updateOptions({
                renderWhitespace: 'all'
            });
        }
        else {
            editor.updateOptions({
                renderWhitespace: 'none'
            });
        }
    };
    return ToggleRenderWhitespaceAction;
}(editorCommonExtensions_1.EditorAction));
ToggleRenderWhitespaceAction = __decorate([
    editorCommonExtensions_1.editorAction
], ToggleRenderWhitespaceAction);
exports.ToggleRenderWhitespaceAction = ToggleRenderWhitespaceAction;
var ToggleRenderControlCharacterAction = (function (_super) {
    __extends(ToggleRenderControlCharacterAction, _super);
    function ToggleRenderControlCharacterAction() {
        return _super.call(this, {
            id: 'editor.action.toggleRenderControlCharacter',
            label: nls.localize('toggleRenderControlCharacters', "Toggle Control Characters"),
            alias: 'Toggle Render Control Characters',
            precondition: null
        }) || this;
    }
    ToggleRenderControlCharacterAction.prototype.run = function (accessor, editor) {
        editor.updateOptions({
            renderControlCharacters: !editor.getConfiguration().viewInfo.renderControlCharacters
        });
    };
    return ToggleRenderControlCharacterAction;
}(editorCommonExtensions_1.EditorAction));
ToggleRenderControlCharacterAction = __decorate([
    editorCommonExtensions_1.editorAction
], ToggleRenderControlCharacterAction);
exports.ToggleRenderControlCharacterAction = ToggleRenderControlCharacterAction;
var IndentationToSpacesAction_1, IndentationToTabsAction_1, IndentUsingTabs_1, IndentUsingSpaces_1, DetectIndentation_1;
