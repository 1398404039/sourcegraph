/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var winjs_base_1 = require('vs/base/common/winjs.base');
var errors = require('vs/base/common/errors');
var nls = require('vs/nls');
var paths = require('vs/base/common/paths');
var labels = require('vs/base/common/labels');
var objects = require('vs/base/common/objects');
var uuid = require('vs/base/common/uuid');
var modeService_1 = require('vs/editor/common/services/modeService');
var labels_1 = require('vs/workbench/browser/labels');
var modelService_1 = require('vs/editor/common/services/modelService');
var themeService_1 = require('vs/workbench/services/themes/common/themeService');
var quickOpenModel_1 = require('vs/base/parts/quickopen/browser/quickOpenModel');
var quickopen_1 = require('vs/workbench/browser/quickopen');
var searchQuery_1 = require('vs/workbench/parts/search/common/searchQuery');
var editor_1 = require('vs/workbench/common/editor');
var groupService_1 = require('vs/workbench/services/group/common/groupService');
var editorService_1 = require('vs/workbench/services/editor/common/editorService');
var configuration_1 = require('vs/platform/configuration/common/configuration');
var instantiation_1 = require('vs/platform/instantiation/common/instantiation');
var search_1 = require('vs/platform/search/common/search');
var workspace_1 = require('vs/platform/workspace/common/workspace');
var FileQuickOpenModel = (function (_super) {
    __extends(FileQuickOpenModel, _super);
    function FileQuickOpenModel(entries, stats) {
        _super.call(this, entries);
        this.stats = stats;
    }
    return FileQuickOpenModel;
}(quickOpenModel_1.QuickOpenModel));
exports.FileQuickOpenModel = FileQuickOpenModel;
var FileEntry = (function (_super) {
    __extends(FileEntry, _super);
    function FileEntry(resource, name, description, icon, editorService, modeService, modelService, configurationService, contextService) {
        _super.call(this, editorService);
        this.resource = resource;
        this.name = name;
        this.description = description;
        this.icon = icon;
        this.modeService = modeService;
        this.modelService = modelService;
        this.configurationService = configurationService;
    }
    FileEntry.prototype.getLabel = function () {
        return this.name;
    };
    FileEntry.prototype.getLabelOptions = function () {
        return {
            extraClasses: labels_1.getIconClasses(this.modelService, this.modeService, this.resource)
        };
    };
    FileEntry.prototype.getAriaLabel = function () {
        return nls.localize('entryAriaLabel', "{0}, file picker", this.getLabel());
    };
    FileEntry.prototype.getDescription = function () {
        return this.description;
    };
    FileEntry.prototype.getIcon = function () {
        return this.icon;
    };
    FileEntry.prototype.getResource = function () {
        return this.resource;
    };
    FileEntry.prototype.setRange = function (range) {
        this.range = range;
    };
    FileEntry.prototype.isFile = function () {
        return true; // TODO@Ben debt with editor history merging
    };
    FileEntry.prototype.getInput = function () {
        var input = {
            resource: this.resource,
            options: {
                pinned: !this.configurationService.getConfiguration().workbench.editor.enablePreviewFromQuickOpen
            }
        };
        if (this.range) {
            input.options.selection = this.range;
        }
        return input;
    };
    FileEntry = __decorate([
        __param(4, editorService_1.IWorkbenchEditorService),
        __param(5, modeService_1.IModeService),
        __param(6, modelService_1.IModelService),
        __param(7, configuration_1.IConfigurationService),
        __param(8, workspace_1.IWorkspaceContextService)
    ], FileEntry);
    return FileEntry;
}(quickopen_1.EditorQuickOpenEntry));
exports.FileEntry = FileEntry;
var OpenFileHandler = (function (_super) {
    __extends(OpenFileHandler, _super);
    function OpenFileHandler(editorGroupService, instantiationService, themeService, contextService, searchService) {
        _super.call(this);
        this.editorGroupService = editorGroupService;
        this.instantiationService = instantiationService;
        this.themeService = themeService;
        this.contextService = contextService;
        this.searchService = searchService;
        this.queryBuilder = this.instantiationService.createInstance(searchQuery_1.QueryBuilder);
    }
    OpenFileHandler.prototype.setOptions = function (options) {
        this.options = options;
    };
    OpenFileHandler.prototype.getResults = function (searchValue, maxSortedResults) {
        searchValue = searchValue.trim();
        // Respond directly to empty search
        if (!searchValue) {
            return winjs_base_1.TPromise.as(new FileQuickOpenModel([]));
        }
        // Do find results
        return this.doFindResults(searchValue, this.cacheState.cacheKey, maxSortedResults);
    };
    OpenFileHandler.prototype.doFindResults = function (searchValue, cacheKey, maxSortedResults) {
        var _this = this;
        var query = {
            folderResources: this.contextService.getWorkspace() ? [this.contextService.getWorkspace().resource] : [],
            extraFileResources: editor_1.getOutOfWorkspaceEditorResources(this.editorGroupService, this.contextService),
            filePattern: searchValue,
            cacheKey: cacheKey
        };
        if (typeof maxSortedResults === 'number') {
            query.maxResults = maxSortedResults;
            query.sortByScore = true;
        }
        var iconClass;
        if (this.options && this.options.forceUseIcons && !this.themeService.getFileIconTheme()) {
            iconClass = 'file'; // only use a generic file icon if we are forced to use an icon and have no icon theme set otherwise
        }
        return this.searchService.search(this.queryBuilder.file(query)).then(function (complete) {
            var results = [];
            for (var i = 0; i < complete.results.length; i++) {
                var fileMatch = complete.results[i];
                var label = paths.basename(fileMatch.resource.fsPath);
                var description = labels.getPathLabel(paths.dirname(fileMatch.resource.fsPath), _this.contextService);
                results.push(_this.instantiationService.createInstance(FileEntry, fileMatch.resource, label, description, iconClass));
            }
            return new FileQuickOpenModel(results, complete.stats);
        });
    };
    OpenFileHandler.prototype.hasShortResponseTime = function () {
        return this.isCacheLoaded;
    };
    OpenFileHandler.prototype.onOpen = function () {
        var _this = this;
        this.cacheState = new CacheState(function (cacheKey) { return _this.cacheQuery(cacheKey); }, function (query) { return _this.searchService.search(query); }, function (cacheKey) { return _this.searchService.clearCache(cacheKey); }, this.cacheState);
        this.cacheState.load();
    };
    OpenFileHandler.prototype.cacheQuery = function (cacheKey) {
        var options = {
            folderResources: this.contextService.getWorkspace() ? [this.contextService.getWorkspace().resource] : [],
            extraFileResources: editor_1.getOutOfWorkspaceEditorResources(this.editorGroupService, this.contextService),
            filePattern: '',
            cacheKey: cacheKey,
            maxResults: 0,
            sortByScore: true
        };
        var query = this.queryBuilder.file(options);
        this.searchService.extendQuery(query);
        return query;
    };
    Object.defineProperty(OpenFileHandler.prototype, "isCacheLoaded", {
        get: function () {
            return this.cacheState && this.cacheState.isLoaded;
        },
        enumerable: true,
        configurable: true
    });
    OpenFileHandler.prototype.getGroupLabel = function () {
        return nls.localize('searchResults', "search results");
    };
    OpenFileHandler.prototype.getAutoFocus = function (searchValue) {
        return {
            autoFocusFirstEntry: true
        };
    };
    OpenFileHandler = __decorate([
        __param(0, groupService_1.IEditorGroupService),
        __param(1, instantiation_1.IInstantiationService),
        __param(2, themeService_1.IThemeService),
        __param(3, workspace_1.IWorkspaceContextService),
        __param(4, search_1.ISearchService)
    ], OpenFileHandler);
    return OpenFileHandler;
}(quickopen_1.QuickOpenHandler));
exports.OpenFileHandler = OpenFileHandler;
var LoadingPhase;
(function (LoadingPhase) {
    LoadingPhase[LoadingPhase["Created"] = 1] = "Created";
    LoadingPhase[LoadingPhase["Loading"] = 2] = "Loading";
    LoadingPhase[LoadingPhase["Loaded"] = 3] = "Loaded";
    LoadingPhase[LoadingPhase["Errored"] = 4] = "Errored";
    LoadingPhase[LoadingPhase["Disposed"] = 5] = "Disposed";
})(LoadingPhase || (LoadingPhase = {}));
/**
 * Exported for testing.
 */
var CacheState = (function () {
    function CacheState(cacheQuery, doLoad, doDispose, previous) {
        this.doLoad = doLoad;
        this.doDispose = doDispose;
        this.previous = previous;
        this._cacheKey = uuid.generateUuid();
        this.loadingPhase = LoadingPhase.Created;
        this.query = cacheQuery(this._cacheKey);
        if (this.previous) {
            var current = objects.assign({}, this.query, { cacheKey: null });
            var previous_1 = objects.assign({}, this.previous.query, { cacheKey: null });
            if (!objects.equals(current, previous_1)) {
                this.previous.dispose();
                this.previous = null;
            }
        }
    }
    Object.defineProperty(CacheState.prototype, "cacheKey", {
        get: function () {
            return this.loadingPhase === LoadingPhase.Loaded || !this.previous ? this._cacheKey : this.previous.cacheKey;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CacheState.prototype, "isLoaded", {
        get: function () {
            var isLoaded = this.loadingPhase === LoadingPhase.Loaded;
            return isLoaded || !this.previous ? isLoaded : this.previous.isLoaded;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CacheState.prototype, "isUpdating", {
        get: function () {
            var isUpdating = this.loadingPhase === LoadingPhase.Loading;
            return isUpdating || !this.previous ? isUpdating : this.previous.isUpdating;
        },
        enumerable: true,
        configurable: true
    });
    CacheState.prototype.load = function () {
        var _this = this;
        if (this.isUpdating) {
            return;
        }
        this.loadingPhase = LoadingPhase.Loading;
        this.promise = this.doLoad(this.query)
            .then(function () {
            _this.loadingPhase = LoadingPhase.Loaded;
            if (_this.previous) {
                _this.previous.dispose();
                _this.previous = null;
            }
        }, function (err) {
            _this.loadingPhase = LoadingPhase.Errored;
            errors.onUnexpectedError(err);
        });
    };
    CacheState.prototype.dispose = function () {
        var _this = this;
        if (this.promise) {
            this.promise.then(null, function () { })
                .then(function () {
                _this.loadingPhase = LoadingPhase.Disposed;
                return _this.doDispose(_this._cacheKey);
            }).then(null, function (err) {
                errors.onUnexpectedError(err);
            });
        }
        else {
            this.loadingPhase = LoadingPhase.Disposed;
        }
        if (this.previous) {
            this.previous.dispose();
            this.previous = null;
        }
    };
    return CacheState;
}());
exports.CacheState = CacheState;
