/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var nls = require('vs/nls');
var errors = require('vs/base/common/errors');
var winjs_base_1 = require('vs/base/common/winjs.base');
var uri_1 = require('vs/base/common/uri');
var network = require('vs/base/common/network');
var Map = require('vs/base/common/map');
var editor_1 = require('vs/platform/editor/common/editor');
var modelService_1 = require('vs/editor/common/services/modelService');
var event_1 = require('vs/platform/event/common/event');
var searchModel_1 = require('vs/workbench/parts/search/common/searchModel');
var bulkEdit_1 = require('vs/editor/common/services/bulkEdit');
var diffEditorInput_1 = require('vs/workbench/common/editor/diffEditorInput');
var telemetry_1 = require('vs/platform/telemetry/common/telemetry');
var EditorInputCache = (function () {
    function EditorInputCache(replaceService, editorService, modelService) {
        this.replaceService = replaceService;
        this.editorService = editorService;
        this.modelService = modelService;
        this.cache = new Map.LinkedMap();
    }
    EditorInputCache.prototype.hasInput = function (fileMatch) {
        return this.cache.has(fileMatch.resource());
    };
    EditorInputCache.prototype.getInput = function (fileMatch) {
        var _this = this;
        var editorInputPromise = this.cache.get(fileMatch.resource());
        if (!editorInputPromise) {
            editorInputPromise = this.createInput(fileMatch);
            this.cache.set(fileMatch.resource(), editorInputPromise);
            this.refreshInput(fileMatch, true);
            fileMatch.onDispose(function () { return _this.disposeInput(fileMatch); });
            fileMatch.onChange(function (modelChange) { return _this.refreshInput(fileMatch, modelChange); });
        }
        return editorInputPromise;
    };
    EditorInputCache.prototype.refreshInput = function (fileMatch, reloadFromSource) {
        var _this = this;
        if (reloadFromSource === void 0) { reloadFromSource = false; }
        var editorInputPromise = this.cache.get(fileMatch.resource());
        if (editorInputPromise) {
            editorInputPromise.done(function () {
                if (reloadFromSource) {
                    _this.editorService.resolveEditorModel({ resource: fileMatch.resource() }).then(function (value) {
                        var replaceResource = _this.getReplaceResource(fileMatch.resource());
                        _this.modelService.getModel(replaceResource).setValue(value.textEditorModel.getValue());
                        _this.replaceService.replace(fileMatch, null, replaceResource);
                    });
                }
                else {
                    var replaceResource = _this.getReplaceResource(fileMatch.resource());
                    _this.modelService.getModel(replaceResource).undo();
                    _this.replaceService.replace(fileMatch, null, replaceResource);
                }
            });
        }
    };
    EditorInputCache.prototype.disposeInput = function (arg) {
        var _this = this;
        var resourceUri = arg instanceof uri_1.default ? arg : arg instanceof searchModel_1.FileMatch ? arg.resource() : null;
        if (resourceUri) {
            var editorInputPromise = this.cache.get(resourceUri);
            if (editorInputPromise) {
                editorInputPromise.done(function (diffInput) {
                    _this.cleanInput(resourceUri);
                    diffInput.dispose();
                });
            }
        }
    };
    EditorInputCache.prototype.disposeAll = function () {
        var _this = this;
        this.cache.keys().forEach(function (resource) { return _this.disposeInput(resource); });
    };
    EditorInputCache.prototype.createInput = function (fileMatch) {
        var _this = this;
        return winjs_base_1.TPromise.join([this.createLeftInput(fileMatch),
            this.createRightInput(fileMatch)]).then(function (inputs) {
            var left = inputs[0], right = inputs[1];
            var editorInput = new diffEditorInput_1.DiffEditorInput(nls.localize('fileReplaceChanges', "{0} â†” {1} (Replace Preview)", fileMatch.name(), fileMatch.name()), undefined, left, right);
            editorInput.onDispose(function () { return _this.cleanInput(fileMatch.resource()); });
            return editorInput;
        });
    };
    EditorInputCache.prototype.createLeftInput = function (element) {
        return this.editorService.createInput({ resource: element.resource() });
    };
    EditorInputCache.prototype.createRightInput = function (element) {
        var _this = this;
        return new winjs_base_1.TPromise(function (c, e, p) {
            _this.editorService.resolveEditorModel({ resource: element.resource() }).then(function (value) {
                var model = value.textEditorModel;
                var replaceResource = _this.getReplaceResource(element.resource());
                _this.modelService.createModel(model.getValue(), model.getMode(), replaceResource);
                c(_this.editorService.createInput({ resource: replaceResource }));
            });
        });
    };
    EditorInputCache.prototype.cleanInput = function (resourceUri) {
        this.modelService.destroyModel(this.getReplaceResource(resourceUri));
        this.cache.delete(resourceUri);
    };
    EditorInputCache.prototype.getReplaceResource = function (resource) {
        return resource.with({ scheme: network.Schemas.internal, fragment: 'preview' });
    };
    return EditorInputCache;
}());
var ReplaceService = (function () {
    function ReplaceService(telemetryService, eventService, editorService, modelService) {
        this.telemetryService = telemetryService;
        this.eventService = eventService;
        this.editorService = editorService;
        this.modelService = modelService;
        this.cache = new EditorInputCache(this, editorService, modelService);
    }
    ReplaceService.prototype.replace = function (arg, progress, resource) {
        var _this = this;
        if (progress === void 0) { progress = null; }
        if (resource === void 0) { resource = null; }
        var bulkEdit = bulkEdit_1.createBulkEdit(this.eventService, this.editorService, null);
        bulkEdit.progress(progress);
        if (arg instanceof searchModel_1.Match) {
            var match = arg;
            bulkEdit.add([this.createEdit(match, match.replaceString, resource)]);
        }
        if (arg instanceof searchModel_1.FileMatch) {
            arg = [arg];
        }
        if (arg instanceof Array) {
            arg.forEach(function (element) {
                var fileMatch = element;
                if (fileMatch.count() > 0) {
                    fileMatch.matches().forEach(function (match) {
                        bulkEdit.add([_this.createEdit(match, match.replaceString, resource)]);
                    });
                }
            });
        }
        return bulkEdit.finish();
    };
    ReplaceService.prototype.getInput = function (element) {
        return this.cache.getInput(element);
    };
    ReplaceService.prototype.refreshInput = function (element, reload) {
        if (reload === void 0) { reload = false; }
        this.cache.refreshInput(element, reload);
    };
    ReplaceService.prototype.disposeAllInputs = function () {
        this.cache.disposeAll();
    };
    ReplaceService.prototype.openReplacePreviewEditor = function (element, preserveFocus, sideBySide, pinned) {
        var _this = this;
        this.telemetryService.publicLog('replace.open.previewEditor');
        return this.getInput(element instanceof searchModel_1.Match ? element.parent() : element).then(function (editorInput) {
            _this.editorService.openEditor(editorInput, { preserveFocus: preserveFocus, pinned: pinned, revealIfVisible: true }).then(function (editor) {
                var editorControl = editor.getControl();
                if (element instanceof searchModel_1.Match) {
                    editorControl.revealLineInCenter(element.range().startLineNumber);
                }
            }, errors.onUnexpectedError);
        }, errors.onUnexpectedError);
    };
    ReplaceService.prototype.isReplacePreviewEditorOpened = function (element) {
        return this.cache.hasInput(element instanceof searchModel_1.Match ? element.parent() : element);
    };
    ReplaceService.prototype.createEdit = function (match, text, resource) {
        if (resource === void 0) { resource = null; }
        var fileMatch = match.parent();
        var resourceEdit = {
            resource: resource !== null ? resource : fileMatch.resource(),
            range: match.range(),
            newText: text
        };
        return resourceEdit;
    };
    ReplaceService = __decorate([
        __param(0, telemetry_1.ITelemetryService),
        __param(1, event_1.IEventService),
        __param(2, editor_1.IEditorService),
        __param(3, modelService_1.IModelService)
    ], ReplaceService);
    return ReplaceService;
}());
exports.ReplaceService = ReplaceService;
