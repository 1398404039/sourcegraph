/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var nls = require("vs/nls");
var strings = require("vs/base/common/strings");
var dom = require("vs/base/browser/dom");
var winjs_base_1 = require("vs/base/common/winjs.base");
var widget_1 = require("vs/base/browser/ui/widget");
var actions_1 = require("vs/base/common/actions");
var actionbar_1 = require("vs/base/browser/ui/actionbar/actionbar");
var findInput_1 = require("vs/base/browser/ui/findinput/findInput");
var inputBox_1 = require("vs/base/browser/ui/inputbox/inputBox");
var button_1 = require("vs/base/browser/ui/button/button");
var keybindingsRegistry_1 = require("vs/platform/keybinding/common/keybindingsRegistry");
var contextkey_1 = require("vs/platform/contextkey/common/contextkey");
var event_1 = require("vs/base/common/event");
var viewlet_1 = require("vs/workbench/services/viewlet/browser/viewlet");
var searchActions_1 = require("vs/workbench/parts/search/browser/searchActions");
var findController_1 = require("vs/editor/contrib/find/common/findController");
var history_1 = require("vs/base/common/history");
var Constants = require("vs/workbench/parts/search/common/constants");
var ReplaceAllAction = (function (_super) {
    __extends(ReplaceAllAction, _super);
    function ReplaceAllAction() {
        var _this = _super.call(this, ReplaceAllAction.ID, '', 'action-replace-all', false) || this;
        _this._searchWidget = null;
        return _this;
    }
    Object.defineProperty(ReplaceAllAction, "INSTANCE", {
        get: function () {
            if (ReplaceAllAction.fgInstance === null) {
                ReplaceAllAction.fgInstance = new ReplaceAllAction();
            }
            return ReplaceAllAction.fgInstance;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReplaceAllAction.prototype, "searchWidget", {
        set: function (searchWidget) {
            this._searchWidget = searchWidget;
        },
        enumerable: true,
        configurable: true
    });
    ReplaceAllAction.prototype.run = function () {
        if (this._searchWidget) {
            return this._searchWidget.triggerReplaceAll();
        }
        return winjs_base_1.TPromise.as(null);
    };
    return ReplaceAllAction;
}(actions_1.Action));
ReplaceAllAction.fgInstance = null;
ReplaceAllAction.ID = 'search.action.replaceAll';
var SearchWidget = (function (_super) {
    __extends(SearchWidget, _super);
    function SearchWidget(container, contextViewService, options, keyBindingService, keyBindingService2, instantiationService) {
        if (options === void 0) { options = Object.create(null); }
        var _this = _super.call(this) || this;
        _this.contextViewService = contextViewService;
        _this.keyBindingService = keyBindingService;
        _this.keyBindingService2 = keyBindingService2;
        _this.instantiationService = instantiationService;
        _this._onSearchSubmit = _this._register(new event_1.Emitter());
        _this.onSearchSubmit = _this._onSearchSubmit.event;
        _this._onSearchCancel = _this._register(new event_1.Emitter());
        _this.onSearchCancel = _this._onSearchCancel.event;
        _this._onReplaceToggled = _this._register(new event_1.Emitter());
        _this.onReplaceToggled = _this._onReplaceToggled.event;
        _this._onReplaceStateChange = _this._register(new event_1.Emitter());
        _this.onReplaceStateChange = _this._onReplaceStateChange.event;
        _this._onReplaceValueChanged = _this._register(new event_1.Emitter());
        _this.onReplaceValueChanged = _this._onReplaceValueChanged.event;
        _this._onReplaceAll = _this._register(new event_1.Emitter());
        _this.onReplaceAll = _this._onReplaceAll.event;
        _this.searchHistory = new history_1.HistoryNavigator();
        _this.replaceActive = Constants.ReplaceActiveKey.bindTo(_this.keyBindingService);
        _this.searchInputBoxFocussed = Constants.SearchInputBoxFocussedKey.bindTo(_this.keyBindingService);
        _this.replaceInputBoxFocussed = Constants.ReplaceInputBoxFocussedKey.bindTo(_this.keyBindingService);
        _this.render(container, options);
        return _this;
    }
    SearchWidget.prototype.focus = function (select, focusReplace) {
        if (select === void 0) { select = true; }
        if (focusReplace === void 0) { focusReplace = false; }
        if ((!focusReplace && this.searchInput.inputBox.hasFocus())
            || (focusReplace && this.replaceInput.hasFocus())) {
            return;
        }
        if (focusReplace && this.isReplaceShown()) {
            this.replaceInput.focus();
            if (select) {
                this.replaceInput.select();
            }
        }
        else {
            this.searchInput.focus();
            if (select) {
                this.searchInput.select();
            }
        }
    };
    SearchWidget.prototype.setWidth = function (width) {
        this.searchInput.setWidth(width - 2);
        this.replaceInput.width = width - 28;
    };
    SearchWidget.prototype.clear = function () {
        this.searchInput.clear();
        this.replaceInput.value = '';
        this.setReplaceAllActionState(false);
    };
    SearchWidget.prototype.isReplaceShown = function () {
        return !dom.hasClass(this.replaceContainer, 'disabled');
    };
    SearchWidget.prototype.getReplaceValue = function () {
        return this.replaceInput.value;
    };
    SearchWidget.prototype.toggleReplace = function (show) {
        if (show === void 0 || show !== this.isReplaceShown()) {
            this.onToggleReplaceButton();
        }
    };
    SearchWidget.prototype.showNextSearchTerm = function () {
        var next = this.searchHistory.next();
        if (next) {
            this.searchInput.setValue(next);
        }
    };
    SearchWidget.prototype.showPreviousSearchTerm = function () {
        var previous = this.searchHistory.previous();
        if (previous) {
            this.searchInput.setValue(previous);
        }
    };
    SearchWidget.prototype.searchInputHasFocus = function () {
        return this.searchInputBoxFocussed.get();
    };
    SearchWidget.prototype.replaceInputHasFocus = function () {
        return this.replaceInput.hasFocus();
    };
    SearchWidget.prototype.render = function (container, options) {
        this.domNode = container.div({ 'class': 'search-widget' }).style({ position: 'relative' }).getHTMLElement();
        this.renderToggleReplaceButton(this.domNode);
        this.renderSearchInput(this.domNode, options);
        this.renderReplaceInput(this.domNode);
    };
    SearchWidget.prototype.renderToggleReplaceButton = function (parent) {
        var _this = this;
        this.toggleReplaceButton = this._register(new button_1.Button(parent));
        this.toggleReplaceButton.icon = 'toggle-replace-button collapse';
        this.toggleReplaceButton.addListener2('click', function () { return _this.onToggleReplaceButton(); });
        this.toggleReplaceButton.getElement().title = nls.localize('search.replace.toggle.button.title', "Toggle Replace");
    };
    SearchWidget.prototype.renderSearchInput = function (parent, options) {
        var _this = this;
        var inputOptions = {
            label: nls.localize('label.Search', 'Search: Type Search Term and press Enter to search or Escape to cancel'),
            validation: function (value) { return _this.validatSearchInput(value); },
            placeholder: nls.localize('search.placeHolder', "Search"),
            appendCaseSensitiveLabel: searchActions_1.appendKeyBindingLabel('', this.keyBindingService2.lookupKeybindings(Constants.ToggleCaseSensitiveActionId)[0], this.keyBindingService2),
            appendWholeWordsLabel: searchActions_1.appendKeyBindingLabel('', this.keyBindingService2.lookupKeybindings(Constants.ToggleWholeWordActionId)[0], this.keyBindingService2),
            appendRegexLabel: searchActions_1.appendKeyBindingLabel('', this.keyBindingService2.lookupKeybindings(Constants.ToggleRegexActionId)[0], this.keyBindingService2)
        };
        var searchInputContainer = dom.append(parent, dom.$('.search-container.input-box'));
        this.searchInput = this._register(new findInput_1.FindInput(searchInputContainer, this.contextViewService, inputOptions));
        this.searchInput.onKeyUp(function (keyboardEvent) { return _this.onSearchInputKeyUp(keyboardEvent); });
        this.searchInput.setValue(options.value || '');
        this.searchInput.setRegex(!!options.isRegex);
        this.searchInput.setCaseSensitive(!!options.isCaseSensitive);
        this.searchInput.setWholeWords(!!options.isWholeWords);
        this._register(this.onSearchSubmit(function () {
            _this.searchHistory.add(_this.searchInput.getValue());
        }));
        this.searchInputFocusTracker = this._register(dom.trackFocus(this.searchInput.inputBox.inputElement));
        this._register(this.searchInputFocusTracker.addFocusListener(function () {
            _this.searchInputBoxFocussed.set(true);
        }));
        this._register(this.searchInputFocusTracker.addBlurListener(function () {
            _this.searchInputBoxFocussed.set(false);
        }));
    };
    SearchWidget.prototype.renderReplaceInput = function (parent) {
        var _this = this;
        this.replaceContainer = dom.append(parent, dom.$('.replace-container.disabled'));
        var replaceBox = dom.append(this.replaceContainer, dom.$('.input-box'));
        this.replaceInput = this._register(new inputBox_1.InputBox(replaceBox, this.contextViewService, {
            ariaLabel: nls.localize('label.Replace', 'Replace: Type replace term and press Enter to preview or Escape to cancel'),
            placeholder: nls.localize('search.replace.placeHolder', "Replace")
        }));
        this.onkeyup(this.replaceInput.inputElement, function (keyboardEvent) { return _this.onReplaceInputKeyUp(keyboardEvent); });
        this.replaceInput.onDidChange(function () { return _this._onReplaceValueChanged.fire(); });
        this.searchInput.inputBox.onDidChange(function () { return _this.onSearchInputChanged(); });
        this.replaceAllAction = ReplaceAllAction.INSTANCE;
        this.replaceAllAction.searchWidget = this;
        this.replaceAllAction.label = SearchWidget.REPLACE_ALL_DISABLED_LABEL;
        this.replaceActionBar = this._register(new actionbar_1.ActionBar(this.replaceContainer));
        this.replaceActionBar.push([this.replaceAllAction], { icon: true, label: false });
        this.replaceInputFocusTracker = this._register(dom.trackFocus(this.replaceInput.inputElement));
        this._register(this.replaceInputFocusTracker.addFocusListener(function () {
            _this.replaceInputBoxFocussed.set(true);
        }));
        this._register(this.replaceInputFocusTracker.addBlurListener(function () {
            _this.replaceInputBoxFocussed.set(false);
        }));
    };
    SearchWidget.prototype.triggerReplaceAll = function () {
        this._onReplaceAll.fire();
        return winjs_base_1.TPromise.as(null);
    };
    SearchWidget.prototype.onToggleReplaceButton = function () {
        dom.toggleClass(this.replaceContainer, 'disabled');
        dom.toggleClass(this.toggleReplaceButton.getElement(), 'collapse');
        dom.toggleClass(this.toggleReplaceButton.getElement(), 'expand');
        this.updateReplaceActiveState();
        this._onReplaceToggled.fire();
    };
    SearchWidget.prototype.setReplaceAllActionState = function (enabled) {
        if (this.replaceAllAction.enabled !== enabled) {
            this.replaceAllAction.enabled = enabled;
            this.replaceAllAction.label = enabled ? SearchWidget.REPLACE_ALL_ENABLED_LABEL(this.keyBindingService2) : SearchWidget.REPLACE_ALL_DISABLED_LABEL;
            this.updateReplaceActiveState();
        }
    };
    SearchWidget.prototype.isReplaceActive = function () {
        return this.replaceActive.get();
    };
    SearchWidget.prototype.updateReplaceActiveState = function () {
        var currentState = this.isReplaceActive();
        var newState = this.isReplaceShown() && this.replaceAllAction.enabled;
        if (currentState !== newState) {
            this.replaceActive.set(newState);
            this._onReplaceStateChange.fire(newState);
        }
    };
    SearchWidget.prototype.validatSearchInput = function (value) {
        if (value.length === 0) {
            return null;
        }
        if (!this.searchInput.getRegex()) {
            return null;
        }
        var regExp;
        try {
            regExp = new RegExp(value);
        }
        catch (e) {
            return { content: e.message };
        }
        if (strings.regExpLeadsToEndlessLoop(regExp)) {
            return { content: nls.localize('regexp.validationFailure', "Expression matches everything") };
        }
    };
    SearchWidget.prototype.onSearchInputChanged = function () {
        this.setReplaceAllActionState(false);
    };
    SearchWidget.prototype.onSearchInputKeyUp = function (keyboardEvent) {
        switch (keyboardEvent.keyCode) {
            case 3 /* Enter */:
                this.submitSearch();
                return;
            case 9 /* Escape */:
                this._onSearchCancel.fire();
                return;
            default:
                return;
        }
    };
    SearchWidget.prototype.onReplaceInputKeyUp = function (keyboardEvent) {
        switch (keyboardEvent.keyCode) {
            case 3 /* Enter */:
                this.submitSearch();
                return;
            default:
                return;
        }
    };
    SearchWidget.prototype.submitSearch = function (refresh) {
        if (refresh === void 0) { refresh = true; }
        if (this.searchInput.getValue()) {
            this._onSearchSubmit.fire(refresh);
        }
    };
    SearchWidget.prototype.dispose = function () {
        this.setReplaceAllActionState(false);
        this.replaceAllAction.searchWidget = null;
        this.replaceActionBar = null;
        _super.prototype.dispose.call(this);
    };
    return SearchWidget;
}(widget_1.Widget));
SearchWidget.REPLACE_ALL_DISABLED_LABEL = nls.localize('search.action.replaceAll.disabled.label', "Replace All (Submit Search to Enable)");
SearchWidget.REPLACE_ALL_ENABLED_LABEL = function (keyBindingService2) {
    var keybindings = keyBindingService2.lookupKeybindings(ReplaceAllAction.ID);
    return searchActions_1.appendKeyBindingLabel(nls.localize('search.action.replaceAll.enabled.label', "Replace All"), keybindings[0], keyBindingService2);
};
exports.SearchWidget = SearchWidget;
function registerContributions() {
    keybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({
        id: ReplaceAllAction.ID,
        weight: keybindingsRegistry_1.KeybindingsRegistry.WEIGHT.workbenchContrib(),
        when: contextkey_1.ContextKeyExpr.and(Constants.SearchViewletVisibleKey, Constants.ReplaceActiveKey, findController_1.CONTEXT_FIND_WIDGET_NOT_VISIBLE),
        primary: 8192 /* Alt */ | 32768 /* CtrlCmd */ | 3 /* Enter */,
        handler: function (accessor) {
            if (searchActions_1.isSearchViewletFocussed(accessor.get(viewlet_1.IViewletService))) {
                ReplaceAllAction.INSTANCE.run();
            }
        }
    });
}
exports.registerContributions = registerContributions;
