/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
require("./media/search.contribution.css");
var platform_1 = require("vs/platform/platform");
var viewlet_1 = require("vs/workbench/browser/viewlet");
var configurationRegistry_1 = require("vs/platform/configuration/common/configurationRegistry");
var nls = require("vs/nls");
var files_1 = require("vs/workbench/parts/files/common/files");
var actions_1 = require("vs/platform/actions/common/actions");
var actionbar_1 = require("vs/base/browser/ui/actionbar/actionbar");
var actionBarRegistry_1 = require("vs/workbench/browser/actionBarRegistry");
var actionRegistry_1 = require("vs/workbench/common/actionRegistry");
var quickopen_1 = require("vs/workbench/browser/quickopen");
var keybindingsRegistry_1 = require("vs/platform/keybinding/common/keybindingsRegistry");
var instantiation_1 = require("vs/platform/instantiation/common/instantiation");
var descriptors_1 = require("vs/platform/instantiation/common/descriptors");
var workspace_1 = require("vs/platform/workspace/common/workspace");
var quickOpenService_1 = require("vs/workbench/services/quickopen/common/quickOpenService");
var viewlet_2 = require("vs/workbench/services/viewlet/browser/viewlet");
var searchActions = require("vs/workbench/parts/search/browser/searchActions");
var Constants = require("vs/workbench/parts/search/common/constants");
var replaceContributions_1 = require("vs/workbench/parts/search/browser/replaceContributions");
var searchWidget_1 = require("vs/workbench/parts/search/browser/searchWidget");
var contextkey_1 = require("vs/platform/contextkey/common/contextkey");
var findModel_1 = require("vs/editor/contrib/find/common/findModel");
replaceContributions_1.registerContributions();
searchWidget_1.registerContributions();
keybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({
    id: 'workbench.action.search.toggleQueryDetails',
    weight: keybindingsRegistry_1.KeybindingsRegistry.WEIGHT.workbenchContrib(),
    when: Constants.SearchViewletVisibleKey,
    primary: 32768 /* CtrlCmd */ | 16384 /* Shift */ | 40 /* KEY_J */,
    handler: function (accessor) {
        var viewletService = accessor.get(viewlet_2.IViewletService);
        viewletService.openViewlet(Constants.VIEWLET_ID, true)
            .then(function (viewlet) { return viewlet.toggleFileTypes(); });
    }
});
var ExplorerViewerActionContributor = (function (_super) {
    __extends(ExplorerViewerActionContributor, _super);
    function ExplorerViewerActionContributor(instantiationService, contextService) {
        var _this = _super.call(this) || this;
        _this._instantiationService = instantiationService;
        _this._contextService = contextService;
        return _this;
    }
    ExplorerViewerActionContributor.prototype.hasSecondaryActions = function (context) {
        var element = context.element;
        // Contribute only on file resources
        var fileResource = files_1.asFileResource(element);
        if (!fileResource) {
            return false;
        }
        return fileResource.isDirectory;
    };
    ExplorerViewerActionContributor.prototype.getSecondaryActions = function (context) {
        var actions = [];
        if (this.hasSecondaryActions(context)) {
            var fileResource = files_1.asFileResource(context.element);
            var action = new actions_1.DeferredAction(this._instantiationService, new descriptors_1.AsyncDescriptor('vs/workbench/parts/search/browser/searchActions', 'FindInFolderAction', fileResource.resource), 'workbench.search.action.findInFolder', nls.localize('findInFolder', "Find in Folder"));
            action.order = 55;
            actions.push(action);
            actions.push(new actionbar_1.Separator('', 56));
        }
        return actions;
    };
    return ExplorerViewerActionContributor;
}(actionBarRegistry_1.ActionBarContributor));
ExplorerViewerActionContributor = __decorate([
    __param(0, instantiation_1.IInstantiationService), __param(1, workspace_1.IWorkspaceContextService)
], ExplorerViewerActionContributor);
var ACTION_ID = 'workbench.action.showAllSymbols';
var ACTION_LABEL = nls.localize('showTriggerActions', "Go to Symbol in Workspace...");
var ALL_SYMBOLS_PREFIX = '#';
var ShowAllSymbolsAction = (function (_super) {
    __extends(ShowAllSymbolsAction, _super);
    function ShowAllSymbolsAction(actionId, actionLabel, quickOpenService) {
        return _super.call(this, actionId, actionLabel, ALL_SYMBOLS_PREFIX, quickOpenService) || this;
    }
    return ShowAllSymbolsAction;
}(quickopen_1.QuickOpenAction));
ShowAllSymbolsAction = __decorate([
    __param(2, quickOpenService_1.IQuickOpenService)
], ShowAllSymbolsAction);
// Register Viewlet
platform_1.Registry.as(viewlet_1.Extensions.Viewlets).registerViewlet(new viewlet_1.ViewletDescriptor('vs/workbench/parts/search/browser/searchViewlet', 'SearchViewlet', Constants.VIEWLET_ID, nls.localize('name', "Search"), 'search', 10));
// Actions
var registry = platform_1.Registry.as(actionRegistry_1.Extensions.WorkbenchActions);
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(searchActions.OpenSearchViewletAction, Constants.VIEWLET_ID, nls.localize('showSearchViewlet', "Show Search"), { primary: 32768 /* CtrlCmd */ | 16384 /* Shift */ | 36 /* KEY_F */ }, Constants.SearchViewletVisibleKey.toNegated()), 'View: Show Search', nls.localize('view', "View"));
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(searchActions.FocusActiveEditorAction, Constants.FocusActiveEditorActionId, '', { primary: 32768 /* CtrlCmd */ | 16384 /* Shift */ | 36 /* KEY_F */ }, contextkey_1.ContextKeyExpr.and(Constants.SearchViewletVisibleKey, Constants.SearchInputBoxFocussedKey)), '');
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(searchActions.FindInFilesAction, Constants.FindInFilesActionId, nls.localize('findInFiles', "Find in Files"), { primary: 32768 /* CtrlCmd */ | 16384 /* Shift */ | 36 /* KEY_F */ }, Constants.SearchInputBoxFocussedKey.toNegated()), 'Find in Files');
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(searchActions.ReplaceInFilesAction, searchActions.ReplaceInFilesAction.ID, searchActions.ReplaceInFilesAction.LABEL, { primary: 32768 /* CtrlCmd */ | 16384 /* Shift */ | 38 /* KEY_H */ }), 'Replace in Files');
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(searchActions.CloseReplaceAction, Constants.CloseReplaceWidgetActionId, '', { primary: 9 /* Escape */ }, contextkey_1.ContextKeyExpr.and(Constants.SearchViewletVisibleKey, Constants.ReplaceInputBoxFocussedKey)), '');
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(searchActions.ShowNextSearchTermAction, searchActions.ShowNextSearchTermAction.ID, searchActions.ShowNextSearchTermAction.LABEL, findModel_1.ShowNextFindTermKeybinding, contextkey_1.ContextKeyExpr.and(Constants.SearchViewletVisibleKey, Constants.SearchInputBoxFocussedKey)), '');
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(searchActions.ShowPreviousSearchTermAction, searchActions.ShowPreviousSearchTermAction.ID, searchActions.ShowPreviousSearchTermAction.LABEL, findModel_1.ShowPreviousFindTermKeybinding, contextkey_1.ContextKeyExpr.and(Constants.SearchViewletVisibleKey, Constants.SearchInputBoxFocussedKey)), '');
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(searchActions.FocusNextInputAction, searchActions.FocusNextInputAction.ID, searchActions.FocusNextInputAction.LABEL, { primary: 18 /* DownArrow */ }, contextkey_1.ContextKeyExpr.and(Constants.SearchViewletVisibleKey, Constants.InputBoxFocussedKey)), '');
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(searchActions.FocusPreviousInputAction, searchActions.FocusPreviousInputAction.ID, searchActions.FocusPreviousInputAction.LABEL, { primary: 16 /* UpArrow */ }, contextkey_1.ContextKeyExpr.and(Constants.SearchViewletVisibleKey, Constants.InputBoxFocussedKey, Constants.SearchInputBoxFocussedKey.toNegated())), '');
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(searchActions.ToggleCaseSensitiveAction, Constants.ToggleCaseSensitiveActionId, '', findModel_1.ToggleCaseSensitiveKeybinding, contextkey_1.ContextKeyExpr.and(Constants.SearchViewletVisibleKey, Constants.SearchInputBoxFocussedKey)), '');
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(searchActions.ToggleWholeWordAction, Constants.ToggleWholeWordActionId, '', findModel_1.ToggleWholeWordKeybinding, contextkey_1.ContextKeyExpr.and(Constants.SearchViewletVisibleKey, Constants.SearchInputBoxFocussedKey)), '');
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(searchActions.ToggleRegexAction, Constants.ToggleRegexActionId, '', findModel_1.ToggleRegexKeybinding, contextkey_1.ContextKeyExpr.and(Constants.SearchViewletVisibleKey, Constants.SearchInputBoxFocussedKey)), '');
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(ShowAllSymbolsAction, ACTION_ID, ACTION_LABEL, { primary: 32768 /* CtrlCmd */ | 50 /* KEY_T */ }), 'Go to Symbol in Workspace...');
// Contribute to Explorer Viewer
var actionBarRegistry = platform_1.Registry.as(actionBarRegistry_1.Extensions.Actionbar);
actionBarRegistry.registerActionBarContributor(actionBarRegistry_1.Scope.VIEWER, ExplorerViewerActionContributor);
// Register Quick Open Handler
platform_1.Registry.as(quickopen_1.Extensions.Quickopen).registerDefaultQuickOpenHandler(new quickopen_1.QuickOpenHandlerDescriptor('vs/workbench/parts/search/browser/openAnythingHandler', 'OpenAnythingHandler', '', nls.localize('openAnythingHandlerDescription', "Go to File")));
platform_1.Registry.as(quickopen_1.Extensions.Quickopen).registerQuickOpenHandler(new quickopen_1.QuickOpenHandlerDescriptor('vs/workbench/parts/search/browser/openAnythingHandler', 'OpenSymbolHandler', ALL_SYMBOLS_PREFIX, [
    {
        prefix: ALL_SYMBOLS_PREFIX,
        needsEditor: false,
        description: nls.localize('openSymbolDescriptionNormal', "Go to Symbol in Workspace")
    }
]));
// Configuration
var configurationRegistry = platform_1.Registry.as(configurationRegistry_1.Extensions.Configuration);
configurationRegistry.registerConfiguration({
    'id': 'search',
    'order': 13,
    'title': nls.localize('searchConfigurationTitle', "Search"),
    'type': 'object',
    'properties': {
        'search.exclude': {
            'type': 'object',
            'description': nls.localize('exclude', "Configure glob patterns for excluding files and folders in searches. Inherits all glob patterns from the files.exclude setting."),
            'default': { '**/node_modules': true, '**/bower_components': true },
            'additionalProperties': {
                'anyOf': [
                    {
                        'type': 'boolean',
                        'description': nls.localize('exclude.boolean', "The glob pattern to match file paths against. Set to true or false to enable or disable the pattern."),
                    },
                    {
                        'type': 'object',
                        'properties': {
                            'when': {
                                'type': 'string',
                                'pattern': '\\w*\\$\\(basename\\)\\w*',
                                'default': '$(basename).ext',
                                'description': nls.localize('exclude.when', 'Additional check on the siblings of a matching file. Use $(basename) as variable for the matching file name.')
                            }
                        }
                    }
                ]
            }
        },
        'search.quickOpen.includeSymbols': {
            'type': 'boolean',
            'description': nls.localize('search.quickOpen.includeSymbols', "Configure to include results from a global symbol search in the file results for Quick Open."),
            'default': false
        }
    }
});
