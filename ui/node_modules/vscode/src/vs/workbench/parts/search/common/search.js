/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var winjs_base_1 = require("vs/base/common/winjs.base");
var errors_1 = require("vs/base/common/errors");
var editorCommonExtensions_1 = require("vs/editor/common/editorCommonExtensions");
var WorkspaceSymbolProviderRegistry;
(function (WorkspaceSymbolProviderRegistry) {
    var _supports = [];
    function register(support) {
        if (support) {
            _supports.push(support);
        }
        return {
            dispose: function () {
                if (support) {
                    var idx = _supports.indexOf(support);
                    if (idx >= 0) {
                        _supports.splice(idx, 1);
                        support = undefined;
                    }
                }
            }
        };
    }
    WorkspaceSymbolProviderRegistry.register = register;
    function all() {
        return _supports.slice(0);
    }
    WorkspaceSymbolProviderRegistry.all = all;
})(WorkspaceSymbolProviderRegistry = exports.WorkspaceSymbolProviderRegistry || (exports.WorkspaceSymbolProviderRegistry = {}));
function getWorkspaceSymbols(query) {
    var result = [];
    var promises = WorkspaceSymbolProviderRegistry.all().map(function (support) {
        return support.provideWorkspaceSymbols(query).then(function (value) {
            if (Array.isArray(value)) {
                result.push([support, value]);
            }
        }, errors_1.onUnexpectedError);
    });
    return winjs_base_1.TPromise.join(promises).then(function (_) { return result; });
}
exports.getWorkspaceSymbols = getWorkspaceSymbols;
editorCommonExtensions_1.CommonEditorRegistry.registerLanguageCommand('_executeWorkspaceSymbolProvider', function (accessor, args) {
    var query = args.query;
    if (typeof query !== 'string') {
        throw errors_1.illegalArgument();
    }
    return getWorkspaceSymbols(query);
});
