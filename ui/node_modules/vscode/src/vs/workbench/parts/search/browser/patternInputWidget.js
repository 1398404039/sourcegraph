/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var nls = require('vs/nls');
var dom = require('vs/base/browser/dom');
var strings = require('vs/base/common/strings');
var builder_1 = require('vs/base/browser/builder');
var widget_1 = require('vs/base/browser/ui/widget');
var glob_1 = require('vs/base/common/glob');
var checkbox_1 = require('vs/base/browser/ui/checkbox/checkbox');
var inputBox_1 = require('vs/base/browser/ui/inputbox/inputBox');
var event_1 = require('vs/base/common/event');
var PatternInputWidget = (function (_super) {
    __extends(PatternInputWidget, _super);
    function PatternInputWidget(parent, contextViewProvider, options) {
        if (options === void 0) { options = Object.create(null); }
        _super.call(this);
        this.contextViewProvider = contextViewProvider;
        this._onSubmit = this._register(new event_1.Emitter());
        this.onSubmit = this._onSubmit.event;
        this.onOptionChange = null;
        this.width = options.width || 100;
        this.placeholder = options.placeholder || '';
        this.ariaLabel = options.ariaLabel || nls.localize('defaultLabel', "input");
        this.toDispose = [];
        this.pattern = null;
        this.domNode = null;
        this.inputNode = null;
        this.inputBox = null;
        this.render();
        parent.appendChild(this.domNode);
    }
    PatternInputWidget.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.pattern.dispose();
        this.toDispose.forEach(function (element) {
            element();
        });
        if (this.inputFocusTracker) {
            this.inputFocusTracker.dispose();
        }
        this.toDispose = [];
    };
    PatternInputWidget.prototype.on = function (eventType, handler) {
        switch (eventType) {
            case 'keydown':
            case 'keyup':
                builder_1.$(this.inputBox.inputElement).on(eventType, handler);
                break;
            case PatternInputWidget.OPTION_CHANGE:
                this.onOptionChange = handler;
                break;
        }
        return this;
    };
    PatternInputWidget.prototype.setWidth = function (newWidth) {
        this.width = newWidth;
        this.domNode.style.width = this.width + 'px';
        this.contextViewProvider.layout();
        this.setInputWidth();
    };
    PatternInputWidget.prototype.getValue = function () {
        return this.inputBox.value;
    };
    PatternInputWidget.prototype.setValue = function (value) {
        if (this.inputBox.value !== value) {
            this.inputBox.value = value;
        }
    };
    PatternInputWidget.prototype.getGlob = function () {
        var pattern = this.getValue();
        var isGlobPattern = this.isGlobPattern();
        if (!pattern) {
            return void 0;
        }
        var glob = Object.create(null);
        var segments;
        if (isGlobPattern) {
            segments = glob_1.splitGlobAware(pattern, ',').map(function (s) { return s.trim(); }).filter(function (s) { return !!s.length; });
        }
        else {
            segments = pattern.split(',').map(function (s) { return strings.trim(s.trim(), '/'); }).filter(function (s) { return !!s.length; }).map(function (p) {
                if (p[0] === '.') {
                    p = '*' + p; // convert ".js" to "*.js"
                }
                return strings.format('{{0}/**,**/{1}}', p, p); // convert foo to {foo/**,**/foo} to cover files and folders
            });
        }
        return segments.reduce(function (prev, cur) { glob[cur] = true; return glob; }, glob);
    };
    PatternInputWidget.prototype.select = function () {
        this.inputBox.select();
    };
    PatternInputWidget.prototype.focus = function () {
        this.inputBox.focus();
    };
    PatternInputWidget.prototype.inputHasFocus = function () {
        return this.inputBox.hasFocus();
    };
    PatternInputWidget.prototype.isGlobPattern = function () {
        return this.pattern.checked;
    };
    PatternInputWidget.prototype.setIsGlobPattern = function (value) {
        this.pattern.checked = value;
        this.setInputWidth();
    };
    PatternInputWidget.prototype.setInputWidth = function () {
        var w = this.width - this.pattern.width();
        this.inputBox.width = w;
    };
    PatternInputWidget.prototype.render = function () {
        var _this = this;
        this.domNode = document.createElement('div');
        this.domNode.style.width = this.width + 'px';
        builder_1.$(this.domNode).addClass('monaco-findInput');
        this.inputBox = new inputBox_1.InputBox(this.domNode, this.contextViewProvider, {
            placeholder: this.placeholder || '',
            ariaLabel: this.ariaLabel || '',
            validationOptions: {
                validation: null,
                showMessage: true
            }
        });
        this.inputFocusTracker = dom.trackFocus(this.inputBox.inputElement);
        this.onkeyup(this.inputBox.inputElement, function (keyboardEvent) { return _this.onInputKeyUp(keyboardEvent); });
        this.pattern = new checkbox_1.Checkbox({
            actionClassName: 'pattern',
            title: nls.localize('patternDescription', "Use Glob Patterns"),
            isChecked: false,
            onChange: function (viaKeyboard) {
                _this.onOptionChange(null);
                if (!viaKeyboard) {
                    _this.inputBox.focus();
                }
                _this.setInputWidth();
                if (_this.isGlobPattern()) {
                    _this.showGlobHelp();
                }
                else {
                    _this.inputBox.hideMessage();
                }
            }
        });
        builder_1.$(this.pattern.domNode).on('mouseover', function () {
            if (_this.isGlobPattern()) {
                _this.showGlobHelp();
            }
        });
        builder_1.$(this.pattern.domNode).on(['mouseleave', 'mouseout'], function () {
            _this.inputBox.hideMessage();
        });
        this.setInputWidth();
        var controls = document.createElement('div');
        controls.className = 'controls';
        controls.appendChild(this.pattern.domNode);
        this.domNode.appendChild(controls);
    };
    PatternInputWidget.prototype.showGlobHelp = function () {
        this.inputBox.showMessage({
            type: inputBox_1.MessageType.INFO,
            formatContent: true,
            content: nls.localize('patternHelpInclude', "The pattern to match. e.g. **\\*\\*/*.js** to match all JavaScript files or **myFolder/\\*\\*** to match that folder with all children.\n\n**Reference**:\n**\\*** matches 0 or more characters\n**?** matches 1 character\n**\\*\\*** matches zero or more directories\n**[a-z]** matches a range of characters\n**{a,b}** matches any of the patterns)")
        }, true);
    };
    PatternInputWidget.prototype.onInputKeyUp = function (keyboardEvent) {
        switch (keyboardEvent.keyCode) {
            case 3 /* Enter */:
                this._onSubmit.fire();
                return;
            default:
                return;
        }
    };
    PatternInputWidget.OPTION_CHANGE = 'optionChange';
    return PatternInputWidget;
}(widget_1.Widget));
exports.PatternInputWidget = PatternInputWidget;
