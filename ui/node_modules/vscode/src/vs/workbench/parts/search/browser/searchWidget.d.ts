import * as dom from 'vs/base/browser/dom';
import { TPromise } from 'vs/base/common/winjs.base';
import { Widget } from 'vs/base/browser/ui/widget';
import { FindInput } from 'vs/base/browser/ui/findinput/findInput';
import { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';
import { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';
import { IContextViewService } from 'vs/platform/contextview/browser/contextView';
import Event from 'vs/base/common/event';
import { Builder } from 'vs/base/browser/builder';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
export interface ISearchWidgetOptions {
    value?: string;
    isRegex?: boolean;
    isCaseSensitive?: boolean;
    isWholeWords?: boolean;
}
export declare class SearchWidget extends Widget {
    private contextViewService;
    private keyBindingService;
    private keyBindingService2;
    private instantiationService;
    private static REPLACE_ALL_DISABLED_LABEL;
    private static REPLACE_ALL_ENABLED_LABEL;
    domNode: HTMLElement;
    searchInput: FindInput;
    private searchInputBoxFocussed;
    private replaceInput;
    searchInputFocusTracker: dom.IFocusTracker;
    replaceInputFocusTracker: dom.IFocusTracker;
    private replaceContainer;
    private toggleReplaceButton;
    private replaceAllAction;
    private replaceActive;
    private replaceActionBar;
    private searchHistory;
    private _onSearchSubmit;
    onSearchSubmit: Event<boolean>;
    private _onSearchCancel;
    onSearchCancel: Event<void>;
    private _onReplaceToggled;
    onReplaceToggled: Event<void>;
    private _onReplaceStateChange;
    onReplaceStateChange: Event<boolean>;
    private _onReplaceValueChanged;
    onReplaceValueChanged: Event<string>;
    private _onReplaceAll;
    onReplaceAll: Event<void>;
    constructor(container: Builder, contextViewService: IContextViewService, options: ISearchWidgetOptions, keyBindingService: IContextKeyService, keyBindingService2: IKeybindingService, instantiationService: IInstantiationService);
    focus(select?: boolean, focusReplace?: boolean): void;
    setWidth(width: number): void;
    clear(): void;
    isReplaceShown(): boolean;
    getReplaceValue(): string;
    toggleReplace(show?: boolean): void;
    showNextSearchTerm(): void;
    showPreviousSearchTerm(): void;
    searchInputHasFocus(): boolean;
    replaceInputHasFocus(): boolean;
    private render(container, options);
    private renderToggleReplaceButton(parent);
    private renderSearchInput(parent, options);
    private renderReplaceInput(parent);
    triggerReplaceAll(): TPromise<any>;
    private onToggleReplaceButton();
    setReplaceAllActionState(enabled: boolean): void;
    private isReplaceActive();
    private updateReplaceActiveState();
    private validatSearchInput(value);
    private onSearchInputChanged();
    private onSearchInputKeyUp(keyboardEvent);
    private onReplaceInputKeyUp(keyboardEvent);
    private submitSearch(refresh?);
    dispose(): void;
}
export declare function registerContributions(): void;
