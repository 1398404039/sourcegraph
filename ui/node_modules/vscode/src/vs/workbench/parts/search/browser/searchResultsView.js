/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var nls = require("vs/nls");
var strings = require("vs/base/common/strings");
var platform = require("vs/base/common/platform");
var errors = require("vs/base/common/errors");
var paths = require("vs/base/common/paths");
var dom = require("vs/base/browser/dom");
var builder_1 = require("vs/base/browser/builder");
var winjs_base_1 = require("vs/base/common/winjs.base");
var actionsRenderer_1 = require("vs/base/parts/tree/browser/actionsRenderer");
var countBadge_1 = require("vs/base/browser/ui/countBadge/countBadge");
var labels_1 = require("vs/workbench/browser/labels");
var leftRightWidget_1 = require("vs/base/browser/ui/leftRightWidget/leftRightWidget");
var treeDefaults_1 = require("vs/base/parts/tree/browser/treeDefaults");
var actionBarRegistry_1 = require("vs/workbench/browser/actionBarRegistry");
var searchModel_1 = require("vs/workbench/parts/search/common/searchModel");
var workspace_1 = require("vs/platform/workspace/common/workspace");
var range_1 = require("vs/editor/common/core/range");
var searchActions_1 = require("vs/workbench/parts/search/browser/searchActions");
var instantiation_1 = require("vs/platform/instantiation/common/instantiation");
var SearchDataSource = (function () {
    function SearchDataSource() {
    }
    SearchDataSource.prototype.getId = function (tree, element) {
        if (element instanceof searchModel_1.FileMatch) {
            return element.id();
        }
        if (element instanceof searchModel_1.Match) {
            return element.id();
        }
        return 'root';
    };
    SearchDataSource.prototype.getChildren = function (tree, element) {
        var value = [];
        if (element instanceof searchModel_1.FileMatch) {
            value = element.matches();
        }
        else if (element instanceof searchModel_1.SearchResult) {
            value = element.matches();
        }
        return winjs_base_1.TPromise.as(value);
    };
    SearchDataSource.prototype.hasChildren = function (tree, element) {
        return element instanceof searchModel_1.FileMatch || element instanceof searchModel_1.SearchResult;
    };
    SearchDataSource.prototype.getParent = function (tree, element) {
        var value = null;
        if (element instanceof searchModel_1.Match) {
            value = element.parent();
        }
        else if (element instanceof searchModel_1.FileMatch) {
            value = element.parent();
        }
        return winjs_base_1.TPromise.as(value);
    };
    return SearchDataSource;
}());
exports.SearchDataSource = SearchDataSource;
var SearchSorter = (function () {
    function SearchSorter() {
    }
    SearchSorter.prototype.compare = function (tree, elementA, elementB) {
        if (elementA instanceof searchModel_1.FileMatch && elementB instanceof searchModel_1.FileMatch) {
            return elementA.resource().fsPath.localeCompare(elementB.resource().fsPath) || elementA.name().localeCompare(elementB.name());
        }
        if (elementA instanceof searchModel_1.Match && elementB instanceof searchModel_1.Match) {
            return range_1.Range.compareRangesUsingStarts(elementA.range(), elementB.range());
        }
    };
    return SearchSorter;
}());
exports.SearchSorter = SearchSorter;
var SearchActionProvider = (function (_super) {
    __extends(SearchActionProvider, _super);
    function SearchActionProvider(viewlet, instantiationService) {
        var _this = _super.call(this) || this;
        _this.viewlet = viewlet;
        _this.instantiationService = instantiationService;
        return _this;
    }
    SearchActionProvider.prototype.hasActions = function (tree, element) {
        var input = tree.getInput();
        return element instanceof searchModel_1.FileMatch || (input.searchModel.isReplaceActive() || element instanceof searchModel_1.Match) || _super.prototype.hasActions.call(this, tree, element);
    };
    SearchActionProvider.prototype.getActions = function (tree, element) {
        var _this = this;
        return _super.prototype.getActions.call(this, tree, element).then(function (actions) {
            var input = tree.getInput();
            if (element instanceof searchModel_1.FileMatch) {
                actions.unshift(new searchActions_1.RemoveAction(tree, element));
                if (input.searchModel.isReplaceActive() && element.count() > 0) {
                    actions.unshift(_this.instantiationService.createInstance(searchActions_1.ReplaceAllAction, tree, element, _this.viewlet));
                }
            }
            if (element instanceof searchModel_1.Match) {
                if (input.searchModel.isReplaceActive()) {
                    actions.unshift(_this.instantiationService.createInstance(searchActions_1.ReplaceAction, tree, element, _this.viewlet), new searchActions_1.RemoveAction(tree, element));
                }
            }
            return actions;
        });
    };
    return SearchActionProvider;
}(actionBarRegistry_1.ContributableActionProvider));
SearchActionProvider = __decorate([
    __param(1, instantiation_1.IInstantiationService)
], SearchActionProvider);
var SearchRenderer = (function (_super) {
    __extends(SearchRenderer, _super);
    function SearchRenderer(actionRunner, viewlet, contextService, instantiationService) {
        var _this = _super.call(this, {
            actionProvider: instantiationService.createInstance(SearchActionProvider, viewlet),
            actionRunner: actionRunner
        }) || this;
        _this.contextService = contextService;
        _this.instantiationService = instantiationService;
        return _this;
    }
    SearchRenderer.prototype.getContentHeight = function (tree, element) {
        return 22;
    };
    SearchRenderer.prototype.renderContents = function (tree, element, domElement, previousCleanupFn) {
        var _this = this;
        // File
        if (element instanceof searchModel_1.FileMatch) {
            var fileMatch_1 = element;
            var container = builder_1.$('.filematch');
            var leftRenderer = void 0;
            var rightRenderer = void 0;
            var widget = void 0;
            leftRenderer = function (left) {
                var label = _this.instantiationService.createInstance(labels_1.FileLabel, left, void 0);
                label.setFile(fileMatch_1.resource());
                return function () { return label.dispose(); };
            };
            rightRenderer = function (right) {
                var len = fileMatch_1.count();
                return new countBadge_1.CountBadge(right, len, len > 1 ? nls.localize('searchMatches', "{0} matches found", len) : nls.localize('searchMatch', "{0} match found", len));
            };
            widget = new leftRightWidget_1.LeftRightWidget(container, leftRenderer, rightRenderer);
            container.appendTo(domElement);
            return widget.dispose.bind(widget);
        }
        else if (element instanceof searchModel_1.Match) {
            dom.addClass(domElement, 'linematch');
            var match = element;
            var elements = [];
            var preview = match.preview();
            elements.push('<span>');
            elements.push(strings.escape(preview.before));
            var searchModel = tree.getInput().searchModel;
            var showReplaceText = searchModel.isReplaceActive() && !!searchModel.replaceString;
            elements.push('</span><span class="' + (showReplaceText ? 'replace ' : '') + 'findInFileMatch">');
            elements.push(strings.escape(preview.inside));
            if (showReplaceText) {
                elements.push('</span><span class="replaceMatch">');
                elements.push(strings.escape(match.replaceString));
            }
            elements.push('</span><span>');
            elements.push(strings.escape(preview.after));
            elements.push('</span>');
            builder_1.$('a.plain')
                .innerHtml(elements.join(strings.empty))
                .title((preview.before + (showReplaceText ? match.replaceString : preview.inside) + preview.after).trim().substr(0, 999))
                .appendTo(domElement);
        }
        return null;
    };
    return SearchRenderer;
}(actionsRenderer_1.ActionsRenderer));
SearchRenderer = __decorate([
    __param(2, workspace_1.IWorkspaceContextService),
    __param(3, instantiation_1.IInstantiationService)
], SearchRenderer);
exports.SearchRenderer = SearchRenderer;
var SearchAccessibilityProvider = (function () {
    function SearchAccessibilityProvider(contextService) {
        this.contextService = contextService;
    }
    SearchAccessibilityProvider.prototype.getAriaLabel = function (tree, element) {
        if (element instanceof searchModel_1.FileMatch) {
            var path = this.contextService.toWorkspaceRelativePath(element.resource()) || element.resource().fsPath;
            return nls.localize('fileMatchAriaLabel', "{0} matches in file {1} of folder {2}, Search result", element.count(), element.name(), paths.dirname(path));
        }
        if (element instanceof searchModel_1.Match) {
            var match = element;
            var input = tree.getInput();
            if (input.searchModel.isReplaceActive()) {
                var preview = match.preview();
                return nls.localize('replacePreviewResultAria', "Replace preview result, {0}", preview.before + match.replaceString + preview.after);
            }
            return nls.localize('searchResultAria', "{0}, Search result", match.text());
        }
    };
    return SearchAccessibilityProvider;
}());
SearchAccessibilityProvider = __decorate([
    __param(0, workspace_1.IWorkspaceContextService)
], SearchAccessibilityProvider);
exports.SearchAccessibilityProvider = SearchAccessibilityProvider;
var SearchController = (function (_super) {
    __extends(SearchController, _super);
    function SearchController(viewlet, instantiationService) {
        var _this = _super.call(this, { clickBehavior: treeDefaults_1.ClickBehavior.ON_MOUSE_DOWN }) || this;
        _this.viewlet = viewlet;
        _this.instantiationService = instantiationService;
        if (platform.isMacintosh) {
            _this.downKeyBindingDispatcher.set(32768 /* CtrlCmd */ | 1 /* Backspace */, function (tree, event) { _this.onDelete(tree, event); });
            _this.upKeyBindingDispatcher.set(4096 /* WinCtrl */ | 3 /* Enter */, _this.onEnter.bind(_this));
        }
        else {
            _this.downKeyBindingDispatcher.set(20 /* Delete */, function (tree, event) { _this.onDelete(tree, event); });
            _this.upKeyBindingDispatcher.set(32768 /* CtrlCmd */ | 3 /* Enter */, _this.onEnter.bind(_this));
        }
        _this.downKeyBindingDispatcher.set(searchActions_1.ReplaceAllAction.KEY_BINDING, function (tree, event) { _this.onReplaceAll(tree, event); });
        _this.downKeyBindingDispatcher.set(searchActions_1.ReplaceAction.KEY_BINDING, function (tree, event) { _this.onReplace(tree, event); });
        _this.downKeyBindingDispatcher.set(9 /* Escape */, function (tree, event) { _this.onEscape(tree, event); });
        return _this;
    }
    SearchController.prototype.onEscape = function (tree, event) {
        if (this.viewlet.cancelSearch()) {
            return true;
        }
        return _super.prototype.onEscape.call(this, tree, event);
    };
    SearchController.prototype.onDelete = function (tree, event) {
        var input = tree.getInput();
        var result = false;
        var element = tree.getFocus();
        if (element instanceof searchModel_1.FileMatch ||
            (element instanceof searchModel_1.Match && input.searchModel.isReplaceActive())) {
            new searchActions_1.RemoveAction(tree, element).run().done(null, errors.onUnexpectedError);
            result = true;
        }
        return result;
    };
    SearchController.prototype.onReplace = function (tree, event) {
        var input = tree.getInput();
        var result = false;
        var element = tree.getFocus();
        if (element instanceof searchModel_1.Match && input.searchModel.isReplaceActive()) {
            this.instantiationService.createInstance(searchActions_1.ReplaceAction, tree, element, this.viewlet).run().done(null, errors.onUnexpectedError);
            result = true;
        }
        return result;
    };
    SearchController.prototype.onReplaceAll = function (tree, event) {
        var result = false;
        var element = tree.getFocus();
        if (element instanceof searchModel_1.FileMatch && element.count() > 0) {
            this.instantiationService.createInstance(searchActions_1.ReplaceAllAction, tree, element, this.viewlet).run().done(null, errors.onUnexpectedError);
            result = true;
        }
        return result;
    };
    SearchController.prototype.onUp = function (tree, event) {
        if (tree.getNavigator().first() === tree.getFocus()) {
            this.viewlet.moveFocusFromResults();
            return true;
        }
        return _super.prototype.onUp.call(this, tree, event);
    };
    SearchController.prototype.onSpace = function (tree, event) {
        var element = tree.getFocus();
        if (element instanceof searchModel_1.Match) {
            return this.onEnter(tree, event);
        }
        _super.prototype.onSpace.call(this, tree, event);
    };
    return SearchController;
}(treeDefaults_1.DefaultController));
SearchController = __decorate([
    __param(1, instantiation_1.IInstantiationService)
], SearchController);
exports.SearchController = SearchController;
var SearchFilter = (function () {
    function SearchFilter() {
    }
    SearchFilter.prototype.isVisible = function (tree, element) {
        return !(element instanceof searchModel_1.FileMatch) || element.matches().length > 0;
    };
    return SearchFilter;
}());
exports.SearchFilter = SearchFilter;
