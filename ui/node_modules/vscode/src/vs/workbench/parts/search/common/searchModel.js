/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var timer = require('vs/base/common/timer');
var paths = require('vs/base/common/paths');
var strings = require('vs/base/common/strings');
var errors = require('vs/base/common/errors');
var async_1 = require('vs/base/common/async');
var lifecycle_1 = require('vs/base/common/lifecycle');
var map_1 = require('vs/base/common/map');
var set_1 = require('vs/base/common/set');
var event_1 = require('vs/base/common/event');
var replace_1 = require('vs/platform/search/common/replace');
var telemetry_1 = require('vs/platform/telemetry/common/telemetry');
var range_1 = require('vs/editor/common/core/range');
var editorCommon_1 = require('vs/editor/common/editorCommon');
var instantiation_1 = require('vs/platform/instantiation/common/instantiation');
var modelService_1 = require('vs/editor/common/services/modelService');
var search_1 = require('vs/platform/search/common/search');
var replace_2 = require('vs/workbench/parts/search/common/replace');
var rangeDecorations_1 = require('vs/workbench/common/editor/rangeDecorations');
var Match = (function () {
    function Match(_parent, text, lineNumber, offset, length) {
        this._parent = _parent;
        this._lineText = text;
        this._range = new range_1.Range(1 + lineNumber, 1 + offset, 1 + lineNumber, 1 + offset + length);
        this._id = this._parent.id() + '>' + lineNumber + '>' + offset + this.getMatchString();
    }
    Match.prototype.id = function () {
        return this._id;
    };
    Match.prototype.parent = function () {
        return this._parent;
    };
    Match.prototype.text = function () {
        return this._lineText;
    };
    Match.prototype.range = function () {
        return this._range;
    };
    Match.prototype.preview = function () {
        var before = this._lineText.substring(0, this._range.startColumn - 1), inside = this.getMatchString(), after = this._lineText.substring(this._range.endColumn - 1, Math.min(this._range.endColumn + 150, this._lineText.length));
        before = strings.lcut(before, 26);
        return {
            before: before,
            inside: inside,
            after: after,
        };
    };
    Object.defineProperty(Match.prototype, "replaceString", {
        get: function () {
            var searchModel = this.parent().parent().searchModel;
            var matchString = this.getMatchString();
            var replaceString = searchModel.replacePattern.getReplaceString(matchString);
            // If match string is not matching then regex pattern has a lookahead expression
            if (replaceString === null) {
                replaceString = searchModel.replacePattern.getReplaceString(matchString + this._lineText.substring(this._range.endColumn - 1));
            }
            return replaceString;
        },
        enumerable: true,
        configurable: true
    });
    Match.prototype.getMatchString = function () {
        return this._lineText.substring(this._range.startColumn - 1, this._range.endColumn - 1);
    };
    return Match;
}());
exports.Match = Match;
var FileMatch = (function (_super) {
    __extends(FileMatch, _super);
    function FileMatch(_query, _parent, rawMatch, modelService, replaceService) {
        _super.call(this);
        this._query = _query;
        this._parent = _parent;
        this.rawMatch = rawMatch;
        this.modelService = modelService;
        this.replaceService = replaceService;
        this._onChange = this._register(new event_1.Emitter());
        this.onChange = this._onChange.event;
        this._onDispose = this._register(new event_1.Emitter());
        this.onDispose = this._onDispose.event;
        this._modelDecorations = [];
        this._resource = this.rawMatch.resource;
        this._matches = new map_1.LinkedMap();
        this._removedMatches = new set_1.ArraySet();
        this._updateScheduler = new async_1.RunOnceScheduler(this.updateMatches.bind(this), 250);
        this.createMatches();
        this.registerListeners();
    }
    FileMatch.getDecorationOption = function (selected) {
        return {
            stickiness: editorCommon_1.TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges,
            className: selected ? 'currentFindMatch' : 'findMatch',
            overviewRuler: {
                color: 'rgba(246, 185, 77, 0.7)',
                darkColor: 'rgba(246, 185, 77, 0.7)',
                position: editorCommon_1.OverviewRulerLane.Center
            }
        };
    };
    FileMatch.prototype.createMatches = function () {
        var _this = this;
        var model = this.modelService.getModel(this._resource);
        if (model) {
            this.bindModel(model);
            this.updateMatches();
        }
        else {
            this.rawMatch.lineMatches.forEach(function (rawLineMatch) {
                rawLineMatch.offsetAndLengths.forEach(function (offsetAndLength) {
                    var match = new Match(_this, rawLineMatch.preview, rawLineMatch.lineNumber, offsetAndLength[0], offsetAndLength[1]);
                    _this.add(match);
                });
            });
        }
    };
    FileMatch.prototype.registerListeners = function () {
        var _this = this;
        this._register(this.modelService.onModelAdded(function (model) {
            if (model.uri.toString() === _this._resource.toString()) {
                _this.bindModel(model);
            }
        }));
    };
    FileMatch.prototype.bindModel = function (model) {
        var _this = this;
        this._model = model;
        this._modelListener = this._model.onDidChangeContent(function (_) {
            _this._updateScheduler.schedule();
        });
        this._model.onWillDispose(function () { return _this.onModelWillDispose(); });
        this.updateHighlights();
    };
    FileMatch.prototype.onModelWillDispose = function () {
        // Update matches because model might have some dirty changes
        this.updateMatches();
        this.unbindModel();
    };
    FileMatch.prototype.unbindModel = function () {
        if (this._model) {
            this._updateScheduler.cancel();
            this._model.deltaDecorations(this._modelDecorations, []);
            this._model = null;
            this._modelListener.dispose();
        }
    };
    FileMatch.prototype.updateMatches = function () {
        var _this = this;
        // this is called from a timeout and might fire
        // after the model has been disposed
        if (!this._model) {
            return;
        }
        this._matches = new map_1.LinkedMap();
        var matches = this._model
            .findMatches(this._query.pattern, this._model.getFullModelRange(), this._query.isRegExp, this._query.isCaseSensitive, this._query.isWordMatch);
        matches.forEach(function (range) {
            var match = new Match(_this, _this._model.getLineContent(range.startLineNumber), range.startLineNumber - 1, range.startColumn - 1, range.endColumn - range.startColumn);
            if (!_this._removedMatches.contains(match.id())) {
                _this.add(match);
                if (_this.isMatchSelected(match)) {
                    _this._selectedMatch = match;
                }
            }
        });
        this._onChange.fire(true);
        this.updateHighlights();
    };
    FileMatch.prototype.updateHighlights = function () {
        var _this = this;
        if (!this._model) {
            return;
        }
        if (this.parent().showHighlights) {
            this._modelDecorations = this._model.deltaDecorations(this._modelDecorations, this.matches().map(function (match) { return {
                range: match.range(),
                options: FileMatch.getDecorationOption(_this.isMatchSelected(match))
            }; }));
        }
        else {
            this._modelDecorations = this._model.deltaDecorations(this._modelDecorations, []);
        }
    };
    FileMatch.prototype.id = function () {
        return this.resource().toString();
    };
    FileMatch.prototype.parent = function () {
        return this._parent;
    };
    FileMatch.prototype.matches = function () {
        return this._matches.values();
    };
    FileMatch.prototype.remove = function (match) {
        this.removeMatch(match);
        this._removedMatches.set(match.id());
        this._onChange.fire(false);
    };
    FileMatch.prototype.replace = function (match) {
        var _this = this;
        return this.replaceService.replace(match).then(function () {
            _this.removeMatch(match);
            _this._onChange.fire(false);
        });
    };
    FileMatch.prototype.setSelectedMatch = function (match) {
        if (match) {
            if (!this._matches.has(match.id())) {
                return;
            }
            if (this.isMatchSelected(match)) {
                return;
            }
        }
        this._selectedMatch = match;
        this.updateHighlights();
    };
    FileMatch.prototype.getSelectedMatch = function () {
        return this._selectedMatch;
    };
    FileMatch.prototype.isMatchSelected = function (match) {
        return this._selectedMatch && this._selectedMatch.id() === match.id();
    };
    FileMatch.prototype.count = function () {
        return this.matches().length;
    };
    FileMatch.prototype.resource = function () {
        return this._resource;
    };
    FileMatch.prototype.name = function () {
        return paths.basename(this.resource().fsPath);
    };
    FileMatch.prototype.add = function (match, trigger) {
        this._matches.set(match.id(), match);
        if (trigger) {
            this._onChange.fire(true);
        }
    };
    FileMatch.prototype.removeMatch = function (match) {
        this._matches.delete(match.id());
        if (this.isMatchSelected(match)) {
            this.setSelectedMatch(null);
        }
        else {
            this.updateHighlights();
        }
    };
    FileMatch.prototype.dispose = function () {
        this.setSelectedMatch(null);
        this.unbindModel();
        this._onDispose.fire();
        _super.prototype.dispose.call(this);
    };
    FileMatch = __decorate([
        __param(3, modelService_1.IModelService),
        __param(4, replace_2.IReplaceService)
    ], FileMatch);
    return FileMatch;
}(lifecycle_1.Disposable));
exports.FileMatch = FileMatch;
var SearchResult = (function (_super) {
    __extends(SearchResult, _super);
    function SearchResult(_searchModel, replaceService, telemetryService, instantiationService) {
        _super.call(this);
        this._searchModel = _searchModel;
        this.replaceService = replaceService;
        this.telemetryService = telemetryService;
        this.instantiationService = instantiationService;
        this._onChange = this._register(new event_1.Emitter());
        this.onChange = this._onChange.event;
        this._query = null;
        this._replacingAll = false;
        this._fileMatches = new map_1.LinkedMap();
        this._unDisposedFileMatches = new map_1.LinkedMap();
        this._rangeHighlightDecorations = this.instantiationService.createInstance(rangeDecorations_1.RangeHighlightDecorations);
    }
    Object.defineProperty(SearchResult.prototype, "query", {
        set: function (query) {
            this._query = query;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SearchResult.prototype, "searchModel", {
        get: function () {
            return this._searchModel;
        },
        enumerable: true,
        configurable: true
    });
    SearchResult.prototype.add = function (raw, silent) {
        var _this = this;
        if (silent === void 0) { silent = false; }
        var changed = [];
        raw.forEach(function (rawFileMatch) {
            if (!_this._fileMatches.has(rawFileMatch.resource)) {
                var fileMatch_1 = _this.instantiationService.createInstance(FileMatch, _this._query, _this, rawFileMatch);
                _this.doAdd(fileMatch_1);
                changed.push(fileMatch_1);
                var disposable_1 = fileMatch_1.onChange(function () { return _this.onFileChange(fileMatch_1); });
                fileMatch_1.onDispose(function () { return disposable_1.dispose(); });
            }
        });
        if (!silent) {
            this._onChange.fire({ elements: changed, added: true });
        }
    };
    SearchResult.prototype.clear = function () {
        var changed = this.matches();
        this.disposeMatches();
        this._onChange.fire({ elements: changed, removed: true });
    };
    SearchResult.prototype.remove = function (match) {
        this.doRemove(match);
    };
    SearchResult.prototype.replace = function (match) {
        var _this = this;
        return this.replaceService.replace([match]).then(function () {
            _this.doRemove(match, false, true);
        });
    };
    SearchResult.prototype.replaceAll = function (progressRunner) {
        var _this = this;
        this._replacingAll = true;
        var promise = this.replaceService.replace(this.matches(), progressRunner);
        var onDone = event_1.stopwatch(event_1.fromPromise(promise));
        onDone(function (duration) { return _this.telemetryService.publicLog('replaceAll.started', { duration: duration }); });
        return promise.then(function () {
            _this._replacingAll = false;
            _this.clear();
        }, function () {
            _this._replacingAll = false;
        });
    };
    SearchResult.prototype.matches = function () {
        return this._fileMatches.values();
    };
    SearchResult.prototype.isEmpty = function () {
        return this.fileCount() === 0;
    };
    SearchResult.prototype.fileCount = function () {
        return this._fileMatches.size;
    };
    SearchResult.prototype.count = function () {
        return this.matches().reduce(function (prev, match) { return prev + match.count(); }, 0);
    };
    Object.defineProperty(SearchResult.prototype, "showHighlights", {
        get: function () {
            return this._showHighlights;
        },
        enumerable: true,
        configurable: true
    });
    SearchResult.prototype.toggleHighlights = function (value) {
        if (this._showHighlights === value) {
            return;
        }
        this._showHighlights = value;
        var selectedMatch = null;
        this.matches().forEach(function (fileMatch) {
            fileMatch.updateHighlights();
            if (!selectedMatch) {
                selectedMatch = fileMatch.getSelectedMatch();
            }
        });
        if (this._showHighlights && selectedMatch) {
            this._rangeHighlightDecorations.highlightRange({
                resource: selectedMatch.parent().resource(),
                range: selectedMatch.range()
            });
        }
        else {
            this._rangeHighlightDecorations.removeHighlightRange();
        }
    };
    Object.defineProperty(SearchResult.prototype, "rangeHighlightDecorations", {
        get: function () {
            return this._rangeHighlightDecorations;
        },
        enumerable: true,
        configurable: true
    });
    SearchResult.prototype.onFileChange = function (fileMatch) {
        var added = false;
        var removed = false;
        if (!this._fileMatches.has(fileMatch.resource())) {
            this.doAdd(fileMatch);
            added = true;
        }
        if (fileMatch.count() === 0) {
            this.doRemove(fileMatch, false, false);
            added = false;
            removed = true;
        }
        if (!this._replacingAll) {
            this._onChange.fire({ elements: [fileMatch], added: added, removed: removed });
        }
    };
    SearchResult.prototype.doAdd = function (fileMatch) {
        this._fileMatches.set(fileMatch.resource(), fileMatch);
        if (this._unDisposedFileMatches.has(fileMatch.resource())) {
            this._unDisposedFileMatches.delete(fileMatch.resource());
        }
    };
    SearchResult.prototype.doRemove = function (fileMatch, dispose, trigger) {
        if (dispose === void 0) { dispose = true; }
        if (trigger === void 0) { trigger = true; }
        this._fileMatches.delete(fileMatch.resource());
        if (dispose) {
            fileMatch.dispose();
        }
        else {
            this._unDisposedFileMatches.set(fileMatch.resource(), fileMatch);
        }
        if (trigger) {
            this._onChange.fire({ elements: [fileMatch], removed: true });
        }
    };
    SearchResult.prototype.disposeMatches = function () {
        this._fileMatches.values().forEach(function (fileMatch) { return fileMatch.dispose(); });
        this._unDisposedFileMatches.values().forEach(function (fileMatch) { return fileMatch.dispose(); });
        this._fileMatches.clear();
        this._unDisposedFileMatches.clear();
        this._rangeHighlightDecorations.removeHighlightRange();
    };
    SearchResult.prototype.dispose = function () {
        this.disposeMatches();
        this._rangeHighlightDecorations.dispose();
        _super.prototype.dispose.call(this);
    };
    SearchResult = __decorate([
        __param(1, replace_2.IReplaceService),
        __param(2, telemetry_1.ITelemetryService),
        __param(3, instantiation_1.IInstantiationService)
    ], SearchResult);
    return SearchResult;
}(lifecycle_1.Disposable));
exports.SearchResult = SearchResult;
var SearchModel = (function (_super) {
    __extends(SearchModel, _super);
    function SearchModel(searchService, telemetryService, instantiationService) {
        _super.call(this);
        this.searchService = searchService;
        this.telemetryService = telemetryService;
        this.instantiationService = instantiationService;
        this._searchQuery = null;
        this._replaceActive = false;
        this._replaceString = null;
        this._replacePattern = null;
        this._searchResult = this.instantiationService.createInstance(SearchResult, this);
    }
    SearchModel.prototype.isReplaceActive = function () {
        return this._replaceActive;
    };
    Object.defineProperty(SearchModel.prototype, "replaceActive", {
        set: function (replaceActive) {
            this._replaceActive = replaceActive;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SearchModel.prototype, "replacePattern", {
        get: function () {
            return this._replacePattern;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SearchModel.prototype, "replaceString", {
        get: function () {
            return this._replaceString;
        },
        set: function (replaceString) {
            this._replaceString = replaceString;
            if (this._searchQuery) {
                this._replacePattern = new replace_1.ReplacePattern(replaceString, this._searchQuery.contentPattern);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SearchModel.prototype, "searchResult", {
        get: function () {
            return this._searchResult;
        },
        enumerable: true,
        configurable: true
    });
    SearchModel.prototype.search = function (query) {
        var _this = this;
        this.cancelSearch();
        this.searchResult.clear();
        this._searchQuery = query;
        this._searchResult.query = this._searchQuery.contentPattern;
        this._replacePattern = new replace_1.ReplacePattern(this._replaceString, this._searchQuery.contentPattern);
        var timerEvent = timer.start(timer.Topic.WORKBENCH, 'Search');
        this.currentRequest = this.searchService.search(this._searchQuery);
        var onDone = event_1.fromPromise(this.currentRequest);
        var onDoneStopwatch = event_1.stopwatch(onDone);
        onDone(function () { return timerEvent.stop(); });
        onDoneStopwatch(function (duration) { return _this.telemetryService.publicLog('searchResultsFinished', { duration: duration }); });
        var progressEmitter = new event_1.Emitter();
        var onFirstRender = event_1.any(onDone, progressEmitter.event);
        var onFirstRenderStopwatch = event_1.stopwatch(onFirstRender);
        onFirstRenderStopwatch(function (duration) { return _this.telemetryService.publicLog('searchResultsFirstRender', { duration: duration }); });
        this.currentRequest.then(function (value) { return _this.onSearchCompleted(value); }, function (e) { return _this.onSearchError(e); }, function (p) {
            progressEmitter.fire();
            _this.onSearchProgress(p);
        });
        return this.currentRequest;
    };
    SearchModel.prototype.onSearchCompleted = function (completed) {
        if (completed) {
            this._searchResult.add(completed.results, false);
        }
        this.telemetryService.publicLog('searchResultsShown', { count: this._searchResult.count(), fileCount: this._searchResult.fileCount() });
        return completed;
    };
    SearchModel.prototype.onSearchError = function (e) {
        if (errors.isPromiseCanceledError(e)) {
            this.onSearchCompleted(null);
        }
    };
    SearchModel.prototype.onSearchProgress = function (p) {
        if (p.resource) {
            this._searchResult.add([p], true);
        }
    };
    SearchModel.prototype.cancelSearch = function () {
        if (this.currentRequest) {
            this.currentRequest.cancel();
            this.currentRequest = null;
            return true;
        }
        return false;
    };
    SearchModel.prototype.dispose = function () {
        this.cancelSearch();
        this.searchResult.dispose();
        _super.prototype.dispose.call(this);
    };
    SearchModel = __decorate([
        __param(0, search_1.ISearchService),
        __param(1, telemetry_1.ITelemetryService),
        __param(2, instantiation_1.IInstantiationService)
    ], SearchModel);
    return SearchModel;
}(lifecycle_1.Disposable));
exports.SearchModel = SearchModel;
