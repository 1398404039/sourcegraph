/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var nls = require('vs/nls');
var platform_1 = require('vs/platform/platform');
var product_1 = require('vs/platform/product');
var package_1 = require('vs/platform/package');
var winjs_base_1 = require('vs/base/common/winjs.base');
var contributions_1 = require('vs/workbench/common/contributions');
var storage_1 = require('vs/platform/storage/common/storage');
var message_1 = require('vs/platform/message/common/message');
var severity_1 = require('vs/base/common/severity');
var update_1 = require('vs/workbench/electron-browser/update');
var editorService_1 = require('vs/workbench/services/editor/common/editorService');
var instantiation_1 = require('vs/platform/instantiation/common/instantiation');
var actions_1 = require('vs/base/common/actions');
var electron_1 = require('electron');
var releaseNotesEditor_1 = require('./releaseNotesEditor');
var releaseNotesInput_1 = require('./releaseNotesInput');
var semver = require('semver');
var baseEditor_1 = require('vs/workbench/browser/parts/editor/baseEditor');
var editor_1 = require('vs/workbench/common/editor');
var descriptors_1 = require('vs/platform/instantiation/common/descriptors');
var actionRegistry_1 = require('vs/workbench/common/actionRegistry');
var actions_2 = require('vs/platform/actions/common/actions');
var LinkAction = function (id, message, licenseUrl) { return new actions_1.Action(id, message, null, true, function () { electron_1.shell.openExternal(licenseUrl); return winjs_base_1.TPromise.as(null); }); };
var UpdateContribution = (function () {
    function UpdateContribution(storageService, instantiationService, messageService, editorService) {
        var _this = this;
        this.instantiationService = instantiationService;
        this.editorService = editorService;
        var lastVersion = storageService.get(UpdateContribution.KEY, storage_1.StorageScope.GLOBAL, '');
        // was there an update?
        if (product_1.default.releaseNotesUrl && lastVersion && package_1.default.version !== lastVersion) {
            setTimeout(function () {
                _this.instantiationService.invokeFunction(update_1.loadReleaseNotes, package_1.default.version)
                    .then(function (text) { return _this.editorService.openEditor(_this.instantiationService.createInstance(releaseNotesInput_1.ReleaseNotesInput, package_1.default.version, text)); }, function () {
                    messageService.show(severity_1.default.Info, {
                        message: nls.localize('read the release notes', "Welcome to {0} v{1}! Would you like to read the Release Notes?", product_1.default.nameLong, package_1.default.version),
                        actions: [
                            _this.instantiationService.createInstance(update_1.OpenLatestReleaseNotesInBrowserAction),
                            message_1.CloseAction
                        ]
                    });
                });
            }, 0);
        }
        // should we show the new license?
        if (product_1.default.licenseUrl && lastVersion && semver.satisfies(lastVersion, '<1.0.0') && semver.satisfies(package_1.default.version, '>=1.0.0')) {
            setTimeout(function () {
                messageService.show(severity_1.default.Info, {
                    message: nls.localize('licenseChanged', "Our license terms have changed, please go through them.", product_1.default.nameLong, package_1.default.version),
                    actions: [
                        LinkAction('update.showLicense', nls.localize('license', "Read License"), product_1.default.licenseUrl),
                        message_1.CloseAction
                    ]
                });
            }, 0);
        }
        var shouldShowInsiderDisclaimer = storageService.getBoolean(UpdateContribution.INSIDER_KEY, storage_1.StorageScope.GLOBAL, true);
        // is this a build which releases often?
        if (shouldShowInsiderDisclaimer && /-alpha$|-insider$/.test(package_1.default.version)) {
            setTimeout(function () {
                messageService.show(severity_1.default.Info, {
                    message: nls.localize('insiderBuilds', "Insider builds and releases everyday!", product_1.default.nameLong, package_1.default.version),
                    actions: [
                        new actions_1.Action('update.insiderBuilds', nls.localize('readmore', "Read More"), '', true, function () {
                            electron_1.shell.openExternal('http://go.microsoft.com/fwlink/?LinkID=798816');
                            storageService.store(UpdateContribution.INSIDER_KEY, false, storage_1.StorageScope.GLOBAL);
                            return winjs_base_1.TPromise.as(null);
                        }),
                        new actions_1.Action('update.neverAgain', nls.localize('neverShowAgain', "Don't Show Again"), '', true, function () {
                            storageService.store(UpdateContribution.INSIDER_KEY, false, storage_1.StorageScope.GLOBAL);
                            return winjs_base_1.TPromise.as(null);
                        }),
                        message_1.CloseAction
                    ]
                });
            }, 0);
        }
        storageService.store(UpdateContribution.KEY, package_1.default.version, storage_1.StorageScope.GLOBAL);
    }
    UpdateContribution.prototype.getId = function () { return 'vs.update'; };
    UpdateContribution.KEY = 'releaseNotes/lastVersion';
    UpdateContribution.INSIDER_KEY = 'releaseNotes/shouldShowInsiderDisclaimer';
    UpdateContribution = __decorate([
        __param(0, storage_1.IStorageService),
        __param(1, instantiation_1.IInstantiationService),
        __param(2, message_1.IMessageService),
        __param(3, editorService_1.IWorkbenchEditorService)
    ], UpdateContribution);
    return UpdateContribution;
}());
exports.UpdateContribution = UpdateContribution;
platform_1.Registry.as(contributions_1.Extensions.Workbench)
    .registerWorkbenchContribution(UpdateContribution);
// Editor
var editorDescriptor = new baseEditor_1.EditorDescriptor(releaseNotesEditor_1.ReleaseNotesEditor.ID, nls.localize('release notes', "Release notes"), 'vs/workbench/parts/update/electron-browser/releaseNotesEditor', 'ReleaseNotesEditor');
platform_1.Registry.as(editor_1.Extensions.Editors)
    .registerEditor(editorDescriptor, [new descriptors_1.SyncDescriptor(releaseNotesInput_1.ReleaseNotesInput)]);
platform_1.Registry.as(actionRegistry_1.Extensions.WorkbenchActions)
    .registerWorkbenchAction(new actions_2.SyncActionDescriptor(update_1.ShowCurrentReleaseNotesAction, update_1.ShowCurrentReleaseNotesAction.ID, update_1.ShowCurrentReleaseNotesAction.LABEL), 'Open Release Notes');
