/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var winjs_base_1 = require('vs/base/common/winjs.base');
var marked_1 = require('vs/base/common/marked/marked');
var async_1 = require('vs/base/common/async');
var uri_1 = require('vs/base/common/uri');
var lifecycle_1 = require('vs/base/common/lifecycle');
var dom_1 = require('vs/base/browser/dom');
var baseEditor_1 = require('vs/workbench/browser/parts/editor/baseEditor');
var telemetry_1 = require('vs/platform/telemetry/common/telemetry');
var themeService_1 = require('vs/workbench/services/themes/common/themeService');
var webview_1 = require('vs/workbench/parts/html/browser/webview');
var editorService_1 = require('vs/workbench/services/editor/common/editorService');
var opener_1 = require('vs/platform/opener/common/opener');
var request_1 = require('vs/base/node/request');
var keybinding_1 = require('vs/base/common/keybinding');
var request_2 = require('vs/platform/request/common/request');
var keybinding_2 = require('vs/platform/keybinding/common/keybinding');
var product_1 = require('vs/platform/product');
var modeService_1 = require('vs/editor/common/services/modeService');
var textToHtmlTokenizer_1 = require('vs/editor/common/modes/textToHtmlTokenizer');
function renderBody(body) {
    return "<!DOCTYPE html>\n\t\t<html>\n\t\t\t<head>\n\t\t\t\t<meta http-equiv=\"Content-type\" content=\"text/html;charset=UTF-8\">\n\t\t\t\t<link rel=\"stylesheet\" type=\"text/css\" href=\"" + require.toUrl('./media/markdown.css') + "\" >\n\t\t\t</head>\n\t\t\t<body>" + body + "</body>\n\t\t</html>";
}
var ReleaseNotesEditor = (function (_super) {
    __extends(ReleaseNotesEditor, _super);
    function ReleaseNotesEditor(telemetryService, themeService, editorService, requestService, openerService, keybindingService, modeService) {
        _super.call(this, ReleaseNotesEditor.ID, telemetryService);
        this.themeService = themeService;
        this.editorService = editorService;
        this.requestService = requestService;
        this.openerService = openerService;
        this.keybindingService = keybindingService;
        this.modeService = modeService;
        this.contentDisposables = [];
        this.disposables = [];
    }
    ReleaseNotesEditor.prototype.createEditor = function (parent) {
        var container = parent.getHTMLElement();
        this.content = dom_1.append(container, dom_1.$('.release-notes', { 'style': 'height: 100%' }));
    };
    ReleaseNotesEditor.prototype.setInput = function (input, options) {
        var _this = this;
        var version = input.version;
        this.content.innerHTML = '';
        var match = /^(\d+\.\d)\./.exec(version);
        if (!match) {
            return winjs_base_1.TPromise.as(null);
        }
        var versionLabel = match[1].replace(/\./g, '_');
        var baseUrl = 'https://code.visualstudio.com/raw';
        var url = baseUrl + "/v" + versionLabel + ".md";
        this.loadContents(function () { return _this.requestService.request({ url: url })
            .then(request_1.asText)
            .then(function (text) { return _this.patchKeybindings(text); })
            .then(function (text) {
            // we first need to load the modes...
            var result = [];
            var renderer = new marked_1.marked.Renderer();
            renderer.code = function (code, lang) {
                var modeId = _this.modeService.getModeIdForLanguageName(lang);
                result.push(_this.modeService.getOrCreateMode(modeId));
                return '';
            };
            marked_1.marked(text, { renderer: renderer });
            return winjs_base_1.TPromise.join(result).then(function () { return text; });
        })
            .then(function (text) {
            // then we can render
            var renderer = new marked_1.marked.Renderer();
            renderer.code = function (code, lang) {
                var modeId = _this.modeService.getModeIdForLanguageName(lang);
                return "<code>" + textToHtmlTokenizer_1.tokenizeToString(code, modeId) + "</code>";
            };
            return marked_1.marked(text, { renderer: renderer });
        })
            .then(renderBody)
            .then(function (body) {
            var webview = new webview_1.default(_this.content, document.querySelector('.monaco-editor-background'));
            webview.baseUrl = baseUrl + "/";
            webview.style(_this.themeService.getColorTheme());
            webview.contents = [body];
            webview.onDidClickLink(function (link) { return _this.openerService.open(link); }, null, _this.contentDisposables);
            _this.themeService.onDidColorThemeChange(function (themeId) { return webview.style(themeId); }, null, _this.contentDisposables);
            _this.contentDisposables.push(webview);
        })
            .then(null, function () {
            var uri = uri_1.default.parse(product_1.default.releaseNotesUrl);
            _this.openerService.open(uri);
            _this.editorService.closeEditor(_this.position, _this.input);
        }); });
        return _super.prototype.setInput.call(this, input, options);
    };
    ReleaseNotesEditor.prototype.loadContents = function (loadingTask) {
        var _this = this;
        this.contentDisposables = lifecycle_1.dispose(this.contentDisposables);
        this.content.innerHTML = '';
        dom_1.addClass(this.content, 'loading');
        var promise = loadingTask();
        promise = async_1.always(promise, function () { return dom_1.removeClass(_this.content, 'loading'); });
        this.contentDisposables.push(lifecycle_1.toDisposable(function () { return promise.cancel(); }));
    };
    ReleaseNotesEditor.prototype.patchKeybindings = function (text) {
        var _this = this;
        return text.replace(/kb\(([a-z.\d\-]+)\)/gi, function (match, kb) {
            var keybinding = _this.keybindingService.lookupKeybindings(kb)[0];
            if (!keybinding) {
                return match;
            }
            return _this.keybindingService.getLabelFor(keybinding);
        }).replace(/kbstyle\(([^\)]+)\)/gi, function (match, kb) {
            var code = keybinding_1.Keybinding.fromUserSettingsLabel(kb);
            if (!code) {
                return match;
            }
            var keybinding = new keybinding_1.Keybinding(code);
            if (!keybinding) {
                return match;
            }
            return _this.keybindingService.getLabelFor(keybinding);
        });
    };
    ReleaseNotesEditor.prototype.layout = function () {
        // noop
    };
    ReleaseNotesEditor.prototype.dispose = function () {
        this.disposables = lifecycle_1.dispose(this.disposables);
        _super.prototype.dispose.call(this);
    };
    ReleaseNotesEditor.ID = 'workbench.editor.releaseNotes';
    ReleaseNotesEditor = __decorate([
        __param(0, telemetry_1.ITelemetryService),
        __param(1, themeService_1.IThemeService),
        __param(2, editorService_1.IWorkbenchEditorService),
        __param(3, request_2.IRequestService),
        __param(4, opener_1.IOpenerService),
        __param(5, keybinding_2.IKeybindingService),
        __param(6, modeService_1.IModeService)
    ], ReleaseNotesEditor);
    return ReleaseNotesEditor;
}(baseEditor_1.BaseEditor));
exports.ReleaseNotesEditor = ReleaseNotesEditor;
