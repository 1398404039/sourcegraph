import Event from 'vs/base/common/event';
import { Builder } from 'vs/base/browser/builder';
import { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import { IPanelService } from 'vs/workbench/services/panel/common/panelService';
import { IPartService } from 'vs/workbench/services/part/common/partService';
import { ITerminalInstance, ITerminalService } from 'vs/workbench/parts/terminal/electron-browser/terminal';
import { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';
import { TPromise } from 'vs/base/common/winjs.base';
import { TerminalConfigHelper } from 'vs/workbench/parts/terminal/electron-browser/terminalConfigHelper';
export declare class TerminalService implements ITerminalService {
    private _contextKeyService;
    private _instantiationService;
    private _panelService;
    private _partService;
    private _workspaceContextService;
    _serviceBrand: any;
    private _activeTerminalInstanceIndex;
    private _configHelper;
    private _onActiveInstanceChanged;
    private _onInstanceDisposed;
    private _onInstanceProcessIdReady;
    private _onInstanceTitleChanged;
    private _onInstancesChanged;
    private _terminalContainer;
    private _terminalFocusContextKey;
    private _terminalInstances;
    readonly activeTerminalInstanceIndex: number;
    readonly configHelper: TerminalConfigHelper;
    readonly onActiveInstanceChanged: Event<string>;
    readonly onInstanceDisposed: Event<ITerminalInstance>;
    readonly onInstanceProcessIdReady: Event<ITerminalInstance>;
    readonly onInstanceTitleChanged: Event<string>;
    readonly onInstancesChanged: Event<string>;
    readonly terminalInstances: ITerminalInstance[];
    constructor(_contextKeyService: IContextKeyService, _instantiationService: IInstantiationService, _panelService: IPanelService, _partService: IPartService, _workspaceContextService: IWorkspaceContextService);
    createInstance(name?: string, shellPath?: string, shellArgs?: string[]): ITerminalInstance;
    getInstanceLabels(): string[];
    private _removeInstance(terminalInstance);
    getActiveInstance(): ITerminalInstance;
    getInstanceFromId(terminalId: number): ITerminalInstance;
    setActiveInstance(terminalInstance: ITerminalInstance): void;
    setActiveInstanceByIndex(terminalIndex: number): void;
    setActiveInstanceToNext(): void;
    setActiveInstanceToPrevious(): void;
    setContainers(panelContainer: Builder, terminalContainer: HTMLElement): void;
    showPanel(focus?: boolean): TPromise<void>;
    hidePanel(): void;
    private _getIndexFromId(terminalId);
}
