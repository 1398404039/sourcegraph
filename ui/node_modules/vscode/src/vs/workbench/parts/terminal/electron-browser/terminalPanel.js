/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var DOM = require('vs/base/browser/dom');
var nls = require('vs/nls');
var platform = require('vs/base/common/platform');
var builder_1 = require('vs/base/browser/builder');
var configuration_1 = require('vs/platform/configuration/common/configuration');
var contextView_1 = require('vs/platform/contextview/browser/contextView');
var instantiation_1 = require('vs/platform/instantiation/common/instantiation');
var keybinding_1 = require('vs/platform/keybinding/common/keybinding');
var telemetry_1 = require('vs/platform/telemetry/common/telemetry');
var terminal_1 = require('vs/workbench/parts/terminal/electron-browser/terminal');
var themeService_1 = require('vs/workbench/services/themes/common/themeService');
var terminalActions_1 = require('vs/workbench/parts/terminal/electron-browser/terminalActions');
var panel_1 = require('vs/workbench/browser/panel');
var actionbar_1 = require('vs/base/browser/ui/actionbar/actionbar');
var mouseEvent_1 = require('vs/base/browser/mouseEvent');
var winjs_base_1 = require('vs/base/common/winjs.base');
var themes_1 = require('vs/platform/theme/common/themes');
var TerminalPanel = (function (_super) {
    __extends(TerminalPanel, _super);
    function TerminalPanel(_configurationService, _contextMenuService, _instantiationService, _keybindingService, _terminalService, _themeService, telemetryService) {
        _super.call(this, terminal_1.TERMINAL_PANEL_ID, telemetryService);
        this._configurationService = _configurationService;
        this._contextMenuService = _contextMenuService;
        this._instantiationService = _instantiationService;
        this._keybindingService = _keybindingService;
        this._terminalService = _terminalService;
        this._themeService = _themeService;
    }
    TerminalPanel.prototype.create = function (parent) {
        _super.prototype.create.call(this, parent);
        this._parentDomElement = parent.getHTMLElement();
        DOM.addClass(this._parentDomElement, 'integrated-terminal');
        this._themeStyleElement = document.createElement('style');
        this._fontStyleElement = document.createElement('style');
        this._terminalContainer = document.createElement('div');
        DOM.addClass(this._terminalContainer, 'terminal-outer-container');
        this._parentDomElement.appendChild(this._themeStyleElement);
        this._parentDomElement.appendChild(this._fontStyleElement);
        this._parentDomElement.appendChild(this._terminalContainer);
        this._attachEventListeners();
        this._terminalService.setContainers(this.getContainer(), this._terminalContainer);
        this._register(this._themeService.onDidColorThemeChange(this._updateTheme.bind(this)));
        this._register(this._configurationService.onDidUpdateConfiguration(this._updateConfig.bind(this)));
        this._updateTheme();
        this._updateConfig();
        // Force another layout (first is setContainers) since config has changed
        this.layout(new builder_1.Dimension(this._terminalContainer.offsetWidth, this._terminalContainer.offsetHeight));
        return winjs_base_1.TPromise.as(void 0);
    };
    TerminalPanel.prototype.layout = function (dimension) {
        if (!dimension) {
            return;
        }
        this._terminalService.terminalInstances.forEach(function (t) {
            t.layout(dimension);
        });
    };
    TerminalPanel.prototype.setVisible = function (visible) {
        var _this = this;
        if (visible) {
            if (this._terminalService.terminalInstances.length > 0) {
                this._updateConfig();
                this._updateTheme();
            }
            else {
                return _super.prototype.setVisible.call(this, visible).then(function () {
                    _this._terminalService.createInstance();
                    _this._updateConfig();
                    _this._updateTheme();
                });
            }
        }
        return _super.prototype.setVisible.call(this, visible);
    };
    TerminalPanel.prototype.getActions = function () {
        var _this = this;
        if (!this._actions) {
            this._actions = [
                this._instantiationService.createInstance(terminalActions_1.SwitchTerminalInstanceAction, terminalActions_1.SwitchTerminalInstanceAction.ID, terminalActions_1.SwitchTerminalInstanceAction.LABEL),
                this._instantiationService.createInstance(terminalActions_1.CreateNewTerminalAction, terminalActions_1.CreateNewTerminalAction.ID, terminalActions_1.CreateNewTerminalAction.PANEL_LABEL),
                this._instantiationService.createInstance(terminalActions_1.KillTerminalAction, terminalActions_1.KillTerminalAction.ID, terminalActions_1.KillTerminalAction.PANEL_LABEL)
            ];
            this._actions.forEach(function (a) {
                _this._register(a);
            });
        }
        return this._actions;
    };
    TerminalPanel.prototype._getContextMenuActions = function () {
        var _this = this;
        if (!this._contextMenuActions) {
            this._contextMenuActions = [
                this._instantiationService.createInstance(terminalActions_1.CreateNewTerminalAction, terminalActions_1.CreateNewTerminalAction.ID, nls.localize('createNewTerminal', "New Terminal")),
                new actionbar_1.Separator(),
                this._instantiationService.createInstance(terminalActions_1.CopyTerminalSelectionAction, terminalActions_1.CopyTerminalSelectionAction.ID, nls.localize('copy', "Copy")),
                this._instantiationService.createInstance(terminalActions_1.TerminalPasteAction, terminalActions_1.TerminalPasteAction.ID, nls.localize('paste', "Paste"))
            ];
            this._contextMenuActions.forEach(function (a) {
                _this._register(a);
            });
        }
        return this._contextMenuActions;
    };
    TerminalPanel.prototype.getActionItem = function (action) {
        if (action.id === terminalActions_1.SwitchTerminalInstanceAction.ID) {
            return this._instantiationService.createInstance(terminalActions_1.SwitchTerminalInstanceActionItem, action);
        }
        return _super.prototype.getActionItem.call(this, action);
    };
    TerminalPanel.prototype.focus = function () {
        this._terminalService.getActiveInstance().focus(true);
    };
    TerminalPanel.prototype._attachEventListeners = function () {
        var _this = this;
        this._register(DOM.addDisposableListener(this._parentDomElement, 'mousedown', function (event) {
            if (_this._terminalService.terminalInstances.length === 0) {
                return;
            }
            if (event.which === 2 && platform.isLinux) {
                // Drop selection and focus terminal on Linux to enable middle button paste when click
                // occurs on the selection itself.
                _this._terminalService.getActiveInstance().focus();
            }
            else if (event.which === 3) {
                // Trigger the context menu on right click
                var anchor_1 = _this._parentDomElement;
                if (event instanceof MouseEvent) {
                    var standardEvent = new mouseEvent_1.StandardMouseEvent(event);
                    anchor_1 = { x: standardEvent.posx, y: standardEvent.posy };
                }
                _this._contextMenuService.showContextMenu({
                    getAnchor: function () { return anchor_1; },
                    getActions: function () { return winjs_base_1.TPromise.as(_this._getContextMenuActions()); },
                    getActionsContext: function () { return _this._parentDomElement; },
                    getKeyBinding: function (action) {
                        var opts = _this._keybindingService.lookupKeybindings(action.id);
                        if (opts.length > 0) {
                            return opts[0]; // only take the first one
                        }
                        return null;
                    }
                });
            }
        }));
        this._register(DOM.addDisposableListener(this._parentDomElement, 'click', function (event) {
            if (_this._terminalService.terminalInstances.length === 0) {
                return;
            }
            if (event.which !== 3) {
                _this._terminalService.getActiveInstance().focus();
            }
        }));
        this._register(DOM.addDisposableListener(this._parentDomElement, 'keyup', function (event) {
            if (event.keyCode === 27) {
                // Keep terminal open on escape
                event.stopPropagation();
            }
        }));
    };
    TerminalPanel.prototype._updateTheme = function (themeId) {
        var _this = this;
        if (!themeId) {
            themeId = this._themeService.getColorTheme();
        }
        var baseThemeId = themes_1.getBaseThemeId(themeId);
        if (baseThemeId === this._currentBaseThemeId) {
            return;
        }
        this._currentBaseThemeId = baseThemeId;
        var theme = this._terminalService.configHelper.getTheme(baseThemeId);
        var css = '';
        theme.forEach(function (color, index) {
            var rgba = _this._convertHexCssColorToRgba(color, 0.996);
            css += (".monaco-workbench .panel.integrated-terminal .xterm .xterm-color-" + index + " { color: " + color + "; }") +
                (".monaco-workbench .panel.integrated-terminal .xterm .xterm-color-" + index + "::selection { background-color: " + rgba + "; }") +
                (".monaco-workbench .panel.integrated-terminal .xterm .xterm-bg-color-" + index + " { background-color: " + color + "; }") +
                (".monaco-workbench .panel.integrated-terminal .xterm .xterm-bg-color-" + index + "::selection { color: " + color + "; }");
        });
        this._themeStyleElement.innerHTML = css;
    };
    /**
     * Converts a CSS hex color (#rrggbb) to a CSS rgba color (rgba(r, g, b, a)).
     */
    TerminalPanel.prototype._convertHexCssColorToRgba = function (hex, alpha) {
        var r = parseInt(hex.substr(1, 2), 16);
        var g = parseInt(hex.substr(3, 2), 16);
        var b = parseInt(hex.substr(5, 2), 16);
        return "rgba(" + r + ", " + g + ", " + b + ", " + alpha + ")";
    };
    TerminalPanel.prototype._updateConfig = function () {
        this._updateFont();
        this._updateCursorBlink();
        this._updateCommandsToSkipShell();
    };
    TerminalPanel.prototype._updateFont = function () {
        if (this._terminalService.terminalInstances.length === 0) {
            return;
        }
        var newFont = this._terminalService.configHelper.getFont();
        DOM.toggleClass(this._parentDomElement, 'enable-ligatures', this._terminalService.configHelper.getFontLigaturesEnabled());
        if (!this._font || this._fontsDiffer(this._font, newFont)) {
            this._fontStyleElement.innerHTML = '.monaco-workbench .panel.integrated-terminal .xterm {' +
                ("font-family: " + newFont.fontFamily + ";") +
                ("font-size: " + newFont.fontSize + ";") +
                ("line-height: " + newFont.lineHeight + ";") +
                '}';
            this._font = newFont;
        }
        this.layout(new builder_1.Dimension(this._parentDomElement.offsetWidth, this._parentDomElement.offsetHeight));
    };
    TerminalPanel.prototype._fontsDiffer = function (a, b) {
        return a.charHeight !== b.charHeight ||
            a.charWidth !== b.charWidth ||
            a.fontFamily !== b.fontFamily ||
            a.fontSize !== b.fontSize ||
            a.lineHeight !== b.lineHeight;
    };
    TerminalPanel.prototype._updateCursorBlink = function () {
        var _this = this;
        this._terminalService.terminalInstances.forEach(function (instance) {
            instance.setCursorBlink(_this._terminalService.configHelper.getCursorBlink());
        });
    };
    TerminalPanel.prototype._updateCommandsToSkipShell = function () {
        var _this = this;
        this._terminalService.terminalInstances.forEach(function (instance) {
            instance.setCommandsToSkipShell(_this._terminalService.configHelper.getCommandsToSkipShell());
        });
    };
    TerminalPanel = __decorate([
        __param(0, configuration_1.IConfigurationService),
        __param(1, contextView_1.IContextMenuService),
        __param(2, instantiation_1.IInstantiationService),
        __param(3, keybinding_1.IKeybindingService),
        __param(4, terminal_1.ITerminalService),
        __param(5, themeService_1.IThemeService),
        __param(6, telemetry_1.ITelemetryService)
    ], TerminalPanel);
    return TerminalPanel;
}(panel_1.Panel));
exports.TerminalPanel = TerminalPanel;
