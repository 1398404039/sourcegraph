/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
require("./media/scrollbar.css");
require("./media/terminal.css");
require("./media/xterm.css");
var panel = require("vs/workbench/browser/panel");
var platform = require("vs/base/common/platform");
var nls = require("vs/nls");
var configurationRegistry_1 = require("vs/platform/configuration/common/configurationRegistry");
var quickopen_contribution_1 = require("vs/workbench/browser/parts/quickopen/quickopen.contribution");
var terminal_1 = require("vs/workbench/parts/terminal/common/terminal");
var actionRegistry_1 = require("vs/workbench/common/actionRegistry");
var terminalActions_1 = require("vs/workbench/parts/terminal/electron-browser/terminalActions");
var platform_1 = require("vs/platform/platform");
var commandsHandler_1 = require("vs/workbench/parts/quickopen/browser/commandsHandler");
var actions_1 = require("vs/platform/actions/common/actions");
var terminalService_1 = require("vs/workbench/parts/terminal/electron-browser/terminalService");
var toggleTabFocusMode_1 = require("vs/editor/contrib/toggleTabFocusMode/common/toggleTabFocusMode");
var extensions_1 = require("vs/platform/instantiation/common/extensions");
var debugActions = require("vs/workbench/parts/debug/browser/debugActions");
var keybindingsRegistry_1 = require("vs/platform/keybinding/common/keybindingsRegistry");
var editorActions_1 = require("vs/workbench/browser/parts/editor/editorActions");
var defaultConfig_1 = require("vs/editor/common/config/defaultConfig");
var configurationRegistry = platform_1.Registry.as(configurationRegistry_1.Extensions.Configuration);
configurationRegistry.registerConfiguration({
    'id': 'terminal',
    'order': 100,
    'title': nls.localize('terminalIntegratedConfigurationTitle', "Integrated Terminal"),
    'type': 'object',
    'properties': {
        'terminal.integrated.shell.linux': {
            'description': nls.localize('terminal.integrated.shell.linux', "The path of the shell that the terminal uses on Linux."),
            'type': 'string',
            'default': terminal_1.TERMINAL_DEFAULT_SHELL_LINUX
        },
        'terminal.integrated.shellArgs.linux': {
            'description': nls.localize('terminal.integrated.shellArgs.linux', "The command line arguments to use when on the Linux terminal."),
            'type': 'array',
            'items': {
                'type': 'string'
            },
            'default': []
        },
        'terminal.integrated.shell.osx': {
            'description': nls.localize('terminal.integrated.shell.osx', "The path of the shell that the terminal uses on OS X."),
            'type': 'string',
            'default': terminal_1.TERMINAL_DEFAULT_SHELL_OSX
        },
        'terminal.integrated.shellArgs.osx': {
            'description': nls.localize('terminal.integrated.shellArgs.osx', "The command line arguments to use when on the OS X terminal."),
            'type': 'array',
            'items': {
                'type': 'string'
            },
            'default': []
        },
        'terminal.integrated.shell.windows': {
            'description': nls.localize('terminal.integrated.shell.windows', "The path of the shell that the terminal uses on Windows. When using shells shipped with Windows (cmd, PowerShell or Bash on Ubuntu), prefer C:\\Windows\\sysnative over C:\\Windows\\System32 to use the 64-bit versions."),
            'type': 'string',
            'default': terminal_1.TERMINAL_DEFAULT_SHELL_WINDOWS
        },
        'terminal.integrated.shellArgs.windows': {
            'description': nls.localize('terminal.integrated.shellArgs.windows', "The command line arguments to use when on the Windows terminal."),
            'type': 'array',
            'items': {
                'type': 'string'
            },
            'default': []
        },
        'terminal.integrated.fontFamily': {
            'description': nls.localize('terminal.integrated.fontFamily', "Controls the font family of the terminal, this defaults to editor.fontFamily's value."),
            'type': 'string'
        },
        'terminal.integrated.fontLigatures': {
            'description': nls.localize('terminal.integrated.fontLigatures', "Controls whether font ligatures are enabled in the terminal."),
            'type': 'boolean',
            'default': false
        },
        'terminal.integrated.fontSize': {
            'description': nls.localize('terminal.integrated.fontSize', "Controls the font size in pixels of the terminal."),
            'type': 'number',
            'default': defaultConfig_1.DefaultConfig.editor.fontSize
        },
        'terminal.integrated.lineHeight': {
            'description': nls.localize('terminal.integrated.lineHeight', "Controls the line height of the terminal, this number is multipled by the terminal font size to get the actual line-height in pixels."),
            'type': 'number',
            'default': 1.2
        },
        'terminal.integrated.cursorBlinking': {
            'description': nls.localize('terminal.integrated.cursorBlinking', "Controls whether the terminal cursor blinks."),
            'type': 'boolean',
            'default': false
        },
        'terminal.integrated.scrollback': {
            'description': nls.localize('terminal.integrated.scrollback', "Controls the maximum amount of lines the terminal keeps in its buffer."),
            'type': 'number',
            'default': 1000
        },
        'terminal.integrated.setLocaleVariables': {
            'description': nls.localize('terminal.integrated.setLocaleVariables', "Controls whether locale variables are set at startup of the terminal, this defaults to true on OS X, false on other platforms."),
            'type': 'boolean',
            'default': platform.isMacintosh
        },
        'terminal.integrated.commandsToSkipShell': {
            'description': nls.localize('terminal.integrated.commandsToSkipShell', "A set of command IDs whose keybindings will not be sent to the shell and instead always be handled by Code. This allows the use of keybindings that would normally be consumed by the shell to act the same as when the terminal is not focused, for example ctrl+p to launch Quick Open."),
            'type': 'array',
            'items': {
                'type': 'string'
            },
            'default': [
                toggleTabFocusMode_1.ToggleTabFocusModeAction.ID,
                quickopen_contribution_1.GlobalQuickOpenAction.ID,
                commandsHandler_1.ShowAllCommandsAction.ID,
                terminalActions_1.CreateNewTerminalAction.ID,
                terminalActions_1.CopyTerminalSelectionAction.ID,
                terminalActions_1.KillTerminalAction.ID,
                terminalActions_1.FocusTerminalAction.ID,
                terminalActions_1.FocusPreviousTerminalAction.ID,
                terminalActions_1.FocusNextTerminalAction.ID,
                terminalActions_1.TerminalPasteAction.ID,
                terminalActions_1.RunSelectedTextInTerminalAction.ID,
                terminalActions_1.ToggleTerminalAction.ID,
                terminalActions_1.ScrollDownTerminalAction.ID,
                terminalActions_1.ScrollDownPageTerminalAction.ID,
                terminalActions_1.ScrollToBottomTerminalAction.ID,
                terminalActions_1.ScrollUpTerminalAction.ID,
                terminalActions_1.ScrollUpPageTerminalAction.ID,
                terminalActions_1.ScrollToTopTerminalAction.ID,
                terminalActions_1.ClearTerminalAction.ID,
                debugActions.StartAction.ID,
                debugActions.StopAction.ID,
                debugActions.RunAction.ID,
                debugActions.RestartAction.ID,
                debugActions.ContinueAction.ID,
                editorActions_1.OpenNextRecentlyUsedEditorInGroupAction.ID,
                editorActions_1.OpenPreviousRecentlyUsedEditorInGroupAction.ID
            ].sort()
        }
    }
});
extensions_1.registerSingleton(terminal_1.ITerminalService, terminalService_1.TerminalService);
platform_1.Registry.as(panel.Extensions.Panels).registerPanel(new panel.PanelDescriptor('vs/workbench/parts/terminal/electron-browser/terminalPanel', 'TerminalPanel', terminal_1.TERMINAL_PANEL_ID, nls.localize('terminal', "Terminal"), 'terminal', 40));
// On mac cmd+` is reserved to cycle between windows, that's why the keybindings use WinCtrl
var category = nls.localize('terminalCategory', "Terminal");
var actionRegistry = platform_1.Registry.as(actionRegistry_1.Extensions.WorkbenchActions);
actionRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(terminalActions_1.KillTerminalAction, terminalActions_1.KillTerminalAction.ID, terminalActions_1.KillTerminalAction.LABEL), 'Terminal: Kill the Active Terminal Instance', category);
actionRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(terminalActions_1.CopyTerminalSelectionAction, terminalActions_1.CopyTerminalSelectionAction.ID, terminalActions_1.CopyTerminalSelectionAction.LABEL, {
    primary: 32768 /* CtrlCmd */ | 33 /* KEY_C */,
    linux: { primary: 32768 /* CtrlCmd */ | 16384 /* Shift */ | 33 /* KEY_C */ },
    // Don't apply to Mac since cmd+c works
    mac: { primary: null }
}, terminal_1.KEYBINDING_CONTEXT_TERMINAL_TEXT_SELECTED), 'Terminal: Copy Selection', category);
actionRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(terminalActions_1.CreateNewTerminalAction, terminalActions_1.CreateNewTerminalAction.ID, terminalActions_1.CreateNewTerminalAction.LABEL, {
    primary: 32768 /* CtrlCmd */ | 16384 /* Shift */ | 86 /* US_BACKTICK */,
    mac: { primary: 4096 /* WinCtrl */ | 16384 /* Shift */ | 86 /* US_BACKTICK */ }
}), 'Terminal: Create New Integrated Terminal', category);
actionRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(terminalActions_1.FocusTerminalAction, terminalActions_1.FocusTerminalAction.ID, terminalActions_1.FocusTerminalAction.LABEL), 'Terminal: Focus Terminal', category);
actionRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(terminalActions_1.FocusNextTerminalAction, terminalActions_1.FocusNextTerminalAction.ID, terminalActions_1.FocusNextTerminalAction.LABEL), 'Terminal: Focus Next Terminal', category);
actionRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(terminalActions_1.FocusPreviousTerminalAction, terminalActions_1.FocusPreviousTerminalAction.ID, terminalActions_1.FocusPreviousTerminalAction.LABEL), 'Terminal: Focus Previous Terminal', category);
actionRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(terminalActions_1.TerminalPasteAction, terminalActions_1.TerminalPasteAction.ID, terminalActions_1.TerminalPasteAction.LABEL, {
    primary: 32768 /* CtrlCmd */ | 52 /* KEY_V */,
    linux: { primary: 32768 /* CtrlCmd */ | 16384 /* Shift */ | 52 /* KEY_V */ },
    // Don't apply to Mac since cmd+v works
    mac: { primary: null }
}, terminal_1.KEYBINDING_CONTEXT_TERMINAL_FOCUS), 'Terminal: Paste into Active Terminal', category);
actionRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(terminalActions_1.RunSelectedTextInTerminalAction, terminalActions_1.RunSelectedTextInTerminalAction.ID, terminalActions_1.RunSelectedTextInTerminalAction.LABEL), 'Terminal: Run Selected Text In Active Terminal', category);
actionRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(terminalActions_1.ToggleTerminalAction, terminalActions_1.ToggleTerminalAction.ID, terminalActions_1.ToggleTerminalAction.LABEL, {
    primary: 32768 /* CtrlCmd */ | 86 /* US_BACKTICK */,
    mac: { primary: 4096 /* WinCtrl */ | 86 /* US_BACKTICK */ }
}), 'View: Toggle Integrated Terminal', nls.localize('viewCategory', "View"));
actionRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(terminalActions_1.ScrollDownTerminalAction, terminalActions_1.ScrollDownTerminalAction.ID, terminalActions_1.ScrollDownTerminalAction.LABEL, {
    primary: 32768 /* CtrlCmd */ | 18 /* DownArrow */,
    linux: { primary: 32768 /* CtrlCmd */ | 16384 /* Shift */ | 18 /* DownArrow */ }
}, terminal_1.KEYBINDING_CONTEXT_TERMINAL_FOCUS), 'Terminal: Scroll Down (Line)', category);
actionRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(terminalActions_1.ScrollDownPageTerminalAction, terminalActions_1.ScrollDownPageTerminalAction.ID, terminalActions_1.ScrollDownPageTerminalAction.LABEL, {
    primary: 16384 /* Shift */ | 12 /* PageDown */,
    mac: { primary: 12 /* PageDown */ }
}, terminal_1.KEYBINDING_CONTEXT_TERMINAL_FOCUS), 'Terminal: Scroll Down (Page)', category);
actionRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(terminalActions_1.ScrollToBottomTerminalAction, terminalActions_1.ScrollToBottomTerminalAction.ID, terminalActions_1.ScrollToBottomTerminalAction.LABEL, {
    primary: 32768 /* CtrlCmd */ | 13 /* End */,
    linux: { primary: 16384 /* Shift */ | 13 /* End */ }
}, terminal_1.KEYBINDING_CONTEXT_TERMINAL_FOCUS), 'Terminal: Scroll to Bottom', category);
actionRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(terminalActions_1.ScrollUpTerminalAction, terminalActions_1.ScrollUpTerminalAction.ID, terminalActions_1.ScrollUpTerminalAction.LABEL, {
    primary: 32768 /* CtrlCmd */ | 16 /* UpArrow */,
    linux: { primary: 32768 /* CtrlCmd */ | 16384 /* Shift */ | 16 /* UpArrow */ },
}, terminal_1.KEYBINDING_CONTEXT_TERMINAL_FOCUS), 'Terminal: Scroll Up (Line)', category);
actionRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(terminalActions_1.ScrollUpPageTerminalAction, terminalActions_1.ScrollUpPageTerminalAction.ID, terminalActions_1.ScrollUpPageTerminalAction.LABEL, {
    primary: 16384 /* Shift */ | 11 /* PageUp */,
    mac: { primary: 11 /* PageUp */ }
}, terminal_1.KEYBINDING_CONTEXT_TERMINAL_FOCUS), 'Terminal: Scroll Up (Page)', category);
actionRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(terminalActions_1.ScrollToTopTerminalAction, terminalActions_1.ScrollToTopTerminalAction.ID, terminalActions_1.ScrollToTopTerminalAction.LABEL, {
    primary: 32768 /* CtrlCmd */ | 14 /* Home */,
    linux: { primary: 16384 /* Shift */ | 14 /* Home */ }
}, terminal_1.KEYBINDING_CONTEXT_TERMINAL_FOCUS), 'Terminal: Scroll to Top', category);
actionRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(terminalActions_1.ClearTerminalAction, terminalActions_1.ClearTerminalAction.ID, terminalActions_1.ClearTerminalAction.LABEL, {
    primary: 32768 /* CtrlCmd */ | 41 /* KEY_K */
}, terminal_1.KEYBINDING_CONTEXT_TERMINAL_FOCUS, keybindingsRegistry_1.KeybindingsRegistry.WEIGHT.workbenchContrib(1)), 'Terminal: Clear', category);
