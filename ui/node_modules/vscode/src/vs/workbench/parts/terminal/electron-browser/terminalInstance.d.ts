import Event from 'vs/base/common/event';
import lifecycle = require('vs/base/common/lifecycle');
import { Dimension } from 'vs/base/browser/builder';
import { IContextKey } from 'vs/platform/contextkey/common/contextkey';
import { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';
import { IMessageService } from 'vs/platform/message/common/message';
import { IStringDictionary } from 'vs/base/common/collections';
import { ITerminalInstance } from 'vs/workbench/parts/terminal/electron-browser/terminal';
import { IWorkspace } from 'vs/platform/workspace/common/workspace';
import { TerminalConfigHelper, IShell } from 'vs/workbench/parts/terminal/electron-browser/terminalConfigHelper';
export declare class TerminalInstance implements ITerminalInstance {
    private _terminalFocusContextKey;
    private _configHelper;
    private _container;
    private _keybindingService;
    private _messageService;
    private static EOL_REGEX;
    private static _idCounter;
    private _id;
    private _isExiting;
    private _isVisible;
    private _onDisposed;
    private _onProcessIdReady;
    private _onTitleChanged;
    private _process;
    private _processId;
    private _skipTerminalKeybindings;
    private _title;
    private _toDispose;
    private _wrapperElement;
    private _xterm;
    private _xtermElement;
    readonly id: number;
    readonly processId: number;
    readonly onClosed: Event<TerminalInstance>;
    readonly onProcessIdReady: Event<TerminalInstance>;
    readonly onTitleChanged: Event<string>;
    readonly title: string;
    constructor(_terminalFocusContextKey: IContextKey<boolean>, _configHelper: TerminalConfigHelper, _container: HTMLElement, workspace: IWorkspace, name: string, shell: IShell, _keybindingService: IKeybindingService, _messageService: IMessageService);
    addDisposable(disposable: lifecycle.IDisposable): void;
    attachToElement(container: HTMLElement): void;
    copySelection(): void;
    dispose(): void;
    focus(force?: boolean): void;
    paste(): void;
    sendText(text: string, addNewLine: boolean): void;
    setVisible(visible: boolean): void;
    scrollDownLine(): void;
    scrollDownPage(): void;
    scrollUpLine(): void;
    scrollUpPage(): void;
    clear(): void;
    private sanitizeInput(data);
    private _createProcess(workspace, name, shell);
    static createTerminalEnv(parentEnv: IStringDictionary<string>, shell: IShell, workspace: IWorkspace, locale?: string): IStringDictionary<string>;
    private static _sanitizeCwd(cwd);
    private static _cloneEnv(env);
    private static _getLangEnvVariable(locale);
    setCursorBlink(blink: boolean): void;
    setCommandsToSkipShell(commands: string[]): void;
    layout(dimension: Dimension): void;
}
