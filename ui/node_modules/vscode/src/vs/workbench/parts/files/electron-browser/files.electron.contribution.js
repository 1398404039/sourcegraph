/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var nls = require('vs/nls');
var platform_1 = require('vs/platform/platform');
var actionBarRegistry_1 = require('vs/workbench/browser/actionBarRegistry');
var actionRegistry_1 = require('vs/workbench/common/actionRegistry');
var actions_1 = require('vs/platform/actions/common/actions');
var env = require('vs/base/common/platform');
var files_1 = require('vs/workbench/parts/files/common/files');
var contributions_1 = require('vs/workbench/common/contributions');
var fileActions_1 = require('vs/workbench/parts/files/browser/fileActions');
var dirtyFilesTracker_1 = require('vs/workbench/parts/files/electron-browser/dirtyFilesTracker');
var textFileService_1 = require('vs/workbench/parts/files/electron-browser/textFileService');
var electronFileActions_1 = require('vs/workbench/parts/files/electron-browser/electronFileActions');
var instantiation_1 = require('vs/platform/instantiation/common/instantiation');
var extensions_1 = require('vs/platform/instantiation/common/extensions');
var keyCodes_1 = require('vs/base/common/keyCodes');
var FileViewerActionContributor = (function (_super) {
    __extends(FileViewerActionContributor, _super);
    function FileViewerActionContributor(instantiationService) {
        _super.call(this);
        this.instantiationService = instantiationService;
    }
    FileViewerActionContributor.prototype.hasSecondaryActions = function (context) {
        var element = context.element;
        // Contribute only on Files (File Explorer and Open Files Viewer)
        return !!files_1.asFileResource(element) || (element && element.getResource && element.getResource());
    };
    FileViewerActionContributor.prototype.getSecondaryActions = function (context) {
        var actions = [];
        if (this.hasSecondaryActions(context)) {
            var fileResource = files_1.asFileResource(context.element);
            var resource = fileResource ? fileResource.resource : context.element.getResource();
            // Reveal file in OS native explorer
            actions.push(this.instantiationService.createInstance(electronFileActions_1.RevealInOSAction, resource));
            // Copy Path
            actions.push(this.instantiationService.createInstance(electronFileActions_1.CopyPathAction, resource));
        }
        return actions;
    };
    FileViewerActionContributor = __decorate([
        __param(0, instantiation_1.IInstantiationService)
    ], FileViewerActionContributor);
    return FileViewerActionContributor;
}(actionBarRegistry_1.ActionBarContributor));
// Contribute Actions
var category = nls.localize('filesCategory', "Files");
var workbenchActionsRegistry = platform_1.Registry.as(actionRegistry_1.Extensions.WorkbenchActions);
workbenchActionsRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(fileActions_1.SaveFileAsAction, fileActions_1.SaveFileAsAction.ID, fileActions_1.SaveFileAsAction.LABEL, { primary: 32768 /* CtrlCmd */ | 16384 /* Shift */ | 49 /* KEY_S */ }), 'Files: Save As...', category);
workbenchActionsRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(fileActions_1.GlobalNewUntitledFileAction, fileActions_1.GlobalNewUntitledFileAction.ID, fileActions_1.GlobalNewUntitledFileAction.LABEL, { primary: 32768 /* CtrlCmd */ | 44 /* KEY_N */ }), 'Files: New Untitled File', category);
workbenchActionsRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(electronFileActions_1.GlobalCopyPathAction, electronFileActions_1.GlobalCopyPathAction.ID, electronFileActions_1.GlobalCopyPathAction.LABEL, { primary: keyCodes_1.KeyChord(32768 /* CtrlCmd */ | 41 /* KEY_K */, 46 /* KEY_P */) }), 'Files: Copy Path of Active File', category);
workbenchActionsRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(electronFileActions_1.GlobalRevealInOSAction, electronFileActions_1.GlobalRevealInOSAction.ID, electronFileActions_1.GlobalRevealInOSAction.LABEL, { primary: keyCodes_1.KeyChord(32768 /* CtrlCmd */ | 41 /* KEY_K */, 48 /* KEY_R */) }), 'Files: Reveal Active File', category);
workbenchActionsRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(electronFileActions_1.ShowOpenedFileInNewWindow, electronFileActions_1.ShowOpenedFileInNewWindow.ID, electronFileActions_1.ShowOpenedFileInNewWindow.LABEL, { primary: keyCodes_1.KeyChord(32768 /* CtrlCmd */ | 41 /* KEY_K */, 45 /* KEY_O */) }), 'Files: Open Active File in New Window', category);
if (env.isMacintosh) {
    workbenchActionsRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(electronFileActions_1.OpenFileFolderAction, electronFileActions_1.OpenFileFolderAction.ID, electronFileActions_1.OpenFileFolderAction.LABEL, { primary: 32768 /* CtrlCmd */ | 45 /* KEY_O */ }), 'Files: Open...', category);
}
else {
    workbenchActionsRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(electronFileActions_1.OpenFileAction, electronFileActions_1.OpenFileAction.ID, electronFileActions_1.OpenFileAction.LABEL, { primary: 32768 /* CtrlCmd */ | 45 /* KEY_O */ }), 'Files: Open File...', category);
    workbenchActionsRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(electronFileActions_1.OpenFolderAction, electronFileActions_1.OpenFolderAction.ID, electronFileActions_1.OpenFolderAction.LABEL), 'Files: Open Folder...', category);
}
// Contribute to File Viewers
var actionsRegistry = platform_1.Registry.as(actionBarRegistry_1.Extensions.Actionbar);
actionsRegistry.registerActionBarContributor(actionBarRegistry_1.Scope.VIEWER, FileViewerActionContributor);
// Register Dirty Files Tracker
platform_1.Registry.as(contributions_1.Extensions.Workbench).registerWorkbenchContribution(dirtyFilesTracker_1.DirtyFilesTracker);
// Register Service
extensions_1.registerSingleton(files_1.ITextFileService, textFileService_1.TextFileService);
