/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var winjs_base_1 = require('vs/base/common/winjs.base');
var platform_1 = require('vs/platform/platform');
var types = require('vs/base/common/types');
var paths = require('vs/base/common/paths');
var mime_1 = require('vs/base/common/mime');
var labels = require('vs/base/common/labels');
var strings = require('vs/base/common/strings');
var assert = require('vs/base/common/assert');
var editor_1 = require('vs/workbench/common/editor');
var binaryEditorModel_1 = require('vs/workbench/common/editor/binaryEditorModel');
var files_1 = require('vs/platform/files/common/files');
var files_2 = require('vs/workbench/parts/files/common/files');
var workspace_1 = require('vs/platform/workspace/common/workspace');
var event_1 = require('vs/platform/event/common/event');
var instantiation_1 = require('vs/platform/instantiation/common/instantiation');
var lifecycle_1 = require('vs/base/common/lifecycle');
var history_1 = require('vs/workbench/services/history/common/history');
/**
 * A file editor input is the input type for the file editor of file system resources.
 */
var FileEditorInput = (function (_super) {
    __extends(FileEditorInput, _super);
    /**
     * An editor input who's contents are retrieved from file services.
     */
    function FileEditorInput(resource, mime, preferredEncoding, instantiationService, contextService, historyService, eventService, textFileService) {
        _super.call(this);
        this.instantiationService = instantiationService;
        this.contextService = contextService;
        this.historyService = historyService;
        this.eventService = eventService;
        this.textFileService = textFileService;
        this.toUnbind = [];
        if (resource) {
            this.setResource(resource);
            this.setMime(mime || mime_1.guessMimeTypes(this.resource.fsPath).join(', '));
            this.preferredEncoding = preferredEncoding;
        }
        this.registerListeners();
    }
    FileEditorInput.prototype.registerListeners = function () {
        var _this = this;
        // Model changes
        this.toUnbind.push(this.textFileService.models.onModelDirty(function (e) { return _this.onDirtyStateChange(e); }));
        this.toUnbind.push(this.textFileService.models.onModelSaveError(function (e) { return _this.onDirtyStateChange(e); }));
        this.toUnbind.push(this.textFileService.models.onModelSaved(function (e) { return _this.onDirtyStateChange(e); }));
        this.toUnbind.push(this.textFileService.models.onModelReverted(function (e) { return _this.onDirtyStateChange(e); }));
        // File changes
        this.toUnbind.push(this.eventService.addListener2('files.internal:fileChanged', function (e) { return _this.onLocalFileChange(e); }));
        this.toUnbind.push(this.eventService.addListener2(files_1.EventType.FILE_CHANGES, function (e) { return _this.onFileChanges(e); }));
    };
    FileEditorInput.prototype.onLocalFileChange = function (e) {
        var movedTo = e.gotMoved() && e.getAfter() && e.getAfter().resource;
        if (e.gotDeleted() || movedTo) {
            this.disposeIfRelated(e.getBefore().resource, movedTo);
        }
    };
    FileEditorInput.prototype.onFileChanges = function (e) {
        var _this = this;
        e.getDeleted().forEach(function (deleted) {
            _this.disposeIfRelated(deleted.resource);
        });
    };
    FileEditorInput.prototype.onDirtyStateChange = function (e) {
        if (e.resource.toString() === this.resource.toString()) {
            this._onDidChangeDirty.fire();
        }
    };
    FileEditorInput.prototype.setResource = function (resource) {
        if (resource.scheme !== 'file') {
            throw new Error('FileEditorInput can only handle file:// resources.');
        }
        this.resource = resource;
        // Reset resource dependent properties
        this.name = null;
        this.description = null;
        this.verboseDescription = null;
    };
    FileEditorInput.prototype.getResource = function () {
        return this.resource;
    };
    FileEditorInput.prototype.getMime = function () {
        return this.mime;
    };
    FileEditorInput.prototype.setMime = function (mime) {
        assert.ok(mime, 'Editor input needs mime type');
        this.mime = mime;
    };
    FileEditorInput.prototype.setPreferredEncoding = function (encoding) {
        this.preferredEncoding = encoding;
    };
    FileEditorInput.prototype.getEncoding = function () {
        var textModel = this.textFileService.models.get(this.resource);
        if (textModel) {
            return textModel.getEncoding();
        }
        return this.preferredEncoding;
    };
    FileEditorInput.prototype.setEncoding = function (encoding, mode) {
        this.preferredEncoding = encoding;
        var textModel = this.textFileService.models.get(this.resource);
        if (textModel) {
            textModel.setEncoding(encoding, mode);
        }
    };
    FileEditorInput.prototype.getTypeId = function () {
        return files_2.FILE_EDITOR_INPUT_ID;
    };
    FileEditorInput.prototype.getName = function () {
        if (!this.name) {
            this.name = paths.basename(this.resource.fsPath);
        }
        return this.name;
    };
    FileEditorInput.prototype.getDescription = function (verbose) {
        if (!verbose) {
            if (!this.description) {
                this.description = labels.getPathLabel(paths.dirname(this.resource.fsPath), this.contextService);
            }
            return this.description;
        }
        if (!this.verboseDescription) {
            this.verboseDescription = labels.getPathLabel(this.resource.fsPath);
        }
        return this.verboseDescription;
    };
    FileEditorInput.prototype.isDirty = function () {
        var model = this.textFileService.models.get(this.resource);
        if (!model) {
            return false;
        }
        var state = model.getState();
        if (state === files_2.ModelState.CONFLICT || state === files_2.ModelState.ERROR) {
            return true; // always indicate dirty state if we are in conflict or error state
        }
        if (this.textFileService.getAutoSaveMode() === files_2.AutoSaveMode.AFTER_SHORT_DELAY) {
            return false; // fast auto save enabled so we do not declare dirty
        }
        return model.isDirty();
    };
    FileEditorInput.prototype.confirmSave = function () {
        return this.textFileService.confirmSave([this.resource]);
    };
    FileEditorInput.prototype.save = function () {
        return this.textFileService.save(this.resource);
    };
    FileEditorInput.prototype.revert = function () {
        return this.textFileService.revert(this.resource);
    };
    FileEditorInput.prototype.getPreferredEditorId = function (candidates) {
        var editorRegistry = platform_1.Registry.as(editor_1.Extensions.Editors);
        // Lookup Editor by Mime
        var descriptor;
        var mimes = this.mime.split(',');
        for (var m = 0; m < mimes.length; m++) {
            var mime = strings.trim(mimes[m]);
            for (var i = 0; i < candidates.length; i++) {
                descriptor = editorRegistry.getEditorById(candidates[i]);
                if (types.isFunction(descriptor.getMimeTypes)) {
                    var mimetypes = descriptor.getMimeTypes();
                    for (var j = 0; j < mimetypes.length; j++) {
                        var mimetype = mimetypes[j];
                        // Check for direct mime match
                        if (mime === mimetype) {
                            return descriptor.getId();
                        }
                        // Otherwise check for wildcard mime matches
                        if (strings.endsWith(mimetype, '/*') && strings.startsWith(mime, mimetype.substring(0, mimetype.length - 1))) {
                            return descriptor.getId();
                        }
                    }
                }
            }
        }
        // Otherwise use default editor
        return files_2.BINARY_FILE_EDITOR_ID;
    };
    FileEditorInput.prototype.resolve = function (refresh) {
        var _this = this;
        return this.textFileService.models.loadOrCreate(this.resource, this.preferredEncoding, refresh).then(null, function (error) {
            // In case of an error that indicates that the file is binary or too large, just return with the binary editor model
            if (error.fileOperationResult === files_1.FileOperationResult.FILE_IS_BINARY || error.fileOperationResult === files_1.FileOperationResult.FILE_TOO_LARGE) {
                return _this.instantiationService.createInstance(binaryEditorModel_1.BinaryEditorModel, _this.resource, _this.getName()).load();
            }
            // Bubble any other error up
            return winjs_base_1.TPromise.wrapError(error);
        });
    };
    FileEditorInput.prototype.disposeIfRelated = function (resource, movedTo) {
        if (this.isDirty()) {
            return; // we never dispose dirty files
        }
        // Special case: a resource was renamed to the same path with different casing. Since our paths
        // API is treating the paths as equal (they are on disk), we end up disposing the input we just
        // renamed. The workaround is to detect that we do not dispose any input we are moving the file to
        if (movedTo && movedTo.fsPath === this.resource.fsPath) {
            return;
        }
        // Check if path is identical or path is a folder that the content is inside
        if (paths.isEqualOrParent(this.resource.toString(), resource.toString())) {
            this.historyService.remove(this);
            this.dispose();
        }
    };
    FileEditorInput.prototype.dispose = function () {
        // Listeners
        lifecycle_1.dispose(this.toUnbind);
        _super.prototype.dispose.call(this);
    };
    FileEditorInput.prototype.matches = function (otherInput) {
        if (_super.prototype.matches.call(this, otherInput) === true) {
            return true;
        }
        if (otherInput) {
            // Note that we can not test for the mime type here because we cache resolved file editor input models by resource. And
            // these models have a fixed mode association that can not be changed afterwards. As such, we always treat this input
            // equal if the resource is equal so that there is always just one text editor model (with undo hisotry etc.) around.
            //
            // !!! DO NOT CHANGE THIS ASSUMPTION !!!
            //
            return otherInput instanceof FileEditorInput && otherInput.resource.toString() === this.resource.toString();
        }
        return false;
    };
    FileEditorInput = __decorate([
        __param(3, instantiation_1.IInstantiationService),
        __param(4, workspace_1.IWorkspaceContextService),
        __param(5, history_1.IHistoryService),
        __param(6, event_1.IEventService),
        __param(7, files_2.ITextFileService)
    ], FileEditorInput);
    return FileEditorInput;
}(files_2.FileEditorInput));
exports.FileEditorInput = FileEditorInput;
