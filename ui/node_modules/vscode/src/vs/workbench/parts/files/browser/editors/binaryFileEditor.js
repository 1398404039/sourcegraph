/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var nls = require('vs/nls');
var binaryEditor_1 = require('vs/workbench/browser/parts/editor/binaryEditor');
var files_1 = require('vs/workbench/parts/files/common/files');
var telemetry_1 = require('vs/platform/telemetry/common/telemetry');
var editorService_1 = require('vs/workbench/services/editor/common/editorService');
/**
 * An implementation of editor for binary files like images.
 */
var BinaryFileEditor = (function (_super) {
    __extends(BinaryFileEditor, _super);
    function BinaryFileEditor(telemetryService, editorService) {
        _super.call(this, BinaryFileEditor.ID, telemetryService, editorService);
    }
    BinaryFileEditor.prototype.getTitle = function () {
        return this.getInput() ? this.getInput().getName() : nls.localize('binaryFileEditor', "Binary File Viewer");
    };
    BinaryFileEditor.ID = files_1.BINARY_FILE_EDITOR_ID;
    BinaryFileEditor = __decorate([
        __param(0, telemetry_1.ITelemetryService),
        __param(1, editorService_1.IWorkbenchEditorService)
    ], BinaryFileEditor);
    return BinaryFileEditor;
}(binaryEditor_1.BaseBinaryResourceEditor));
exports.BinaryFileEditor = BinaryFileEditor;
