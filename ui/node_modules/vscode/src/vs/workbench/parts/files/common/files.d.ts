import URI from 'vs/base/common/uri';
import { IEditorOptions } from 'vs/editor/common/editorCommon';
import { EncodingMode, EditorInput, IFileEditorInput, IWorkbenchEditorConfiguration } from 'vs/workbench/common/editor';
import { IFilesConfiguration } from 'vs/platform/files/common/files';
import { RawContextKey } from 'vs/platform/contextkey/common/contextkey';
/**
 * Explorer viewlet id.
 */
export declare const VIEWLET_ID = "workbench.view.explorer";
export declare const ExplorerViewletVisible: RawContextKey<boolean>;
/**
 * File editor input id.
 */
export declare const FILE_EDITOR_INPUT_ID = "workbench.editors.files.fileEditorInput";
/**
 * Text file editor id.
 */
export declare const TEXT_FILE_EDITOR_ID = "workbench.editors.files.textFileEditor";
/**
 * Binary file editor id.
 */
export declare const BINARY_FILE_EDITOR_ID = "workbench.editors.files.binaryFileEditor";
/**
 * API class to denote file editor inputs. Internal implementation is provided.
 *
 * Note: This class is not intended to be instantiated.
 */
export declare abstract class FileEditorInput extends EditorInput implements IFileEditorInput {
    abstract setResource(resource: URI): void;
    abstract getResource(): URI;
    abstract setPreferredEncoding(encoding: string): void;
    abstract setEncoding(encoding: string, mode: EncodingMode): void;
    abstract getEncoding(): string;
    getTelemetryDescriptor(): {
        [key: string]: any;
    };
}
export interface IFilesConfiguration extends IFilesConfiguration, IWorkbenchEditorConfiguration {
    explorer: {
        openEditors: {
            visible: number;
            dynamicHeight: boolean;
        };
        autoReveal: boolean;
        enableDragAndDrop: boolean;
    };
    editor: IEditorOptions;
}
export interface IFileResource {
    resource: URI;
    isDirectory: boolean;
}
/**
 * Helper to get a file resource from an object.
 */
export declare function asFileResource(obj: any): IFileResource;
