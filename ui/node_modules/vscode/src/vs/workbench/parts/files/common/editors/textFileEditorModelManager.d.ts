import Event from 'vs/base/common/event';
import { TPromise } from 'vs/base/common/winjs.base';
import URI from 'vs/base/common/uri';
import { IEditorGroupService } from 'vs/workbench/services/group/common/groupService';
import { ITextFileEditorModel, ITextFileEditorModelManager, TextFileModelChangeEvent } from 'vs/workbench/parts/files/common/files';
import { ILifecycleService } from 'vs/platform/lifecycle/common/lifecycle';
import { IEventService } from 'vs/platform/event/common/event';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
export declare class TextFileEditorModelManager implements ITextFileEditorModelManager {
    private lifecycleService;
    private eventService;
    private instantiationService;
    private editorGroupService;
    private static FILE_CHANGE_UPDATE_DELAY;
    private toUnbind;
    private _onModelDirty;
    private _onModelSaveError;
    private _onModelSaved;
    private _onModelReverted;
    private _onModelEncodingChanged;
    private mapResourceToDisposeListener;
    private mapResourceToStateChangeListener;
    private mapResourceToModel;
    private mapResourceToPendingModelLoaders;
    constructor(lifecycleService: ILifecycleService, eventService: IEventService, instantiationService: IInstantiationService, editorGroupService: IEditorGroupService);
    private registerListeners();
    private onEditorsChanged();
    private disposeModelIfPossible(resource);
    private onLocalFileChange(e);
    private onFileChanges(e);
    private canDispose(textModel);
    readonly onModelDirty: Event<TextFileModelChangeEvent>;
    readonly onModelSaveError: Event<TextFileModelChangeEvent>;
    readonly onModelSaved: Event<TextFileModelChangeEvent>;
    readonly onModelReverted: Event<TextFileModelChangeEvent>;
    readonly onModelEncodingChanged: Event<TextFileModelChangeEvent>;
    get(resource: URI): ITextFileEditorModel;
    loadOrCreate(resource: URI, encoding: string, refresh?: boolean): TPromise<ITextFileEditorModel>;
    getAll(resource?: URI): ITextFileEditorModel[];
    add(resource: URI, model: ITextFileEditorModel): void;
    remove(resource: URI): void;
    clear(): void;
    private disposeUnusedModels();
    dispose(): void;
}
