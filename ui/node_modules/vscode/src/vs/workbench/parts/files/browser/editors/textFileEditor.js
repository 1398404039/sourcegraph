/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var winjs_base_1 = require('vs/base/common/winjs.base');
var nls = require('vs/nls');
var errors = require('vs/base/common/errors');
var errorMessage_1 = require('vs/base/common/errorMessage');
var mime_1 = require('vs/base/common/mime');
var types = require('vs/base/common/types');
var paths = require('vs/base/common/paths');
var actions_1 = require('vs/base/common/actions');
var memento_1 = require('vs/workbench/common/memento');
var files_1 = require('vs/workbench/parts/files/common/files');
var textEditor_1 = require('vs/workbench/browser/parts/editor/textEditor');
var binaryEditorModel_1 = require('vs/workbench/common/editor/binaryEditorModel');
var fileEditorInput_1 = require('vs/workbench/parts/files/common/editors/fileEditorInput');
var viewletService_1 = require('vs/workbench/services/viewlet/common/viewletService');
var files_2 = require('vs/platform/files/common/files');
var telemetry_1 = require('vs/platform/telemetry/common/telemetry');
var workspace_1 = require('vs/platform/workspace/common/workspace');
var storage_1 = require('vs/platform/storage/common/storage');
var configuration_1 = require('vs/platform/configuration/common/configuration');
var event_1 = require('vs/platform/event/common/event');
var history_1 = require('vs/workbench/services/history/common/history');
var instantiation_1 = require('vs/platform/instantiation/common/instantiation');
var message_1 = require('vs/platform/message/common/message');
var editorService_1 = require('vs/workbench/services/editor/common/editorService');
var themeService_1 = require('vs/workbench/services/themes/common/themeService');
var TEXT_EDITOR_VIEW_STATE_PREFERENCE_KEY = 'textEditorViewState';
/**
 * An implementation of editor for file system resources.
 */
var TextFileEditor = (function (_super) {
    __extends(TextFileEditor, _super);
    function TextFileEditor(telemetryService, fileService, viewletService, instantiationService, contextService, storageService, historyService, messageService, configurationService, eventService, editorService, themeService) {
        var _this = this;
        _super.call(this, TextFileEditor.ID, telemetryService, instantiationService, contextService, storageService, messageService, configurationService, eventService, editorService, themeService);
        this.fileService = fileService;
        this.viewletService = viewletService;
        this.historyService = historyService;
        // Clear view state for deleted files
        this.toUnbind.push(this.eventService.addListener2(files_2.EventType.FILE_CHANGES, function (e) { return _this.onFilesChanged(e); }));
    }
    TextFileEditor.prototype.onFilesChanged = function (e) {
        var deleted = e.getDeleted();
        if (deleted && deleted.length) {
            this.clearTextEditorViewState(this.storageService, deleted.map(function (d) { return d.resource.toString(); }));
        }
    };
    TextFileEditor.prototype.getTitle = function () {
        return this.getInput() ? this.getInput().getName() : nls.localize('textFileEditor', "Text File Editor");
    };
    TextFileEditor.prototype.getInput = function () {
        return _super.prototype.getInput.call(this);
    };
    TextFileEditor.prototype.setInput = function (input, options) {
        var _this = this;
        var oldInput = this.getInput();
        _super.prototype.setInput.call(this, input, options);
        // Detect options
        var forceOpen = options && options.forceOpen;
        // We have a current input in this editor and are about to either open a new editor or jump to a different
        // selection inside the editor. Thus we store the current selection into the navigation history so that
        // a user can navigate back to the exact position he left off.
        if (oldInput) {
            var selection = this.getControl().getSelection();
            if (selection) {
                this.historyService.add(oldInput, { selection: { startLineNumber: selection.startLineNumber, startColumn: selection.startColumn } });
            }
        }
        // Same Input
        if (!forceOpen && input.matches(oldInput)) {
            // TextOptions (avoiding instanceof here for a reason, do not change!)
            if (options && types.isFunction(options.apply)) {
                options.apply(this.getControl());
            }
            return winjs_base_1.TPromise.as(null);
        }
        // Remember view settings if input changes
        if (oldInput) {
            this.saveTextEditorViewState(this.storageService, oldInput.getResource().toString());
        }
        // Different Input (Reload)
        return this.editorService.resolveEditorModel(input, true /* Reload */).then(function (resolvedModel) {
            // There is a special case where the text editor has to handle binary file editor input: if a file with application/unknown
            // mime has been resolved and cached before, it maybe an actual instance of BinaryEditorModel. In this case our text
            // editor has to open this model using the binary editor. We return early in this case.
            if (resolvedModel instanceof binaryEditorModel_1.BinaryEditorModel) {
                return _this.openAsBinary(input, options);
            }
            // Check Model state
            var textFileModel = resolvedModel;
            var hasInput = !!_this.getInput();
            var modelDisposed = textFileModel.isDisposed();
            var inputChanged = hasInput && _this.getInput().getResource().toString() !== textFileModel.getResource().toString();
            if (!hasInput ||
                modelDisposed ||
                inputChanged // a different input was set meanwhile
            ) {
                return null;
            }
            // Editor
            var textEditor = _this.getControl();
            textEditor.setModel(textFileModel.textEditorModel);
            // TextOptions (avoiding instanceof here for a reason, do not change!)
            var optionsGotApplied = false;
            if (options && types.isFunction(options.apply)) {
                optionsGotApplied = options.apply(textEditor);
            }
            // Otherwise restore View State
            if (!optionsGotApplied) {
                var editorViewState = _this.loadTextEditorViewState(_this.storageService, _this.getInput().getResource().toString());
                if (editorViewState) {
                    textEditor.restoreViewState(editorViewState);
                }
            }
        }, function (error) {
            // In case we tried to open a file inside the text editor and the response
            // indicates that this is not a text file, reopen the file through the binary
            // editor by using application/octet-stream as mime.
            if (error.fileOperationResult === files_2.FileOperationResult.FILE_IS_BINARY) {
                return _this.openAsBinary(input, options);
            }
            // Similar, handle case where we were asked to open a folder in the text editor.
            if (error.fileOperationResult === files_2.FileOperationResult.FILE_IS_DIRECTORY && _this.openAsFolder(input)) {
                return;
            }
            // Offer to create a file from the error if we have a file not found and the name is valid
            if (error.fileOperationResult === files_2.FileOperationResult.FILE_NOT_FOUND && paths.isValidBasename(paths.basename(input.getResource().fsPath))) {
                return winjs_base_1.TPromise.wrapError(errors.create(errorMessage_1.toErrorMessage(error), {
                    actions: [
                        new actions_1.Action('workbench.files.action.createMissingFile', nls.localize('createFile', "Create File"), null, true, function () {
                            return _this.fileService.updateContent(input.getResource(), '').then(function () {
                                // Open
                                return _this.editorService.openEditor({
                                    resource: input.getResource(),
                                    mime: mime_1.MIME_TEXT,
                                    options: {
                                        pinned: true // new file gets pinned by default
                                    }
                                });
                            });
                        }),
                        message_1.CancelAction
                    ]
                }));
            }
            // Otherwise make sure the error bubbles up
            return winjs_base_1.TPromise.wrapError(error);
        });
    };
    TextFileEditor.prototype.openAsBinary = function (input, options) {
        var fileInputBinary = this.instantiationService.createInstance(fileEditorInput_1.FileEditorInput, input.getResource(), mime_1.MIME_BINARY, void 0);
        this.editorService.openEditor(fileInputBinary, options, this.position).done(null, errors.onUnexpectedError);
    };
    TextFileEditor.prototype.openAsFolder = function (input) {
        var _this = this;
        // Since we cannot open a folder, we have to restore the previous input if any and close the editor
        this.editorService.closeEditor(this.position, this.input).done(function () {
            // Best we can do is to reveal the folder in the explorer
            if (_this.contextService.isInsideWorkspace(input.getResource())) {
                _this.viewletService.openViewlet(files_1.VIEWLET_ID, true).done(function (viewlet) {
                    return viewlet.getExplorerView().select(input.getResource(), true);
                }, errors.onUnexpectedError);
            }
        }, errors.onUnexpectedError);
        return true; // in any case we handled it
    };
    TextFileEditor.prototype.getCodeEditorOptions = function () {
        var options = _super.prototype.getCodeEditorOptions.call(this);
        var input = this.getInput();
        var inputName = input && input.getName();
        options.ariaLabel = inputName ? nls.localize('fileEditorWithInputAriaLabel', "{0}. Text file editor.", inputName) : nls.localize('fileEditorAriaLabel', "Text file editor.");
        return options;
    };
    /**
     * Saves the text editor view state under the given key.
     */
    TextFileEditor.prototype.saveTextEditorViewState = function (storageService, key) {
        var memento = this.getMemento(storageService, memento_1.Scope.WORKSPACE);
        var textEditorViewStateMemento = memento[TEXT_EDITOR_VIEW_STATE_PREFERENCE_KEY];
        if (!textEditorViewStateMemento) {
            textEditorViewStateMemento = Object.create(null);
            memento[TEXT_EDITOR_VIEW_STATE_PREFERENCE_KEY] = textEditorViewStateMemento;
        }
        var editorViewState = this.getControl().saveViewState();
        var fileViewState = textEditorViewStateMemento[key];
        if (!fileViewState) {
            fileViewState = Object.create(null);
            textEditorViewStateMemento[key] = fileViewState;
        }
        if (typeof this.position === 'number') {
            fileViewState[this.position] = editorViewState;
        }
    };
    /**
     * Clears the text editor view state under the given key.
     */
    TextFileEditor.prototype.clearTextEditorViewState = function (storageService, keys) {
        var memento = this.getMemento(storageService, memento_1.Scope.WORKSPACE);
        var textEditorViewStateMemento = memento[TEXT_EDITOR_VIEW_STATE_PREFERENCE_KEY];
        if (textEditorViewStateMemento) {
            keys.forEach(function (key) { return delete textEditorViewStateMemento[key]; });
        }
    };
    /**
     * Loads the text editor view state for the given key and returns it.
     */
    TextFileEditor.prototype.loadTextEditorViewState = function (storageService, key) {
        var memento = this.getMemento(storageService, memento_1.Scope.WORKSPACE);
        var textEditorViewStateMemento = memento[TEXT_EDITOR_VIEW_STATE_PREFERENCE_KEY];
        if (textEditorViewStateMemento) {
            var fileViewState = textEditorViewStateMemento[key];
            if (fileViewState) {
                return fileViewState[this.position];
            }
        }
        return null;
    };
    TextFileEditor.prototype.clearInput = function () {
        // Keep editor view state in settings to restore when coming back
        if (this.input) {
            this.saveTextEditorViewState(this.storageService, this.getInput().getResource().toString());
        }
        // Clear Model
        this.getControl().setModel(null);
        // Pass to super
        _super.prototype.clearInput.call(this);
    };
    TextFileEditor.prototype.shutdown = function () {
        // Save View State
        if (this.input) {
            this.saveTextEditorViewState(this.storageService, this.getInput().getResource().toString());
        }
        // Call Super
        _super.prototype.shutdown.call(this);
    };
    TextFileEditor.ID = files_1.TEXT_FILE_EDITOR_ID;
    TextFileEditor = __decorate([
        __param(0, telemetry_1.ITelemetryService),
        __param(1, files_2.IFileService),
        __param(2, viewletService_1.IViewletService),
        __param(3, instantiation_1.IInstantiationService),
        __param(4, workspace_1.IWorkspaceContextService),
        __param(5, storage_1.IStorageService),
        __param(6, history_1.IHistoryService),
        __param(7, message_1.IMessageService),
        __param(8, configuration_1.IConfigurationService),
        __param(9, event_1.IEventService),
        __param(10, editorService_1.IWorkbenchEditorService),
        __param(11, themeService_1.IThemeService)
    ], TextFileEditor);
    return TextFileEditor;
}(textEditor_1.BaseTextEditor));
exports.TextFileEditor = TextFileEditor;
