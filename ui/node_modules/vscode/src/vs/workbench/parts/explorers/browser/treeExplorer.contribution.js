/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
require("./media/treeExplorer.contribution.css");
var nls_1 = require("vs/nls");
var paths_1 = require("vs/base/common/paths");
var dom_1 = require("vs/base/browser/dom");
var platform_1 = require("vs/platform/platform");
var extensionsRegistry_1 = require("vs/platform/extensions/common/extensionsRegistry");
var treeExplorerService_1 = require("vs/workbench/parts/explorers/common/treeExplorerService");
var treeExplorerService_2 = require("vs/workbench/parts/explorers/browser/treeExplorerService");
var extensions_1 = require("vs/platform/instantiation/common/extensions");
var viewlet_1 = require("vs/workbench/browser/viewlet");
var treeExplorer_1 = require("vs/workbench/parts/explorers/common/treeExplorer");
var contributions_1 = require("vs/workbench/common/contributions");
var actionRegistry_1 = require("vs/workbench/common/actionRegistry");
var actions_1 = require("vs/platform/actions/common/actions");
var viewlet_2 = require("vs/workbench/services/viewlet/browser/viewlet");
var editorService_1 = require("vs/workbench/services/editor/common/editorService");
extensions_1.registerSingleton(treeExplorerService_1.ITreeExplorerService, treeExplorerService_2.TreeExplorerService);
var explorerSchema = {
    description: nls_1.localize('vscode.extension.contributes.explorer', 'Contributes custom tree explorer viewlet to the sidebar'),
    type: 'object',
    properties: {
        treeExplorerNodeProviderId: {
            description: nls_1.localize('vscode.extension.contributes.explorer.treeExplorerNodeProviderId', 'Unique id used to identify provider registered through vscode.workspace.registerTreeExplorerNodeProvider'),
            type: 'string'
        },
        treeLabel: {
            description: nls_1.localize('vscode.extension.contributes.explorer.treeLabel', 'Human readable string used to render the custom tree explorer'),
            type: 'string'
        },
        icon: {
            description: nls_1.localize('vscode.extension.contributes.explorer.icon', 'Path to the viewlet icon on the activity bar'),
            type: 'string'
        }
    }
};
var OpenViewletAction = (function (_super) {
    __extends(OpenViewletAction, _super);
    function OpenViewletAction(id, label, viewletService, editorService) {
        return _super.call(this, id, label, id, viewletService, editorService) || this;
    }
    return OpenViewletAction;
}(viewlet_1.ToggleViewletAction));
OpenViewletAction = __decorate([
    __param(2, viewlet_2.IViewletService),
    __param(3, editorService_1.IWorkbenchEditorService)
], OpenViewletAction);
exports.OpenViewletAction = OpenViewletAction;
var ExtensionExplorersContribtion = (function () {
    function ExtensionExplorersContribtion() {
        this.init();
    }
    ExtensionExplorersContribtion.prototype.getId = function () {
        return 'vs.explorers.extensionExplorers';
    };
    ExtensionExplorersContribtion.prototype.init = function () {
        extensionsRegistry_1.ExtensionsRegistry.registerExtensionPoint('explorer', [], explorerSchema).setHandler(function (extensions) {
            for (var _i = 0, extensions_2 = extensions; _i < extensions_2.length; _i++) {
                var extension = extensions_2[_i];
                var _a = extension.value, treeExplorerNodeProviderId = _a.treeExplorerNodeProviderId, treeLabel = _a.treeLabel, icon = _a.icon;
                if (!treeExplorer_1.isValidViewletId(treeExplorerNodeProviderId)) {
                    console.warn("Tree Explorer extension '" + treeLabel + "' has invalid id and failed to activate.");
                    continue;
                }
                var viewletId = treeExplorer_1.toViewletId(treeExplorerNodeProviderId);
                var viewletCSSClass = treeExplorer_1.toViewletCSSClass(treeExplorerNodeProviderId);
                // Generate CSS to show the icon in the activity bar
                if (icon) {
                    var iconClass = ".monaco-workbench > .activitybar .monaco-action-bar .action-label." + viewletCSSClass;
                    var iconPath = paths_1.join(extension.description.extensionFolderPath, icon);
                    dom_1.createCSSRule(iconClass, "background-image: url('" + iconPath + "')");
                }
                // Register action to open the viewlet
                var registry = platform_1.Registry.as(actionRegistry_1.Extensions.WorkbenchActions);
                registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(OpenViewletAction, viewletId, nls_1.localize('showViewlet', "Show {0}", treeLabel)), 'View: Show {0}', nls_1.localize('view', "View"));
                // Register as viewlet
                platform_1.Registry.as(viewlet_1.Extensions.Viewlets).registerViewlet(new viewlet_1.ViewletDescriptor('vs/workbench/parts/explorers/browser/treeExplorerViewlet', 'TreeExplorerViewlet', viewletId, treeLabel, viewletCSSClass, -1, extension.description.id));
            }
        });
    };
    return ExtensionExplorersContribtion;
}());
exports.ExtensionExplorersContribtion = ExtensionExplorersContribtion;
platform_1.Registry.as(contributions_1.Extensions.Workbench).registerWorkbenchContribution(ExtensionExplorersContribtion);
