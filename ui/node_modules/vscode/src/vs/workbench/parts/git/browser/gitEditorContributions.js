/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var editorBrowserExtensions_1 = require('vs/editor/browser/editorBrowserExtensions');
var editorCommon_1 = require('vs/editor/common/editorCommon');
var git_1 = require('vs/workbench/parts/git/common/git');
var workspace_1 = require('vs/platform/workspace/common/workspace');
var lifecycle_1 = require('vs/base/common/lifecycle');
var async_1 = require('vs/base/common/async');
var pattern = /^<<<<<<<|^=======|^>>>>>>>/;
function decorate(model) {
    var options = MergeDecorator.DECORATION_OPTIONS;
    return model.getLinesContent()
        .map(function (line, i) { return pattern.test(line) ? i : null; })
        .filter(function (i) { return i !== null; })
        .map(function (i) { return ({ startLineNumber: i + 1, startColumn: 1, endLineNumber: i + 1, endColumn: 1 }); })
        .map(function (range) { return ({ range: range, options: options }); });
}
var MergeDecoratorBoundToModel = (function (_super) {
    __extends(MergeDecoratorBoundToModel, _super);
    function MergeDecoratorBoundToModel(editor, model, filePath, gitService) {
        var _this = this;
        _super.call(this);
        this.editor = editor;
        this.model = model;
        this.filePath = filePath;
        this.gitService = gitService;
        this.decorations = [];
        var delayer = new async_1.Delayer(300);
        delayer.trigger(function () { return _this.redecorate(); });
        var gitModel = gitService.getModel();
        this._register(model.onDidChangeContent(function () { return delayer.trigger(function () { return _this.redecorate(); }); }));
        this._register(gitModel.addListener2(git_1.ModelEvents.STATUS_MODEL_UPDATED, function () { return delayer.trigger(function () { return _this.redecorate(); }); }));
    }
    MergeDecoratorBoundToModel.prototype._setDecorations = function (newDecorations) {
        this.decorations = this.editor.deltaDecorations(this.decorations, newDecorations);
    };
    MergeDecoratorBoundToModel.prototype.redecorate = function () {
        var gitModel = this.gitService.getModel();
        if (!gitModel) {
            return;
        }
        var mergeStatus = gitModel.getStatus().find(this.filePath, git_1.StatusType.MERGE);
        if (!mergeStatus) {
            return;
        }
        this._setDecorations(decorate(this.model));
    };
    MergeDecoratorBoundToModel.prototype.dispose = function () {
        this._setDecorations([]);
        _super.prototype.dispose.call(this);
    };
    return MergeDecoratorBoundToModel;
}(lifecycle_1.Disposable));
var MergeDecorator = (function (_super) {
    __extends(MergeDecorator, _super);
    function MergeDecorator(editor, gitService, contextService) {
        var _this = this;
        _super.call(this);
        this.editor = editor;
        this.gitService = gitService;
        this.contextService = contextService;
        this._register(this.editor.onDidChangeModel(function () { return _this.onModelChanged(); }));
        this.mergeDecorator = null;
    }
    MergeDecorator.prototype.getId = function () {
        return MergeDecorator.ID;
    };
    MergeDecorator.prototype.onModelChanged = function () {
        if (this.mergeDecorator) {
            this.mergeDecorator.dispose();
            this.mergeDecorator = null;
        }
        if (!this.contextService || !this.gitService) {
            return;
        }
        var model = this.editor.getModel();
        if (!model) {
            return;
        }
        var resource = model.uri;
        if (!resource) {
            return;
        }
        var path = this.contextService.toWorkspaceRelativePath(resource);
        if (!path) {
            return;
        }
        this.mergeDecorator = new MergeDecoratorBoundToModel(this.editor, model, path, this.gitService);
    };
    MergeDecorator.prototype.dispose = function () {
        if (this.mergeDecorator) {
            this.mergeDecorator.dispose();
            this.mergeDecorator = null;
        }
        _super.prototype.dispose.call(this);
    };
    MergeDecorator.ID = 'vs.git.editor.merge.decorator';
    MergeDecorator.DECORATION_OPTIONS = {
        className: 'git-merge-control-decoration',
        isWholeLine: true,
        overviewRuler: {
            color: 'rgb(197, 118, 0)',
            darkColor: 'rgb(197, 118, 0)',
            position: editorCommon_1.OverviewRulerLane.Left
        },
        stickiness: editorCommon_1.TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges
    };
    MergeDecorator = __decorate([
        editorBrowserExtensions_1.editorContribution,
        __param(1, git_1.IGitService),
        __param(2, workspace_1.IWorkspaceContextService)
    ], MergeDecorator);
    return MergeDecorator;
}(lifecycle_1.Disposable));
exports.MergeDecorator = MergeDecorator;
