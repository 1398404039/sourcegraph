/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var winjs_base_1 = require('vs/base/common/winjs.base');
var objects = require('vs/base/common/objects');
var uri_1 = require('vs/base/common/uri');
var git_1 = require('vs/workbench/parts/git/common/git');
var gitlib = require('vs/workbench/parts/git/node/git.lib');
var rawGitService_1 = require('vs/workbench/parts/git/node/rawGitService');
var path_1 = require('path');
var os_1 = require('os');
var pfs_1 = require('vs/base/node/pfs');
function createRawGitService(gitPath, workspaceRoot, defaultEncoding, exePath, version) {
    if (!gitPath) {
        return winjs_base_1.TPromise.as(new rawGitService_1.RawGitService(null));
    }
    var gitRootPath = uri_1.default.parse(require.toUrl('vs/workbench/parts/git/node')).fsPath;
    var bootstrapPath = uri_1.default.parse(require.toUrl('bootstrap')).fsPath + ".js";
    workspaceRoot = path_1.normalize(workspaceRoot);
    var env = objects.assign({}, process.env, {
        GIT_ASKPASS: path_1.join(gitRootPath, 'askpass.sh'),
        VSCODE_GIT_ASKPASS_BOOTSTRAP: bootstrapPath,
        VSCODE_GIT_ASKPASS_NODE: exePath,
        VSCODE_GIT_ASKPASS_MODULE_ID: 'vs/workbench/parts/git/node/askpass'
    });
    var git = new gitlib.Git({
        gitPath: gitPath, version: version,
        tmpPath: os_1.tmpdir(),
        defaultEncoding: defaultEncoding,
        env: env
    });
    var repo = git.open(workspaceRoot);
    return repo.getRoot()
        .then(null, function (err) {
        if (err instanceof gitlib.GitError && err.gitErrorCode === git_1.GitErrorCodes.NotAGitRepository) {
            return workspaceRoot;
        }
        return winjs_base_1.TPromise.wrapError(err);
    })
        .then(function (root) { return pfs_1.realpath(root); })
        .then(function (root) { return git.open(root); })
        .then(function (repo) { return new rawGitService_1.RawGitService(repo); });
}
exports.createRawGitService = createRawGitService;
