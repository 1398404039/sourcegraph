/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
require("./hugeView.css");
var nls = require("vs/nls");
var winjs = require("vs/base/common/winjs.base");
var ee = require("vs/base/common/eventEmitter");
var dom = require("vs/base/browser/dom");
var git_1 = require("vs/workbench/parts/git/common/git");
var errors_1 = require("vs/base/common/errors");
var button_1 = require("vs/base/browser/ui/button/button");
var $ = dom.$;
var HugeView = (function (_super) {
    __extends(HugeView, _super);
    function HugeView(gitService) {
        var _this = _super.call(this) || this;
        _this.gitService = gitService;
        _this.ID = 'huge';
        return _this;
    }
    Object.defineProperty(HugeView.prototype, "element", {
        get: function () {
            if (!this._element) {
                this.render();
            }
            return this._element;
        },
        enumerable: true,
        configurable: true
    });
    HugeView.prototype.render = function () {
        var _this = this;
        this._element = $('.huge-view');
        dom.append(this._element, $('p')).textContent = nls.localize('huge', "Your repository appears to have many active changes.\nThis can cause Code to become very slow.");
        var settingP = dom.append(this._element, $('p'));
        dom.append(settingP, document.createTextNode(nls.localize('setting', "You can permanently disable this warning with the following setting:")));
        dom.append(settingP, document.createTextNode(' '));
        var pre = dom.append(settingP, $('pre'));
        pre.style.display = 'inline';
        pre.textContent = 'git.allowLargeRepositories';
        var button = new button_1.Button(this._element);
        button.label = nls.localize('allo', "Allow large repositories");
        button.addListener2('click', function (e) {
            dom.EventHelper.stop(e);
            _this.gitService.allowHugeRepositories = true;
            _this.gitService.status().done(null, errors_1.onUnexpectedError);
        });
    };
    HugeView.prototype.focus = function () {
        return;
    };
    HugeView.prototype.layout = function (dimension) {
        return;
    };
    HugeView.prototype.setVisible = function (visible) {
        return winjs.TPromise.as(null);
    };
    HugeView.prototype.getControl = function () {
        return null;
    };
    HugeView.prototype.getActions = function () {
        return [];
    };
    HugeView.prototype.getSecondaryActions = function () {
        return [];
    };
    return HugeView;
}(ee.EventEmitter));
HugeView = __decorate([
    __param(0, git_1.IGitService)
], HugeView);
exports.HugeView = HugeView;
