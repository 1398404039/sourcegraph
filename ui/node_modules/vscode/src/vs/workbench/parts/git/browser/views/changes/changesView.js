/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
require('./changesView.css');
var nls = require('vs/nls');
var Platform = require('vs/base/common/platform');
var Lifecycle = require('vs/base/common/lifecycle');
var EventEmitter = require('vs/base/common/eventEmitter');
var Strings = require('vs/base/common/strings');
var Errors = require('vs/base/common/errors');
var paths = require('vs/base/common/paths');
var WinJS = require('vs/base/common/winjs.base');
var Builder = require('vs/base/browser/builder');
var keyboardEvent_1 = require('vs/base/browser/keyboardEvent');
var Actions = require('vs/base/common/actions');
var ActionBar = require('vs/base/browser/ui/actionbar/actionbar');
var TreeImpl = require('vs/base/parts/tree/browser/treeImpl');
var git = require('vs/workbench/parts/git/common/git');
var GitActions = require('vs/workbench/parts/git/browser/gitActions');
var GitModel = require('vs/workbench/parts/git/common/gitModel');
var Viewer = require('vs/workbench/parts/git/browser/views/changes/changesViewer');
var GitEditorInputs = require('vs/workbench/parts/git/browser/gitEditorInputs');
var output_1 = require('vs/workbench/parts/output/common/output');
var WorkbenchEditorCommon = require('vs/workbench/common/editor');
var InputBox = require('vs/base/browser/ui/inputbox/inputBox');
var severity_1 = require('vs/base/common/severity');
var editorService_1 = require('vs/workbench/services/editor/common/editorService');
var contextView_1 = require('vs/platform/contextview/browser/contextView');
var instantiation_1 = require('vs/platform/instantiation/common/instantiation');
var message_1 = require('vs/platform/message/common/message');
var workspace_1 = require('vs/platform/workspace/common/workspace');
var event_1 = require('vs/platform/event/common/event');
var groupService_1 = require('vs/workbench/services/group/common/groupService');
var configuration_1 = require('vs/platform/configuration/common/configuration');
var IGitService = git.IGitService;
var $ = Builder.$;
var ChangesView = (function (_super) {
    __extends(ChangesView, _super);
    function ChangesView(actionRunner, instantiationService, editorService, editorGroupService, messageService, contextViewService, contextService, gitService, outputService, eventService, configurationService) {
        var _this = this;
        _super.call(this);
        this.configurationService = configurationService;
        this.ID = 'changes';
        this.instantiationService = instantiationService;
        this.editorService = editorService;
        this.messageService = messageService;
        this.contextViewService = contextViewService;
        this.contextService = contextService;
        this.gitService = gitService;
        this.outputService = outputService;
        this.visible = false;
        this.currentDimension = null;
        this.actionRunner = actionRunner;
        this.toDispose = [
            this.smartCommitAction = this.instantiationService.createInstance(GitActions.SmartCommitAction, this),
            editorGroupService.onEditorsChanged(function () { return _this.onEditorsChanged(_this.editorService.getActiveEditorInput()).done(null, Errors.onUnexpectedError); }),
            this.gitService.addListener2(git.ServiceEvents.OPERATION_START, function (e) { return _this.onGitOperationStart(e); }),
            this.gitService.addListener2(git.ServiceEvents.OPERATION_END, function (e) { return _this.onGitOperationEnd(e); }),
            this.gitService.getModel().addListener2(git.ModelEvents.MODEL_UPDATED, this.onGitModelUpdate.bind(this))
        ];
    }
    Object.defineProperty(ChangesView.prototype, "element", {
        // IView
        get: function () {
            this.render();
            return this.$el.getHTMLElement();
        },
        enumerable: true,
        configurable: true
    });
    ChangesView.prototype.render = function () {
        var _this = this;
        if (this.$el) {
            return;
        }
        this.$el = $('.changes-view');
        this.$commitView = $('.commit-view').appendTo(this.$el);
        // Commit view
        this.commitInputBox = new InputBox.InputBox(this.$commitView.getHTMLElement(), this.contextViewService, {
            placeholder: nls.localize('commitMessage', "Message (press {0} to commit)", ChangesView.COMMIT_KEYBINDING),
            validationOptions: {
                showMessage: true,
                validation: function (value) {
                    var config = _this.configurationService.getConfiguration('git');
                    if (!config.enableLongCommitWarning) {
                        return null;
                    }
                    if (/^[^\n]{51}/.test(value)) {
                        return {
                            content: ChangesView.LONG_COMMIT,
                            type: InputBox.MessageType.WARNING
                        };
                    }
                    return null;
                }
            },
            ariaLabel: nls.localize('commitMessageAriaLabel', "Git: Type commit message and press {0} to commit", ChangesView.COMMIT_KEYBINDING),
            flexibleHeight: true
        });
        this.commitInputBox.onDidChange(function (value) { return _this.emit('change', value); });
        this.commitInputBox.onDidHeightChange(function (value) { return _this.emit('heightchange', value); });
        $(this.commitInputBox.inputElement).on('keydown', function (e) {
            var keyboardEvent = new keyboardEvent_1.StandardKeyboardEvent(e);
            if (keyboardEvent.equals(32768 /* CtrlCmd */ | 3 /* Enter */) || keyboardEvent.equals(32768 /* CtrlCmd */ | 49 /* KEY_S */)) {
                if (_this.smartCommitAction.enabled) {
                    _this.actionRunner.run(_this.smartCommitAction).done();
                }
                else {
                    _this.commitInputBox.showMessage({ content: ChangesView.NOTHING_TO_COMMIT, formatContent: true, type: InputBox.MessageType.INFO });
                }
            }
        }).on('blur', function () {
            _this.commitInputBox.hideMessage();
        });
        // Status view
        this.$statusView = $('.status-view').appendTo(this.$el);
        var actionProvider = this.instantiationService.createInstance(Viewer.ActionProvider);
        var renderer = this.instantiationService.createInstance(Viewer.Renderer, actionProvider, this.actionRunner);
        var dnd = this.instantiationService.createInstance(Viewer.DragAndDrop);
        var controller = this.instantiationService.createInstance(Viewer.Controller, actionProvider);
        this.tree = new TreeImpl.Tree(this.$statusView.getHTMLElement(), {
            dataSource: new Viewer.DataSource(),
            renderer: renderer,
            filter: new Viewer.Filter(),
            sorter: new Viewer.Sorter(),
            accessibilityProvider: new Viewer.AccessibilityProvider(),
            dnd: dnd,
            controller: controller
        }, {
            indentPixels: 0,
            twistiePixels: 20,
            ariaLabel: nls.localize('treeAriaLabel', "Git Changes View")
        });
        this.tree.setInput(this.gitService.getModel().getStatus());
        this.tree.expandAll(this.gitService.getModel().getStatus().getGroups());
        this.toDispose.push(this.tree.addListener2('selection', function (e) { return _this.onSelection(e); }));
        this.toDispose.push(this.commitInputBox.onDidHeightChange(function () { return _this.layout(); }));
    };
    ChangesView.prototype.focus = function () {
        var selection = this.tree.getSelection();
        if (selection.length > 0) {
            this.tree.reveal(selection[0], 0.5).done(null, Errors.onUnexpectedError);
        }
        this.commitInputBox.focus();
    };
    ChangesView.prototype.layout = function (dimension) {
        if (dimension === void 0) { dimension = this.currentDimension; }
        if (!dimension) {
            return;
        }
        this.currentDimension = dimension;
        this.commitInputBox.layout();
        var statusViewHeight = dimension.height - (this.commitInputBox.height + 12 /* margin */);
        this.$statusView.size(dimension.width, statusViewHeight);
        this.tree.layout(statusViewHeight);
        if (this.commitInputBox.height === 134) {
            this.$commitView.addClass('scroll');
        }
        else {
            this.$commitView.removeClass('scroll');
        }
    };
    ChangesView.prototype.setVisible = function (visible) {
        this.visible = visible;
        if (visible) {
            this.tree.onVisible();
            this.updateCommitInputTemplate();
            return this.onEditorsChanged(this.editorService.getActiveEditorInput());
        }
        else {
            this.tree.onHidden();
            return WinJS.TPromise.as(null);
        }
    };
    ChangesView.prototype.onUndoLastCommit = function (commit) {
        if (this.commitInputBox.value) {
            return;
        }
        this.commitInputBox.value = commit.message;
    };
    ChangesView.prototype.updateCommitInputTemplate = function () {
        var _this = this;
        if (this.commitInputBox.value) {
            return;
        }
        this.gitService.getCommitTemplate()
            .then(function (template) { return template && (_this.commitInputBox.value = template); })
            .done(null, Errors.onUnexpectedError);
    };
    ChangesView.prototype.getControl = function () {
        return this.tree;
    };
    ChangesView.prototype.getActions = function () {
        var _this = this;
        if (!this.actions) {
            this.actions = [
                this.smartCommitAction,
                this.instantiationService.createInstance(GitActions.RefreshAction)
            ];
            this.actions.forEach(function (a) { return _this.toDispose.push(a); });
        }
        return this.actions;
    };
    ChangesView.prototype.getSecondaryActions = function () {
        var _this = this;
        if (!this.secondaryActions) {
            this.secondaryActions = [
                this.instantiationService.createInstance(GitActions.SyncAction, GitActions.SyncAction.ID, GitActions.SyncAction.LABEL),
                this.instantiationService.createInstance(GitActions.PullAction, GitActions.PullAction.ID, GitActions.PullAction.LABEL),
                this.instantiationService.createInstance(GitActions.PullWithRebaseAction),
                this.instantiationService.createInstance(GitActions.PushAction, GitActions.PushAction.ID, GitActions.PushAction.LABEL),
                new ActionBar.Separator(),
                this.instantiationService.createInstance(GitActions.PublishAction, GitActions.PublishAction.ID, GitActions.PublishAction.LABEL),
                new ActionBar.Separator(),
                this.instantiationService.createInstance(GitActions.CommitAction, this),
                this.instantiationService.createInstance(GitActions.CommitSignedOffAction, this),
                this.instantiationService.createInstance(GitActions.StageAndCommitAction, this, GitActions.StageAndCommitAction.ID, GitActions.StageAndCommitAction.LABEL, GitActions.StageAndCommitAction.CSSCLASS),
                this.instantiationService.createInstance(GitActions.StageAndCommitSignedOffAction, this),
                this.instantiationService.createInstance(GitActions.UndoLastCommitAction, GitActions.UndoLastCommitAction.ID, GitActions.UndoLastCommitAction.LABEL),
                new ActionBar.Separator(),
                this.instantiationService.createInstance(GitActions.GlobalUnstageAction),
                this.instantiationService.createInstance(GitActions.GlobalUndoAction),
                new ActionBar.Separator(),
                new Actions.Action('show.gitOutput', nls.localize('showOutput', "Show Git Output"), null, true, function () { return _this.outputService.getChannel('Git').show(); })
            ];
            this.secondaryActions.forEach(function (a) { return _this.toDispose.push(a); });
        }
        return this.secondaryActions;
    };
    // ICommitState
    ChangesView.prototype.getCommitMessage = function () {
        return Strings.trim(this.commitInputBox.value);
    };
    ChangesView.prototype.onEmptyCommitMessage = function () {
        this.commitInputBox.focus();
        this.commitInputBox.showMessage({ content: ChangesView.NEED_MESSAGE, formatContent: true, type: InputBox.MessageType.INFO });
    };
    // Events
    ChangesView.prototype.onGitModelUpdate = function () {
        var _this = this;
        if (this.tree) {
            this.tree.refresh().done(function () {
                return _this.tree.expandAll(_this.gitService.getModel().getStatus().getGroups());
            });
        }
    };
    ChangesView.prototype.onEditorsChanged = function (input) {
        var _this = this;
        if (!this.tree) {
            return WinJS.TPromise.as(null);
        }
        var status = this.getStatusFromInput(input);
        if (!status) {
            this.tree.clearSelection();
        }
        if (this.visible && this.tree.getSelection().indexOf(status) === -1) {
            return this.tree.reveal(status, 0.5).then(function () {
                _this.tree.setSelection([status], { origin: 'implicit' });
            });
        }
        return WinJS.TPromise.as(null);
    };
    ChangesView.prototype.onSelection = function (e) {
        var _this = this;
        if (e.payload && e.payload && e.payload.origin === 'implicit') {
            return;
        }
        if (e.selection.length !== 1) {
            return;
        }
        var element = e.selection[0];
        if (!(element instanceof GitModel.FileStatus)) {
            return;
        }
        if (e.payload && e.payload.origin === 'keyboard' && !e.payload.originalEvent.equals(3 /* Enter */)) {
            return;
        }
        var isMouseOrigin = e.payload && (e.payload.origin === 'mouse');
        if (isMouseOrigin && (e.payload.originalEvent.metaKey || e.payload.originalEvent.shiftKey)) {
            return;
        }
        var isDoubleClick = isMouseOrigin && e.payload.originalEvent && e.payload.originalEvent.detail === 2;
        var status = element;
        this.gitService.getInput(status).done(function (input) {
            var options = new WorkbenchEditorCommon.TextDiffEditorOptions();
            if (isMouseOrigin) {
                options.preserveFocus = true;
                var originalEvent = e && e.payload && e.payload.origin === 'mouse' && e.payload.originalEvent;
                if (originalEvent && originalEvent.detail === 2) {
                    options.preserveFocus = false;
                    originalEvent.preventDefault(); // focus moves to editor, we need to prevent default
                }
            }
            options.forceOpen = true;
            options.pinned = isDoubleClick;
            var sideBySide = (e && e.payload && e.payload.originalEvent && e.payload.originalEvent.altKey);
            return _this.editorService.openEditor(input, options, sideBySide);
        }, function (e) {
            if (e.gitErrorCode === git.GitErrorCodes.CantOpenResource) {
                _this.messageService.show(severity_1.default.Warning, e);
                return;
            }
            _this.messageService.show(severity_1.default.Error, e);
        });
    };
    ChangesView.prototype.onGitOperationStart = function (operation) {
        var _this = this;
        if (operation.id === git.ServiceOperations.COMMIT) {
            if (this.commitInputBox) {
                this.commitInputBox.disable();
            }
        }
        else if (operation.id === git.ServiceOperations.RESET) {
            var promise_1 = this.gitService.getCommit('HEAD');
            var listener_1 = this.gitService.addListener2(git.ServiceEvents.OPERATION_END, function (e) {
                if (e.operation.id === git.ServiceOperations.RESET && !e.error) {
                    promise_1.done(function (c) { return _this.onUndoLastCommit(c); });
                    listener_1.dispose();
                }
            });
        }
    };
    ChangesView.prototype.onGitOperationEnd = function (e) {
        if (e.operation.id === git.ServiceOperations.COMMIT) {
            if (this.commitInputBox) {
                this.commitInputBox.enable();
                if (!e.error) {
                    this.commitInputBox.value = '';
                    this.updateCommitInputTemplate();
                }
            }
        }
    };
    // Misc
    ChangesView.prototype.getStatusFromInput = function (input) {
        if (!input) {
            return null;
        }
        if (input instanceof GitEditorInputs.GitDiffEditorInput) {
            return input.getFileStatus();
        }
        if (input instanceof GitEditorInputs.NativeGitIndexStringEditorInput) {
            return input.getFileStatus() || null;
        }
        var fileInput = WorkbenchEditorCommon.asFileEditorInput(input);
        if (fileInput) {
            var resource = fileInput.getResource();
            var workspaceRoot = this.contextService.getWorkspace().resource.fsPath;
            if (!workspaceRoot || !paths.isEqualOrParent(resource.fsPath, workspaceRoot)) {
                return null; // out of workspace not yet supported
            }
            var repositoryRoot = this.gitService.getModel().getRepositoryRoot();
            if (!repositoryRoot || !paths.isEqualOrParent(resource.fsPath, repositoryRoot)) {
                return null; // out of repository not supported
            }
            var repositoryRelativePath = paths.normalize(paths.relative(repositoryRoot, resource.fsPath));
            var status = this.gitService.getModel().getStatus().getWorkingTreeStatus().find(repositoryRelativePath);
            if (status && (status.getStatus() === git.Status.UNTRACKED || status.getStatus() === git.Status.IGNORED)) {
                return status;
            }
            status = this.gitService.getModel().getStatus().getMergeStatus().find(repositoryRelativePath);
            if (status) {
                return status;
            }
        }
        return null;
    };
    ChangesView.prototype.dispose = function () {
        if (this.$el) {
            this.$el.dispose();
            this.$el = null;
        }
        this.toDispose = Lifecycle.dispose(this.toDispose);
        _super.prototype.dispose.call(this);
    };
    ChangesView.COMMIT_KEYBINDING = Platform.isMacintosh ? 'Cmd+Enter' : 'Ctrl+Enter';
    ChangesView.NEED_MESSAGE = nls.localize('needMessage', "Please provide a commit message. You can always press **{0}** to commit changes. If there are any staged changes, only those will be committed; otherwise, all changes will.", ChangesView.COMMIT_KEYBINDING);
    ChangesView.NOTHING_TO_COMMIT = nls.localize('nothingToCommit', "Once there are some changes to commit, type in the commit message and either press **{0}** to commit changes. If there are any staged changes, only those will be committed; otherwise, all changes will.", ChangesView.COMMIT_KEYBINDING);
    ChangesView.LONG_COMMIT = nls.localize('longCommit', "It is recommended to keep the commit's first line under 50 characters. Feel free to use more lines for extra information.");
    ChangesView = __decorate([
        __param(1, instantiation_1.IInstantiationService),
        __param(2, editorService_1.IWorkbenchEditorService),
        __param(3, groupService_1.IEditorGroupService),
        __param(4, message_1.IMessageService),
        __param(5, contextView_1.IContextViewService),
        __param(6, workspace_1.IWorkspaceContextService),
        __param(7, IGitService),
        __param(8, output_1.IOutputService),
        __param(9, event_1.IEventService),
        __param(10, configuration_1.IConfigurationService)
    ], ChangesView);
    return ChangesView;
}(EventEmitter.EventEmitter));
exports.ChangesView = ChangesView;
