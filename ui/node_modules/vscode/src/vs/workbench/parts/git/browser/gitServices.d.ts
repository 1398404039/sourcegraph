import { TPromise } from 'vs/base/common/winjs.base';
import { IDisposable } from 'vs/base/common/lifecycle';
import Event from 'vs/base/common/event';
import { EventEmitter } from 'vs/base/common/eventEmitter';
import { EditorInput } from 'vs/workbench/common/editor';
import { IFileStatus, AutoFetcherState, IAutoFetcher, ServiceState, IModel, IGitOperation, IRawGitService, IGitService, IPushOptions, ICommit } from 'vs/workbench/parts/git/common/git';
import { ITextFileService } from 'vs/workbench/services/textfile/common/textfiles';
import { IOutputService } from 'vs/workbench/parts/output/common/output';
import { IWorkbenchEditorService } from 'vs/workbench/services/editor/common/editorService';
import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
import { IEventService } from 'vs/platform/event/common/event';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import { IMessageService } from 'vs/platform/message/common/message';
import { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';
import { ILifecycleService } from 'vs/platform/lifecycle/common/lifecycle';
import { IStorageService } from 'vs/platform/storage/common/storage';
export declare class AutoFetcher implements IAutoFetcher, IDisposable {
    private static MIN_TIMEOUT;
    private static MAX_TIMEOUT;
    private _state;
    private gitService;
    private eventService;
    private messageService;
    private configurationService;
    private instantiationService;
    private currentRequest;
    private timeout;
    private toDispose;
    private gitServiceStateDisposable;
    constructor(gitService: GitService, eventService: IEventService, messageService: IMessageService, editorService: IWorkbenchEditorService, configurationService: IConfigurationService, instantiationService: IInstantiationService);
    readonly state: AutoFetcherState;
    private onConfiguration(config);
    enable(): void;
    disable(): void;
    private onGitServiceStateChange(state);
    activate(): void;
    deactivate(): void;
    private loop();
    dispose(): void;
}
export declare class GitService extends EventEmitter implements IGitService {
    private configurationService;
    _serviceBrand: any;
    private eventService;
    private contextService;
    private messageService;
    private textFileService;
    private instantiationService;
    private editorService;
    private lifecycleService;
    private outputService;
    protected raw: IRawGitService;
    private state;
    private operations;
    private model;
    private inputCache;
    private toDispose;
    private needsRefresh;
    private statusDelayer;
    private reactiveStatusDelayer;
    private autoFetcher;
    private isStatusPending;
    private _allowHugeRepositories;
    allowHugeRepositories: boolean;
    readonly onOutput: Event<string>;
    constructor(raw: IRawGitService, instantiationService: IInstantiationService, eventService: IEventService, messageService: IMessageService, editorService: IWorkbenchEditorService, outputService: IOutputService, textFileService: ITextFileService, contextService: IWorkspaceContextService, lifecycleService: ILifecycleService, storageService: IStorageService, configurationService: IConfigurationService);
    private registerListeners();
    private onTextFileChange(e);
    private onFileChanges(e);
    private onGitServiceOperationEnd(e);
    getState(): ServiceState;
    getModel(): IModel;
    status(): TPromise<IModel>;
    private _status();
    private triggerAutoStatus(force?);
    init(): TPromise<IModel>;
    add(files?: IFileStatus[]): TPromise<IModel>;
    stage(filePath: string, content: string): TPromise<IModel>;
    branch(name: string, checkout?: boolean): TPromise<IModel>;
    checkout(treeish?: string, files?: IFileStatus[]): TPromise<IModel>;
    clean(files: IFileStatus[]): TPromise<IModel>;
    undo(): TPromise<IModel>;
    reset(treeish: string, hard?: boolean): TPromise<IModel>;
    revertFiles(treeish: string, files?: IFileStatus[]): TPromise<IModel>;
    fetch(): TPromise<IModel>;
    pull(rebase?: boolean): TPromise<IModel>;
    push(remote?: string, name?: string, options?: IPushOptions): TPromise<IModel>;
    sync(rebase?: boolean): TPromise<IModel>;
    commit(message: string, amend?: boolean, stage?: boolean, signoff?: boolean): TPromise<IModel>;
    getCommitTemplate(): TPromise<string>;
    getCommit(ref: string): TPromise<ICommit>;
    detectMimetypes(path: string, treeish?: string): TPromise<string[]>;
    clone(url: string, parentPath: string): TPromise<string>;
    private run(operationId, fn);
    private _run(operationId, fn);
    private wrapGitError<T>(e);
    private transition(state);
    buffer(path: string, treeish?: string): TPromise<string>;
    show(path: string, status: IFileStatus, treeish?: string, mimetype?: string): TPromise<EditorInput>;
    getInput(status: IFileStatus): TPromise<EditorInput>;
    isInitialized(): boolean;
    isIdle(): boolean;
    getRunningOperations(): IGitOperation[];
    getAutoFetcher(): IAutoFetcher;
    private static toPaths(files);
    dispose(): void;
}
