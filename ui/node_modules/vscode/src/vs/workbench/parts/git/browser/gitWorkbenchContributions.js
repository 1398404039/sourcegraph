/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
require('./media/git.contribution.css');
var nls = require('vs/nls');
var async = require('vs/base/common/async');
var errors = require('vs/base/common/errors');
var paths = require('vs/base/common/paths');
var lifecycle = require('vs/base/common/lifecycle');
var winjs = require('vs/base/common/winjs.base');
var ext = require('vs/workbench/common/contributions');
var git = require('vs/workbench/parts/git/common/git');
var common = require('vs/editor/common/editorCommon');
var widget = require('vs/editor/browser/codeEditor');
var viewlet = require('vs/workbench/browser/viewlet');
var statusbar = require('vs/workbench/browser/parts/statusbar/statusbar');
var platform = require('vs/platform/platform');
var widgets = require('vs/workbench/parts/git/browser/gitWidgets');
var wbar = require('vs/workbench/common/actionRegistry');
var gitoutput = require('vs/workbench/parts/git/browser/gitOutput');
var output = require('vs/workbench/parts/output/common/output');
var actions_1 = require('vs/platform/actions/common/actions');
var confregistry = require('vs/platform/configuration/common/configurationRegistry');
var configuration_1 = require('vs/platform/configuration/common/configuration');
var quickopen = require('vs/workbench/browser/quickopen');
require('vs/workbench/parts/git/browser/gitEditorContributions');
var activityService_1 = require('vs/workbench/services/activity/common/activityService');
var event_1 = require('vs/platform/event/common/event');
var instantiation_1 = require('vs/platform/instantiation/common/instantiation');
var message_1 = require('vs/platform/message/common/message');
var workspace_1 = require('vs/platform/workspace/common/workspace');
var viewletService_1 = require('vs/workbench/services/viewlet/common/viewletService');
var editorService_1 = require('vs/workbench/services/editor/common/editorService');
var modelService_1 = require('vs/editor/common/services/modelService');
var textModel_1 = require('vs/editor/common/model/textModel');
var editorWorkerService_1 = require('vs/editor/common/services/editorWorkerService');
var groupService_1 = require('vs/workbench/services/group/common/groupService');
var network_1 = require('vs/base/common/network');
var IGitService = git.IGitService;
var StatusUpdater = (function () {
    function StatusUpdater(gitService, eventService, activityService, messageService, configurationService) {
        var _this = this;
        this.gitService = gitService;
        this.eventService = eventService;
        this.activityService = activityService;
        this.messageService = messageService;
        this.configurationService = configurationService;
        this.progressBadgeDelayer = new async.Delayer(200);
        this.toDispose = [];
        this.toDispose.push(this.configurationService.onDidUpdateConfiguration(function (e) { return _this.onGitServiceChange(); }));
        this.toDispose.push(this.gitService.addBulkListener2(function (e) { return _this.onGitServiceChange(); }));
    }
    StatusUpdater.prototype.onGitServiceChange = function () {
        var _this = this;
        if (this.gitService.getState() !== git.ServiceState.OK) {
            this.progressBadgeDelayer.cancel();
            this.activityService.showActivity('workbench.view.git', null, 'git-viewlet-label');
        }
        else if (this.gitService.isIdle()) {
            this.showChangesBadge();
        }
        else {
            this.progressBadgeDelayer.trigger(function () {
                _this.activityService.showActivity('workbench.view.git', new activityService_1.ProgressBadge(function () { return nls.localize('gitProgressBadge', 'Running git status'); }), 'git-viewlet-label-progress');
            });
        }
    };
    StatusUpdater.prototype.showChangesBadge = function () {
        this.progressBadgeDelayer.cancel();
        var countBadge = this.configurationService.getConfiguration('git').countBadge;
        if (countBadge === 'off') {
            return;
        }
        var filter = countBadge === 'tracked'
            ? function (s) { return s.getStatus() !== git.Status.UNTRACKED; }
            : function () { return true; };
        var statuses = this.gitService.getModel().getStatus().getGroups()
            .map(function (g) { return g.all(); })
            .reduce(function (r, g) { return r.concat(g); }, [])
            .filter(filter);
        var badge = new activityService_1.NumberBadge(statuses.length, function (num) { return nls.localize('gitPendingChangesBadge', '{0} pending changes', num); });
        this.activityService.showActivity('workbench.view.git', badge, 'git-viewlet-label');
    };
    StatusUpdater.prototype.getId = function () {
        return StatusUpdater.ID;
    };
    StatusUpdater.prototype.dispose = function () {
        this.toDispose = lifecycle.dispose(this.toDispose);
    };
    StatusUpdater.ID = 'vs.git.statusUpdater';
    StatusUpdater = __decorate([
        __param(0, IGitService),
        __param(1, event_1.IEventService),
        __param(2, activityService_1.IActivityService),
        __param(3, message_1.IMessageService),
        __param(4, configuration_1.IConfigurationService)
    ], StatusUpdater);
    return StatusUpdater;
}());
exports.StatusUpdater = StatusUpdater;
var DirtyDiffModelDecorator = (function () {
    function DirtyDiffModelDecorator(model, path, modelService, editorWorkerService, editorService, contextService, gitService) {
        var _this = this;
        this.modelService = modelService;
        this.editorWorkerService = editorWorkerService;
        this.editorService = editorService;
        this.contextService = contextService;
        this.gitService = gitService;
        this.model = model;
        this._originalContentsURI = model.uri.with({ scheme: network_1.Schemas.internal });
        this.path = path;
        this.decorations = [];
        this.delayer = new async.ThrottledDelayer(500);
        this.diffDelayer = new async.ThrottledDelayer(200);
        this.toDispose = [];
        this.toDispose.push(model.onDidChangeContent(function () { return _this.triggerDiff(); }));
        this.toDispose.push(this.gitService.addListener2(git.ServiceEvents.STATE_CHANGED, function () { return _this.onChanges(); }));
        this.toDispose.push(this.gitService.addListener2(git.ServiceEvents.OPERATION_END, function (e) {
            if (e.operation.id !== git.ServiceOperations.BACKGROUND_FETCH) {
                _this.onChanges();
            }
        }));
        this.onChanges();
    }
    DirtyDiffModelDecorator.prototype.onChanges = function () {
        if (!this.gitService) {
            return;
        }
        if (this.gitService.getState() !== git.ServiceState.OK) {
            return;
        }
        // go through all interesting models
        this.trigger();
    };
    DirtyDiffModelDecorator.prototype.trigger = function () {
        var _this = this;
        this.delayer
            .trigger(function () { return _this.diffOriginalContents(); })
            .done(null, errors.onUnexpectedError);
    };
    DirtyDiffModelDecorator.prototype.diffOriginalContents = function () {
        var _this = this;
        return this.getOriginalContents()
            .then(function (contents) {
            if (!_this.model || _this.model.isDisposed()) {
                return; // disposed
            }
            if (!contents) {
                // untracked file
                _this.modelService.destroyModel(_this._originalContentsURI);
                return _this.triggerDiff();
            }
            var originalModel = _this.modelService.getModel(_this._originalContentsURI);
            if (originalModel) {
                var contentsRawText = textModel_1.RawText.fromStringWithModelOptions(contents, originalModel);
                // return early if nothing has changed
                if (originalModel.equals(contentsRawText)) {
                    return winjs.TPromise.as(null);
                }
                // we already have the original contents
                originalModel.setValueFromRawText(contentsRawText);
            }
            else {
                // this is the first time we load the original contents
                _this.modelService.createModel(contents, null, _this._originalContentsURI);
            }
            return _this.triggerDiff();
        });
    };
    DirtyDiffModelDecorator.prototype.getOriginalContents = function () {
        var gitModel = this.gitService.getModel();
        var treeish = gitModel.getStatus().find(this.path, git.StatusType.INDEX) ? '~' : 'HEAD';
        return this.gitService.buffer(this.path, treeish);
    };
    DirtyDiffModelDecorator.prototype.triggerDiff = function () {
        var _this = this;
        if (!this.diffDelayer) {
            return winjs.TPromise.as(null);
        }
        return this.diffDelayer.trigger(function () {
            if (!_this.model || _this.model.isDisposed()) {
                return winjs.TPromise.as([]); // disposed
            }
            return _this.editorWorkerService.computeDirtyDiff(_this._originalContentsURI, _this.model.uri, true);
        }).then(function (diff) {
            if (!_this.model || _this.model.isDisposed()) {
                return; // disposed
            }
            return _this.decorations = _this.model.deltaDecorations(_this.decorations, DirtyDiffModelDecorator.changesToDecorations(diff || []));
        });
    };
    DirtyDiffModelDecorator.changesToDecorations = function (diff) {
        return diff.map(function (change) {
            var startLineNumber = change.modifiedStartLineNumber;
            var endLineNumber = change.modifiedEndLineNumber || startLineNumber;
            // Added
            if (change.originalEndLineNumber === 0) {
                return {
                    range: {
                        startLineNumber: startLineNumber, startColumn: 1,
                        endLineNumber: endLineNumber, endColumn: 1
                    },
                    options: DirtyDiffModelDecorator.ADDED_DECORATION_OPTIONS
                };
            }
            // Removed
            if (change.modifiedEndLineNumber === 0) {
                return {
                    range: {
                        startLineNumber: startLineNumber, startColumn: 1,
                        endLineNumber: startLineNumber, endColumn: 1
                    },
                    options: DirtyDiffModelDecorator.DELETED_DECORATION_OPTIONS
                };
            }
            // Modified
            return {
                range: {
                    startLineNumber: startLineNumber, startColumn: 1,
                    endLineNumber: endLineNumber, endColumn: 1
                },
                options: DirtyDiffModelDecorator.MODIFIED_DECORATION_OPTIONS
            };
        });
    };
    DirtyDiffModelDecorator.prototype.dispose = function () {
        this.modelService.destroyModel(this._originalContentsURI);
        this.toDispose = lifecycle.dispose(this.toDispose);
        if (this.model && !this.model.isDisposed()) {
            this.model.deltaDecorations(this.decorations, []);
        }
        this.model = null;
        this.decorations = null;
        if (this.delayer) {
            this.delayer.cancel();
            this.delayer = null;
        }
        if (this.diffDelayer) {
            this.diffDelayer.cancel();
            this.diffDelayer = null;
        }
    };
    DirtyDiffModelDecorator.ID = 'vs.git.editor.dirtyDiffDecorator';
    DirtyDiffModelDecorator.MODIFIED_DECORATION_OPTIONS = {
        linesDecorationsClassName: 'git-dirty-modified-diff-glyph',
        isWholeLine: true,
        overviewRuler: {
            color: 'rgba(0, 122, 204, 0.6)',
            darkColor: 'rgba(0, 122, 204, 0.6)',
            position: common.OverviewRulerLane.Left
        }
    };
    DirtyDiffModelDecorator.ADDED_DECORATION_OPTIONS = {
        linesDecorationsClassName: 'git-dirty-added-diff-glyph',
        isWholeLine: true,
        overviewRuler: {
            color: 'rgba(0, 122, 204, 0.6)',
            darkColor: 'rgba(0, 122, 204, 0.6)',
            position: common.OverviewRulerLane.Left
        }
    };
    DirtyDiffModelDecorator.DELETED_DECORATION_OPTIONS = {
        linesDecorationsClassName: 'git-dirty-deleted-diff-glyph',
        isWholeLine: true,
        overviewRuler: {
            color: 'rgba(0, 122, 204, 0.6)',
            darkColor: 'rgba(0, 122, 204, 0.6)',
            position: common.OverviewRulerLane.Left
        }
    };
    DirtyDiffModelDecorator = __decorate([
        __param(2, modelService_1.IModelService),
        __param(3, editorWorkerService_1.IEditorWorkerService),
        __param(4, editorService_1.IWorkbenchEditorService),
        __param(5, workspace_1.IWorkspaceContextService),
        __param(6, IGitService)
    ], DirtyDiffModelDecorator);
    return DirtyDiffModelDecorator;
}());
var DirtyDiffDecorator = (function () {
    function DirtyDiffDecorator(gitService, messageService, editorService, editorGroupService, eventService, contextService, instantiationService) {
        var _this = this;
        this.gitService = gitService;
        this.messageService = messageService;
        this.editorService = editorService;
        this.eventService = eventService;
        this.contextService = contextService;
        this.instantiationService = instantiationService;
        this.models = [];
        this.decorators = Object.create(null);
        this.toDispose = [];
        this.toDispose.push(editorGroupService.onEditorsChanged(function () { return _this.onEditorsChanged(); }));
        this.toDispose.push(gitService.addListener2(git.ServiceEvents.DISPOSE, function () { return _this.dispose(); }));
    }
    DirtyDiffDecorator.prototype.getId = function () {
        return 'git.DirtyDiffModelDecorator';
    };
    DirtyDiffDecorator.prototype.onEditorsChanged = function () {
        // HACK: This is the best current way of figuring out whether to draw these decorations
        // or not. Needs context from the editor, to know whether it is a diff editor, in place editor
        // etc.
        var _this = this;
        var repositoryRoot = this.gitService.getModel().getRepositoryRoot();
        // If there is no repository root, just wait until that changes
        if (typeof repositoryRoot !== 'string') {
            this.gitService.addOneTimeDisposableListener(git.ServiceEvents.STATE_CHANGED, function () { return _this.onEditorsChanged(); });
            this.models.forEach(function (m) { return _this.onModelInvisible(m); });
            this.models = [];
            return;
        }
        var models = this.editorService.getVisibleEditors()
            .map(function (e) { return e.getControl(); })
            .filter(function (c) { return c instanceof widget.CodeEditor; })
            .map(function (e) { return e.getModel(); })
            .filter(function (m, i, a) { return !!m && a.indexOf(m, i + 1) === -1; })
            .map(function (m) { return ({ model: m, resource: m.uri }); })
            .filter(function (p) { return !!p.resource &&
            // and invalid resources
            (p.resource.scheme === 'file' && paths.isEqualOrParent(p.resource.fsPath, repositoryRoot)); })
            .map(function (p) { return ({ model: p.model, path: paths.normalize(paths.relative(repositoryRoot, p.resource.fsPath)) }); })
            .filter(function (p) { return !!p.path && p.path.indexOf('.git/') === -1; });
        var newModels = models.filter(function (p) { return _this.models.every(function (m) { return p.model !== m; }); });
        var oldModels = this.models.filter(function (m) { return models.every(function (p) { return p.model !== m; }); });
        newModels.forEach(function (p) { return _this.onModelVisible(p.model, p.path); });
        oldModels.forEach(function (m) { return _this.onModelInvisible(m); });
        this.models = models.map(function (p) { return p.model; });
    };
    DirtyDiffDecorator.prototype.onModelVisible = function (model, path) {
        this.decorators[model.id] = this.instantiationService.createInstance(DirtyDiffModelDecorator, model, path);
    };
    DirtyDiffDecorator.prototype.onModelInvisible = function (model) {
        this.decorators[model.id].dispose();
        delete this.decorators[model.id];
    };
    DirtyDiffDecorator.prototype.dispose = function () {
        var _this = this;
        this.toDispose = lifecycle.dispose(this.toDispose);
        this.models.forEach(function (m) { return _this.decorators[m.id].dispose(); });
        this.models = null;
        this.decorators = null;
    };
    DirtyDiffDecorator = __decorate([
        __param(0, IGitService),
        __param(1, message_1.IMessageService),
        __param(2, editorService_1.IWorkbenchEditorService),
        __param(3, groupService_1.IEditorGroupService),
        __param(4, event_1.IEventService),
        __param(5, workspace_1.IWorkspaceContextService),
        __param(6, instantiation_1.IInstantiationService)
    ], DirtyDiffDecorator);
    return DirtyDiffDecorator;
}());
exports.DirtyDiffDecorator = DirtyDiffDecorator;
exports.VIEWLET_ID = 'workbench.view.git';
var OpenGitViewletAction = (function (_super) {
    __extends(OpenGitViewletAction, _super);
    function OpenGitViewletAction(id, label, viewletService, editorService) {
        _super.call(this, id, label, exports.VIEWLET_ID, viewletService, editorService);
    }
    OpenGitViewletAction.ID = exports.VIEWLET_ID;
    OpenGitViewletAction.LABEL = nls.localize('toggleGitViewlet', "Show Git");
    OpenGitViewletAction = __decorate([
        __param(2, viewletService_1.IViewletService),
        __param(3, editorService_1.IWorkbenchEditorService)
    ], OpenGitViewletAction);
    return OpenGitViewletAction;
}(viewlet.ToggleViewletAction));
function registerContributions() {
    // Register Statusbar item
    platform.Registry.as(statusbar.Extensions.Statusbar).registerStatusbarItem(new statusbar.StatusbarItemDescriptor(widgets.GitStatusbarItem, statusbar.StatusbarAlignment.LEFT, 100 /* High Priority */));
    // Register Output Channel
    var outputChannelRegistry = platform.Registry.as(output.Extensions.OutputChannels);
    outputChannelRegistry.registerChannel('Git', nls.localize('git', "Git"));
    // Register Git Output
    platform.Registry.as(ext.Extensions.Workbench).registerWorkbenchContribution(gitoutput.GitOutput);
    // Register Viewlet
    platform.Registry.as(viewlet.Extensions.Viewlets).registerViewlet(new viewlet.ViewletDescriptor('vs/workbench/parts/git/browser/gitViewlet', 'GitViewlet', exports.VIEWLET_ID, nls.localize('git', "Git"), 'git', 35));
    // Register Action to Open Viewlet
    platform.Registry.as(wbar.Extensions.WorkbenchActions).registerWorkbenchAction(new actions_1.SyncActionDescriptor(OpenGitViewletAction, OpenGitViewletAction.ID, OpenGitViewletAction.LABEL, {
        primary: null,
        win: { primary: 32768 /* CtrlCmd */ | 16384 /* Shift */ | 37 /* KEY_G */ },
        linux: { primary: 32768 /* CtrlCmd */ | 16384 /* Shift */ | 37 /* KEY_G */ },
        mac: { primary: 4096 /* WinCtrl */ | 16384 /* Shift */ | 37 /* KEY_G */ }
    }), 'View: Show Git', nls.localize('view', "View"));
    // Register StatusUpdater
    platform.Registry.as(ext.Extensions.Workbench).registerWorkbenchContribution(StatusUpdater);
    // Register DirtyDiffDecorator
    platform.Registry.as(ext.Extensions.Workbench).registerWorkbenchContribution(DirtyDiffDecorator);
    // Register Quick Open for git
    platform.Registry.as(quickopen.Extensions.Quickopen).registerQuickOpenHandler(new quickopen.QuickOpenHandlerDescriptor('vs/workbench/parts/git/browser/gitQuickOpen', 'GitCommandQuickOpenHandler', 'git ', nls.localize('gitCommands', "Git Commands")));
    // Register configuration
    var configurationRegistry = platform.Registry.as(confregistry.Extensions.Configuration);
    configurationRegistry.registerConfiguration({
        id: 'git',
        order: 15,
        title: nls.localize('gitConfigurationTitle', "Git"),
        type: 'object',
        properties: {
            'git.enabled': {
                type: 'boolean',
                description: nls.localize('gitEnabled', "Is git enabled"),
                default: true
            },
            'git.path': {
                type: ['string', 'null'],
                description: nls.localize('gitPath', "Path to the git executable"),
                default: null
            },
            'git.autorefresh': {
                type: 'boolean',
                description: nls.localize('gitAutoRefresh', "Whether auto refreshing is enabled"),
                default: true
            },
            'git.autofetch': {
                type: 'boolean',
                description: nls.localize('gitAutoFetch', "Whether auto fetching is enabled."),
                default: true
            },
            'git.enableLongCommitWarning': {
                type: 'boolean',
                description: nls.localize('gitLongCommit', "Whether long commit messages should be warned about."),
                default: true
            },
            'git.allowLargeRepositories': {
                type: 'boolean',
                description: nls.localize('gitLargeRepos', "Always allow large repositories to be managed by Code."),
                default: false
            },
            'git.confirmSync': {
                type: 'boolean',
                description: nls.localize('confirmSync', "Confirm before synchronizing git repositories."),
                default: false
            },
            'git.countBadge': {
                type: 'string',
                enum: ['all', 'tracked', 'off'],
                default: 'all',
                description: nls.localize('countBadge', "Controls the git badge counter."),
            }
        }
    });
}
exports.registerContributions = registerContributions;
