/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
require("./media/git.contribution.css");
var nls = require("vs/nls");
var async = require("vs/base/common/async");
var lifecycle = require("vs/base/common/lifecycle");
var ext = require("vs/workbench/common/contributions");
var git = require("vs/workbench/parts/git/common/git");
var viewlet = require("vs/workbench/browser/viewlet");
var statusbar = require("vs/workbench/browser/parts/statusbar/statusbar");
var platform = require("vs/platform/platform");
var widgets = require("vs/workbench/parts/git/browser/gitWidgets");
var wbar = require("vs/workbench/common/actionRegistry");
var gitoutput = require("vs/workbench/parts/git/browser/gitOutput");
var output = require("vs/workbench/parts/output/common/output");
var actions_1 = require("vs/platform/actions/common/actions");
var confregistry = require("vs/platform/configuration/common/configurationRegistry");
var configuration_1 = require("vs/platform/configuration/common/configuration");
var quickopen = require("vs/workbench/browser/quickopen");
require("vs/workbench/parts/git/browser/gitEditorContributions");
var activityBarService_1 = require("vs/workbench/services/activity/common/activityBarService");
var event_1 = require("vs/platform/event/common/event");
var message_1 = require("vs/platform/message/common/message");
var viewlet_1 = require("vs/workbench/services/viewlet/browser/viewlet");
var editorService_1 = require("vs/workbench/services/editor/common/editorService");
var IGitService = git.IGitService;
var StatusUpdater = (function () {
    function StatusUpdater(gitService, eventService, activityBarService, messageService, configurationService) {
        var _this = this;
        this.gitService = gitService;
        this.eventService = eventService;
        this.activityBarService = activityBarService;
        this.messageService = messageService;
        this.configurationService = configurationService;
        this.progressBadgeDelayer = new async.Delayer(200);
        this.toDispose = [];
        this.toDispose.push(this.configurationService.onDidUpdateConfiguration(function (e) { return _this.onGitServiceChange(); }));
        this.toDispose.push(this.gitService.addBulkListener2(function (e) { return _this.onGitServiceChange(); }));
    }
    StatusUpdater.prototype.onGitServiceChange = function () {
        var _this = this;
        if (this.gitService.getState() !== git.ServiceState.OK) {
            this.progressBadgeDelayer.cancel();
            this.activityBarService.showActivity('workbench.view.git', null, 'git-viewlet-label');
        }
        else if (this.gitService.isIdle()) {
            this.showChangesBadge();
        }
        else {
            this.progressBadgeDelayer.trigger(function () {
                _this.activityBarService.showActivity('workbench.view.git', new activityBarService_1.ProgressBadge(function () { return nls.localize('gitProgressBadge', 'Running git status'); }), 'git-viewlet-label-progress');
            });
        }
    };
    StatusUpdater.prototype.showChangesBadge = function () {
        this.progressBadgeDelayer.cancel();
        var countBadge = this.configurationService.getConfiguration('git').countBadge;
        if (countBadge === 'off') {
            return;
        }
        var filter = countBadge === 'tracked'
            ? function (s) { return s.getStatus() !== git.Status.UNTRACKED; }
            : function () { return true; };
        var statuses = this.gitService.getModel().getStatus().getGroups()
            .map(function (g) { return g.all(); })
            .reduce(function (r, g) { return r.concat(g); }, [])
            .filter(filter);
        var badge = new activityBarService_1.NumberBadge(statuses.length, function (num) { return nls.localize('gitPendingChangesBadge', '{0} pending changes', num); });
        this.activityBarService.showActivity('workbench.view.git', badge, 'git-viewlet-label');
    };
    StatusUpdater.prototype.getId = function () {
        return StatusUpdater.ID;
    };
    StatusUpdater.prototype.dispose = function () {
        this.toDispose = lifecycle.dispose(this.toDispose);
    };
    return StatusUpdater;
}());
StatusUpdater.ID = 'vs.git.statusUpdater';
StatusUpdater = __decorate([
    __param(0, IGitService),
    __param(1, event_1.IEventService),
    __param(2, activityBarService_1.IActivityBarService),
    __param(3, message_1.IMessageService),
    __param(4, configuration_1.IConfigurationService)
], StatusUpdater);
exports.StatusUpdater = StatusUpdater;
exports.VIEWLET_ID = 'workbench.view.git';
var OpenGitViewletAction = (function (_super) {
    __extends(OpenGitViewletAction, _super);
    function OpenGitViewletAction(id, label, viewletService, editorService) {
        return _super.call(this, id, label, exports.VIEWLET_ID, viewletService, editorService) || this;
    }
    return OpenGitViewletAction;
}(viewlet.ToggleViewletAction));
OpenGitViewletAction.ID = exports.VIEWLET_ID;
OpenGitViewletAction.LABEL = nls.localize('toggleGitViewlet', "Show Git");
OpenGitViewletAction = __decorate([
    __param(2, viewlet_1.IViewletService), __param(3, editorService_1.IWorkbenchEditorService)
], OpenGitViewletAction);
function registerContributions() {
    // Register Statusbar item
    platform.Registry.as(statusbar.Extensions.Statusbar).registerStatusbarItem(new statusbar.StatusbarItemDescriptor(widgets.GitStatusbarItem, statusbar.StatusbarAlignment.LEFT, 100 /* High Priority */));
    // Register Output Channel
    var outputChannelRegistry = platform.Registry.as(output.Extensions.OutputChannels);
    outputChannelRegistry.registerChannel('Git', nls.localize('git', "Git"));
    // Register Git Output
    platform.Registry.as(ext.Extensions.Workbench).registerWorkbenchContribution(gitoutput.GitOutput);
    // Register Viewlet
    platform.Registry.as(viewlet.Extensions.Viewlets).registerViewlet(new viewlet.ViewletDescriptor('vs/workbench/parts/git/browser/gitViewlet', 'GitViewlet', exports.VIEWLET_ID, nls.localize('git', "Git"), 'git', 35));
    // Register Action to Open Viewlet
    platform.Registry.as(wbar.Extensions.WorkbenchActions).registerWorkbenchAction(new actions_1.SyncActionDescriptor(OpenGitViewletAction, OpenGitViewletAction.ID, OpenGitViewletAction.LABEL, {
        primary: null,
        win: { primary: 32768 /* CtrlCmd */ | 16384 /* Shift */ | 37 /* KEY_G */ },
        linux: { primary: 32768 /* CtrlCmd */ | 16384 /* Shift */ | 37 /* KEY_G */ },
        mac: { primary: 4096 /* WinCtrl */ | 16384 /* Shift */ | 37 /* KEY_G */ }
    }), 'View: Show Git', nls.localize('view', "View"));
    // Register StatusUpdater
    platform.Registry.as(ext.Extensions.Workbench).registerWorkbenchContribution(StatusUpdater);
    // Register Quick Open for git
    platform.Registry.as(quickopen.Extensions.Quickopen).registerQuickOpenHandler(new quickopen.QuickOpenHandlerDescriptor('vs/workbench/parts/git/browser/gitQuickOpen', 'GitCommandQuickOpenHandler', 'git ', nls.localize('gitCommands', "Git Commands")));
    // Register configuration
    var configurationRegistry = platform.Registry.as(confregistry.Extensions.Configuration);
    configurationRegistry.registerConfiguration({
        id: 'git',
        order: 15,
        title: nls.localize('gitConfigurationTitle', "Git"),
        type: 'object',
        properties: {
            'git.enabled': {
                type: 'boolean',
                description: nls.localize('gitEnabled', "Is git enabled"),
                default: true
            },
            'git.path': {
                type: ['string', 'null'],
                description: nls.localize('gitPath', "Path to the git executable"),
                default: null
            },
            'git.autorefresh': {
                type: 'boolean',
                description: nls.localize('gitAutoRefresh', "Whether auto refreshing is enabled"),
                default: true
            },
            'git.autofetch': {
                type: 'boolean',
                description: nls.localize('gitAutoFetch', "Whether auto fetching is enabled."),
                default: true
            },
            'git.enableLongCommitWarning': {
                type: 'boolean',
                description: nls.localize('gitLongCommit', "Whether long commit messages should be warned about."),
                default: true
            },
            'git.allowLargeRepositories': {
                type: 'boolean',
                description: nls.localize('gitLargeRepos', "Always allow large repositories to be managed by Code."),
                default: false
            },
            'git.confirmSync': {
                type: 'boolean',
                description: nls.localize('confirmSync', "Confirm before synchronizing git repositories."),
                default: true
            },
            'git.countBadge': {
                type: 'string',
                enum: ['all', 'tracked', 'off'],
                default: 'all',
                description: nls.localize('countBadge', "Controls the git badge counter."),
            }
        }
    });
}
exports.registerContributions = registerContributions;
