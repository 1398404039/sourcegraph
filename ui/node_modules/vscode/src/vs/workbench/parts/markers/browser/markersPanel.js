/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
require('./media/markers.css');
var errors = require('vs/base/common/errors');
var Set = require('vs/base/common/set');
var winjs_base_1 = require('vs/base/common/winjs.base');
var async_1 = require('vs/base/common/async');
var dom = require('vs/base/browser/dom');
var lifecycle = require('vs/base/common/lifecycle');
var markers_1 = require('vs/platform/markers/common/markers');
var telemetry_1 = require('vs/platform/telemetry/common/telemetry');
var event_1 = require('vs/platform/event/common/event');
var groupService_1 = require('vs/workbench/services/group/common/groupService');
var editor_1 = require('vs/workbench/common/editor');
var panel_1 = require('vs/workbench/browser/panel');
var editorService_1 = require('vs/workbench/services/editor/common/editorService');
var constants_1 = require('vs/workbench/parts/markers/common/constants');
var markersModel_1 = require('vs/workbench/parts/markers/common/markersModel');
var markersTreeController_1 = require('vs/workbench/parts/markers/browser/markersTreeController');
var TreeImpl = require('vs/base/parts/tree/browser/treeImpl');
var Viewer = require('vs/workbench/parts/markers/browser/markersTreeViewer');
var instantiation_1 = require('vs/platform/instantiation/common/instantiation');
var markersPanelActions_1 = require('vs/workbench/parts/markers/browser/markersPanelActions');
var configuration_1 = require('vs/platform/configuration/common/configuration');
var messages_1 = require('vs/workbench/parts/markers/common/messages');
var rangeDecorations_1 = require('vs/workbench/common/editor/rangeDecorations');
var actionBarRegistry_1 = require('vs/workbench/browser/actionBarRegistry');
var contextkey_1 = require('vs/platform/contextkey/common/contextkey');
var MarkersPanel = (function (_super) {
    __extends(MarkersPanel, _super);
    function MarkersPanel(instantiationService, markerService, editorGroupService, editorService, eventService, configurationService, contextKeyService, telemetryService) {
        _super.call(this, constants_1.default.MARKERS_PANEL_ID, telemetryService);
        this.instantiationService = instantiationService;
        this.markerService = markerService;
        this.editorGroupService = editorGroupService;
        this.editorService = editorService;
        this.eventService = eventService;
        this.configurationService = configurationService;
        this.contextKeyService = contextKeyService;
        this.lastSelectedRelativeTop = 0;
        this.currentActiveFile = null;
        this.toDispose = [];
        this.delayedRefresh = new async_1.Delayer(500);
        this.autoExpanded = new Set.ArraySet();
        this.markerFocusContextKey = constants_1.default.MarkerFocusContextKey.bindTo(contextKeyService);
    }
    MarkersPanel.prototype.create = function (parent) {
        _super.prototype.create.call(this, parent);
        this.markersModel = new markersModel_1.MarkersModel();
        this.rangeHighlightDecorations = this.instantiationService.createInstance(rangeDecorations_1.RangeHighlightDecorations);
        this.toDispose.push(this.rangeHighlightDecorations);
        dom.addClass(parent.getHTMLElement(), 'markers-panel');
        var conf = this.configurationService.getConfiguration();
        this.onConfigurationsUpdated(conf);
        var container = dom.append(parent.getHTMLElement(), dom.$('.markers-panel-container'));
        this.createMessageBox(container);
        this.createTree(container);
        this.createActions();
        this.createListeners();
        this.render();
        return winjs_base_1.TPromise.as(null);
    };
    MarkersPanel.prototype.getTitle = function () {
        var markerStatistics = this.markerService.getStatistics();
        return this.markersModel.getTitle(markerStatistics);
    };
    MarkersPanel.prototype.layout = function (dimension) {
        this.tree.layout(dimension.height);
    };
    MarkersPanel.prototype.focus = function () {
        if (this.tree.isDOMFocused()) {
            return;
        }
        if (this.markersModel.hasFilteredResources()) {
            this.tree.DOMFocus();
            if (this.tree.getSelection().length === 0) {
                this.tree.focusFirst();
            }
            this.highlightCurrentSelectedMarkerRange();
            this.autoReveal(true);
        }
        else {
            this.messageBox.focus();
        }
    };
    MarkersPanel.prototype.setVisible = function (visible) {
        var promise = _super.prototype.setVisible.call(this, visible);
        if (!visible) {
            this.rangeHighlightDecorations.removeHighlightRange();
        }
        return promise;
    };
    MarkersPanel.prototype.getActions = function () {
        this.collapseAllAction.enabled = this.markersModel.hasFilteredResources();
        return this.actions;
    };
    MarkersPanel.prototype.refreshPanel = function (updateTitleArea) {
        var _this = this;
        if (updateTitleArea === void 0) { updateTitleArea = false; }
        this.collapseAllAction.enabled = this.markersModel.hasFilteredResources();
        if (updateTitleArea) {
            this.updateTitleArea();
        }
        dom.toggleClass(this.treeContainer, 'hidden', !this.markersModel.hasFilteredResources());
        this.renderMessage();
        if (this.markersModel.hasFilteredResources()) {
            return this.tree.refresh().then(function () {
                _this.autoExpand();
            });
        }
        return winjs_base_1.TPromise.as(null);
    };
    MarkersPanel.prototype.updateFilter = function (filter) {
        this.markersModel.update(new markersModel_1.FilterOptions(filter));
        this.autoExpanded = new Set.ArraySet();
        this.refreshPanel();
        this.autoReveal();
    };
    MarkersPanel.prototype.createMessageBox = function (parent) {
        this.messageBoxContainer = dom.append(parent, dom.$('.message-box-container'));
        this.messageBox = dom.append(this.messageBoxContainer, dom.$('span'));
        this.messageBox.setAttribute('tabindex', '0');
    };
    MarkersPanel.prototype.createTree = function (parent) {
        var _this = this;
        this.treeContainer = dom.append(parent, dom.$('.tree-container'));
        dom.addClass(this.treeContainer, 'show-file-icons');
        var actionProvider = this.instantiationService.createInstance(actionBarRegistry_1.ContributableActionProvider);
        var renderer = this.instantiationService.createInstance(Viewer.Renderer, this.getActionRunner(), actionProvider);
        var controller = this.instantiationService.createInstance(markersTreeController_1.Controller, this.rangeHighlightDecorations, actionProvider);
        this.tree = new TreeImpl.Tree(this.treeContainer, {
            dataSource: new Viewer.DataSource(),
            renderer: renderer,
            controller: controller,
            sorter: new Viewer.Sorter(),
            accessibilityProvider: new Viewer.MarkersTreeAccessibilityProvider()
        }, {
            indentPixels: 0,
            twistiePixels: 20,
            ariaLabel: messages_1.default.MARKERS_PANEL_ARIA_LABEL_PROBLEMS_TREE
        });
        this._register(this.tree.addListener2('focus', function (e) {
            _this.markerFocusContextKey.set(e.focus instanceof markersModel_1.Marker);
        }));
        var focusTracker = this._register(dom.trackFocus(this.tree.getHTMLElement()));
        focusTracker.addBlurListener(function () {
            _this.markerFocusContextKey.set(false);
        });
    };
    MarkersPanel.prototype.createActions = function () {
        var _this = this;
        this.collapseAllAction = this.instantiationService.createInstance(markersPanelActions_1.CollapseAllAction, this.tree, true);
        this.filterAction = new markersPanelActions_1.FilterAction(this);
        this.actions = [
            this.filterAction,
            this.collapseAllAction
        ];
        this.actions.forEach(function (a) {
            _this.toDispose.push(a);
        });
    };
    MarkersPanel.prototype.createListeners = function () {
        var _this = this;
        this.toDispose.push(this.configurationService.onDidUpdateConfiguration(function (e) { return _this.onConfigurationsUpdated(e.config); }));
        this.toDispose.push(this.markerService.onMarkerChanged(this.onMarkerChanged, this));
        this.toDispose.push(this.editorGroupService.onEditorsChanged(this.onEditorsChanged, this));
        this.toDispose.push(this.tree.addListener2('selection', function () { return _this.onSelected(); }));
    };
    MarkersPanel.prototype.onMarkerChanged = function (changedResources) {
        var _this = this;
        this.updateResources(changedResources);
        this.delayedRefresh.trigger(function () {
            _this.refreshPanel(true);
            _this.updateRangeHighlights();
            _this.autoReveal();
        });
    };
    MarkersPanel.prototype.onEditorsChanged = function () {
        var editorInput = editor_1.asFileEditorInput(this.editorService.getActiveEditorInput());
        this.currentActiveFile = editorInput ? editorInput.getResource() : null;
        this.autoReveal();
    };
    MarkersPanel.prototype.onConfigurationsUpdated = function (conf) {
        this.hasToAutoReveal = conf && conf.problems && conf.problems.autoReveal;
    };
    MarkersPanel.prototype.onSelected = function () {
        var selection = this.tree.getSelection();
        if (selection && selection.length > 0) {
            this.lastSelectedRelativeTop = this.tree.getRelativeTop(selection[0]);
        }
    };
    MarkersPanel.prototype.updateResources = function (resources) {
        var bulkUpdater = this.markersModel.getBulkUpdater();
        for (var _i = 0, resources_1 = resources; _i < resources_1.length; _i++) {
            var resource = resources_1[_i];
            bulkUpdater.add(resource, this.markerService.read({ resource: resource }));
        }
        bulkUpdater.done();
        for (var _a = 0, resources_2 = resources; _a < resources_2.length; _a++) {
            var resource = resources_2[_a];
            if (!this.markersModel.hasResource(resource)) {
                this.autoExpanded.unset(resource.toString());
            }
        }
    };
    MarkersPanel.prototype.render = function () {
        var allMarkers = this.markerService.read();
        this.markersModel.update(allMarkers);
        this.tree.setInput(this.markersModel).then(this.autoExpand.bind(this));
        dom.toggleClass(this.treeContainer, 'hidden', !this.markersModel.hasFilteredResources());
        this.renderMessage();
    };
    MarkersPanel.prototype.renderMessage = function () {
        var message = this.markersModel.getMessage();
        this.messageBox.textContent = message;
        dom.toggleClass(this.messageBoxContainer, 'hidden', this.markersModel.hasFilteredResources());
    };
    MarkersPanel.prototype.autoExpand = function () {
        for (var _i = 0, _a = this.markersModel.filteredResources; _i < _a.length; _i++) {
            var resource = _a[_i];
            var resourceUri = resource.uri.toString();
            if (!this.autoExpanded.contains(resourceUri)) {
                this.tree.expand(resource).done(null, errors.onUnexpectedError);
                this.autoExpanded.set(resourceUri);
            }
        }
    };
    MarkersPanel.prototype.autoReveal = function (focus) {
        if (focus === void 0) { focus = false; }
        var conf = this.configurationService.getConfiguration();
        if (conf && conf.problems && conf.problems.autoReveal) {
            this.revealMarkersForCurrentActiveEditor(focus);
        }
    };
    MarkersPanel.prototype.revealMarkersForCurrentActiveEditor = function (focus) {
        if (focus === void 0) { focus = false; }
        var currentActiveResource = this.getResourceForCurrentActiveFile();
        if (currentActiveResource) {
            if (this.tree.isExpanded(currentActiveResource) && this.hasSelectedMarkerFor(currentActiveResource)) {
                this.tree.reveal(this.tree.getSelection()[0], this.lastSelectedRelativeTop);
                if (focus) {
                    this.tree.setFocus(this.tree.getSelection()[0]);
                }
            }
            else {
                this.tree.reveal(currentActiveResource, 0);
                if (focus) {
                    this.tree.setFocus(currentActiveResource);
                    this.tree.setSelection([currentActiveResource]);
                }
            }
        }
        else if (focus) {
            this.tree.setSelection([]);
            this.tree.focusFirst();
        }
    };
    MarkersPanel.prototype.getResourceForCurrentActiveFile = function () {
        var _this = this;
        if (this.currentActiveFile) {
            var resources = this.markersModel.filteredResources.filter(function (resource) {
                return _this.currentActiveFile.toString() === resource.uri.toString();
            });
            return resources.length > 0 ? resources[0] : null;
        }
        return null;
    };
    MarkersPanel.prototype.hasSelectedMarkerFor = function (resource) {
        var selectedElement = this.tree.getSelection();
        if (selectedElement && selectedElement.length > 0) {
            if (selectedElement[0] instanceof markersModel_1.Marker) {
                if (resource.uri.toString() === selectedElement[0].marker.resource.toString()) {
                    return true;
                }
            }
        }
        return false;
    };
    MarkersPanel.prototype.updateRangeHighlights = function () {
        this.rangeHighlightDecorations.removeHighlightRange();
        if (this.tree.isDOMFocused()) {
            this.highlightCurrentSelectedMarkerRange();
        }
    };
    MarkersPanel.prototype.highlightCurrentSelectedMarkerRange = function () {
        var selections = this.tree.getSelection();
        if (selections && selections.length === 1 && selections[0] instanceof markersModel_1.Marker) {
            var marker = selections[0];
            this.rangeHighlightDecorations.highlightRange(marker);
        }
    };
    MarkersPanel.prototype.getActionItem = function (action) {
        if (action.id === markersPanelActions_1.FilterAction.ID) {
            return this.instantiationService.createInstance(markersPanelActions_1.FilterInputBoxActionItem, this, action);
        }
        return _super.prototype.getActionItem.call(this, action);
    };
    MarkersPanel.prototype.getFocusElement = function () {
        return this.tree.getFocus();
    };
    MarkersPanel.prototype.dispose = function () {
        this.delayedRefresh.cancel();
        this.toDispose = lifecycle.dispose(this.toDispose);
        this.tree.dispose();
        this.markersModel.dispose();
        _super.prototype.dispose.call(this);
    };
    MarkersPanel = __decorate([
        __param(0, instantiation_1.IInstantiationService),
        __param(1, markers_1.IMarkerService),
        __param(2, groupService_1.IEditorGroupService),
        __param(3, editorService_1.IWorkbenchEditorService),
        __param(4, event_1.IEventService),
        __param(5, configuration_1.IConfigurationService),
        __param(6, contextkey_1.IContextKeyService),
        __param(7, telemetry_1.ITelemetryService)
    ], MarkersPanel);
    return MarkersPanel;
}(panel_1.Panel));
exports.MarkersPanel = MarkersPanel;
