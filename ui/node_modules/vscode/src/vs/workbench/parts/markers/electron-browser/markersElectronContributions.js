/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
var nls_1 = require("vs/nls");
var electron_1 = require("electron");
var markersModel_1 = require("vs/workbench/parts/markers/common/markersModel");
var constants_1 = require("vs/workbench/parts/markers/common/constants");
var commands_1 = require("vs/platform/commands/common/commands");
var actions_1 = require("vs/platform/actions/common/actions");
var keybindingsRegistry_1 = require("vs/platform/keybinding/common/keybindingsRegistry");
var panelService_1 = require("vs/workbench/services/panel/common/panelService");
var markersPanel_1 = require("vs/workbench/parts/markers/browser/markersPanel");
function registerContributions() {
    registerAction({
        id: constants_1.default.MARKER_COPY_ACTION_ID,
        title: nls_1.localize('copyMarker', "Copy"),
        handler: function (accessor) {
            copyMarker(accessor.get(panelService_1.IPanelService));
        },
        menu: {
            menuId: actions_1.MenuId.ProblemsPanelContext,
            when: constants_1.default.MarkerFocusContextKey
        },
        keybinding: {
            keys: {
                primary: 32768 /* CtrlCmd */ | 33 /* KEY_C */
            },
            when: constants_1.default.MarkerFocusContextKey
        }
    });
}
exports.registerContributions = registerContributions;
function copyMarker(panelService) {
    var activePanel = panelService.getActivePanel();
    if (activePanel instanceof markersPanel_1.MarkersPanel) {
        var element = activePanel.getFocusElement();
        if (element instanceof markersModel_1.Marker) {
            electron_1.clipboard.writeText("" + element);
        }
    }
}
function registerAction(desc) {
    var id = desc.id, handler = desc.handler, title = desc.title, category = desc.category, iconClass = desc.iconClass, menu = desc.menu, keybinding = desc.keybinding;
    // 1) register as command
    commands_1.CommandsRegistry.registerCommand(id, handler);
    // 2) menus
    var command = { id: id, title: title, iconClass: iconClass, category: category };
    if (menu) {
        var menuId = menu.menuId, when = menu.when, group = menu.group;
        actions_1.MenuRegistry.appendMenuItem(menuId, {
            command: command,
            when: when,
            group: group
        });
    }
    // 3) keybindings
    if (keybinding) {
        var when = keybinding.when, weight = keybinding.weight, keys = keybinding.keys;
        keybindingsRegistry_1.KeybindingsRegistry.registerKeybindingRule({
            id: id,
            when: when,
            weight: weight,
            primary: keys.primary,
            secondary: keys.secondary,
            linux: keys.linux,
            mac: keys.mac,
            win: keys.win
        });
    }
}
