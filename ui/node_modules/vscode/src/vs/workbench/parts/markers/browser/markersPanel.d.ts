import './media/markers.css';
import { TPromise } from 'vs/base/common/winjs.base';
import builder = require('vs/base/browser/builder');
import { Action } from 'vs/base/common/actions';
import { IActionItem } from 'vs/base/browser/ui/actionbar/actionbar';
import { IMarkerService } from 'vs/platform/markers/common/markers';
import { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';
import { IEventService } from 'vs/platform/event/common/event';
import { IEditorGroupService } from 'vs/workbench/services/group/common/groupService';
import { Panel } from 'vs/workbench/browser/panel';
import { IAction } from 'vs/base/common/actions';
import { IWorkbenchEditorService } from 'vs/workbench/services/editor/common/editorService';
import { MarkersModel, Marker, Resource } from 'vs/workbench/parts/markers/common/markersModel';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
import { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';
export declare class MarkersPanel extends Panel {
    private instantiationService;
    private markerService;
    private editorGroupService;
    private editorService;
    private eventService;
    private configurationService;
    private contextKeyService;
    markersModel: MarkersModel;
    private toDispose;
    private delayedRefresh;
    private lastSelectedRelativeTop;
    private currentActiveFile;
    private hasToAutoReveal;
    private tree;
    private autoExpanded;
    private rangeHighlightDecorations;
    private actions;
    private filterAction;
    private collapseAllAction;
    private treeContainer;
    private messageBoxContainer;
    private messageBox;
    private markerFocusContextKey;
    constructor(instantiationService: IInstantiationService, markerService: IMarkerService, editorGroupService: IEditorGroupService, editorService: IWorkbenchEditorService, eventService: IEventService, configurationService: IConfigurationService, contextKeyService: IContextKeyService, telemetryService: ITelemetryService);
    create(parent: builder.Builder): TPromise<void>;
    getTitle(): string;
    layout(dimension: builder.Dimension): void;
    focus(): void;
    setVisible(visible: boolean): TPromise<void>;
    getActions(): IAction[];
    private refreshPanel(updateTitleArea?);
    updateFilter(filter: string): void;
    private createMessageBox(parent);
    private createTree(parent);
    private createActions();
    private createListeners();
    private onMarkerChanged(changedResources);
    private onEditorsChanged();
    private onConfigurationsUpdated(conf);
    private onSelected();
    private updateResources(resources);
    private render();
    private renderMessage();
    private autoExpand();
    private autoReveal(focus?);
    private revealMarkersForCurrentActiveEditor(focus?);
    private getResourceForCurrentActiveFile();
    private hasSelectedMarkerFor(resource);
    private updateRangeHighlights();
    private highlightCurrentSelectedMarkerRange();
    getActionItem(action: Action): IActionItem;
    getFocusElement(): Resource | Marker;
    dispose(): void;
}
