/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var errors = require('vs/base/common/errors');
var treedefaults = require('vs/base/parts/tree/browser/treeDefaults');
var markersModel_1 = require('vs/workbench/parts/markers/common/markersModel');
var editorService_1 = require('vs/workbench/services/editor/common/editorService');
var telemetry_1 = require('vs/platform/telemetry/common/telemetry');
var Controller = (function (_super) {
    __extends(Controller, _super);
    function Controller(rangeHighlightDecorations, editorService, telemetryService) {
        _super.call(this);
        this.rangeHighlightDecorations = rangeHighlightDecorations;
        this.editorService = editorService;
        this.telemetryService = telemetryService;
    }
    Controller.prototype.onLeftClick = function (tree, element, event) {
        var currentFoucssed = tree.getFocus();
        if (_super.prototype.onLeftClick.call(this, tree, element, event)) {
            if (this.openFileAtElement(element, event.detail !== 2, event.ctrlKey || event.metaKey, event.detail === 2)) {
                return true;
            }
            if (element instanceof markersModel_1.MarkersModel) {
                if (currentFoucssed) {
                    tree.setFocus(currentFoucssed);
                }
                else {
                    tree.focusFirst();
                }
                return true;
            }
        }
        return false;
    };
    Controller.prototype.onEnter = function (tree, event) {
        if (_super.prototype.onEnter.call(this, tree, event)) {
            return this.openFileAtElement(tree.getFocus(), false, event.ctrlKey || event.metaKey, true);
        }
        return false;
    };
    Controller.prototype.onSpace = function (tree, event) {
        var element = tree.getFocus();
        if (element instanceof markersModel_1.Marker) {
            tree.setSelection([element]);
            return this.openFileAtElement(tree.getFocus(), true, false, false);
        }
        else {
            this.rangeHighlightDecorations.removeHighlightRange();
        }
        return _super.prototype.onSpace.call(this, tree, event);
    };
    Controller.prototype.openFileAtElement = function (element, preserveFocus, sideByside, pinned) {
        var _this = this;
        if (element instanceof markersModel_1.Marker) {
            var marker_1 = element;
            this.telemetryService.publicLog('problems.marker.opened', { source: marker_1.marker.source });
            this.editorService.openEditor({
                resource: marker_1.resource,
                options: {
                    selection: marker_1.range,
                    preserveFocus: preserveFocus,
                    pinned: pinned,
                    revealIfVisible: true
                },
            }, sideByside).done(function (editor) {
                if (preserveFocus) {
                    _this.rangeHighlightDecorations.highlightRange(marker_1, editor);
                }
                else {
                    _this.rangeHighlightDecorations.removeHighlightRange();
                }
            }, errors.onUnexpectedError);
            return true;
        }
        else {
            this.rangeHighlightDecorations.removeHighlightRange();
        }
        return false;
    };
    Controller = __decorate([
        __param(1, editorService_1.IWorkbenchEditorService),
        __param(2, telemetry_1.ITelemetryService)
    ], Controller);
    return Controller;
}(treedefaults.DefaultController));
exports.Controller = Controller;
