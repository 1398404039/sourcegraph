/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var nls_1 = require('vs/nls');
var lifecycle = require('vs/base/common/lifecycle');
var messages_1 = require('vs/workbench/parts/markers/common/messages');
var constants_1 = require('vs/workbench/parts/markers/common/constants');
var contributions_1 = require('vs/workbench/common/contributions');
var platform = require('vs/platform/platform');
var markers_1 = require('vs/platform/markers/common/markers');
var activityService_1 = require('vs/workbench/services/activity/common/activityService');
var actions_1 = require('vs/platform/actions/common/actions');
var actionRegistry_1 = require('vs/workbench/common/actionRegistry');
var panel = require('vs/workbench/browser/panel');
var configurationRegistry_1 = require('vs/platform/configuration/common/configurationRegistry');
var markersPanelActions = require('vs/workbench/parts/markers/browser/markersPanelActions');
var StatusUpdater = (function () {
    function StatusUpdater(markerService, activityService) {
        var _this = this;
        this.markerService = markerService;
        this.activityService = activityService;
        this.toDispose = [];
        this.toDispose.push(markerService.onMarkerChanged(function () { return _this.updateActivityBadge(); }));
    }
    StatusUpdater.prototype.updateActivityBadge = function () {
        var stats = this.markerService.getStatistics();
        var problemCount = stats.errors + stats.warnings + stats.infos + stats.unknowns;
        if (problemCount > 0) {
            var badge = new activityService_1.NumberBadge(problemCount, function (n) { return nls_1.localize('errorsAndWarnings', '{0} Errors and Warnings', n); });
            this.activityService.showActivity(constants_1.default.MARKERS_PANEL_ID, badge);
        }
        else {
            this.activityService.showActivity(constants_1.default.MARKERS_PANEL_ID, null);
        }
    };
    StatusUpdater.prototype.getId = function () {
        return StatusUpdater.ID;
    };
    StatusUpdater.prototype.dispose = function () {
        this.toDispose = lifecycle.dispose(this.toDispose);
    };
    StatusUpdater.ID = 'vs.markers.statusUpdater';
    StatusUpdater = __decorate([
        __param(0, markers_1.IMarkerService),
        __param(1, activityService_1.IActivityService)
    ], StatusUpdater);
    return StatusUpdater;
}());
function registerContributions() {
    platform.Registry.as(configurationRegistry_1.Extensions.Configuration).registerConfiguration({
        'id': 'problems',
        'order': 101,
        'title': messages_1.default.PROBLEMS_PANEL_CONFIGURATION_TITLE,
        'type': 'object',
        'properties': {
            'problems.autoReveal': {
                'description': messages_1.default.PROBLEMS_PANEL_CONFIGURATION_AUTO_REVEAL,
                'type': 'boolean',
                'default': true
            }
        }
    });
    // register markers panel
    platform.Registry.as(panel.Extensions.Panels).registerPanel(new panel.PanelDescriptor('vs/workbench/parts/markers/browser/markersPanel', 'MarkersPanel', constants_1.default.MARKERS_PANEL_ID, messages_1.default.MARKERS_PANEL_TITLE_PROBLEMS, 'markersPanel', 10));
    var registry = platform.Registry.as(actionRegistry_1.Extensions.WorkbenchActions);
    registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(markersPanelActions.ToggleMarkersPanelAction, markersPanelActions.ToggleMarkersPanelAction.ID, messages_1.default.MARKERS_PANEL_TOGGLE_LABEL, {
        primary: 32768 /* CtrlCmd */ | 16384 /* Shift */ | 43 /* KEY_M */
    }), 'View: ' + messages_1.default.MARKERS_PANEL_TOGGLE_LABEL, messages_1.default.MARKERS_PANEL_VIEW_CATEGORY);
    // Retaining old action to show errors and warnings, so that custom bindings to this action for existing users works.
    registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(markersPanelActions.ToggleErrorsAndWarningsAction, markersPanelActions.ToggleErrorsAndWarningsAction.ID, ''), messages_1.default.SHOW_ERRORS_WARNINGS_ACTION_LABEL);
    // Register StatusUpdater
    platform.Registry.as(contributions_1.Extensions.Workbench).registerWorkbenchContribution(StatusUpdater);
}
exports.registerContributions = registerContributions;
