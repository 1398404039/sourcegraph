/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var winjs_base_1 = require('vs/base/common/winjs.base');
var severity_1 = require('vs/base/common/severity');
var errorMessage_1 = require('vs/base/common/errorMessage');
var message_1 = require('vs/platform/message/common/message');
var windowService_1 = require('vs/workbench/services/window/electron-browser/windowService');
var electron_1 = require('electron');
var event_1 = require('vs/base/common/event');
var LifecycleService = (function () {
    function LifecycleService(messageService, windowService) {
        this.messageService = messageService;
        this.windowService = windowService;
        this._onWillShutdown = new event_1.Emitter();
        this._onShutdown = new event_1.Emitter();
        this.registerListeners();
    }
    Object.defineProperty(LifecycleService.prototype, "willShutdown", {
        get: function () {
            return this._willShutdown;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LifecycleService.prototype, "onWillShutdown", {
        get: function () {
            return this._onWillShutdown.event;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LifecycleService.prototype, "onShutdown", {
        get: function () {
            return this._onShutdown.event;
        },
        enumerable: true,
        configurable: true
    });
    LifecycleService.prototype.registerListeners = function () {
        var _this = this;
        var windowId = this.windowService.getWindowId();
        // Main side indicates that window is about to unload, check for vetos
        electron_1.ipcRenderer.on('vscode:beforeUnload', function (event, reply) {
            _this._willShutdown = true;
            // trigger onWillShutdown events and veto collecting
            _this.onBeforeUnload().done(function (veto) {
                if (veto) {
                    _this._willShutdown = false; // reset this flag since the shutdown has been vetoed!
                    electron_1.ipcRenderer.send(reply.cancelChannel, windowId);
                }
                else {
                    _this._onShutdown.fire();
                    electron_1.ipcRenderer.send(reply.okChannel, windowId);
                }
            });
        });
    };
    LifecycleService.prototype.onBeforeUnload = function () {
        var _this = this;
        var vetos = [];
        this._onWillShutdown.fire({
            veto: function (value) {
                vetos.push(value);
            }
        });
        if (vetos.length === 0) {
            return winjs_base_1.TPromise.as(false);
        }
        var promises = [];
        var lazyValue = false;
        for (var _i = 0, vetos_1 = vetos; _i < vetos_1.length; _i++) {
            var valueOrPromise = vetos_1[_i];
            // veto, done
            if (valueOrPromise === true) {
                return winjs_base_1.TPromise.as(true);
            }
            if (winjs_base_1.TPromise.is(valueOrPromise)) {
                promises.push(valueOrPromise.then(function (value) {
                    if (value) {
                        lazyValue = true; // veto, done
                    }
                }, function (err) {
                    // error, treated like a veto, done
                    _this.messageService.show(severity_1.default.Error, errorMessage_1.toErrorMessage(err));
                    lazyValue = true;
                }));
            }
        }
        return winjs_base_1.TPromise.join(promises).then(function () { return lazyValue; });
    };
    LifecycleService = __decorate([
        __param(0, message_1.IMessageService),
        __param(1, windowService_1.IWindowService)
    ], LifecycleService);
    return LifecycleService;
}());
exports.LifecycleService = LifecycleService;
