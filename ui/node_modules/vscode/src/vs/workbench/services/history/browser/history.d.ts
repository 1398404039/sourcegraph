import { IEditor as IBaseEditor, IEditorInput, ITextEditorOptions, IResourceInput } from 'vs/platform/editor/common/editor';
import { IWorkbenchEditorService } from 'vs/workbench/services/editor/common/editorService';
import { IEventService } from 'vs/platform/event/common/event';
import { IHistoryService } from 'vs/workbench/services/history/common/history';
import { FileChangesEvent } from 'vs/platform/files/common/files';
import { Selection } from 'vs/editor/common/core/selection';
import { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';
import { IDisposable } from 'vs/base/common/lifecycle';
import { IStorageService } from 'vs/platform/storage/common/storage';
import { ILifecycleService } from 'vs/platform/lifecycle/common/lifecycle';
import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
import { IEditorGroupService } from 'vs/workbench/services/group/common/groupService';
import { IEnvironmentService } from 'vs/platform/environment/common/environment';
import { IIntegrityService } from 'vs/platform/integrity/common/integrity';
import { ITitleService } from 'vs/workbench/services/title/common/titleService';
import { IWindowService } from 'vs/platform/windows/common/windows';
/**
 * Stores the selection & view state of an editor and allows to compare it to other selection states.
 */
export declare class EditorState {
    private _editorInput;
    private _selection;
    private static EDITOR_SELECTION_THRESHOLD;
    constructor(_editorInput: IEditorInput, _selection: Selection);
    readonly editorInput: IEditorInput;
    readonly selection: Selection;
    justifiesNewPushState(other: EditorState): boolean;
}
export declare abstract class BaseHistoryService {
    protected editorGroupService: IEditorGroupService;
    protected editorService: IWorkbenchEditorService;
    protected contextService: IWorkspaceContextService;
    private configurationService;
    private environmentService;
    private titleService;
    protected toUnbind: IDisposable[];
    private activeEditorListeners;
    private isPure;
    private showFullPath;
    private static NLS_UNSUPPORTED;
    constructor(editorGroupService: IEditorGroupService, editorService: IWorkbenchEditorService, contextService: IWorkspaceContextService, configurationService: IConfigurationService, environmentService: IEnvironmentService, integrityService: IIntegrityService, titleService: ITitleService);
    private onConfigurationChanged(update?);
    private onEditorsChanged();
    private onEditorEvent(editor);
    private updateWindowTitle(input?);
    protected abstract handleEditorSelectionChangeEvent(editor?: IBaseEditor): void;
    protected abstract handleActiveEditorChange(editor?: IBaseEditor): void;
    protected getWindowTitle(input?: IEditorInput): string;
    private doGetWindowTitle(input?);
    dispose(): void;
}
export declare class HistoryService extends BaseHistoryService implements IHistoryService {
    private storageService;
    private lifecycleService;
    private eventService;
    private windowService;
    _serviceBrand: any;
    private static STORAGE_KEY;
    private static MAX_HISTORY_ITEMS;
    private static MAX_STACK_ITEMS;
    private static MAX_RECENTLY_CLOSED_EDITORS;
    private static MERGE_EVENT_CHANGES_THRESHOLD;
    private stack;
    private index;
    private navigatingInStack;
    private currentFileEditorState;
    private history;
    private recentlyClosedFiles;
    private loaded;
    private registry;
    constructor(editorService: IWorkbenchEditorService, editorGroupService: IEditorGroupService, environmentService: IEnvironmentService, contextService: IWorkspaceContextService, storageService: IStorageService, configurationService: IConfigurationService, lifecycleService: ILifecycleService, eventService: IEventService, integrityService: IIntegrityService, titleService: ITitleService, windowService: IWindowService);
    private registerListeners();
    private onFileChanges(e);
    private onEditorClosed(event);
    reopenLastClosedEditor(): void;
    forward(): void;
    back(): void;
    clear(): void;
    private navigate();
    protected handleEditorSelectionChangeEvent(editor?: IBaseEditor): void;
    protected handleActiveEditorChange(editor?: IBaseEditor): void;
    private handleEditorEventInHistory(editor?);
    remove(input: IEditorInput | IResourceInput): void;
    remove(input: FileChangesEvent): void;
    private removeFromHistory(arg1);
    private handleEditorEventInStack(editor);
    private handleTextEditorEvent(editor, editorControl);
    private handleNonTextEditorEvent(editor);
    add(input: IEditorInput, options?: ITextEditorOptions, fromEvent?: boolean): void;
    private addToStack(input, options?, fromEvent?);
    private preferResourceInput(input);
    private sameOptions(optionsA?, optionsB?);
    private removeFromStack(arg1);
    private removeFromRecentlyClosedFiles(arg1);
    private removeFromRecentlyOpen(arg1);
    private isFileOpened(resource, group);
    private matches(arg1, inputB);
    private matchesFile(resource, arg2);
    getHistory(): (IEditorInput | IResourceInput)[];
    private ensureHistoryLoaded();
    private save();
    private loadHistory();
}
