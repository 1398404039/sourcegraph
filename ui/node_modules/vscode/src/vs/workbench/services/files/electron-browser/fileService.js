/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var nls = require("vs/nls");
var winjs_base_1 = require("vs/base/common/winjs.base");
var lifecycle_1 = require("vs/base/common/lifecycle");
var paths = require("vs/base/common/paths");
var encoding = require("vs/base/node/encoding");
var errors = require("vs/base/common/errors");
var strings = require("vs/base/common/strings");
var uri_1 = require("vs/base/common/uri");
var timer = require("vs/base/common/timer");
var editor_1 = require("vs/workbench/common/editor");
var fileService_1 = require("vs/workbench/services/files/node/fileService");
var configuration_1 = require("vs/platform/configuration/common/configuration");
var event_1 = require("vs/platform/event/common/event");
var workspace_1 = require("vs/platform/workspace/common/workspace");
var actions_1 = require("vs/base/common/actions");
var editorService_1 = require("vs/workbench/services/editor/common/editorService");
var message_1 = require("vs/platform/message/common/message");
var environment_1 = require("vs/platform/environment/common/environment");
var groupService_1 = require("vs/workbench/services/group/common/groupService");
var lifecycle_2 = require("vs/platform/lifecycle/common/lifecycle");
var storage_1 = require("vs/platform/storage/common/storage");
var electron_1 = require("electron");
var FileService = (function () {
    function FileService(configurationService, eventService, contextService, editorService, environmentService, editorGroupService, lifecycleService, messageService, storageService) {
        var _this = this;
        this.configurationService = configurationService;
        this.eventService = eventService;
        this.contextService = contextService;
        this.editorService = editorService;
        this.editorGroupService = editorGroupService;
        this.lifecycleService = lifecycleService;
        this.messageService = messageService;
        this.storageService = storageService;
        this.toUnbind = [];
        this.activeOutOfWorkspaceWatchers = Object.create(null);
        var configuration = this.configurationService.getConfiguration();
        // adjust encodings
        var encodingOverride = [];
        encodingOverride.push({ resource: uri_1.default.file(environmentService.appSettingsHome), encoding: encoding.UTF8 });
        if (this.contextService.getWorkspace()) {
            encodingOverride.push({ resource: uri_1.default.file(paths.join(this.contextService.getWorkspace().resource.fsPath, '.vscode')), encoding: encoding.UTF8 });
        }
        var watcherIgnoredPatterns = [];
        if (configuration.files && configuration.files.watcherExclude) {
            watcherIgnoredPatterns = Object.keys(configuration.files.watcherExclude).filter(function (k) { return !!configuration.files.watcherExclude[k]; });
        }
        // build config
        var fileServiceConfig = {
            errorLogger: function (msg) { return _this.onFileServiceError(msg); },
            encoding: configuration.files && configuration.files.encoding,
            encodingOverride: encodingOverride,
            watcherIgnoredPatterns: watcherIgnoredPatterns,
            verboseLogging: environmentService.verbose,
        };
        // create service
        var workspace = this.contextService.getWorkspace();
        this.raw = new fileService_1.FileService(workspace ? workspace.resource.fsPath : void 0, fileServiceConfig, this.eventService);
        // Listeners
        this.registerListeners();
    }
    FileService.prototype.onFileServiceError = function (msg) {
        var _this = this;
        errors.onUnexpectedError(msg);
        // Detect if we run < .NET Framework 4.5
        if (typeof msg === 'string' && msg.indexOf(FileService.NET_VERSION_ERROR) >= 0 && !this.storageService.getBoolean(FileService.NET_VERSION_ERROR_IGNORE_KEY, storage_1.StorageScope.WORKSPACE)) {
            this.messageService.show(message_1.Severity.Warning, {
                message: nls.localize('netVersionError', "The Microsoft .NET Framework 4.5 is required. Please follow the link to install it."),
                actions: [
                    new actions_1.Action('install.net', nls.localize('installNet', "Download .NET Framework 4.5"), null, true, function () {
                        window.open('https://go.microsoft.com/fwlink/?LinkId=786533');
                        return winjs_base_1.TPromise.as(true);
                    }),
                    new actions_1.Action('net.error.ignore', nls.localize('neverShowAgain', "Don't Show Again"), '', true, function () {
                        _this.storageService.store(FileService.NET_VERSION_ERROR_IGNORE_KEY, true, storage_1.StorageScope.WORKSPACE);
                        return winjs_base_1.TPromise.as(null);
                    }),
                    message_1.CloseAction
                ]
            });
        }
    };
    FileService.prototype.registerListeners = function () {
        var _this = this;
        // Config changes
        this.toUnbind.push(this.configurationService.onDidUpdateConfiguration(function (e) { return _this.onConfigurationChange(e.config); }));
        // Editor changing
        this.toUnbind.push(this.editorGroupService.onEditorsChanged(function () { return _this.onEditorsChanged(); }));
        // Lifecycle
        this.lifecycleService.onShutdown(this.dispose, this);
    };
    FileService.prototype.onEditorsChanged = function () {
        this.handleOutOfWorkspaceWatchers();
    };
    FileService.prototype.handleOutOfWorkspaceWatchers = function () {
        var _this = this;
        var visibleOutOfWorkspaceResources = this.editorService.getVisibleEditors().map(function (editor) {
            return editor_1.asFileEditorInput(editor.input, true);
        }).filter(function (input) {
            return !!input && !_this.contextService.isInsideWorkspace(input.getResource());
        }).map(function (input) {
            return input.getResource().toString();
        });
        // Handle no longer visible out of workspace resources
        Object.keys(this.activeOutOfWorkspaceWatchers).forEach(function (watchedResource) {
            if (visibleOutOfWorkspaceResources.indexOf(watchedResource) < 0) {
                _this.unwatchFileChanges(watchedResource);
                delete _this.activeOutOfWorkspaceWatchers[watchedResource];
            }
        });
        // Handle newly visible out of workspace resources
        visibleOutOfWorkspaceResources.forEach(function (resourceToWatch) {
            if (!_this.activeOutOfWorkspaceWatchers[resourceToWatch]) {
                _this.watchFileChanges(uri_1.default.parse(resourceToWatch));
                _this.activeOutOfWorkspaceWatchers[resourceToWatch] = true;
            }
        });
    };
    FileService.prototype.onConfigurationChange = function (configuration) {
        this.updateOptions(configuration.files);
    };
    FileService.prototype.updateOptions = function (options) {
        this.raw.updateOptions(options);
    };
    FileService.prototype.resolveFile = function (resource, options) {
        return this.raw.resolveFile(resource, options);
    };
    FileService.prototype.existsFile = function (resource) {
        return this.raw.existsFile(resource);
    };
    FileService.prototype.resolveContent = function (resource, options) {
        var contentId = resource.toString();
        var timerEvent = timer.start(timer.Topic.WORKBENCH, strings.format('Load {0}', contentId));
        return this.raw.resolveContent(resource, options).then(function (result) {
            timerEvent.stop();
            return result;
        });
    };
    FileService.prototype.resolveStreamContent = function (resource, options) {
        var contentId = resource.toString();
        var timerEvent = timer.start(timer.Topic.WORKBENCH, strings.format('Load {0}', contentId));
        return this.raw.resolveStreamContent(resource, options).then(function (result) {
            timerEvent.stop();
            return result;
        });
    };
    FileService.prototype.resolveContents = function (resources) {
        return this.raw.resolveContents(resources);
    };
    FileService.prototype.updateContent = function (resource, value, options) {
        var timerEvent = timer.start(timer.Topic.WORKBENCH, strings.format('Save {0}', resource.toString()));
        return this.raw.updateContent(resource, value, options).then(function (result) {
            timerEvent.stop();
            return result;
        }, function (error) {
            timerEvent.stop();
            return winjs_base_1.TPromise.wrapError(error);
        });
    };
    FileService.prototype.moveFile = function (source, target, overwrite) {
        return this.raw.moveFile(source, target, overwrite);
    };
    FileService.prototype.copyFile = function (source, target, overwrite) {
        return this.raw.copyFile(source, target, overwrite);
    };
    FileService.prototype.createFile = function (resource, content) {
        return this.raw.createFile(resource, content);
    };
    FileService.prototype.createFolder = function (resource) {
        return this.raw.createFolder(resource);
    };
    FileService.prototype.touchFile = function (resource) {
        return this.raw.touchFile(resource);
    };
    FileService.prototype.rename = function (resource, newName) {
        return this.raw.rename(resource, newName);
    };
    FileService.prototype.del = function (resource, useTrash) {
        if (useTrash) {
            return this.doMoveItemToTrash(resource);
        }
        return this.raw.del(resource);
    };
    FileService.prototype.doMoveItemToTrash = function (resource) {
        var workspace = this.contextService.getWorkspace();
        if (!workspace) {
            return winjs_base_1.TPromise.wrapError('Need a workspace to use this');
        }
        var absolutePath = resource.fsPath;
        var result = electron_1.shell.moveItemToTrash(absolutePath);
        if (!result) {
            return winjs_base_1.TPromise.wrapError(new Error(nls.localize('trashFailed', "Failed to move '{0}' to the trash", paths.basename(absolutePath))));
        }
        return winjs_base_1.TPromise.as(null);
    };
    FileService.prototype.importFile = function (source, targetFolder) {
        return this.raw.importFile(source, targetFolder).then(function (result) {
            return {
                isNew: result && result.isNew,
                stat: result && result.stat
            };
        });
    };
    FileService.prototype.watchFileChanges = function (resource) {
        if (!resource) {
            return;
        }
        if (resource.scheme !== 'file') {
            return; // only support files
        }
        // return early if the resource is inside the workspace for which we have another watcher in place
        if (this.contextService.isInsideWorkspace(resource)) {
            return;
        }
        this.raw.watchFileChanges(resource);
    };
    FileService.prototype.unwatchFileChanges = function (arg1) {
        this.raw.unwatchFileChanges(arg1);
    };
    FileService.prototype.getEncoding = function (resource) {
        return this.raw.getEncoding(resource);
    };
    FileService.prototype.dispose = function () {
        this.toUnbind = lifecycle_1.dispose(this.toUnbind);
        // Dispose watchers if any
        for (var key in this.activeOutOfWorkspaceWatchers) {
            this.unwatchFileChanges(key);
        }
        this.activeOutOfWorkspaceWatchers = Object.create(null);
        // Dispose service
        this.raw.dispose();
    };
    return FileService;
}());
// If we run with .NET framework < 4.5, we need to detect this error to inform the user
FileService.NET_VERSION_ERROR = 'System.MissingMethodException';
FileService.NET_VERSION_ERROR_IGNORE_KEY = 'ignoreNetVersionError';
FileService = __decorate([
    __param(0, configuration_1.IConfigurationService),
    __param(1, event_1.IEventService),
    __param(2, workspace_1.IWorkspaceContextService),
    __param(3, editorService_1.IWorkbenchEditorService),
    __param(4, environment_1.IEnvironmentService),
    __param(5, groupService_1.IEditorGroupService),
    __param(6, lifecycle_2.ILifecycleService),
    __param(7, message_1.IMessageService),
    __param(8, storage_1.IStorageService)
], FileService);
exports.FileService = FileService;
