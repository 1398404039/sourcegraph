/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var nls = require('vs/nls');
var paths = require('vs/base/common/paths');
var types = require('vs/base/common/types');
var winjs_base_1 = require('vs/base/common/winjs.base');
var async_1 = require('vs/base/common/async');
var environment_1 = require('vs/platform/environment/common/environment');
var configuration_1 = require('vs/platform/configuration/common/configuration');
var commands_1 = require('vs/platform/commands/common/commands');
var editorService_1 = require('vs/workbench/services/editor/common/editorService');
var editor_1 = require('vs/workbench/common/editor');
var ConfigurationResolverService = (function () {
    function ConfigurationResolverService(workspaceRoot, envVariables, editorService, environmentService, configurationService, commandService) {
        var _this = this;
        this.editorService = editorService;
        this.configurationService = configurationService;
        this.commandService = commandService;
        this._workspaceRoot = paths.normalize(workspaceRoot ? workspaceRoot.fsPath : '', true);
        this._execPath = environmentService.execPath;
        Object.keys(envVariables).forEach(function (key) {
            _this[("env." + key)] = envVariables[key];
        });
    }
    Object.defineProperty(ConfigurationResolverService.prototype, "execPath", {
        get: function () {
            return this._execPath;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConfigurationResolverService.prototype, "cwd", {
        get: function () {
            return this.workspaceRoot;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConfigurationResolverService.prototype, "workspaceRoot", {
        get: function () {
            return this._workspaceRoot;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConfigurationResolverService.prototype, "workspaceRootFolderName", {
        get: function () {
            return this.workspaceRoot ? paths.basename(this.workspaceRoot) : '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConfigurationResolverService.prototype, "file", {
        get: function () {
            return this.getFilePath();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConfigurationResolverService.prototype, "relativeFile", {
        get: function () {
            return (this.workspaceRoot) ? paths.relative(this.workspaceRoot, this.file) : this.file;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConfigurationResolverService.prototype, "fileBasename", {
        get: function () {
            return paths.basename(this.getFilePath());
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConfigurationResolverService.prototype, "fileDirname", {
        get: function () {
            return paths.dirname(this.getFilePath());
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConfigurationResolverService.prototype, "fileExtname", {
        get: function () {
            return paths.extname(this.getFilePath());
        },
        enumerable: true,
        configurable: true
    });
    ConfigurationResolverService.prototype.getFilePath = function () {
        var input = this.editorService.getActiveEditorInput();
        if (!input) {
            return '';
        }
        var fileEditorInput = editor_1.asFileEditorInput(input);
        if (!fileEditorInput) {
            return '';
        }
        var resource = fileEditorInput.getResource();
        return paths.normalize(resource.fsPath, true);
    };
    ConfigurationResolverService.prototype.resolve = function (value) {
        if (types.isString(value)) {
            return this.resolveString(value);
        }
        else if (types.isArray(value)) {
            return this.resolveArray(value);
        }
        else if (types.isObject(value)) {
            return this.resolveLiteral(value);
        }
        return value;
    };
    ConfigurationResolverService.prototype.resolveAny = function (value) {
        if (types.isString(value)) {
            return this.resolveString(value);
        }
        else if (types.isArray(value)) {
            return this.resolveAnyArray(value);
        }
        else if (types.isObject(value)) {
            return this.resolveAnyLiteral(value);
        }
        return value;
    };
    ConfigurationResolverService.prototype.resolveString = function (value) {
        var _this = this;
        var regexp = /\$\{(.*?)\}/g;
        var originalValue = value;
        var resolvedString = value.replace(regexp, function (match, name) {
            var newValue = _this[name];
            if (types.isString(newValue)) {
                return newValue;
            }
            else {
                return match && match.indexOf('env.') > 0 ? '' : match;
            }
        });
        return this.resolveConfigVariable(resolvedString, originalValue);
    };
    ConfigurationResolverService.prototype.resolveConfigVariable = function (value, originalValue) {
        var _this = this;
        var regexp = /\$\{config\.(.+?)\}/g;
        return value.replace(regexp, function (match, name) {
            var config = _this.configurationService.getConfiguration();
            var newValue;
            try {
                var keys = name.split('.');
                if (!keys || keys.length <= 0) {
                    return '';
                }
                while (keys.length > 1) {
                    var key = keys.shift();
                    if (!config || !config.hasOwnProperty(key)) {
                        return '';
                    }
                    config = config[key];
                }
                newValue = config && config.hasOwnProperty(keys[0]) ? config[keys[0]] : '';
            }
            catch (e) {
                return '';
            }
            if (types.isString(newValue)) {
                // Prevent infinite recursion and also support nested references (or tokens)
                return newValue === originalValue ? '' : _this.resolveString(newValue);
            }
            else {
                return _this.resolve(newValue) + '';
            }
        });
    };
    ConfigurationResolverService.prototype.resolveLiteral = function (values) {
        var _this = this;
        var result = Object.create(null);
        Object.keys(values).forEach(function (key) {
            var value = values[key];
            result[key] = _this.resolve(value);
        });
        return result;
    };
    ConfigurationResolverService.prototype.resolveAnyLiteral = function (values) {
        var _this = this;
        var result = Object.create(null);
        Object.keys(values).forEach(function (key) {
            var value = values[key];
            result[key] = _this.resolveAny(value);
        });
        return result;
    };
    ConfigurationResolverService.prototype.resolveArray = function (value) {
        var _this = this;
        return value.map(function (s) { return _this.resolveString(s); });
    };
    ConfigurationResolverService.prototype.resolveAnyArray = function (value) {
        var _this = this;
        return value.map(function (s) { return _this.resolveAny(s); });
    };
    /**
     * Resolve all interactive variables in configuration #6569
     */
    ConfigurationResolverService.prototype.resolveInteractiveVariables = function (configuration, interactiveVariablesMap) {
        var _this = this;
        if (!configuration) {
            return winjs_base_1.TPromise.as(null);
        }
        // We need a map from interactive variables to keys because we only want to trigger an command once per key -
        // even though it might occure multiple times in configuration #7026.
        var interactiveVariablesToSubstitutes = {};
        var findInteractiveVariables = function (object) {
            Object.keys(object).forEach(function (key) {
                if (object[key] && typeof object[key] === 'object') {
                    findInteractiveVariables(object[key]);
                }
                else if (typeof object[key] === 'string') {
                    var matches = /\${command.(.+)}/.exec(object[key]);
                    if (matches && matches.length === 2) {
                        var interactiveVariable = matches[1];
                        if (!interactiveVariablesToSubstitutes[interactiveVariable]) {
                            interactiveVariablesToSubstitutes[interactiveVariable] = [];
                        }
                        interactiveVariablesToSubstitutes[interactiveVariable].push({ object: object, key: key });
                    }
                }
            });
        };
        findInteractiveVariables(configuration);
        var factory = Object.keys(interactiveVariablesToSubstitutes).map(function (interactiveVariable) {
            return function () {
                var commandId = null;
                commandId = interactiveVariablesMap ? interactiveVariablesMap[interactiveVariable] : null;
                if (!commandId) {
                    return winjs_base_1.TPromise.wrapError(nls.localize('interactiveVariableNotFound', "Interactive variable {0} is not contributed but is specified in a configuration.", interactiveVariable));
                }
                else {
                    return _this.commandService.executeCommand(commandId, configuration).then(function (result) {
                        if (!result) {
                            // TODO@Isidor remove this hack
                            configuration.silentlyAbort = true;
                        }
                        interactiveVariablesToSubstitutes[interactiveVariable].forEach(function (substitute) {
                            return substitute.object[substitute.key] = substitute.object[substitute.key].replace("${command." + interactiveVariable + "}", result);
                        });
                    });
                }
            };
        });
        return async_1.sequence(factory).then(function () { return configuration; });
    };
    ConfigurationResolverService = __decorate([
        __param(2, editorService_1.IWorkbenchEditorService),
        __param(3, environment_1.IEnvironmentService),
        __param(4, configuration_1.IConfigurationService),
        __param(5, commands_1.ICommandService)
    ], ConfigurationResolverService);
    return ConfigurationResolverService;
}());
exports.ConfigurationResolverService = ConfigurationResolverService;
