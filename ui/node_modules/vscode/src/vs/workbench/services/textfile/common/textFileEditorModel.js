/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var nls = require('vs/nls');
var event_1 = require('vs/base/common/event');
var winjs_base_1 = require('vs/base/common/winjs.base');
var errors_1 = require('vs/base/common/errors');
var mime_1 = require('vs/base/common/mime');
var errorMessage_1 = require('vs/base/common/errorMessage');
var assert = require('vs/base/common/assert');
var lifecycle_1 = require('vs/base/common/lifecycle');
var paths = require('vs/base/common/paths');
var diagnostics = require('vs/base/common/diagnostics');
var types = require('vs/base/common/types');
var lifecycle_2 = require('vs/platform/lifecycle/common/lifecycle');
var textfiles_1 = require('vs/workbench/services/textfile/common/textfiles');
var editor_1 = require('vs/workbench/common/editor');
var textEditorModel_1 = require('vs/workbench/common/editor/textEditorModel');
var files_1 = require('vs/platform/files/common/files');
var instantiation_1 = require('vs/platform/instantiation/common/instantiation');
var message_1 = require('vs/platform/message/common/message');
var modeService_1 = require('vs/editor/common/services/modeService');
var modelService_1 = require('vs/editor/common/services/modelService');
var telemetry_1 = require('vs/platform/telemetry/common/telemetry');
/**
 * The text file editor model listens to changes to its underlying code editor model and saves these changes through the file service back to the disk.
 */
var TextFileEditorModel = (function (_super) {
    __extends(TextFileEditorModel, _super);
    function TextFileEditorModel(resource, preferredEncoding, messageService, modeService, modelService, fileService, lifecycleService, instantiationService, telemetryService, textFileService) {
        _super.call(this, modelService, modeService);
        this.messageService = messageService;
        this.fileService = fileService;
        this.lifecycleService = lifecycleService;
        this.instantiationService = instantiationService;
        this.telemetryService = telemetryService;
        this.textFileService = textFileService;
        assert.ok(resource.scheme === 'file', 'TextFileEditorModel can only handle file:// resources.');
        this.resource = resource;
        this.toDispose = [];
        this._onDidStateChange = new event_1.Emitter();
        this.toDispose.push(this._onDidStateChange);
        this.preferredEncoding = preferredEncoding;
        this.dirty = false;
        this.autoSavePromises = [];
        this.versionId = 0;
        this.lastSaveAttemptTime = 0;
        this.mapPendingSaveToVersionId = {};
        this.updateAutoSaveConfiguration(textFileService.getAutoSaveConfiguration());
        this.registerListeners();
    }
    TextFileEditorModel.prototype.registerListeners = function () {
        var _this = this;
        this.toDispose.push(this.textFileService.onAutoSaveConfigurationChange(function (config) { return _this.updateAutoSaveConfiguration(config); }));
        this.toDispose.push(this.textFileService.onFilesAssociationChange(function (e) { return _this.onFilesAssociationChange(); }));
    };
    TextFileEditorModel.prototype.updateAutoSaveConfiguration = function (config) {
        if (typeof config.autoSaveDelay === 'number' && config.autoSaveDelay > 0) {
            this.autoSaveAfterMillies = config.autoSaveDelay;
            this.autoSaveAfterMilliesEnabled = true;
        }
        else {
            this.autoSaveAfterMillies = void 0;
            this.autoSaveAfterMilliesEnabled = false;
        }
    };
    TextFileEditorModel.prototype.onFilesAssociationChange = function () {
        this.updateTextEditorModelMode();
    };
    Object.defineProperty(TextFileEditorModel.prototype, "onDidStateChange", {
        get: function () {
            return this._onDidStateChange.event;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Set a save error handler to install code that executes when save errors occur.
     */
    TextFileEditorModel.setSaveErrorHandler = function (handler) {
        TextFileEditorModel.saveErrorHandler = handler;
    };
    /**
     * Set a save participant handler to react on models getting saved.
     */
    TextFileEditorModel.setSaveParticipant = function (handler) {
        TextFileEditorModel.saveParticipant = handler;
    };
    /**
     * When set, will disable any saving (including auto save) until the model is loaded again. This allows to resolve save conflicts
     * without running into subsequent save errors when editing the model.
     */
    TextFileEditorModel.prototype.setConflictResolutionMode = function () {
        diag('setConflictResolutionMode() - enabled conflict resolution mode', this.resource, new Date());
        this.inConflictResolutionMode = true;
    };
    /**
     * Answers if this model is currently in conflic resolution mode or not.
     */
    TextFileEditorModel.prototype.isInConflictResolutionMode = function () {
        return this.inConflictResolutionMode;
    };
    /**
     * Discards any local changes and replaces the model with the contents of the version on disk.
     */
    TextFileEditorModel.prototype.revert = function () {
        var _this = this;
        if (!this.isResolved()) {
            return winjs_base_1.TPromise.as(null);
        }
        // Cancel any running auto-saves
        this.cancelAutoSavePromises();
        // Unset flags
        var undo = this.setDirty(false);
        // Reload
        return this.load(true /* force */).then(function () {
            // Emit file change event
            _this._onDidStateChange.fire(textfiles_1.StateChange.REVERTED);
        }, function (error) {
            // FileNotFound means the file got deleted meanwhile, so emit revert event because thats ok
            if (error.fileOperationResult === files_1.FileOperationResult.FILE_NOT_FOUND) {
                _this._onDidStateChange.fire(textfiles_1.StateChange.REVERTED);
            }
            else {
                undo();
            }
            return winjs_base_1.TPromise.wrapError(error);
        });
    };
    TextFileEditorModel.prototype.load = function (force /* bypass any caches and really go to disk */) {
        var _this = this;
        diag('load() - enter', this.resource, new Date());
        // It is very important to not reload the model when the model is dirty. We only want to reload the model from the disk
        // if no save is pending to avoid data loss. This might cause a save conflict in case the file has been modified on the disk
        // meanwhile, but this is a very low risk.
        if (this.dirty) {
            diag('load() - exit - without loading because model is dirty', this.resource, new Date());
            return winjs_base_1.TPromise.as(this);
        }
        // Decide on etag
        var etag;
        if (force) {
            etag = undefined; // bypass cache if force loading is true
        }
        else if (this.versionOnDiskStat) {
            etag = this.versionOnDiskStat.etag; // otherwise respect etag to support caching
        }
        // Resolve Content
        return this.textFileService.resolveTextContent(this.resource, { acceptTextOnly: true, etag: etag, encoding: this.preferredEncoding }).then(function (content) {
            diag('load() - resolved content', _this.resource, new Date());
            // Telemetry
            _this.telemetryService.publicLog('fileGet', { mimeType: mime_1.guessMimeTypes(_this.resource.fsPath).join(', '), ext: paths.extname(_this.resource.fsPath), path: telemetry_1.anonymize(_this.resource.fsPath) });
            // Update our resolved disk stat model
            var resolvedStat = {
                resource: _this.resource,
                name: content.name,
                mtime: content.mtime,
                etag: content.etag,
                isDirectory: false,
                hasChildren: false,
                children: void 0,
            };
            _this.updateVersionOnDiskStat(resolvedStat);
            // Keep the original encoding to not loose it when saving
            var oldEncoding = _this.contentEncoding;
            _this.contentEncoding = content.encoding;
            // Handle events if encoding changed
            if (_this.preferredEncoding) {
                _this.updatePreferredEncoding(_this.contentEncoding); // make sure to reflect the real encoding of the file (never out of sync)
            }
            else if (oldEncoding !== _this.contentEncoding) {
                _this._onDidStateChange.fire(textfiles_1.StateChange.ENCODING);
            }
            // Update Existing Model
            if (_this.textEditorModel) {
                diag('load() - updated text editor model', _this.resource, new Date());
                _this.setDirty(false); // Ensure we are not tracking a stale state
                _this.blockModelContentChange = true;
                try {
                    _this.updateTextEditorModel(content.value);
                }
                finally {
                    _this.blockModelContentChange = false;
                }
                return winjs_base_1.TPromise.as(_this);
            }
            else if (_this.createTextEditorModelPromise) {
                diag('load() - join existing text editor model promise', _this.resource, new Date());
                return _this.createTextEditorModelPromise;
            }
            else {
                diag('load() - created text editor model', _this.resource, new Date());
                _this.createTextEditorModelPromise = _this.createTextEditorModel(content.value, content.resource).then(function () {
                    _this.createTextEditorModelPromise = null;
                    _this.setDirty(false); // Ensure we are not tracking a stale state
                    _this.toDispose.push(_this.textEditorModel.onDidChangeRawContent(function (e) { return _this.onModelContentChanged(e); }));
                    return _this;
                }, function (error) {
                    _this.createTextEditorModelPromise = null;
                    return winjs_base_1.TPromise.wrapError(error);
                });
                return _this.createTextEditorModelPromise;
            }
        }, function (error) {
            // NotModified status code is expected and can be handled gracefully
            if (error.fileOperationResult === files_1.FileOperationResult.FILE_NOT_MODIFIED_SINCE) {
                _this.setDirty(false); // Ensure we are not tracking a stale state
                return winjs_base_1.TPromise.as(_this);
            }
            // Otherwise bubble up the error
            return winjs_base_1.TPromise.wrapError(error);
        });
    };
    TextFileEditorModel.prototype.getOrCreateMode = function (modeService, preferredModeIds, firstLineText) {
        return modeService.getOrCreateModeByFilenameOrFirstLine(this.resource.fsPath, firstLineText);
    };
    TextFileEditorModel.prototype.onModelContentChanged = function (e) {
        diag("onModelContentChanged(" + e.changeType + ") - enter", this.resource, new Date());
        // In any case increment the version id because it tracks the textual content state of the model at all times
        this.versionId++;
        diag("onModelContentChanged() - new versionId " + this.versionId, this.resource, new Date());
        // Ignore if blocking model changes
        if (this.blockModelContentChange) {
            return;
        }
        // The contents changed as a matter of Undo and the version reached matches the saved one
        // In this case we clear the dirty flag and emit a SAVED event to indicate this state.
        // Note: we currently only do this check when auto-save is turned off because there you see
        // a dirty indicator that you want to get rid of when undoing to the saved version.
        if (!this.autoSaveAfterMilliesEnabled && this.textEditorModel.getAlternativeVersionId() === this.bufferSavedVersionId) {
            diag('onModelContentChanged() - model content changed back to last saved version', this.resource, new Date());
            // Clear flags
            var wasDirty = this.dirty;
            this.setDirty(false);
            // Emit event
            if (wasDirty) {
                this._onDidStateChange.fire(textfiles_1.StateChange.REVERTED);
            }
            return;
        }
        diag('onModelContentChanged() - model content changed and marked as dirty', this.resource, new Date());
        // Mark as dirty
        this.makeDirty();
        // Start auto save process unless we are in conflict resolution mode and unless it is disabled
        if (this.autoSaveAfterMilliesEnabled) {
            if (!this.inConflictResolutionMode) {
                this.doAutoSave(this.versionId);
            }
            else {
                diag('makeDirty() - prevented save because we are in conflict resolution mode', this.resource, new Date());
            }
        }
    };
    TextFileEditorModel.prototype.makeDirty = function () {
        // Track dirty state and version id
        var wasDirty = this.dirty;
        this.setDirty(true);
        // Emit as Event if we turned dirty
        if (!wasDirty) {
            this._onDidStateChange.fire(textfiles_1.StateChange.DIRTY);
        }
    };
    TextFileEditorModel.prototype.doAutoSave = function (versionId) {
        var _this = this;
        diag("doAutoSave() - enter for versionId " + versionId, this.resource, new Date());
        // Cancel any currently running auto saves to make this the one that succeeds
        this.cancelAutoSavePromises();
        // Create new save promise and keep it
        var promise = winjs_base_1.TPromise.timeout(this.autoSaveAfterMillies).then(function () {
            // Only trigger save if the version id has not changed meanwhile
            if (versionId === _this.versionId) {
                _this.doSave(versionId, textfiles_1.SaveReason.AUTO); // Very important here to not return the promise because if the timeout promise is canceled it will bubble up the error otherwise - do not change
            }
        });
        this.autoSavePromises.push(promise);
        return promise;
    };
    TextFileEditorModel.prototype.cancelAutoSavePromises = function () {
        while (this.autoSavePromises.length) {
            this.autoSavePromises.pop().cancel();
        }
    };
    /**
     * Saves the current versionId of this editor model if it is dirty.
     */
    TextFileEditorModel.prototype.save = function (options) {
        if (options === void 0) { options = Object.create(null); }
        if (!this.isResolved()) {
            return winjs_base_1.TPromise.as(null);
        }
        diag('save() - enter', this.resource, new Date());
        // Cancel any currently running auto saves to make this the one that succeeds
        this.cancelAutoSavePromises();
        return this.doSave(this.versionId, types.isUndefinedOrNull(options.reason) ? textfiles_1.SaveReason.EXPLICIT : options.reason, options.overwriteReadonly, options.overwriteEncoding);
    };
    TextFileEditorModel.prototype.doSave = function (versionId, reason, overwriteReadonly, overwriteEncoding) {
        var _this = this;
        diag("doSave(" + versionId + ") - enter with versionId ' + versionId", this.resource, new Date());
        // Lookup any running pending save for this versionId and return it if found
        //
        // Scenario: user invoked the save action multiple times quickly for the same contents
        //           while the save was not yet finished to disk
        //
        var pendingSave = this.mapPendingSaveToVersionId[versionId];
        if (pendingSave) {
            diag("doSave(" + versionId + ") - exit - found a pending save for versionId " + versionId, this.resource, new Date());
            return pendingSave;
        }
        // Return early if not dirty or version changed meanwhile
        //
        // Scenario A: user invoked save action even though the model is not dirty
        // Scenario B: auto save was triggered for a certain change by the user but meanwhile the user changed
        //             the contents and the version for which auto save was started is no longer the latest.
        //             Thus we avoid spawning multiple auto saves and only take the latest.
        //
        if (!this.dirty || versionId !== this.versionId) {
            diag("doSave(" + versionId + ") - exit - because not dirty and/or versionId is different (this.isDirty: " + this.dirty + ", this.versionId: " + this.versionId + ")", this.resource, new Date());
            return winjs_base_1.TPromise.as(null);
        }
        // Return if currently saving by scheduling another auto save. Never ever must 2 saves execute at the same time because
        // this can lead to dirty writes and race conditions
        //
        // Scenario: auto save was triggered and is currently busy saving to disk. this takes long enough that another auto save
        //           kicks in. since we never want to trigger 2 saves at the same time, we push out this auto save for the
        //           configured auto save delay assuming that it can proceed next time it triggers.
        //
        if (this.isBusySaving()) {
            diag("doSave(" + versionId + ") - exit - because busy saving", this.resource, new Date());
            // Avoid endless loop here and guard if auto save is disabled
            if (this.autoSaveAfterMilliesEnabled) {
                return this.doAutoSave(versionId);
            }
        }
        // Push all edit operations to the undo stack so that the user has a chance to
        // Ctrl+Z back to the saved version. We only do this when auto-save is turned off
        if (!this.autoSaveAfterMilliesEnabled) {
            this.textEditorModel.pushStackElement();
        }
        // A save participant can still change the model now and since we are so close to saving
        // we do not want to trigger another auto save or similar, so we block this
        // In addition we update our version right after in case it changed because of a model change
        // We DO NOT run any save participant if we are in the shutdown phase and files are being
        // saved as a result of that.
        var saveParticipantPromise = winjs_base_1.TPromise.as(versionId);
        if (TextFileEditorModel.saveParticipant && !this.lifecycleService.willShutdown) {
            var onCompleteOrError = function () {
                _this.blockModelContentChange = false;
                return _this.versionId;
            };
            saveParticipantPromise = winjs_base_1.TPromise.as(undefined).then(function () {
                _this.blockModelContentChange = true;
                return TextFileEditorModel.saveParticipant.participate(_this, { reason: reason });
            }).then(onCompleteOrError, onCompleteOrError);
        }
        this.mapPendingSaveToVersionId[versionId] = saveParticipantPromise.then(function (newVersionId) {
            // remove save participant promise from pending saves and update versionId with
            // its new value (if pre-save changes happened)
            delete _this.mapPendingSaveToVersionId[versionId];
            versionId = newVersionId;
            // Clear error flag since we are trying to save again
            _this.inErrorMode = false;
            // Remember when this model was saved last
            _this.lastSaveAttemptTime = Date.now();
            // Save to Disk
            diag("doSave(" + versionId + ") - before updateContent()", _this.resource, new Date());
            _this.mapPendingSaveToVersionId[versionId] = _this.fileService.updateContent(_this.versionOnDiskStat.resource, _this.getValue(), {
                overwriteReadonly: overwriteReadonly,
                overwriteEncoding: overwriteEncoding,
                mtime: _this.versionOnDiskStat.mtime,
                encoding: _this.getEncoding(),
                etag: _this.versionOnDiskStat.etag
            }).then(function (stat) {
                diag("doSave(" + versionId + ") - after updateContent()", _this.resource, new Date());
                // Remove from pending saves
                delete _this.mapPendingSaveToVersionId[versionId];
                // Telemetry
                _this.telemetryService.publicLog('filePUT', { mimeType: mime_1.guessMimeTypes(_this.resource.fsPath).join(', '), ext: paths.extname(_this.versionOnDiskStat.resource.fsPath) });
                // Update dirty state unless model has changed meanwhile
                if (versionId === _this.versionId) {
                    diag("doSave(" + versionId + ") - setting dirty to false because versionId did not change", _this.resource, new Date());
                    _this.setDirty(false);
                }
                else {
                    diag("doSave(" + versionId + ") - not setting dirty to false because versionId did change meanwhile", _this.resource, new Date());
                }
                // Updated resolved stat with updated stat, and keep old for event
                _this.updateVersionOnDiskStat(stat);
                // Emit File Saved Event
                _this._onDidStateChange.fire(textfiles_1.StateChange.SAVED);
            }, function (error) {
                diag("doSave(" + versionId + ") - exit - resulted in a save error: " + error.toString(), _this.resource, new Date());
                // Remove from pending saves
                delete _this.mapPendingSaveToVersionId[versionId];
                // Flag as error state
                _this.inErrorMode = true;
                // Show to user
                _this.onSaveError(error);
                // Emit as event
                _this._onDidStateChange.fire(textfiles_1.StateChange.SAVE_ERROR);
            });
            return _this.mapPendingSaveToVersionId[versionId];
        });
        return this.mapPendingSaveToVersionId[versionId];
    };
    TextFileEditorModel.prototype.setDirty = function (dirty) {
        var _this = this;
        var wasDirty = this.dirty;
        var wasInConflictResolutionMode = this.inConflictResolutionMode;
        var wasInErrorMode = this.inErrorMode;
        var oldBufferSavedVersionId = this.bufferSavedVersionId;
        if (!dirty) {
            this.dirty = false;
            this.inConflictResolutionMode = false;
            this.inErrorMode = false;
            // we remember the models alternate version id to remember when the version
            // of the model matches with the saved version on disk. we need to keep this
            // in order to find out if the model changed back to a saved version (e.g.
            // when undoing long enough to reach to a version that is saved and then to
            // clear the dirty flag)
            if (this.textEditorModel) {
                this.bufferSavedVersionId = this.textEditorModel.getAlternativeVersionId();
            }
        }
        else {
            this.dirty = true;
        }
        // Return function to revert this call
        return function () {
            _this.dirty = wasDirty;
            _this.inConflictResolutionMode = wasInConflictResolutionMode;
            _this.inErrorMode = wasInErrorMode;
            _this.bufferSavedVersionId = oldBufferSavedVersionId;
        };
    };
    TextFileEditorModel.prototype.updateVersionOnDiskStat = function (newVersionOnDiskStat) {
        // First resolve - just take
        if (!this.versionOnDiskStat) {
            this.versionOnDiskStat = newVersionOnDiskStat;
        }
        else if (this.versionOnDiskStat.mtime <= newVersionOnDiskStat.mtime) {
            this.versionOnDiskStat = newVersionOnDiskStat;
        }
    };
    TextFileEditorModel.prototype.onSaveError = function (error) {
        // Prepare handler
        if (!TextFileEditorModel.saveErrorHandler) {
            TextFileEditorModel.setSaveErrorHandler(this.instantiationService.createInstance(DefaultSaveErrorHandler));
        }
        // Handle
        TextFileEditorModel.saveErrorHandler.onSaveError(error, this);
    };
    /**
     * Returns true if the content of this model has changes that are not yet saved back to the disk.
     */
    TextFileEditorModel.prototype.isDirty = function () {
        return this.dirty;
    };
    /**
     * Returns the time in millies when this working copy was attempted to be saved.
     */
    TextFileEditorModel.prototype.getLastSaveAttemptTime = function () {
        return this.lastSaveAttemptTime;
    };
    /**
     * Returns the time in millies when this working copy was last modified by the user or some other program.
     */
    TextFileEditorModel.prototype.getLastModifiedTime = function () {
        return this.versionOnDiskStat ? this.versionOnDiskStat.mtime : -1;
    };
    /**
     * Returns the state this text text file editor model is in with regards to changes and saving.
     */
    TextFileEditorModel.prototype.getState = function () {
        if (this.inConflictResolutionMode) {
            return textfiles_1.ModelState.CONFLICT;
        }
        if (this.inErrorMode) {
            return textfiles_1.ModelState.ERROR;
        }
        if (!this.dirty) {
            return textfiles_1.ModelState.SAVED;
        }
        if (this.isBusySaving()) {
            return textfiles_1.ModelState.PENDING_SAVE;
        }
        if (this.dirty) {
            return textfiles_1.ModelState.DIRTY;
        }
    };
    TextFileEditorModel.prototype.isBusySaving = function () {
        return !types.isEmptyObject(this.mapPendingSaveToVersionId);
    };
    TextFileEditorModel.prototype.getEncoding = function () {
        return this.preferredEncoding || this.contentEncoding;
    };
    TextFileEditorModel.prototype.setEncoding = function (encoding, mode) {
        if (!this.isNewEncoding(encoding)) {
            return; // return early if the encoding is already the same
        }
        // Encode: Save with encoding
        if (mode === editor_1.EncodingMode.Encode) {
            this.updatePreferredEncoding(encoding);
            // Save
            if (!this.isDirty()) {
                this.versionId++; // needs to increment because we change the model potentially
                this.makeDirty();
            }
            if (!this.inConflictResolutionMode) {
                this.save({ overwriteEncoding: true }).done(null, errors_1.onUnexpectedError);
            }
        }
        else {
            if (this.isDirty()) {
                this.messageService.show(message_1.Severity.Info, nls.localize('saveFileFirst', "The file is dirty. Please save it first before reopening it with another encoding."));
                return;
            }
            this.updatePreferredEncoding(encoding);
            // Load
            this.load(true /* force because encoding has changed */).done(null, errors_1.onUnexpectedError);
        }
    };
    TextFileEditorModel.prototype.updatePreferredEncoding = function (encoding) {
        if (!this.isNewEncoding(encoding)) {
            return;
        }
        this.preferredEncoding = encoding;
        // Emit
        this._onDidStateChange.fire(textfiles_1.StateChange.ENCODING);
    };
    TextFileEditorModel.prototype.isNewEncoding = function (encoding) {
        if (this.preferredEncoding === encoding) {
            return false; // return early if the encoding is already the same
        }
        if (!this.preferredEncoding && this.contentEncoding === encoding) {
            return false; // also return if we don't have a preferred encoding but the content encoding is already the same
        }
        return true;
    };
    TextFileEditorModel.prototype.isResolved = function () {
        return !types.isUndefinedOrNull(this.versionOnDiskStat);
    };
    /**
     * Returns true if the dispose() method of this model has been called.
     */
    TextFileEditorModel.prototype.isDisposed = function () {
        return this.disposed;
    };
    /**
     * Returns the full resource URI of the file this text file editor model is about.
     */
    TextFileEditorModel.prototype.getResource = function () {
        return this.resource;
    };
    TextFileEditorModel.prototype.dispose = function () {
        this.disposed = true;
        this.inConflictResolutionMode = false;
        this.inErrorMode = false;
        this.toDispose = lifecycle_1.dispose(this.toDispose);
        this.createTextEditorModelPromise = null;
        this.cancelAutoSavePromises();
        _super.prototype.dispose.call(this);
    };
    TextFileEditorModel.ID = 'workbench.editors.files.textFileEditorModel';
    TextFileEditorModel = __decorate([
        __param(2, message_1.IMessageService),
        __param(3, modeService_1.IModeService),
        __param(4, modelService_1.IModelService),
        __param(5, files_1.IFileService),
        __param(6, lifecycle_2.ILifecycleService),
        __param(7, instantiation_1.IInstantiationService),
        __param(8, telemetry_1.ITelemetryService),
        __param(9, textfiles_1.ITextFileService)
    ], TextFileEditorModel);
    return TextFileEditorModel;
}(textEditorModel_1.BaseTextEditorModel));
exports.TextFileEditorModel = TextFileEditorModel;
var DefaultSaveErrorHandler = (function () {
    function DefaultSaveErrorHandler(messageService) {
        this.messageService = messageService;
    }
    DefaultSaveErrorHandler.prototype.onSaveError = function (error, model) {
        this.messageService.show(message_1.Severity.Error, nls.localize('genericSaveError', "Failed to save '{0}': {1}", paths.basename(model.getResource().fsPath), errorMessage_1.toErrorMessage(error, false)));
    };
    DefaultSaveErrorHandler = __decorate([
        __param(0, message_1.IMessageService)
    ], DefaultSaveErrorHandler);
    return DefaultSaveErrorHandler;
}());
// Diagnostics support
var diag;
if (!diag) {
    diag = diagnostics.register('TextFileEditorModelDiagnostics', function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i - 0] = arguments[_i];
        }
        console.log(args[1] + ' - ' + args[0] + ' (time: ' + args[2].getTime() + ' [' + args[2].toUTCString() + '])');
    });
}
