import Uri from 'vs/base/common/uri';
import { IBackupFileService } from 'vs/workbench/services/backup/common/backup';
import { IBackupService } from 'vs/platform/backup/common/backup';
import { IEnvironmentService } from 'vs/platform/environment/common/environment';
import { IFileService } from 'vs/platform/files/common/files';
import { TPromise } from 'vs/base/common/winjs.base';
import { IRawTextContent } from 'vs/workbench/services/textfile/common/textfiles';
export interface IBackupFilesModel {
    resolve(backupRoot: string): TPromise<IBackupFilesModel>;
    add(resource: Uri, versionId?: number): void;
    has(resource: Uri, versionId?: number): boolean;
    get(): Uri[];
    remove(resource: Uri): void;
    clear(): void;
}
export declare class BackupFilesModel implements IBackupFilesModel {
    private cache;
    resolve(backupRoot: string): TPromise<IBackupFilesModel>;
    add(resource: Uri, versionId?: number): void;
    has(resource: Uri, versionId?: number): boolean;
    get(): Uri[];
    remove(resource: Uri): void;
    clear(): void;
}
export declare class BackupFileService implements IBackupFileService {
    private environmentService;
    private fileService;
    private backupService;
    _serviceBrand: any;
    private static readonly META_MARKER;
    private backupWorkspacePath;
    private ready;
    constructor(windowId: number, environmentService: IEnvironmentService, fileService: IFileService, backupService: IBackupService);
    private readonly backupEnabled;
    private init(windowId);
    hasBackup(resource: Uri): TPromise<boolean>;
    loadBackupResource(resource: Uri): TPromise<Uri>;
    backupResource(resource: Uri, content: string, versionId?: number): TPromise<void>;
    discardResourceBackup(resource: Uri): TPromise<void>;
    discardAllWorkspaceBackups(): TPromise<void>;
    getWorkspaceFileBackups(): TPromise<Uri[]>;
    parseBackupContent(rawText: IRawTextContent): string;
    protected getBackupResource(resource: Uri): Uri;
    private hashPath(resource);
}
