/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var platform = require("vs/base/common/platform");
var backup_1 = require("vs/workbench/services/backup/common/backup");
var configuration_1 = require("vs/platform/configuration/common/configuration");
var lifecycle_1 = require("vs/base/common/lifecycle");
var untitledEditorService_1 = require("vs/workbench/services/untitled/common/untitledEditorService");
var winjs_base_1 = require("vs/base/common/winjs.base");
var environment_1 = require("vs/platform/environment/common/environment");
var windows_1 = require("vs/platform/windows/common/windows");
var lifecycle_2 = require("vs/platform/lifecycle/common/lifecycle");
var BackupModelService = (function () {
    function BackupModelService(backupFileService, configurationService, untitledEditorService, environmentService, windowsService) {
        this.backupFileService = backupFileService;
        this.configurationService = configurationService;
        this.untitledEditorService = untitledEditorService;
        this.environmentService = environmentService;
        this.windowsService = windowsService;
        this.toDispose = [];
        this.registerListeners();
    }
    BackupModelService.prototype.registerListeners = function () {
        var _this = this;
        this.toDispose.push(this.configurationService.onDidUpdateConfiguration(function (e) { return _this.onConfigurationChange(e.config); }));
    };
    BackupModelService.prototype.onConfigurationChange = function (configuration) {
        this.configuredHotExit = configuration && configuration.files && configuration.files.hotExit;
    };
    /**
     * Performs an immedate backup of all dirty file and untitled models.
     */
    BackupModelService.prototype.backupAll = function (dirtyToBackup, textFileEditorModelManager) {
        // split up between files and untitled
        var filesToBackup = [];
        var untitledToBackup = [];
        dirtyToBackup.forEach(function (s) {
            if (s.scheme === 'file') {
                filesToBackup.push(textFileEditorModelManager.get(s));
            }
            else if (s.scheme === 'untitled') {
                untitledToBackup.push(s);
            }
        });
        return this.doBackupAll(filesToBackup, untitledToBackup);
    };
    BackupModelService.prototype.doBackupAll = function (dirtyFileModels, untitledResources) {
        var _this = this;
        // Handle file resources first
        return winjs_base_1.TPromise.join(dirtyFileModels.map(function (model) {
            return _this.backupFileService.backupResource(model.getResource(), model.getValue(), model.getVersionId());
        })).then(function (results) {
            // Handle untitled resources
            var untitledModelPromises = untitledResources.map(function (untitledResource) { return _this.untitledEditorService.get(untitledResource); })
                .filter(function (untitled) { return !!untitled; })
                .map(function (untitled) { return untitled.resolve(); });
            return winjs_base_1.TPromise.join(untitledModelPromises).then(function (untitledModels) {
                var untitledBackupPromises = untitledModels.map(function (model) {
                    return _this.backupFileService.backupResource(model.getResource(), model.getValue(), model.getVersionId());
                });
                return winjs_base_1.TPromise.join(untitledBackupPromises).then(function () { return void 0; });
            });
        });
    };
    Object.defineProperty(BackupModelService.prototype, "isHotExitEnabled", {
        get: function () {
            return !this.environmentService.isExtensionDevelopment && this.configuredHotExit;
        },
        enumerable: true,
        configurable: true
    });
    BackupModelService.prototype.backupBeforeShutdown = function (dirtyToBackup, textFileEditorModelManager, reason) {
        var _this = this;
        return this.windowsService.getWindowCount().then(function (windowCount) {
            // When quit is requested skip the confirm callback and attempt to backup all workspaces.
            // When quit is not requested the confirm callback should be shown when the window being
            // closed is the only VS Code window open, except for on Mac where hot exit is only
            // ever activated when quit is requested.
            var doBackup;
            switch (reason) {
                case lifecycle_2.ShutdownReason.CLOSE:
                    if (windowCount > 1 || platform.isMacintosh) {
                        doBackup = false; // do not backup if a window is closed that does not cause quitting of the application
                    }
                    else {
                        doBackup = true; // backup if last window is closed on win/linux where the application quits right after
                    }
                    break;
                case lifecycle_2.ShutdownReason.QUIT:
                    doBackup = true; // backup because next start we restore all backups
                    break;
                case lifecycle_2.ShutdownReason.RELOAD:
                    doBackup = true; // backup because after window reload, backups restore
                    break;
                case lifecycle_2.ShutdownReason.LOAD:
                    doBackup = false; // do not backup because we are switching contexts
                    break;
            }
            if (!doBackup) {
                return winjs_base_1.TPromise.as({ didBackup: false });
            }
            // Backup
            return _this.backupAll(dirtyToBackup, textFileEditorModelManager).then(function () { return { didBackup: true }; }); // we did backup
        });
    };
    BackupModelService.prototype.cleanupBackupsBeforeShutdown = function () {
        if (this.environmentService.isExtensionDevelopment) {
            return winjs_base_1.TPromise.as(void 0);
        }
        return this.backupFileService.discardAllWorkspaceBackups();
    };
    BackupModelService.prototype.dispose = function () {
        this.toDispose = lifecycle_1.dispose(this.toDispose);
    };
    return BackupModelService;
}());
BackupModelService = __decorate([
    __param(0, backup_1.IBackupFileService),
    __param(1, configuration_1.IConfigurationService),
    __param(2, untitledEditorService_1.IUntitledEditorService),
    __param(3, environment_1.IEnvironmentService),
    __param(4, windows_1.IWindowsService)
], BackupModelService);
exports.BackupModelService = BackupModelService;
