/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var strings = require("vs/base/common/strings");
var ipcRemoteCom_1 = require("vs/platform/extensions/common/ipcRemoteCom");
var abstractThreadService_1 = require("vs/workbench/services/thread/common/abstractThreadService");
var environment_1 = require("vs/platform/environment/common/environment");
// Enable to see detailed message communication between window and extension host
var logExtensionHostCommunication = false;
var MainThreadService = (function (_super) {
    __extends(MainThreadService, _super);
    function MainThreadService(extensionHostMessagingProtocol, environmentService) {
        var _this = _super.call(this, true) || this;
        var logCommunication = logExtensionHostCommunication || environmentService.logExtensionHostCommunication;
        // Message: Window --> Extension Host
        _this.remoteCom = ipcRemoteCom_1.create(function (msg) {
            if (logCommunication) {
                console.log('%c[Window \u2192 Extension]%c[len: ' + strings.pad(msg.length, 5, ' ') + ']', 'color: darkgreen', 'color: grey', msg);
            }
            extensionHostMessagingProtocol.send(msg);
        });
        // Message: Extension Host --> Window
        extensionHostMessagingProtocol.onMessage(function (msg) {
            if (logCommunication) {
                console.log('%c[Extension \u2192 Window]%c[len: ' + strings.pad(msg.length, 5, ' ') + ']', 'color: darkgreen', 'color: grey', msg);
            }
            _this.remoteCom.handle(msg);
        });
        _this.remoteCom.setManyHandler(_this);
        return _this;
    }
    MainThreadService.prototype._callOnRemote = function (proxyId, path, args) {
        return this.remoteCom.callOnRemote(proxyId, path, args);
    };
    return MainThreadService;
}(abstractThreadService_1.AbstractThreadService));
MainThreadService = __decorate([
    __param(1, environment_1.IEnvironmentService)
], MainThreadService);
exports.MainThreadService = MainThreadService;
