/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var instantiation_1 = require("vs/platform/instantiation/common/instantiation");
exports.IConfigurationEditingService = instantiation_1.createDecorator('configurationEditingService');
var ConfigurationEditingErrorCode;
(function (ConfigurationEditingErrorCode) {
    /**
     * Error when trying to write a configuration key that is not registered.
     */
    ConfigurationEditingErrorCode[ConfigurationEditingErrorCode["ERROR_UNKNOWN_KEY"] = 0] = "ERROR_UNKNOWN_KEY";
    /**
     * Error when trying to write to user target but not supported for provided key.
     */
    ConfigurationEditingErrorCode[ConfigurationEditingErrorCode["ERROR_INVALID_TARGET"] = 1] = "ERROR_INVALID_TARGET";
    /**
     * Error when trying to write to the workspace configuration without having a workspace opened.
     */
    ConfigurationEditingErrorCode[ConfigurationEditingErrorCode["ERROR_NO_WORKSPACE_OPENED"] = 2] = "ERROR_NO_WORKSPACE_OPENED";
    /**
     * Error when trying to write to the configuration file while it is dirty in the editor.
     */
    ConfigurationEditingErrorCode[ConfigurationEditingErrorCode["ERROR_CONFIGURATION_FILE_DIRTY"] = 3] = "ERROR_CONFIGURATION_FILE_DIRTY";
    /**
     * Error when trying to write to a configuration file that contains JSON errors.
     */
    ConfigurationEditingErrorCode[ConfigurationEditingErrorCode["ERROR_INVALID_CONFIGURATION"] = 4] = "ERROR_INVALID_CONFIGURATION";
})(ConfigurationEditingErrorCode = exports.ConfigurationEditingErrorCode || (exports.ConfigurationEditingErrorCode = {}));
var ConfigurationTarget;
(function (ConfigurationTarget) {
    /**
     * Targets the user configuration file for writing.
     */
    ConfigurationTarget[ConfigurationTarget["USER"] = 0] = "USER";
    /**
     * Targets the workspace configuration file for writing. This only works if a workspace is opened.
     */
    ConfigurationTarget[ConfigurationTarget["WORKSPACE"] = 1] = "WORKSPACE";
})(ConfigurationTarget = exports.ConfigurationTarget || (exports.ConfigurationTarget = {}));
