/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var objects = require('vs/base/common/objects');
var types = require('vs/base/common/types');
var json = require('vs/base/common/json');
var model = require('vs/platform/configuration/common/model');
var configuration_1 = require('vs/workbench/services/configuration/common/configuration');
function newConfigFile(value) {
    try {
        var root = Object.create(null);
        var contents = json.parse(value) || {};
        for (var key in contents) {
            model.setNode(root, key, contents[key]);
        }
        return {
            contents: root
        };
    }
    catch (e) {
        return {
            contents: {},
            parseError: e
        };
    }
}
exports.newConfigFile = newConfigFile;
function merge(base, add, overwrite) {
    Object.keys(add).forEach(function (key) {
        if (key in base) {
            if (types.isObject(base[key]) && types.isObject(add[key])) {
                merge(base[key], add[key], overwrite);
            }
            else if (overwrite) {
                base[key] = add[key];
            }
        }
        else {
            base[key] = add[key];
        }
    });
}
exports.merge = merge;
function consolidate(configMap) {
    var finalConfig = Object.create(null);
    var parseErrors = [];
    var regexp = /\/(team\.)?([^\.]*)*\.json/;
    // We want to use the default settings file as base and let all other config
    // files overwrite the base one
    var configurationFiles = Object.keys(configMap);
    var defaultIndex = configurationFiles.indexOf(configuration_1.WORKSPACE_CONFIG_DEFAULT_PATH);
    if (defaultIndex > 0) {
        configurationFiles.unshift(configurationFiles.splice(defaultIndex, 1)[0]);
    }
    // For each config file in .vscode folder
    configurationFiles.forEach(function (configFileName) {
        var config = objects.clone(configMap[configFileName]);
        var matches = regexp.exec(configFileName);
        if (!matches || !config) {
            return;
        }
        // If a file is team.foo.json, it indicates team settings, strip this away
        var isTeamSetting = !!matches[1];
        // Extract the config key from the file name (except for settings.json which is the default)
        var configElement = finalConfig;
        if (matches && matches[2] && matches[2] !== configuration_1.CONFIG_DEFAULT_NAME) {
            // Use the name of the file as top level config section for all settings inside
            var configSection = matches[2];
            var element = configElement[configSection];
            if (!element) {
                element = Object.create(null);
                configElement[configSection] = element;
            }
            configElement = element;
        }
        merge(configElement, config.contents, !isTeamSetting /* user settings overrule team settings */);
        if (config.parseError) {
            parseErrors.push(configFileName);
        }
    });
    return {
        contents: finalConfig,
        parseErrors: parseErrors
    };
}
exports.consolidate = consolidate;
