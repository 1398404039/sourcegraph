import { TPromise } from 'vs/base/common/winjs.base';
import { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';
import { IEnvironmentService } from 'vs/platform/environment/common/environment';
import { IEventService } from 'vs/platform/event/common/event';
import { IDisposable } from 'vs/base/common/lifecycle';
import { IConfigurationServiceEvent } from 'vs/platform/configuration/common/configuration';
import { IWorkspaceConfigurationService, IWorkspaceConfigurationValue } from 'vs/workbench/services/configuration/common/configuration';
import { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';
import Event from 'vs/base/common/event';
/**
 * Wraps around the basic configuration service and adds knowledge about workspace settings.
 */
export declare class WorkspaceConfigurationService implements IWorkspaceConfigurationService, IDisposable {
    private contextService;
    private eventService;
    private workspaceSettingsRootFolder;
    _serviceBrand: any;
    private static RELOAD_CONFIGURATION_DELAY;
    private _onDidUpdateConfiguration;
    private toDispose;
    private baseConfigurationService;
    private cachedConfig;
    private cachedWorkspaceConfig;
    private bulkFetchFromWorkspacePromise;
    private workspaceFilePathToConfiguration;
    private reloadConfigurationScheduler;
    constructor(contextService: IWorkspaceContextService, eventService: IEventService, environmentService: IEnvironmentService, workspaceSettingsRootFolder?: string);
    readonly onDidUpdateConfiguration: Event<IConfigurationServiceEvent>;
    private registerListeners();
    private onBaseConfigurationChanged();
    initialize(): TPromise<void>;
    getConfiguration<T>(section?: string): T;
    lookup<C>(key: string): IWorkspaceConfigurationValue<C>;
    reloadConfiguration(section?: string): TPromise<any>;
    private doLoadConfiguration(section?);
    hasWorkspaceConfiguration(): boolean;
    dispose(): void;
    private loadWorkspaceConfigFiles();
    private handleWorkspaceFileEvents(event);
    telemetryService: ITelemetryService;
}
