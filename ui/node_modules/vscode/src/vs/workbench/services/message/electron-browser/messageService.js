/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var windowService_1 = require('vs/workbench/services/window/electron-browser/windowService');
var nls = require('vs/nls');
var product_1 = require('vs/platform/product');
var messageService_1 = require('vs/workbench/services/message/browser/messageService');
var platform_1 = require('vs/base/common/platform');
var telemetry_1 = require('vs/platform/telemetry/common/telemetry');
var MessageService = (function (_super) {
    __extends(MessageService, _super);
    function MessageService(container, windowService, telemetryService) {
        _super.call(this, container, telemetryService);
        this.windowService = windowService;
    }
    MessageService.prototype.confirm = function (confirmation) {
        if (!confirmation.primaryButton) {
            confirmation.primaryButton = nls.localize({ key: 'yesButton', comment: ['&& denotes a mnemonic'] }, "&&Yes");
        }
        if (!confirmation.secondaryButton) {
            confirmation.secondaryButton = nls.localize('cancelButton', "Cancel");
        }
        var opts = {
            title: confirmation.title || product_1.default.nameLong,
            message: confirmation.message,
            buttons: [
                platform_1.isLinux ? this.mnemonicLabel(confirmation.secondaryButton) : this.mnemonicLabel(confirmation.primaryButton),
                platform_1.isLinux ? this.mnemonicLabel(confirmation.primaryButton) : this.mnemonicLabel(confirmation.secondaryButton)
            ],
            noLink: true,
            cancelId: 1
        };
        // Linux: buttons are swapped
        if (platform_1.isLinux) {
            opts.defaultId = 1;
            opts.cancelId = 0;
        }
        if (confirmation.detail) {
            opts.detail = confirmation.detail;
        }
        if (confirmation.type) {
            opts.type = confirmation.type;
        }
        var result = this.windowService.getWindow().showMessageBox(opts);
        if (platform_1.isLinux) {
            return result === 1 ? true : false; // Linux: buttons are swapped
        }
        return result === 0 ? true : false;
    };
    MessageService.prototype.mnemonicLabel = function (label) {
        if (!platform_1.isWindows) {
            return label.replace(/\(&&\w\)|&&/g, ''); // no mnemonic support on mac/linux
        }
        return label.replace(/&&/g, '&');
    };
    MessageService = __decorate([
        __param(1, windowService_1.IWindowService),
        __param(2, telemetry_1.ITelemetryService)
    ], MessageService);
    return MessageService;
}(messageService_1.WorkbenchMessageService));
exports.MessageService = MessageService;
