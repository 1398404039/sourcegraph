/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var winjs = require("vs/base/common/winjs.base");
var errors = require("vs/base/common/errors");
var uri_1 = require("vs/base/common/uri");
var set_1 = require("vs/base/common/set");
var files_1 = require("vs/platform/files/common/files");
var product_1 = require("vs/platform/product");
var telemetry_1 = require("vs/platform/telemetry/common/telemetry");
var workspace_1 = require("vs/platform/workspace/common/workspace");
var SshProtocolMatcher = /^([^@:]+@)?([^:]+):/;
var SecondLevelDomainMatcher = /([^@:.]+\.[^@:.]+)(:\d+)?$/;
var RemoteMatcher = /^\s*url\s*=\s*(.+\S)\s*$/mg;
var WorkspaceStats = (function () {
    function WorkspaceStats(fileService, contextService, telemetryService) {
        this.fileService = fileService;
        this.contextService = contextService;
        this.telemetryService = telemetryService;
    }
    WorkspaceStats.prototype.searchArray = function (arr, regEx) {
        return arr.some(function (v) { return v.search(regEx) > -1; }) || undefined;
    };
    WorkspaceStats.prototype.getWorkspaceTags = function (workbenchOptions) {
        var _this = this;
        var tags = Object.create(null);
        var filesToOpen = workbenchOptions.filesToOpen, filesToCreate = workbenchOptions.filesToCreate, filesToDiff = workbenchOptions.filesToDiff;
        tags['workbench.filesToOpen'] = filesToOpen && filesToOpen.length || undefined;
        tags['workbench.filesToCreate'] = filesToCreate && filesToCreate.length || undefined;
        tags['workbench.filesToDiff'] = filesToDiff && filesToDiff.length || undefined;
        var workspace = this.contextService.getWorkspace();
        tags['workspace.empty'] = !workspace;
        var folder = workspace ? workspace.resource : product_1.default.quality !== 'stable' && this.findFolder(workbenchOptions);
        if (folder && this.fileService) {
            return this.fileService.resolveFile(folder).then(function (stats) {
                var names = (stats.children || []).map(function (c) { return c.name; });
                tags['workspace.language.cs'] = _this.searchArray(names, /^.+\.cs$/i);
                tags['workspace.language.js'] = _this.searchArray(names, /^.+\.js$/i);
                tags['workspace.language.ts'] = _this.searchArray(names, /^.+\.ts$/i);
                tags['workspace.language.php'] = _this.searchArray(names, /^.+\.php$/i);
                tags['workspace.language.python'] = _this.searchArray(names, /^.+\.py$/i);
                tags['workspace.language.vb'] = _this.searchArray(names, /^.+\.vb$/i);
                tags['workspace.language.aspx'] = _this.searchArray(names, /^.+\.aspx$/i);
                tags['workspace.grunt'] = _this.searchArray(names, /^gruntfile\.js$/i);
                tags['workspace.gulp'] = _this.searchArray(names, /^gulpfile\.js$/i);
                tags['workspace.jake'] = _this.searchArray(names, /^jakefile\.js$/i);
                tags['workspace.tsconfig'] = _this.searchArray(names, /^tsconfig\.json$/i);
                tags['workspace.jsconfig'] = _this.searchArray(names, /^jsconfig\.json$/i);
                tags['workspace.config.xml'] = _this.searchArray(names, /^config\.xml/i);
                tags['workspace.vsc.extension'] = _this.searchArray(names, /^vsc-extension-quickstart\.md/i);
                tags['workspace.ASP5'] = _this.searchArray(names, /^project\.json$/i) && tags['workspace.language.cs'];
                tags['workspace.sln'] = _this.searchArray(names, /^.+\.sln$|^.+\.csproj$/i);
                tags['workspace.unity'] = _this.searchArray(names, /^Assets$/i) && _this.searchArray(names, /^Library$/i) && _this.searchArray(names, /^ProjectSettings/i);
                tags['workspace.npm'] = _this.searchArray(names, /^package\.json$|^node_modules$/i);
                tags['workspace.bower'] = _this.searchArray(names, /^bower\.json$|^bower_components$/i);
                tags['workspace.yeoman.code'] = _this.searchArray(names, /^vscodequickstart\.md$/i);
                tags['workspace.yeoman.code.ext'] = _this.searchArray(names, /^vsc-extension-quickstart\.md$/i);
                var mainActivity = _this.searchArray(names, /^MainActivity\.cs$/i) || _this.searchArray(names, /^MainActivity\.fs$/i);
                var appDelegate = _this.searchArray(names, /^AppDelegate\.cs$/i) || _this.searchArray(names, /^AppDelegate\.fs$/i);
                var androidManifest = _this.searchArray(names, /^AndroidManifest\.xml$/i);
                var platforms = _this.searchArray(names, /^platforms$/i);
                var plugins = _this.searchArray(names, /^plugins$/i);
                var www = _this.searchArray(names, /^www$/i);
                var properties = _this.searchArray(names, /^Properties/i);
                var resources = _this.searchArray(names, /^Resources/i);
                var jni = _this.searchArray(names, /^JNI/i);
                if (tags['workspace.config.xml'] &&
                    !tags['workspace.language.cs'] && !tags['workspace.language.vb'] && !tags['workspace.language.aspx']) {
                    if (platforms && plugins && www) {
                        tags['workspace.cordova.high'] = true;
                    }
                    else {
                        tags['workspace.cordova.low'] = true;
                    }
                }
                if (mainActivity && properties && resources) {
                    tags['workspace.xamarin.android'] = true;
                }
                if (appDelegate && resources) {
                    tags['workspace.xamarin.ios'] = true;
                }
                if (androidManifest && jni) {
                    tags['workspace.android.cpp'] = true;
                }
                tags['workspace.reactNative'] = _this.searchArray(names, /^android$/i) && _this.searchArray(names, /^ios$/i) &&
                    _this.searchArray(names, /^index\.android\.js$/i) && _this.searchArray(names, /^index\.ios\.js$/i);
                return tags;
            }, function (error) { errors.onUnexpectedError(error); return null; });
        }
        else {
            return winjs.TPromise.as(tags);
        }
    };
    WorkspaceStats.prototype.findFolder = function (_a) {
        var filesToOpen = _a.filesToOpen, filesToCreate = _a.filesToCreate, filesToDiff = _a.filesToDiff;
        if (filesToOpen && filesToOpen.length) {
            return this.parentURI(filesToOpen[0].resource);
        }
        else if (filesToCreate && filesToCreate.length) {
            return this.parentURI(filesToCreate[0].resource);
        }
        else if (filesToDiff && filesToDiff.length) {
            return this.parentURI(filesToDiff[0].resource);
        }
    };
    WorkspaceStats.prototype.parentURI = function (uri) {
        var path = uri.path;
        var i = path.lastIndexOf('/');
        return i !== -1 ? uri.with({ path: path.substr(0, i) }) : undefined;
    };
    WorkspaceStats.prototype.reportWorkspaceTags = function (workbenchOptions) {
        var _this = this;
        this.getWorkspaceTags(workbenchOptions).then(function (tags) {
            _this.telemetryService.publicLog('workspce.tags', tags);
        }, function (error) { return errors.onUnexpectedError(error); });
    };
    WorkspaceStats.prototype.stripLowLevelDomains = function (domain) {
        var match = domain.match(SecondLevelDomainMatcher);
        return match ? match[1] : null;
    };
    WorkspaceStats.prototype.extractDomain = function (url) {
        if (url.indexOf('://') === -1) {
            var match = url.match(SshProtocolMatcher);
            if (match) {
                return this.stripLowLevelDomains(match[2]);
            }
        }
        try {
            var uri = uri_1.default.parse(url);
            if (uri.authority) {
                return this.stripLowLevelDomains(uri.authority);
            }
        }
        catch (e) {
        }
        return null;
    };
    /**
     * Public for testing.
     */
    WorkspaceStats.prototype.getDomainsOfRemotes = function (text) {
        var domains = new set_1.ArraySet(), match;
        while (match = RemoteMatcher.exec(text)) {
            var domain = this.extractDomain(match[1]);
            if (domain) {
                domains.set(domain);
            }
        }
        return domains.elements;
    };
    WorkspaceStats.prototype.reportRemotes = function (workspaceUri) {
        var _this = this;
        var uri = workspaceUri.with({ path: workspaceUri.path + "/.git/config" });
        this.fileService.resolveContent(uri, { acceptTextOnly: true }).then(function (content) {
            var domains = _this.getDomainsOfRemotes(content.value);
            _this.telemetryService.publicLog('workspace.remotes', { domains: domains });
        }, function (err) {
            // ignore missing or binary file
        }).then(null, errors.onUnexpectedError);
    };
    WorkspaceStats.prototype.reportAzureNode = function (workspaceUri, tags) {
        var _this = this;
        // TODO: should also work for `node_modules` folders several levels down
        var uri = workspaceUri.with({ path: workspaceUri.path + "/node_modules" });
        return this.fileService.resolveFile(uri).then(function (stats) {
            var names = (stats.children || []).map(function (c) { return c.name; });
            var referencesAzure = _this.searchArray(names, /azure/i);
            if (referencesAzure) {
                tags['node'] = true;
            }
            return tags;
        }, function (err) {
            return tags;
        });
    };
    WorkspaceStats.prototype.reportAzureJava = function (workspaceUri, tags) {
        var uri = workspaceUri.with({ path: workspaceUri.path + "/pom.xml" });
        return this.fileService.resolveContent(uri, { acceptTextOnly: true }).then(function (content) {
            var referencesAzure = content.value.match(/azure/i) !== null;
            if (referencesAzure) {
                tags['java'] = true;
            }
            return tags;
        }, function (err) {
            return tags;
        });
    };
    WorkspaceStats.prototype.reportAzure = function (uri) {
        var _this = this;
        var tags = Object.create(null);
        this.reportAzureNode(uri, tags).then(function (tags) {
            return _this.reportAzureJava(uri, tags);
        }).then(function (tags) {
            if (Object.keys(tags).length) {
                _this.telemetryService.publicLog('workspace.azure', tags);
            }
        }).then(null, errors.onUnexpectedError);
    };
    WorkspaceStats.prototype.reportCloudStats = function () {
        var workspace = this.contextService.getWorkspace();
        var uri = workspace ? workspace.resource : null;
        if (uri && this.fileService) {
            this.reportRemotes(uri);
            this.reportAzure(uri);
        }
    };
    return WorkspaceStats;
}());
WorkspaceStats = __decorate([
    __param(0, files_1.IFileService),
    __param(1, workspace_1.IWorkspaceContextService),
    __param(2, telemetry_1.ITelemetryService)
], WorkspaceStats);
exports.WorkspaceStats = WorkspaceStats;
