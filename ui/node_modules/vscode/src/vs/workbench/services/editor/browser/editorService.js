/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var winjs_base_1 = require('vs/base/common/winjs.base');
var uri_1 = require('vs/base/common/uri');
var network = require('vs/base/common/network');
var mime_1 = require('vs/base/common/mime');
var platform_1 = require('vs/platform/platform');
var paths_1 = require('vs/base/common/paths');
var types = require('vs/base/common/types');
var editorCommon_1 = require('vs/editor/common/editorCommon');
var editor_1 = require('vs/workbench/common/editor');
var resourceEditorInput_1 = require('vs/workbench/common/editor/resourceEditorInput');
var untitledEditorInput_1 = require('vs/workbench/common/editor/untitledEditorInput');
var diffEditorInput_1 = require('vs/workbench/common/editor/diffEditorInput');
var untitledEditorService_1 = require('vs/workbench/services/untitled/common/untitledEditorService');
var editorService_1 = require('vs/workbench/services/editor/common/editorService');
var instantiation_1 = require('vs/platform/instantiation/common/instantiation');
var WorkbenchEditorService = (function () {
    function WorkbenchEditorService(editorPart, untitledEditorService, instantiationService) {
        this.untitledEditorService = untitledEditorService;
        this.instantiationService = instantiationService;
        this.editorPart = editorPart;
        this.fileInputDescriptor = platform_1.Registry.as(editor_1.Extensions.Editors).getDefaultFileInput();
    }
    WorkbenchEditorService.prototype.getActiveEditor = function () {
        return this.editorPart.getActiveEditor();
    };
    WorkbenchEditorService.prototype.getActiveEditorInput = function () {
        return this.editorPart.getActiveEditorInput();
    };
    WorkbenchEditorService.prototype.getVisibleEditors = function () {
        return this.editorPart.getVisibleEditors();
    };
    WorkbenchEditorService.prototype.isVisible = function (input, includeDiff) {
        if (!input) {
            return false;
        }
        return this.getVisibleEditors().some(function (editor) {
            if (!editor.input) {
                return false;
            }
            if (input.matches(editor.input)) {
                return true;
            }
            if (includeDiff && editor.input instanceof diffEditorInput_1.DiffEditorInput) {
                var diffInput = editor.input;
                return input.matches(diffInput.modifiedInput) || input.matches(diffInput.originalInput);
            }
            return false;
        });
    };
    WorkbenchEditorService.prototype.openEditor = function (input, arg2, arg3) {
        var _this = this;
        if (!input) {
            return winjs_base_1.TPromise.as(null);
        }
        // Workbench Input Support
        if (input instanceof editor_1.EditorInput) {
            return this.doOpenEditor(input, this.toOptions(arg2), arg3);
        }
        // Support opening foreign resources (such as a http link that points outside of the workbench)
        var resourceInput = input;
        if (resourceInput.resource instanceof uri_1.default) {
            var schema = resourceInput.resource.scheme;
            if (schema === network.Schemas.http || schema === network.Schemas.https) {
                window.open(resourceInput.resource.toString(true));
                return winjs_base_1.TPromise.as(null);
            }
        }
        // Untyped Text Editor Support (required for code that uses this service below workbench level)
        var textInput = input;
        return this.createInput(textInput).then(function (typedInput) {
            if (typedInput) {
                return _this.doOpenEditor(typedInput, editor_1.TextEditorOptions.from(textInput), arg2);
            }
            return winjs_base_1.TPromise.as(null);
        });
    };
    WorkbenchEditorService.prototype.toOptions = function (arg1) {
        if (!arg1 || arg1 instanceof editor_1.EditorOptions) {
            return arg1;
        }
        var textOptions = arg1;
        if (!!textOptions.selection) {
            return editor_1.TextEditorOptions.create(arg1);
        }
        return editor_1.EditorOptions.create(arg1);
    };
    WorkbenchEditorService.prototype.doOpenEditor = function (input, options, arg3) {
        return this.editorPart.openEditor(input, options, arg3);
    };
    WorkbenchEditorService.prototype.openEditors = function (editors) {
        var _this = this;
        return winjs_base_1.TPromise.join(editors.map(function (editor) { return _this.createInput(editor.input); })).then(function (inputs) {
            var typedInputs = inputs.map(function (input, index) {
                var options = editors[index].input instanceof editor_1.EditorInput ? _this.toOptions(editors[index].options) : editor_1.TextEditorOptions.from(editors[index].input);
                return {
                    input: input,
                    options: options,
                    position: editors[index].position
                };
            });
            return _this.editorPart.openEditors(typedInputs);
        });
    };
    WorkbenchEditorService.prototype.replaceEditors = function (editors) {
        var _this = this;
        return winjs_base_1.TPromise.join(editors.map(function (editor) { return _this.createInput(editor.toReplace); })).then(function (toReplaceInputs) {
            return winjs_base_1.TPromise.join(editors.map(function (editor) { return _this.createInput(editor.replaceWith); })).then(function (replaceWithInputs) {
                var typedReplacements = editors.map(function (editor, index) {
                    var options = editor.toReplace instanceof editor_1.EditorInput ? _this.toOptions(editor.options) : editor_1.TextEditorOptions.from(editor.replaceWith);
                    return {
                        toReplace: toReplaceInputs[index],
                        replaceWith: replaceWithInputs[index],
                        options: options
                    };
                });
                return _this.editorPart.replaceEditors(typedReplacements);
            });
        });
    };
    WorkbenchEditorService.prototype.closeEditor = function (position, input) {
        return this.editorPart.closeEditor(position, input);
    };
    WorkbenchEditorService.prototype.closeEditors = function (position, except, direction) {
        return this.editorPart.closeEditors(position, except, direction);
    };
    WorkbenchEditorService.prototype.closeAllEditors = function (except) {
        return this.editorPart.closeAllEditors(except);
    };
    WorkbenchEditorService.prototype.resolveEditorModel = function (input, refresh) {
        return this.createInput(input).then(function (typedInput) {
            if (typedInput instanceof editor_1.EditorInput) {
                return typedInput.resolve(!!refresh);
            }
            return winjs_base_1.TPromise.as(null);
        });
    };
    WorkbenchEditorService.prototype.createInput = function (input) {
        // Workbench Input Support
        if (input instanceof editor_1.EditorInput) {
            return winjs_base_1.TPromise.as(input);
        }
        // Base Text Editor Support for inmemory resources
        var resourceInput = input;
        if (resourceInput.resource instanceof uri_1.default && resourceInput.resource.scheme === network.Schemas.inMemory) {
            // For in-memory resources we only support to resolve the input from the current active editor
            // because the workbench does not track editor models by in memory URL. This concept is only
            // being used in the code editor.
            var activeEditor = this.getActiveEditor();
            if (activeEditor) {
                var control = activeEditor.getControl();
                if (types.isFunction(control.getEditorType)) {
                    // Single Editor: If code editor model matches, return input from editor
                    if (control.getEditorType() === editorCommon_1.EditorType.ICodeEditor) {
                        var codeEditor = control;
                        var model = this.findModel(codeEditor, input);
                        if (model) {
                            return winjs_base_1.TPromise.as(activeEditor.input);
                        }
                    }
                    else if (control.getEditorType() === editorCommon_1.EditorType.IDiffEditor) {
                        var diffInput = activeEditor.input;
                        var diffCodeEditor = control;
                        var originalModel = this.findModel(diffCodeEditor.getOriginalEditor(), input);
                        if (originalModel) {
                            return winjs_base_1.TPromise.as(diffInput.originalInput);
                        }
                        var modifiedModel = this.findModel(diffCodeEditor.getModifiedEditor(), input);
                        if (modifiedModel) {
                            return winjs_base_1.TPromise.as(diffInput.modifiedInput);
                        }
                    }
                }
            }
        }
        else if (resourceInput.resource instanceof uri_1.default && (resourceInput.resource.scheme === untitledEditorInput_1.UntitledEditorInput.SCHEMA)) {
            return winjs_base_1.TPromise.as(this.untitledEditorService.createOrGet(resourceInput.resource));
        }
        else if (this.fileInputDescriptor && resourceInput.resource instanceof uri_1.default && resourceInput.resource.scheme === network.Schemas.file) {
            return this.createFileInput(resourceInput.resource, resourceInput.mime, resourceInput.encoding);
        }
        else if (resourceInput.resource instanceof uri_1.default) {
            return winjs_base_1.TPromise.as(this.instantiationService.createInstance(resourceEditorInput_1.ResourceEditorInput, paths_1.basename(resourceInput.resource.fsPath), paths_1.dirname(resourceInput.resource.fsPath), resourceInput.resource));
        }
        return winjs_base_1.TPromise.as(null);
    };
    WorkbenchEditorService.prototype.createFileInput = function (resource, mime, encoding) {
        return this.instantiationService.createInstance(this.fileInputDescriptor).then(function (typedFileInput) {
            typedFileInput.setResource(resource);
            typedFileInput.setMime(mime || mime_1.guessMimeTypes(resource.fsPath).join(', '));
            typedFileInput.setPreferredEncoding(encoding);
            return typedFileInput;
        });
    };
    WorkbenchEditorService.prototype.findModel = function (editor, input) {
        var model = editor.getModel();
        if (!model) {
            return null;
        }
        return model.uri.toString() === input.resource.toString() ? model : null;
    };
    WorkbenchEditorService = __decorate([
        __param(1, untitledEditorService_1.IUntitledEditorService),
        __param(2, instantiation_1.IInstantiationService)
    ], WorkbenchEditorService);
    return WorkbenchEditorService;
}());
exports.WorkbenchEditorService = WorkbenchEditorService;
/**
 * Subclass of workbench editor service that delegates all calls to the provided editor service. Subclasses can choose to override the behavior
 * of openEditor() by providing a handler. The handler returns a promise that resolves to an editor to indicate if an action has been taken.
 * If falsify is returned, the service will delegate to editor service for handling the call to openEditor().
 *
 * This gives clients a chance to override the behavior of openEditor() to match their context.
 */
var DelegatingWorkbenchEditorService = (function (_super) {
    __extends(DelegatingWorkbenchEditorService, _super);
    function DelegatingWorkbenchEditorService(handler, untitledEditorService, instantiationService, editorService) {
        _super.call(this, editorService, untitledEditorService, instantiationService);
        this.handler = handler;
    }
    DelegatingWorkbenchEditorService.prototype.doOpenEditor = function (input, options, arg3) {
        var _this = this;
        return this.handler(input, options, arg3).then(function (editor) {
            if (editor) {
                return winjs_base_1.TPromise.as(editor);
            }
            return _super.prototype.doOpenEditor.call(_this, input, options, arg3);
        });
    };
    DelegatingWorkbenchEditorService = __decorate([
        __param(1, untitledEditorService_1.IUntitledEditorService),
        __param(2, instantiation_1.IInstantiationService),
        __param(3, editorService_1.IWorkbenchEditorService)
    ], DelegatingWorkbenchEditorService);
    return DelegatingWorkbenchEditorService;
}(WorkbenchEditorService));
exports.DelegatingWorkbenchEditorService = DelegatingWorkbenchEditorService;
