import { IDisposable } from 'vs/base/common/lifecycle';
import URI from 'vs/base/common/uri';
import * as editorCommon from 'vs/editor/common/editorCommon';
import { IWorkbenchEditorService } from 'vs/workbench/services/editor/common/editorService';
import { IEditor } from 'vs/platform/editor/common/editor';
export interface IRangeHighlightDecoration {
    resource: URI;
    range: editorCommon.IRange;
}
export declare class RangeHighlightDecorations implements IDisposable {
    private editorService;
    private rangeHighlightDecorationId;
    private editor;
    private editorDisposables;
    constructor(editorService: IWorkbenchEditorService);
    removeHighlightRange(): void;
    highlightRange(range: IRangeHighlightDecoration, editor?: IEditor): void;
    private doHighlightRange(editor, selectionRange);
    private getEditor(resourceRange);
    private setEditor(editor);
    private disposeEditorListeners();
    private doRemoveRangeHighlight(model, rangeHighlightDecorationId);
    private createRangeHighlightDecoration();
    dispose(): void;
}
