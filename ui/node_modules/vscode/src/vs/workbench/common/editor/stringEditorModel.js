/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var winjs_base_1 = require('vs/base/common/winjs.base');
var textEditorModel_1 = require('vs/workbench/common/editor/textEditorModel');
var position_1 = require('vs/editor/common/core/position');
var range_1 = require('vs/editor/common/core/range');
var modeService_1 = require('vs/editor/common/services/modeService');
var modelService_1 = require('vs/editor/common/services/modelService');
var editOperation_1 = require('vs/editor/common/core/editOperation');
/**
 * An editor model whith an in-memory, readonly content that is not backed by any particular resource.
 */
var StringEditorModel = (function (_super) {
    __extends(StringEditorModel, _super);
    function StringEditorModel(value, modeId, resource, modeService, modelService) {
        _super.call(this, modelService, modeService);
        this.value = value;
        this.modeId = modeId;
        this.resource = resource;
    }
    /**
     * The value of this string editor model.
     */
    StringEditorModel.prototype.getValue = function () {
        return this.value;
    };
    /**
     * Sets the value of this string editor model.
     */
    StringEditorModel.prototype.setValue = function (value) {
        this.value = value;
        if (this.textEditorModel) {
            this.textEditorModel.setValue(value);
        }
    };
    /**
     * Appends value to this string editor model.
     */
    StringEditorModel.prototype.append = function (value) {
        this.value += value;
        if (this.textEditorModel) {
            var model = this.textEditorModel;
            var lastLine = model.getLineCount();
            var lastLineMaxColumn = model.getLineMaxColumn(lastLine);
            model.applyEdits([editOperation_1.EditOperation.insert(new position_1.Position(lastLine, lastLineMaxColumn), value)]);
        }
    };
    /**
     * Clears the value of this string editor model
     */
    StringEditorModel.prototype.clearValue = function () {
        this.value = '';
        if (this.textEditorModel) {
            var model = this.textEditorModel;
            var lastLine = model.getLineCount();
            model.applyEdits([editOperation_1.EditOperation.delete(new range_1.Range(1, 1, lastLine, model.getLineMaxColumn(lastLine)))]);
        }
    };
    /**
     * Removes all lines from the top if the line number exceeds the given line count. Returns the new value if lines got trimmed.
     */
    StringEditorModel.prototype.trim = function (linecount) {
        if (this.textEditorModel) {
            var model = this.textEditorModel;
            var lastLine = model.getLineCount();
            if (lastLine > linecount) {
                model.applyEdits([editOperation_1.EditOperation.delete(new range_1.Range(1, 1, lastLine - linecount + 1, 1))]);
                var newValue = model.getValue();
                this.value = newValue;
                return this.value;
            }
        }
        return null;
    };
    StringEditorModel.prototype.load = function () {
        // Create text editor model if not yet done
        if (!this.textEditorModel) {
            return this.createTextEditorModel(this.value, this.resource, this.modeId);
        }
        else {
            this.updateTextEditorModel(this.value);
        }
        return winjs_base_1.TPromise.as(this);
    };
    StringEditorModel = __decorate([
        __param(3, modeService_1.IModeService),
        __param(4, modelService_1.IModelService)
    ], StringEditorModel);
    return StringEditorModel;
}(textEditorModel_1.BaseTextEditorModel));
exports.StringEditorModel = StringEditorModel;
