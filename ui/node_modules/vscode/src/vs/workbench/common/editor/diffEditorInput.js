/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var nls = require('vs/nls');
var winjs_base_1 = require('vs/base/common/winjs.base');
var event_1 = require('vs/base/common/event');
var labels_1 = require('vs/base/common/labels');
var editor_1 = require('vs/workbench/common/editor');
var textEditorModel_1 = require('vs/workbench/common/editor/textEditorModel');
var diffEditorModel_1 = require('vs/workbench/common/editor/diffEditorModel');
var textDiffEditorModel_1 = require('vs/workbench/common/editor/textDiffEditorModel');
var lifecycle_1 = require('vs/base/common/lifecycle');
/**
 * The base editor input for the diff editor. It is made up of two editor inputs, the original version
 * and the modified version.
 */
var DiffEditorInput = (function (_super) {
    __extends(DiffEditorInput, _super);
    function DiffEditorInput(name, description, originalInput, modifiedInput, forceOpenAsBinary) {
        _super.call(this, originalInput, modifiedInput);
        this.name = name;
        this.description = description;
        this.forceOpenAsBinary = forceOpenAsBinary;
        this._toUnbind = [];
        this.registerListeners();
    }
    DiffEditorInput.prototype.registerListeners = function () {
        var _this = this;
        // When the original or modified input gets disposed, dispose this diff editor input
        var onceOriginalDisposed = event_1.once(this.originalInput.onDispose);
        this._toUnbind.push(onceOriginalDisposed(function () {
            if (!_this.isDisposed()) {
                _this.dispose();
            }
        }));
        var onceModifiedDisposed = event_1.once(this.modifiedInput.onDispose);
        this._toUnbind.push(onceModifiedDisposed(function () {
            if (!_this.isDisposed()) {
                _this.dispose();
            }
        }));
        // Reemit some events from the modified side to the outside
        this._toUnbind.push(this.modifiedInput.onDidChangeDirty(function () { return _this._onDidChangeDirty.fire(); }));
        this._toUnbind.push(this.modifiedInput.onDidChangeLabel(function () { return _this._onDidChangeLabel.fire(); }));
    };
    Object.defineProperty(DiffEditorInput.prototype, "toUnbind", {
        get: function () {
            return this._toUnbind;
        },
        enumerable: true,
        configurable: true
    });
    DiffEditorInput.prototype.getTypeId = function () {
        return DiffEditorInput.ID;
    };
    DiffEditorInput.prototype.getName = function () {
        return this.name;
    };
    DiffEditorInput.prototype.getDescription = function () {
        return this.description;
    };
    DiffEditorInput.prototype.resolve = function (refresh) {
        var _this = this;
        var modelPromise;
        // Use Cached Model
        if (this.cachedModel && !refresh) {
            modelPromise = winjs_base_1.TPromise.as(this.cachedModel);
        }
        else {
            modelPromise = this.createModel(refresh);
        }
        return modelPromise.then(function (resolvedModel) {
            if (_this.cachedModel) {
                _this.cachedModel.dispose();
            }
            _this.cachedModel = resolvedModel;
            return _this.cachedModel;
        });
    };
    DiffEditorInput.prototype.getPreferredEditorId = function (candidates) {
        return this.forceOpenAsBinary ? editor_1.BINARY_DIFF_EDITOR_ID : editor_1.TEXT_DIFF_EDITOR_ID;
    };
    DiffEditorInput.prototype.createModel = function (refresh) {
        // Join resolve call over two inputs and build diff editor model
        return winjs_base_1.TPromise.join([
            this.originalInput.resolve(refresh),
            this.modifiedInput.resolve(refresh)
        ]).then(function (models) {
            var originalEditorModel = models[0];
            var modifiedEditorModel = models[1];
            // If both are text models, return textdiffeditor model
            if (modifiedEditorModel instanceof textEditorModel_1.BaseTextEditorModel && originalEditorModel instanceof textEditorModel_1.BaseTextEditorModel) {
                return new textDiffEditorModel_1.TextDiffEditorModel(originalEditorModel, modifiedEditorModel);
            }
            // Otherwise return normal diff model
            return new diffEditorModel_1.DiffEditorModel(originalEditorModel, modifiedEditorModel);
        });
    };
    DiffEditorInput.prototype.supportsSplitEditor = function () {
        return false;
    };
    DiffEditorInput.prototype.matches = function (otherInput) {
        if (_super.prototype.matches.call(this, otherInput) === true) {
            return true;
        }
        if (otherInput) {
            if (!(otherInput instanceof DiffEditorInput)) {
                return false;
            }
            var otherDiffInput = otherInput;
            return this.originalInput.matches(otherDiffInput.originalInput) && this.modifiedInput.matches(otherDiffInput.modifiedInput);
        }
        return false;
    };
    DiffEditorInput.prototype.dispose = function () {
        this._toUnbind = lifecycle_1.dispose(this._toUnbind);
        // Free the diff editor model but do not propagate the dispose() call to the two inputs
        // We never created the two inputs (original and modified) so we can not dispose
        // them without sideeffects.
        if (this.cachedModel) {
            this.cachedModel.dispose();
            this.cachedModel = null;
        }
        _super.prototype.dispose.call(this);
    };
    DiffEditorInput.ID = 'workbench.editors.diffEditorInput';
    return DiffEditorInput;
}(editor_1.BaseDiffEditorInput));
exports.DiffEditorInput = DiffEditorInput;
function toDiffLabel(res1, res2, context) {
    var leftName = labels_1.getPathLabel(res1.fsPath, context);
    var rightName = labels_1.getPathLabel(res2.fsPath, context);
    return nls.localize('compareLabels', "{0} â†” {1}", leftName, rightName);
}
exports.toDiffLabel = toDiffLabel;
