/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var stringEditorModel_1 = require('vs/workbench/common/editor/stringEditorModel');
var modesRegistry_1 = require('vs/editor/common/modes/modesRegistry');
var editorCommon_1 = require('vs/editor/common/editorCommon');
var configuration_1 = require('vs/platform/configuration/common/configuration');
var modeService_1 = require('vs/editor/common/services/modeService');
var modelService_1 = require('vs/editor/common/services/modelService');
var event_1 = require('vs/base/common/event');
var UntitledEditorModel = (function (_super) {
    __extends(UntitledEditorModel, _super);
    function UntitledEditorModel(value, modeId, resource, hasAssociatedFilePath, modeService, modelService, configurationService) {
        _super.call(this, value, modeId, resource, modeService, modelService);
        this.configurationService = configurationService;
        this.hasAssociatedFilePath = hasAssociatedFilePath;
        this.dirty = hasAssociatedFilePath; // untitled associated to file path are dirty right away
        this._onDidChangeDirty = new event_1.Emitter();
        this._onDidChangeEncoding = new event_1.Emitter();
        this.registerListeners();
    }
    Object.defineProperty(UntitledEditorModel.prototype, "onDidChangeDirty", {
        get: function () {
            return this._onDidChangeDirty.event;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UntitledEditorModel.prototype, "onDidChangeEncoding", {
        get: function () {
            return this._onDidChangeEncoding.event;
        },
        enumerable: true,
        configurable: true
    });
    UntitledEditorModel.prototype.getOrCreateMode = function (modeService, modeId, firstLineText) {
        if (!modeId || modeId === modesRegistry_1.PLAINTEXT_MODE_ID) {
            return modeService.getOrCreateModeByFilenameOrFirstLine(this.resource.fsPath, firstLineText); // lookup mode via resource path if the provided modeId is unspecific
        }
        return _super.prototype.getOrCreateMode.call(this, modeService, modeId, firstLineText);
    };
    UntitledEditorModel.prototype.registerListeners = function () {
        var _this = this;
        // Config Changes
        this.configurationChangeListener = this.configurationService.onDidUpdateConfiguration(function (e) { return _this.onConfigurationChange(e.config); });
    };
    UntitledEditorModel.prototype.onConfigurationChange = function (configuration) {
        this.configuredEncoding = configuration && configuration.files && configuration.files.encoding;
    };
    UntitledEditorModel.prototype.getValue = function () {
        if (this.textEditorModel) {
            return this.textEditorModel.getValue(editorCommon_1.EndOfLinePreference.TextDefined, true /* Preserve BOM */);
        }
        return null;
    };
    UntitledEditorModel.prototype.getModeId = function () {
        if (this.textEditorModel) {
            return this.textEditorModel.getModeId();
        }
        return null;
    };
    UntitledEditorModel.prototype.getEncoding = function () {
        return this.preferredEncoding || this.configuredEncoding;
    };
    UntitledEditorModel.prototype.setEncoding = function (encoding) {
        var oldEncoding = this.getEncoding();
        this.preferredEncoding = encoding;
        // Emit if it changed
        if (oldEncoding !== this.preferredEncoding) {
            this._onDidChangeEncoding.fire();
        }
    };
    UntitledEditorModel.prototype.isDirty = function () {
        return this.dirty;
    };
    UntitledEditorModel.prototype.revert = function () {
        this.dirty = false;
        this._onDidChangeDirty.fire();
    };
    UntitledEditorModel.prototype.load = function () {
        var _this = this;
        return _super.prototype.load.call(this).then(function (model) {
            var configuration = _this.configurationService.getConfiguration();
            // Encoding
            _this.configuredEncoding = configuration && configuration.files && configuration.files.encoding;
            // Listen to content changes
            _this.textModelChangeListener = _this.textEditorModel.onDidChangeContent(function (e) { return _this.onModelContentChanged(); });
            // Emit initial dirty event if we are
            if (_this.dirty) {
                setTimeout(function () {
                    _this._onDidChangeDirty.fire();
                }, 0 /* prevent race condition between creating model and emitting dirty event */);
            }
            return model;
        });
    };
    UntitledEditorModel.prototype.onModelContentChanged = function () {
        // mark the untitled editor as non-dirty once its content becomes empty and we do
        // not have an associated path set. we never want dirty indicator in that case.
        if (!this.hasAssociatedFilePath && this.textEditorModel.getLineCount() === 1 && this.textEditorModel.getLineContent(1) === '') {
            if (this.dirty) {
                this.dirty = false;
                this._onDidChangeDirty.fire();
            }
        }
        else if (!this.dirty) {
            this.dirty = true;
            this._onDidChangeDirty.fire();
        }
    };
    UntitledEditorModel.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        if (this.textModelChangeListener) {
            this.textModelChangeListener.dispose();
            this.textModelChangeListener = null;
        }
        if (this.configurationChangeListener) {
            this.configurationChangeListener.dispose();
            this.configurationChangeListener = null;
        }
        this._onDidChangeDirty.dispose();
        this._onDidChangeEncoding.dispose();
    };
    UntitledEditorModel = __decorate([
        __param(4, modeService_1.IModeService),
        __param(5, modelService_1.IModelService),
        __param(6, configuration_1.IConfigurationService)
    ], UntitledEditorModel);
    return UntitledEditorModel;
}(stringEditorModel_1.StringEditorModel));
exports.UntitledEditorModel = UntitledEditorModel;
