/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var editor_1 = require('vs/workbench/common/editor');
var files_1 = require('vs/platform/files/common/files');
/**
 * An editor model that just represents a resource and mime for a resource that can be loaded.
 */
var BinaryEditorModel = (function (_super) {
    __extends(BinaryEditorModel, _super);
    function BinaryEditorModel(resource, name, fileService) {
        _super.call(this);
        this.fileService = fileService;
        this.name = name;
        this.resource = resource;
    }
    /**
     * The name of the binary resource.
     */
    BinaryEditorModel.prototype.getName = function () {
        return this.name;
    };
    /**
     * The resource of the binary resource.
     */
    BinaryEditorModel.prototype.getResource = function () {
        return this.resource;
    };
    /**
     * The size of the binary file if known.
     */
    BinaryEditorModel.prototype.getSize = function () {
        return this.size;
    };
    /**
     * The etag of the binary file if known.
     */
    BinaryEditorModel.prototype.getETag = function () {
        return this.etag;
    };
    BinaryEditorModel.prototype.load = function () {
        var _this = this;
        return this.fileService.resolveFile(this.resource).then(function (stat) {
            _this.etag = stat.etag;
            _this.size = stat.size;
            return _this;
        });
    };
    BinaryEditorModel = __decorate([
        __param(2, files_1.IFileService)
    ], BinaryEditorModel);
    return BinaryEditorModel;
}(editor_1.EditorModel));
exports.BinaryEditorModel = BinaryEditorModel;
