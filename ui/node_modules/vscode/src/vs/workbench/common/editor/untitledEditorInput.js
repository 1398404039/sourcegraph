/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var winjs_base_1 = require('vs/base/common/winjs.base');
var mime_1 = require('vs/base/common/mime');
var labels = require('vs/base/common/labels');
var paths = require('vs/base/common/paths');
var editor_1 = require('vs/workbench/common/editor');
var untitledEditorModel_1 = require('vs/workbench/common/editor/untitledEditorModel');
var instantiation_1 = require('vs/platform/instantiation/common/instantiation');
var workspace_1 = require('vs/platform/workspace/common/workspace');
var modeService_1 = require('vs/editor/common/services/modeService');
var lifecycle_1 = require('vs/base/common/lifecycle');
var event_1 = require('vs/base/common/event');
var files_1 = require('vs/workbench/parts/files/common/files'); // TODO@Ben layer breaker
/**
 * An editor input to be used for untitled text buffers.
 */
var UntitledEditorInput = (function (_super) {
    __extends(UntitledEditorInput, _super);
    function UntitledEditorInput(resource, hasAssociatedFilePath, modeId, instantiationService, contextService, modeService, textFileService) {
        _super.call(this);
        this.instantiationService = instantiationService;
        this.contextService = contextService;
        this.modeService = modeService;
        this.textFileService = textFileService;
        this.resource = resource;
        this.hasAssociatedFilePath = hasAssociatedFilePath;
        this.modeId = modeId;
        this.toUnbind = [];
        this._onDidModelChangeEncoding = new event_1.Emitter();
    }
    Object.defineProperty(UntitledEditorInput.prototype, "onDidModelChangeEncoding", {
        get: function () {
            return this._onDidModelChangeEncoding.event;
        },
        enumerable: true,
        configurable: true
    });
    UntitledEditorInput.prototype.getTypeId = function () {
        return UntitledEditorInput.ID;
    };
    UntitledEditorInput.prototype.getResource = function () {
        return this.resource;
    };
    UntitledEditorInput.prototype.getName = function () {
        return this.hasAssociatedFilePath ? paths.basename(this.resource.fsPath) : this.resource.fsPath;
    };
    UntitledEditorInput.prototype.getDescription = function () {
        return this.hasAssociatedFilePath ? labels.getPathLabel(paths.dirname(this.resource.fsPath), this.contextService) : null;
    };
    UntitledEditorInput.prototype.isDirty = function () {
        return this.cachedModel && this.cachedModel.isDirty();
    };
    UntitledEditorInput.prototype.confirmSave = function () {
        return this.textFileService.confirmSave([this.resource]);
    };
    UntitledEditorInput.prototype.save = function () {
        return this.textFileService.save(this.resource);
    };
    UntitledEditorInput.prototype.revert = function () {
        if (this.cachedModel) {
            this.cachedModel.revert();
        }
        this.dispose(); // a reverted untitled editor is no longer valid, so we dispose it
        return winjs_base_1.TPromise.as(true);
    };
    UntitledEditorInput.prototype.suggestFileName = function () {
        if (!this.hasAssociatedFilePath) {
            var mime = this.getMime();
            if (mime && mime !== mime_1.MIME_TEXT /* do not suggest when the mime type is simple plain text */) {
                return mime_1.suggestFilename(mime, this.getName());
            }
        }
        return this.getName();
    };
    UntitledEditorInput.prototype.getMime = function () {
        if (this.cachedModel) {
            return this.modeService.getMimeForMode(this.cachedModel.getModeId());
        }
        return null;
    };
    UntitledEditorInput.prototype.getEncoding = function () {
        if (this.cachedModel) {
            return this.cachedModel.getEncoding();
        }
        return null;
    };
    UntitledEditorInput.prototype.setEncoding = function (encoding, mode /* ignored, we only have Encode */) {
        if (this.cachedModel) {
            this.cachedModel.setEncoding(encoding);
        }
    };
    UntitledEditorInput.prototype.resolve = function (refresh) {
        var _this = this;
        // Use Cached Model
        if (this.cachedModel) {
            return winjs_base_1.TPromise.as(this.cachedModel);
        }
        // Otherwise Create Model and load
        var model = this.createModel();
        return model.load().then(function (resolvedModel) {
            _this.cachedModel = resolvedModel;
            return _this.cachedModel;
        });
    };
    UntitledEditorInput.prototype.createModel = function () {
        var _this = this;
        var content = '';
        var mime = this.modeId;
        if (!mime && this.hasAssociatedFilePath) {
            var mimeFromPath = mime_1.guessMimeTypes(this.resource.fsPath)[0];
            if (!mime_1.isUnspecific(mimeFromPath)) {
                mime = mimeFromPath; // take most specific mime type if file path is associated and mime is specific
            }
        }
        var model = this.instantiationService.createInstance(untitledEditorModel_1.UntitledEditorModel, content, mime || mime_1.MIME_TEXT, this.resource, this.hasAssociatedFilePath);
        // re-emit some events from the model
        this.toUnbind.push(model.onDidChangeDirty(function () { return _this._onDidChangeDirty.fire(); }));
        this.toUnbind.push(model.onDidChangeEncoding(function () { return _this._onDidModelChangeEncoding.fire(); }));
        return model;
    };
    UntitledEditorInput.prototype.matches = function (otherInput) {
        if (_super.prototype.matches.call(this, otherInput) === true) {
            return true;
        }
        if (otherInput instanceof UntitledEditorInput) {
            var otherUntitledEditorInput = otherInput;
            // Otherwise compare by properties
            return otherUntitledEditorInput.resource.toString() === this.resource.toString();
        }
        return false;
    };
    UntitledEditorInput.prototype.dispose = function () {
        this._onDidModelChangeEncoding.dispose();
        // Listeners
        lifecycle_1.dispose(this.toUnbind);
        // Model
        if (this.cachedModel) {
            this.cachedModel.dispose();
            this.cachedModel = null;
        }
        _super.prototype.dispose.call(this);
    };
    UntitledEditorInput.ID = 'workbench.editors.untitledEditorInput';
    UntitledEditorInput.SCHEMA = 'untitled';
    UntitledEditorInput = __decorate([
        __param(3, instantiation_1.IInstantiationService),
        __param(4, workspace_1.IWorkspaceContextService),
        __param(5, modeService_1.IModeService),
        __param(6, files_1.ITextFileService)
    ], UntitledEditorInput);
    return UntitledEditorInput;
}(editor_1.UntitledEditorInput));
exports.UntitledEditorInput = UntitledEditorInput;
