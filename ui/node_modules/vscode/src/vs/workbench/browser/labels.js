/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var paths = require('vs/base/common/paths');
var iconLabel_1 = require('vs/base/browser/ui/iconLabel/iconLabel');
var extensions_1 = require('vs/platform/extensions/common/extensions');
var modeService_1 = require('vs/editor/common/services/modeService');
var editor_1 = require('vs/workbench/common/editor');
var labels_1 = require('vs/base/common/labels');
var modesRegistry_1 = require('vs/editor/common/modes/modesRegistry');
var workspace_1 = require('vs/platform/workspace/common/workspace');
var configuration_1 = require('vs/platform/configuration/common/configuration');
var lifecycle_1 = require('vs/base/common/lifecycle');
var modelService_1 = require('vs/editor/common/services/modelService');
var ResourceLabel = (function (_super) {
    __extends(ResourceLabel, _super);
    function ResourceLabel(container, options, extensionService, contextService, configurationService, modeService, modelService) {
        _super.call(this, container, options);
        this.extensionService = extensionService;
        this.contextService = contextService;
        this.configurationService = configurationService;
        this.modeService = modeService;
        this.modelService = modelService;
        this.toDispose = [];
        this.registerListeners();
    }
    ResourceLabel.prototype.registerListeners = function () {
        var _this = this;
        this.extensionService.onReady().then(function () { return _this.render(); }); // update when extensions are loaded with potentially new languages
        this.toDispose.push(this.configurationService.onDidUpdateConfiguration(function () { return _this.render(); })); // update when file.associations change
    };
    ResourceLabel.prototype.setLabel = function (label, options) {
        this.label = label;
        this.options = options;
        this.render();
    };
    ResourceLabel.prototype.clear = function () {
        this.label = void 0;
        this.options = void 0;
        this.setValue();
    };
    ResourceLabel.prototype.render = function () {
        if (!this.label) {
            return;
        }
        var resource = this.label.resource;
        var title = '';
        if (this.options && this.options.title) {
            title = this.options.title;
        }
        else if (resource) {
            title = labels_1.getPathLabel(resource.fsPath);
        }
        var extraClasses = getIconClasses(this.modelService, this.modeService, resource, this.options && this.options.isFolder);
        if (this.options && this.options.extraClasses) {
            extraClasses.push.apply(extraClasses, this.options.extraClasses);
        }
        var italic = this.options && this.options.italic;
        var matches = this.options && this.options.matches;
        this.setValue(this.label.name, this.label.description, { title: title, extraClasses: extraClasses, italic: italic, matches: matches });
    };
    ResourceLabel.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.toDispose = lifecycle_1.dispose(this.toDispose);
        this.label = void 0;
        this.options = void 0;
    };
    ResourceLabel = __decorate([
        __param(2, extensions_1.IExtensionService),
        __param(3, workspace_1.IWorkspaceContextService),
        __param(4, configuration_1.IConfigurationService),
        __param(5, modeService_1.IModeService),
        __param(6, modelService_1.IModelService)
    ], ResourceLabel);
    return ResourceLabel;
}(iconLabel_1.IconLabel));
exports.ResourceLabel = ResourceLabel;
var EditorLabel = (function (_super) {
    __extends(EditorLabel, _super);
    function EditorLabel() {
        _super.apply(this, arguments);
    }
    EditorLabel.prototype.setEditor = function (editor, options) {
        this.setLabel({
            resource: editor_1.getResource(editor),
            name: editor.getName(),
            description: editor.getDescription()
        }, options);
    };
    return EditorLabel;
}(ResourceLabel));
exports.EditorLabel = EditorLabel;
var FileLabel = (function (_super) {
    __extends(FileLabel, _super);
    function FileLabel() {
        _super.apply(this, arguments);
    }
    FileLabel.prototype.setFile = function (resource, options) {
        if (options === void 0) { options = Object.create(null); }
        this.setLabel({
            resource: resource,
            name: !options.hideLabel ? paths.basename(resource.fsPath) : void 0,
            description: !options.hidePath ? labels_1.getPathLabel(paths.dirname(resource.fsPath), this.contextService) : void 0
        }, options);
    };
    return FileLabel;
}(ResourceLabel));
exports.FileLabel = FileLabel;
function getIconClasses(modelService, modeService, resource, isFolder) {
    var path;
    var configuredLangId;
    if (resource) {
        path = resource.fsPath;
        var model = modelService.getModel(resource);
        if (model) {
            var modeId = model.getModeId();
            if (modeId && modeId !== modesRegistry_1.PLAINTEXT_MODE_ID) {
                configuredLangId = modeId; // only take if the mode is specific (aka no just plain text)
            }
        }
    }
    // we always set these base classes even if we do not have a path
    var classes = isFolder ? ['folder-icon'] : ['file-icon'];
    if (path) {
        var basename = paths.basename(path);
        var dotSegments = basename.split('.');
        // Folders
        if (isFolder) {
            if (basename) {
                classes.push(basename.toLowerCase() + "-name-folder-icon");
            }
        }
        else {
            // Name
            var name_1 = dotSegments[0]; // file.txt => "file", .dockerfile => "", file.some.txt => "file"
            if (name_1) {
                classes.push(cssEscape(name_1.toLowerCase()) + "-name-file-icon");
            }
            // Extension(s)
            var extensions = dotSegments.splice(1);
            if (extensions.length > 0) {
                for (var i = 0; i < extensions.length; i++) {
                    classes.push(cssEscape(extensions.slice(i).join('.').toLowerCase()) + "-ext-file-icon"); // add each combination of all found extensions if more than one
                }
            }
            // Configured Language
            configuredLangId = configuredLangId || modeService.getModeIdByFilenameOrFirstLine(path);
            if (configuredLangId) {
                classes.push(cssEscape(configuredLangId) + "-lang-file-icon");
            }
        }
    }
    return classes;
}
exports.getIconClasses = getIconClasses;
function cssEscape(val) {
    return val.replace(/\s/g, '\\$&'); // make sure to not introduce CSS classes from files that contain whitespace
}
