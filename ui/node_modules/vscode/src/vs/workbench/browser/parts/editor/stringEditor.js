/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var winjs_base_1 = require("vs/base/common/winjs.base");
var nls = require("vs/nls");
var types = require("vs/base/common/types");
var textEditorModel_1 = require("vs/workbench/common/editor/textEditorModel");
var untitledEditorInput_1 = require("vs/workbench/common/editor/untitledEditorInput");
var textEditor_1 = require("vs/workbench/browser/parts/editor/textEditor");
var telemetry_1 = require("vs/platform/telemetry/common/telemetry");
var workspace_1 = require("vs/platform/workspace/common/workspace");
var storage_1 = require("vs/platform/storage/common/storage");
var configuration_1 = require("vs/platform/configuration/common/configuration");
var event_1 = require("vs/platform/event/common/event");
var instantiation_1 = require("vs/platform/instantiation/common/instantiation");
var message_1 = require("vs/platform/message/common/message");
var editorService_1 = require("vs/workbench/services/editor/common/editorService");
var themeService_1 = require("vs/workbench/services/themes/common/themeService");
var untitledEditorService_1 = require("vs/workbench/services/untitled/common/untitledEditorService");
/**
 * An editor implementation that is capable of showing string inputs or promise inputs that resolve to a string.
 * Uses the TextEditor widget to show the contents.
 */
var StringEditor = (function (_super) {
    __extends(StringEditor, _super);
    function StringEditor(telemetryService, instantiationService, contextService, storageService, messageService, configurationService, eventService, editorService, themeService, untitledEditorService) {
        var _this = _super.call(this, StringEditor.ID, telemetryService, instantiationService, contextService, storageService, messageService, configurationService, eventService, editorService, themeService) || this;
        _this.untitledEditorService = untitledEditorService;
        _this.mapResourceToEditorViewState = Object.create(null);
        _this.toUnbind.push(_this.untitledEditorService.onDidChangeDirty(function (e) { return _this.onUntitledDirtyChange(e); }));
        return _this;
    }
    StringEditor.prototype.onUntitledDirtyChange = function (resource) {
        if (!this.untitledEditorService.isDirty(resource)) {
            delete this.mapResourceToEditorViewState[resource.toString()]; // untitled file got reverted, so remove view state
        }
    };
    StringEditor.prototype.getTitle = function () {
        if (this.input) {
            return this.input.getName();
        }
        return nls.localize('textEditor', "Text Editor");
    };
    StringEditor.prototype.setInput = function (input, options) {
        var _this = this;
        var oldInput = this.getInput();
        _super.prototype.setInput.call(this, input, options);
        // Detect options
        var forceOpen = options && options.forceOpen;
        // Same Input
        if (!forceOpen && input.matches(oldInput)) {
            // TextOptions (avoiding instanceof here for a reason, do not change!)
            var textOptions = options;
            if (textOptions && types.isFunction(textOptions.apply)) {
                textOptions.apply(this.getControl());
            }
            return winjs_base_1.TPromise.as(null);
        }
        // Remember view settings if input changes
        if (oldInput instanceof untitledEditorInput_1.UntitledEditorInput) {
            this.mapResourceToEditorViewState[oldInput.getResource().toString()] = this.getControl().saveViewState();
        }
        // Different Input (Reload)
        return input.resolve(true).then(function (resolvedModel) {
            // Assert Model instance
            if (!(resolvedModel instanceof textEditorModel_1.BaseTextEditorModel)) {
                return winjs_base_1.TPromise.wrapError('Invalid editor input. String editor requires a model instance of BaseTextEditorModel.');
            }
            // Assert that the current input is still the one we expect. This prevents a race condition when loading takes long and another input was set meanwhile
            if (!_this.getInput() || _this.getInput() !== input) {
                return null;
            }
            // Set Editor Model
            var textEditor = _this.getControl();
            var textEditorModel = resolvedModel.textEditorModel;
            textEditor.setModel(textEditorModel);
            // Apply Options from TextOptions
            var optionsGotApplied = false;
            var textOptions = options;
            if (textOptions && types.isFunction(textOptions.apply)) {
                optionsGotApplied = textOptions.apply(textEditor);
            }
            // Otherwise restore View State
            if (!optionsGotApplied) {
                _this.restoreViewState(input);
            }
            // Apply options again because input has changed
            textEditor.updateOptions(_this.getCodeEditorOptions());
        });
    };
    StringEditor.prototype.restoreViewState = function (input) {
        if (input instanceof untitledEditorInput_1.UntitledEditorInput) {
            var viewState = this.mapResourceToEditorViewState[input.getResource().toString()];
            if (viewState) {
                this.getControl().restoreViewState(viewState);
            }
        }
    };
    StringEditor.prototype.getCodeEditorOptions = function () {
        var options = _super.prototype.getCodeEditorOptions.call(this);
        var input = this.getInput();
        var isUntitled = input instanceof untitledEditorInput_1.UntitledEditorInput;
        var isReadonly = !isUntitled; // all string editors are readonly except for the untitled one
        options.readOnly = isReadonly;
        var ariaLabel;
        var inputName = input && input.getName();
        if (isReadonly) {
            ariaLabel = inputName ? nls.localize('readonlyEditorWithInputAriaLabel', "{0}. Readonly text editor.", inputName) : nls.localize('readonlyEditorAriaLabel', "Readonly text editor.");
        }
        else {
            ariaLabel = inputName ? nls.localize('untitledFileEditorWithInputAriaLabel', "{0}. Untitled file text editor.", inputName) : nls.localize('untitledFileEditorAriaLabel', "Untitled file text editor.");
        }
        options.ariaLabel = ariaLabel;
        return options;
    };
    /**
     * Reveals the last line of this editor if it has a model set.
     * If smart reveal is true will only reveal the last line if the line before last is visible #3351
     */
    StringEditor.prototype.revealLastLine = function (smartReveal) {
        if (smartReveal === void 0) { smartReveal = false; }
        var codeEditor = this.getControl();
        var model = codeEditor.getModel();
        var lineBeforeLastRevealed = codeEditor.getScrollTop() + codeEditor.getLayoutInfo().height >= codeEditor.getScrollHeight();
        if (model && (!smartReveal || lineBeforeLastRevealed)) {
            var lastLine = model.getLineCount();
            codeEditor.revealLine(lastLine);
        }
    };
    StringEditor.prototype.clearInput = function () {
        // Keep editor view state in settings to restore when coming back
        if (this.input instanceof untitledEditorInput_1.UntitledEditorInput) {
            this.mapResourceToEditorViewState[this.input.getResource().toString()] = this.getControl().saveViewState();
        }
        // Clear Model
        this.getControl().setModel(null);
        _super.prototype.clearInput.call(this);
    };
    return StringEditor;
}(textEditor_1.BaseTextEditor));
StringEditor.ID = 'workbench.editors.stringEditor';
StringEditor = __decorate([
    __param(0, telemetry_1.ITelemetryService),
    __param(1, instantiation_1.IInstantiationService),
    __param(2, workspace_1.IWorkspaceContextService),
    __param(3, storage_1.IStorageService),
    __param(4, message_1.IMessageService),
    __param(5, configuration_1.IConfigurationService),
    __param(6, event_1.IEventService),
    __param(7, editorService_1.IWorkbenchEditorService),
    __param(8, themeService_1.IThemeService),
    __param(9, untitledEditorService_1.IUntitledEditorService)
], StringEditor);
exports.StringEditor = StringEditor;
