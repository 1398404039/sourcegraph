/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
require('./media/activitybarpart.css');
var nls = require('vs/nls');
var winjs_base_1 = require('vs/base/common/winjs.base');
var builder_1 = require('vs/base/browser/builder');
var errors = require('vs/base/common/errors');
var actionbar_1 = require('vs/base/browser/ui/actionbar/actionbar');
var platform_1 = require('vs/platform/platform');
var viewlet_1 = require('vs/workbench/browser/viewlet');
var part_1 = require('vs/workbench/browser/part');
var activityAction_1 = require('vs/workbench/browser/parts/activitybar/activityAction');
var viewletService_1 = require('vs/workbench/services/viewlet/common/viewletService');
var partService_1 = require('vs/workbench/services/part/common/partService');
var instantiation_1 = require('vs/platform/instantiation/common/instantiation');
var keybinding_1 = require('vs/platform/keybinding/common/keybinding');
var ActivitybarPart = (function (_super) {
    __extends(ActivitybarPart, _super);
    function ActivitybarPart(id, viewletService, keybindingService, instantiationService, partService) {
        _super.call(this, id);
        this.viewletService = viewletService;
        this.keybindingService = keybindingService;
        this.instantiationService = instantiationService;
        this.partService = partService;
        this.activityActionItems = {};
        this.compositeIdToActions = {};
        this.registerListeners();
    }
    ActivitybarPart.prototype.registerListeners = function () {
        var _this = this;
        // Activate viewlet action on opening of a viewlet
        this.toUnbind.push(this.viewletService.onDidViewletOpen(function (viewlet) { return _this.onActiveCompositeChanged(viewlet); }));
        // Deactivate viewlet action on close
        this.toUnbind.push(this.viewletService.onDidViewletClose(function (viewlet) { return _this.onCompositeClosed(viewlet); }));
    };
    ActivitybarPart.prototype.onActiveCompositeChanged = function (composite) {
        if (this.compositeIdToActions[composite.getId()]) {
            this.compositeIdToActions[composite.getId()].activate();
        }
    };
    ActivitybarPart.prototype.onCompositeClosed = function (composite) {
        if (this.compositeIdToActions[composite.getId()]) {
            this.compositeIdToActions[composite.getId()].deactivate();
        }
    };
    ActivitybarPart.prototype.showActivity = function (compositeId, badge, clazz) {
        var action = this.compositeIdToActions[compositeId];
        if (action) {
            action.setBadge(badge);
            if (clazz) {
                action.class = clazz;
            }
        }
    };
    ActivitybarPart.prototype.clearActivity = function (compositeId) {
        this.showActivity(compositeId, null);
    };
    ActivitybarPart.prototype.createContentArea = function (parent) {
        var $el = builder_1.$(parent);
        var $result = builder_1.$('.content').appendTo($el);
        // Top Actionbar with action items for each viewlet action
        this.createViewletSwitcher($result.clone());
        return $result;
    };
    ActivitybarPart.prototype.createViewletSwitcher = function (div) {
        var _this = this;
        // Composite switcher is on top
        this.viewletSwitcherBar = new actionbar_1.ActionBar(div, {
            actionItemProvider: function (action) { return _this.activityActionItems[action.id]; },
            orientation: actionbar_1.ActionsOrientation.VERTICAL,
            ariaLabel: nls.localize('activityBarAriaLabel', "Active View Switcher")
        });
        this.viewletSwitcherBar.getContainer().addClass('position-top');
        // Build Viewlet Actions in correct order
        var allViewlets = platform_1.Registry.as(viewlet_1.Extensions.Viewlets).getViewlets();
        var viewletActions = allViewlets.sort(function (v1, v2) { return v1.order - v2.order; }).map(function (viewlet) { return _this.toAction(viewlet); });
        this.viewletSwitcherBar.push(viewletActions, { label: true, icon: true });
    };
    ActivitybarPart.prototype.toAction = function (composite) {
        var activeViewlet = this.viewletService.getActiveViewlet();
        var action = this.instantiationService.createInstance(ViewletActivityAction, composite.id + '.activity-bar-action', composite);
        this.activityActionItems[action.id] = new activityAction_1.ActivityActionItem(action, composite.name, this.getKeybindingLabel(composite.id));
        this.compositeIdToActions[composite.id] = action;
        // Mark active viewlet as active
        if (activeViewlet && activeViewlet.getId() === composite.id) {
            action.activate();
        }
        return action;
    };
    ;
    ActivitybarPart.prototype.getKeybindingLabel = function (id) {
        var _this = this;
        var keys = this.keybindingService.lookupKeybindings(id).map(function (k) { return _this.keybindingService.getLabelFor(k); });
        if (keys && keys.length) {
            return keys[0];
        }
        return null;
    };
    ActivitybarPart.prototype.dispose = function () {
        if (this.viewletSwitcherBar) {
            this.viewletSwitcherBar.dispose();
            this.viewletSwitcherBar = null;
        }
        _super.prototype.dispose.call(this);
    };
    ActivitybarPart = __decorate([
        __param(1, viewletService_1.IViewletService),
        __param(2, keybinding_1.IKeybindingService),
        __param(3, instantiation_1.IInstantiationService),
        __param(4, partService_1.IPartService)
    ], ActivitybarPart);
    return ActivitybarPart;
}(part_1.Part));
exports.ActivitybarPart = ActivitybarPart;
var ViewletActivityAction = (function (_super) {
    __extends(ViewletActivityAction, _super);
    function ViewletActivityAction(id, viewlet, viewletService, partService) {
        _super.call(this, id, viewlet.name, viewlet.cssClass);
        this.viewlet = viewlet;
        this.viewletService = viewletService;
        this.partService = partService;
        this.lastRun = 0;
    }
    ViewletActivityAction.prototype.run = function () {
        // prevent accident trigger on a doubleclick (to help nervous people)
        var now = Date.now();
        if (now - this.lastRun < ViewletActivityAction.preventDoubleClickDelay) {
            return winjs_base_1.TPromise.as(true);
        }
        this.lastRun = now;
        var sideBarHidden = this.partService.isSideBarHidden();
        var activeViewlet = this.viewletService.getActiveViewlet();
        // Hide sidebar if selected viewlet already visible
        if (!sideBarHidden && activeViewlet && activeViewlet.getId() === this.viewlet.id) {
            this.partService.setSideBarHidden(true);
        }
        else {
            this.viewletService.openViewlet(this.viewlet.id, true).done(null, errors.onUnexpectedError);
            this.activate();
        }
        return winjs_base_1.TPromise.as(true);
    };
    ViewletActivityAction.preventDoubleClickDelay = 300;
    ViewletActivityAction = __decorate([
        __param(2, viewletService_1.IViewletService),
        __param(3, partService_1.IPartService)
    ], ViewletActivityAction);
    return ViewletActivityAction;
}(activityAction_1.ActivityAction));
