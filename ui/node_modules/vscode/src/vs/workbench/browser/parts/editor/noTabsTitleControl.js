/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
require('./media/notabstitle.css');
var errors = require('vs/base/common/errors');
var editor_1 = require('vs/workbench/common/editor');
var DOM = require('vs/base/browser/dom');
var titleControl_1 = require('vs/workbench/browser/parts/editor/titleControl');
var labels_1 = require('vs/workbench/browser/labels');
var NoTabsTitleControl = (function (_super) {
    __extends(NoTabsTitleControl, _super);
    function NoTabsTitleControl() {
        _super.apply(this, arguments);
    }
    NoTabsTitleControl.prototype.setContext = function (group) {
        _super.prototype.setContext.call(this, group);
        this.editorActionsToolbar.context = { group: group };
    };
    NoTabsTitleControl.prototype.create = function (parent) {
        var _this = this;
        _super.prototype.create.call(this, parent);
        this.titleContainer = parent;
        // Pin on double click
        this.toDispose.push(DOM.addDisposableListener(this.titleContainer, DOM.EventType.DBLCLICK, function (e) { return _this.onTitleDoubleClick(e); }));
        // Detect mouse click
        this.toDispose.push(DOM.addDisposableListener(this.titleContainer, DOM.EventType.MOUSE_UP, function (e) { return _this.onTitleClick(e); }));
        // Editor Label
        this.editorLabel = this.instantiationService.createInstance(labels_1.EditorLabel, this.titleContainer, void 0);
        this.toDispose.push(this.editorLabel);
        this.toDispose.push(DOM.addDisposableListener(this.editorLabel.labelElement, DOM.EventType.CLICK, function (e) { return _this.onTitleLabelClick(e); }));
        this.toDispose.push(DOM.addDisposableListener(this.editorLabel.descriptionElement, DOM.EventType.CLICK, function (e) { return _this.onTitleLabelClick(e); }));
        // Right Actions Container
        var actionsContainer = document.createElement('div');
        DOM.addClass(actionsContainer, 'title-actions');
        this.titleContainer.appendChild(actionsContainer);
        // Editor actions toolbar
        this.createEditorActionsToolBar(actionsContainer);
        // Context Menu
        this.toDispose.push(DOM.addDisposableListener(this.titleContainer, DOM.EventType.CONTEXT_MENU, function (e) { return _this.onContextMenu({ group: _this.context, editor: _this.context.activeEditor }, e, _this.titleContainer); }));
    };
    NoTabsTitleControl.prototype.onTitleLabelClick = function (e) {
        DOM.EventHelper.stop(e, false);
        if (!this.dragged) {
            this.quickOpenService.show();
        }
    };
    NoTabsTitleControl.prototype.onTitleDoubleClick = function (e) {
        DOM.EventHelper.stop(e);
        if (!this.context) {
            return;
        }
        var group = this.context;
        this.editorGroupService.pinEditor(group, group.activeEditor);
    };
    NoTabsTitleControl.prototype.onTitleClick = function (e) {
        DOM.EventHelper.stop(e, false);
        if (!this.context) {
            return;
        }
        var group = this.context;
        var position = this.stacks.positionOfGroup(group);
        // Close editor on middle mouse click
        if (e.button === 1 /* Middle Button */) {
            this.editorService.closeEditor(position, group.activeEditor).done(null, errors.onUnexpectedError);
        }
        else if (this.stacks.groups.length === 1 && !DOM.isAncestor(e.target || e.srcElement, this.editorActionsToolbar.getContainer().getHTMLElement())) {
            this.editorGroupService.focusGroup(group);
        }
    };
    NoTabsTitleControl.prototype.doRefresh = function () {
        var group = this.context;
        var editor = group && group.activeEditor;
        if (!editor) {
            this.editorLabel.clear();
            this.clearEditorActionsToolbar();
            return; // return early if we are being closed
        }
        var isPinned = group.isPinned(group.activeEditor);
        var isActive = this.stacks.isActive(group);
        // Activity state
        if (isActive) {
            DOM.addClass(this.titleContainer, 'active');
        }
        else {
            DOM.removeClass(this.titleContainer, 'active');
        }
        // Dirty state
        if (editor.isDirty()) {
            DOM.addClass(this.titleContainer, 'dirty');
        }
        else {
            DOM.removeClass(this.titleContainer, 'dirty');
        }
        // Editor Label
        var resource = editor_1.getResource(editor);
        var name = editor.getName() || '';
        var description = isActive ? (editor.getDescription() || '') : '';
        var verboseDescription = editor.getDescription(true) || '';
        if (description === verboseDescription) {
            verboseDescription = ''; // dont repeat what is already shown
        }
        this.editorLabel.setLabel({ name: name, description: description, resource: resource }, { title: verboseDescription, italic: !isPinned, extraClasses: ['title-label'] });
        // Update Editor Actions Toolbar
        this.updateEditorActionsToolbar();
    };
    return NoTabsTitleControl;
}(titleControl_1.TitleControl));
exports.NoTabsTitleControl = NoTabsTitleControl;
