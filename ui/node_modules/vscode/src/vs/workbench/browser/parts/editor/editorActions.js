/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var winjs_base_1 = require('vs/base/common/winjs.base');
var nls = require('vs/nls');
var actions_1 = require('vs/base/common/actions');
var editor_1 = require('vs/workbench/common/editor');
var quickOpenModel_1 = require('vs/base/parts/quickopen/browser/quickOpenModel');
var quickopen_1 = require('vs/workbench/browser/quickopen');
var editorService_1 = require('vs/workbench/services/editor/common/editorService');
var quickOpenService_1 = require('vs/workbench/services/quickopen/common/quickOpenService');
var partService_1 = require('vs/workbench/services/part/common/partService');
var editor_2 = require('vs/platform/editor/common/editor');
var instantiation_1 = require('vs/platform/instantiation/common/instantiation');
var history_1 = require('vs/workbench/services/history/common/history');
var keybinding_1 = require('vs/platform/keybinding/common/keybinding');
var groupService_1 = require('vs/workbench/services/group/common/groupService');
var textEditor_1 = require('vs/workbench/browser/parts/editor/textEditor');
var commands_1 = require('vs/platform/commands/common/commands');
var SplitEditorAction = (function (_super) {
    __extends(SplitEditorAction, _super);
    function SplitEditorAction(id, label, editorService, editorGroupService) {
        _super.call(this, id, label, 'split-editor-action');
        this.editorService = editorService;
        this.editorGroupService = editorGroupService;
    }
    SplitEditorAction.prototype.run = function (context) {
        var _this = this;
        var editorToSplit;
        if (context) {
            editorToSplit = this.editorService.getVisibleEditors()[this.editorGroupService.getStacksModel().positionOfGroup(context.group)];
        }
        else {
            editorToSplit = this.editorService.getActiveEditor();
        }
        // Can only split with target editor
        if (!editorToSplit) {
            return winjs_base_1.TPromise.as(true);
        }
        // Return if the editor to split does not support split editing
        if (editorToSplit.input instanceof editor_1.EditorInput && !editorToSplit.input.supportsSplitEditor()) {
            return winjs_base_1.TPromise.as(true);
        }
        // Options
        var options;
        if (editorToSplit instanceof textEditor_1.BaseTextEditor) {
            options = new editor_1.TextEditorOptions();
            options.fromEditor(editorToSplit.getControl());
        }
        else {
            options = new editor_1.EditorOptions();
        }
        options.pinned = true;
        // Count editors
        var visibleEditors = this.editorService.getVisibleEditors();
        var editorCount = visibleEditors.length;
        var targetPosition;
        switch (editorCount) {
            // Open split editor to the right of left one
            case 1:
                targetPosition = editor_2.Position.CENTER;
                break;
            // Special case two editors opened
            case 2:
                // Continue splitting to the right
                if (editorToSplit.position === editor_2.Position.CENTER) {
                    targetPosition = editor_2.Position.RIGHT;
                }
                else if (editorToSplit.position === editor_2.Position.LEFT) {
                    options.preserveFocus = true;
                    return this.editorService.openEditor(editorToSplit.input, options, editor_2.Position.RIGHT).then(function () {
                        _this.editorGroupService.moveGroup(editor_2.Position.RIGHT, editor_2.Position.CENTER);
                        _this.editorGroupService.focusGroup(editor_2.Position.CENTER);
                    });
                }
        }
        // Only split if we have a target position to split to
        if (typeof targetPosition === 'number') {
            return this.editorService.openEditor(editorToSplit.input, options, targetPosition);
        }
        return winjs_base_1.TPromise.as(true);
    };
    SplitEditorAction.ID = 'workbench.action.splitEditor';
    SplitEditorAction.LABEL = nls.localize('splitEditor', "Split Editor");
    SplitEditorAction = __decorate([
        __param(2, editorService_1.IWorkbenchEditorService),
        __param(3, groupService_1.IEditorGroupService)
    ], SplitEditorAction);
    return SplitEditorAction;
}(actions_1.Action));
exports.SplitEditorAction = SplitEditorAction;
var NavigateBetweenGroupsAction = (function (_super) {
    __extends(NavigateBetweenGroupsAction, _super);
    function NavigateBetweenGroupsAction(id, label, editorService, editorGroupService) {
        _super.call(this, id, label);
        this.editorService = editorService;
        this.editorGroupService = editorGroupService;
    }
    NavigateBetweenGroupsAction.prototype.run = function () {
        // Can cycle split with active editor
        var activeEditor = this.editorService.getActiveEditor();
        if (!activeEditor) {
            return winjs_base_1.TPromise.as(false);
        }
        // Cycle to the left and use module to start at 0 again
        var visibleEditors = this.editorService.getVisibleEditors();
        var editorCount = visibleEditors.length;
        var newIndex = (activeEditor.position + 1) % editorCount;
        this.editorGroupService.focusGroup(newIndex);
        return winjs_base_1.TPromise.as(true);
    };
    NavigateBetweenGroupsAction.ID = 'workbench.action.navigateEditorGroups';
    NavigateBetweenGroupsAction.LABEL = nls.localize('navigateEditorGroups', "Navigate Between Editor Groups");
    NavigateBetweenGroupsAction = __decorate([
        __param(2, editorService_1.IWorkbenchEditorService),
        __param(3, groupService_1.IEditorGroupService)
    ], NavigateBetweenGroupsAction);
    return NavigateBetweenGroupsAction;
}(actions_1.Action));
exports.NavigateBetweenGroupsAction = NavigateBetweenGroupsAction;
var FocusActiveGroupAction = (function (_super) {
    __extends(FocusActiveGroupAction, _super);
    function FocusActiveGroupAction(id, label, editorService) {
        _super.call(this, id, label);
        this.editorService = editorService;
    }
    FocusActiveGroupAction.prototype.run = function () {
        var activeEditor = this.editorService.getActiveEditor();
        if (activeEditor) {
            activeEditor.focus();
        }
        return winjs_base_1.TPromise.as(true);
    };
    FocusActiveGroupAction.ID = 'workbench.action.focusActiveEditorGroup';
    FocusActiveGroupAction.LABEL = nls.localize('focusActiveEditorGroup', "Focus Active Editor Group");
    FocusActiveGroupAction = __decorate([
        __param(2, editorService_1.IWorkbenchEditorService)
    ], FocusActiveGroupAction);
    return FocusActiveGroupAction;
}(actions_1.Action));
exports.FocusActiveGroupAction = FocusActiveGroupAction;
var FocusFirstGroupAction = (function (_super) {
    __extends(FocusFirstGroupAction, _super);
    function FocusFirstGroupAction(id, label, editorService, editorGroupService, historyService) {
        _super.call(this, id, label);
        this.editorService = editorService;
        this.editorGroupService = editorGroupService;
        this.historyService = historyService;
    }
    FocusFirstGroupAction.prototype.run = function () {
        // Find left editor and focus it
        var editors = this.editorService.getVisibleEditors();
        for (var _i = 0, editors_1 = editors; _i < editors_1.length; _i++) {
            var editor = editors_1[_i];
            if (editor.position === editor_2.Position.LEFT) {
                this.editorGroupService.focusGroup(editor_2.Position.LEFT);
                return winjs_base_1.TPromise.as(true);
            }
        }
        // Since no editor is currently opened, try to open last history entry to the target side
        var history = this.historyService.getHistory();
        for (var _a = 0, history_2 = history; _a < history_2.length; _a++) {
            var input = history_2[_a];
            // For now only support to open resources from history to the side
            if (!!editor_1.getUntitledOrFileResource(input)) {
                return this.editorService.openEditor(input, null, editor_2.Position.LEFT);
            }
        }
        return winjs_base_1.TPromise.as(true);
    };
    FocusFirstGroupAction.ID = 'workbench.action.focusFirstEditorGroup';
    FocusFirstGroupAction.LABEL = nls.localize('focusFirstEditorGroup', "Focus Left Editor Group");
    FocusFirstGroupAction = __decorate([
        __param(2, editorService_1.IWorkbenchEditorService),
        __param(3, groupService_1.IEditorGroupService),
        __param(4, history_1.IHistoryService)
    ], FocusFirstGroupAction);
    return FocusFirstGroupAction;
}(actions_1.Action));
exports.FocusFirstGroupAction = FocusFirstGroupAction;
var BaseFocusSideGroupAction = (function (_super) {
    __extends(BaseFocusSideGroupAction, _super);
    function BaseFocusSideGroupAction(id, label, editorService, editorGroupService, historyService) {
        _super.call(this, id, label);
        this.editorService = editorService;
        this.editorGroupService = editorGroupService;
        this.historyService = historyService;
    }
    BaseFocusSideGroupAction.prototype.run = function () {
        // Require at least the reference editor to be visible
        var editors = this.editorService.getVisibleEditors();
        var referenceEditor;
        for (var i = 0; i < editors.length; i++) {
            var editor = editors[i];
            // Target editor exists so focus it
            if (editor.position === this.getTargetEditorSide()) {
                this.editorGroupService.focusGroup(editor.position);
                return winjs_base_1.TPromise.as(true);
            }
            // Remember reference editor
            if (editor.position === this.getReferenceEditorSide()) {
                referenceEditor = editor;
            }
        }
        // Require the reference editor to be visible and supporting split editor
        if (referenceEditor && referenceEditor.input.supportsSplitEditor()) {
            // Options
            var options = void 0;
            if (referenceEditor instanceof textEditor_1.BaseTextEditor) {
                options = new editor_1.TextEditorOptions();
                options.pinned = true;
                options.fromEditor(referenceEditor.getControl());
            }
            else {
                options = editor_1.EditorOptions.create({ pinned: true });
            }
            return this.editorService.openEditor(referenceEditor.input, options, this.getTargetEditorSide());
        }
        else if (referenceEditor) {
            var history_3 = this.historyService.getHistory();
            for (var _i = 0, history_4 = history_3; _i < history_4.length; _i++) {
                var input = history_4[_i];
                // For now only support to open files from history to the side
                if (!!editor_1.getUntitledOrFileResource(input)) {
                    return this.editorService.openEditor(input, { pinned: true }, this.getTargetEditorSide());
                }
            }
        }
        return winjs_base_1.TPromise.as(true);
    };
    BaseFocusSideGroupAction = __decorate([
        __param(2, editorService_1.IWorkbenchEditorService),
        __param(3, groupService_1.IEditorGroupService),
        __param(4, history_1.IHistoryService)
    ], BaseFocusSideGroupAction);
    return BaseFocusSideGroupAction;
}(actions_1.Action));
exports.BaseFocusSideGroupAction = BaseFocusSideGroupAction;
var FocusSecondGroupAction = (function (_super) {
    __extends(FocusSecondGroupAction, _super);
    function FocusSecondGroupAction(id, label, editorService, editorGroupService, historyService) {
        _super.call(this, id, label, editorService, editorGroupService, historyService);
    }
    FocusSecondGroupAction.prototype.getReferenceEditorSide = function () {
        return editor_2.Position.LEFT;
    };
    FocusSecondGroupAction.prototype.getTargetEditorSide = function () {
        return editor_2.Position.CENTER;
    };
    FocusSecondGroupAction.ID = 'workbench.action.focusSecondEditorGroup';
    FocusSecondGroupAction.LABEL = nls.localize('focusSecondEditorGroup', "Focus Center Editor Group");
    FocusSecondGroupAction = __decorate([
        __param(2, editorService_1.IWorkbenchEditorService),
        __param(3, groupService_1.IEditorGroupService),
        __param(4, history_1.IHistoryService)
    ], FocusSecondGroupAction);
    return FocusSecondGroupAction;
}(BaseFocusSideGroupAction));
exports.FocusSecondGroupAction = FocusSecondGroupAction;
var FocusThirdGroupAction = (function (_super) {
    __extends(FocusThirdGroupAction, _super);
    function FocusThirdGroupAction(id, label, editorService, editorGroupService, historyService) {
        _super.call(this, id, label, editorService, editorGroupService, historyService);
    }
    FocusThirdGroupAction.prototype.getReferenceEditorSide = function () {
        return editor_2.Position.CENTER;
    };
    FocusThirdGroupAction.prototype.getTargetEditorSide = function () {
        return editor_2.Position.RIGHT;
    };
    FocusThirdGroupAction.ID = 'workbench.action.focusThirdEditorGroup';
    FocusThirdGroupAction.LABEL = nls.localize('focusThirdEditorGroup', "Focus Right Editor Group");
    FocusThirdGroupAction = __decorate([
        __param(2, editorService_1.IWorkbenchEditorService),
        __param(3, groupService_1.IEditorGroupService),
        __param(4, history_1.IHistoryService)
    ], FocusThirdGroupAction);
    return FocusThirdGroupAction;
}(BaseFocusSideGroupAction));
exports.FocusThirdGroupAction = FocusThirdGroupAction;
var FocusPreviousGroup = (function (_super) {
    __extends(FocusPreviousGroup, _super);
    function FocusPreviousGroup(id, label, editorGroupService, editorService) {
        _super.call(this, id, label);
        this.editorGroupService = editorGroupService;
        this.editorService = editorService;
    }
    FocusPreviousGroup.prototype.run = function () {
        // Require an active editor
        var activeEditor = this.editorService.getActiveEditor();
        if (!activeEditor) {
            return winjs_base_1.TPromise.as(true);
        }
        // Find the next position to the left
        var nextPosition = editor_2.Position.LEFT;
        if (activeEditor.position === editor_2.Position.RIGHT) {
            nextPosition = editor_2.Position.CENTER;
        }
        // Focus next position if provided
        this.editorGroupService.focusGroup(nextPosition);
        return winjs_base_1.TPromise.as(true);
    };
    FocusPreviousGroup.ID = 'workbench.action.focusPreviousGroup';
    FocusPreviousGroup.LABEL = nls.localize('focusPreviousGroup', "Focus Previous Group");
    FocusPreviousGroup = __decorate([
        __param(2, groupService_1.IEditorGroupService),
        __param(3, editorService_1.IWorkbenchEditorService)
    ], FocusPreviousGroup);
    return FocusPreviousGroup;
}(actions_1.Action));
exports.FocusPreviousGroup = FocusPreviousGroup;
var FocusNextGroup = (function (_super) {
    __extends(FocusNextGroup, _super);
    function FocusNextGroup(id, label, editorService, instantiationService) {
        _super.call(this, id, label);
        this.editorService = editorService;
        this.navigateActions = [];
        this.navigateActions[editor_2.Position.LEFT] = instantiationService.createInstance(FocusFirstGroupAction, FocusFirstGroupAction.ID, FocusFirstGroupAction.LABEL);
        this.navigateActions[editor_2.Position.CENTER] = instantiationService.createInstance(FocusSecondGroupAction, FocusSecondGroupAction.ID, FocusSecondGroupAction.LABEL);
        this.navigateActions[editor_2.Position.RIGHT] = instantiationService.createInstance(FocusThirdGroupAction, FocusThirdGroupAction.ID, FocusThirdGroupAction.LABEL);
    }
    FocusNextGroup.prototype.run = function (event) {
        // Find the next position to the right to use
        var nextPosition;
        var activeEditor = this.editorService.getActiveEditor();
        if (!activeEditor) {
            nextPosition = editor_2.Position.LEFT;
        }
        else if (activeEditor.position === editor_2.Position.LEFT) {
            nextPosition = editor_2.Position.CENTER;
        }
        else if (activeEditor.position === editor_2.Position.CENTER) {
            nextPosition = editor_2.Position.RIGHT;
        }
        // Run the action for the target next position
        if (typeof nextPosition === 'number' && this.navigateActions[nextPosition]) {
            return this.navigateActions[nextPosition].run(event);
        }
        return winjs_base_1.TPromise.as(true);
    };
    FocusNextGroup.ID = 'workbench.action.focusNextGroup';
    FocusNextGroup.LABEL = nls.localize('focusNextGroup', "Focus Next Group");
    FocusNextGroup = __decorate([
        __param(2, editorService_1.IWorkbenchEditorService),
        __param(3, instantiation_1.IInstantiationService)
    ], FocusNextGroup);
    return FocusNextGroup;
}(actions_1.Action));
exports.FocusNextGroup = FocusNextGroup;
var OpenToSideAction = (function (_super) {
    __extends(OpenToSideAction, _super);
    function OpenToSideAction(editorService) {
        _super.call(this, OpenToSideAction.OPEN_TO_SIDE_ID, OpenToSideAction.OPEN_TO_SIDE_LABEL);
        this.editorService = editorService;
        this.class = 'quick-open-sidebyside';
        this.updateEnablement();
    }
    OpenToSideAction.prototype.updateEnablement = function () {
        var activeEditor = this.editorService.getActiveEditor();
        this.enabled = (!activeEditor || activeEditor.position !== editor_2.Position.RIGHT);
    };
    OpenToSideAction.prototype.run = function (context) {
        var _this = this;
        var entry = toEditorQuickOpenEntry(context);
        if (entry) {
            var typedInputPromise = void 0;
            var input = entry.getInput();
            if (input instanceof editor_1.EditorInput) {
                typedInputPromise = winjs_base_1.TPromise.as(input);
            }
            else {
                typedInputPromise = this.editorService.createInput(input);
            }
            return typedInputPromise.then(function (typedInput) { return _this.editorService.openEditor(typedInput, entry.getOptions(), true); });
        }
        return winjs_base_1.TPromise.as(false);
    };
    OpenToSideAction.OPEN_TO_SIDE_ID = 'workbench.action.openToSide';
    OpenToSideAction.OPEN_TO_SIDE_LABEL = nls.localize('openToSide', "Open to the Side");
    OpenToSideAction = __decorate([
        __param(0, editorService_1.IWorkbenchEditorService)
    ], OpenToSideAction);
    return OpenToSideAction;
}(actions_1.Action));
exports.OpenToSideAction = OpenToSideAction;
function toEditorQuickOpenEntry(element) {
    // QuickOpenEntryGroup
    if (element instanceof quickOpenModel_1.QuickOpenEntryGroup) {
        var group = element;
        if (group.getEntry()) {
            element = group.getEntry();
        }
    }
    // EditorQuickOpenEntry or EditorQuickOpenEntryGroup both implement IEditorQuickOpenEntry
    if (element instanceof quickopen_1.EditorQuickOpenEntry || element instanceof quickopen_1.EditorQuickOpenEntryGroup) {
        return element;
    }
    return null;
}
exports.toEditorQuickOpenEntry = toEditorQuickOpenEntry;
var CloseEditorAction = (function (_super) {
    __extends(CloseEditorAction, _super);
    function CloseEditorAction(id, label, editorGroupService, editorService) {
        _super.call(this, id, label, 'close-editor-action');
        this.editorGroupService = editorGroupService;
        this.editorService = editorService;
    }
    CloseEditorAction.prototype.run = function (context) {
        var position = context ? this.editorGroupService.getStacksModel().positionOfGroup(context.group) : null;
        // Close Active Editor
        if (typeof position !== 'number') {
            var activeEditor = this.editorService.getActiveEditor();
            if (activeEditor) {
                return this.editorService.closeEditor(activeEditor.position, activeEditor.input);
            }
        }
        var input = context ? context.editor : null;
        if (!input) {
            // Get Top Editor at Position
            var visibleEditors = this.editorService.getVisibleEditors();
            if (visibleEditors[position]) {
                input = visibleEditors[position].input;
            }
        }
        if (input) {
            return this.editorService.closeEditor(position, input);
        }
        return winjs_base_1.TPromise.as(false);
    };
    CloseEditorAction.ID = 'workbench.action.closeEditor';
    CloseEditorAction.LABEL = nls.localize('closeEditor', "Close Editor");
    CloseEditorAction = __decorate([
        __param(2, groupService_1.IEditorGroupService),
        __param(3, editorService_1.IWorkbenchEditorService)
    ], CloseEditorAction);
    return CloseEditorAction;
}(actions_1.Action));
exports.CloseEditorAction = CloseEditorAction;
var CloseLeftEditorsInGroupAction = (function (_super) {
    __extends(CloseLeftEditorsInGroupAction, _super);
    function CloseLeftEditorsInGroupAction(id, label, editorService, groupService) {
        _super.call(this, id, label);
        this.editorService = editorService;
        this.groupService = groupService;
    }
    CloseLeftEditorsInGroupAction.prototype.run = function (context) {
        var editor = getTarget(this.editorService, this.groupService, context);
        if (editor) {
            return this.editorService.closeEditors(editor.position, editor.input, editor_2.Direction.LEFT);
        }
        return winjs_base_1.TPromise.as(false);
    };
    CloseLeftEditorsInGroupAction.ID = 'workbench.action.closeEditorsToTheLeft';
    CloseLeftEditorsInGroupAction.LABEL = nls.localize('closeEditorsToTheLeft', "Close Editors to the Left");
    CloseLeftEditorsInGroupAction = __decorate([
        __param(2, editorService_1.IWorkbenchEditorService),
        __param(3, groupService_1.IEditorGroupService)
    ], CloseLeftEditorsInGroupAction);
    return CloseLeftEditorsInGroupAction;
}(actions_1.Action));
exports.CloseLeftEditorsInGroupAction = CloseLeftEditorsInGroupAction;
var CloseRightEditorsInGroupAction = (function (_super) {
    __extends(CloseRightEditorsInGroupAction, _super);
    function CloseRightEditorsInGroupAction(id, label, editorService, groupService) {
        _super.call(this, id, label);
        this.editorService = editorService;
        this.groupService = groupService;
    }
    CloseRightEditorsInGroupAction.prototype.run = function (context) {
        var editor = getTarget(this.editorService, this.groupService, context);
        if (editor) {
            return this.editorService.closeEditors(editor.position, editor.input, editor_2.Direction.RIGHT);
        }
        return winjs_base_1.TPromise.as(false);
    };
    CloseRightEditorsInGroupAction.ID = 'workbench.action.closeEditorsToTheRight';
    CloseRightEditorsInGroupAction.LABEL = nls.localize('closeEditorsToTheRight', "Close Editors to the Right");
    CloseRightEditorsInGroupAction = __decorate([
        __param(2, editorService_1.IWorkbenchEditorService),
        __param(3, groupService_1.IEditorGroupService)
    ], CloseRightEditorsInGroupAction);
    return CloseRightEditorsInGroupAction;
}(actions_1.Action));
exports.CloseRightEditorsInGroupAction = CloseRightEditorsInGroupAction;
var CloseAllEditorsAction = (function (_super) {
    __extends(CloseAllEditorsAction, _super);
    function CloseAllEditorsAction(id, label, editorService) {
        _super.call(this, id, label, 'action-close-all-files');
        this.editorService = editorService;
    }
    CloseAllEditorsAction.prototype.run = function () {
        return this.editorService.closeAllEditors();
    };
    CloseAllEditorsAction.ID = 'workbench.action.closeAllEditors';
    CloseAllEditorsAction.LABEL = nls.localize('closeAllEditors', "Close All Editors");
    CloseAllEditorsAction = __decorate([
        __param(2, editorService_1.IWorkbenchEditorService)
    ], CloseAllEditorsAction);
    return CloseAllEditorsAction;
}(actions_1.Action));
exports.CloseAllEditorsAction = CloseAllEditorsAction;
var CloseEditorsInOtherGroupsAction = (function (_super) {
    __extends(CloseEditorsInOtherGroupsAction, _super);
    function CloseEditorsInOtherGroupsAction(id, label, editorGroupService, editorService) {
        _super.call(this, id, label);
        this.editorGroupService = editorGroupService;
        this.editorService = editorService;
    }
    CloseEditorsInOtherGroupsAction.prototype.run = function (context) {
        var position = context ? this.editorGroupService.getStacksModel().positionOfGroup(context.group) : null;
        if (typeof position !== 'number') {
            var activeEditor = this.editorService.getActiveEditor();
            if (activeEditor) {
                position = activeEditor.position;
            }
        }
        if (typeof position === 'number') {
            return this.editorService.closeAllEditors(position);
        }
        return winjs_base_1.TPromise.as(false);
    };
    CloseEditorsInOtherGroupsAction.ID = 'workbench.action.closeEditorsInOtherGroups';
    CloseEditorsInOtherGroupsAction.LABEL = nls.localize('closeEditorsInOtherGroups', "Close Editors in Other Groups");
    CloseEditorsInOtherGroupsAction = __decorate([
        __param(2, groupService_1.IEditorGroupService),
        __param(3, editorService_1.IWorkbenchEditorService)
    ], CloseEditorsInOtherGroupsAction);
    return CloseEditorsInOtherGroupsAction;
}(actions_1.Action));
exports.CloseEditorsInOtherGroupsAction = CloseEditorsInOtherGroupsAction;
var CloseOtherEditorsInGroupAction = (function (_super) {
    __extends(CloseOtherEditorsInGroupAction, _super);
    function CloseOtherEditorsInGroupAction(id, label, editorGroupService, editorService) {
        _super.call(this, id, label);
        this.editorGroupService = editorGroupService;
        this.editorService = editorService;
    }
    CloseOtherEditorsInGroupAction.prototype.run = function (context) {
        var position = context ? this.editorGroupService.getStacksModel().positionOfGroup(context.group) : null;
        var input = context ? context.editor : null;
        // If position or input are not passed in take the position and input of the active editor.
        var active = this.editorService.getActiveEditor();
        if (active) {
            position = typeof position === 'number' ? position : active.position;
            input = input ? input : active.input;
        }
        if (typeof position === 'number' && input) {
            return this.editorService.closeEditors(position, input);
        }
        return winjs_base_1.TPromise.as(false);
    };
    CloseOtherEditorsInGroupAction.ID = 'workbench.action.closeOtherEditors';
    CloseOtherEditorsInGroupAction.LABEL = nls.localize('closeOtherEditorsInGroup', "Close Other Editors");
    CloseOtherEditorsInGroupAction = __decorate([
        __param(2, groupService_1.IEditorGroupService),
        __param(3, editorService_1.IWorkbenchEditorService)
    ], CloseOtherEditorsInGroupAction);
    return CloseOtherEditorsInGroupAction;
}(actions_1.Action));
exports.CloseOtherEditorsInGroupAction = CloseOtherEditorsInGroupAction;
var CloseEditorsInGroupAction = (function (_super) {
    __extends(CloseEditorsInGroupAction, _super);
    function CloseEditorsInGroupAction(id, label, editorGroupService, editorService) {
        _super.call(this, id, label);
        this.editorGroupService = editorGroupService;
        this.editorService = editorService;
    }
    CloseEditorsInGroupAction.prototype.run = function (context) {
        var position = context ? this.editorGroupService.getStacksModel().positionOfGroup(context.group) : null;
        if (typeof position !== 'number') {
            var activeEditor = this.editorService.getActiveEditor();
            if (activeEditor) {
                position = activeEditor.position;
            }
        }
        if (typeof position === 'number') {
            return this.editorService.closeEditors(position);
        }
        return winjs_base_1.TPromise.as(false);
    };
    CloseEditorsInGroupAction.ID = 'workbench.action.closeEditorsInGroup';
    CloseEditorsInGroupAction.LABEL = nls.localize('closeEditorsInGroup', "Close All Editors in Group");
    CloseEditorsInGroupAction = __decorate([
        __param(2, groupService_1.IEditorGroupService),
        __param(3, editorService_1.IWorkbenchEditorService)
    ], CloseEditorsInGroupAction);
    return CloseEditorsInGroupAction;
}(actions_1.Action));
exports.CloseEditorsInGroupAction = CloseEditorsInGroupAction;
var MoveGroupLeftAction = (function (_super) {
    __extends(MoveGroupLeftAction, _super);
    function MoveGroupLeftAction(id, label, editorGroupService, editorService) {
        _super.call(this, id, label);
        this.editorGroupService = editorGroupService;
        this.editorService = editorService;
    }
    MoveGroupLeftAction.prototype.run = function (context) {
        var position = context ? this.editorGroupService.getStacksModel().positionOfGroup(context.group) : null;
        if (typeof position !== 'number') {
            var activeEditor = this.editorService.getActiveEditor();
            if (activeEditor && (activeEditor.position === editor_2.Position.CENTER || activeEditor.position === editor_2.Position.RIGHT)) {
                position = activeEditor.position;
            }
        }
        if (typeof position === 'number') {
            var newPosition = (position === editor_2.Position.CENTER) ? editor_2.Position.LEFT : editor_2.Position.CENTER;
            // Move group
            this.editorGroupService.moveGroup(position, newPosition);
        }
        return winjs_base_1.TPromise.as(false);
    };
    MoveGroupLeftAction.ID = 'workbench.action.moveActiveEditorGroupLeft';
    MoveGroupLeftAction.LABEL = nls.localize('moveActiveGroupLeft', "Move Editor Group Left");
    MoveGroupLeftAction = __decorate([
        __param(2, groupService_1.IEditorGroupService),
        __param(3, editorService_1.IWorkbenchEditorService)
    ], MoveGroupLeftAction);
    return MoveGroupLeftAction;
}(actions_1.Action));
exports.MoveGroupLeftAction = MoveGroupLeftAction;
var MoveGroupRightAction = (function (_super) {
    __extends(MoveGroupRightAction, _super);
    function MoveGroupRightAction(id, label, editorGroupService, editorService) {
        _super.call(this, id, label);
        this.editorGroupService = editorGroupService;
        this.editorService = editorService;
    }
    MoveGroupRightAction.prototype.run = function (context) {
        var position = context ? this.editorGroupService.getStacksModel().positionOfGroup(context.group) : null;
        if (typeof position !== 'number') {
            var activeEditor = this.editorService.getActiveEditor();
            var editors = this.editorService.getVisibleEditors();
            if ((editors.length === 2 && activeEditor.position === editor_2.Position.LEFT) || (editors.length === 3 && activeEditor.position !== editor_2.Position.RIGHT)) {
                position = activeEditor.position;
            }
        }
        if (typeof position === 'number') {
            var newPosition = (position === editor_2.Position.LEFT) ? editor_2.Position.CENTER : editor_2.Position.RIGHT;
            // Move group
            this.editorGroupService.moveGroup(position, newPosition);
        }
        return winjs_base_1.TPromise.as(false);
    };
    MoveGroupRightAction.ID = 'workbench.action.moveActiveEditorGroupRight';
    MoveGroupRightAction.LABEL = nls.localize('moveActiveGroupRight', "Move Editor Group Right");
    MoveGroupRightAction = __decorate([
        __param(2, groupService_1.IEditorGroupService),
        __param(3, editorService_1.IWorkbenchEditorService)
    ], MoveGroupRightAction);
    return MoveGroupRightAction;
}(actions_1.Action));
exports.MoveGroupRightAction = MoveGroupRightAction;
var MinimizeOtherGroupsAction = (function (_super) {
    __extends(MinimizeOtherGroupsAction, _super);
    function MinimizeOtherGroupsAction(id, label, editorGroupService) {
        _super.call(this, id, label);
        this.editorGroupService = editorGroupService;
    }
    MinimizeOtherGroupsAction.prototype.run = function () {
        this.editorGroupService.arrangeGroups(groupService_1.GroupArrangement.MINIMIZE_OTHERS);
        return winjs_base_1.TPromise.as(false);
    };
    MinimizeOtherGroupsAction.ID = 'workbench.action.minimizeOtherEditors';
    MinimizeOtherGroupsAction.LABEL = nls.localize('minimizeOtherEditorGroups', "Minimize Other Editor Groups");
    MinimizeOtherGroupsAction = __decorate([
        __param(2, groupService_1.IEditorGroupService)
    ], MinimizeOtherGroupsAction);
    return MinimizeOtherGroupsAction;
}(actions_1.Action));
exports.MinimizeOtherGroupsAction = MinimizeOtherGroupsAction;
var EvenGroupWidthsAction = (function (_super) {
    __extends(EvenGroupWidthsAction, _super);
    function EvenGroupWidthsAction(id, label, editorGroupService) {
        _super.call(this, id, label);
        this.editorGroupService = editorGroupService;
    }
    EvenGroupWidthsAction.prototype.run = function () {
        this.editorGroupService.arrangeGroups(groupService_1.GroupArrangement.EVEN_WIDTH);
        return winjs_base_1.TPromise.as(false);
    };
    EvenGroupWidthsAction.ID = 'workbench.action.evenEditorWidths';
    EvenGroupWidthsAction.LABEL = nls.localize('evenEditorGroups', "Even Editor Group Widths");
    EvenGroupWidthsAction = __decorate([
        __param(2, groupService_1.IEditorGroupService)
    ], EvenGroupWidthsAction);
    return EvenGroupWidthsAction;
}(actions_1.Action));
exports.EvenGroupWidthsAction = EvenGroupWidthsAction;
var MaximizeGroupAction = (function (_super) {
    __extends(MaximizeGroupAction, _super);
    function MaximizeGroupAction(id, label, editorService, editorGroupService, partService) {
        _super.call(this, id, label);
        this.editorService = editorService;
        this.editorGroupService = editorGroupService;
        this.partService = partService;
    }
    MaximizeGroupAction.prototype.run = function () {
        if (this.editorService.getActiveEditor()) {
            this.editorGroupService.arrangeGroups(groupService_1.GroupArrangement.MINIMIZE_OTHERS);
            this.partService.setSideBarHidden(true);
        }
        return winjs_base_1.TPromise.as(false);
    };
    MaximizeGroupAction.ID = 'workbench.action.maximizeEditor';
    MaximizeGroupAction.LABEL = nls.localize('maximizeEditor', "Maximize Editor Group and Hide Sidebar");
    MaximizeGroupAction = __decorate([
        __param(2, editorService_1.IWorkbenchEditorService),
        __param(3, groupService_1.IEditorGroupService),
        __param(4, partService_1.IPartService)
    ], MaximizeGroupAction);
    return MaximizeGroupAction;
}(actions_1.Action));
exports.MaximizeGroupAction = MaximizeGroupAction;
var KeepEditorAction = (function (_super) {
    __extends(KeepEditorAction, _super);
    function KeepEditorAction(id, label, editorGroupService, editorService) {
        _super.call(this, id, label);
        this.editorGroupService = editorGroupService;
        this.editorService = editorService;
    }
    KeepEditorAction.prototype.run = function (context) {
        var target = getTarget(this.editorService, this.editorGroupService, context);
        if (target) {
            this.editorGroupService.pinEditor(target.position, target.input);
        }
        return winjs_base_1.TPromise.as(true);
    };
    KeepEditorAction.ID = 'workbench.action.keepEditor';
    KeepEditorAction.LABEL = nls.localize('keepEditor', "Keep Editor");
    KeepEditorAction = __decorate([
        __param(2, groupService_1.IEditorGroupService),
        __param(3, editorService_1.IWorkbenchEditorService)
    ], KeepEditorAction);
    return KeepEditorAction;
}(actions_1.Action));
exports.KeepEditorAction = KeepEditorAction;
function getTarget(editorService, editorGroupService, context) {
    if (context) {
        return { input: context.editor, position: editorGroupService.getStacksModel().positionOfGroup(context.group) };
    }
    var activeEditor = editorService.getActiveEditor();
    if (activeEditor) {
        return { input: activeEditor.input, position: activeEditor.position };
    }
    return null;
}
var BaseNavigateEditorAction = (function (_super) {
    __extends(BaseNavigateEditorAction, _super);
    function BaseNavigateEditorAction(id, label, editorGroupService, editorService) {
        _super.call(this, id, label);
        this.editorGroupService = editorGroupService;
        this.editorService = editorService;
    }
    BaseNavigateEditorAction.prototype.run = function () {
        var model = this.editorGroupService.getStacksModel();
        var result = this.navigate();
        if (result) {
            return this.editorService.openEditor(result.editor, null, model.positionOfGroup(result.group));
        }
        return winjs_base_1.TPromise.as(false);
    };
    return BaseNavigateEditorAction;
}(actions_1.Action));
exports.BaseNavigateEditorAction = BaseNavigateEditorAction;
var OpenNextEditor = (function (_super) {
    __extends(OpenNextEditor, _super);
    function OpenNextEditor(id, label, editorGroupService, editorService) {
        _super.call(this, id, label, editorGroupService, editorService);
    }
    OpenNextEditor.prototype.navigate = function () {
        return this.editorGroupService.getStacksModel().next();
    };
    OpenNextEditor.ID = 'workbench.action.nextEditor';
    OpenNextEditor.LABEL = nls.localize('openNextEditor', "Open Next Editor");
    OpenNextEditor = __decorate([
        __param(2, groupService_1.IEditorGroupService),
        __param(3, editorService_1.IWorkbenchEditorService)
    ], OpenNextEditor);
    return OpenNextEditor;
}(BaseNavigateEditorAction));
exports.OpenNextEditor = OpenNextEditor;
var OpenPreviousEditor = (function (_super) {
    __extends(OpenPreviousEditor, _super);
    function OpenPreviousEditor(id, label, editorGroupService, editorService) {
        _super.call(this, id, label, editorGroupService, editorService);
    }
    OpenPreviousEditor.prototype.navigate = function () {
        return this.editorGroupService.getStacksModel().previous();
    };
    OpenPreviousEditor.ID = 'workbench.action.previousEditor';
    OpenPreviousEditor.LABEL = nls.localize('openPreviousEditor', "Open Previous Editor");
    OpenPreviousEditor = __decorate([
        __param(2, groupService_1.IEditorGroupService),
        __param(3, editorService_1.IWorkbenchEditorService)
    ], OpenPreviousEditor);
    return OpenPreviousEditor;
}(BaseNavigateEditorAction));
exports.OpenPreviousEditor = OpenPreviousEditor;
var NavigateForwardAction = (function (_super) {
    __extends(NavigateForwardAction, _super);
    function NavigateForwardAction(id, label, historyService) {
        _super.call(this, id, label);
        this.historyService = historyService;
    }
    NavigateForwardAction.prototype.run = function () {
        this.historyService.forward();
        return winjs_base_1.TPromise.as(null);
    };
    NavigateForwardAction.ID = 'workbench.action.navigateForward';
    NavigateForwardAction.LABEL = nls.localize('navigateNext', "Go Forward");
    NavigateForwardAction = __decorate([
        __param(2, history_1.IHistoryService)
    ], NavigateForwardAction);
    return NavigateForwardAction;
}(actions_1.Action));
exports.NavigateForwardAction = NavigateForwardAction;
var NavigateBackwardsAction = (function (_super) {
    __extends(NavigateBackwardsAction, _super);
    function NavigateBackwardsAction(id, label, historyService) {
        _super.call(this, id, label);
        this.historyService = historyService;
    }
    NavigateBackwardsAction.prototype.run = function () {
        this.historyService.back();
        return winjs_base_1.TPromise.as(null);
    };
    NavigateBackwardsAction.ID = 'workbench.action.navigateBack';
    NavigateBackwardsAction.LABEL = nls.localize('navigatePrevious', "Go Back");
    NavigateBackwardsAction = __decorate([
        __param(2, history_1.IHistoryService)
    ], NavigateBackwardsAction);
    return NavigateBackwardsAction;
}(actions_1.Action));
exports.NavigateBackwardsAction = NavigateBackwardsAction;
var ReopenClosedEditorAction = (function (_super) {
    __extends(ReopenClosedEditorAction, _super);
    function ReopenClosedEditorAction(id, label, historyService, editorGroupService, editorService) {
        _super.call(this, id, label);
        this.historyService = historyService;
        this.editorGroupService = editorGroupService;
        this.editorService = editorService;
    }
    ReopenClosedEditorAction.prototype.run = function () {
        var stacks = this.editorGroupService.getStacksModel();
        // Find an editor that was closed and is currently not opened in the group
        var lastClosedEditor = this.historyService.popLastClosedEditor();
        while (lastClosedEditor && stacks.activeGroup && stacks.activeGroup.indexOf(lastClosedEditor.editor) >= 0) {
            lastClosedEditor = this.historyService.popLastClosedEditor();
        }
        if (lastClosedEditor) {
            this.editorService.openEditor(lastClosedEditor.editor, { pinned: true, index: lastClosedEditor.index });
        }
        return winjs_base_1.TPromise.as(false);
    };
    ReopenClosedEditorAction.ID = 'workbench.action.reopenClosedEditor';
    ReopenClosedEditorAction.LABEL = nls.localize('reopenClosedEditor', "Reopen Closed Editor");
    ReopenClosedEditorAction = __decorate([
        __param(2, history_1.IHistoryService),
        __param(3, groupService_1.IEditorGroupService),
        __param(4, editorService_1.IWorkbenchEditorService)
    ], ReopenClosedEditorAction);
    return ReopenClosedEditorAction;
}(actions_1.Action));
exports.ReopenClosedEditorAction = ReopenClosedEditorAction;
exports.NAVIGATE_IN_LEFT_GROUP_PREFIX = 'edt left ';
var ShowEditorsInLeftGroupAction = (function (_super) {
    __extends(ShowEditorsInLeftGroupAction, _super);
    function ShowEditorsInLeftGroupAction(actionId, actionLabel, quickOpenService) {
        _super.call(this, actionId, actionLabel, exports.NAVIGATE_IN_LEFT_GROUP_PREFIX, quickOpenService);
        this.class = 'show-group-editors-action';
    }
    ShowEditorsInLeftGroupAction.ID = 'workbench.action.showEditorsInLeftGroup';
    ShowEditorsInLeftGroupAction.LABEL = nls.localize('showEditorsInLeftGroup', "Show Editors in Left Group");
    ShowEditorsInLeftGroupAction = __decorate([
        __param(2, quickOpenService_1.IQuickOpenService)
    ], ShowEditorsInLeftGroupAction);
    return ShowEditorsInLeftGroupAction;
}(quickopen_1.QuickOpenAction));
exports.ShowEditorsInLeftGroupAction = ShowEditorsInLeftGroupAction;
exports.NAVIGATE_IN_CENTER_GROUP_PREFIX = 'edt center ';
var ShowEditorsInCenterGroupAction = (function (_super) {
    __extends(ShowEditorsInCenterGroupAction, _super);
    function ShowEditorsInCenterGroupAction(actionId, actionLabel, quickOpenService) {
        _super.call(this, actionId, actionLabel, exports.NAVIGATE_IN_CENTER_GROUP_PREFIX, quickOpenService);
        this.class = 'show-group-editors-action';
    }
    ShowEditorsInCenterGroupAction.ID = 'workbench.action.showEditorsInCenterGroup';
    ShowEditorsInCenterGroupAction.LABEL = nls.localize('showEditorsInCenterGroup', "Show Editors in Center Group");
    ShowEditorsInCenterGroupAction = __decorate([
        __param(2, quickOpenService_1.IQuickOpenService)
    ], ShowEditorsInCenterGroupAction);
    return ShowEditorsInCenterGroupAction;
}(quickopen_1.QuickOpenAction));
exports.ShowEditorsInCenterGroupAction = ShowEditorsInCenterGroupAction;
exports.NAVIGATE_IN_RIGHT_GROUP_PREFIX = 'edt right ';
var ShowEditorsInRightGroupAction = (function (_super) {
    __extends(ShowEditorsInRightGroupAction, _super);
    function ShowEditorsInRightGroupAction(actionId, actionLabel, quickOpenService) {
        _super.call(this, actionId, actionLabel, exports.NAVIGATE_IN_RIGHT_GROUP_PREFIX, quickOpenService);
        this.class = 'show-group-editors-action';
    }
    ShowEditorsInRightGroupAction.ID = 'workbench.action.showEditorsInRightGroup';
    ShowEditorsInRightGroupAction.LABEL = nls.localize('showEditorsInRightGroup', "Show Editors in Right Group");
    ShowEditorsInRightGroupAction = __decorate([
        __param(2, quickOpenService_1.IQuickOpenService)
    ], ShowEditorsInRightGroupAction);
    return ShowEditorsInRightGroupAction;
}(quickopen_1.QuickOpenAction));
exports.ShowEditorsInRightGroupAction = ShowEditorsInRightGroupAction;
var ShowEditorsInGroupAction = (function (_super) {
    __extends(ShowEditorsInGroupAction, _super);
    function ShowEditorsInGroupAction(id, label, quickOpenService, editorGroupService) {
        _super.call(this, id, label);
        this.quickOpenService = quickOpenService;
        this.editorGroupService = editorGroupService;
    }
    ShowEditorsInGroupAction.prototype.run = function (context) {
        var stacks = this.editorGroupService.getStacksModel();
        var groupCount = stacks.groups.length;
        if (groupCount <= 1 || !context) {
            return this.quickOpenService.show(exports.NAVIGATE_ALL_EDITORS_GROUP_PREFIX);
        }
        switch (stacks.positionOfGroup(context.group)) {
            case editor_2.Position.CENTER:
                return this.quickOpenService.show((groupCount === 2) ? exports.NAVIGATE_IN_RIGHT_GROUP_PREFIX : exports.NAVIGATE_IN_CENTER_GROUP_PREFIX);
            case editor_2.Position.RIGHT:
                return this.quickOpenService.show(exports.NAVIGATE_IN_RIGHT_GROUP_PREFIX);
        }
        return this.quickOpenService.show(exports.NAVIGATE_IN_LEFT_GROUP_PREFIX);
    };
    ShowEditorsInGroupAction.ID = 'workbench.action.showEditorsInGroup';
    ShowEditorsInGroupAction.LABEL = nls.localize('showEditorsInGroup', "Show Editors in Group");
    ShowEditorsInGroupAction = __decorate([
        __param(2, quickOpenService_1.IQuickOpenService),
        __param(3, groupService_1.IEditorGroupService)
    ], ShowEditorsInGroupAction);
    return ShowEditorsInGroupAction;
}(actions_1.Action));
exports.ShowEditorsInGroupAction = ShowEditorsInGroupAction;
exports.NAVIGATE_ALL_EDITORS_GROUP_PREFIX = 'edt ';
var ShowAllEditorsAction = (function (_super) {
    __extends(ShowAllEditorsAction, _super);
    function ShowAllEditorsAction(actionId, actionLabel, quickOpenService) {
        _super.call(this, actionId, actionLabel, exports.NAVIGATE_ALL_EDITORS_GROUP_PREFIX, quickOpenService);
    }
    ShowAllEditorsAction.ID = 'workbench.action.showAllEditors';
    ShowAllEditorsAction.LABEL = nls.localize('showAllEditors', "Show All Editors");
    ShowAllEditorsAction = __decorate([
        __param(2, quickOpenService_1.IQuickOpenService)
    ], ShowAllEditorsAction);
    return ShowAllEditorsAction;
}(quickopen_1.QuickOpenAction));
exports.ShowAllEditorsAction = ShowAllEditorsAction;
var BaseQuickOpenEditorInGroupAction = (function (_super) {
    __extends(BaseQuickOpenEditorInGroupAction, _super);
    function BaseQuickOpenEditorInGroupAction(id, label, quickOpenService, keybindingService, editorGroupService) {
        _super.call(this, id, label);
        this.quickOpenService = quickOpenService;
        this.keybindingService = keybindingService;
        this.editorGroupService = editorGroupService;
    }
    BaseQuickOpenEditorInGroupAction.prototype.run = function () {
        var keys = this.keybindingService.lookupKeybindings(this.id);
        var stacks = this.editorGroupService.getStacksModel();
        if (stacks.activeGroup) {
            var activePosition = stacks.positionOfGroup(stacks.activeGroup);
            var count = stacks.groups.length;
            var prefix = exports.NAVIGATE_IN_LEFT_GROUP_PREFIX;
            if (activePosition === editor_2.Position.CENTER && count === 3) {
                prefix = exports.NAVIGATE_IN_CENTER_GROUP_PREFIX;
            }
            else if (activePosition === editor_2.Position.RIGHT || (activePosition === editor_2.Position.CENTER && count === 2)) {
                prefix = exports.NAVIGATE_IN_RIGHT_GROUP_PREFIX;
            }
            this.quickOpenService.show(prefix, { quickNavigateConfiguration: { keybindings: keys } });
        }
        return winjs_base_1.TPromise.as(true);
    };
    BaseQuickOpenEditorInGroupAction = __decorate([
        __param(2, quickOpenService_1.IQuickOpenService),
        __param(3, keybinding_1.IKeybindingService),
        __param(4, groupService_1.IEditorGroupService)
    ], BaseQuickOpenEditorInGroupAction);
    return BaseQuickOpenEditorInGroupAction;
}(actions_1.Action));
exports.BaseQuickOpenEditorInGroupAction = BaseQuickOpenEditorInGroupAction;
var OpenPreviousRecentlyUsedEditorInGroupAction = (function (_super) {
    __extends(OpenPreviousRecentlyUsedEditorInGroupAction, _super);
    function OpenPreviousRecentlyUsedEditorInGroupAction(id, label, quickOpenService, keybindingService, editorGroupService) {
        _super.call(this, id, label, quickOpenService, keybindingService, editorGroupService);
    }
    OpenPreviousRecentlyUsedEditorInGroupAction.ID = 'workbench.action.openPreviousRecentlyUsedEditorInGroup';
    OpenPreviousRecentlyUsedEditorInGroupAction.LABEL = nls.localize('openPreviousEditorInGroup', "Open Previous Recently Used Editor in Group");
    OpenPreviousRecentlyUsedEditorInGroupAction = __decorate([
        __param(2, quickOpenService_1.IQuickOpenService),
        __param(3, keybinding_1.IKeybindingService),
        __param(4, groupService_1.IEditorGroupService)
    ], OpenPreviousRecentlyUsedEditorInGroupAction);
    return OpenPreviousRecentlyUsedEditorInGroupAction;
}(BaseQuickOpenEditorInGroupAction));
exports.OpenPreviousRecentlyUsedEditorInGroupAction = OpenPreviousRecentlyUsedEditorInGroupAction;
var OpenNextRecentlyUsedEditorInGroupAction = (function (_super) {
    __extends(OpenNextRecentlyUsedEditorInGroupAction, _super);
    function OpenNextRecentlyUsedEditorInGroupAction(id, label, quickOpenService, keybindingService, editorGroupService) {
        _super.call(this, id, label, quickOpenService, keybindingService, editorGroupService);
    }
    OpenNextRecentlyUsedEditorInGroupAction.ID = 'workbench.action.openNextRecentlyUsedEditorInGroup';
    OpenNextRecentlyUsedEditorInGroupAction.LABEL = nls.localize('openNextEditorInGroup', "Open Next Recently Used Editor in Group");
    OpenNextRecentlyUsedEditorInGroupAction = __decorate([
        __param(2, quickOpenService_1.IQuickOpenService),
        __param(3, keybinding_1.IKeybindingService),
        __param(4, groupService_1.IEditorGroupService)
    ], OpenNextRecentlyUsedEditorInGroupAction);
    return OpenNextRecentlyUsedEditorInGroupAction;
}(BaseQuickOpenEditorInGroupAction));
exports.OpenNextRecentlyUsedEditorInGroupAction = OpenNextRecentlyUsedEditorInGroupAction;
var OpenPreviousEditorFromHistoryAction = (function (_super) {
    __extends(OpenPreviousEditorFromHistoryAction, _super);
    function OpenPreviousEditorFromHistoryAction(id, label, quickOpenService, keybindingService) {
        _super.call(this, id, label);
        this.quickOpenService = quickOpenService;
        this.keybindingService = keybindingService;
    }
    OpenPreviousEditorFromHistoryAction.prototype.run = function () {
        var keys = this.keybindingService.lookupKeybindings(this.id);
        this.quickOpenService.show(null, { quickNavigateConfiguration: { keybindings: keys } });
        return winjs_base_1.TPromise.as(true);
    };
    OpenPreviousEditorFromHistoryAction.ID = 'workbench.action.openPreviousEditorFromHistory';
    OpenPreviousEditorFromHistoryAction.LABEL = nls.localize('navigateEditorHistoryByInput', "Open Previous Editor from History");
    OpenPreviousEditorFromHistoryAction = __decorate([
        __param(2, quickOpenService_1.IQuickOpenService),
        __param(3, keybinding_1.IKeybindingService)
    ], OpenPreviousEditorFromHistoryAction);
    return OpenPreviousEditorFromHistoryAction;
}(actions_1.Action));
exports.OpenPreviousEditorFromHistoryAction = OpenPreviousEditorFromHistoryAction;
var ClearEditorHistoryAction = (function (_super) {
    __extends(ClearEditorHistoryAction, _super);
    function ClearEditorHistoryAction(id, label, historyService) {
        _super.call(this, id, label);
        this.historyService = historyService;
    }
    ClearEditorHistoryAction.prototype.run = function () {
        // Editor history
        this.historyService.clear();
        return winjs_base_1.TPromise.as(true);
    };
    ClearEditorHistoryAction.ID = 'workbench.action.clearEditorHistory';
    ClearEditorHistoryAction.LABEL = nls.localize('clearEditorHistory', "Clear Editor History");
    ClearEditorHistoryAction = __decorate([
        __param(2, history_1.IHistoryService)
    ], ClearEditorHistoryAction);
    return ClearEditorHistoryAction;
}(actions_1.Action));
exports.ClearEditorHistoryAction = ClearEditorHistoryAction;
var RemoveFromEditorHistoryAction = (function (_super) {
    __extends(RemoveFromEditorHistoryAction, _super);
    function RemoveFromEditorHistoryAction(id, label, editorGroupService, quickOpenService, historyService) {
        _super.call(this, id, label);
        this.editorGroupService = editorGroupService;
        this.quickOpenService = quickOpenService;
        this.historyService = historyService;
    }
    RemoveFromEditorHistoryAction.prototype.run = function () {
        var _this = this;
        // Listen for next editor to open
        var unbind = this.editorGroupService.onEditorOpening(function (e) {
            unbind.dispose(); // listen once
            e.prevent();
            _this.historyService.remove(e.editorInput);
        });
        // Bring up quick open
        this.quickOpenService.show().then(function () {
            unbind.dispose(); // make sure to unbind if quick open is closing
        });
        return winjs_base_1.TPromise.as(true);
    };
    RemoveFromEditorHistoryAction.ID = 'workbench.action.removeFromEditorHistory';
    RemoveFromEditorHistoryAction.LABEL = nls.localize('removeFromEditorHistory', "Remove From Editor History");
    RemoveFromEditorHistoryAction = __decorate([
        __param(2, groupService_1.IEditorGroupService),
        __param(3, quickOpenService_1.IQuickOpenService),
        __param(4, history_1.IHistoryService)
    ], RemoveFromEditorHistoryAction);
    return RemoveFromEditorHistoryAction;
}(actions_1.Action));
exports.RemoveFromEditorHistoryAction = RemoveFromEditorHistoryAction;
var FocusLastEditorInStackAction = (function (_super) {
    __extends(FocusLastEditorInStackAction, _super);
    function FocusLastEditorInStackAction(id, label, editorGroupService, editorService) {
        _super.call(this, id, label);
        this.editorGroupService = editorGroupService;
        this.editorService = editorService;
    }
    FocusLastEditorInStackAction.prototype.run = function () {
        var active = this.editorService.getActiveEditor();
        if (active) {
            var group = this.editorGroupService.getStacksModel().groupAt(active.position);
            var editor = group.getEditor(group.count - 1);
            if (editor) {
                return this.editorService.openEditor(editor);
            }
        }
        return winjs_base_1.TPromise.as(true);
    };
    FocusLastEditorInStackAction.ID = 'workbench.action.openLastEditorInGroup';
    FocusLastEditorInStackAction.LABEL = nls.localize('focusLastEditorInStack', "Open Last Editor in Group");
    FocusLastEditorInStackAction = __decorate([
        __param(2, groupService_1.IEditorGroupService),
        __param(3, editorService_1.IWorkbenchEditorService)
    ], FocusLastEditorInStackAction);
    return FocusLastEditorInStackAction;
}(actions_1.Action));
exports.FocusLastEditorInStackAction = FocusLastEditorInStackAction;
var MoveEditorLeftInGroupAction = (function (_super) {
    __extends(MoveEditorLeftInGroupAction, _super);
    function MoveEditorLeftInGroupAction(id, label, commandService) {
        _super.call(this, id, label);
        this.commandService = commandService;
    }
    MoveEditorLeftInGroupAction.prototype.run = function () {
        var args = {
            to: editor_1.ActiveEditorMovePositioning.LEFT
        };
        this.commandService.executeCommand(editor_1.EditorCommands.MoveActiveEditor, args);
        return winjs_base_1.TPromise.as(true);
    };
    MoveEditorLeftInGroupAction.ID = 'workbench.action.moveEditorLeftInGroup';
    MoveEditorLeftInGroupAction.LABEL = nls.localize('moveEditorLeft', "Move Editor Left");
    MoveEditorLeftInGroupAction = __decorate([
        __param(2, commands_1.ICommandService)
    ], MoveEditorLeftInGroupAction);
    return MoveEditorLeftInGroupAction;
}(actions_1.Action));
exports.MoveEditorLeftInGroupAction = MoveEditorLeftInGroupAction;
var MoveEditorRightInGroupAction = (function (_super) {
    __extends(MoveEditorRightInGroupAction, _super);
    function MoveEditorRightInGroupAction(id, label, commandService) {
        _super.call(this, id, label);
        this.commandService = commandService;
    }
    MoveEditorRightInGroupAction.prototype.run = function () {
        var args = {
            to: editor_1.ActiveEditorMovePositioning.RIGHT
        };
        this.commandService.executeCommand(editor_1.EditorCommands.MoveActiveEditor, args);
        return winjs_base_1.TPromise.as(true);
    };
    MoveEditorRightInGroupAction.ID = 'workbench.action.moveEditorRightInGroup';
    MoveEditorRightInGroupAction.LABEL = nls.localize('moveEditorRight', "Move Editor Right");
    MoveEditorRightInGroupAction = __decorate([
        __param(2, commands_1.ICommandService)
    ], MoveEditorRightInGroupAction);
    return MoveEditorRightInGroupAction;
}(actions_1.Action));
exports.MoveEditorRightInGroupAction = MoveEditorRightInGroupAction;
var MoveEditorToLeftGroupAction = (function (_super) {
    __extends(MoveEditorToLeftGroupAction, _super);
    function MoveEditorToLeftGroupAction(id, label, editorGroupService, editorService) {
        _super.call(this, id, label);
        this.editorGroupService = editorGroupService;
        this.editorService = editorService;
    }
    MoveEditorToLeftGroupAction.prototype.run = function () {
        var activeEditor = this.editorService.getActiveEditor();
        if (activeEditor && activeEditor.position !== editor_2.Position.LEFT) {
            this.editorGroupService.moveEditor(activeEditor.input, activeEditor.position, activeEditor.position - 1);
        }
        return winjs_base_1.TPromise.as(true);
    };
    MoveEditorToLeftGroupAction.ID = 'workbench.action.moveEditorToLeftGroup';
    MoveEditorToLeftGroupAction.LABEL = nls.localize('moveEditorToLeftGroup', "Move Editor into Group to the Left");
    MoveEditorToLeftGroupAction = __decorate([
        __param(2, groupService_1.IEditorGroupService),
        __param(3, editorService_1.IWorkbenchEditorService)
    ], MoveEditorToLeftGroupAction);
    return MoveEditorToLeftGroupAction;
}(actions_1.Action));
exports.MoveEditorToLeftGroupAction = MoveEditorToLeftGroupAction;
var MoveEditorToRightGroupAction = (function (_super) {
    __extends(MoveEditorToRightGroupAction, _super);
    function MoveEditorToRightGroupAction(id, label, editorGroupService, editorService) {
        _super.call(this, id, label);
        this.editorGroupService = editorGroupService;
        this.editorService = editorService;
    }
    MoveEditorToRightGroupAction.prototype.run = function () {
        var activeEditor = this.editorService.getActiveEditor();
        if (activeEditor && activeEditor.position !== editor_2.Position.RIGHT) {
            this.editorGroupService.moveEditor(activeEditor.input, activeEditor.position, activeEditor.position + 1);
        }
        return winjs_base_1.TPromise.as(true);
    };
    MoveEditorToRightGroupAction.ID = 'workbench.action.moveEditorToRightGroup';
    MoveEditorToRightGroupAction.LABEL = nls.localize('moveEditorToRightGroup', "Move Editor into Group to the Right");
    MoveEditorToRightGroupAction = __decorate([
        __param(2, groupService_1.IEditorGroupService),
        __param(3, editorService_1.IWorkbenchEditorService)
    ], MoveEditorToRightGroupAction);
    return MoveEditorToRightGroupAction;
}(actions_1.Action));
exports.MoveEditorToRightGroupAction = MoveEditorToRightGroupAction;
