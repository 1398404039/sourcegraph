import './media/quickopen.css';
import 'vs/workbench/browser/parts/quickopen/quickopen.contribution';
import { TPromise } from 'vs/base/common/winjs.base';
import { Dimension } from 'vs/base/browser/builder';
import URI from 'vs/base/common/uri';
import { IIconLabelOptions } from 'vs/base/browser/ui/iconLabel/iconLabel';
import { CancellationToken } from 'vs/base/common/cancellation';
import { Mode, IEntryRunContext, IQuickNavigateConfiguration } from 'vs/base/parts/quickopen/common/quickOpen';
import { QuickOpenEntryGroup } from 'vs/base/parts/quickopen/browser/quickOpenModel';
import { IModeService } from 'vs/editor/common/services/modeService';
import { IModelService } from 'vs/editor/common/services/modelService';
import { EditorInput } from 'vs/workbench/common/editor';
import { WorkbenchComponent } from 'vs/workbench/common/component';
import Event from 'vs/base/common/event';
import { IPartService } from 'vs/workbench/services/part/common/partService';
import { EditorQuickOpenEntry } from 'vs/workbench/browser/quickopen';
import { IWorkbenchEditorService } from 'vs/workbench/services/editor/common/editorService';
import { IPickOpenEntry, IInputOptions, IQuickOpenService, IPickOptions, IShowOptions } from 'vs/workbench/services/quickopen/common/quickOpenService';
import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import { IMessageService } from 'vs/platform/message/common/message';
import { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';
import { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';
import { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';
import { IHistoryService } from 'vs/workbench/services/history/common/history';
export declare class QuickOpenController extends WorkbenchComponent implements IQuickOpenService {
    private editorService;
    private messageService;
    private telemetryService;
    private contextService;
    private configurationService;
    private historyService;
    private instantiationService;
    private partService;
    private static MAX_SHORT_RESPONSE_TIME;
    _serviceBrand: any;
    private static ID;
    private _onShow;
    private _onHide;
    private quickOpenWidget;
    private pickOpenWidget;
    private layoutDimensions;
    private mapResolvedHandlersToPrefix;
    private handlerOnOpenCalled;
    private currentResultToken;
    private currentPickerToken;
    private inQuickOpenMode;
    private promisesToCompleteOnHide;
    private previousActiveHandlerDescriptor;
    private actionProvider;
    private previousValue;
    private visibilityChangeTimeoutHandle;
    private closeOnFocusLost;
    constructor(editorService: IWorkbenchEditorService, messageService: IMessageService, telemetryService: ITelemetryService, contextService: IWorkspaceContextService, contextKeyService: IContextKeyService, configurationService: IConfigurationService, historyService: IHistoryService, instantiationService: IInstantiationService, partService: IPartService);
    private registerListeners();
    private updateConfiguration(settings);
    readonly onShow: Event<void>;
    readonly onHide: Event<void>;
    quickNavigate(configuration: IQuickNavigateConfiguration, next: boolean): void;
    input(options?: IInputOptions, token?: CancellationToken): TPromise<string>;
    pick(picks: TPromise<string[]>, options?: IPickOptions, token?: CancellationToken): TPromise<string>;
    pick<T extends IPickOpenEntry>(picks: TPromise<T[]>, options?: IPickOptions, token?: CancellationToken): TPromise<string>;
    pick(picks: string[], options?: IPickOptions, token?: CancellationToken): TPromise<string>;
    pick<T extends IPickOpenEntry>(picks: T[], options?: IPickOptions, token?: CancellationToken): TPromise<T>;
    private doPick(picksPromise, options, token?);
    accept(): void;
    focus(): void;
    close(): void;
    private emitQuickOpenVisibilityChange(isVisible);
    show(prefix?: string, options?: IShowOptions): TPromise<void>;
    private handleOnShow(isPicker);
    private handleOnHide(isPicker, reason);
    private hasHandler(prefix);
    private getEditorHistoryWithGroupLabel();
    private restoreFocus();
    private onType(value);
    private handleDefaultHandler(handler, value, currentResultToken);
    private getEditorHistoryEntries(searchValue?);
    private mergeResults(quickOpenModel, handlerResults, groupLabel);
    private handleSpecificHandler(handlerDescriptor, value, currentResultToken);
    private showModel(model, autoFocus?, ariaLabel?);
    private clearModel();
    private mapEntriesToResource(model);
    private resolveHandler(handler);
    private _resolveHandler(handler);
    layout(dimension: Dimension): void;
    dispose(): void;
}
export declare class EditorHistoryEntryGroup extends QuickOpenEntryGroup {
}
export declare class EditorHistoryEntry extends EditorQuickOpenEntry {
    private modeService;
    private modelService;
    private configurationService;
    private input;
    private resource;
    constructor(input: EditorInput, editorService: IWorkbenchEditorService, modeService: IModeService, modelService: IModelService, configurationService: IConfigurationService);
    getIcon(): string;
    getLabel(): string;
    getLabelOptions(): IIconLabelOptions;
    getAriaLabel(): string;
    getDescription(): string;
    getResource(): URI;
    getInput(): EditorInput;
    matches(input: EditorInput): boolean;
    run(mode: Mode, context: IEntryRunContext): boolean;
}
