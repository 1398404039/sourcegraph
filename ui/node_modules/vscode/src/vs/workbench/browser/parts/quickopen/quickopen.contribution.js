/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var platform_1 = require("vs/platform/platform");
var winjs_base_1 = require("vs/base/common/winjs.base");
var nls = require("vs/nls");
var actions_1 = require("vs/base/common/actions");
var quickOpenService_1 = require("vs/workbench/services/quickopen/common/quickOpenService");
var keybinding_1 = require("vs/platform/keybinding/common/keybinding");
var contextkey_1 = require("vs/platform/contextkey/common/contextkey");
var actions_2 = require("vs/platform/actions/common/actions");
var actionRegistry_1 = require("vs/workbench/common/actionRegistry");
var keybindingsRegistry_1 = require("vs/platform/keybinding/common/keybindingsRegistry");
var quickOpenController_1 = require("vs/workbench/browser/parts/quickopen/quickOpenController");
var GlobalQuickOpenAction = (function (_super) {
    __extends(GlobalQuickOpenAction, _super);
    function GlobalQuickOpenAction(id, label, quickOpenService) {
        var _this = _super.call(this, id, label) || this;
        _this.quickOpenService = quickOpenService;
        _this.order = 100; // Allow other actions to position before or after
        _this.class = 'quickopen';
        return _this;
    }
    GlobalQuickOpenAction.prototype.run = function () {
        this.quickOpenService.show(null);
        return winjs_base_1.TPromise.as(true);
    };
    return GlobalQuickOpenAction;
}(actions_1.Action));
GlobalQuickOpenAction.ID = 'workbench.action.quickOpen';
GlobalQuickOpenAction.LABEL = nls.localize('quickOpen', "Go to File...");
GlobalQuickOpenAction = __decorate([
    __param(2, quickOpenService_1.IQuickOpenService)
], GlobalQuickOpenAction);
exports.GlobalQuickOpenAction = GlobalQuickOpenAction;
var BaseQuickOpenNavigateAction = (function (_super) {
    __extends(BaseQuickOpenNavigateAction, _super);
    function BaseQuickOpenNavigateAction(id, label, navigateNext, quickOpenService, keybindingService) {
        var _this = _super.call(this, id, label) || this;
        _this.quickOpenService = quickOpenService;
        _this.keybindingService = keybindingService;
        _this.navigateNext = navigateNext;
        return _this;
    }
    BaseQuickOpenNavigateAction.prototype.run = function (event) {
        var keys = this.keybindingService.lookupKeybindings(this.id);
        this.quickOpenService.quickNavigate({
            keybindings: keys
        }, this.navigateNext);
        return winjs_base_1.TPromise.as(true);
    };
    return BaseQuickOpenNavigateAction;
}(actions_1.Action));
BaseQuickOpenNavigateAction = __decorate([
    __param(3, quickOpenService_1.IQuickOpenService),
    __param(4, keybinding_1.IKeybindingService)
], BaseQuickOpenNavigateAction);
exports.BaseQuickOpenNavigateAction = BaseQuickOpenNavigateAction;
var QuickOpenNavigateNextAction = (function (_super) {
    __extends(QuickOpenNavigateNextAction, _super);
    function QuickOpenNavigateNextAction(id, label, quickOpenService, keybindingService) {
        return _super.call(this, id, label, true, quickOpenService, keybindingService) || this;
    }
    return QuickOpenNavigateNextAction;
}(BaseQuickOpenNavigateAction));
QuickOpenNavigateNextAction.ID = 'workbench.action.quickOpenNavigateNext';
QuickOpenNavigateNextAction.LABEL = nls.localize('quickNavigateNext', "Navigate Next in Quick Open");
QuickOpenNavigateNextAction = __decorate([
    __param(2, quickOpenService_1.IQuickOpenService),
    __param(3, keybinding_1.IKeybindingService)
], QuickOpenNavigateNextAction);
exports.QuickOpenNavigateNextAction = QuickOpenNavigateNextAction;
var QuickOpenNavigatePreviousAction = (function (_super) {
    __extends(QuickOpenNavigatePreviousAction, _super);
    function QuickOpenNavigatePreviousAction(id, label, quickOpenService, keybindingService) {
        return _super.call(this, id, label, false, quickOpenService, keybindingService) || this;
    }
    return QuickOpenNavigatePreviousAction;
}(BaseQuickOpenNavigateAction));
QuickOpenNavigatePreviousAction.ID = 'workbench.action.quickOpenNavigatePrevious';
QuickOpenNavigatePreviousAction.LABEL = nls.localize('quickNavigatePrevious', "Navigate Previous in Quick Open");
QuickOpenNavigatePreviousAction = __decorate([
    __param(2, quickOpenService_1.IQuickOpenService),
    __param(3, keybinding_1.IKeybindingService)
], QuickOpenNavigatePreviousAction);
exports.QuickOpenNavigatePreviousAction = QuickOpenNavigatePreviousAction;
var condition = contextkey_1.ContextKeyExpr.has('inQuickOpen');
keybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({
    id: 'workbench.action.closeQuickOpen',
    weight: keybindingsRegistry_1.KeybindingsRegistry.WEIGHT.workbenchContrib(),
    when: condition,
    primary: 9 /* Escape */, secondary: [16384 /* Shift */ | 9 /* Escape */],
    handler: function (accessor) {
        var quickOpenService = accessor.get(quickOpenService_1.IQuickOpenService);
        quickOpenService.close();
    }
});
keybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({
    id: 'workbench.action.acceptSelectedQuickOpenItem',
    weight: keybindingsRegistry_1.KeybindingsRegistry.WEIGHT.workbenchContrib(),
    when: condition,
    primary: null,
    handler: function (accessor) {
        var quickOpenService = accessor.get(quickOpenService_1.IQuickOpenService);
        quickOpenService.accept();
    }
});
keybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({
    id: 'workbench.action.focusQuickOpen',
    weight: keybindingsRegistry_1.KeybindingsRegistry.WEIGHT.workbenchContrib(),
    when: condition,
    primary: null,
    handler: function (accessor) {
        var quickOpenService = accessor.get(quickOpenService_1.IQuickOpenService);
        quickOpenService.focus();
    }
});
function navigateKeybinding(shift) {
    if (!shift) {
        return {
            primary: 32768 /* CtrlCmd */ | 46 /* KEY_P */,
            secondary: [32768 /* CtrlCmd */ | 35 /* KEY_E */, 32768 /* CtrlCmd */ | 2 /* Tab */, 32768 /* CtrlCmd */ | 47 /* KEY_Q */],
            mac: {
                primary: 32768 /* CtrlCmd */ | 46 /* KEY_P */,
                secondary: [4096 /* WinCtrl */ | 2 /* Tab */, 4096 /* WinCtrl */ | 47 /* KEY_Q */]
            }
        };
    }
    return {
        primary: 32768 /* CtrlCmd */ | 16384 /* Shift */ | 46 /* KEY_P */,
        secondary: [32768 /* CtrlCmd */ | 16384 /* Shift */ | 35 /* KEY_E */, 32768 /* CtrlCmd */ | 16384 /* Shift */ | 2 /* Tab */, 32768 /* CtrlCmd */ | 16384 /* Shift */ | 47 /* KEY_Q */],
        mac: {
            primary: 32768 /* CtrlCmd */ | 16384 /* Shift */ | 46 /* KEY_P */,
            secondary: [4096 /* WinCtrl */ | 16384 /* Shift */ | 2 /* Tab */, 4096 /* WinCtrl */ | 16384 /* Shift */ | 47 /* KEY_Q */]
        }
    };
}
var registry = platform_1.Registry.as(actionRegistry_1.Extensions.WorkbenchActions);
registry.registerWorkbenchAction(new actions_2.SyncActionDescriptor(GlobalQuickOpenAction, GlobalQuickOpenAction.ID, GlobalQuickOpenAction.LABEL, { primary: 32768 /* CtrlCmd */ | 46 /* KEY_P */, secondary: [32768 /* CtrlCmd */ | 35 /* KEY_E */], mac: { primary: 32768 /* CtrlCmd */ | 46 /* KEY_P */, secondary: null } }), 'Go to File...');
registry.registerWorkbenchAction(new actions_2.SyncActionDescriptor(QuickOpenNavigateNextAction, QuickOpenNavigateNextAction.ID, QuickOpenNavigateNextAction.LABEL, navigateKeybinding(false), condition, keybindingsRegistry_1.KeybindingsRegistry.WEIGHT.workbenchContrib(50)), 'Navigate Next in Quick Open');
registry.registerWorkbenchAction(new actions_2.SyncActionDescriptor(QuickOpenNavigatePreviousAction, QuickOpenNavigatePreviousAction.ID, QuickOpenNavigatePreviousAction.LABEL, navigateKeybinding(true), condition, keybindingsRegistry_1.KeybindingsRegistry.WEIGHT.workbenchContrib(50)), 'Navigate Previous in Quick Open');
registry.registerWorkbenchAction(new actions_2.SyncActionDescriptor(quickOpenController_1.RemoveFromEditorHistoryAction, quickOpenController_1.RemoveFromEditorHistoryAction.ID, quickOpenController_1.RemoveFromEditorHistoryAction.LABEL), 'Remove From History');
