/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
require("./media/sidebarpart.css");
var winjs_base_1 = require("vs/base/common/winjs.base");
var nls = require("vs/nls");
var platform_1 = require("vs/platform/platform");
var actions_1 = require("vs/base/common/actions");
var compositePart_1 = require("vs/workbench/browser/parts/compositePart");
var viewlet_1 = require("vs/workbench/browser/viewlet");
var actionRegistry_1 = require("vs/workbench/common/actionRegistry");
var actions_2 = require("vs/platform/actions/common/actions");
var viewlet_2 = require("vs/workbench/services/viewlet/browser/viewlet");
var partService_1 = require("vs/workbench/services/part/common/partService");
var actionBarRegistry_1 = require("vs/workbench/browser/actionBarRegistry");
var storage_1 = require("vs/platform/storage/common/storage");
var contextView_1 = require("vs/platform/contextview/browser/contextView");
var message_1 = require("vs/platform/message/common/message");
var telemetry_1 = require("vs/platform/telemetry/common/telemetry");
var keybinding_1 = require("vs/platform/keybinding/common/keybinding");
var instantiation_1 = require("vs/platform/instantiation/common/instantiation");
var SidebarPart = (function (_super) {
    __extends(SidebarPart, _super);
    function SidebarPart(id, messageService, storageService, telemetryService, contextMenuService, partService, keybindingService, instantiationService) {
        return _super.call(this, messageService, storageService, telemetryService, contextMenuService, partService, keybindingService, instantiationService, platform_1.Registry.as(viewlet_1.Extensions.Viewlets), SidebarPart.activeViewletSettingsKey, 'sideBar', 'viewlet', actionBarRegistry_1.Scope.VIEWLET, id) || this;
    }
    Object.defineProperty(SidebarPart.prototype, "onDidViewletOpen", {
        get: function () {
            return this._onDidCompositeOpen.event;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SidebarPart.prototype, "onDidViewletClose", {
        get: function () {
            return this._onDidCompositeClose.event;
        },
        enumerable: true,
        configurable: true
    });
    SidebarPart.prototype.openViewlet = function (id, focus) {
        if (this.blockOpeningViewlet) {
            return winjs_base_1.TPromise.as(null); // Workaround against a potential race condition
        }
        // First check if sidebar is hidden and show if so
        if (!this.partService.isVisible(partService_1.Parts.SIDEBAR_PART)) {
            try {
                this.blockOpeningViewlet = true;
                this.partService.setSideBarHidden(false);
            }
            finally {
                this.blockOpeningViewlet = false;
            }
        }
        return this.openComposite(id, focus);
    };
    SidebarPart.prototype.getActiveViewlet = function () {
        return this.getActiveComposite();
    };
    SidebarPart.prototype.getLastActiveViewletId = function () {
        return this.getLastActiveCompositetId();
    };
    SidebarPart.prototype.hideActiveViewlet = function () {
        return this.hideActiveComposite().then(function (composite) { return void 0; });
    };
    return SidebarPart;
}(compositePart_1.CompositePart));
SidebarPart.activeViewletSettingsKey = 'workbench.sidebar.activeviewletid';
SidebarPart = __decorate([
    __param(1, message_1.IMessageService),
    __param(2, storage_1.IStorageService),
    __param(3, telemetry_1.ITelemetryService),
    __param(4, contextView_1.IContextMenuService),
    __param(5, partService_1.IPartService),
    __param(6, keybinding_1.IKeybindingService),
    __param(7, instantiation_1.IInstantiationService)
], SidebarPart);
exports.SidebarPart = SidebarPart;
var FocusSideBarAction = (function (_super) {
    __extends(FocusSideBarAction, _super);
    function FocusSideBarAction(id, label, viewletService, partService) {
        var _this = _super.call(this, id, label) || this;
        _this.viewletService = viewletService;
        _this.partService = partService;
        return _this;
    }
    FocusSideBarAction.prototype.run = function () {
        // Show side bar
        if (!this.partService.isVisible(partService_1.Parts.SIDEBAR_PART)) {
            this.partService.setSideBarHidden(false);
        }
        else {
            var viewlet = this.viewletService.getActiveViewlet();
            if (viewlet) {
                viewlet.focus();
            }
        }
        return winjs_base_1.TPromise.as(true);
    };
    return FocusSideBarAction;
}(actions_1.Action));
FocusSideBarAction.ID = 'workbench.action.focusSideBar';
FocusSideBarAction.LABEL = nls.localize('focusSideBar', "Focus into Side Bar");
FocusSideBarAction = __decorate([
    __param(2, viewlet_2.IViewletService),
    __param(3, partService_1.IPartService)
], FocusSideBarAction);
var registry = platform_1.Registry.as(actionRegistry_1.Extensions.WorkbenchActions);
registry.registerWorkbenchAction(new actions_2.SyncActionDescriptor(FocusSideBarAction, FocusSideBarAction.ID, FocusSideBarAction.LABEL, {
    primary: 32768 /* CtrlCmd */ | 21 /* KEY_0 */
}), 'View: Focus into Side Bar', nls.localize('viewCategory', "View"));
