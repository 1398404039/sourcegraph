/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
require('./media/titlecontrol.css');
var nls = require('vs/nls');
var platform_1 = require('vs/platform/platform');
var actionBarRegistry_1 = require('vs/workbench/browser/actionBarRegistry');
var errors = require('vs/base/common/errors');
var DOM = require('vs/base/browser/dom');
var winjs_base_1 = require('vs/base/common/winjs.base');
var baseEditor_1 = require('vs/workbench/browser/parts/editor/baseEditor');
var async_1 = require('vs/base/common/async');
var editorCommon_1 = require('vs/editor/common/editorCommon');
var arrays = require('vs/base/common/arrays');
var editor_1 = require('vs/workbench/common/editor');
var events_1 = require('vs/base/common/events');
var actionbar_1 = require('vs/base/browser/ui/actionbar/actionbar');
var toolbar_1 = require('vs/base/browser/ui/toolbar/toolbar');
var editorService_1 = require('vs/workbench/services/editor/common/editorService');
var contextView_1 = require('vs/platform/contextview/browser/contextView');
var configuration_1 = require('vs/platform/configuration/common/configuration');
var groupService_1 = require('vs/workbench/services/group/common/groupService');
var message_1 = require('vs/platform/message/common/message');
var mouseEvent_1 = require('vs/base/browser/mouseEvent');
var telemetry_1 = require('vs/platform/telemetry/common/telemetry');
var instantiation_1 = require('vs/platform/instantiation/common/instantiation');
var quickOpenService_1 = require('vs/workbench/services/quickopen/common/quickOpenService');
var keybinding_1 = require('vs/platform/keybinding/common/keybinding');
var contextkey_1 = require('vs/platform/contextkey/common/contextkey');
var editorActions_1 = require('vs/workbench/browser/parts/editor/editorActions');
var lifecycle_1 = require('vs/base/common/lifecycle');
var menuItemActionItem_1 = require('vs/platform/actions/browser/menuItemActionItem');
var actions_1 = require('vs/platform/actions/common/actions');
var resourceContextKey_1 = require('vs/platform/actions/common/resourceContextKey');
var TitleControl = (function () {
    function TitleControl(contextMenuService, instantiationService, configurationService, editorService, editorGroupService, contextKeyService, keybindingService, telemetryService, messageService, menuService, quickOpenService) {
        var _this = this;
        this.contextMenuService = contextMenuService;
        this.instantiationService = instantiationService;
        this.configurationService = configurationService;
        this.editorService = editorService;
        this.editorGroupService = editorGroupService;
        this.contextKeyService = contextKeyService;
        this.keybindingService = keybindingService;
        this.telemetryService = telemetryService;
        this.messageService = messageService;
        this.menuService = menuService;
        this.quickOpenService = quickOpenService;
        this.currentPrimaryEditorActionIds = [];
        this.currentSecondaryEditorActionIds = [];
        this.disposeOnEditorActions = [];
        this.toDispose = [];
        this.stacks = editorGroupService.getStacksModel();
        this.mapActionsToEditors = Object.create(null);
        this.onConfigurationUpdated(configurationService.getConfiguration());
        this.scheduler = new async_1.RunOnceScheduler(function () { return _this.onSchedule(); }, 0);
        this.toDispose.push(this.scheduler);
        this.resourceContext = instantiationService.createInstance(resourceContextKey_1.ResourceContextKey);
        this.initActions();
        this.registerListeners();
    }
    TitleControl.getDraggedEditor = function () {
        return TitleControl.draggedEditor;
    };
    TitleControl.prototype.setDragged = function (dragged) {
        this.dragged = dragged;
    };
    TitleControl.prototype.onEditorDragStart = function (editor) {
        TitleControl.draggedEditor = editor;
    };
    TitleControl.prototype.onEditorDragEnd = function () {
        TitleControl.draggedEditor = void 0;
    };
    TitleControl.prototype.registerListeners = function () {
        var _this = this;
        this.toDispose.push(this.configurationService.onDidUpdateConfiguration(function (e) { return _this.onConfigurationUpdated(e.config); }));
        this.toDispose.push(this.stacks.onModelChanged(function (e) { return _this.onStacksChanged(e); }));
    };
    TitleControl.prototype.onStacksChanged = function (e) {
        if (e.structural) {
            this.updateSplitActionEnablement();
        }
    };
    TitleControl.prototype.onConfigurationUpdated = function (config) {
        this.previewEditors = config.workbench && config.workbench.editor && config.workbench.editor.enablePreview;
        this.showTabs = config.workbench && config.workbench.editor && config.workbench.editor.showTabs;
    };
    TitleControl.prototype.updateSplitActionEnablement = function () {
        if (!this.context) {
            return;
        }
        var groupCount = this.stacks.groups.length;
        // Split editor
        this.splitEditorAction.enabled = groupCount < 3;
    };
    TitleControl.prototype.onSchedule = function () {
        if (this.refreshScheduled) {
            this.doRefresh();
        }
        else {
            this.doUpdate();
        }
        this.refreshScheduled = false;
    };
    TitleControl.prototype.setContext = function (group) {
        this.context = group;
    };
    TitleControl.prototype.hasContext = function () {
        return !!this.context;
    };
    TitleControl.prototype.update = function (instant) {
        if (instant) {
            this.scheduler.cancel();
            this.onSchedule();
        }
        else {
            this.scheduler.schedule();
        }
    };
    TitleControl.prototype.refresh = function (instant) {
        this.refreshScheduled = true;
        if (instant) {
            this.scheduler.cancel();
            this.onSchedule();
        }
        else {
            this.scheduler.schedule();
        }
    };
    TitleControl.prototype.create = function (parent) {
        this.parent = parent;
    };
    TitleControl.prototype.getContainer = function () {
        return this.parent;
    };
    TitleControl.prototype.doUpdate = function () {
        this.doRefresh();
    };
    TitleControl.prototype.layout = function () {
        // Subclasses can opt in to react on layout
    };
    TitleControl.prototype.allowDragging = function (element) {
        return !DOM.findParentWithClass(element, 'monaco-action-bar', 'one-editor-silo');
    };
    TitleControl.prototype.initActions = function () {
        this.closeEditorAction = this.instantiationService.createInstance(editorActions_1.CloseEditorAction, editorActions_1.CloseEditorAction.ID, nls.localize('close', "Close"));
        this.closeOtherEditorsAction = this.instantiationService.createInstance(editorActions_1.CloseOtherEditorsInGroupAction, editorActions_1.CloseOtherEditorsInGroupAction.ID, nls.localize('closeOthers', "Close Others"));
        this.closeRightEditorsAction = this.instantiationService.createInstance(editorActions_1.CloseRightEditorsInGroupAction, editorActions_1.CloseRightEditorsInGroupAction.ID, nls.localize('closeRight', "Close to the Right"));
        this.closeEditorsInGroupAction = this.instantiationService.createInstance(editorActions_1.CloseEditorsInGroupAction, editorActions_1.CloseEditorsInGroupAction.ID, nls.localize('closeAll', "Close All"));
        this.pinEditorAction = this.instantiationService.createInstance(editorActions_1.KeepEditorAction, editorActions_1.KeepEditorAction.ID, nls.localize('keepOpen', "Keep Open"));
        this.showEditorsInGroupAction = this.instantiationService.createInstance(editorActions_1.ShowEditorsInGroupAction, editorActions_1.ShowEditorsInGroupAction.ID, nls.localize('showOpenedEditors', "Show Opened Editors"));
        this.splitEditorAction = this.instantiationService.createInstance(editorActions_1.SplitEditorAction, editorActions_1.SplitEditorAction.ID, editorActions_1.SplitEditorAction.LABEL);
    };
    TitleControl.prototype.createEditorActionsToolBar = function (container) {
        var _this = this;
        this.editorActionsToolbar = new toolbar_1.ToolBar(container, this.contextMenuService, {
            actionItemProvider: function (action) { return _this.actionItemProvider(action); },
            orientation: actionbar_1.ActionsOrientation.HORIZONTAL,
            ariaLabel: nls.localize('araLabelEditorActions', "Editor actions"),
            getKeyBinding: function (action) {
                var opts = _this.keybindingService.lookupKeybindings(action.id);
                if (opts.length > 0) {
                    return opts[0]; // only take the first one
                }
                return null;
            }
        });
        // Action Run Handling
        this.toDispose.push(this.editorActionsToolbar.actionRunner.addListener2(events_1.EventType.RUN, function (e) {
            // Check for Error
            if (e.error && !errors.isPromiseCanceledError(e.error)) {
                _this.messageService.show(message_1.Severity.Error, e.error);
            }
            // Log in telemetry
            if (_this.telemetryService) {
                _this.telemetryService.publicLog('workbenchActionExecuted', { id: e.action.id, from: 'editorPart' });
            }
        }));
    };
    TitleControl.prototype.actionItemProvider = function (action) {
        if (!this.context) {
            return null;
        }
        var group = this.context;
        var position = this.stacks.positionOfGroup(group);
        var editor = this.editorService.getVisibleEditors()[position];
        var actionItem;
        // Check Active Editor
        if (editor instanceof baseEditor_1.BaseEditor) {
            actionItem = editor.getActionItem(action);
        }
        // Check Registry
        if (!actionItem) {
            var actionBarRegistry = platform_1.Registry.as(actionBarRegistry_1.Extensions.Actionbar);
            actionItem = actionBarRegistry.getActionItemForContext(actionBarRegistry_1.Scope.EDITOR, { input: editor && editor.input, editor: editor, position: position }, action);
        }
        // Check extensions
        if (!actionItem) {
            actionItem = menuItemActionItem_1.createActionItem(action, this.keybindingService, this.messageService);
        }
        return actionItem;
    };
    TitleControl.prototype.getEditorActions = function (identifier) {
        var _this = this;
        var primary = [];
        var secondary = [];
        var group = identifier.group;
        var position = this.stacks.positionOfGroup(group);
        // Update the resource context
        this.resourceContext.set(group && editor_1.getResource(group.activeEditor));
        // Editor actions require the editor control to be there, so we retrieve it via service
        var control = this.editorService.getVisibleEditors()[position];
        if (control instanceof baseEditor_1.BaseEditor && control.input && typeof control.position === 'number') {
            // Editor Control Actions
            var editorActions = this.mapActionsToEditors[control.getId()];
            if (!editorActions) {
                editorActions = this.getEditorActionsForContext(control);
                this.mapActionsToEditors[control.getId()] = editorActions;
            }
            primary.push.apply(primary, editorActions.primary);
            secondary.push.apply(secondary, editorActions.secondary);
            // Editor Input Actions
            var editorInputActions = this.getEditorActionsForContext({ input: control.input, editor: control, position: control.position });
            primary.push.apply(primary, editorInputActions.primary);
            secondary.push.apply(secondary, editorInputActions.secondary);
            // MenuItems
            // TODO This isn't very proper but needed as we have failed to
            // use the correct context key service per editor only once. Don't
            // take this code as sample of how to work with menus
            this.disposeOnEditorActions = lifecycle_1.dispose(this.disposeOnEditorActions);
            var widget = control.getControl();
            var codeEditor = editorCommon_1.isCommonCodeEditor(widget) && widget || editorCommon_1.isCommonDiffEditor(widget) && widget.getModifiedEditor();
            var scopedContextKeyService = codeEditor && codeEditor.invokeWithinContext(function (accessor) { return accessor.get(contextkey_1.IContextKeyService); }) || this.contextKeyService;
            var titleBarMenu = this.menuService.createMenu(actions_1.MenuId.EditorTitle, scopedContextKeyService);
            this.disposeOnEditorActions.push(titleBarMenu, titleBarMenu.onDidChange(function (_) { return _this.update(); }));
            menuItemActionItem_1.fillInActions(titleBarMenu, { primary: primary, secondary: secondary });
        }
        return { primary: primary, secondary: secondary };
    };
    TitleControl.prototype.getEditorActionsForContext = function (context) {
        var primaryActions = [];
        var secondaryActions = [];
        // From Editor
        if (context instanceof baseEditor_1.BaseEditor) {
            primaryActions.push.apply(primaryActions, context.getActions());
            secondaryActions.push.apply(secondaryActions, context.getSecondaryActions());
        }
        else {
            var actionBarRegistry = platform_1.Registry.as(actionBarRegistry_1.Extensions.Actionbar);
            primaryActions.push.apply(primaryActions, actionBarRegistry.getActionBarActionsForContext(actionBarRegistry_1.Scope.EDITOR, context));
            secondaryActions.push.apply(secondaryActions, actionBarRegistry.getSecondaryActionBarActionsForContext(actionBarRegistry_1.Scope.EDITOR, context));
        }
        return {
            primary: primaryActions,
            secondary: secondaryActions
        };
    };
    TitleControl.prototype.updateEditorActionsToolbar = function () {
        var group = this.context;
        if (!group) {
            return;
        }
        var editor = group && group.activeEditor;
        var isActive = this.stacks.isActive(group);
        // Update Editor Actions Toolbar
        var primaryEditorActions = [];
        var secondaryEditorActions = [];
        if (isActive) {
            var editorActions = this.getEditorActions({ group: group, editor: editor });
            primaryEditorActions = actionBarRegistry_1.prepareActions(editorActions.primary);
            if (isActive && editor instanceof editor_1.EditorInput && editor.supportsSplitEditor()) {
                this.updateSplitActionEnablement();
                primaryEditorActions.push(this.splitEditorAction);
            }
            secondaryEditorActions = actionBarRegistry_1.prepareActions(editorActions.secondary);
        }
        if (this.showTabs) {
            if (secondaryEditorActions.length > 0) {
                secondaryEditorActions.push(new actionbar_1.Separator());
            }
            secondaryEditorActions.push(this.showEditorsInGroupAction);
            secondaryEditorActions.push(new actionbar_1.Separator());
            secondaryEditorActions.push(this.closeEditorsInGroupAction);
        }
        var primaryEditorActionIds = primaryEditorActions.map(function (a) { return a.id; });
        if (!this.showTabs) {
            primaryEditorActionIds.push(this.closeEditorAction.id); // always show "Close" when tabs are disabled
        }
        var secondaryEditorActionIds = secondaryEditorActions.map(function (a) { return a.id; });
        if (!arrays.equals(primaryEditorActionIds, this.currentPrimaryEditorActionIds) || !arrays.equals(secondaryEditorActionIds, this.currentSecondaryEditorActionIds)) {
            this.editorActionsToolbar.setActions(primaryEditorActions, secondaryEditorActions)();
            if (!this.showTabs) {
                this.editorActionsToolbar.addPrimaryAction(this.closeEditorAction)();
            }
            this.currentPrimaryEditorActionIds = primaryEditorActionIds;
            this.currentSecondaryEditorActionIds = secondaryEditorActionIds;
        }
    };
    TitleControl.prototype.clearEditorActionsToolbar = function () {
        this.editorActionsToolbar.setActions([], [])();
        this.currentPrimaryEditorActionIds = [];
        this.currentSecondaryEditorActionIds = [];
    };
    TitleControl.prototype.onContextMenu = function (identifier, e, node) {
        var _this = this;
        var anchor = node;
        if (e instanceof MouseEvent) {
            var event_1 = new mouseEvent_1.StandardMouseEvent(e);
            anchor = { x: event_1.posx, y: event_1.posy };
        }
        this.contextMenuService.showContextMenu({
            getAnchor: function () { return anchor; },
            getActions: function () { return winjs_base_1.TPromise.as(_this.getContextMenuActions(identifier)); },
            getActionsContext: function () { return identifier; },
            getKeyBinding: function (action) {
                var opts = _this.keybindingService.lookupKeybindings(action.id);
                if (opts.length > 0) {
                    return opts[0]; // only take the first one
                }
                return null;
            }
        });
    };
    TitleControl.prototype.getContextMenuActions = function (identifier) {
        var editor = identifier.editor, group = identifier.group;
        // Enablement
        this.closeOtherEditorsAction.enabled = group.count > 1;
        this.pinEditorAction.enabled = !group.isPinned(editor);
        this.closeRightEditorsAction.enabled = group.indexOf(editor) !== group.count - 1;
        // Actions: For all editors
        var actions = [
            this.closeEditorAction,
            this.closeOtherEditorsAction
        ];
        if (this.showTabs) {
            actions.push(this.closeRightEditorsAction);
        }
        actions.push(this.closeEditorsInGroupAction);
        if (this.previewEditors) {
            actions.push(new actionbar_1.Separator(), this.pinEditorAction);
        }
        return actions;
    };
    TitleControl.prototype.dispose = function () {
        lifecycle_1.dispose(this.toDispose);
        // Actions
        [
            this.splitEditorAction,
            this.showEditorsInGroupAction,
            this.closeEditorAction,
            this.closeRightEditorsAction,
            this.closeOtherEditorsAction,
            this.closeEditorsInGroupAction,
            this.pinEditorAction
        ].forEach(function (action) {
            action.dispose();
        });
        // Toolbar
        this.editorActionsToolbar.dispose();
    };
    TitleControl = __decorate([
        __param(0, contextView_1.IContextMenuService),
        __param(1, instantiation_1.IInstantiationService),
        __param(2, configuration_1.IConfigurationService),
        __param(3, editorService_1.IWorkbenchEditorService),
        __param(4, groupService_1.IEditorGroupService),
        __param(5, contextkey_1.IContextKeyService),
        __param(6, keybinding_1.IKeybindingService),
        __param(7, telemetry_1.ITelemetryService),
        __param(8, message_1.IMessageService),
        __param(9, actions_1.IMenuService),
        __param(10, quickOpenService_1.IQuickOpenService)
    ], TitleControl);
    return TitleControl;
}());
exports.TitleControl = TitleControl;
