/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
require('./media/editorpicker.css');
var winjs_base_1 = require('vs/base/common/winjs.base');
var nls = require('vs/nls');
var labels = require('vs/base/common/labels');
var errors = require('vs/base/common/errors');
var strings = require('vs/base/common/strings');
var quickOpen_1 = require('vs/base/parts/quickopen/common/quickOpen');
var quickOpenModel_1 = require('vs/base/parts/quickopen/browser/quickOpenModel');
var scorer = require('vs/base/common/scorer');
var modeService_1 = require('vs/editor/common/services/modeService');
var labels_1 = require('vs/workbench/browser/labels');
var modelService_1 = require('vs/editor/common/services/modelService');
var quickopen_1 = require('vs/workbench/browser/quickopen');
var editor_1 = require('vs/platform/editor/common/editor');
var groupService_1 = require('vs/workbench/services/group/common/groupService');
var editorService_1 = require('vs/workbench/services/editor/common/editorService');
var instantiation_1 = require('vs/platform/instantiation/common/instantiation');
var workspace_1 = require('vs/platform/workspace/common/workspace');
var editor_2 = require('vs/workbench/common/editor');
var EditorPickerEntry = (function (_super) {
    __extends(EditorPickerEntry, _super);
    function EditorPickerEntry(editor, _group, editorService, modeService, modelService, editorGroupService) {
        _super.call(this);
        this.editor = editor;
        this._group = _group;
        this.editorService = editorService;
        this.modeService = modeService;
        this.modelService = modelService;
        this.stacks = editorGroupService.getStacksModel();
    }
    EditorPickerEntry.prototype.getLabelOptions = function () {
        return {
            extraClasses: labels_1.getIconClasses(this.modelService, this.modeService, this.getResource()),
            italic: this._group.isPreview(this.editor)
        };
    };
    EditorPickerEntry.prototype.getLabel = function () {
        return this.editor.getName();
    };
    EditorPickerEntry.prototype.getIcon = function () {
        return this.editor.isDirty() ? 'dirty' : '';
    };
    Object.defineProperty(EditorPickerEntry.prototype, "group", {
        get: function () {
            return this._group;
        },
        enumerable: true,
        configurable: true
    });
    EditorPickerEntry.prototype.getResource = function () {
        var fileInput = editor_2.asFileEditorInput(this.editor, true);
        return fileInput && fileInput.getResource();
    };
    EditorPickerEntry.prototype.getAriaLabel = function () {
        return nls.localize('entryAriaLabel', "{0}, editor group picker", this.getLabel());
    };
    EditorPickerEntry.prototype.getDescription = function () {
        return this.editor.getDescription();
    };
    EditorPickerEntry.prototype.run = function (mode, context) {
        if (mode === quickOpen_1.Mode.OPEN) {
            return this.runOpen(context);
        }
        return _super.prototype.run.call(this, mode, context);
    };
    EditorPickerEntry.prototype.runOpen = function (context) {
        this.editorService.openEditor(this.editor, null, this.stacks.positionOfGroup(this.group)).done(null, errors.onUnexpectedError);
        return true;
    };
    EditorPickerEntry = __decorate([
        __param(2, editorService_1.IWorkbenchEditorService),
        __param(3, modeService_1.IModeService),
        __param(4, modelService_1.IModelService),
        __param(5, groupService_1.IEditorGroupService)
    ], EditorPickerEntry);
    return EditorPickerEntry;
}(quickOpenModel_1.QuickOpenEntryGroup));
exports.EditorPickerEntry = EditorPickerEntry;
var BaseEditorPicker = (function (_super) {
    __extends(BaseEditorPicker, _super);
    function BaseEditorPicker(instantiationService, contextService, editorService, editorGroupService) {
        _super.call(this);
        this.instantiationService = instantiationService;
        this.contextService = contextService;
        this.editorService = editorService;
        this.editorGroupService = editorGroupService;
        this.scorerCache = Object.create(null);
    }
    BaseEditorPicker.prototype.getResults = function (searchValue) {
        var _this = this;
        searchValue = searchValue.trim();
        var normalizedSearchValueLowercase = strings.stripWildcards(searchValue).toLowerCase();
        var editorEntries = this.getEditorEntries();
        if (!editorEntries.length) {
            return winjs_base_1.TPromise.as(null);
        }
        var stacks = this.editorGroupService.getStacksModel();
        var entries = editorEntries.filter(function (e) {
            if (!searchValue) {
                return true;
            }
            var resource = e.getResource();
            var targetToMatch = resource ? labels.getPathLabel(e.getResource(), _this.contextService) : e.getLabel();
            if (!scorer.matches(targetToMatch, normalizedSearchValueLowercase)) {
                return false;
            }
            var _a = quickOpenModel_1.QuickOpenEntry.highlight(e, searchValue, true /* fuzzy highlight */), labelHighlights = _a.labelHighlights, descriptionHighlights = _a.descriptionHighlights;
            e.setHighlights(labelHighlights, descriptionHighlights);
            return true;
        });
        // Sorting
        if (searchValue) {
            entries.sort(function (e1, e2) {
                if (e1.group !== e2.group) {
                    return stacks.positionOfGroup(e1.group) - stacks.positionOfGroup(e2.group);
                }
                return quickOpenModel_1.QuickOpenEntry.compareByScore(e1, e2, searchValue, normalizedSearchValueLowercase, _this.scorerCache);
            });
        }
        // Grouping (for more than one group)
        if (stacks.groups.length > 1) {
            var lastGroup_1;
            entries.forEach(function (e) {
                if (!lastGroup_1 || lastGroup_1 !== e.group) {
                    e.setGroupLabel(nls.localize('groupLabel', "Group: {0}", e.group.label));
                    e.setShowBorder(!!lastGroup_1);
                    lastGroup_1 = e.group;
                }
            });
        }
        return winjs_base_1.TPromise.as(new quickOpenModel_1.QuickOpenModel(entries));
    };
    BaseEditorPicker.prototype.onClose = function (canceled) {
        this.scorerCache = Object.create(null);
    };
    BaseEditorPicker = __decorate([
        __param(0, instantiation_1.IInstantiationService),
        __param(1, workspace_1.IWorkspaceContextService),
        __param(2, editorService_1.IWorkbenchEditorService),
        __param(3, groupService_1.IEditorGroupService)
    ], BaseEditorPicker);
    return BaseEditorPicker;
}(quickopen_1.QuickOpenHandler));
exports.BaseEditorPicker = BaseEditorPicker;
var EditorGroupPicker = (function (_super) {
    __extends(EditorGroupPicker, _super);
    function EditorGroupPicker() {
        _super.apply(this, arguments);
    }
    EditorGroupPicker.prototype.getEditorEntries = function () {
        var _this = this;
        var stacks = this.editorGroupService.getStacksModel();
        var group = stacks.groupAt(this.getPosition());
        if (!group) {
            return [];
        }
        return group.getEditors(true).map(function (editor, index) { return _this.instantiationService.createInstance(EditorPickerEntry, editor, group); });
    };
    EditorGroupPicker.prototype.getEmptyLabel = function (searchString) {
        if (searchString) {
            return nls.localize('noResultsFoundInGroup', "No matching opened editor found in group");
        }
        return nls.localize('noOpenedEditors', "List of opened editors is currently empty");
    };
    EditorGroupPicker.prototype.getAutoFocus = function (searchValue, quickNavigateConfiguration) {
        if (searchValue || !quickNavigateConfiguration) {
            return {
                autoFocusFirstEntry: true
            };
        }
        var stacks = this.editorGroupService.getStacksModel();
        var group = stacks.groupAt(this.getPosition());
        if (!group) {
            return _super.prototype.getAutoFocus.call(this, searchValue);
        }
        var isShiftNavigate = (quickNavigateConfiguration && quickNavigateConfiguration.keybindings.some(function (k) { return k.hasShift(); }));
        if (isShiftNavigate) {
            return {
                autoFocusLastEntry: true
            };
        }
        return {
            autoFocusFirstEntry: group.count === 1,
            autoFocusSecondEntry: group.count > 1
        };
    };
    return EditorGroupPicker;
}(BaseEditorPicker));
exports.EditorGroupPicker = EditorGroupPicker;
var LeftEditorGroupPicker = (function (_super) {
    __extends(LeftEditorGroupPicker, _super);
    function LeftEditorGroupPicker() {
        _super.apply(this, arguments);
    }
    LeftEditorGroupPicker.prototype.getPosition = function () {
        return editor_1.Position.LEFT;
    };
    return LeftEditorGroupPicker;
}(EditorGroupPicker));
exports.LeftEditorGroupPicker = LeftEditorGroupPicker;
var CenterEditorGroupPicker = (function (_super) {
    __extends(CenterEditorGroupPicker, _super);
    function CenterEditorGroupPicker() {
        _super.apply(this, arguments);
    }
    CenterEditorGroupPicker.prototype.getPosition = function () {
        var stacks = this.editorGroupService.getStacksModel();
        return stacks.groups.length > 2 ? editor_1.Position.CENTER : -1; // with 2 groups open, the center one is not available
    };
    return CenterEditorGroupPicker;
}(EditorGroupPicker));
exports.CenterEditorGroupPicker = CenterEditorGroupPicker;
var RightEditorGroupPicker = (function (_super) {
    __extends(RightEditorGroupPicker, _super);
    function RightEditorGroupPicker() {
        _super.apply(this, arguments);
    }
    RightEditorGroupPicker.prototype.getPosition = function () {
        var stacks = this.editorGroupService.getStacksModel();
        return stacks.groups.length > 2 ? editor_1.Position.RIGHT : editor_1.Position.CENTER;
    };
    return RightEditorGroupPicker;
}(EditorGroupPicker));
exports.RightEditorGroupPicker = RightEditorGroupPicker;
var AllEditorsPicker = (function (_super) {
    __extends(AllEditorsPicker, _super);
    function AllEditorsPicker() {
        _super.apply(this, arguments);
    }
    AllEditorsPicker.prototype.getEditorEntries = function () {
        var _this = this;
        var entries = [];
        var stacks = this.editorGroupService.getStacksModel();
        stacks.groups.forEach(function (group, position) {
            group.getEditors().forEach(function (editor, index) {
                entries.push(_this.instantiationService.createInstance(EditorPickerEntry, editor, group));
            });
        });
        return entries;
    };
    AllEditorsPicker.prototype.getEmptyLabel = function (searchString) {
        if (searchString) {
            return nls.localize('noResultsFound', "No matching opened editor found");
        }
        return nls.localize('noOpenedEditors', "List of opened editors is currently empty");
    };
    AllEditorsPicker.prototype.getAutoFocus = function (searchValue) {
        if (searchValue) {
            return {
                autoFocusFirstEntry: true
            };
        }
        return _super.prototype.getAutoFocus.call(this, searchValue);
    };
    return AllEditorsPicker;
}(BaseEditorPicker));
exports.AllEditorsPicker = AllEditorsPicker;
