/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var severity_1 = require('vs/base/common/severity');
var abstractExtensionService_1 = require('vs/platform/extensions/common/abstractExtensionService');
var extensionsRegistry_1 = require('vs/platform/extensions/common/extensionsRegistry');
var message_1 = require('vs/platform/message/common/message');
var threadService_1 = require('vs/workbench/services/thread/common/threadService');
var extHost_protocol_1 = require('./extHost.protocol');
var environment_1 = require('vs/platform/environment/common/environment');
/**
 * Represents a failed extension in the ext host.
 */
var MainProcessFailedExtension = (function (_super) {
    __extends(MainProcessFailedExtension, _super);
    function MainProcessFailedExtension() {
        _super.call(this, true);
    }
    return MainProcessFailedExtension;
}(abstractExtensionService_1.ActivatedExtension));
/**
 * Represents an extension that was successfully loaded or an
 * empty extension in the ext host.
 */
var MainProcessSuccessExtension = (function (_super) {
    __extends(MainProcessSuccessExtension, _super);
    function MainProcessSuccessExtension() {
        _super.call(this, false);
    }
    return MainProcessSuccessExtension;
}(abstractExtensionService_1.ActivatedExtension));
function messageWithSource(msg) {
    return (msg.source ? '[' + msg.source + ']: ' : '') + msg.message;
}
var MainProcessExtensionService = (function (_super) {
    __extends(MainProcessExtensionService, _super);
    /**
     * This class is constructed manually because it is a service, so it doesn't use any ctor injection
     */
    function MainProcessExtensionService(threadService, messageService, environmentService) {
        var _this = this;
        _super.call(this, false);
        this.environmentService = environmentService;
        this._isDev = !environmentService.isBuilt || !!environmentService.extensionDevelopmentPath;
        this._messageService = messageService;
        this._threadService = threadService;
        this._proxy = this._threadService.get(extHost_protocol_1.ExtHostContext.ExtHostExtensionService);
        this._extensionsStatus = {};
        extensionsRegistry_1.ExtensionsRegistry.handleExtensionPoints(function (msg) { return _this._handleMessage(msg); });
    }
    MainProcessExtensionService.prototype._handleMessage = function (msg) {
        this._showMessage(msg.type, messageWithSource(msg));
        if (!this._extensionsStatus[msg.source]) {
            this._extensionsStatus[msg.source] = { messages: [] };
        }
        this._extensionsStatus[msg.source].messages.push(msg);
    };
    MainProcessExtensionService.prototype.$localShowMessage = function (severity, msg) {
        var messageShown = false;
        if (severity === severity_1.default.Error || severity === severity_1.default.Warning) {
            if (this._isDev) {
                // Only show nasty intrusive messages if doing extension development.
                this._messageService.show(severity, msg);
                messageShown = true;
            }
        }
        if (!messageShown) {
            switch (severity) {
                case severity_1.default.Error:
                    console.error(msg);
                    break;
                case severity_1.default.Warning:
                    console.warn(msg);
                    break;
                default:
                    console.log(msg);
            }
        }
    };
    // -- overwriting AbstractExtensionService
    MainProcessExtensionService.prototype.getExtensionsStatus = function () {
        return this._extensionsStatus;
    };
    MainProcessExtensionService.prototype._showMessage = function (severity, msg) {
        this._proxy.$localShowMessage(severity, msg);
        this.$localShowMessage(severity, msg);
    };
    MainProcessExtensionService.prototype._createFailedExtension = function () {
        return new MainProcessFailedExtension();
    };
    MainProcessExtensionService.prototype._actualActivateExtension = function (extensionDescription) {
        var _this = this;
        // redirect extension activation to the extension host
        return this._proxy.$activateExtension(extensionDescription).then(function (_) {
            // the extension host calls $onExtensionActivated, where we write to `_activatedExtensions`
            return _this._activatedExtensions[extensionDescription.id];
        });
    };
    // -- called by extension host
    MainProcessExtensionService.prototype.$onExtensionHostReady = function (extensionDescriptions, messages) {
        var _this = this;
        extensionsRegistry_1.ExtensionsRegistry.registerExtensions(extensionDescriptions);
        messages.forEach(function (entry) { return _this._handleMessage(entry); });
        this._triggerOnReady();
        return;
    };
    MainProcessExtensionService.prototype.$onExtensionActivated = function (extensionId) {
        this._activatedExtensions[extensionId] = new MainProcessSuccessExtension();
    };
    MainProcessExtensionService.prototype.$onExtensionActivationFailed = function (extensionId) {
        this._activatedExtensions[extensionId] = new MainProcessFailedExtension();
    };
    MainProcessExtensionService = __decorate([
        __param(0, threadService_1.IThreadService),
        __param(1, message_1.IMessageService),
        __param(2, environment_1.IEnvironmentService)
    ], MainProcessExtensionService);
    return MainProcessExtensionService;
}(abstractExtensionService_1.AbstractExtensionService));
exports.MainProcessExtensionService = MainProcessExtensionService;
