/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var winjs_base_1 = require("vs/base/common/winjs.base");
var async_1 = require("vs/base/common/async");
var strings = require("vs/base/common/strings");
var codeEditorService_1 = require("vs/editor/common/services/codeEditorService");
var threadService_1 = require("vs/workbench/services/thread/common/threadService");
var textfiles_1 = require("vs/workbench/services/textfile/common/textfiles");
var instantiation_1 = require("vs/platform/instantiation/common/instantiation");
var telemetry_1 = require("vs/platform/telemetry/common/telemetry");
var range_1 = require("vs/editor/common/core/range");
var selection_1 = require("vs/editor/common/core/selection");
var position_1 = require("vs/editor/common/core/position");
var trimTrailingWhitespaceCommand_1 = require("vs/editor/common/commands/trimTrailingWhitespaceCommand");
var format_1 = require("vs/editor/contrib/format/common/format");
var formatCommand_1 = require("vs/editor/contrib/format/common/formatCommand");
var configuration_1 = require("vs/platform/configuration/common/configuration");
var textFileEditorModel_1 = require("vs/workbench/services/textfile/common/textFileEditorModel");
var extHost_protocol_1 = require("./extHost.protocol");
var editOperation_1 = require("vs/editor/common/core/editOperation");
var TrimWhitespaceParticipant = (function () {
    function TrimWhitespaceParticipant(configurationService, codeEditorService) {
        this.configurationService = configurationService;
        this.codeEditorService = codeEditorService;
        this.name = 'TrimWhitespaceParticipant';
        // Nothing
    }
    TrimWhitespaceParticipant.prototype.participate = function (model, env) {
        if (this.configurationService.lookup('files.trimTrailingWhitespace').value) {
            this.doTrimTrailingWhitespace(model.textEditorModel, env.reason === textfiles_1.SaveReason.AUTO);
        }
    };
    TrimWhitespaceParticipant.prototype.doTrimTrailingWhitespace = function (model, isAutoSaved) {
        var prevSelection = [new selection_1.Selection(1, 1, 1, 1)];
        var cursors = [];
        var editor = findEditor(model, this.codeEditorService);
        if (editor) {
            // Find `prevSelection` in any case do ensure a good undo stack when pushing the edit
            // Collect active cursors in `cursors` only if `isAutoSaved` to avoid having the cursors jump
            prevSelection = editor.getSelections();
            if (isAutoSaved) {
                cursors.push.apply(cursors, prevSelection.map(function (s) { return new position_1.Position(s.positionLineNumber, s.positionColumn); }));
            }
        }
        var ops = trimTrailingWhitespaceCommand_1.trimTrailingWhitespace(model, cursors);
        if (!ops.length) {
            return; // Nothing to do
        }
        model.pushEditOperations(prevSelection, ops, function (edits) { return prevSelection; });
    };
    return TrimWhitespaceParticipant;
}());
TrimWhitespaceParticipant = __decorate([
    __param(0, configuration_1.IConfigurationService),
    __param(1, codeEditorService_1.ICodeEditorService)
], TrimWhitespaceParticipant);
function findEditor(model, codeEditorService) {
    if (model.isAttachedToEditor()) {
        var allEditors = codeEditorService.listCodeEditors();
        for (var i = 0, len = allEditors.length; i < len; i++) {
            var editor = allEditors[i];
            var editorModel = editor.getModel();
            if (!editorModel) {
                continue; // empty editor
            }
            if (model === editorModel) {
                return editor;
            }
        }
    }
    return null;
}
var FinalNewLineParticipant = (function () {
    function FinalNewLineParticipant(configurationService, codeEditorService) {
        this.configurationService = configurationService;
        this.codeEditorService = codeEditorService;
        this.name = 'FinalNewLineParticipant';
        // Nothing
    }
    FinalNewLineParticipant.prototype.participate = function (model, env) {
        if (this.configurationService.lookup('files.insertFinalNewline').value) {
            this.doInsertFinalNewLine(model.textEditorModel);
        }
    };
    FinalNewLineParticipant.prototype.doInsertFinalNewLine = function (model) {
        var lineCount = model.getLineCount();
        var lastLine = model.getLineContent(lineCount);
        var lastLineIsEmptyOrWhitespace = strings.lastNonWhitespaceIndex(lastLine) === -1;
        if (!lineCount || lastLineIsEmptyOrWhitespace) {
            return;
        }
        var prevSelection = [new selection_1.Selection(1, 1, 1, 1)];
        var editor = findEditor(model, this.codeEditorService);
        if (editor) {
            prevSelection = editor.getSelections();
        }
        model.pushEditOperations(prevSelection, [editOperation_1.EditOperation.insert(new position_1.Position(lineCount, model.getLineMaxColumn(lineCount)), model.getEOL())], function (edits) { return prevSelection; });
        if (editor) {
            editor.setSelections(prevSelection);
        }
    };
    return FinalNewLineParticipant;
}());
FinalNewLineParticipant = __decorate([
    __param(0, configuration_1.IConfigurationService),
    __param(1, codeEditorService_1.ICodeEditorService)
], FinalNewLineParticipant);
exports.FinalNewLineParticipant = FinalNewLineParticipant;
var FormatOnSaveParticipant = (function () {
    function FormatOnSaveParticipant(_editorService, _configurationService) {
        this._editorService = _editorService;
        this._configurationService = _configurationService;
        this.name = 'FormatOnSaveParticipant';
        // Nothing
    }
    FormatOnSaveParticipant.prototype.participate = function (editorModel, env) {
        var _this = this;
        if (env.reason === textfiles_1.SaveReason.AUTO
            || !this._configurationService.lookup('editor.formatOnSave').value) {
            return;
        }
        var model = editorModel.textEditorModel;
        var versionNow = model.getVersionId();
        var _a = model.getOptions(), tabSize = _a.tabSize, insertSpaces = _a.insertSpaces;
        return new winjs_base_1.TPromise(function (resolve, reject) {
            setTimeout(reject, 750);
            format_1.getDocumentFormattingEdits(model, { tabSize: tabSize, insertSpaces: insertSpaces }).then(resolve, reject);
        }).then(function (edits) {
            if (edits && versionNow === model.getVersionId()) {
                var editor = _this._findEditor(model);
                if (editor) {
                    _this._editsWithEditor(editor, edits);
                }
                else {
                    _this._editWithModel(model, edits);
                }
            }
        });
    };
    FormatOnSaveParticipant.prototype._editsWithEditor = function (editor, edits) {
        editor.executeCommand('files.formatOnSave', new formatCommand_1.EditOperationsCommand(edits, editor.getSelection()));
    };
    FormatOnSaveParticipant.prototype._editWithModel = function (model, edits) {
        var range = edits[0].range;
        var initialSelection = new selection_1.Selection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn);
        model.pushEditOperations([initialSelection], edits.map(FormatOnSaveParticipant._asIdentEdit), function (undoEdits) {
            for (var _i = 0, undoEdits_1 = undoEdits; _i < undoEdits_1.length; _i++) {
                var range_2 = undoEdits_1[_i].range;
                if (range_1.Range.areIntersectingOrTouching(range_2, initialSelection)) {
                    return [new selection_1.Selection(range_2.startLineNumber, range_2.startColumn, range_2.endLineNumber, range_2.endColumn)];
                }
            }
        });
    };
    FormatOnSaveParticipant._asIdentEdit = function (_a) {
        var text = _a.text, range = _a.range;
        return {
            text: text,
            range: range_1.Range.lift(range),
            identifier: undefined,
            forceMoveMarkers: true
        };
    };
    FormatOnSaveParticipant.prototype._findEditor = function (model) {
        if (!model.isAttachedToEditor()) {
            return;
        }
        var candidate;
        for (var _i = 0, _a = this._editorService.listCodeEditors(); _i < _a.length; _i++) {
            var editor = _a[_i];
            if (editor.getModel() === model) {
                if (editor.isFocused()) {
                    return editor;
                }
                else {
                    candidate = editor;
                }
            }
        }
        return candidate;
    };
    return FormatOnSaveParticipant;
}());
FormatOnSaveParticipant = __decorate([
    __param(0, codeEditorService_1.ICodeEditorService),
    __param(1, configuration_1.IConfigurationService)
], FormatOnSaveParticipant);
var ExtHostSaveParticipant = (function () {
    function ExtHostSaveParticipant(threadService) {
        this.name = 'ExtHostSaveParticipant';
        this._proxy = threadService.get(extHost_protocol_1.ExtHostContext.ExtHostDocumentSaveParticipant);
    }
    ExtHostSaveParticipant.prototype.participate = function (editorModel, env) {
        var _this = this;
        return new winjs_base_1.TPromise(function (resolve, reject) {
            setTimeout(reject, 1750);
            _this._proxy.$participateInSave(editorModel.getResource(), env.reason).then(function (values) {
                for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {
                    var success = values_1[_i];
                    if (!success) {
                        return winjs_base_1.TPromise.wrapError('listener failed');
                    }
                }
            }).then(resolve, reject);
        });
    };
    return ExtHostSaveParticipant;
}());
ExtHostSaveParticipant = __decorate([
    __param(0, threadService_1.IThreadService)
], ExtHostSaveParticipant);
// The save participant can change a model before its saved to support various scenarios like trimming trailing whitespace
var SaveParticipant = (function () {
    function SaveParticipant(_telemetryService, instantiationService, threadService) {
        this._telemetryService = _telemetryService;
        this._saveParticipants = [
            instantiationService.createInstance(TrimWhitespaceParticipant),
            instantiationService.createInstance(FinalNewLineParticipant),
            instantiationService.createInstance(FormatOnSaveParticipant),
            instantiationService.createInstance(ExtHostSaveParticipant)
        ];
        // Hook into model
        textFileEditorModel_1.TextFileEditorModel.setSaveParticipant(this);
    }
    SaveParticipant.prototype.participate = function (model, env) {
        var _this = this;
        var stats = Object.create(null);
        var promiseFactory = this._saveParticipants.map(function (p) { return function () {
            var name = p.name;
            var t1 = Date.now();
            return winjs_base_1.TPromise.as(p.participate(model, env)).then(function () {
                stats["Success-" + name] = Date.now() - t1;
            }, function (err) {
                stats["Failure-" + name] = Date.now() - t1;
                // console.error(err);
            });
        }; });
        return async_1.sequence(promiseFactory).then(function () {
            _this._telemetryService.publicLog('saveParticipantStats', stats);
        });
    };
    return SaveParticipant;
}());
SaveParticipant = __decorate([
    __param(0, telemetry_1.ITelemetryService),
    __param(1, instantiation_1.IInstantiationService),
    __param(2, threadService_1.IThreadService)
], SaveParticipant);
exports.SaveParticipant = SaveParticipant;
