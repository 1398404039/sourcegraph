/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var lifecycle_1 = require("vs/base/common/lifecycle");
var terminal_1 = require("vs/workbench/parts/terminal/common/terminal");
var threadService_1 = require("vs/workbench/services/thread/common/threadService");
var winjs_base_1 = require("vs/base/common/winjs.base");
var extHost_protocol_1 = require("./extHost.protocol");
var MainThreadTerminalService = (function (_super) {
    __extends(MainThreadTerminalService, _super);
    function MainThreadTerminalService(threadService, terminalService) {
        var _this = _super.call(this) || this;
        _this.terminalService = terminalService;
        _this._proxy = threadService.get(extHost_protocol_1.ExtHostContext.ExtHostTerminalService);
        _this._toDispose = [];
        _this._toDispose.push(terminalService.onInstanceDisposed(function (terminalInstance) { return _this._onTerminalDisposed(terminalInstance); }));
        _this._toDispose.push(terminalService.onInstanceProcessIdReady(function (terminalInstance) { return _this._onTerminalProcessIdReady(terminalInstance); }));
        return _this;
    }
    MainThreadTerminalService.prototype.dispose = function () {
        this._toDispose = lifecycle_1.dispose(this._toDispose);
    };
    MainThreadTerminalService.prototype.$createTerminal = function (name, shellPath, shellArgs) {
        return winjs_base_1.TPromise.as(this.terminalService.createInstance(name, shellPath, shellArgs).id);
    };
    MainThreadTerminalService.prototype.$show = function (terminalId, preserveFocus) {
        var terminalInstance = this.terminalService.getInstanceFromId(terminalId);
        if (terminalInstance) {
            this.terminalService.setActiveInstance(terminalInstance);
            this.terminalService.showPanel(!preserveFocus);
        }
    };
    MainThreadTerminalService.prototype.$hide = function (terminalId) {
        if (this.terminalService.getActiveInstance().id === terminalId) {
            this.terminalService.hidePanel();
        }
    };
    MainThreadTerminalService.prototype.$dispose = function (terminalId) {
        var terminalInstance = this.terminalService.getInstanceFromId(terminalId);
        if (terminalInstance) {
            terminalInstance.dispose();
        }
    };
    MainThreadTerminalService.prototype.$sendText = function (terminalId, text, addNewLine) {
        var terminalInstance = this.terminalService.getInstanceFromId(terminalId);
        if (terminalInstance) {
            terminalInstance.sendText(text, addNewLine);
        }
    };
    MainThreadTerminalService.prototype._onTerminalDisposed = function (terminalInstance) {
        this._proxy.$acceptTerminalClosed(terminalInstance.id);
    };
    MainThreadTerminalService.prototype._onTerminalProcessIdReady = function (terminalInstance) {
        this._proxy.$acceptTerminalProcessId(terminalInstance.id, terminalInstance.processId);
    };
    return MainThreadTerminalService;
}(extHost_protocol_1.MainThreadTerminalServiceShape));
MainThreadTerminalService = __decorate([
    __param(0, threadService_1.IThreadService),
    __param(1, terminal_1.ITerminalService)
], MainThreadTerminalService);
exports.MainThreadTerminalService = MainThreadTerminalService;
