/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var statusbar_1 = require('vs/platform/statusbar/common/statusbar');
var extHost_protocol_1 = require('./extHost.protocol');
var MainThreadStatusBar = (function (_super) {
    __extends(MainThreadStatusBar, _super);
    function MainThreadStatusBar(statusbarService) {
        _super.call(this);
        this.statusbarService = statusbarService;
        this.mapIdToDisposable = Object.create(null);
    }
    MainThreadStatusBar.prototype.$setEntry = function (id, text, tooltip, command, color, alignment, priority) {
        // Dispose any old
        this.$dispose(id);
        // Add new
        var disposeable = this.statusbarService.addEntry({ text: text, tooltip: tooltip, command: command, color: color }, alignment, priority);
        this.mapIdToDisposable[id] = disposeable;
    };
    MainThreadStatusBar.prototype.$dispose = function (id) {
        var disposeable = this.mapIdToDisposable[id];
        if (disposeable) {
            disposeable.dispose();
        }
        delete this.mapIdToDisposable[id];
    };
    MainThreadStatusBar = __decorate([
        __param(0, statusbar_1.IStatusbarService)
    ], MainThreadStatusBar);
    return MainThreadStatusBar;
}(extHost_protocol_1.MainThreadStatusBarShape));
exports.MainThreadStatusBar = MainThreadStatusBar;
