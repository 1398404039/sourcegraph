/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var threadService_1 = require('vs/workbench/services/thread/common/threadService');
var modes = require('vs/editor/common/modes');
var search_1 = require('vs/workbench/parts/search/common/search');
var async_1 = require('vs/base/common/async');
var extHost_protocol_1 = require('./extHost.protocol');
var languageConfigurationRegistry_1 = require('vs/editor/common/modes/languageConfigurationRegistry');
var gc_signals_1 = require('gc-signals');
var MainThreadLanguageFeatures = (function (_super) {
    __extends(MainThreadLanguageFeatures, _super);
    function MainThreadLanguageFeatures(threadService) {
        _super.call(this);
        this._registrations = Object.create(null);
        this._proxy = threadService.get(extHost_protocol_1.ExtHostContext.ExtHostLanguageFeatures);
    }
    MainThreadLanguageFeatures.prototype.$unregister = function (handle) {
        var registration = this._registrations[handle];
        if (registration) {
            registration.dispose();
            delete this._registrations[handle];
        }
        return undefined;
    };
    // --- outline
    MainThreadLanguageFeatures.prototype.$registerOutlineSupport = function (handle, selector) {
        var _this = this;
        this._registrations[handle] = modes.DocumentSymbolProviderRegistry.register(selector, {
            provideDocumentSymbols: function (model, token) {
                return async_1.wireCancellationToken(token, _this._proxy.$provideDocumentSymbols(handle, model.uri));
            }
        });
        return undefined;
    };
    // --- code lens
    MainThreadLanguageFeatures.prototype.$registerCodeLensSupport = function (handle, selector) {
        var _this = this;
        this._registrations[handle] = modes.CodeLensProviderRegistry.register(selector, {
            provideCodeLenses: function (model, token) {
                return async_1.wireCancellationToken(token, _this._proxy.$provideCodeLenses(handle, model.uri));
            },
            resolveCodeLens: function (model, codeLens, token) {
                return async_1.wireCancellationToken(token, _this._proxy.$resolveCodeLens(handle, model.uri, codeLens));
            }
        });
        return undefined;
    };
    // --- declaration
    MainThreadLanguageFeatures.prototype.$registerDeclaractionSupport = function (handle, selector) {
        var _this = this;
        this._registrations[handle] = modes.DefinitionProviderRegistry.register(selector, {
            provideDefinition: function (model, position, token) {
                return async_1.wireCancellationToken(token, _this._proxy.$provideDefinition(handle, model.uri, position));
            }
        });
        return undefined;
    };
    // --- extra info
    MainThreadLanguageFeatures.prototype.$registerHoverProvider = function (handle, selector) {
        var _this = this;
        this._registrations[handle] = modes.HoverProviderRegistry.register(selector, {
            provideHover: function (model, position, token) {
                return async_1.wireCancellationToken(token, _this._proxy.$provideHover(handle, model.uri, position));
            }
        });
        return undefined;
    };
    // --- occurrences
    MainThreadLanguageFeatures.prototype.$registerDocumentHighlightProvider = function (handle, selector) {
        var _this = this;
        this._registrations[handle] = modes.DocumentHighlightProviderRegistry.register(selector, {
            provideDocumentHighlights: function (model, position, token) {
                return async_1.wireCancellationToken(token, _this._proxy.$provideDocumentHighlights(handle, model.uri, position));
            }
        });
        return undefined;
    };
    // --- references
    MainThreadLanguageFeatures.prototype.$registerReferenceSupport = function (handle, selector) {
        var _this = this;
        this._registrations[handle] = modes.ReferenceProviderRegistry.register(selector, {
            provideReferences: function (model, position, context, token) {
                return async_1.wireCancellationToken(token, _this._proxy.$provideReferences(handle, model.uri, position, context));
            }
        });
        return undefined;
    };
    // --- quick fix
    MainThreadLanguageFeatures.prototype.$registerQuickFixSupport = function (handle, selector) {
        var _this = this;
        this._registrations[handle] = modes.CodeActionProviderRegistry.register(selector, {
            provideCodeActions: function (model, range, token) {
                return async_1.wireCancellationToken(token, _this._proxy.$provideCodeActions(handle, model.uri, range));
            }
        });
        return undefined;
    };
    // --- formatting
    MainThreadLanguageFeatures.prototype.$registerDocumentFormattingSupport = function (handle, selector) {
        var _this = this;
        this._registrations[handle] = modes.DocumentFormattingEditProviderRegistry.register(selector, {
            provideDocumentFormattingEdits: function (model, options, token) {
                return async_1.wireCancellationToken(token, _this._proxy.$provideDocumentFormattingEdits(handle, model.uri, options));
            }
        });
        return undefined;
    };
    MainThreadLanguageFeatures.prototype.$registerRangeFormattingSupport = function (handle, selector) {
        var _this = this;
        this._registrations[handle] = modes.DocumentRangeFormattingEditProviderRegistry.register(selector, {
            provideDocumentRangeFormattingEdits: function (model, range, options, token) {
                return async_1.wireCancellationToken(token, _this._proxy.$provideDocumentRangeFormattingEdits(handle, model.uri, range, options));
            }
        });
        return undefined;
    };
    MainThreadLanguageFeatures.prototype.$registerOnTypeFormattingSupport = function (handle, selector, autoFormatTriggerCharacters) {
        var _this = this;
        this._registrations[handle] = modes.OnTypeFormattingEditProviderRegistry.register(selector, {
            autoFormatTriggerCharacters: autoFormatTriggerCharacters,
            provideOnTypeFormattingEdits: function (model, position, ch, options, token) {
                return async_1.wireCancellationToken(token, _this._proxy.$provideOnTypeFormattingEdits(handle, model.uri, position, ch, options));
            }
        });
        return undefined;
    };
    // --- navigate type
    MainThreadLanguageFeatures.prototype.$registerNavigateTypeSupport = function (handle) {
        var _this = this;
        this._registrations[handle] = search_1.WorkspaceSymbolProviderRegistry.register({
            provideWorkspaceSymbols: function (search) {
                return _this._proxy.$provideWorkspaceSymbols(handle, search).then(function (result) {
                    if (result) {
                        for (var _i = 0, result_1 = result; _i < result_1.length; _i++) {
                            var item = result_1[_i];
                            gc_signals_1.trackGarbageCollection(item, extHost_protocol_1.ObjectIdentifier.get(item));
                        }
                    }
                    return result;
                });
            },
            resolveWorkspaceSymbol: function (item) {
                return _this._proxy.$resolveWorkspaceSymbol(handle, item);
            }
        });
        return undefined;
    };
    // --- rename
    MainThreadLanguageFeatures.prototype.$registerRenameSupport = function (handle, selector) {
        var _this = this;
        this._registrations[handle] = modes.RenameProviderRegistry.register(selector, {
            provideRenameEdits: function (model, position, newName, token) {
                return async_1.wireCancellationToken(token, _this._proxy.$provideRenameEdits(handle, model.uri, position, newName));
            }
        });
        return undefined;
    };
    // --- suggest
    MainThreadLanguageFeatures.prototype.$registerSuggestSupport = function (handle, selector, triggerCharacters) {
        var _this = this;
        this._registrations[handle] = modes.SuggestRegistry.register(selector, {
            triggerCharacters: triggerCharacters,
            provideCompletionItems: function (model, position, token) {
                return async_1.wireCancellationToken(token, _this._proxy.$provideCompletionItems(handle, model.uri, position)).then(function (result) {
                    if (result && result.suggestions) {
                        for (var _i = 0, _a = result.suggestions; _i < _a.length; _i++) {
                            var suggestion = _a[_i];
                            gc_signals_1.trackGarbageCollection(suggestion, extHost_protocol_1.ObjectIdentifier.get(suggestion));
                        }
                    }
                    return result;
                });
            },
            resolveCompletionItem: function (model, position, suggestion, token) {
                return async_1.wireCancellationToken(token, _this._proxy.$resolveCompletionItem(handle, model.uri, position, suggestion));
            }
        });
        return undefined;
    };
    // --- parameter hints
    MainThreadLanguageFeatures.prototype.$registerSignatureHelpProvider = function (handle, selector, triggerCharacter) {
        var _this = this;
        this._registrations[handle] = modes.SignatureHelpProviderRegistry.register(selector, {
            signatureHelpTriggerCharacters: triggerCharacter,
            provideSignatureHelp: function (model, position, token) {
                return async_1.wireCancellationToken(token, _this._proxy.$provideSignatureHelp(handle, model.uri, position));
            }
        });
        return undefined;
    };
    // --- links
    MainThreadLanguageFeatures.prototype.$registerDocumentLinkProvider = function (handle, selector) {
        var _this = this;
        this._registrations[handle] = modes.LinkProviderRegistry.register(selector, {
            provideLinks: function (model, token) {
                return async_1.wireCancellationToken(token, _this._proxy.$provideDocumentLinks(handle, model.uri));
            },
            resolveLink: function (link, token) {
                return async_1.wireCancellationToken(token, _this._proxy.$resolveDocumentLink(handle, link));
            }
        });
        return undefined;
    };
    // --- configuration
    MainThreadLanguageFeatures.prototype.$setLanguageConfiguration = function (handle, languageId, configuration) {
        if (configuration.__characterPairSupport) {
            configuration.autoClosingPairs = configuration.__characterPairSupport.autoClosingPairs;
        }
        this._registrations[handle] = languageConfigurationRegistry_1.LanguageConfigurationRegistry.register(languageId, configuration);
        return undefined;
    };
    MainThreadLanguageFeatures = __decorate([
        __param(0, threadService_1.IThreadService)
    ], MainThreadLanguageFeatures);
    return MainThreadLanguageFeatures;
}(extHost_protocol_1.MainThreadLanguageFeaturesShape));
exports.MainThreadLanguageFeatures = MainThreadLanguageFeatures;
