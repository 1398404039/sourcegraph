/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var winjs_base_1 = require('vs/base/common/winjs.base');
var async_1 = require('vs/base/common/async');
var cancellation_1 = require('vs/base/common/cancellation');
var extHost_protocol_1 = require('./extHost.protocol');
var ExtHostQuickOpen = (function (_super) {
    __extends(ExtHostQuickOpen, _super);
    function ExtHostQuickOpen(threadService) {
        _super.call(this);
        this._proxy = threadService.get(extHost_protocol_1.MainContext.MainThreadQuickOpen);
    }
    ExtHostQuickOpen.prototype.showQuickPick = function (itemsOrItemsPromise, options, token) {
        var _this = this;
        if (token === void 0) { token = cancellation_1.CancellationToken.None; }
        // clear state from last invocation
        this._onDidSelectItem = undefined;
        var itemsPromise = winjs_base_1.TPromise.wrap(itemsOrItemsPromise);
        var quickPickWidget = this._proxy.$show({
            autoFocus: { autoFocusFirstEntry: true },
            placeHolder: options && options.placeHolder,
            matchOnDescription: options && options.matchOnDescription,
            matchOnDetail: options && options.matchOnDetail,
            ignoreFocusLost: options && options.ignoreFocusOut
        });
        var promise = itemsPromise.then(function (items) {
            var pickItems = [];
            for (var handle = 0; handle < items.length; handle++) {
                var item = items[handle];
                var label = void 0;
                var description = void 0;
                var detail = void 0;
                if (typeof item === 'string') {
                    label = item;
                }
                else {
                    label = item.label;
                    description = item.description;
                    detail = item.detail;
                }
                pickItems.push({
                    label: label,
                    description: description,
                    handle: handle,
                    detail: detail
                });
            }
            // handle selection changes
            if (options && typeof options.onDidSelectItem === 'function') {
                _this._onDidSelectItem = function (handle) {
                    options.onDidSelectItem(items[handle]);
                };
            }
            // show items
            _this._proxy.$setItems(pickItems);
            return quickPickWidget.then(function (handle) {
                if (typeof handle === 'number') {
                    return items[handle];
                }
            });
        }, function (err) {
            _this._proxy.$setError(err);
            return winjs_base_1.TPromise.wrapError(err);
        });
        return async_1.wireCancellationToken(token, promise, true);
    };
    ExtHostQuickOpen.prototype.$onItemSelected = function (handle) {
        if (this._onDidSelectItem) {
            this._onDidSelectItem(handle);
        }
    };
    // ---- input
    ExtHostQuickOpen.prototype.showInput = function (options, token) {
        if (token === void 0) { token = cancellation_1.CancellationToken.None; }
        // global validate fn used in callback below
        this._validateInput = options && options.validateInput;
        var promise = this._proxy.$input(options, typeof this._validateInput === 'function');
        return async_1.wireCancellationToken(token, promise, true);
    };
    ExtHostQuickOpen.prototype.$validateInput = function (input) {
        if (this._validateInput) {
            return winjs_base_1.TPromise.as(this._validateInput(input));
        }
    };
    return ExtHostQuickOpen;
}(extHost_protocol_1.ExtHostQuickOpenShape));
exports.ExtHostQuickOpen = ExtHostQuickOpen;
