/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var extHost_protocol_1 = require('./extHost.protocol');
var ExtHostHeapService = (function (_super) {
    __extends(ExtHostHeapService, _super);
    function ExtHostHeapService() {
        _super.apply(this, arguments);
        this._data = Object.create(null);
        this._callbacks = Object.create(null);
    }
    ExtHostHeapService.prototype.keep = function (obj, callback) {
        var id = ExtHostHeapService._idPool++;
        this._data[id] = obj;
        if (typeof callback === 'function') {
            this._callbacks[id] = callback;
        }
        return id;
    };
    ExtHostHeapService.prototype.delete = function (id) {
        delete this._callbacks[id];
        return this._data[id];
    };
    ExtHostHeapService.prototype.get = function (id) {
        return this._data[id];
    };
    ExtHostHeapService.prototype.$onGarbageCollection = function (ids) {
        for (var _i = 0, ids_1 = ids; _i < ids_1.length; _i++) {
            var id = ids_1[_i];
            setTimeout(this._callbacks[id]);
            this.delete(id);
        }
    };
    ExtHostHeapService._idPool = 0;
    return ExtHostHeapService;
}(extHost_protocol_1.ExtHostHeapServiceShape));
exports.ExtHostHeapService = ExtHostHeapService;
