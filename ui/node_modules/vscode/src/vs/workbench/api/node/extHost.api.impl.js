/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var event_1 = require('vs/base/common/event');
var languageSelector_1 = require('vs/editor/common/modes/languageSelector');
var Platform = require('vs/base/common/platform');
var errors = require('vs/base/common/errors');
var product_1 = require('vs/platform/product');
var package_1 = require('vs/platform/package');
var extHostFileSystemEventService_1 = require('vs/workbench/api/node/extHostFileSystemEventService');
var extHostDocuments_1 = require('vs/workbench/api/node/extHostDocuments');
var extHostDocumentSaveParticipant_1 = require('vs/workbench/api/node/extHostDocumentSaveParticipant');
var extHostConfiguration_1 = require('vs/workbench/api/node/extHostConfiguration');
var extHostDiagnostics_1 = require('vs/workbench/api/node/extHostDiagnostics');
var extHostWorkspace_1 = require('vs/workbench/api/node/extHostWorkspace');
var extHostQuickOpen_1 = require('vs/workbench/api/node/extHostQuickOpen');
var extHostHeapService_1 = require('vs/workbench/api/node/extHostHeapService');
var extHostStatusBar_1 = require('vs/workbench/api/node/extHostStatusBar');
var extHostCommands_1 = require('vs/workbench/api/node/extHostCommands');
var extHostOutputService_1 = require('vs/workbench/api/node/extHostOutputService');
var extHostTerminalService_1 = require('vs/workbench/api/node/extHostTerminalService');
var extHostMessageService_1 = require('vs/workbench/api/node/extHostMessageService');
var extHostEditors_1 = require('vs/workbench/api/node/extHostEditors');
var extHostLanguages_1 = require('vs/workbench/api/node/extHostLanguages');
var extHostLanguageFeatures_1 = require('vs/workbench/api/node/extHostLanguageFeatures');
var ExtHostTypeConverters = require('vs/workbench/api/node/extHostTypeConverters');
var extHostApiCommands_1 = require('vs/workbench/api/node/extHostApiCommands');
var extHostTypes = require('vs/workbench/api/node/extHostTypes');
var Modes = require('vs/editor/common/modes');
var uri_1 = require('vs/base/common/uri');
var severity_1 = require('vs/base/common/severity');
var EditorCommon = require('vs/editor/common/editorCommon');
var extensionsRegistry_1 = require('vs/platform/extensions/common/extensionsRegistry');
var cancellation_1 = require('vs/base/common/cancellation');
var paths = require('vs/base/common/paths');
var extHost_protocol_1 = require('./extHost.protocol');
/**
 * This class implements the API described in vscode.d.ts,
 * for the case of the extensionHost host process
 */
var ExtHostAPIImplementation = (function () {
    function ExtHostAPIImplementation(threadService, extensionService, contextService, telemetryService) {
        // Addressable instances
        var col = new extHost_protocol_1.InstanceCollection();
        var extHostHeapMonitor = col.define(extHost_protocol_1.ExtHostContext.ExtHostHeapService).set(new extHostHeapService_1.ExtHostHeapService());
        var extHostDocuments = col.define(extHost_protocol_1.ExtHostContext.ExtHostDocuments).set(new extHostDocuments_1.ExtHostDocuments(threadService));
        var estHostDocumentSaveParticipant = col.define(extHost_protocol_1.ExtHostContext.ExtHostDocumentSaveParticipant).set(new extHostDocumentSaveParticipant_1.ExtHostDocumentSaveParticipant(extHostDocuments, threadService.get(extHost_protocol_1.MainContext.MainThreadWorkspace)));
        var extHostEditors = col.define(extHost_protocol_1.ExtHostContext.ExtHostEditors).set(new extHostEditors_1.ExtHostEditors(threadService, extHostDocuments));
        var extHostCommands = col.define(extHost_protocol_1.ExtHostContext.ExtHostCommands).set(new extHostCommands_1.ExtHostCommands(threadService, extHostEditors));
        var extHostConfiguration = col.define(extHost_protocol_1.ExtHostContext.ExtHostConfiguration).set(new extHostConfiguration_1.ExtHostConfiguration(threadService.get(extHost_protocol_1.MainContext.MainThreadConfiguration)));
        var extHostDiagnostics = col.define(extHost_protocol_1.ExtHostContext.ExtHostDiagnostics).set(new extHostDiagnostics_1.ExtHostDiagnostics(threadService));
        var languageFeatures = col.define(extHost_protocol_1.ExtHostContext.ExtHostLanguageFeatures).set(new extHostLanguageFeatures_1.ExtHostLanguageFeatures(threadService, extHostDocuments, extHostCommands, extHostHeapMonitor, extHostDiagnostics));
        var extHostFileSystemEvent = col.define(extHost_protocol_1.ExtHostContext.ExtHostFileSystemEventService).set(new extHostFileSystemEventService_1.ExtHostFileSystemEventService());
        var extHostQuickOpen = col.define(extHost_protocol_1.ExtHostContext.ExtHostQuickOpen).set(new extHostQuickOpen_1.ExtHostQuickOpen(threadService));
        var extHostTerminalService = col.define(extHost_protocol_1.ExtHostContext.ExtHostTerminalService).set(new extHostTerminalService_1.ExtHostTerminalService(threadService));
        col.define(extHost_protocol_1.ExtHostContext.ExtHostExtensionService).set(extensionService);
        col.finish(false, threadService);
        // Others
        var mainThreadErrors = threadService.get(extHost_protocol_1.MainContext.MainThreadErrors);
        errors.setUnexpectedErrorHandler(function (err) {
            mainThreadErrors.onUnexpectedExtHostError(errors.transformErrorForSerialization(err));
        });
        var extHostMessageService = new extHostMessageService_1.ExtHostMessageService(threadService);
        var extHostStatusBar = new extHostStatusBar_1.ExtHostStatusBar(threadService);
        var extHostOutputService = new extHostOutputService_1.ExtHostOutputService(threadService);
        var workspacePath = contextService.getWorkspace() ? contextService.getWorkspace().resource.fsPath : undefined;
        var extHostWorkspace = new extHostWorkspace_1.ExtHostWorkspace(threadService, workspacePath);
        var languages = new extHostLanguages_1.ExtHostLanguages(threadService);
        // the converter might create delegate commands to avoid sending args
        // around all the time
        ExtHostTypeConverters.Command.initialize(extHostCommands);
        extHostApiCommands_1.registerApiCommands(extHostCommands);
        this.version = package_1.default.version;
        this.Uri = uri_1.default;
        this.Location = extHostTypes.Location;
        this.Diagnostic = extHostTypes.Diagnostic;
        this.DiagnosticSeverity = extHostTypes.DiagnosticSeverity;
        this.EventEmitter = event_1.Emitter;
        this.Disposable = extHostTypes.Disposable;
        this.TextEdit = extHostTypes.TextEdit;
        this.WorkspaceEdit = extHostTypes.WorkspaceEdit;
        this.Position = extHostTypes.Position;
        this.Range = extHostTypes.Range;
        this.Selection = extHostTypes.Selection;
        this.CancellationTokenSource = cancellation_1.CancellationTokenSource;
        this.Hover = extHostTypes.Hover;
        this.SymbolKind = extHostTypes.SymbolKind;
        this.SymbolInformation = extHostTypes.SymbolInformation;
        this.DocumentHighlightKind = extHostTypes.DocumentHighlightKind;
        this.DocumentHighlight = extHostTypes.DocumentHighlight;
        this.CodeLens = extHostTypes.CodeLens;
        this.ParameterInformation = extHostTypes.ParameterInformation;
        this.SignatureInformation = extHostTypes.SignatureInformation;
        this.SignatureHelp = extHostTypes.SignatureHelp;
        this.CompletionItem = extHostTypes.CompletionItem;
        this.CompletionItemKind = extHostTypes.CompletionItemKind;
        this.CompletionList = extHostTypes.CompletionList;
        this.DocumentLink = extHostTypes.DocumentLink;
        this.ViewColumn = extHostTypes.ViewColumn;
        this.StatusBarAlignment = extHostTypes.StatusBarAlignment;
        this.IndentAction = Modes.IndentAction;
        this.OverviewRulerLane = EditorCommon.OverviewRulerLane;
        this.TextEditorRevealType = extHostTypes.TextEditorRevealType;
        this.EndOfLine = extHostTypes.EndOfLine;
        this.TextEditorCursorStyle = EditorCommon.TextEditorCursorStyle;
        this.TextEditorLineNumbersStyle = extHostTypes.TextEditorLineNumbersStyle;
        this.TextEditorSelectionChangeKind = extHostTypes.TextEditorSelectionChangeKind;
        this.TextDocumentSaveReason = extHostTypes.TextDocumentSaveReason;
        // env namespace
        var telemetryInfo;
        this.env = Object.freeze({
            get machineId() { return telemetryInfo.machineId; },
            get sessionId() { return telemetryInfo.sessionId; },
            get language() { return Platform.language; },
            get appName() { return product_1.default.nameLong; }
        });
        telemetryService.getTelemetryInfo().then(function (info) { return telemetryInfo = info; }, errors.onUnexpectedError);
        // commands namespace
        this.commands = {
            registerCommand: function (id, command, thisArgs) {
                return extHostCommands.registerCommand(id, command, thisArgs);
            },
            registerTextEditorCommand: function (id, callback, thisArg) {
                return extHostCommands.registerCommand(id, function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i - 0] = arguments[_i];
                    }
                    var activeTextEditor = extHostEditors.getActiveTextEditor();
                    if (!activeTextEditor) {
                        console.warn('Cannot execute ' + id + ' because there is no active text editor.');
                        return;
                    }
                    return activeTextEditor.edit(function (edit) {
                        args.unshift(activeTextEditor, edit);
                        callback.apply(thisArg, args);
                    }).then(function (result) {
                        if (!result) {
                            console.warn('Edits from command ' + id + ' were not applied.');
                        }
                    }, function (err) {
                        console.warn('An error occured while running command ' + id, err);
                    });
                });
            },
            executeCommand: function (id) {
                var args = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    args[_i - 1] = arguments[_i];
                }
                return extHostCommands.executeCommand.apply(extHostCommands, [id].concat(args));
            },
            getCommands: function (filterInternal) {
                if (filterInternal === void 0) { filterInternal = false; }
                return extHostCommands.getCommands(filterInternal);
            }
        };
        this.window = {
            get activeTextEditor() {
                return extHostEditors.getActiveTextEditor();
            },
            get visibleTextEditors() {
                return extHostEditors.getVisibleTextEditors();
            },
            showTextDocument: function (document, column, preserveFocus) {
                return extHostEditors.showTextDocument(document, column, preserveFocus);
            },
            createTextEditorDecorationType: function (options) {
                return extHostEditors.createTextEditorDecorationType(options);
            },
            onDidChangeActiveTextEditor: extHostEditors.onDidChangeActiveTextEditor.bind(extHostEditors),
            onDidChangeTextEditorSelection: function (listener, thisArgs, disposables) {
                return extHostEditors.onDidChangeTextEditorSelection(listener, thisArgs, disposables);
            },
            onDidChangeTextEditorOptions: function (listener, thisArgs, disposables) {
                return extHostEditors.onDidChangeTextEditorOptions(listener, thisArgs, disposables);
            },
            onDidChangeTextEditorViewColumn: function (listener, thisArg, disposables) {
                return extHostEditors.onDidChangeTextEditorViewColumn(listener, thisArg, disposables);
            },
            onDidCloseTerminal: extHostTerminalService.onDidCloseTerminal.bind(extHostTerminalService),
            showInformationMessage: function (message) {
                var items = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    items[_i - 1] = arguments[_i];
                }
                return extHostMessageService.showMessage(severity_1.default.Info, message, items);
            },
            showWarningMessage: function (message) {
                var items = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    items[_i - 1] = arguments[_i];
                }
                return extHostMessageService.showMessage(severity_1.default.Warning, message, items);
            },
            showErrorMessage: function (message) {
                var items = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    items[_i - 1] = arguments[_i];
                }
                return extHostMessageService.showMessage(severity_1.default.Error, message, items);
            },
            showQuickPick: function (items, options, token) {
                return extHostQuickOpen.showQuickPick(items, options, token);
            },
            showInputBox: function (options, token) {
                return extHostQuickOpen.showInput(options, token);
            },
            createStatusBarItem: function (position, priority) {
                return extHostStatusBar.createStatusBarEntry(position, priority);
            },
            setStatusBarMessage: function (text, timeoutOrThenable) {
                return extHostStatusBar.setStatusBarMessage(text, timeoutOrThenable);
            },
            createOutputChannel: function (name) {
                return extHostOutputService.createOutputChannel(name);
            },
            createTerminal: function (name, shellPath, shellArgs) {
                return extHostTerminalService.createTerminal(name, shellPath, shellArgs);
            }
        };
        this.workspace = Object.freeze({
            get rootPath() {
                return extHostWorkspace.getPath();
            },
            set rootPath(value) {
                throw errors.readonly();
            },
            asRelativePath: function (pathOrUri) {
                return extHostWorkspace.getRelativePath(pathOrUri);
            },
            findFiles: function (include, exclude, maxResults, token) {
                return extHostWorkspace.findFiles(include, exclude, maxResults, token);
            },
            saveAll: function (includeUntitled) {
                return extHostWorkspace.saveAll(includeUntitled);
            },
            applyEdit: function (edit) {
                return extHostWorkspace.appyEdit(edit);
            },
            createFileSystemWatcher: function (pattern, ignoreCreate, ignoreChange, ignoreDelete) {
                return extHostFileSystemEvent.createFileSystemWatcher(pattern, ignoreCreate, ignoreChange, ignoreDelete);
            },
            get textDocuments() {
                return extHostDocuments.getAllDocumentData().map(function (data) { return data.document; });
            },
            set textDocuments(value) {
                throw errors.readonly();
            },
            openTextDocument: function (uriOrFileName) {
                var uri;
                if (typeof uriOrFileName === 'string') {
                    uri = uri_1.default.file(uriOrFileName);
                }
                else if (uriOrFileName instanceof uri_1.default) {
                    uri = uriOrFileName;
                }
                else {
                    throw new Error('illegal argument - uriOrFileName');
                }
                return extHostDocuments.ensureDocumentData(uri).then(function () {
                    var data = extHostDocuments.getDocumentData(uri);
                    return data && data.document;
                });
            },
            registerTextDocumentContentProvider: function (scheme, provider) {
                return extHostDocuments.registerTextDocumentContentProvider(scheme, provider);
            },
            onDidOpenTextDocument: function (listener, thisArgs, disposables) {
                return extHostDocuments.onDidAddDocument(listener, thisArgs, disposables);
            },
            onDidCloseTextDocument: function (listener, thisArgs, disposables) {
                return extHostDocuments.onDidRemoveDocument(listener, thisArgs, disposables);
            },
            onDidChangeTextDocument: function (listener, thisArgs, disposables) {
                return extHostDocuments.onDidChangeDocument(listener, thisArgs, disposables);
            },
            onDidSaveTextDocument: function (listener, thisArgs, disposables) {
                return extHostDocuments.onDidSaveDocument(listener, thisArgs, disposables);
            },
            onWillSaveTextDocument: function (listener, thisArgs, disposables) {
                return estHostDocumentSaveParticipant.onWillSaveTextDocumentEvent(listener, thisArgs, disposables);
            },
            onDidChangeConfiguration: function (listener, thisArgs, disposables) {
                return extHostConfiguration.onDidChangeConfiguration(listener, thisArgs, disposables);
            },
            getConfiguration: function (section) {
                return extHostConfiguration.getConfiguration(section);
            }
        });
        this.languages = {
            createDiagnosticCollection: function (name) {
                return extHostDiagnostics.createDiagnosticCollection(name);
            },
            getLanguages: function () {
                return languages.getLanguages();
            },
            match: function (selector, document) {
                return languageSelector_1.score(selector, document.uri, document.languageId);
            },
            registerCodeActionsProvider: function (selector, provider) {
                return languageFeatures.registerCodeActionProvider(selector, provider);
            },
            registerCodeLensProvider: function (selector, provider) {
                return languageFeatures.registerCodeLensProvider(selector, provider);
            },
            registerDefinitionProvider: function (selector, provider) {
                return languageFeatures.registerDefinitionProvider(selector, provider);
            },
            registerHoverProvider: function (selector, provider) {
                return languageFeatures.registerHoverProvider(selector, provider);
            },
            registerDocumentHighlightProvider: function (selector, provider) {
                return languageFeatures.registerDocumentHighlightProvider(selector, provider);
            },
            registerReferenceProvider: function (selector, provider) {
                return languageFeatures.registerReferenceProvider(selector, provider);
            },
            registerRenameProvider: function (selector, provider) {
                return languageFeatures.registerRenameProvider(selector, provider);
            },
            registerDocumentSymbolProvider: function (selector, provider) {
                return languageFeatures.registerDocumentSymbolProvider(selector, provider);
            },
            registerWorkspaceSymbolProvider: function (provider) {
                return languageFeatures.registerWorkspaceSymbolProvider(provider);
            },
            registerDocumentFormattingEditProvider: function (selector, provider) {
                return languageFeatures.registerDocumentFormattingEditProvider(selector, provider);
            },
            registerDocumentRangeFormattingEditProvider: function (selector, provider) {
                return languageFeatures.registerDocumentRangeFormattingEditProvider(selector, provider);
            },
            registerOnTypeFormattingEditProvider: function (selector, provider, firstTriggerCharacter) {
                var moreTriggerCharacters = [];
                for (var _i = 3; _i < arguments.length; _i++) {
                    moreTriggerCharacters[_i - 3] = arguments[_i];
                }
                return languageFeatures.registerOnTypeFormattingEditProvider(selector, provider, [firstTriggerCharacter].concat(moreTriggerCharacters));
            },
            registerSignatureHelpProvider: function (selector, provider) {
                var triggerCharacters = [];
                for (var _i = 2; _i < arguments.length; _i++) {
                    triggerCharacters[_i - 2] = arguments[_i];
                }
                return languageFeatures.registerSignatureHelpProvider(selector, provider, triggerCharacters);
            },
            registerCompletionItemProvider: function (selector, provider) {
                var triggerCharacters = [];
                for (var _i = 2; _i < arguments.length; _i++) {
                    triggerCharacters[_i - 2] = arguments[_i];
                }
                return languageFeatures.registerCompletionItemProvider(selector, provider, triggerCharacters);
            },
            registerDocumentLinkProvider: function (selector, provider) {
                return languageFeatures.registerDocumentLinkProvider(selector, provider);
            },
            setLanguageConfiguration: function (language, configuration) {
                return languageFeatures.setLanguageConfiguration(language, configuration);
            }
        };
        this.extensions = {
            getExtension: function (extensionId) {
                var desc = extensionsRegistry_1.ExtensionsRegistry.getExtensionDescription(extensionId);
                if (desc) {
                    return new Extension(extensionService, desc);
                }
            },
            get all() {
                return extensionsRegistry_1.ExtensionsRegistry.getAllExtensionDescriptions().map(function (desc) { return new Extension(extensionService, desc); });
            }
        };
    }
    return ExtHostAPIImplementation;
}());
exports.ExtHostAPIImplementation = ExtHostAPIImplementation;
var Extension = (function () {
    function Extension(extensionService, description) {
        this._extensionService = extensionService;
        this.id = description.id;
        this.extensionPath = paths.normalize(description.extensionFolderPath, true);
        this.packageJSON = description;
    }
    Object.defineProperty(Extension.prototype, "isActive", {
        get: function () {
            return this._extensionService.isActivated(this.id);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Extension.prototype, "exports", {
        get: function () {
            return this._extensionService.get(this.id);
        },
        enumerable: true,
        configurable: true
    });
    Extension.prototype.activate = function () {
        var _this = this;
        return this._extensionService.activateById(this.id).then(function () { return _this.exports; });
    };
    return Extension;
}());
function defineAPI(impl) {
    var node_module = require.__$__nodeRequire('module');
    var original = node_module._load;
    node_module._load = function load(request, parent, isMain) {
        if (request === 'vscode') {
            return impl;
        }
        return original.apply(this, arguments);
    };
    define('vscode', [], impl);
}
exports.defineAPI = defineAPI;
