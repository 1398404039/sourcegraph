/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var errors_1 = require('vs/base/common/errors');
var search_1 = require('vs/platform/search/common/search');
var workspace_1 = require('vs/platform/workspace/common/workspace');
var event_1 = require('vs/platform/event/common/event');
var editorService_1 = require('vs/workbench/services/editor/common/editorService');
var textfiles_1 = require('vs/workbench/services/textfile/common/textfiles');
var bulkEdit_1 = require('vs/editor/common/services/bulkEdit');
var winjs_base_1 = require('vs/base/common/winjs.base');
var extHost_protocol_1 = require('./extHost.protocol');
var MainThreadWorkspace = (function (_super) {
    __extends(MainThreadWorkspace, _super);
    function MainThreadWorkspace(searchService, contextService, textFileService, editorService, eventService) {
        _super.call(this);
        this._activeSearches = Object.create(null);
        this._searchService = searchService;
        this._workspace = contextService.getWorkspace();
        this._textFileService = textFileService;
        this._editorService = editorService;
        this._eventService = eventService;
    }
    MainThreadWorkspace.prototype.$startSearch = function (include, exclude, maxResults, requestId) {
        var _this = this;
        if (!this._workspace) {
            return;
        }
        var search = this._searchService.search({
            folderResources: [this._workspace.resource],
            type: search_1.QueryType.File,
            maxResults: maxResults,
            includePattern: (_a = {}, _a[include] = true, _a),
            excludePattern: (_b = {}, _b[exclude] = true, _b),
        }).then(function (result) {
            return result.results.map(function (m) { return m.resource; });
        }, function (err) {
            if (!errors_1.isPromiseCanceledError(err)) {
                return winjs_base_1.TPromise.wrapError(err);
            }
        });
        this._activeSearches[requestId] = search;
        var onDone = function () { return delete _this._activeSearches[requestId]; };
        search.done(onDone, onDone);
        return search;
        var _a, _b;
    };
    MainThreadWorkspace.prototype.$cancelSearch = function (requestId) {
        var search = this._activeSearches[requestId];
        if (search) {
            delete this._activeSearches[requestId];
            search.cancel();
            return winjs_base_1.TPromise.as(true);
        }
    };
    MainThreadWorkspace.prototype.$saveAll = function (includeUntitled) {
        return this._textFileService.saveAll(includeUntitled).then(function (result) {
            return result.results.every(function (each) { return each.success === true; });
        });
    };
    MainThreadWorkspace.prototype.$applyWorkspaceEdit = function (edits) {
        var codeEditor;
        var editor = this._editorService.getActiveEditor();
        if (editor) {
            var candidate = editor.getControl();
            if (typeof candidate.getEditorType === 'function') {
                // enough proof
                codeEditor = candidate;
            }
        }
        return bulkEdit_1.bulkEdit(this._eventService, this._editorService, codeEditor, edits)
            .then(function () { return true; });
    };
    MainThreadWorkspace = __decorate([
        __param(0, search_1.ISearchService),
        __param(1, workspace_1.IWorkspaceContextService),
        __param(2, textfiles_1.ITextFileService),
        __param(3, editorService_1.IWorkbenchEditorService),
        __param(4, event_1.IEventService)
    ], MainThreadWorkspace);
    return MainThreadWorkspace;
}(extHost_protocol_1.MainThreadWorkspaceShape));
exports.MainThreadWorkspace = MainThreadWorkspace;
