/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var threadService_1 = require("vs/workbench/services/thread/common/threadService");
var extHost_protocol_1 = require("./extHost.protocol");
var treeExplorerService_1 = require("vs/workbench/parts/explorers/common/treeExplorerService");
var message_1 = require("vs/platform/message/common/message");
var commands_1 = require("vs/platform/commands/common/commands");
var MainThreadTreeExplorers = (function (_super) {
    __extends(MainThreadTreeExplorers, _super);
    function MainThreadTreeExplorers(threadService, treeExplorerService, messageService, commandService) {
        var _this = _super.call(this) || this;
        _this.threadService = threadService;
        _this.treeExplorerService = treeExplorerService;
        _this.messageService = messageService;
        _this.commandService = commandService;
        _this._proxy = threadService.get(extHost_protocol_1.ExtHostContext.ExtHostExplorers);
        return _this;
    }
    MainThreadTreeExplorers.prototype.$registerTreeExplorerNodeProvider = function (providerId) {
        var _this = this;
        var onError = function (err) { _this.messageService.show(message_1.Severity.Error, err); };
        this.treeExplorerService.registerTreeExplorerNodeProvider(providerId, {
            provideRootNode: function () {
                return _this._proxy.$provideRootNode(providerId).then(function (rootNode) { return rootNode; }, onError);
            },
            resolveChildren: function (node) {
                return _this._proxy.$resolveChildren(providerId, node).then(function (children) { return children; }, onError);
            },
            executeCommand: function (node) {
                return _this._proxy.$getInternalCommand(providerId, node).then(function (command) {
                    return (_a = _this.commandService).executeCommand.apply(_a, [command.id].concat(command.arguments));
                    var _a;
                });
            }
        });
    };
    return MainThreadTreeExplorers;
}(extHost_protocol_1.MainThreadTreeExplorersShape));
MainThreadTreeExplorers = __decorate([
    __param(0, threadService_1.IThreadService),
    __param(1, treeExplorerService_1.ITreeExplorerService),
    __param(2, message_1.IMessageService),
    __param(3, commands_1.ICommandService)
], MainThreadTreeExplorers);
exports.MainThreadTreeExplorers = MainThreadTreeExplorers;
