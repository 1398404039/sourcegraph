/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var objects_1 = require('vs/base/common/objects');
var errors_1 = require('vs/base/common/errors');
var event_1 = require('vs/base/common/event');
var extHost_protocol_1 = require('./extHost.protocol');
var configurationEditing_1 = require('vs/workbench/services/configuration/common/configurationEditing');
var ExtHostConfiguration = (function (_super) {
    __extends(ExtHostConfiguration, _super);
    function ExtHostConfiguration(proxy) {
        _super.call(this);
        this._onDidChangeConfiguration = new event_1.Emitter();
        this._proxy = proxy;
    }
    Object.defineProperty(ExtHostConfiguration.prototype, "onDidChangeConfiguration", {
        get: function () {
            return this._onDidChangeConfiguration && this._onDidChangeConfiguration.event;
        },
        enumerable: true,
        configurable: true
    });
    ExtHostConfiguration.prototype.$acceptConfigurationChanged = function (config) {
        this._config = config;
        this._hasConfig = true;
        this._onDidChangeConfiguration.fire(undefined);
    };
    ExtHostConfiguration.prototype.getConfiguration = function (section) {
        var _this = this;
        if (!this._hasConfig) {
            throw errors_1.illegalState('missing config');
        }
        var config = section
            ? ExtHostConfiguration._lookUp(section, this._config)
            : this._config;
        var result = {
            has: function (key) {
                return typeof ExtHostConfiguration._lookUp(key, config) !== 'undefined';
            },
            get: function (key, defaultValue) {
                var result = ExtHostConfiguration._lookUp(key, config);
                if (typeof result === 'undefined') {
                    result = defaultValue;
                }
                return result;
            },
            update: function (key, value, global) {
                if (global === void 0) { global = false; }
                key = section ? section + "." + key : key;
                var target = global ? configurationEditing_1.ConfigurationTarget.USER : configurationEditing_1.ConfigurationTarget.WORKSPACE;
                if (value !== void 0) {
                    return _this._proxy.$updateConfigurationOption(target, key, value);
                }
                else {
                    return _this._proxy.$removeConfigurationOption(target, key);
                }
            }
        };
        if (typeof config === 'object') {
            objects_1.mixin(result, config, false);
        }
        return Object.freeze(result);
    };
    ExtHostConfiguration._lookUp = function (section, config) {
        if (!section) {
            return;
        }
        var parts = section.split('.');
        var node = config;
        while (node && parts.length) {
            node = node[parts.shift()];
        }
        return node;
    };
    return ExtHostConfiguration;
}(extHost_protocol_1.ExtHostConfigurationShape));
exports.ExtHostConfiguration = ExtHostConfiguration;
