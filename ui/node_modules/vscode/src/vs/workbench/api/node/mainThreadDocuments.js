/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var errors_1 = require('vs/base/common/errors');
var errorMessage_1 = require('vs/base/common/errorMessage');
var modelService_1 = require('vs/editor/common/services/modelService');
var editorCommon = require('vs/editor/common/editorCommon');
var threadService_1 = require('vs/workbench/services/thread/common/threadService');
var uri_1 = require('vs/base/common/uri');
var lifecycle_1 = require('vs/base/common/lifecycle');
var event_1 = require('vs/platform/event/common/event');
var editorService_1 = require('vs/workbench/services/editor/common/editorService');
var textfiles_1 = require('vs/workbench/services/textfile/common/textfiles');
var winjs_base_1 = require('vs/base/common/winjs.base');
var files_1 = require('vs/platform/files/common/files');
var modeService_1 = require('vs/editor/common/services/modeService');
var untitledEditorService_1 = require('vs/workbench/services/untitled/common/untitledEditorService');
var resourceEditorInput_1 = require('vs/workbench/common/editor/resourceEditorInput');
var extHost_protocol_1 = require('./extHost.protocol');
var MainThreadDocuments = (function (_super) {
    __extends(MainThreadDocuments, _super);
    function MainThreadDocuments(threadService, modelService, modeService, eventService, textFileService, editorService, fileService, untitledEditorService) {
        var _this = this;
        _super.call(this);
        this._modelService = modelService;
        this._modeService = modeService;
        this._textFileService = textFileService;
        this._editorService = editorService;
        this._fileService = fileService;
        this._untitledEditorService = untitledEditorService;
        this._proxy = threadService.get(extHost_protocol_1.ExtHostContext.ExtHostDocuments);
        this._modelIsSynced = {};
        this._toDispose = [];
        modelService.onModelAdded(this._onModelAdded, this, this._toDispose);
        modelService.onModelRemoved(this._onModelRemoved, this, this._toDispose);
        modelService.onModelModeChanged(this._onModelModeChanged, this, this._toDispose);
        this._toDispose.push(textFileService.models.onModelSaved(function (e) {
            if (_this._shouldHandleFileEvent(e)) {
                _this._proxy.$acceptModelSaved(e.resource.toString());
            }
        }));
        this._toDispose.push(textFileService.models.onModelReverted(function (e) {
            if (_this._shouldHandleFileEvent(e)) {
                _this._proxy.$acceptModelReverted(e.resource.toString());
            }
        }));
        this._toDispose.push(textFileService.models.onModelDirty(function (e) {
            if (_this._shouldHandleFileEvent(e)) {
                _this._proxy.$acceptModelDirty(e.resource.toString());
            }
        }));
        var handle = setInterval(function () { return _this._runDocumentCleanup(); }, 1000 * 60 * 3);
        this._toDispose.push({ dispose: function () { clearInterval(handle); } });
        this._modelToDisposeMap = Object.create(null);
        this._resourceContentProvider = Object.create(null);
        this._virtualDocumentSet = Object.create(null);
    }
    MainThreadDocuments.prototype.dispose = function () {
        var _this = this;
        Object.keys(this._modelToDisposeMap).forEach(function (modelUrl) {
            _this._modelToDisposeMap[modelUrl].dispose();
        });
        this._modelToDisposeMap = Object.create(null);
        this._toDispose = lifecycle_1.dispose(this._toDispose);
    };
    MainThreadDocuments.prototype._shouldHandleFileEvent = function (e) {
        var model = this._modelService.getModel(e.resource);
        return model && !model.isTooLargeForHavingARichMode();
    };
    MainThreadDocuments.prototype._onModelAdded = function (model) {
        var _this = this;
        // Same filter as in mainThreadEditorsTracker
        if (model.isTooLargeForHavingARichMode()) {
            // don't synchronize too large models
            return null;
        }
        var modelUrl = model.uri;
        this._modelIsSynced[modelUrl.toString()] = true;
        this._modelToDisposeMap[modelUrl.toString()] = model.addBulkListener(function (events) { return _this._onModelEvents(modelUrl, events); });
        this._proxy.$acceptModelAdd({
            url: model.uri,
            versionId: model.getVersionId(),
            value: model.toRawText(),
            modeId: model.getMode().getId(),
            isDirty: this._textFileService.isDirty(modelUrl)
        });
    };
    MainThreadDocuments.prototype._onModelModeChanged = function (event) {
        var model = event.model, oldModeId = event.oldModeId;
        var modelUrl = model.uri;
        if (!this._modelIsSynced[modelUrl.toString()]) {
            return;
        }
        this._proxy.$acceptModelModeChanged(model.uri.toString(), oldModeId, model.getMode().getId());
    };
    MainThreadDocuments.prototype._onModelRemoved = function (model) {
        var modelUrl = model.uri;
        if (!this._modelIsSynced[modelUrl.toString()]) {
            return;
        }
        delete this._modelIsSynced[modelUrl.toString()];
        this._modelToDisposeMap[modelUrl.toString()].dispose();
        delete this._modelToDisposeMap[modelUrl.toString()];
        this._proxy.$acceptModelRemoved(modelUrl.toString());
    };
    MainThreadDocuments.prototype._onModelEvents = function (modelUrl, events) {
        var changedEvents = [];
        for (var i = 0, len = events.length; i < len; i++) {
            var e = events[i];
            switch (e.getType()) {
                case editorCommon.EventType.ModelContentChanged2:
                    changedEvents.push(e.getData());
                    break;
            }
        }
        if (changedEvents.length > 0) {
            this._proxy.$acceptModelChanged(modelUrl.toString(), changedEvents);
        }
    };
    // --- from extension host process
    MainThreadDocuments.prototype.$trySaveDocument = function (uri) {
        return this._textFileService.save(uri);
    };
    MainThreadDocuments.prototype.$tryOpenDocument = function (uri) {
        if (!uri.scheme || !(uri.fsPath || uri.authority)) {
            return winjs_base_1.TPromise.wrapError("Invalid uri. Scheme and authority or path must be set.");
        }
        var promise;
        switch (uri.scheme) {
            case 'untitled':
                promise = this._handleUnititledScheme(uri);
                break;
            case 'file':
            default:
                promise = this._handleAsResourceInput(uri);
                break;
        }
        return promise.then(function (success) {
            if (!success) {
                return winjs_base_1.TPromise.wrapError('cannot open ' + uri.toString());
            }
        }, function (err) {
            return winjs_base_1.TPromise.wrapError('cannot open ' + uri.toString() + '. Detail: ' + errorMessage_1.toErrorMessage(err));
        });
    };
    MainThreadDocuments.prototype._handleAsResourceInput = function (uri) {
        return this._editorService.resolveEditorModel({ resource: uri }).then(function (model) {
            return !!model;
        });
    };
    MainThreadDocuments.prototype._handleUnititledScheme = function (uri) {
        var _this = this;
        var asFileUri = uri_1.default.file(uri.fsPath);
        return this._fileService.resolveFile(asFileUri).then(function (stats) {
            // don't create a new file ontop of an existing file
            return winjs_base_1.TPromise.wrapError('file already exists on disk');
        }, function (err) {
            var input = _this._untitledEditorService.createOrGet(asFileUri);
            return input.resolve(true).then(function (model) {
                if (input.getResource().toString() !== uri.toString()) {
                    throw new Error("expected URI " + uri.toString() + " BUT GOT " + input.getResource().toString());
                }
                if (!_this._modelIsSynced[uri.toString()]) {
                    throw new Error("expected URI " + uri.toString() + " to have come to LIFE");
                }
                return _this._proxy.$acceptModelDirty(uri.toString()); // mark as dirty
            }).then(function () {
                return true;
            });
        });
    };
    // --- virtual document logic
    MainThreadDocuments.prototype.$registerTextContentProvider = function (handle, scheme) {
        var _this = this;
        this._resourceContentProvider[handle] = resourceEditorInput_1.ResourceEditorInput.registerResourceContentProvider(scheme, {
            provideTextContent: function (uri) {
                return _this._proxy.$provideTextDocumentContent(handle, uri).then(function (value) {
                    if (typeof value === 'string') {
                        _this._virtualDocumentSet[uri.toString()] = true;
                        var firstLineText = value.substr(0, 1 + value.search(/\r?\n/));
                        var mode = _this._modeService.getOrCreateModeByFilenameOrFirstLine(uri.fsPath, firstLineText);
                        return _this._modelService.createModel(value, mode, uri);
                    }
                });
            }
        });
    };
    MainThreadDocuments.prototype.$unregisterTextContentProvider = function (handle) {
        var registration = this._resourceContentProvider[handle];
        if (registration) {
            registration.dispose();
            delete this._resourceContentProvider[handle];
        }
    };
    MainThreadDocuments.prototype.$onVirtualDocumentChange = function (uri, value) {
        var model = this._modelService.getModel(uri);
        if (model) {
            model.setValue(value);
        }
    };
    MainThreadDocuments.prototype._runDocumentCleanup = function () {
        var _this = this;
        var toBeDisposed = [];
        winjs_base_1.TPromise.join(Object.keys(this._virtualDocumentSet).map(function (key) {
            var resource = uri_1.default.parse(key);
            return _this._editorService.createInput({ resource: resource }).then(function (input) {
                if (!_this._editorService.isVisible(input, true)) {
                    toBeDisposed.push(resource);
                }
                if (input) {
                    input.dispose();
                }
            });
        })).then(function () {
            for (var _i = 0, toBeDisposed_1 = toBeDisposed; _i < toBeDisposed_1.length; _i++) {
                var resource = toBeDisposed_1[_i];
                _this._modelService.destroyModel(resource);
                delete _this._virtualDocumentSet[resource.toString()];
            }
        }, errors_1.onUnexpectedError);
    };
    MainThreadDocuments = __decorate([
        __param(0, threadService_1.IThreadService),
        __param(1, modelService_1.IModelService),
        __param(2, modeService_1.IModeService),
        __param(3, event_1.IEventService),
        __param(4, textfiles_1.ITextFileService),
        __param(5, editorService_1.IWorkbenchEditorService),
        __param(6, files_1.IFileService),
        __param(7, untitledEditorService_1.IUntitledEditorService)
    ], MainThreadDocuments);
    return MainThreadDocuments;
}(extHost_protocol_1.MainThreadDocumentsShape));
exports.MainThreadDocuments = MainThreadDocuments;
