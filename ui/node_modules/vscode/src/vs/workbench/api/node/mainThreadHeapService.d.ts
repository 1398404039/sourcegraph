import { TPromise } from 'vs/base/common/winjs.base';
import { IThreadService } from 'vs/workbench/services/thread/common/threadService';
export declare const IHeapService: {
    (...args: any[]): void;
    type: IHeapService;
};
export interface IHeapService {
    _serviceBrand: any;
    /**
     * Track gc-collection for all new objects that
     * have the $ident-value set.
     */
    trackRecursive<T>(p: TPromise<T>): TPromise<T>;
    /**
     * Track gc-collection for all new objects that
     * have the $ident-value set.
     */
    trackRecursive<T>(obj: T): T;
}
export declare class MainThreadHeapService implements IHeapService {
    _serviceBrand: any;
    private _activeSignals;
    private _activeIds;
    private _consumeHandle;
    constructor(threadService: IThreadService);
    dispose(): void;
    trackRecursive<T>(p: TPromise<T>): TPromise<T>;
    trackRecursive<T>(obj: T): T;
    private _doTrackRecursive(obj);
}
