import Event from 'vs/base/common/event';
import { TPromise } from 'vs/base/common/winjs.base';
import { IThreadService } from 'vs/workbench/services/thread/common/threadService';
import { ExtHostDocuments } from 'vs/workbench/api/node/extHostDocuments';
import { Selection, Range, Position, EndOfLine, TextEditorLineNumbersStyle } from './extHostTypes';
import { TextEditorCursorStyle } from 'vs/editor/common/editorCommon';
import { IResolvedTextEditorConfiguration, ISelectionChangeEvent } from 'vs/workbench/api/node/mainThreadEditorsTracker';
import { MainThreadEditorsShape, ExtHostEditorsShape, ITextEditorAddData, ITextEditorPositionData } from './extHost.protocol';
import * as vscode from 'vscode';
export declare class ExtHostEditors extends ExtHostEditorsShape {
    onDidChangeTextEditorSelection: Event<vscode.TextEditorSelectionChangeEvent>;
    private _onDidChangeTextEditorSelection;
    onDidChangeTextEditorOptions: Event<vscode.TextEditorOptionsChangeEvent>;
    private _onDidChangeTextEditorOptions;
    onDidChangeTextEditorViewColumn: Event<vscode.TextEditorViewColumnChangeEvent>;
    private _onDidChangeTextEditorViewColumn;
    private _editors;
    private _proxy;
    private _onDidChangeActiveTextEditor;
    private _onDidChangeVisibleTextEditors;
    private _extHostDocuments;
    private _activeEditorId;
    private _visibleEditorIds;
    constructor(threadService: IThreadService, extHostDocuments: ExtHostDocuments);
    getActiveTextEditor(): vscode.TextEditor;
    getVisibleTextEditors(): vscode.TextEditor[];
    readonly onDidChangeActiveTextEditor: Event<vscode.TextEditor>;
    readonly onDidChangeVisibleTextEditors: Event<vscode.TextEditor[]>;
    showTextDocument(document: vscode.TextDocument, column: vscode.ViewColumn, preserveFocus: boolean): TPromise<vscode.TextEditor>;
    createTextEditorDecorationType(options: vscode.DecorationRenderOptions): vscode.TextEditorDecorationType;
    $acceptTextEditorAdd(data: ITextEditorAddData): void;
    $acceptOptionsChanged(id: string, opts: IResolvedTextEditorConfiguration): void;
    $acceptSelectionsChanged(id: string, event: ISelectionChangeEvent): void;
    $acceptActiveEditorAndVisibleEditors(id: string, visibleIds: string[]): void;
    $acceptEditorPositionData(data: ITextEditorPositionData): void;
    $acceptTextEditorRemove(id: string): void;
}
export interface ITextEditOperation {
    range: Range;
    text: string;
    forceMoveMarkers: boolean;
}
export interface IEditData {
    documentVersionId: number;
    edits: ITextEditOperation[];
    setEndOfLine: EndOfLine;
    undoStopBefore: boolean;
    undoStopAfter: boolean;
}
export declare class TextEditorEdit {
    private _documentVersionId;
    private _collectedEdits;
    private _setEndOfLine;
    private _undoStopBefore;
    private _undoStopAfter;
    constructor(document: vscode.TextDocument, options: {
        undoStopBefore: boolean;
        undoStopAfter: boolean;
    });
    finalize(): IEditData;
    replace(location: Position | Range | Selection, value: string): void;
    insert(location: Position, value: string): void;
    delete(location: Range | Selection): void;
    setEndOfLine(endOfLine: EndOfLine): void;
}
export declare class ExtHostTextEditorOptions implements vscode.TextEditorOptions {
    private _proxy;
    private _id;
    private _tabSize;
    private _insertSpaces;
    private _cursorStyle;
    private _lineNumbers;
    constructor(proxy: MainThreadEditorsShape, id: string, source: IResolvedTextEditorConfiguration);
    _accept(source: IResolvedTextEditorConfiguration): void;
    tabSize: number | string;
    private _validateTabSize(value);
    insertSpaces: boolean | string;
    private _validateInsertSpaces(value);
    cursorStyle: TextEditorCursorStyle;
    lineNumbers: TextEditorLineNumbersStyle;
    assign(newOptions: vscode.TextEditorOptions): void;
}
