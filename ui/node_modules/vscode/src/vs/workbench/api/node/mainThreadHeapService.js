/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var threadService_1 = require('vs/workbench/services/thread/common/threadService');
var extHost_protocol_1 = require('./extHost.protocol');
var gc_signals_1 = require('gc-signals');
var MainThreadHeapService = (function () {
    function MainThreadHeapService(threadService) {
        var proxy = threadService.get(extHost_protocol_1.ExtHostContext.ExtHostHeapService);
        this._subscription = gc_signals_1.onDidGarbageCollectSignals(function (ids) {
            proxy.$onGarbageCollection(ids);
        });
        this._consumeHandle = setInterval(gc_signals_1.consumeSignals, 15 * 1000);
    }
    MainThreadHeapService.prototype.dispose = function () {
        clearInterval(this._consumeHandle);
        this._subscription.dispose();
    };
    MainThreadHeapService = __decorate([
        __param(0, threadService_1.IThreadService)
    ], MainThreadHeapService);
    return MainThreadHeapService;
}());
exports.MainThreadHeapService = MainThreadHeapService;
