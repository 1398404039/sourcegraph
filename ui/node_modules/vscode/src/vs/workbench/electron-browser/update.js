/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var nls = require('vs/nls');
var severity_1 = require('vs/base/common/severity');
var winjs_base_1 = require('vs/base/common/winjs.base');
var actions_1 = require('vs/base/common/actions');
var electron_1 = require('electron');
var message_1 = require('vs/platform/message/common/message');
var package_1 = require('vs/platform/package');
var product_1 = require('vs/platform/product');
var uri_1 = require('vs/base/common/uri');
var editorService_1 = require('vs/workbench/services/editor/common/editorService');
var instantiation_1 = require('vs/platform/instantiation/common/instantiation');
var releaseNotesInput_1 = require('vs/workbench/parts/update/electron-browser/releaseNotesInput');
var request_1 = require('vs/platform/request/common/request');
var request_2 = require('vs/base/node/request');
var keybinding_1 = require('vs/platform/keybinding/common/keybinding');
var keybinding_2 = require('vs/base/common/keybinding');
var opener_1 = require('vs/platform/opener/common/opener');
var ApplyUpdateAction = new actions_1.Action('update.applyUpdate', nls.localize('updateNow', "Update Now"), null, true, function () { electron_1.ipcRenderer.send('vscode:update-apply'); return winjs_base_1.TPromise.as(true); });
var NotNowAction = new actions_1.Action('update.later', nls.localize('later', "Later"), null, true, function () { return winjs_base_1.TPromise.as(true); });
function loadReleaseNotes(accessor, version) {
    var requestService = accessor.get(request_1.IRequestService);
    var keybindingService = accessor.get(keybinding_1.IKeybindingService);
    var match = /^(\d+\.\d)\./.exec(version);
    if (!match) {
        return winjs_base_1.TPromise.as(null);
    }
    var versionLabel = match[1].replace(/\./g, '_');
    var baseUrl = 'https://code.visualstudio.com/raw';
    var url = baseUrl + "/v" + versionLabel + ".md";
    var patchKeybindings = function (text) {
        var kb = function (match, kb) {
            var keybinding = keybindingService.lookupKeybindings(kb)[0];
            if (!keybinding) {
                return match;
            }
            return keybindingService.getLabelFor(keybinding);
        };
        var kbstyle = function (match, kb) {
            var code = keybinding_2.Keybinding.fromUserSettingsLabel(kb);
            if (!code) {
                return match;
            }
            var keybinding = new keybinding_2.Keybinding(code);
            if (!keybinding) {
                return match;
            }
            return keybindingService.getLabelFor(keybinding);
        };
        return text
            .replace(/kb\(([a-z.\d\-]+)\)/gi, kb)
            .replace(/kbstyle\(([^\)]+)\)/gi, kbstyle);
    };
    return requestService.request({ url: url })
        .then(request_2.asText)
        .then(function (text) { return patchKeybindings(text); });
}
exports.loadReleaseNotes = loadReleaseNotes;
var OpenLatestReleaseNotesInBrowserAction = (function (_super) {
    __extends(OpenLatestReleaseNotesInBrowserAction, _super);
    function OpenLatestReleaseNotesInBrowserAction(openerService) {
        _super.call(this, 'update.openLatestReleaseNotes', nls.localize('releaseNotes', "Release Notes"), null, true);
        this.openerService = openerService;
    }
    OpenLatestReleaseNotesInBrowserAction.prototype.run = function () {
        var uri = uri_1.default.parse(product_1.default.releaseNotesUrl);
        return this.openerService.open(uri);
    };
    OpenLatestReleaseNotesInBrowserAction = __decorate([
        __param(0, opener_1.IOpenerService)
    ], OpenLatestReleaseNotesInBrowserAction);
    return OpenLatestReleaseNotesInBrowserAction;
}(actions_1.Action));
exports.OpenLatestReleaseNotesInBrowserAction = OpenLatestReleaseNotesInBrowserAction;
var AbstractShowReleaseNotesAction = (function (_super) {
    __extends(AbstractShowReleaseNotesAction, _super);
    function AbstractShowReleaseNotesAction(id, label, returnValue, version, editorService, instantiationService, openerService) {
        _super.call(this, id, label, null, true);
        this.returnValue = returnValue;
        this.version = version;
        this.editorService = editorService;
        this.instantiationService = instantiationService;
        this.openerService = openerService;
    }
    AbstractShowReleaseNotesAction.prototype.run = function () {
        var _this = this;
        if (!this.enabled) {
            return winjs_base_1.TPromise.as(false);
        }
        this.enabled = false;
        return this.instantiationService.invokeFunction(loadReleaseNotes, this.version)
            .then(function (text) { return _this.editorService.openEditor(_this.instantiationService.createInstance(releaseNotesInput_1.ReleaseNotesInput, _this.version, text)); })
            .then(function () { return true; })
            .then(null, function () {
            var action = _this.instantiationService.createInstance(OpenLatestReleaseNotesInBrowserAction);
            return action.run().then(function () { return false; });
        });
    };
    AbstractShowReleaseNotesAction = __decorate([
        __param(4, editorService_1.IWorkbenchEditorService),
        __param(5, instantiation_1.IInstantiationService),
        __param(6, opener_1.IOpenerService)
    ], AbstractShowReleaseNotesAction);
    return AbstractShowReleaseNotesAction;
}(actions_1.Action));
exports.AbstractShowReleaseNotesAction = AbstractShowReleaseNotesAction;
var ShowReleaseNotesAction = (function (_super) {
    __extends(ShowReleaseNotesAction, _super);
    function ShowReleaseNotesAction(returnValue, version, editorService, instantiationService, openerService) {
        _super.call(this, 'update.showReleaseNotes', nls.localize('releaseNotes', "Release Notes"), returnValue, version, editorService, instantiationService, openerService);
    }
    ShowReleaseNotesAction = __decorate([
        __param(2, editorService_1.IWorkbenchEditorService),
        __param(3, instantiation_1.IInstantiationService),
        __param(4, opener_1.IOpenerService)
    ], ShowReleaseNotesAction);
    return ShowReleaseNotesAction;
}(AbstractShowReleaseNotesAction));
exports.ShowReleaseNotesAction = ShowReleaseNotesAction;
var ShowCurrentReleaseNotesAction = (function (_super) {
    __extends(ShowCurrentReleaseNotesAction, _super);
    function ShowCurrentReleaseNotesAction(id, label, editorService, instantiationService, openerService) {
        if (id === void 0) { id = ShowCurrentReleaseNotesAction.ID; }
        if (label === void 0) { label = ShowCurrentReleaseNotesAction.LABEL; }
        _super.call(this, id, label, true, package_1.default.version, editorService, instantiationService, openerService);
    }
    ShowCurrentReleaseNotesAction.ID = 'update.showCurrentReleaseNotes';
    ShowCurrentReleaseNotesAction.LABEL = nls.localize('showReleaseNotes', "Show Release Notes");
    ShowCurrentReleaseNotesAction = __decorate([
        __param(2, editorService_1.IWorkbenchEditorService),
        __param(3, instantiation_1.IInstantiationService),
        __param(4, opener_1.IOpenerService)
    ], ShowCurrentReleaseNotesAction);
    return ShowCurrentReleaseNotesAction;
}(AbstractShowReleaseNotesAction));
exports.ShowCurrentReleaseNotesAction = ShowCurrentReleaseNotesAction;
exports.DownloadAction = function (url) { return new actions_1.Action('update.download', nls.localize('downloadNow', "Download Now"), null, true, function () { electron_1.shell.openExternal(url); return winjs_base_1.TPromise.as(true); }); };
var Update = (function () {
    function Update(messageService, instantiationService) {
        var _this = this;
        this.messageService = messageService;
        this.instantiationService = instantiationService;
        electron_1.ipcRenderer.on('vscode:update-downloaded', function (event, update) {
            var releaseNotesAction = _this.instantiationService.createInstance(ShowReleaseNotesAction, false, update.version);
            _this.messageService.show(severity_1.default.Info, {
                message: nls.localize('updateAvailable', "{0} will be updated after it restarts.", product_1.default.nameLong),
                actions: [ApplyUpdateAction, NotNowAction, releaseNotesAction]
            });
        });
        electron_1.ipcRenderer.on('vscode:update-available', function (event, url, version) {
            var releaseNotesAction = _this.instantiationService.createInstance(ShowReleaseNotesAction, false, version);
            _this.messageService.show(severity_1.default.Info, {
                message: nls.localize('thereIsUpdateAvailable', "There is an available update."),
                actions: [exports.DownloadAction(url), NotNowAction, releaseNotesAction]
            });
        });
        electron_1.ipcRenderer.on('vscode:update-not-available', function () {
            _this.messageService.show(severity_1.default.Info, nls.localize('noUpdatesAvailable', "There are no updates currently available."));
        });
    }
    Update = __decorate([
        __param(0, message_1.IMessageService),
        __param(1, instantiation_1.IInstantiationService)
    ], Update);
    return Update;
}());
exports.Update = Update;
