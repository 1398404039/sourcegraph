/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var nls = require("vs/nls");
var platform_1 = require("vs/platform/platform");
var winjs_base_1 = require("vs/base/common/winjs.base");
var actionRegistry_1 = require("vs/workbench/common/actionRegistry");
var actions_1 = require("vs/platform/actions/common/actions");
var errors = require("vs/base/common/errors");
var types = require("vs/base/common/types");
var arrays = require("vs/base/common/arrays");
var severity_1 = require("vs/base/common/severity");
var actionbar_1 = require("vs/base/browser/ui/actionbar/actionbar");
var actions_2 = require("vs/base/common/actions");
var partService_1 = require("vs/workbench/services/part/common/partService");
var message_1 = require("vs/platform/message/common/message");
var instantiation_1 = require("vs/platform/instantiation/common/instantiation");
var contextView_1 = require("vs/platform/contextview/browser/contextView");
var commands_1 = require("vs/platform/commands/common/commands");
var keybinding_1 = require("vs/platform/keybinding/common/keybinding");
var workspace_1 = require("vs/platform/workspace/common/workspace");
var themeService_1 = require("vs/workbench/services/themes/common/themeService");
var windowService_1 = require("vs/workbench/services/window/electron-browser/windowService");
var files_1 = require("vs/platform/files/common/files");
var configurationEditing_1 = require("vs/workbench/services/configuration/common/configurationEditing");
var configuration_1 = require("vs/workbench/services/configuration/common/configuration");
var window_1 = require("vs/workbench/electron-browser/window");
var browser = require("vs/base/browser/browser");
var diffEditorInput_1 = require("vs/workbench/common/editor/diffEditorInput");
var editor_1 = require("vs/platform/editor/common/editor");
var editorService_1 = require("vs/workbench/services/editor/common/editorService");
var untitledEditorService_1 = require("vs/workbench/services/untitled/common/untitledEditorService");
var uri_1 = require("vs/base/common/uri");
var actions_3 = require("vs/workbench/electron-browser/actions");
var environment_1 = require("vs/platform/environment/common/environment");
var viewlet_1 = require("vs/workbench/services/viewlet/browser/viewlet");
var extensions_1 = require("vs/platform/extensions/common/extensions");
var electron_1 = require("electron");
var currentWindow = electron_1.remote.getCurrentWindow();
var TextInputActions = [
    new actions_2.Action('undo', nls.localize('undo', "Undo"), null, true, function () { return document.execCommand('undo') && winjs_base_1.TPromise.as(true); }),
    new actions_2.Action('redo', nls.localize('redo', "Redo"), null, true, function () { return document.execCommand('redo') && winjs_base_1.TPromise.as(true); }),
    new actionbar_1.Separator(),
    new actions_2.Action('editor.action.clipboardCutAction', nls.localize('cut', "Cut"), null, true, function () { return document.execCommand('cut') && winjs_base_1.TPromise.as(true); }),
    new actions_2.Action('editor.action.clipboardCopyAction', nls.localize('copy', "Copy"), null, true, function () { return document.execCommand('copy') && winjs_base_1.TPromise.as(true); }),
    new actions_2.Action('editor.action.clipboardPasteAction', nls.localize('paste', "Paste"), null, true, function () { return document.execCommand('paste') && winjs_base_1.TPromise.as(true); }),
    new actionbar_1.Separator(),
    new actions_2.Action('editor.action.selectAll', nls.localize('selectAll', "Select All"), null, true, function () { return document.execCommand('selectAll') && winjs_base_1.TPromise.as(true); })
];
var ElectronIntegration = (function () {
    function ElectronIntegration(instantiationService, windowService, partService, contextService, configurationService, commandService, configurationEditingService, keybindingService, messageService, contextMenuService, editorService, untitledEditorService, environmentService, extensionService, themeService, viewletService) {
        this.instantiationService = instantiationService;
        this.windowService = windowService;
        this.partService = partService;
        this.contextService = contextService;
        this.configurationService = configurationService;
        this.commandService = commandService;
        this.configurationEditingService = configurationEditingService;
        this.keybindingService = keybindingService;
        this.messageService = messageService;
        this.contextMenuService = contextMenuService;
        this.editorService = editorService;
        this.untitledEditorService = untitledEditorService;
        this.environmentService = environmentService;
        this.extensionService = extensionService;
        this.themeService = themeService;
        this.viewletService = viewletService;
    }
    ElectronIntegration.prototype.integrate = function (shellContainer) {
        var _this = this;
        // Register the active window
        var activeWindow = this.instantiationService.createInstance(window_1.ElectronWindow, currentWindow, shellContainer);
        this.windowService.registerWindow(activeWindow);
        // Support runAction event
        electron_1.ipcRenderer.on('vscode:runAction', function (event, actionId) {
            _this.commandService.executeCommand(actionId, { from: 'menu' }).done(undefined, function (err) { return _this.messageService.show(severity_1.default.Error, err); });
        });
        // Support resolve keybindings event
        electron_1.ipcRenderer.on('vscode:resolveKeybindings', function (event, rawActionIds) {
            var actionIds = [];
            try {
                actionIds = JSON.parse(rawActionIds);
            }
            catch (error) {
            }
            // Resolve keys using the keybinding service and send back to browser process
            _this.resolveKeybindings(actionIds).done(function (keybindings) {
                if (keybindings.length) {
                    electron_1.ipcRenderer.send('vscode:keybindingsResolved', JSON.stringify(keybindings));
                }
            }, function () { return errors.onUnexpectedError; });
        });
        // Send over all extension viewlets when extensions are ready
        this.extensionService.onReady().then(function () {
            electron_1.ipcRenderer.send('vscode:extensionViewlets', JSON.stringify(_this.viewletService.getViewlets().filter(function (v) { return !!v.extensionId; }).map(function (v) { return { id: v.id, label: v.name }; })));
        });
        electron_1.ipcRenderer.on('vscode:reportError', function (event, error) {
            if (error) {
                var errorParsed = JSON.parse(error);
                errorParsed.mainProcess = true;
                errors.onUnexpectedError(errorParsed);
            }
        });
        // Support openFiles event for existing and new files
        electron_1.ipcRenderer.on('vscode:openFiles', function (event, request) { return _this.onOpenFiles(request); });
        // Emit event when vscode has loaded
        this.partService.joinCreation().then(function () {
            electron_1.ipcRenderer.send('vscode:workbenchLoaded', _this.windowService.getWindowId());
        });
        // Message support
        electron_1.ipcRenderer.on('vscode:showInfoMessage', function (event, message) {
            _this.messageService.show(severity_1.default.Info, message);
        });
        // Support toggling auto save
        electron_1.ipcRenderer.on('vscode.toggleAutoSave', function (event) {
            _this.toggleAutoSave();
        });
        // Fullscreen Events
        electron_1.ipcRenderer.on('vscode:enterFullScreen', function (event) {
            _this.partService.joinCreation().then(function () {
                browser.setFullscreen(true);
            });
        });
        electron_1.ipcRenderer.on('vscode:leaveFullScreen', function (event) {
            _this.partService.joinCreation().then(function () {
                browser.setFullscreen(false);
            });
        });
        // High Contrast Events
        electron_1.ipcRenderer.on('vscode:enterHighContrast', function (event) {
            _this.partService.joinCreation().then(function () {
                _this.themeService.setColorTheme(themeService_1.VS_HC_THEME, false);
            });
        });
        electron_1.ipcRenderer.on('vscode:leaveHighContrast', function (event) {
            _this.partService.joinCreation().then(function () {
                _this.themeService.setColorTheme(themeService_1.VS_DARK_THEME, false);
            });
        });
        // Configuration changes
        var previousConfiguredZoomLevel;
        this.configurationService.onDidUpdateConfiguration(function (e) {
            var windowConfig = e.config;
            var newZoomLevel = 0;
            if (windowConfig.window && typeof windowConfig.window.zoomLevel === 'number') {
                newZoomLevel = windowConfig.window.zoomLevel;
                // Leave early if the configured zoom level did not change (https://github.com/Microsoft/vscode/issues/1536)
                if (previousConfiguredZoomLevel === newZoomLevel) {
                    return;
                }
                previousConfiguredZoomLevel = newZoomLevel;
            }
            if (electron_1.webFrame.getZoomLevel() !== newZoomLevel) {
                electron_1.webFrame.setZoomLevel(newZoomLevel);
                browser.setZoomFactor(electron_1.webFrame.getZoomFactor());
                browser.setZoomLevel(electron_1.webFrame.getZoomLevel()); // Ensure others can listen to zoom level changes
            }
        });
        // Context menu support in input/textarea
        window.document.addEventListener('contextmenu', function (e) {
            if (e.target instanceof HTMLElement) {
                var target_1 = e.target;
                if (target_1.nodeName && (target_1.nodeName.toLowerCase() === 'input' || target_1.nodeName.toLowerCase() === 'textarea')) {
                    e.preventDefault();
                    e.stopPropagation();
                    _this.contextMenuService.showContextMenu({
                        getAnchor: function () { return target_1; },
                        getActions: function () { return winjs_base_1.TPromise.as(TextInputActions); },
                        getKeyBinding: function (action) {
                            var opts = _this.keybindingService.lookupKeybindings(action.id);
                            if (opts.length > 0) {
                                return opts[0]; // only take the first one
                            }
                            return null;
                        }
                    });
                }
            }
        });
        // Developer related actions
        var developerCategory = nls.localize('developer', "Developer");
        var workbenchActionsRegistry = platform_1.Registry.as(actionRegistry_1.Extensions.WorkbenchActions);
        var isDeveloping = !this.environmentService.isBuilt || this.environmentService.isExtensionDevelopment;
        workbenchActionsRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(actions_3.ReloadWindowAction, actions_3.ReloadWindowAction.ID, actions_3.ReloadWindowAction.LABEL, isDeveloping ? { primary: 32768 /* CtrlCmd */ | 48 /* KEY_R */ } : void 0), 'Reload Window');
        workbenchActionsRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(actions_3.ToggleDevToolsAction, actions_3.ToggleDevToolsAction.ID, actions_3.ToggleDevToolsAction.LABEL, isDeveloping ? { primary: 32768 /* CtrlCmd */ | 16384 /* Shift */ | 39 /* KEY_I */, mac: { primary: 32768 /* CtrlCmd */ | 8192 /* Alt */ | 39 /* KEY_I */ } } : void 0), 'Developer: Toggle Developer Tools', developerCategory);
        workbenchActionsRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(actions_3.ShowStartupPerformance, actions_3.ShowStartupPerformance.ID, actions_3.ShowStartupPerformance.LABEL), 'Developer: Startup Performance', developerCategory);
        // Action registered here to prevent a keybinding conflict with reload window
        var fileCategory = nls.localize('file', "File");
        workbenchActionsRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(actions_3.OpenRecentAction, actions_3.OpenRecentAction.ID, actions_3.OpenRecentAction.LABEL, { primary: isDeveloping ? null : 32768 /* CtrlCmd */ | 48 /* KEY_R */, mac: { primary: 4096 /* WinCtrl */ | 48 /* KEY_R */ } }), 'File: Open Recent', fileCategory);
    };
    ElectronIntegration.prototype.resolveKeybindings = function (actionIds) {
        var _this = this;
        return this.partService.joinCreation().then(function () {
            return arrays.coalesce(actionIds.map(function (id) {
                var bindings = _this.keybindingService.lookupKeybindings(id);
                // return the first binding that can be represented by electron
                for (var i = 0; i < bindings.length; i++) {
                    var binding = bindings[i];
                    var electronAccelerator = _this.keybindingService.getElectronAcceleratorFor(binding);
                    if (electronAccelerator) {
                        return {
                            id: id,
                            binding: binding.value
                        };
                    }
                }
                return null;
            }));
        });
    };
    ElectronIntegration.prototype.onOpenFiles = function (request) {
        var inputs = [];
        var diffMode = (request.filesToDiff.length === 2);
        if (!diffMode && request.filesToOpen) {
            inputs.push.apply(inputs, this.toInputs(request.filesToOpen, false));
        }
        if (!diffMode && request.filesToCreate) {
            inputs.push.apply(inputs, this.toInputs(request.filesToCreate, true));
        }
        if (diffMode) {
            inputs.push.apply(inputs, this.toInputs(request.filesToDiff, false));
        }
        if (inputs.length) {
            this.openResources(inputs, diffMode).done(null, errors.onUnexpectedError);
        }
    };
    ElectronIntegration.prototype.openResources = function (resources, diffMode) {
        var _this = this;
        return this.partService.joinCreation().then(function () {
            // In diffMode we open 2 resources as diff
            if (diffMode) {
                return winjs_base_1.TPromise.join(resources.map(function (f) { return _this.editorService.createInput(f); })).then(function (inputs) {
                    return _this.editorService.openEditor(new diffEditorInput_1.DiffEditorInput(diffEditorInput_1.toDiffLabel(resources[0].resource, resources[1].resource, _this.contextService), null, inputs[0], inputs[1]));
                });
            }
            // For one file, just put it into the current active editor
            if (resources.length === 1) {
                return _this.editorService.openEditor(resources[0]);
            }
            // Otherwise open all
            var activeEditor = _this.editorService.getActiveEditor();
            return _this.editorService.openEditors(resources.map(function (r, index) {
                return {
                    input: r,
                    position: activeEditor ? activeEditor.position : editor_1.Position.ONE
                };
            }));
        });
    };
    ElectronIntegration.prototype.toInputs = function (paths, isNew) {
        var _this = this;
        return paths.map(function (p) {
            var input = {
                resource: isNew ? _this.untitledEditorService.createOrGet(uri_1.default.file(p.filePath)).getResource() : uri_1.default.file(p.filePath),
                options: {
                    pinned: true
                }
            };
            if (!isNew && p.lineNumber) {
                input.options.selection = {
                    startLineNumber: p.lineNumber,
                    startColumn: p.columnNumber
                };
            }
            return input;
        });
    };
    ElectronIntegration.prototype.toggleAutoSave = function () {
        var _this = this;
        var setting = this.configurationService.lookup(ElectronIntegration.AUTO_SAVE_SETTING);
        var userAutoSaveConfig = setting.user;
        if (types.isUndefinedOrNull(userAutoSaveConfig)) {
            userAutoSaveConfig = setting.default; // use default if setting not defined
        }
        var newAutoSaveValue;
        if ([files_1.AutoSaveConfiguration.AFTER_DELAY, files_1.AutoSaveConfiguration.ON_FOCUS_CHANGE, files_1.AutoSaveConfiguration.ON_WINDOW_CHANGE].some(function (s) { return s === userAutoSaveConfig; })) {
            newAutoSaveValue = files_1.AutoSaveConfiguration.OFF;
        }
        else {
            newAutoSaveValue = files_1.AutoSaveConfiguration.AFTER_DELAY;
        }
        this.configurationEditingService.writeConfiguration(configurationEditing_1.ConfigurationTarget.USER, { key: ElectronIntegration.AUTO_SAVE_SETTING, value: newAutoSaveValue }).done(null, function (error) { return _this.messageService.show(severity_1.default.Error, error); });
    };
    return ElectronIntegration;
}());
ElectronIntegration.AUTO_SAVE_SETTING = 'files.autoSave';
ElectronIntegration = __decorate([
    __param(0, instantiation_1.IInstantiationService),
    __param(1, windowService_1.IWindowIPCService),
    __param(2, partService_1.IPartService),
    __param(3, workspace_1.IWorkspaceContextService),
    __param(4, configuration_1.IWorkspaceConfigurationService),
    __param(5, commands_1.ICommandService),
    __param(6, configurationEditing_1.IConfigurationEditingService),
    __param(7, keybinding_1.IKeybindingService),
    __param(8, message_1.IMessageService),
    __param(9, contextView_1.IContextMenuService),
    __param(10, editorService_1.IWorkbenchEditorService),
    __param(11, untitledEditorService_1.IUntitledEditorService),
    __param(12, environment_1.IEnvironmentService),
    __param(13, extensions_1.IExtensionService),
    __param(14, themeService_1.IThemeService),
    __param(15, viewlet_1.IViewletService)
], ElectronIntegration);
exports.ElectronIntegration = ElectronIntegration;
