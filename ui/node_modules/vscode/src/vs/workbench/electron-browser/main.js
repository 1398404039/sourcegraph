/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var nls = require('vs/nls');
var winjs_base_1 = require('vs/base/common/winjs.base');
var shell_1 = require('vs/workbench/electron-browser/shell');
var dom_1 = require('vs/base/browser/dom');
var errors = require('vs/base/common/errors');
var platform = require('vs/base/common/platform');
var paths = require('vs/base/common/paths');
var timer = require('vs/base/common/timer');
var uri_1 = require('vs/base/common/uri');
var strings = require('vs/base/common/strings');
var eventService_1 = require('vs/platform/event/common/eventService');
var workspace_1 = require('vs/platform/workspace/common/workspace');
var configurationService_1 = require('vs/workbench/services/configuration/node/configurationService');
var pfs_1 = require('vs/base/node/pfs');
var environmentService_1 = require('vs/platform/environment/node/environmentService');
var path = require('path');
var fs = require('fs');
var gracefulFs = require('graceful-fs');
gracefulFs.gracefulify(fs); // enable gracefulFs
var timers = window.MonacoEnvironment.timers;
function startup(configuration) {
    // Shell Options
    var filesToOpen = configuration.filesToOpen && configuration.filesToOpen.length ? toInputs(configuration.filesToOpen) : null;
    var filesToCreate = configuration.filesToCreate && configuration.filesToCreate.length ? toInputs(configuration.filesToCreate) : null;
    var filesToDiff = configuration.filesToDiff && configuration.filesToDiff.length ? toInputs(configuration.filesToDiff) : null;
    var shellOptions = {
        filesToOpen: filesToOpen,
        filesToCreate: filesToCreate,
        filesToDiff: filesToDiff
    };
    if (configuration.performance) {
        timer.ENABLE_TIMER = true;
    }
    // Resolve workspace
    return getWorkspace(configuration.workspacePath).then(function (workspace) {
        // Open workbench
        return openWorkbench(configuration, workspace, shellOptions);
    });
}
exports.startup = startup;
function toInputs(paths) {
    return paths.map(function (p) {
        var input = {
            resource: uri_1.default.file(p.filePath)
        };
        if (p.lineNumber) {
            input.options = {
                selection: {
                    startLineNumber: p.lineNumber,
                    startColumn: p.columnNumber
                }
            };
        }
        return input;
    });
}
function getWorkspace(workspacePath) {
    if (!workspacePath) {
        return winjs_base_1.TPromise.as(null);
    }
    return pfs_1.realpath(workspacePath).then(function (realWorkspacePath) {
        // for some weird reason, node adds a trailing slash to UNC paths
        // we never ever want trailing slashes as our workspace path unless
        // someone opens root ("/").
        // See also https://github.com/nodejs/io.js/issues/1765
        if (paths.isUNC(realWorkspacePath) && strings.endsWith(realWorkspacePath, paths.nativeSep)) {
            realWorkspacePath = strings.rtrim(realWorkspacePath, paths.nativeSep);
        }
        var workspaceResource = uri_1.default.file(realWorkspacePath);
        var folderName = path.basename(realWorkspacePath) || realWorkspacePath;
        var folderStat = fs.statSync(realWorkspacePath);
        return {
            'resource': workspaceResource,
            'name': folderName,
            'uid': platform.isLinux ? folderStat.ino : folderStat.birthtime.getTime() // On Linux, birthtime is ctime, so we cannot use it! We use the ino instead!
        };
    }, function (error) {
        errors.onUnexpectedError(error);
        return null; // treat invalid paths as empty workspace
    });
}
function openWorkbench(environment, workspace, options) {
    var eventService = new eventService_1.EventService();
    var environmentService = new environmentService_1.EnvironmentService(environment, environment.execPath);
    var contextService = new workspace_1.WorkspaceContextService(workspace);
    var configurationService = new configurationService_1.WorkspaceConfigurationService(contextService, eventService, environmentService);
    // Since the configuration service is one of the core services that is used in so many places, we initialize it
    // right before startup of the workbench shell to have its data ready for consumers
    return configurationService.initialize().then(function () {
        timers.beforeReady = new Date();
        return dom_1.domContentLoaded().then(function () {
            timers.afterReady = new Date();
            // Open Shell
            var beforeOpen = new Date();
            var shell = new shell_1.WorkbenchShell(document.body, workspace, {
                configurationService: configurationService,
                eventService: eventService,
                contextService: contextService,
                environmentService: environmentService
            }, options);
            shell.open();
            shell.joinCreation().then(function () {
                timer.start(timer.Topic.STARTUP, 'Open Shell, Viewlet & Editor', beforeOpen, 'Workbench has opened after this event with viewlet and editor restored').stop();
            });
            // Inform user about loading issues from the loader
            self.require.config({
                onError: function (err) {
                    if (err.errorCode === 'load') {
                        shell.onUnexpectedError(loaderError(err));
                    }
                }
            });
        });
    });
}
function loaderError(err) {
    if (platform.isWeb) {
        return new Error(nls.localize('loaderError', "Failed to load a required file. Either you are no longer connected to the internet or the server you are connected to is offline. Please refresh the browser to try again."));
    }
    return new Error(nls.localize('loaderErrorNative', "Failed to load a required file. Please restart the application to try again. Details: {0}", JSON.stringify(err)));
}
