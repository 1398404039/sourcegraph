/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var uri_1 = require('vs/base/common/uri');
var winjs_base_1 = require('vs/base/common/winjs.base');
var timer = require('vs/base/common/timer');
var actions_1 = require('vs/base/common/actions');
var windowService_1 = require('vs/workbench/services/window/electron-browser/windowService');
var editorService_1 = require('vs/workbench/services/editor/common/editorService');
var diffEditorInput_1 = require('vs/workbench/common/editor/diffEditorInput');
var nls = require('vs/nls');
var product_1 = require('vs/platform/product');
var package_1 = require('vs/platform/package');
var errors = require('vs/base/common/errors');
var message_1 = require('vs/platform/message/common/message');
var workspace_1 = require('vs/platform/workspace/common/workspace');
var partService_1 = require('vs/workbench/services/part/common/partService');
var environment_1 = require('vs/platform/environment/common/environment');
var configurationEditing_1 = require('vs/workbench/services/configuration/common/configurationEditing');
var extensionManagement_1 = require('vs/platform/extensionManagement/common/extensionManagement');
var configuration_1 = require('vs/workbench/services/configuration/common/configuration');
var commands_1 = require('vs/platform/commands/common/commands');
var paths = require('vs/base/common/paths');
var platform_1 = require('vs/base/common/platform');
var quickOpenService_1 = require('vs/workbench/services/quickopen/common/quickOpenService');
var browser = require('vs/base/browser/browser');
var integrity_1 = require('vs/platform/integrity/common/integrity');
var os = require('os');
var electron_1 = require('electron');
// --- actions
var CloseEditorAction = (function (_super) {
    __extends(CloseEditorAction, _super);
    function CloseEditorAction(id, label, editorService) {
        _super.call(this, id, label);
        this.editorService = editorService;
    }
    CloseEditorAction.prototype.run = function () {
        var activeEditor = this.editorService.getActiveEditor();
        if (activeEditor) {
            return this.editorService.closeEditor(activeEditor.position, activeEditor.input);
        }
        return winjs_base_1.TPromise.as(false);
    };
    CloseEditorAction.ID = 'workbench.action.closeActiveEditor';
    CloseEditorAction.LABEL = nls.localize('closeActiveEditor', "Close Editor");
    CloseEditorAction = __decorate([
        __param(2, editorService_1.IWorkbenchEditorService)
    ], CloseEditorAction);
    return CloseEditorAction;
}(actions_1.Action));
exports.CloseEditorAction = CloseEditorAction;
var CloseWindowAction = (function (_super) {
    __extends(CloseWindowAction, _super);
    function CloseWindowAction(id, label, windowService) {
        _super.call(this, id, label);
        this.windowService = windowService;
    }
    CloseWindowAction.prototype.run = function () {
        this.windowService.getWindow().close();
        return winjs_base_1.TPromise.as(true);
    };
    CloseWindowAction.ID = 'workbench.action.closeWindow';
    CloseWindowAction.LABEL = nls.localize('closeWindow', "Close Window");
    CloseWindowAction = __decorate([
        __param(2, windowService_1.IWindowService)
    ], CloseWindowAction);
    return CloseWindowAction;
}(actions_1.Action));
exports.CloseWindowAction = CloseWindowAction;
var SwitchWindow = (function (_super) {
    __extends(SwitchWindow, _super);
    function SwitchWindow(id, label, windowService, quickOpenService) {
        _super.call(this, id, label);
        this.windowService = windowService;
        this.quickOpenService = quickOpenService;
    }
    SwitchWindow.prototype.run = function () {
        var _this = this;
        var id = this.windowService.getWindowId();
        electron_1.ipcRenderer.send('vscode:switchWindow', id);
        electron_1.ipcRenderer.once('vscode:switchWindow', function (event, workspaces) {
            var picks = workspaces.map(function (w) {
                return {
                    label: w.title,
                    description: (id === w.id) ? nls.localize('current', "Current Window") : void 0,
                    run: function () {
                        electron_1.ipcRenderer.send('vscode:showWindow', w.id);
                    }
                };
            });
            _this.quickOpenService.pick(picks, { placeHolder: nls.localize('switchWindowPlaceHolder', "Select a window") });
        });
        return winjs_base_1.TPromise.as(true);
    };
    SwitchWindow.ID = 'workbench.action.switchWindow';
    SwitchWindow.LABEL = nls.localize('switchWindow', "Switch Window");
    SwitchWindow = __decorate([
        __param(2, windowService_1.IWindowService),
        __param(3, quickOpenService_1.IQuickOpenService)
    ], SwitchWindow);
    return SwitchWindow;
}(actions_1.Action));
exports.SwitchWindow = SwitchWindow;
var CloseFolderAction = (function (_super) {
    __extends(CloseFolderAction, _super);
    function CloseFolderAction(id, label, contextService, messageService, windowService) {
        _super.call(this, id, label);
        this.contextService = contextService;
        this.messageService = messageService;
        this.windowService = windowService;
    }
    CloseFolderAction.prototype.run = function () {
        if (this.contextService.getWorkspace()) {
            electron_1.ipcRenderer.send('vscode:closeFolder', this.windowService.getWindowId()); // handled from browser process
        }
        else {
            this.messageService.show(message_1.Severity.Info, nls.localize('noFolderOpened', "There is currently no folder opened in this instance to close."));
        }
        return winjs_base_1.TPromise.as(true);
    };
    CloseFolderAction.ID = 'workbench.action.closeFolder';
    CloseFolderAction.LABEL = nls.localize('closeFolder', "Close Folder");
    CloseFolderAction = __decorate([
        __param(2, workspace_1.IWorkspaceContextService),
        __param(3, message_1.IMessageService),
        __param(4, windowService_1.IWindowService)
    ], CloseFolderAction);
    return CloseFolderAction;
}(actions_1.Action));
exports.CloseFolderAction = CloseFolderAction;
var NewWindowAction = (function (_super) {
    __extends(NewWindowAction, _super);
    function NewWindowAction(id, label, windowService) {
        _super.call(this, id, label);
        this.windowService = windowService;
    }
    NewWindowAction.prototype.run = function () {
        this.windowService.getWindow().openNew();
        return winjs_base_1.TPromise.as(true);
    };
    NewWindowAction.ID = 'workbench.action.newWindow';
    NewWindowAction.LABEL = nls.localize('newWindow', "New Window");
    NewWindowAction = __decorate([
        __param(2, windowService_1.IWindowService)
    ], NewWindowAction);
    return NewWindowAction;
}(actions_1.Action));
exports.NewWindowAction = NewWindowAction;
var ToggleFullScreenAction = (function (_super) {
    __extends(ToggleFullScreenAction, _super);
    function ToggleFullScreenAction(id, label, windowService) {
        _super.call(this, id, label);
        this.windowService = windowService;
    }
    ToggleFullScreenAction.prototype.run = function () {
        electron_1.ipcRenderer.send('vscode:toggleFullScreen', this.windowService.getWindowId());
        return winjs_base_1.TPromise.as(true);
    };
    ToggleFullScreenAction.ID = 'workbench.action.toggleFullScreen';
    ToggleFullScreenAction.LABEL = nls.localize('toggleFullScreen', "Toggle Full Screen");
    ToggleFullScreenAction = __decorate([
        __param(2, windowService_1.IWindowService)
    ], ToggleFullScreenAction);
    return ToggleFullScreenAction;
}(actions_1.Action));
exports.ToggleFullScreenAction = ToggleFullScreenAction;
var ToggleMenuBarAction = (function (_super) {
    __extends(ToggleMenuBarAction, _super);
    function ToggleMenuBarAction(id, label, windowService) {
        _super.call(this, id, label);
        this.windowService = windowService;
    }
    ToggleMenuBarAction.prototype.run = function () {
        electron_1.ipcRenderer.send('vscode:toggleMenuBar', this.windowService.getWindowId());
        return winjs_base_1.TPromise.as(true);
    };
    ToggleMenuBarAction.ID = 'workbench.action.toggleMenuBar';
    ToggleMenuBarAction.LABEL = nls.localize('toggleMenuBar', "Toggle Menu Bar");
    ToggleMenuBarAction = __decorate([
        __param(2, windowService_1.IWindowService)
    ], ToggleMenuBarAction);
    return ToggleMenuBarAction;
}(actions_1.Action));
exports.ToggleMenuBarAction = ToggleMenuBarAction;
var ToggleDevToolsAction = (function (_super) {
    __extends(ToggleDevToolsAction, _super);
    function ToggleDevToolsAction(id, label, windowService) {
        _super.call(this, id, label);
        this.windowService = windowService;
    }
    ToggleDevToolsAction.prototype.run = function () {
        electron_1.ipcRenderer.send('vscode:toggleDevTools', this.windowService.getWindowId());
        return winjs_base_1.TPromise.as(true);
    };
    ToggleDevToolsAction.ID = 'workbench.action.toggleDevTools';
    ToggleDevToolsAction.LABEL = nls.localize('toggleDevTools', "Toggle Developer Tools");
    ToggleDevToolsAction = __decorate([
        __param(2, windowService_1.IWindowService)
    ], ToggleDevToolsAction);
    return ToggleDevToolsAction;
}(actions_1.Action));
exports.ToggleDevToolsAction = ToggleDevToolsAction;
var BaseZoomAction = (function (_super) {
    __extends(BaseZoomAction, _super);
    function BaseZoomAction(id, label, messageService, configurationService, configurationEditingService) {
        _super.call(this, id, label);
        this.messageService = messageService;
        this.configurationService = configurationService;
        this.configurationEditingService = configurationEditingService;
    }
    BaseZoomAction.prototype.setConfiguredZoomLevel = function (level) {
        var target = configurationEditing_1.ConfigurationTarget.USER;
        if (typeof this.configurationService.lookup(BaseZoomAction.SETTING_KEY).workspace === 'number') {
            target = configurationEditing_1.ConfigurationTarget.WORKSPACE;
        }
        var applyZoom = function () {
            electron_1.webFrame.setZoomLevel(level);
            browser.setZoomLevel(level); // Ensure others can listen to zoom level changes
        };
        this.configurationEditingService.writeConfiguration(target, { key: BaseZoomAction.SETTING_KEY, value: level }).done(function () { return applyZoom(); }, function (error) { return applyZoom(); });
    };
    BaseZoomAction.SETTING_KEY = 'window.zoomLevel';
    BaseZoomAction = __decorate([
        __param(2, message_1.IMessageService),
        __param(3, configuration_1.IWorkspaceConfigurationService),
        __param(4, configurationEditing_1.IConfigurationEditingService)
    ], BaseZoomAction);
    return BaseZoomAction;
}(actions_1.Action));
exports.BaseZoomAction = BaseZoomAction;
var ZoomInAction = (function (_super) {
    __extends(ZoomInAction, _super);
    function ZoomInAction(id, label, messageService, configurationService, configurationEditingService) {
        _super.call(this, id, label, messageService, configurationService, configurationEditingService);
    }
    ZoomInAction.prototype.run = function () {
        this.setConfiguredZoomLevel(electron_1.webFrame.getZoomLevel() + 1);
        return winjs_base_1.TPromise.as(true);
    };
    ZoomInAction.ID = 'workbench.action.zoomIn';
    ZoomInAction.LABEL = nls.localize('zoomIn', "Zoom In");
    ZoomInAction = __decorate([
        __param(2, message_1.IMessageService),
        __param(3, configuration_1.IWorkspaceConfigurationService),
        __param(4, configurationEditing_1.IConfigurationEditingService)
    ], ZoomInAction);
    return ZoomInAction;
}(BaseZoomAction));
exports.ZoomInAction = ZoomInAction;
var ZoomOutAction = (function (_super) {
    __extends(ZoomOutAction, _super);
    function ZoomOutAction(id, label, messageService, configurationService, configurationEditingService) {
        _super.call(this, id, label, messageService, configurationService, configurationEditingService);
    }
    ZoomOutAction.prototype.run = function () {
        this.setConfiguredZoomLevel(electron_1.webFrame.getZoomLevel() - 1);
        return winjs_base_1.TPromise.as(true);
    };
    ZoomOutAction.ID = 'workbench.action.zoomOut';
    ZoomOutAction.LABEL = nls.localize('zoomOut', "Zoom Out");
    ZoomOutAction = __decorate([
        __param(2, message_1.IMessageService),
        __param(3, configuration_1.IWorkspaceConfigurationService),
        __param(4, configurationEditing_1.IConfigurationEditingService)
    ], ZoomOutAction);
    return ZoomOutAction;
}(BaseZoomAction));
exports.ZoomOutAction = ZoomOutAction;
var ZoomResetAction = (function (_super) {
    __extends(ZoomResetAction, _super);
    function ZoomResetAction(id, label, messageService, configurationService, configurationEditingService) {
        _super.call(this, id, label, messageService, configurationService, configurationEditingService);
    }
    ZoomResetAction.prototype.run = function () {
        this.setConfiguredZoomLevel(0);
        return winjs_base_1.TPromise.as(true);
    };
    ZoomResetAction.ID = 'workbench.action.zoomReset';
    ZoomResetAction.LABEL = nls.localize('zoomReset', "Reset Zoom");
    ZoomResetAction = __decorate([
        __param(2, message_1.IMessageService),
        __param(3, configuration_1.IWorkspaceConfigurationService),
        __param(4, configurationEditing_1.IConfigurationEditingService)
    ], ZoomResetAction);
    return ZoomResetAction;
}(BaseZoomAction));
exports.ZoomResetAction = ZoomResetAction;
/* Copied from loader.ts */
var LoaderEventType;
(function (LoaderEventType) {
    LoaderEventType[LoaderEventType["LoaderAvailable"] = 1] = "LoaderAvailable";
    LoaderEventType[LoaderEventType["BeginLoadingScript"] = 10] = "BeginLoadingScript";
    LoaderEventType[LoaderEventType["EndLoadingScriptOK"] = 11] = "EndLoadingScriptOK";
    LoaderEventType[LoaderEventType["EndLoadingScriptError"] = 12] = "EndLoadingScriptError";
    LoaderEventType[LoaderEventType["BeginInvokeFactory"] = 21] = "BeginInvokeFactory";
    LoaderEventType[LoaderEventType["EndInvokeFactory"] = 22] = "EndInvokeFactory";
    LoaderEventType[LoaderEventType["NodeBeginEvaluatingScript"] = 31] = "NodeBeginEvaluatingScript";
    LoaderEventType[LoaderEventType["NodeEndEvaluatingScript"] = 32] = "NodeEndEvaluatingScript";
    LoaderEventType[LoaderEventType["NodeBeginNativeRequire"] = 33] = "NodeBeginNativeRequire";
    LoaderEventType[LoaderEventType["NodeEndNativeRequire"] = 34] = "NodeEndNativeRequire";
})(LoaderEventType || (LoaderEventType = {}));
var ShowStartupPerformance = (function (_super) {
    __extends(ShowStartupPerformance, _super);
    function ShowStartupPerformance(id, label, windowService, environmentService) {
        _super.call(this, id, label);
        this.windowService = windowService;
        this.enabled = environmentService.performance;
    }
    ShowStartupPerformance.prototype._analyzeLoaderTimes = function () {
        var stats = require.getStats();
        var result = [];
        var total = 0;
        for (var i = 0, len = stats.length; i < len; i++) {
            if (stats[i].type === LoaderEventType.NodeEndNativeRequire) {
                if (stats[i - 1].type === LoaderEventType.NodeBeginNativeRequire && stats[i - 1].detail === stats[i].detail) {
                    var entry = {};
                    entry['Event'] = 'nodeRequire ' + stats[i].detail;
                    entry['Took (ms)'] = (stats[i].timestamp - stats[i - 1].timestamp);
                    total += (stats[i].timestamp - stats[i - 1].timestamp);
                    entry['Start (ms)'] = '**' + stats[i - 1].timestamp;
                    entry['End (ms)'] = '**' + stats[i - 1].timestamp;
                    result.push(entry);
                }
            }
        }
        if (total > 0) {
            var entry = {};
            entry['Event'] = '===nodeRequire TOTAL';
            entry['Took (ms)'] = total;
            entry['Start (ms)'] = '**';
            entry['End (ms)'] = '**';
            result.push(entry);
        }
        return result;
    };
    ShowStartupPerformance.prototype.run = function () {
        var table = [];
        table.push.apply(table, this._analyzeLoaderTimes());
        var start = Math.round(electron_1.remote.getGlobal('vscodeStart'));
        var windowShowTime = Math.round(electron_1.remote.getGlobal('windowShow'));
        var lastEvent;
        var events = timer.getTimeKeeper().getCollectedEvents();
        events.forEach(function (e) {
            if (e.topic === 'Startup') {
                lastEvent = e;
                var entry = {};
                entry['Event'] = e.name;
                entry['Took (ms)'] = e.stopTime.getTime() - e.startTime.getTime();
                entry['Start (ms)'] = Math.max(e.startTime.getTime() - start, 0);
                entry['End (ms)'] = e.stopTime.getTime() - start;
                table.push(entry);
            }
        });
        table.push({ Event: '---------------------------' });
        var windowShowEvent = {};
        windowShowEvent['Event'] = 'Show Window at';
        windowShowEvent['Start (ms)'] = windowShowTime - start;
        table.push(windowShowEvent);
        var sum = {};
        sum['Event'] = 'Total';
        sum['Took (ms)'] = lastEvent.stopTime.getTime() - start;
        table.push(sum);
        // Show dev tools
        this.windowService.getWindow().openDevTools();
        // Print to console
        setTimeout(function () {
            console.warn('Run the action again if you do not see the numbers!');
            console.table(table);
        }, 1000);
        return winjs_base_1.TPromise.as(true);
    };
    ShowStartupPerformance.ID = 'workbench.action.appPerf';
    ShowStartupPerformance.LABEL = nls.localize('appPerf', "Startup Performance");
    ShowStartupPerformance = __decorate([
        __param(2, windowService_1.IWindowService),
        __param(3, environment_1.IEnvironmentService)
    ], ShowStartupPerformance);
    return ShowStartupPerformance;
}(actions_1.Action));
exports.ShowStartupPerformance = ShowStartupPerformance;
var ReloadWindowAction = (function (_super) {
    __extends(ReloadWindowAction, _super);
    function ReloadWindowAction(id, label, windowService, partService) {
        _super.call(this, id, label);
        this.windowService = windowService;
        this.partService = partService;
    }
    ReloadWindowAction.prototype.run = function () {
        this.partService.setRestoreSidebar(); // we want the same sidebar after a reload restored
        this.windowService.getWindow().reload();
        return winjs_base_1.TPromise.as(true);
    };
    ReloadWindowAction.ID = 'workbench.action.reloadWindow';
    ReloadWindowAction.LABEL = nls.localize('reloadWindow', "Reload Window");
    ReloadWindowAction = __decorate([
        __param(2, windowService_1.IWindowService),
        __param(3, partService_1.IPartService)
    ], ReloadWindowAction);
    return ReloadWindowAction;
}(actions_1.Action));
exports.ReloadWindowAction = ReloadWindowAction;
var OpenRecentAction = (function (_super) {
    __extends(OpenRecentAction, _super);
    function OpenRecentAction(id, label, windowService, quickOpenService, contextService) {
        _super.call(this, id, label);
        this.windowService = windowService;
        this.quickOpenService = quickOpenService;
        this.contextService = contextService;
    }
    OpenRecentAction.prototype.run = function () {
        var _this = this;
        electron_1.ipcRenderer.send('vscode:openRecent', this.windowService.getWindowId());
        return new winjs_base_1.TPromise(function (c, e, p) {
            electron_1.ipcRenderer.once('vscode:openRecent', function (event, files, folders) {
                _this.openRecent(files, folders);
                c(true);
            });
        });
    };
    OpenRecentAction.prototype.openRecent = function (recentFiles, recentFolders) {
        function toPick(path, separator, isFolder) {
            return {
                resource: uri_1.default.file(path),
                isFolder: isFolder,
                label: paths.basename(path),
                description: paths.dirname(path),
                separator: separator,
                run: function (context) { return runPick(path, context); }
            };
        }
        function runPick(path, context) {
            var newWindow = context.keymods.indexOf(32768 /* CtrlCmd */) >= 0;
            electron_1.ipcRenderer.send('vscode:windowOpen', [path], newWindow);
        }
        var folderPicks = recentFolders.map(function (p, index) { return toPick(p, index === 0 ? { label: nls.localize('folders', "folders") } : void 0, true); });
        var filePicks = recentFiles.map(function (p, index) { return toPick(p, index === 0 ? { label: nls.localize('files', "files"), border: true } : void 0, false); });
        var hasWorkspace = !!this.contextService.getWorkspace();
        this.quickOpenService.pick(folderPicks.concat.apply(folderPicks, filePicks), {
            autoFocus: { autoFocusFirstEntry: !hasWorkspace, autoFocusSecondEntry: hasWorkspace },
            placeHolder: platform_1.isMacintosh ? nls.localize('openRecentPlaceHolderMac', "Select a path (hold Cmd-key to open in new window)") : nls.localize('openRecentPlaceHolder', "Select a path to open (hold Ctrl-key to open in new window)"),
            matchOnDescription: true
        }).done(null, errors.onUnexpectedError);
    };
    OpenRecentAction.ID = 'workbench.action.openRecent';
    OpenRecentAction.LABEL = nls.localize('openRecent', "Open Recent");
    OpenRecentAction = __decorate([
        __param(2, windowService_1.IWindowService),
        __param(3, quickOpenService_1.IQuickOpenService),
        __param(4, workspace_1.IWorkspaceContextService)
    ], OpenRecentAction);
    return OpenRecentAction;
}(actions_1.Action));
exports.OpenRecentAction = OpenRecentAction;
var CloseMessagesAction = (function (_super) {
    __extends(CloseMessagesAction, _super);
    function CloseMessagesAction(id, label, messageService, editorService) {
        _super.call(this, id, label);
        this.messageService = messageService;
        this.editorService = editorService;
    }
    CloseMessagesAction.prototype.run = function () {
        // Close any Message if visible
        this.messageService.hideAll();
        // Restore focus if we got an editor
        var editor = this.editorService.getActiveEditor();
        if (editor) {
            editor.focus();
        }
        return winjs_base_1.TPromise.as(true);
    };
    CloseMessagesAction.ID = 'workbench.action.closeMessages';
    CloseMessagesAction.LABEL = nls.localize('closeMessages', "Close Notification Messages");
    CloseMessagesAction = __decorate([
        __param(2, message_1.IMessageService),
        __param(3, editorService_1.IWorkbenchEditorService)
    ], CloseMessagesAction);
    return CloseMessagesAction;
}(actions_1.Action));
exports.CloseMessagesAction = CloseMessagesAction;
var ReportIssueAction = (function (_super) {
    __extends(ReportIssueAction, _super);
    function ReportIssueAction(id, label, messageService, integrityService, extensionManagementService, editorService) {
        _super.call(this, id, label);
        this.messageService = messageService;
        this.integrityService = integrityService;
        this.extensionManagementService = extensionManagementService;
        this.editorService = editorService;
    }
    ReportIssueAction.prototype.run = function () {
        var _this = this;
        return this.integrityService.isPure().then(function (res) {
            return _this.extensionManagementService.getInstalled(extensionManagement_1.LocalExtensionType.User).then(function (extensions) {
                var issueUrl = _this.generateNewIssueUrl(product_1.default.reportIssueUrl, package_1.default.name, package_1.default.version, product_1.default.commit, product_1.default.date, res.isPure, extensions);
                electron_1.shell.openExternal(issueUrl);
                return winjs_base_1.TPromise.as(true);
            });
        });
    };
    ReportIssueAction.prototype.generateNewIssueUrl = function (baseUrl, name, version, commit, date, isPure, extensions) {
        // Avoid backticks, these can trigger XSS detectors. (https://github.com/Microsoft/vscode/issues/13098)
        var osVersion = os.type() + " " + os.arch() + " " + os.release();
        var queryStringPrefix = baseUrl.indexOf('?') === -1 ? '?' : '&';
        var body = encodeURIComponent("- VSCode Version: " + name + " " + version + (isPure ? '' : ' **[Unsupported]**') + " (" + (product_1.default.commit || 'Commit unknown') + ", " + (product_1.default.date || 'Date unknown') + ")\n- OS Version: " + osVersion + "\n- Extensions: " + extensions.map(function (e) { return e.id; }).join(', ') + "\n\nSteps to Reproduce:\n\n1.\n2.");
        return "" + baseUrl + queryStringPrefix + "body=" + body;
    };
    ReportIssueAction.ID = 'workbench.action.reportIssues';
    ReportIssueAction.LABEL = nls.localize('reportIssues', "Report Issues");
    ReportIssueAction = __decorate([
        __param(2, message_1.IMessageService),
        __param(3, integrity_1.IIntegrityService),
        __param(4, extensionManagement_1.IExtensionManagementService),
        __param(5, editorService_1.IWorkbenchEditorService)
    ], ReportIssueAction);
    return ReportIssueAction;
}(actions_1.Action));
exports.ReportIssueAction = ReportIssueAction;
// --- commands
commands_1.CommandsRegistry.registerCommand('_workbench.ipc', function (accessor, ipcMessage, ipcArgs) {
    if (ipcMessage && Array.isArray(ipcArgs)) {
        electron_1.ipcRenderer.send.apply(electron_1.ipcRenderer, [ipcMessage].concat(ipcArgs));
    }
    else {
        electron_1.ipcRenderer.send(ipcMessage);
    }
});
commands_1.CommandsRegistry.registerCommand('_workbench.diff', function (accessor, args) {
    var editorService = accessor.get(editorService_1.IWorkbenchEditorService);
    var left = args[0], right = args[1], label = args[2];
    if (!label) {
        label = nls.localize('diffLeftRightLabel', "{0} ⟷ {1}", left.toString(true), right.toString(true));
    }
    return winjs_base_1.TPromise.join([editorService.createInput({ resource: left }), editorService.createInput({ resource: right })]).then(function (inputs) {
        var left = inputs[0], right = inputs[1];
        var diff = new diffEditorInput_1.DiffEditorInput(label, void 0, left, right);
        return editorService.openEditor(diff);
    }).then(function () {
        return void 0;
    });
});
commands_1.CommandsRegistry.registerCommand('_workbench.open', function (accessor, args) {
    var editorService = accessor.get(editorService_1.IWorkbenchEditorService);
    var resource = args[0], column = args[1];
    return editorService.openEditor({ resource: resource }, column).then(function () {
        return void 0;
    });
});
