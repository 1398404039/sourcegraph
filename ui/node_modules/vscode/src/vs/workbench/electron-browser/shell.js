/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
require('./media/shell.css');
var nls = require('vs/nls');
var platform = require('vs/base/common/platform');
var builder_1 = require('vs/base/browser/builder');
var dom = require('vs/base/browser/dom');
var aria = require('vs/base/browser/ui/aria/aria');
var lifecycle_1 = require('vs/base/common/lifecycle');
var errors = require('vs/base/common/errors');
var errorMessage_1 = require('vs/base/common/errorMessage');
var product_1 = require('vs/platform/product');
var package_1 = require('vs/platform/package');
var contextViewService_1 = require('vs/platform/contextview/browser/contextViewService');
var timer = require('vs/base/common/timer');
var workbench_1 = require('vs/workbench/electron-browser/workbench');
var storage_1 = require('vs/workbench/common/storage');
var telemetry_1 = require('vs/platform/telemetry/common/telemetry');
var telemetryIpc_1 = require('vs/platform/telemetry/common/telemetryIpc');
var telemetryService_1 = require('vs/platform/telemetry/common/telemetryService');
var idleMonitor_1 = require('vs/platform/telemetry/browser/idleMonitor');
var errorTelemetry_1 = require('vs/platform/telemetry/browser/errorTelemetry');
var workbenchCommonProperties_1 = require('vs/platform/telemetry/node/workbenchCommonProperties');
var integration_1 = require('vs/workbench/electron-browser/integration');
var update_1 = require('vs/workbench/electron-browser/update');
var workspaceStats_1 = require('vs/workbench/services/telemetry/common/workspaceStats');
var windowService_1 = require('vs/workbench/services/window/electron-browser/windowService');
var messageService_1 = require('vs/workbench/services/message/electron-browser/messageService');
var request_1 = require('vs/platform/request/common/request');
var requestService_1 = require('vs/platform/request/node/requestService');
var configuration_1 = require('vs/platform/configuration/common/configuration');
var searchService_1 = require('vs/workbench/services/search/node/searchService');
var lifecycleService_1 = require('vs/workbench/services/lifecycle/electron-browser/lifecycleService');
var threadService_1 = require('vs/workbench/services/thread/electron-browser/threadService');
var markerService_1 = require('vs/platform/markers/common/markerService');
var modelService_1 = require('vs/editor/common/services/modelService');
var modelServiceImpl_1 = require('vs/editor/common/services/modelServiceImpl');
var compatWorkerService_1 = require('vs/editor/common/services/compatWorkerService');
var compatWorkerServiceMain_1 = require('vs/editor/common/services/compatWorkerServiceMain');
var codeEditorServiceImpl_1 = require('vs/editor/browser/services/codeEditorServiceImpl');
var codeEditorService_1 = require('vs/editor/common/services/codeEditorService');
var integrityServiceImpl_1 = require('vs/platform/integrity/node/integrityServiceImpl');
var integrity_1 = require('vs/platform/integrity/common/integrity');
var editorWorkerServiceImpl_1 = require('vs/editor/common/services/editorWorkerServiceImpl');
var editorWorkerService_1 = require('vs/editor/common/services/editorWorkerService');
var mainThreadExtensionService_1 = require('vs/workbench/api/node/mainThreadExtensionService');
var storage_2 = require('vs/platform/storage/common/storage');
var serviceCollection_1 = require('vs/platform/instantiation/common/serviceCollection');
var instantiationService_1 = require('vs/platform/instantiation/common/instantiationService');
var contextView_1 = require('vs/platform/contextview/browser/contextView');
var event_1 = require('vs/platform/event/common/event');
var lifecycle_2 = require('vs/platform/lifecycle/common/lifecycle');
var markers_1 = require('vs/platform/markers/common/markers');
var environment_1 = require('vs/platform/environment/common/environment');
var message_1 = require('vs/platform/message/common/message');
var messageIpc_1 = require('vs/platform/message/common/messageIpc');
var search_1 = require('vs/platform/search/common/search');
var threadService_2 = require('vs/workbench/services/thread/common/threadService');
var commands_1 = require('vs/platform/commands/common/commands');
var commandService_1 = require('vs/platform/commands/common/commandService');
var workspace_1 = require('vs/platform/workspace/common/workspace');
var extensions_1 = require('vs/platform/extensions/common/extensions');
var modeServiceImpl_1 = require('vs/editor/common/services/modeServiceImpl');
var modeService_1 = require('vs/editor/common/services/modeService');
var untitledEditorService_1 = require('vs/workbench/services/untitled/common/untitledEditorService');
var crashReporter_1 = require('vs/workbench/electron-browser/crashReporter');
var themeService_1 = require('vs/workbench/services/themes/common/themeService');
var themeService_2 = require('vs/workbench/services/themes/electron-browser/themeService');
var ipc_1 = require('vs/base/parts/ipc/common/ipc');
var ipc_net_1 = require('vs/base/parts/ipc/node/ipc.net');
var ipc_electron_1 = require('vs/base/parts/ipc/common/ipc.electron');
var electron_1 = require('electron');
var extensionManagementIpc_1 = require('vs/platform/extensionManagement/common/extensionManagementIpc');
var extensionManagement_1 = require('vs/platform/extensionManagement/common/extensionManagement');
var urlIpc_1 = require('vs/platform/url/common/urlIpc');
var url_1 = require('vs/platform/url/common/url');
var actions_1 = require('vs/workbench/electron-browser/actions');
var configurationService_1 = require('vs/workbench/services/configuration/node/configurationService');
// self registering services
require('vs/platform/opener/browser/opener.contribution');
/**
 * The workbench shell contains the workbench with a rich header containing navigation and the activity bar.
 * With the Shell being the top level element in the page, it is also responsible for driving the layouting.
 */
var WorkbenchShell = (function () {
    function WorkbenchShell(container, workspace, services, options) {
        this.container = container;
        this.workspace = workspace;
        this.options = options;
        this.contextService = services.contextService;
        this.eventService = services.eventService;
        this.configurationService = services.configurationService;
        this.environmentService = services.environmentService;
        this.toUnbind = [];
        this.previousErrorTime = 0;
    }
    WorkbenchShell.prototype.createContents = function (parent) {
        var _this = this;
        // ARIA
        aria.setARIAContainer(document.body);
        // Workbench Container
        var workbenchContainer = builder_1.$(parent).div();
        // Instantiation service with services
        var _a = this.initServiceCollection(parent.getHTMLElement()), instantiationService = _a[0], serviceCollection = _a[1];
        //crash reporting
        if (!!product_1.default.crashReporter) {
            var crashReporter = instantiationService.createInstance(crashReporter_1.CrashReporter, package_1.default.version, product_1.default.commit);
            crashReporter.start(product_1.default.crashReporter);
        }
        // Workbench
        this.workbench = instantiationService.createInstance(workbench_1.Workbench, workbenchContainer.getHTMLElement(), this.workspace, this.options, serviceCollection);
        this.workbench.startup({
            onWorkbenchStarted: function (customKeybindingsCount) {
                _this.onWorkbenchStarted(customKeybindingsCount);
            }
        });
        // Electron integration
        this.workbench.getInstantiationService().createInstance(integration_1.ElectronIntegration).integrate(this.container);
        // Update
        this.workbench.getInstantiationService().createInstance(update_1.Update);
        // Handle case where workbench is not starting up properly
        var timeoutHandle = setTimeout(function () {
            console.warn('Workbench did not finish loading in 10 seconds, that might be a problem that should be reported.');
        }, 10000);
        this.workbench.joinCreation().then(function () {
            clearTimeout(timeoutHandle);
        });
        return workbenchContainer;
    };
    WorkbenchShell.prototype.onWorkbenchStarted = function (customKeybindingsCount) {
        // Log to telemetry service
        var windowSize = {
            innerHeight: window.innerHeight,
            innerWidth: window.innerWidth,
            outerHeight: window.outerHeight,
            outerWidth: window.outerWidth
        };
        this.telemetryService.publicLog('workspaceLoad', {
            userAgent: navigator.userAgent,
            windowSize: windowSize,
            emptyWorkbench: !this.contextService.getWorkspace(),
            customKeybindingsCount: customKeybindingsCount,
            theme: this.themeService.getColorTheme(),
            language: platform.language,
            experiments: this.telemetryService.getExperiments()
        });
        var workspaceStats = this.workbench.getInstantiationService().createInstance(workspaceStats_1.WorkspaceStats);
        workspaceStats.reportWorkspaceTags();
        if ((platform.isLinux || platform.isMacintosh) && process.getuid() === 0) {
            this.messageService.show(message_1.Severity.Warning, nls.localize('runningAsRoot', "It is recommended not to run Code as 'root'."));
        }
    };
    WorkbenchShell.prototype.initServiceCollection = function (container) {
        var _this = this;
        var disposables = new lifecycle_1.Disposables();
        var mainProcessClient = new ipc_electron_1.Client(electron_1.ipcRenderer);
        disposables.add(mainProcessClient);
        var serviceCollection = new serviceCollection_1.ServiceCollection();
        serviceCollection.set(event_1.IEventService, this.eventService);
        serviceCollection.set(workspace_1.IWorkspaceContextService, this.contextService);
        serviceCollection.set(configuration_1.IConfigurationService, this.configurationService);
        serviceCollection.set(environment_1.IEnvironmentService, this.environmentService);
        var instantiationService = new instantiationService_1.InstantiationService(serviceCollection, true);
        this.windowService = instantiationService.createInstance(windowService_1.WindowService);
        serviceCollection.set(windowService_1.IWindowService, this.windowService);
        var sharedProcess = ipc_net_1.connect(this.environmentService.sharedIPCHandle, "window:" + this.windowService.getWindowId());
        sharedProcess.done(function (client) {
            client.registerChannel('choice', new messageIpc_1.ChoiceChannel(_this.messageService));
            client.onClose(function () {
                _this.messageService.show(message_1.Severity.Error, {
                    message: nls.localize('sharedProcessCrashed', "The shared process terminated unexpectedly. Please reload the window to recover."),
                    actions: [instantiationService.createInstance(actions_1.ReloadWindowAction, actions_1.ReloadWindowAction.ID, actions_1.ReloadWindowAction.LABEL)]
                });
            });
        }, errors.onUnexpectedError);
        // Storage
        var disableWorkspaceStorage = this.environmentService.extensionTestsPath || (!this.workspace && !this.environmentService.extensionDevelopmentPath); // without workspace or in any extension test, we use inMemory storage unless we develop an extension where we want to preserve state
        this.storageService = instantiationService.createInstance(storage_1.Storage, window.localStorage, disableWorkspaceStorage ? storage_1.inMemoryLocalStorageInstance : window.localStorage);
        serviceCollection.set(storage_2.IStorageService, this.storageService);
        // Telemetry
        if (this.environmentService.isBuilt && !this.environmentService.extensionDevelopmentPath && !!product_1.default.enableTelemetry) {
            var channel = ipc_1.getDelayedChannel(sharedProcess.then(function (c) { return c.getChannel('telemetryAppender'); }));
            var commit = product_1.default.commit;
            var version = package_1.default.version;
            var config = {
                appender: new telemetryIpc_1.TelemetryAppenderClient(channel),
                commonProperties: workbenchCommonProperties_1.resolveWorkbenchCommonProperties(this.storageService, commit, version),
                piiPaths: [this.environmentService.appRoot, this.environmentService.extensionsPath],
                experiments: telemetry_1.loadExperiments(this.storageService, this.configurationService)
            };
            var telemetryService = instantiationService.createInstance(telemetryService_1.TelemetryService, config);
            this.telemetryService = telemetryService;
            var errorTelemetry = new errorTelemetry_1.default(telemetryService);
            var idleMonitor = new idleMonitor_1.IdleMonitor(2 * 60 * 1000); // 2 minutes
            var listener = idleMonitor.onStatusChange(function (status) {
                return _this.telemetryService.publicLog(status === idleMonitor_1.UserStatus.Active
                    ? telemetryService_1.TelemetryService.IDLE_STOP_EVENT_NAME
                    : telemetryService_1.TelemetryService.IDLE_START_EVENT_NAME);
            });
            disposables.add(telemetryService, errorTelemetry, listener, idleMonitor);
        }
        else {
            telemetry_1.NullTelemetryService._experiments = telemetry_1.loadExperiments(this.storageService, this.configurationService);
            this.telemetryService = telemetry_1.NullTelemetryService;
        }
        serviceCollection.set(telemetry_1.ITelemetryService, this.telemetryService);
        if (this.configurationService instanceof configurationService_1.WorkspaceConfigurationService) {
            this.configurationService.telemetryService = this.telemetryService;
        }
        this.messageService = instantiationService.createInstance(messageService_1.MessageService, container);
        serviceCollection.set(message_1.IMessageService, this.messageService);
        serviceCollection.set(message_1.IChoiceService, this.messageService);
        var lifecycleService = instantiationService.createInstance(lifecycleService_1.LifecycleService);
        this.toUnbind.push(lifecycleService.onShutdown(function () { return disposables.dispose(); }));
        serviceCollection.set(lifecycle_2.ILifecycleService, lifecycleService);
        this.threadService = instantiationService.createInstance(threadService_1.MainThreadService);
        serviceCollection.set(threadService_2.IThreadService, this.threadService);
        var extensionService = instantiationService.createInstance(mainThreadExtensionService_1.MainProcessExtensionService);
        serviceCollection.set(extensions_1.IExtensionService, extensionService);
        serviceCollection.set(commands_1.ICommandService, new commandService_1.CommandService(instantiationService, extensionService));
        this.contextViewService = instantiationService.createInstance(contextViewService_1.ContextViewService, this.container);
        serviceCollection.set(contextView_1.IContextViewService, this.contextViewService);
        var requestService = instantiationService.createInstance(requestService_1.RequestService);
        serviceCollection.set(request_1.IRequestService, requestService);
        var markerService = instantiationService.createInstance(markerService_1.MarkerService);
        serviceCollection.set(markers_1.IMarkerService, markerService);
        var modeService = instantiationService.createInstance(modeServiceImpl_1.MainThreadModeServiceImpl);
        serviceCollection.set(modeService_1.IModeService, modeService);
        var modelService = instantiationService.createInstance(modelServiceImpl_1.ModelServiceImpl);
        serviceCollection.set(modelService_1.IModelService, modelService);
        var compatWorkerService = instantiationService.createInstance(compatWorkerServiceMain_1.MainThreadCompatWorkerService);
        serviceCollection.set(compatWorkerService_1.ICompatWorkerService, compatWorkerService);
        var editorWorkerService = instantiationService.createInstance(editorWorkerServiceImpl_1.EditorWorkerServiceImpl);
        serviceCollection.set(editorWorkerService_1.IEditorWorkerService, editorWorkerService);
        var untitledEditorService = instantiationService.createInstance(untitledEditorService_1.UntitledEditorService);
        serviceCollection.set(untitledEditorService_1.IUntitledEditorService, untitledEditorService);
        this.themeService = instantiationService.createInstance(themeService_2.ThemeService);
        serviceCollection.set(themeService_1.IThemeService, this.themeService);
        var searchService = instantiationService.createInstance(searchService_1.SearchService);
        serviceCollection.set(search_1.ISearchService, searchService);
        var codeEditorService = instantiationService.createInstance(codeEditorServiceImpl_1.CodeEditorServiceImpl);
        serviceCollection.set(codeEditorService_1.ICodeEditorService, codeEditorService);
        var integrityService = instantiationService.createInstance(integrityServiceImpl_1.IntegrityServiceImpl);
        serviceCollection.set(integrity_1.IIntegrityService, integrityService);
        var extensionManagementChannel = ipc_1.getDelayedChannel(sharedProcess.then(function (c) { return c.getChannel('extensions'); }));
        var extensionManagementChannelClient = new extensionManagementIpc_1.ExtensionManagementChannelClient(extensionManagementChannel);
        serviceCollection.set(extensionManagement_1.IExtensionManagementService, extensionManagementChannelClient);
        var urlChannel = mainProcessClient.getChannel('url');
        var urlChannelClient = new urlIpc_1.URLChannelClient(urlChannel, this.windowService.getWindowId());
        serviceCollection.set(url_1.IURLService, urlChannelClient);
        return [instantiationService, serviceCollection];
    };
    WorkbenchShell.prototype.open = function () {
        var _this = this;
        // Listen on unexpected errors
        errors.setUnexpectedErrorHandler(function (error) {
            _this.onUnexpectedError(error);
        });
        // Shell Class for CSS Scoping
        builder_1.$(this.container).addClass('monaco-shell');
        // Controls
        this.content = builder_1.$('.monaco-shell-content').appendTo(this.container).getHTMLElement();
        // Handle Load Performance Timers
        this.writeTimers();
        // Create Contents
        this.contentsContainer = this.createContents(builder_1.$(this.content));
        // Layout
        this.layout();
        // Listeners
        this.registerListeners();
        // Enable theme support
        this.themeService.initialize(this.container).then(null, function (error) {
            errors.onUnexpectedError(error);
        });
    };
    WorkbenchShell.prototype.registerListeners = function () {
        var _this = this;
        // Resize
        builder_1.$(window).on(dom.EventType.RESIZE, function () { return _this.layout(); }, this.toUnbind);
    };
    WorkbenchShell.prototype.writeTimers = function () {
        var timers = window.MonacoEnvironment.timers;
        if (timers) {
            var events = [];
            // Window
            if (timers.vscodeStart) {
                events.push({
                    startTime: timers.vscodeStart,
                    stopTime: timers.beforeLoad,
                    topic: 'Startup',
                    name: 'VSCode Startup',
                    description: 'Time it takes to create a window and startup VSCode'
                });
            }
            // Load
            events.push({
                startTime: timers.beforeLoad,
                stopTime: timers.afterLoad,
                topic: 'Startup',
                name: 'Load Modules',
                description: 'Time it takes to load VSCodes main modules'
            });
            // Ready
            events.push({
                startTime: timers.beforeReady,
                stopTime: timers.afterReady,
                topic: 'Startup',
                name: 'Event DOMContentLoaded',
                description: 'Time it takes for the DOM to emit DOMContentLoaded event'
            });
            // Write to Timer
            timer.getTimeKeeper().setInitialCollectedEvents(events, timers.start);
        }
    };
    WorkbenchShell.prototype.onUnexpectedError = function (error) {
        var errorMsg = errorMessage_1.toErrorMessage(error, true);
        if (!errorMsg) {
            return;
        }
        var now = Date.now();
        if (errorMsg === this.previousErrorValue && now - this.previousErrorTime <= 1000) {
            return; // Return if error message identical to previous and shorter than 1 second
        }
        this.previousErrorTime = now;
        this.previousErrorValue = errorMsg;
        // Log to console
        console.error(errorMsg);
        // Show to user if friendly message provided
        if (error && error.friendlyMessage && this.messageService) {
            this.messageService.show(message_1.Severity.Error, error.friendlyMessage);
        }
    };
    WorkbenchShell.prototype.layout = function () {
        var clArea = builder_1.$(this.container).getClientArea();
        var contentsSize = new builder_1.Dimension(clArea.width, clArea.height);
        this.contentsContainer.size(contentsSize.width, contentsSize.height);
        this.contextViewService.layout();
        this.workbench.layout();
    };
    WorkbenchShell.prototype.joinCreation = function () {
        return this.workbench.joinCreation();
    };
    WorkbenchShell.prototype.dispose = function () {
        // Workbench
        if (this.workbench) {
            this.workbench.dispose();
        }
        this.contextViewService.dispose();
        // Listeners
        this.toUnbind = lifecycle_1.dispose(this.toUnbind);
        // Container
        builder_1.$(this.container).empty();
    };
    return WorkbenchShell;
}());
exports.WorkbenchShell = WorkbenchShell;
