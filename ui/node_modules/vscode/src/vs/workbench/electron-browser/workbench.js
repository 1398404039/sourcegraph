/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
require('./media/workbench.css');
var winjs_base_1 = require('vs/base/common/winjs.base');
var lifecycle_1 = require('vs/base/common/lifecycle');
var strings = require('vs/base/common/strings');
var DOM = require('vs/base/browser/dom');
var builder_1 = require('vs/base/browser/builder');
var async_1 = require('vs/base/common/async');
var assert = require('vs/base/common/assert');
var timer = require('vs/base/common/timer');
var errors = require('vs/base/common/errors');
var errorMessage_1 = require('vs/base/common/errorMessage');
var platform_1 = require('vs/platform/platform');
var platform_2 = require('vs/base/common/platform');
var contributions_1 = require('vs/workbench/common/contributions');
var editor_1 = require('vs/workbench/common/editor');
var history_1 = require('vs/workbench/services/history/browser/history');
var activitybarPart_1 = require('vs/workbench/browser/parts/activitybar/activitybarPart');
var editorPart_1 = require('vs/workbench/browser/parts/editor/editorPart');
var sidebarPart_1 = require('vs/workbench/browser/parts/sidebar/sidebarPart');
var panelPart_1 = require('vs/workbench/browser/parts/panel/panelPart');
var statusbarPart_1 = require('vs/workbench/browser/parts/statusbar/statusbarPart');
var layout_1 = require('vs/workbench/browser/layout');
var actionBarRegistry_1 = require('vs/workbench/browser/actionBarRegistry');
var viewlet_1 = require('vs/workbench/browser/viewlet');
var panel_1 = require('vs/workbench/browser/panel');
var quickOpenController_1 = require('vs/workbench/browser/parts/quickopen/quickOpenController');
var diffEditorInput_1 = require('vs/workbench/common/editor/diffEditorInput');
var extensions_1 = require('vs/platform/instantiation/common/extensions');
var untitledEditorService_1 = require('vs/workbench/services/untitled/common/untitledEditorService');
var editorService_1 = require('vs/workbench/services/editor/browser/editorService');
var partService_1 = require('vs/workbench/services/part/common/partService');
var workspace_1 = require('vs/platform/workspace/common/workspace');
var storage_1 = require('vs/platform/storage/common/storage');
var contextmenuService_1 = require('vs/workbench/services/contextview/electron-browser/contextmenuService');
var keybindingService_1 = require('vs/workbench/services/keybinding/electron-browser/keybindingService');
var configurationEditing_1 = require('vs/workbench/services/configuration/common/configurationEditing');
var configurationEditingService_1 = require('vs/workbench/services/configuration/node/configurationEditingService');
var contextKeyService_1 = require('vs/platform/contextkey/browser/contextKeyService');
var keybinding_1 = require('vs/platform/keybinding/common/keybinding');
var contextkey_1 = require('vs/platform/contextkey/common/contextkey');
var activityService_1 = require('vs/workbench/services/activity/common/activityService');
var viewletService_1 = require('vs/workbench/services/viewlet/common/viewletService');
var fileService_1 = require('vs/workbench/services/files/electron-browser/fileService');
var files_1 = require('vs/platform/files/common/files');
var configurationResolver_1 = require('vs/workbench/services/configurationResolver/common/configurationResolver');
var configurationResolverService_1 = require('vs/workbench/services/configurationResolver/node/configurationResolverService');
var panelService_1 = require('vs/workbench/services/panel/common/panelService');
var messageService_1 = require('vs/workbench/services/message/browser/messageService');
var editorService_2 = require('vs/workbench/services/editor/common/editorService');
var quickOpenService_1 = require('vs/workbench/services/quickopen/common/quickOpenService');
var groupService_1 = require('vs/workbench/services/group/common/groupService');
var history_2 = require('vs/workbench/services/history/common/history');
var instantiation_1 = require('vs/platform/instantiation/common/instantiation');
var descriptors_1 = require('vs/platform/instantiation/common/descriptors');
var lifecycle_2 = require('vs/platform/lifecycle/common/lifecycle');
var message_1 = require('vs/platform/message/common/message');
var statusbar_1 = require('vs/platform/statusbar/common/statusbar');
var actions_1 = require('vs/platform/actions/common/actions');
var menuService_1 = require('vs/platform/actions/common/menuService');
var contextView_1 = require('vs/platform/contextview/browser/contextView');
var environment_1 = require('vs/platform/environment/common/environment');
var telemetry_1 = require('vs/platform/telemetry/common/telemetry');
var watermark = require('vs/workbench/parts/watermark/watermark');
exports.MessagesVisibleContext = new contextkey_1.RawContextKey('globalMessageVisible', false);
exports.EditorsVisibleContext = new contextkey_1.RawContextKey('editorIsOpen', false);
exports.NoEditorsVisibleContext = exports.EditorsVisibleContext.toNegated();
var Identifiers = {
    WORKBENCH_CONTAINER: 'workbench.main.container',
    ACTIVITYBAR_PART: 'workbench.parts.activitybar',
    SIDEBAR_PART: 'workbench.parts.sidebar',
    PANEL_PART: 'workbench.parts.panel',
    EDITOR_PART: 'workbench.parts.editor',
    STATUSBAR_PART: 'workbench.parts.statusbar'
};
/**
 * The workbench creates and lays out all parts that make up the workbench.
 */
var Workbench = (function () {
    function Workbench(container, workspace, options, serviceCollection, instantiationService, untitledEditorService, contextService, storageService, lifecycleService, messageService, telemetryService, environmentService) {
        var _this = this;
        this.instantiationService = instantiationService;
        this.untitledEditorService = untitledEditorService;
        this.contextService = contextService;
        this.storageService = storageService;
        this.lifecycleService = lifecycleService;
        this.messageService = messageService;
        this.telemetryService = telemetryService;
        this.environmentService = environmentService;
        this.container = container;
        this.workbenchParams = {
            workspace: workspace,
            options: options,
            serviceCollection: serviceCollection
        };
        this.hasFilesToCreateOpenOrDiff = (options.filesToCreate && options.filesToCreate.length > 0) || (options.filesToOpen && options.filesToOpen.length > 0) || (options.filesToDiff && options.filesToDiff.length > 0);
        this.toDispose = [];
        this.toShutdown = [];
        this.editorBackgroundDelayer = new async_1.Delayer(50);
        this.creationPromise = new winjs_base_1.TPromise(function (c) {
            _this.creationPromiseComplete = c;
        });
    }
    /**
     * Starts the workbench and creates the HTML elements on the container. A workbench can only be started
     * once. Use the shutdown function to free up resources created by the workbench on startup.
     */
    Workbench.prototype.startup = function (callbacks) {
        var _this = this;
        assert.ok(!this.workbenchStarted, 'Can not start a workbench that was already started');
        assert.ok(!this.workbenchShutdown, 'Can not start a workbench that was shutdown');
        try {
            this.workbenchStarted = true;
            this.callbacks = callbacks;
            // Create Workbench
            this.createWorkbench();
            // Services
            this.initServices();
            if (this.callbacks && this.callbacks.onServicesCreated) {
                this.callbacks.onServicesCreated();
            }
            // Contexts
            this.messagesVisibleContext = exports.MessagesVisibleContext.bindTo(this.contextKeyService);
            this.editorsVisibleContext = exports.EditorsVisibleContext.bindTo(this.contextKeyService);
            // Register Listeners
            this.registerListeners();
            // Settings
            this.initSettings();
            // Create Workbench and Parts
            this.renderWorkbench();
            // Workbench Layout
            this.createWorkbenchLayout();
            // Load composits and editors in parallel
            var compositeAndEditorPromises = [];
            // Load Viewlet
            var viewletRegistry = platform_1.Registry.as(viewlet_1.Extensions.Viewlets);
            var viewletId = viewletRegistry.getDefaultViewletId();
            if (this.shouldRestoreSidebar()) {
                viewletId = this.storageService.get(sidebarPart_1.SidebarPart.activeViewletSettingsKey, storage_1.StorageScope.WORKSPACE, viewletRegistry.getDefaultViewletId()); // help developers and restore last view
            }
            if (!this.sideBarHidden && !!viewletId) {
                var viewletTimerEvent_1 = timer.start(timer.Topic.STARTUP, strings.format('Opening Viewlet: {0}', viewletId));
                compositeAndEditorPromises.push(this.sidebarPart.openViewlet(viewletId, false).then(function () { return viewletTimerEvent_1.stop(); }));
            }
            // Load Panel
            var panelRegistry = platform_1.Registry.as(panel_1.Extensions.Panels);
            var panelId = this.storageService.get(panelPart_1.PanelPart.activePanelSettingsKey, storage_1.StorageScope.WORKSPACE, panelRegistry.getDefaultPanelId());
            if (!this.panelHidden && !!panelId) {
                compositeAndEditorPromises.push(this.panelPart.openPanel(panelId, false));
            }
            // Load Editors
            var editorTimerEvent_1 = timer.start(timer.Topic.STARTUP, strings.format('Restoring Editor(s)'));
            compositeAndEditorPromises.push(this.resolveEditorsToOpen().then(function (inputsWithOptions) {
                var editorOpenPromise;
                if (inputsWithOptions.length) {
                    var editors = inputsWithOptions.map(function (inputWithOptions) {
                        return {
                            input: inputWithOptions.input,
                            options: inputWithOptions.options,
                            position: partService_1.Position.LEFT
                        };
                    });
                    editorOpenPromise = _this.editorPart.openEditors(editors);
                }
                else {
                    editorOpenPromise = _this.editorPart.restoreEditors();
                }
                return editorOpenPromise.then(function () {
                    _this.onEditorsChanged(); // make sure we show the proper background in the editor area
                    editorTimerEvent_1.stop();
                });
            }));
            // Flag workbench as created once done
            var workbenchDone_1 = function (error) {
                _this.workbenchCreated = true;
                _this.creationPromiseComplete(true);
                if (_this.callbacks && _this.callbacks.onWorkbenchStarted) {
                    _this.callbacks.onWorkbenchStarted(_this.keybindingService.customKeybindingsCount());
                }
                if (error) {
                    errors.onUnexpectedError(error);
                }
            };
            // Join viewlet, panel and editor promises
            winjs_base_1.TPromise.join(compositeAndEditorPromises).then(function () { return workbenchDone_1(); }, function (error) { return workbenchDone_1(error); });
        }
        catch (error) {
            // Print out error
            console.error(errorMessage_1.toErrorMessage(error, true));
            // Rethrow
            throw error;
        }
    };
    Workbench.prototype.resolveEditorsToOpen = function () {
        var _this = this;
        // Files to open, diff or create
        if (this.hasFilesToCreateOpenOrDiff) {
            var wbopt = this.workbenchParams.options;
            var filesToCreate = wbopt.filesToCreate || [];
            var filesToOpen_1 = wbopt.filesToOpen || [];
            var filesToDiff_1 = wbopt.filesToDiff;
            // Files to diff is exclusive
            if (filesToDiff_1 && filesToDiff_1.length) {
                return winjs_base_1.TPromise.join(filesToDiff_1.map(function (resourceInput) { return _this.editorService.createInput(resourceInput); })).then(function (inputsToDiff) {
                    return [{ input: new diffEditorInput_1.DiffEditorInput(diffEditorInput_1.toDiffLabel(filesToDiff_1[0].resource, filesToDiff_1[1].resource, _this.contextService), null, inputsToDiff[0], inputsToDiff[1]) }];
                });
            }
            else {
                var inputs_1 = [];
                var options_1 = [];
                // Files to create
                inputs_1.push.apply(inputs_1, filesToCreate.map(function (resourceInput) { return _this.untitledEditorService.createOrGet(resourceInput.resource); }));
                options_1.push.apply(options_1, filesToCreate.map(function (r) { return null; })); // fill empty options for files to create because we dont have options there
                // Files to open
                return winjs_base_1.TPromise.join(filesToOpen_1.map(function (resourceInput) { return _this.editorService.createInput(resourceInput); })).then(function (inputsToOpen) {
                    inputs_1.push.apply(inputs_1, inputsToOpen);
                    options_1.push.apply(options_1, filesToOpen_1.map(function (resourceInput) { return editor_1.TextEditorOptions.from(resourceInput); }));
                    return inputs_1.map(function (input, index) { return { input: input, options: options_1[index] }; });
                });
            }
        }
        else if (!this.workbenchParams.workspace && this.telemetryService.getExperiments().openUntitledFile) {
            return winjs_base_1.TPromise.as([{ input: this.untitledEditorService.createOrGet() }]);
        }
        return winjs_base_1.TPromise.as([]);
    };
    Workbench.prototype.initServices = function () {
        var serviceCollection = this.workbenchParams.serviceCollection;
        this.toDispose.push(this.lifecycleService.onShutdown(this.shutdownComponents, this));
        // Services we contribute
        serviceCollection.set(partService_1.IPartService, this);
        // Status bar
        this.statusbarPart = this.instantiationService.createInstance(statusbarPart_1.StatusbarPart, Identifiers.STATUSBAR_PART);
        this.toDispose.push(this.statusbarPart);
        this.toShutdown.push(this.statusbarPart);
        serviceCollection.set(statusbar_1.IStatusbarService, this.statusbarPart);
        // Keybindings
        this.contextKeyService = this.instantiationService.createInstance(contextKeyService_1.ContextKeyService);
        serviceCollection.set(contextkey_1.IContextKeyService, this.contextKeyService);
        this.keybindingService = this.instantiationService.createInstance(keybindingService_1.WorkbenchKeybindingService, window);
        serviceCollection.set(keybinding_1.IKeybindingService, this.keybindingService);
        // Context Menu
        serviceCollection.set(contextView_1.IContextMenuService, this.instantiationService.createInstance(contextmenuService_1.ContextMenuService));
        // Menus/Actions
        serviceCollection.set(actions_1.IMenuService, new descriptors_1.SyncDescriptor(menuService_1.MenuService));
        // Viewlet service (sidebar part)
        this.sidebarPart = this.instantiationService.createInstance(sidebarPart_1.SidebarPart, Identifiers.SIDEBAR_PART);
        this.toDispose.push(this.sidebarPart);
        this.toShutdown.push(this.sidebarPart);
        serviceCollection.set(viewletService_1.IViewletService, this.sidebarPart);
        // Panel service (panel part)
        this.panelPart = this.instantiationService.createInstance(panelPart_1.PanelPart, Identifiers.PANEL_PART);
        this.toDispose.push(this.panelPart);
        this.toShutdown.push(this.panelPart);
        serviceCollection.set(panelService_1.IPanelService, this.panelPart);
        // Activity service (activitybar part)
        this.activitybarPart = this.instantiationService.createInstance(activitybarPart_1.ActivitybarPart, Identifiers.ACTIVITYBAR_PART);
        this.toDispose.push(this.activitybarPart);
        this.toShutdown.push(this.activitybarPart);
        serviceCollection.set(activityService_1.IActivityService, this.activitybarPart);
        // Editor service (editor part)
        this.editorPart = this.instantiationService.createInstance(editorPart_1.EditorPart, Identifiers.EDITOR_PART, !this.hasFilesToCreateOpenOrDiff);
        this.toDispose.push(this.editorPart);
        this.toShutdown.push(this.editorPart);
        this.editorService = this.instantiationService.createInstance(editorService_1.WorkbenchEditorService, this.editorPart);
        serviceCollection.set(editorService_2.IWorkbenchEditorService, this.editorService);
        serviceCollection.set(groupService_1.IEditorGroupService, this.editorPart);
        // File Service
        var fileService = this.instantiationService.createInstance(fileService_1.FileService);
        serviceCollection.set(files_1.IFileService, fileService);
        // History
        serviceCollection.set(history_2.IHistoryService, this.instantiationService.createInstance(history_1.HistoryService));
        // Configuration Editing
        serviceCollection.set(configurationEditing_1.IConfigurationEditingService, this.instantiationService.createInstance(configurationEditingService_1.ConfigurationEditingService));
        // Configuration Resolver
        var workspace = this.contextService.getWorkspace();
        var configurationResolverService = this.instantiationService.createInstance(configurationResolverService_1.ConfigurationResolverService, workspace ? workspace.resource : null, process.env);
        serviceCollection.set(configurationResolver_1.IConfigurationResolverService, configurationResolverService);
        // Quick open service (quick open controller)
        this.quickOpen = this.instantiationService.createInstance(quickOpenController_1.QuickOpenController);
        this.toDispose.push(this.quickOpen);
        this.toShutdown.push(this.quickOpen);
        serviceCollection.set(quickOpenService_1.IQuickOpenService, this.quickOpen);
        // Contributed services
        var contributedServices = extensions_1.getServices();
        for (var _i = 0, contributedServices_1 = contributedServices; _i < contributedServices_1.length; _i++) {
            var contributedService = contributedServices_1[_i];
            serviceCollection.set(contributedService.id, contributedService.descriptor);
        }
        // Set the some services to registries that have been created eagerly
        platform_1.Registry.as(actionBarRegistry_1.Extensions.Actionbar).setInstantiationService(this.instantiationService);
        platform_1.Registry.as(contributions_1.Extensions.Workbench).setInstantiationService(this.instantiationService);
        platform_1.Registry.as(editor_1.Extensions.Editors).setInstantiationService(this.instantiationService);
    };
    Workbench.prototype.initSettings = function () {
        // Sidebar visibility
        this.sideBarHidden = this.storageService.getBoolean(Workbench.sidebarHiddenSettingKey, storage_1.StorageScope.WORKSPACE, false);
        if (!this.contextService.getWorkspace()) {
            this.sideBarHidden = !this.telemetryService.getExperiments().showDefaultViewlet;
        }
        var viewletRegistry = platform_1.Registry.as(viewlet_1.Extensions.Viewlets);
        if (!viewletRegistry.getDefaultViewletId()) {
            this.sideBarHidden = true; // can only hide sidebar if we dont have a default Viewlet id
        }
        // Panel part visibility
        var panelRegistry = platform_1.Registry.as(panel_1.Extensions.Panels);
        this.panelHidden = this.storageService.getBoolean(Workbench.panelHiddenSettingKey, storage_1.StorageScope.WORKSPACE, true);
        if (!this.contextService.getWorkspace() || !panelRegistry.getDefaultPanelId()) {
            this.panelHidden = true; // we hide panel part in single-file-mode or if there is no default panel
        }
        // Sidebar position
        var rawPosition = this.storageService.get(Workbench.sidebarPositionSettingKey, storage_1.StorageScope.GLOBAL, 'left');
        this.sideBarPosition = (rawPosition === 'left') ? partService_1.Position.LEFT : partService_1.Position.RIGHT;
        // Statusbar visibility
        this.statusBarHidden = this.storageService.getBoolean(Workbench.statusbarHiddenSettingKey, storage_1.StorageScope.GLOBAL, false);
    };
    /**
     * Returns whether the workbench has been started.
     */
    Workbench.prototype.isStarted = function () {
        return this.workbenchStarted && !this.workbenchShutdown;
    };
    /**
     * Returns whether the workbench has been fully created.
     */
    Workbench.prototype.isCreated = function () {
        return this.workbenchCreated && this.workbenchStarted;
    };
    Workbench.prototype.joinCreation = function () {
        return this.creationPromise;
    };
    Workbench.prototype.hasFocus = function (part) {
        var activeElement = document.activeElement;
        if (!activeElement) {
            return false;
        }
        var container = null;
        switch (part) {
            case partService_1.Parts.ACTIVITYBAR_PART:
                container = this.activitybarPart.getContainer();
                break;
            case partService_1.Parts.SIDEBAR_PART:
                container = this.sidebarPart.getContainer();
                break;
            case partService_1.Parts.PANEL_PART:
                container = this.panelPart.getContainer();
                break;
            case partService_1.Parts.EDITOR_PART:
                container = this.editorPart.getContainer();
                break;
            case partService_1.Parts.STATUSBAR_PART:
                container = this.statusbarPart.getContainer();
                break;
        }
        return DOM.isAncestor(activeElement, container.getHTMLElement());
    };
    Workbench.prototype.isVisible = function (part) {
        switch (part) {
            case partService_1.Parts.SIDEBAR_PART:
                return !this.sideBarHidden;
            case partService_1.Parts.PANEL_PART:
                return !this.panelHidden;
            case partService_1.Parts.STATUSBAR_PART:
                return !this.statusBarHidden;
        }
        return true; // any other part cannot be hidden
    };
    Workbench.prototype.isStatusBarHidden = function () {
        return this.statusBarHidden;
    };
    Workbench.prototype.setStatusBarHidden = function (hidden, skipLayout) {
        this.statusBarHidden = hidden;
        // Layout
        if (!skipLayout) {
            this.workbenchLayout.layout(true);
        }
        this.storageService.store(Workbench.statusbarHiddenSettingKey, hidden ? 'true' : 'false');
    };
    Workbench.prototype.isSideBarHidden = function () {
        return this.sideBarHidden;
    };
    Workbench.prototype.setSideBarHidden = function (hidden, skipLayout) {
        this.sideBarHidden = hidden;
        // Adjust CSS
        if (hidden) {
            this.workbench.addClass('nosidebar');
        }
        else {
            this.workbench.removeClass('nosidebar');
        }
        // Layout
        if (!skipLayout) {
            this.workbenchLayout.layout(true);
        }
        // If sidebar becomes hidden, also hide the current active Viewlet if any
        if (hidden && this.sidebarPart.getActiveViewlet()) {
            this.sidebarPart.hideActiveViewlet();
            // Pass Focus to Editor if Sidebar is now hidden
            var editor = this.editorPart.getActiveEditor();
            if (editor) {
                editor.focus();
            }
        }
        else if (!hidden && !this.sidebarPart.getActiveViewlet()) {
            var registry = platform_1.Registry.as(viewlet_1.Extensions.Viewlets);
            var viewletToOpen = this.sidebarPart.getLastActiveViewletId() || registry.getDefaultViewletId();
            if (viewletToOpen) {
                this.sidebarPart.openViewlet(viewletToOpen, true).done(null, errors.onUnexpectedError);
            }
        }
        // Remember in settings
        this.storageService.store(Workbench.sidebarHiddenSettingKey, hidden ? 'true' : 'false', storage_1.StorageScope.WORKSPACE);
    };
    Workbench.prototype.isPanelHidden = function () {
        return this.panelHidden;
    };
    Workbench.prototype.setPanelHidden = function (hidden, skipLayout) {
        this.panelHidden = hidden;
        // Adjust CSS
        if (hidden) {
            this.workbench.addClass('nopanel');
        }
        else {
            this.workbench.removeClass('nopanel');
        }
        // Layout
        if (!skipLayout) {
            this.workbenchLayout.layout(true);
        }
        // If panel part becomes hidden, also hide the current active panel if any
        if (hidden && this.panelPart.getActivePanel()) {
            this.panelPart.hideActivePanel();
            // Pass Focus to Editor if Panel part is now hidden
            var editor = this.editorPart.getActiveEditor();
            if (editor) {
                editor.focus();
            }
        }
        else if (!hidden && !this.panelPart.getActivePanel()) {
            var registry = platform_1.Registry.as(panel_1.Extensions.Panels);
            var panelToOpen = this.panelPart.getLastActivePanelId() || registry.getDefaultPanelId();
            if (panelToOpen) {
                this.panelPart.openPanel(panelToOpen, true).done(null, errors.onUnexpectedError);
            }
        }
        // Remember in settings
        this.storageService.store(Workbench.panelHiddenSettingKey, hidden ? 'true' : 'false', storage_1.StorageScope.WORKSPACE);
    };
    Workbench.prototype.getSideBarPosition = function () {
        return this.sideBarPosition;
    };
    Workbench.prototype.setSideBarPosition = function (position) {
        if (this.sideBarHidden) {
            this.setSideBarHidden(false, true /* Skip Layout */);
        }
        var newPositionValue = (position === partService_1.Position.LEFT) ? 'left' : 'right';
        var oldPositionValue = (this.sideBarPosition === partService_1.Position.LEFT) ? 'left' : 'right';
        this.sideBarPosition = position;
        // Adjust CSS
        this.activitybarPart.getContainer().removeClass(oldPositionValue);
        this.sidebarPart.getContainer().removeClass(oldPositionValue);
        this.activitybarPart.getContainer().addClass(newPositionValue);
        this.sidebarPart.getContainer().addClass(newPositionValue);
        // Layout
        this.workbenchLayout.layout(true);
        // Remember in settings
        this.storageService.store(Workbench.sidebarPositionSettingKey, position === partService_1.Position.LEFT ? 'left' : 'right', storage_1.StorageScope.GLOBAL);
    };
    Workbench.prototype.dispose = function () {
        if (this.isStarted()) {
            this.shutdownComponents();
            this.workbenchShutdown = true;
        }
        this.toDispose = lifecycle_1.dispose(this.toDispose);
    };
    /**
     * Asks the workbench and all its UI components inside to lay out according to
     * the containers dimension the workbench is living in.
     */
    Workbench.prototype.layout = function () {
        if (this.isStarted()) {
            this.workbenchLayout.layout();
        }
    };
    Workbench.prototype.shutdownComponents = function () {
        // Pass shutdown on to each participant
        this.toShutdown.forEach(function (s) { return s.shutdown(); });
    };
    Workbench.prototype.registerListeners = function () {
        var _this = this;
        // Listen to editor changes
        this.toDispose.push(this.editorPart.onEditorsChanged(function () { return _this.onEditorsChanged(); }));
        // Handle message service and quick open events
        if (this.messageService instanceof messageService_1.WorkbenchMessageService) {
            this.toDispose.push(this.messageService.onMessagesShowing(function () { return _this.messagesVisibleContext.set(true); }));
            this.toDispose.push(this.messageService.onMessagesCleared(function () { return _this.messagesVisibleContext.reset(); }));
            this.toDispose.push(this.quickOpen.onShow(function () { return _this.messageService.suspend(); })); // when quick open is open, don't show messages behind
            this.toDispose.push(this.quickOpen.onHide(function () { return _this.messageService.resume(); })); // resume messages once quick open is closed again
        }
    };
    Workbench.prototype.onEditorsChanged = function () {
        var visibleEditors = this.editorService.getVisibleEditors().length;
        // We update the editorpart class to indicate if an editor is opened or not
        // through a delay to accomodate for fast editor switching
        var editorContainer = this.editorPart.getContainer();
        if (visibleEditors === 0) {
            this.editorsVisibleContext.reset();
            this.editorBackgroundDelayer.trigger(function () { return editorContainer.addClass('empty'); });
        }
        else {
            this.editorsVisibleContext.set(true);
            this.editorBackgroundDelayer.trigger(function () { return editorContainer.removeClass('empty'); });
        }
    };
    Workbench.prototype.createWorkbenchLayout = function () {
        var options = new layout_1.LayoutOptions();
        options.setMargin(new builder_1.Box(0, 0, 0, 0));
        this.workbenchLayout = this.instantiationService.createInstance(layout_1.WorkbenchLayout, builder_1.$(this.container), // Parent
        this.workbench, // Workbench Container
        {
            activitybar: this.activitybarPart,
            editor: this.editorPart,
            sidebar: this.sidebarPart,
            panel: this.panelPart,
            statusbar: this.statusbarPart,
        }, this.quickOpen, // Quickopen
        options // Layout Options
        );
        this.toDispose.push(this.workbenchLayout);
    };
    Workbench.prototype.createWorkbench = function () {
        // Create Workbench DIV Off-DOM
        this.workbenchContainer = builder_1.$('.monaco-workbench-container');
        this.workbench = builder_1.$().div({ 'class': 'monaco-workbench ' + (platform_2.isWindows ? 'windows' : platform_2.isLinux ? 'linux' : 'mac'), id: Identifiers.WORKBENCH_CONTAINER }).appendTo(this.workbenchContainer);
    };
    Workbench.prototype.renderWorkbench = function () {
        // Apply sidebar state as CSS class
        if (this.sideBarHidden) {
            this.workbench.addClass('nosidebar');
        }
        if (this.panelHidden) {
            this.workbench.addClass('nopanel');
        }
        // Apply no-workspace state as CSS class
        if (!this.workbenchParams.workspace) {
            this.workbench.addClass('no-workspace');
        }
        // Create Parts
        this.createActivityBarPart();
        this.createSidebarPart();
        this.createEditorPart();
        this.createPanelPart();
        this.createStatusbarPart();
        // Add Workbench to DOM
        this.workbenchContainer.build(this.container);
    };
    Workbench.prototype.createActivityBarPart = function () {
        var activitybarPartContainer = builder_1.$(this.workbench)
            .div({
            'class': ['part', 'activitybar', this.sideBarPosition === partService_1.Position.LEFT ? 'left' : 'right'],
            id: Identifiers.ACTIVITYBAR_PART,
            role: 'navigation'
        });
        this.activitybarPart.create(activitybarPartContainer);
    };
    Workbench.prototype.createSidebarPart = function () {
        var sidebarPartContainer = builder_1.$(this.workbench)
            .div({
            'class': ['part', 'sidebar', this.sideBarPosition === partService_1.Position.LEFT ? 'left' : 'right'],
            id: Identifiers.SIDEBAR_PART,
            role: 'complementary'
        });
        this.sidebarPart.create(sidebarPartContainer);
    };
    Workbench.prototype.createPanelPart = function () {
        var panelPartContainer = builder_1.$(this.workbench)
            .div({
            'class': ['part', 'panel', 'monaco-editor-background'],
            id: Identifiers.PANEL_PART,
            role: 'complementary'
        });
        this.panelPart.create(panelPartContainer);
    };
    Workbench.prototype.createEditorPart = function () {
        var editorContainer = builder_1.$(this.workbench)
            .div({
            'class': ['part', 'editor', 'monaco-editor-background'],
            id: Identifiers.EDITOR_PART,
            role: 'main'
        });
        if (this.telemetryService.getExperiments().showCommandsWatermark) {
            this.toDispose.push(watermark.create(editorContainer, this.keybindingService));
        }
        this.editorPart.create(editorContainer);
    };
    Workbench.prototype.createStatusbarPart = function () {
        var statusbarContainer = builder_1.$(this.workbench).div({
            'class': ['part', 'statusbar'],
            id: Identifiers.STATUSBAR_PART,
            role: 'contentinfo'
        });
        this.statusbarPart.create(statusbarContainer);
    };
    Workbench.prototype.getEditorPart = function () {
        assert.ok(this.workbenchStarted, 'Workbench is not started. Call startup() first.');
        return this.editorPart;
    };
    Workbench.prototype.getSidebarPart = function () {
        assert.ok(this.workbenchStarted, 'Workbench is not started. Call startup() first.');
        return this.sidebarPart;
    };
    Workbench.prototype.getPanelPart = function () {
        assert.ok(this.workbenchStarted, 'Workbench is not started. Call startup() first.');
        return this.panelPart;
    };
    Workbench.prototype.getInstantiationService = function () {
        assert.ok(this.workbenchStarted, 'Workbench is not started. Call startup() first.');
        return this.instantiationService;
    };
    Workbench.prototype.addClass = function (clazz) {
        if (this.workbench) {
            this.workbench.addClass(clazz);
        }
    };
    Workbench.prototype.removeClass = function (clazz) {
        if (this.workbench) {
            this.workbench.removeClass(clazz);
        }
    };
    Workbench.prototype.getWorkbenchElementId = function () {
        return Identifiers.WORKBENCH_CONTAINER;
    };
    Workbench.prototype.setRestoreSidebar = function () {
        this.storageService.store(Workbench.sidebarRestoreSettingKey, 'true', storage_1.StorageScope.WORKSPACE);
    };
    Workbench.prototype.shouldRestoreSidebar = function () {
        if (!this.environmentService.isBuilt) {
            return true; // always restore sidebar when we are in development mode
        }
        var restore = this.storageService.getBoolean(Workbench.sidebarRestoreSettingKey, storage_1.StorageScope.WORKSPACE);
        if (restore) {
            this.storageService.remove(Workbench.sidebarRestoreSettingKey, storage_1.StorageScope.WORKSPACE); // only support once
        }
        return restore;
    };
    Workbench.sidebarPositionSettingKey = 'workbench.sidebar.position';
    Workbench.statusbarHiddenSettingKey = 'workbench.statusbar.hidden';
    Workbench.sidebarHiddenSettingKey = 'workbench.sidebar.hidden';
    Workbench.sidebarRestoreSettingKey = 'workbench.sidebar.restore';
    Workbench.panelHiddenSettingKey = 'workbench.panel.hidden';
    Workbench = __decorate([
        __param(4, instantiation_1.IInstantiationService),
        __param(5, untitledEditorService_1.IUntitledEditorService),
        __param(6, workspace_1.IWorkspaceContextService),
        __param(7, storage_1.IStorageService),
        __param(8, lifecycle_2.ILifecycleService),
        __param(9, message_1.IMessageService),
        __param(10, telemetry_1.ITelemetryService),
        __param(11, environment_1.IEnvironmentService)
    ], Workbench);
    return Workbench;
}());
exports.Workbench = Workbench;
