/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var modes = require('vs/editor/common/modes');
var htmlMode = require('vs/languages/html/common/html');
var csharpTokenization = require('vs/languages/razor/common/csharpTokenization');
var abstractMode_1 = require('vs/editor/common/modes/abstractMode');
var razorTokenTypes = require('vs/languages/razor/common/razorTokenTypes');
var instantiation_1 = require('vs/platform/instantiation/common/instantiation');
var modeService_1 = require('vs/editor/common/services/modeService');
var languageConfigurationRegistry_1 = require('vs/editor/common/modes/languageConfigurationRegistry');
var async_1 = require('vs/base/common/async');
var compatWorkerService_1 = require('vs/editor/common/services/compatWorkerService');
var workspace_1 = require('vs/platform/workspace/common/workspace');
var configuration_1 = require('vs/platform/configuration/common/configuration');
var tokenizationSupport_1 = require('vs/editor/common/modes/supports/tokenizationSupport');
// for a brief description of the razor syntax see http://www.mikesdotnetting.com/Article/153/Inline-Razor-Syntax-Overview
var RAZORState = (function (_super) {
    __extends(RAZORState, _super);
    function RAZORState(modeId, kind, lastTagName, lastAttributeName, embeddedContentType, attributeValueQuote, attributeValueLength) {
        _super.call(this, modeId, kind, lastTagName, lastAttributeName, embeddedContentType, attributeValueQuote, attributeValueLength);
    }
    RAZORState.prototype.makeClone = function () {
        return new RAZORState(this.getModeId(), this.kind, this.lastTagName, this.lastAttributeName, this.embeddedContentType, this.attributeValueQuote, this.attributeValueLength);
    };
    RAZORState.prototype.equals = function (other) {
        if (other instanceof RAZORState) {
            return (_super.prototype.equals.call(this, other));
        }
        return false;
    };
    RAZORState.prototype.tokenize = function (stream) {
        if (!stream.eos() && stream.peek() === '@') {
            stream.next();
            if (!stream.eos() && stream.peek() === '*') {
                return { nextState: new csharpTokenization.CSComment(this.getModeId(), this, '@') };
            }
            if (stream.eos() || stream.peek() !== '@') {
                return { type: razorTokenTypes.EMBED_CS, nextState: new csharpTokenization.CSStatement(this.getModeId(), this, 0, 0, true, true, true, false) };
            }
        }
        return _super.prototype.tokenize.call(this, stream);
    };
    return RAZORState;
}(htmlMode.State));
var RAZORMode = (function (_super) {
    __extends(RAZORMode, _super);
    function RAZORMode(descriptor, instantiationService, modeService, compatWorkerService, workspaceContextService, configurationService) {
        _super.call(this, descriptor, instantiationService, modeService, compatWorkerService, workspaceContextService, configurationService);
    }
    RAZORMode.prototype._registerSupports = function () {
        var _this = this;
        modes.SuggestRegistry.register(this.getId(), {
            triggerCharacters: ['.', ':', '<', '"', '=', '/'],
            provideCompletionItems: function (model, position, token) {
                return async_1.wireCancellationToken(token, _this._provideCompletionItems(model.uri, position));
            }
        }, true);
        modes.DocumentHighlightProviderRegistry.register(this.getId(), {
            provideDocumentHighlights: function (model, position, token) {
                return async_1.wireCancellationToken(token, _this._provideDocumentHighlights(model.uri, position));
            }
        }, true);
        modes.LinkProviderRegistry.register(this.getId(), {
            provideLinks: function (model, token) {
                return async_1.wireCancellationToken(token, _this.provideLinks(model.uri));
            }
        }, true);
        languageConfigurationRegistry_1.LanguageConfigurationRegistry.register(this.getId(), RAZORMode.LANG_CONFIG);
        modes.TokenizationRegistry.register(this.getId(), new tokenizationSupport_1.TokenizationSupport(this._modeService, this.getId(), this, true));
    };
    RAZORMode.prototype._createModeWorkerManager = function (descriptor, instantiationService) {
        return new abstractMode_1.ModeWorkerManager(descriptor, 'vs/languages/razor/common/razorWorker', 'RAZORWorker', 'vs/languages/html/common/htmlWorker', instantiationService);
    };
    RAZORMode.prototype.getInitialState = function () {
        return new RAZORState(this.getId(), htmlMode.States.Content, '', '', '', '', 0);
    };
    RAZORMode.prototype.getLeavingNestedModeData = function (line, state) {
        var leavingNestedModeData = _super.prototype.getLeavingNestedModeData.call(this, line, state);
        if (leavingNestedModeData) {
            leavingNestedModeData.stateAfterNestedMode = new RAZORState(this.getId(), htmlMode.States.Content, '', '', '', '', 0);
        }
        return leavingNestedModeData;
    };
    RAZORMode.LANG_CONFIG = {
        wordPattern: abstractMode_1.createWordRegExp('#?%'),
        comments: {
            blockComment: ['<!--', '-->']
        },
        brackets: [
            ['<!--', '-->'],
            ['{', '}'],
            ['(', ')']
        ],
        __electricCharacterSupport: {
            embeddedElectricCharacters: ['*', '}', ']', ')']
        },
        autoClosingPairs: [
            { open: '{', close: '}' },
            { open: '[', close: ']' },
            { open: '(', close: ')' },
            { open: '"', close: '"' },
            { open: '\'', close: '\'' }
        ],
        surroundingPairs: [
            { open: '"', close: '"' },
            { open: '\'', close: '\'' }
        ],
        onEnterRules: [
            {
                beforeText: new RegExp("<(?!(?:" + htmlMode.EMPTY_ELEMENTS.join('|') + "))(\\w[\\w\\d]*)([^/>]*(?!/)>)[^<]*$", 'i'),
                afterText: /^<\/(\w[\w\d]*)\s*>$/i,
                action: { indentAction: modes.IndentAction.IndentOutdent }
            },
            {
                beforeText: new RegExp("<(?!(?:" + htmlMode.EMPTY_ELEMENTS.join('|') + "))(\\w[\\w\\d]*)([^/>]*(?!/)>)[^<]*$", 'i'),
                action: { indentAction: modes.IndentAction.Indent }
            }
        ],
    };
    RAZORMode = __decorate([
        __param(1, instantiation_1.IInstantiationService),
        __param(2, modeService_1.IModeService),
        __param(3, compatWorkerService_1.ICompatWorkerService),
        __param(4, workspace_1.IWorkspaceContextService),
        __param(5, configuration_1.IConfigurationService)
    ], RAZORMode);
    return RAZORMode;
}(htmlMode.HTMLMode));
exports.RAZORMode = RAZORMode;
