/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var instantiation_1 = require('vs/platform/instantiation/common/instantiation');
exports.IWindowEventService = instantiation_1.createDecorator('windowEventService');
var ActiveWindowManager = (function () {
    function ActiveWindowManager(windowService) {
        var _this = this;
        this.windowService = windowService;
        this.disposables = [];
        this.disposables.push(this.windowService.onNewWindowOpen(function (windowId) { return _this.setActiveWindow(windowId); }));
        this.disposables.push(this.windowService.onWindowFocus(function (windowId) { return _this.setActiveWindow(windowId); }));
    }
    ActiveWindowManager.prototype.setActiveWindow = function (windowId) {
        this._activeWindowId = windowId;
    };
    Object.defineProperty(ActiveWindowManager.prototype, "activeClientId", {
        get: function () {
            return "window:" + this._activeWindowId;
        },
        enumerable: true,
        configurable: true
    });
    ActiveWindowManager.prototype.dispose = function () {
        for (var _i = 0, _a = this.disposables; _i < _a.length; _i++) {
            var disposable = _a[_i];
            disposable.dispose();
        }
    };
    ActiveWindowManager = __decorate([
        __param(0, exports.IWindowEventService)
    ], ActiveWindowManager);
    return ActiveWindowManager;
}());
exports.ActiveWindowManager = ActiveWindowManager;
