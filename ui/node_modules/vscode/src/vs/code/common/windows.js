/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var lifecycle_1 = require("vs/base/common/lifecycle");
var windows_1 = require("vs/platform/windows/common/windows");
var ActiveWindowManager = (function () {
    function ActiveWindowManager(windowsService) {
        this.disposables = [];
        windowsService.onWindowOpen(this.setActiveWindow, this, this.disposables);
        windowsService.onWindowFocus(this.setActiveWindow, this, this.disposables);
    }
    ActiveWindowManager.prototype.setActiveWindow = function (windowId) {
        this._activeWindowId = windowId;
    };
    Object.defineProperty(ActiveWindowManager.prototype, "activeClientId", {
        get: function () {
            return "window:" + this._activeWindowId;
        },
        enumerable: true,
        configurable: true
    });
    ActiveWindowManager.prototype.dispose = function () {
        this.disposables = lifecycle_1.dispose(this.disposables);
    };
    return ActiveWindowManager;
}());
ActiveWindowManager = __decorate([
    __param(0, windows_1.IWindowsService)
], ActiveWindowManager);
exports.ActiveWindowManager = ActiveWindowManager;
