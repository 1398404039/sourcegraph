/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var windows_1 = require("vs/code/electron-main/windows");
var winjs_base_1 = require("vs/base/common/winjs.base");
var log_1 = require("vs/code/electron-main/log");
var url_1 = require("vs/platform/url/common/url");
var instantiation_1 = require("vs/platform/instantiation/common/instantiation");
var event_1 = require("vs/base/common/event");
exports.ID = 'launchService';
exports.ILaunchService = instantiation_1.createDecorator(exports.ID);
var LaunchChannel = (function () {
    function LaunchChannel(service) {
        this.service = service;
    }
    LaunchChannel.prototype.call = function (command, arg) {
        switch (command) {
            case 'start':
                var _a = arg, args = _a.args, userEnv = _a.userEnv;
                return this.service.start(args, userEnv);
            case 'get-main-process-id':
                return this.service.getMainProcessId();
        }
    };
    return LaunchChannel;
}());
exports.LaunchChannel = LaunchChannel;
var LaunchChannelClient = (function () {
    function LaunchChannelClient(channel) {
        this.channel = channel;
    }
    LaunchChannelClient.prototype.start = function (args, userEnv) {
        return this.channel.call('start', { args: args, userEnv: userEnv });
    };
    LaunchChannelClient.prototype.getMainProcessId = function () {
        return this.channel.call('get-main-process-id', null);
    };
    return LaunchChannelClient;
}());
exports.LaunchChannelClient = LaunchChannelClient;
var LaunchService = (function () {
    function LaunchService(logService, windowsService, urlService) {
        this.logService = logService;
        this.windowsService = windowsService;
        this.urlService = urlService;
    }
    LaunchService.prototype.start = function (args, userEnv) {
        var _this = this;
        this.logService.log('Received data from other instance: ', args, userEnv);
        var openUrlArg = args['open-url'] || [];
        var openUrl = typeof openUrlArg === 'string' ? [openUrlArg] : openUrlArg;
        if (openUrl.length > 0) {
            openUrl.forEach(function (url) { return _this.urlService.open(url); });
            return winjs_base_1.TPromise.as(null);
        }
        // Otherwise handle in windows service
        var usedWindows;
        if (!!args.extensionDevelopmentPath) {
            this.windowsService.openPluginDevelopmentHostWindow({ cli: args, userEnv: userEnv });
        }
        else if (args._.length === 0 && args['new-window']) {
            usedWindows = this.windowsService.open({ cli: args, userEnv: userEnv, forceNewWindow: true, forceEmpty: true });
        }
        else if (args._.length === 0) {
            usedWindows = [this.windowsService.focusLastActive(args)];
        }
        else {
            usedWindows = this.windowsService.open({
                cli: args,
                userEnv: userEnv,
                forceNewWindow: args.wait || args['new-window'],
                preferNewWindow: !args['reuse-window'],
                diffMode: args.diff
            });
        }
        // If the other instance is waiting to be killed, we hook up a window listener if one window
        // is being used and only then resolve the startup promise which will kill this second instance
        if (args.wait && usedWindows && usedWindows.length === 1 && usedWindows[0]) {
            var windowId_1 = usedWindows[0].id;
            return new winjs_base_1.TPromise(function (c, e) {
                var onceWindowClose = event_1.once(_this.windowsService.onWindowClose);
                onceWindowClose(function (id) {
                    if (id === windowId_1) {
                        c(null);
                    }
                });
            });
        }
        return winjs_base_1.TPromise.as(null);
    };
    LaunchService.prototype.getMainProcessId = function () {
        this.logService.log('Received request for process ID from other instance.');
        return winjs_base_1.TPromise.as(process.pid);
    };
    return LaunchService;
}());
LaunchService = __decorate([
    __param(0, log_1.ILogService),
    __param(1, windows_1.IWindowsMainService),
    __param(2, url_1.IURLService)
], LaunchService);
exports.LaunchService = LaunchService;
