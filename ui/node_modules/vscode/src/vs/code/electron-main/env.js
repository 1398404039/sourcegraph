/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var fs = require('original-fs');
var path = require('path');
var os = require('os');
var electron_1 = require('electron');
var arrays = require('vs/base/common/arrays');
var strings = require('vs/base/common/strings');
var paths = require('vs/base/common/paths');
var platform = require('vs/base/common/platform');
var uri_1 = require('vs/base/common/uri');
var types = require('vs/base/common/types');
var instantiation_1 = require('vs/platform/instantiation/common/instantiation');
var product_1 = require('vs/platform/product');
var argv_1 = require('vs/platform/environment/node/argv');
exports.IEnvService = instantiation_1.createDecorator('mainEnvironmentService');
var EnvService = (function () {
    function EnvService() {
        this._appRoot = path.dirname(uri_1.default.parse(require.toUrl('')).fsPath);
        this._currentWorkingDirectory = process.env['VSCODE_CWD'] || process.cwd();
        this._appHome = electron_1.app.getPath('userData');
        this._appSettingsHome = path.join(this._appHome, 'User');
        this._appSettingsPath = path.join(this._appSettingsHome, 'settings.json');
        this._appKeybindingsPath = path.join(this._appSettingsHome, 'keybindings.json');
        // Remove the Electron executable
        var _a = process.argv, args = _a.slice(1);
        // If dev, remove the first non-option argument: it's the app location
        if (!this.isBuilt) {
            var index = arrays.firstIndex(args, function (a) { return !/^-/.test(a); });
            if (index > -1) {
                args.splice(index, 1);
            }
        }
        var argv = argv_1.parseArgs(args);
        var paths = parsePathArguments(this._currentWorkingDirectory, argv._, argv.goto);
        this._cliArgs = Object.freeze({
            _: [],
            paths: paths,
            performance: argv.performance,
            verbose: argv.verbose,
            debugPluginHost: argv.debugPluginHost,
            debugBrkPluginHost: argv.debugBrkPluginHost,
            logExtensionHostCommunication: argv.logExtensionHostCommunication,
            'new-window': argv['new-window'],
            'reuse-window': argv['reuse-window'],
            goto: argv.goto,
            diff: argv.diff && paths.length === 2,
            extensionHomePath: normalizePath(argv.extensionHomePath),
            extensionDevelopmentPath: normalizePath(argv.extensionDevelopmentPath),
            extensionTestsPath: normalizePath(argv.extensionTestsPath),
            'disable-extensions': argv['disable-extensions'],
            'open-url': argv['open-url'],
            locale: argv.locale,
            wait: argv.wait
        });
        this._userHome = path.join(os.homedir(), product_1.default.dataFolderName);
        this._userExtensionsHome = this.cliArgs.extensionHomePath || path.join(this._userHome, 'extensions');
    }
    Object.defineProperty(EnvService.prototype, "cliArgs", {
        get: function () { return this._cliArgs; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EnvService.prototype, "userExtensionsHome", {
        get: function () { return this._userExtensionsHome; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EnvService.prototype, "isBuilt", {
        get: function () { return !process.env['VSCODE_DEV']; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EnvService.prototype, "product", {
        get: function () { return product_1.default; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EnvService.prototype, "updateUrl", {
        get: function () { return product_1.default.updateUrl; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EnvService.prototype, "quality", {
        get: function () { return product_1.default.quality; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EnvService.prototype, "userHome", {
        get: function () { return this._userHome; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EnvService.prototype, "appRoot", {
        get: function () { return this._appRoot; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EnvService.prototype, "currentWorkingDirectory", {
        get: function () { return this._currentWorkingDirectory; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EnvService.prototype, "appHome", {
        get: function () { return this._appHome; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EnvService.prototype, "appSettingsHome", {
        get: function () { return this._appSettingsHome; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EnvService.prototype, "appSettingsPath", {
        get: function () { return this._appSettingsPath; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EnvService.prototype, "appKeybindingsPath", {
        get: function () { return this._appKeybindingsPath; },
        enumerable: true,
        configurable: true
    });
    return EnvService;
}());
exports.EnvService = EnvService;
function parsePathArguments(cwd, args, gotoLineMode) {
    var result = args.map(function (arg) {
        var pathCandidate = String(arg);
        var parsedPath;
        if (gotoLineMode) {
            parsedPath = parseLineAndColumnAware(pathCandidate);
            pathCandidate = parsedPath.path;
        }
        if (pathCandidate) {
            pathCandidate = preparePath(cwd, pathCandidate);
        }
        var realPath;
        try {
            realPath = fs.realpathSync(pathCandidate);
        }
        catch (error) {
            // in case of an error, assume the user wants to create this file
            // if the path is relative, we join it to the cwd
            realPath = path.normalize(path.isAbsolute(pathCandidate) ? pathCandidate : path.join(cwd, pathCandidate));
        }
        var basename = path.basename(realPath);
        if (basename /* can be empty if code is opened on root */ && !paths.isValidBasename(basename)) {
            return null; // do not allow invalid file names
        }
        if (gotoLineMode) {
            parsedPath.path = realPath;
            return toLineAndColumnPath(parsedPath);
        }
        return realPath;
    });
    var caseInsensitive = platform.isWindows || platform.isMacintosh;
    var distinct = arrays.distinct(result, function (e) { return e && caseInsensitive ? e.toLowerCase() : e; });
    return arrays.coalesce(distinct);
}
function preparePath(cwd, p) {
    // Trim trailing quotes
    if (platform.isWindows) {
        p = strings.rtrim(p, '"'); // https://github.com/Microsoft/vscode/issues/1498
    }
    // Trim whitespaces
    p = strings.trim(strings.trim(p, ' '), '\t');
    if (platform.isWindows) {
        // Resolve the path against cwd if it is relative
        p = path.resolve(cwd, p);
        // Trim trailing '.' chars on Windows to prevent invalid file names
        p = strings.rtrim(p, '.');
    }
    return p;
}
function normalizePath(p) {
    return p ? path.normalize(p) : p;
}
function parseLineAndColumnAware(rawPath) {
    var segments = rawPath.split(':'); // C:\file.txt:<line>:<column>
    var path;
    var line = null;
    var column = null;
    segments.forEach(function (segment) {
        var segmentAsNumber = Number(segment);
        if (!types.isNumber(segmentAsNumber)) {
            path = !!path ? [path, segment].join(':') : segment; // a colon can well be part of a path (e.g. C:\...)
        }
        else if (line === null) {
            line = segmentAsNumber;
        }
        else if (column === null) {
            column = segmentAsNumber;
        }
    });
    if (!path) {
        throw new Error('Format for `--goto` should be: `FILE:LINE(:COLUMN)`');
    }
    return {
        path: path,
        line: line !== null ? line : void 0,
        column: column !== null ? column : line !== null ? 1 : void 0 // if we have a line, make sure column is also set
    };
}
exports.parseLineAndColumnAware = parseLineAndColumnAware;
function toLineAndColumnPath(parsedPath) {
    var segments = [parsedPath.path];
    if (types.isNumber(parsedPath.line)) {
        segments.push(String(parsedPath.line));
    }
    if (types.isNumber(parsedPath.column)) {
        segments.push(String(parsedPath.column));
    }
    return segments.join(':');
}
