"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.mediaQuery = mediaQuery;
exports.fontVariant = fontVariant;
exports.overflowWrap = overflowWrap;
exports.anyLink = anyLink;
exports.matches = matches;

var _index = require("./index");

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; } // plugins should be able to return arrays

// import { color } from './color'


// @vars and modules solve 
// custom properties: var, set, apply
// custom media queries
// custom selectors
// nesting is solved with select() + compose()

// media query ranges 
function mediaQuery(_ref) {
  var expr = _ref.expr;

  var rest = _objectWithoutProperties(_ref, ["expr"]);

  /\swidth\s\/>\=\s[A-Za-z0-9]/;
  // rewrite expr
  // call media
  return _index.media.apply(undefined, [expr].concat(_toConsumableArray(rest)));
}

// font-variant 
var fontVariantProperties = {
  "font-variant-ligatures": {
    "common-ligatures": "\"liga\", \"clig\"",
    "no-common-ligatures": "\"liga\", \"clig off\"",
    "discretionary-ligatures": "\"dlig\"",
    "no-discretionary-ligatures": "\"dlig\" off",
    "historical-ligatures": "\"hlig\"",
    "no-historical-ligatures": "\"hlig\" off",
    contextual: "\"calt\"",
    "no-contextual": "\"calt\" off"
  },

  "font-variant-position": {
    sub: "\"subs\"",
    "super": "\"sups\"",
    normal: "\"subs\" off, \"sups\" off"
  },

  "font-variant-caps": {
    "small-caps": "\"c2sc\"",
    "all-small-caps": "\"smcp\", \"c2sc\"",
    "petite-caps": "\"pcap\"",
    "all-petite-caps": "\"pcap\", \"c2pc\"",
    unicase: "\"unic\"",
    "titling-caps": "\"titl\""
  },

  "font-variant-numeric": {
    "lining-nums": "\"lnum\"",
    "oldstyle-nums": "\"onum\"",
    "proportional-nums": "\"pnum\"",
    "tabular-nums": "\"tnum\"",
    "diagonal-fractions": "\"frac\"",
    "stacked-fractions": "\"afrc\"",
    ordinal: "\"ordn\"",
    "slashed-zero": "\"zero\""
  },

  "font-kerning": {
    normal: "\"kern\"",
    none: "\"kern\" off"
  },

  "font-variant": {
    normal: "normal",
    inherit: "inherit"
  }
};

// The `font-variant` property is a shorthand for all the others.
for (var prop in fontVariantProperties) {
  var keys = fontVariantProperties[prop];
  for (var key in keys) {
    if (!(key in fontVariantProperties['font-variant'])) {
      fontVariantProperties['font-variant'][key] = keys[key];
    }
  }
}

function fontVariant() {}

// overflow-wrap
function overflowWrap() {}

function anyLink(_ref2) {
  var selector = _ref2.selector;

  var rest = _objectWithoutProperties(_ref2, ["selector"]);

  var pieces = selector.split(',').map(function (x) {
    return x.trim();
  });
  var result = [];
  pieces.forEach(function (p) {
    if (p.indexOf(':any-link') >= 0) {
      result.push(p.replace(/\:any\-link/g, ':link'));
      result.push(p.replace(/\:any\-link/g, ':visited'));
    } else {
      result.push(p);
    }
  });
  return _extends({ selector: result.join(', ') }, rest);
}

// :matches() - index
function matches(selectors, x) {}

// fns 
// color stuff - color.js
// filter - filters.js


// maybe not 
// :: fallback to : for ie8
// initial for any value (?)
// rem fallback to px