/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
var getmac = require("getmac");
var crypto = require("crypto");
var winjs_base_1 = require("vs/base/common/winjs.base");
var errors = require("vs/base/common/errors");
var uuid = require("vs/base/common/uuid");
var os_1 = require("os");
var map_1 = require("vs/base/common/map");
// http://www.techrepublic.com/blog/data-center/mac-address-scorecard-for-common-virtual-machine-platforms/
// VMware ESX 3, Server, Workstation, Player	00-50-56, 00-0C-29, 00-05-69
// Microsoft Hyper-V, Virtual Server, Virtual PC	00-03-FF
// Parallells Desktop, Workstation, Server, Virtuozzo	00-1C-42
// Virtual Iron 4	00-0F-4B
// Red Hat Xen	00-16-3E
// Oracle VM	00-16-3E
// XenSource	00-16-3E
// Novell Xen	00-16-3E
// Sun xVM VirtualBox	08-00-27
exports.virtualMachineHint = new (function () {
    function class_1() {
    }
    class_1.prototype._isVirtualMachineMacAdress = function (mac) {
        if (!this._virtualMachineOUIs) {
            this._virtualMachineOUIs = new map_1.TrieMap(function (s) { return s.split(/[-:]/); });
            // this._virtualMachineOUIs.insert('00-00-00', true);
            this._virtualMachineOUIs.insert('00-50-56', true);
            this._virtualMachineOUIs.insert('00-0C-29', true);
            this._virtualMachineOUIs.insert('00-05-69', true);
            this._virtualMachineOUIs.insert('00-03-FF', true);
            this._virtualMachineOUIs.insert('00-1C-42', true);
        }
        return this._virtualMachineOUIs.findSubstr(mac);
    };
    class_1.prototype.value = function () {
        if (this._value === undefined) {
            var vmOui = 0;
            var interfaceCount = 0;
            var interfaces = os_1.networkInterfaces();
            for (var name_1 in interfaces) {
                if (Object.prototype.hasOwnProperty.call(interfaces, name_1)) {
                    for (var _i = 0, _a = interfaces[name_1]; _i < _a.length; _i++) {
                        var _b = _a[_i], mac_1 = _b.mac, internal = _b.internal;
                        if (!internal) {
                            interfaceCount += 1;
                            if (this._isVirtualMachineMacAdress(mac_1.toUpperCase())) {
                                vmOui += 1;
                            }
                        }
                    }
                }
            }
            this._value = interfaceCount > 0
                ? vmOui / interfaceCount
                : 0;
        }
        return this._value;
    };
    return class_1;
}());
var mac = new (function () {
    function class_2() {
    }
    Object.defineProperty(class_2.prototype, "value", {
        get: function () {
            if (this._value === void 0) {
                this._initValue();
            }
            return this._value;
        },
        enumerable: true,
        configurable: true
    });
    class_2.prototype._initValue = function () {
        this._value = null;
        var interfaces = os_1.networkInterfaces();
        for (var key in interfaces) {
            for (var _i = 0, _a = interfaces[key]; _i < _a.length; _i++) {
                var i = _a[_i];
                if (!i.internal) {
                    this._value = crypto.createHash('sha256').update(i.mac, 'utf8').digest('hex');
                    return;
                }
            }
        }
        this._value = "missing-" + uuid.generateUuid();
    };
    return class_2;
}());
function _futureMachineIdExperiment() {
    return mac.value;
}
exports._futureMachineIdExperiment = _futureMachineIdExperiment;
var machineId;
function getMachineId() {
    return machineId || (machineId = getMacMachineId()
        .then(function (id) { return id || uuid.generateUuid(); })); // fallback, generate a UUID
}
exports.getMachineId = getMachineId;
function getMacMachineId() {
    return new winjs_base_1.TPromise(function (resolve) {
        try {
            getmac.getMac(function (error, macAddress) {
                if (!error) {
                    resolve(crypto.createHash('sha256').update(macAddress, 'utf8').digest('hex'));
                }
                else {
                    resolve(undefined);
                }
            });
        }
        catch (err) {
            errors.onUnexpectedError(err);
            resolve(undefined);
        }
    });
}
