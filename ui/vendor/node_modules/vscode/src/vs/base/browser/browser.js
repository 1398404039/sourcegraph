/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var Platform = require("vs/base/common/platform");
var event_1 = require("vs/base/common/event");
var WindowManager = (function () {
    function WindowManager() {
        this._zoomLevel = 0;
        this._zoomFactor = 0;
        this._pixelRatioCache = 0;
        this._pixelRatioComputed = false;
        this._onDidChangeZoomLevel = new event_1.Emitter();
        this.onDidChangeZoomLevel = this._onDidChangeZoomLevel.event;
        this._onDidChangeFullscreen = new event_1.Emitter();
        this.onDidChangeFullscreen = this._onDidChangeFullscreen.event;
    }
    WindowManager.prototype.getZoomLevel = function () {
        return this._zoomLevel;
    };
    WindowManager.prototype.setZoomLevel = function (zoomLevel) {
        if (this._zoomLevel === zoomLevel) {
            return;
        }
        this._zoomLevel = zoomLevel;
        this._pixelRatioComputed = false;
        this._onDidChangeZoomLevel.fire(this._zoomLevel);
    };
    WindowManager.prototype.getZoomFactor = function () {
        return this._zoomFactor;
    };
    WindowManager.prototype.setZoomFactor = function (zoomFactor) {
        this._zoomFactor = zoomFactor;
    };
    WindowManager.prototype.getPixelRatio = function () {
        if (!this._pixelRatioComputed) {
            this._pixelRatioCache = this._computePixelRatio();
            this._pixelRatioComputed = true;
        }
        return this._pixelRatioCache;
    };
    WindowManager.prototype._computePixelRatio = function () {
        var ctx = document.createElement('canvas').getContext('2d');
        var dpr = window.devicePixelRatio || 1;
        var bsr = ctx.webkitBackingStorePixelRatio ||
            ctx.mozBackingStorePixelRatio ||
            ctx.msBackingStorePixelRatio ||
            ctx.oBackingStorePixelRatio ||
            ctx.backingStorePixelRatio || 1;
        return dpr / bsr;
    };
    WindowManager.prototype.setFullscreen = function (fullscreen) {
        if (this._fullscreen === fullscreen) {
            return;
        }
        this._fullscreen = fullscreen;
        this._onDidChangeFullscreen.fire();
    };
    WindowManager.prototype.isFullscreen = function () {
        return this._fullscreen;
    };
    return WindowManager;
}());
WindowManager.INSTANCE = new WindowManager();
/** A zoom index, e.g. 1, 2, 3 */
function getZoomLevel() {
    return WindowManager.INSTANCE.getZoomLevel();
}
exports.getZoomLevel = getZoomLevel;
/** The zoom scale for an index, e.g. 1, 1.2, 1.4 */
function getZoomFactor() {
    return WindowManager.INSTANCE.getZoomFactor();
}
exports.getZoomFactor = getZoomFactor;
function getPixelRatio() {
    return WindowManager.INSTANCE.getPixelRatio();
}
exports.getPixelRatio = getPixelRatio;
function setZoomLevel(zoomLevel) {
    WindowManager.INSTANCE.setZoomLevel(zoomLevel);
}
exports.setZoomLevel = setZoomLevel;
function setZoomFactor(zoomFactor) {
    WindowManager.INSTANCE.setZoomFactor(zoomFactor);
}
exports.setZoomFactor = setZoomFactor;
function onDidChangeZoomLevel(callback) {
    return WindowManager.INSTANCE.onDidChangeZoomLevel(callback);
}
exports.onDidChangeZoomLevel = onDidChangeZoomLevel;
function setFullscreen(fullscreen) {
    WindowManager.INSTANCE.setFullscreen(fullscreen);
}
exports.setFullscreen = setFullscreen;
function isFullscreen() {
    return WindowManager.INSTANCE.isFullscreen();
}
exports.isFullscreen = isFullscreen;
function onDidChangeFullscreen(callback) {
    return WindowManager.INSTANCE.onDidChangeFullscreen(callback);
}
exports.onDidChangeFullscreen = onDidChangeFullscreen;
var userAgent = navigator.userAgent;
exports.isIE = (userAgent.indexOf('Trident') >= 0);
exports.isEdge = (userAgent.indexOf('Edge/') >= 0);
exports.isEdgeOrIE = exports.isIE || exports.isEdge;
exports.isOpera = (userAgent.indexOf('Opera') >= 0);
exports.isFirefox = (userAgent.indexOf('Firefox') >= 0);
exports.isWebKit = (userAgent.indexOf('AppleWebKit') >= 0);
exports.isChrome = (userAgent.indexOf('Chrome') >= 0);
exports.isSafari = (userAgent.indexOf('Chrome') === -1) && (userAgent.indexOf('Safari') >= 0);
exports.isIPad = (userAgent.indexOf('iPad') >= 0);
exports.canUseTranslate3d = !exports.isFirefox;
exports.enableEmptySelectionClipboard = exports.isWebKit;
function supportsExecCommand(command) {
    return ((exports.isIE || Platform.isNative)
        && document.queryCommandSupported(command));
}
exports.supportsExecCommand = supportsExecCommand;
