/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
require("./button.css");
var eventEmitter_1 = require("vs/base/common/eventEmitter");
var DOM = require("vs/base/browser/dom");
var builder_1 = require("vs/base/browser/builder");
var keyboardEvent_1 = require("vs/base/browser/keyboardEvent");
var Button = (function (_super) {
    __extends(Button, _super);
    function Button(container) {
        var _this = _super.call(this) || this;
        _this.$el = builder_1.$('a.monaco-button').attr({
            'tabIndex': '0',
            'role': 'button'
        }).appendTo(container);
        _this.$el.on(DOM.EventType.CLICK, function (e) {
            if (!_this.enabled) {
                DOM.EventHelper.stop(e);
                return;
            }
            _this.emit(DOM.EventType.CLICK, e);
        });
        _this.$el.on(DOM.EventType.KEY_DOWN, function (e) {
            var event = new keyboardEvent_1.StandardKeyboardEvent(e);
            var eventHandled = false;
            if (_this.enabled && event.equals(3 /* Enter */) || event.equals(10 /* Space */)) {
                _this.emit(DOM.EventType.CLICK, e);
                eventHandled = true;
            }
            else if (event.equals(9 /* Escape */)) {
                _this.$el.domBlur();
                eventHandled = true;
            }
            if (eventHandled) {
                DOM.EventHelper.stop(event, true);
            }
        });
        return _this;
    }
    Button.prototype.getElement = function () {
        return this.$el.getHTMLElement();
    };
    Object.defineProperty(Button.prototype, "label", {
        set: function (value) {
            if (!this.$el.hasClass('monaco-text-button')) {
                this.$el.addClass('monaco-text-button');
            }
            this.$el.text(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Button.prototype, "icon", {
        set: function (iconClassName) {
            this.$el.addClass(iconClassName);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Button.prototype, "enabled", {
        get: function () {
            return !this.$el.hasClass('disabled');
        },
        set: function (value) {
            if (value) {
                this.$el.removeClass('disabled');
                this.$el.attr({
                    'aria-disabled': 'false',
                    'tabIndex': '0'
                });
            }
            else {
                this.$el.addClass('disabled');
                this.$el.attr('aria-disabled', String(true));
                DOM.removeTabIndexAndUpdateFocus(this.$el.getHTMLElement());
            }
        },
        enumerable: true,
        configurable: true
    });
    Button.prototype.focus = function () {
        this.$el.domFocus();
    };
    Button.prototype.dispose = function () {
        if (this.$el) {
            this.$el.dispose();
            this.$el = null;
        }
        _super.prototype.dispose.call(this);
    };
    return Button;
}(eventEmitter_1.EventEmitter));
exports.Button = Button;
