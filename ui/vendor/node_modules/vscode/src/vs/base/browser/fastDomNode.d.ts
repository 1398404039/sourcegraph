export declare abstract class FastDomNode<T extends HTMLElement> {
    private _domNode;
    private _maxWidth;
    private _width;
    private _height;
    private _top;
    private _left;
    private _bottom;
    private _right;
    private _fontFamily;
    private _fontWeight;
    private _fontSize;
    private _lineHeight;
    private _className;
    private _display;
    private _position;
    private _visibility;
    private _transform;
    readonly domNode: T;
    constructor(domNode: T);
    setMaxWidth(maxWidth: number): void;
    setWidth(width: number): void;
    unsetWidth(): void;
    setHeight(height: number): void;
    getHeight(): number;
    unsetHeight(): void;
    setTop(top: number): void;
    getTop(): number;
    unsetTop(): void;
    setLeft(left: number): void;
    setBottom(bottom: number): void;
    setRight(right: number): void;
    setFontFamily(fontFamily: string): void;
    setFontWeight(fontWeight: string): void;
    setFontSize(fontSize: number): void;
    setLineHeight(lineHeight: number): void;
    setClassName(className: string): void;
    toggleClassName(className: string, shouldHaveIt?: boolean): void;
    addClassName(className: string): void;
    removeClassName(className: string): void;
    setDisplay(display: string): void;
    setPosition(position: string): void;
    setVisibility(visibility: string): void;
    setTransform(transform: string): void;
    protected abstract _setTransform(domNode: T, transform: string): void;
    setAttribute(name: string, value: string): void;
    getAttribute(name: string): string;
    removeAttribute(name: string): void;
    hasAttribute(name: string): boolean;
}
export declare function createFastDomNode<T extends HTMLElement>(domNode: T): FastDomNode<T>;
