/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
require("./media/scrollbars.css");
var Browser = require("vs/base/browser/browser");
var DomUtils = require("vs/base/browser/dom");
var Platform = require("vs/base/common/platform");
var mouseEvent_1 = require("vs/base/browser/mouseEvent");
var horizontalScrollbar_1 = require("vs/base/browser/ui/scrollbar/horizontalScrollbar");
var verticalScrollbar_1 = require("vs/base/browser/ui/scrollbar/verticalScrollbar");
var lifecycle_1 = require("vs/base/common/lifecycle");
var scrollable_1 = require("vs/base/common/scrollable");
var widget_1 = require("vs/base/browser/ui/widget");
var async_1 = require("vs/base/common/async");
var fastDomNode_1 = require("vs/base/browser/fastDomNode");
var event_1 = require("vs/base/common/event");
var HIDE_TIMEOUT = 500;
var SCROLL_WHEEL_SENSITIVITY = 50;
var ScrollableElement = (function (_super) {
    __extends(ScrollableElement, _super);
    function ScrollableElement(element, options, scrollable) {
        var _this = _super.call(this) || this;
        _this._onScroll = _this._register(new event_1.Emitter());
        _this.onScroll = _this._onScroll.event;
        element.style.overflow = 'hidden';
        _this._options = resolveOptions(options);
        if (typeof scrollable === 'undefined') {
            _this._scrollable = _this._register(new scrollable_1.Scrollable());
        }
        else {
            _this._scrollable = scrollable;
        }
        _this._register(_this._scrollable.onScroll(function (e) {
            _this._onDidScroll(e);
            _this._onScroll.fire(e);
        }));
        // this._scrollable = this._register(new DelegateScrollable(scrollable, () => this._onScroll()));
        var scrollbarHost = {
            onMouseWheel: function (mouseWheelEvent) { return _this._onMouseWheel(mouseWheelEvent); },
            onDragStart: function () { return _this._onDragStart(); },
            onDragEnd: function () { return _this._onDragEnd(); },
        };
        _this._verticalScrollbar = _this._register(new verticalScrollbar_1.VerticalScrollbar(_this._scrollable, _this._options, scrollbarHost));
        _this._horizontalScrollbar = _this._register(new horizontalScrollbar_1.HorizontalScrollbar(_this._scrollable, _this._options, scrollbarHost));
        _this._domNode = document.createElement('div');
        _this._domNode.className = 'monaco-scrollable-element ' + _this._options.className;
        _this._domNode.setAttribute('role', 'presentation');
        _this._domNode.style.position = 'relative';
        _this._domNode.style.overflow = 'hidden';
        _this._domNode.appendChild(element);
        _this._domNode.appendChild(_this._horizontalScrollbar.domNode.domNode);
        _this._domNode.appendChild(_this._verticalScrollbar.domNode.domNode);
        if (_this._options.useShadows) {
            _this._leftShadowDomNode = fastDomNode_1.createFastDomNode(document.createElement('div'));
            _this._leftShadowDomNode.setClassName('shadow');
            _this._domNode.appendChild(_this._leftShadowDomNode.domNode);
            _this._topShadowDomNode = fastDomNode_1.createFastDomNode(document.createElement('div'));
            _this._topShadowDomNode.setClassName('shadow');
            _this._domNode.appendChild(_this._topShadowDomNode.domNode);
            _this._topLeftShadowDomNode = fastDomNode_1.createFastDomNode(document.createElement('div'));
            _this._topLeftShadowDomNode.setClassName('shadow top-left-corner');
            _this._domNode.appendChild(_this._topLeftShadowDomNode.domNode);
        }
        _this._listenOnDomNode = _this._options.listenOnDomNode || _this._domNode;
        _this._mouseWheelToDispose = [];
        _this._setListeningToMouseWheel(_this._options.handleMouseWheel);
        _this.onmouseover(_this._listenOnDomNode, function (e) { return _this._onMouseOver(e); });
        _this.onnonbubblingmouseout(_this._listenOnDomNode, function (e) { return _this._onMouseOut(e); });
        _this._hideTimeout = _this._register(new async_1.TimeoutTimer());
        _this._isDragging = false;
        _this._mouseIsOver = false;
        _this._shouldRender = true;
        return _this;
    }
    ScrollableElement.prototype.dispose = function () {
        this._mouseWheelToDispose = lifecycle_1.dispose(this._mouseWheelToDispose);
        _super.prototype.dispose.call(this);
    };
    /**
     * Get the generated 'scrollable' dom node
     */
    ScrollableElement.prototype.getDomNode = function () {
        return this._domNode;
    };
    ScrollableElement.prototype.getOverviewRulerLayoutInfo = function () {
        return {
            parent: this._domNode,
            insertBefore: this._verticalScrollbar.domNode.domNode,
        };
    };
    /**
     * Delegate a mouse down event to the vertical scrollbar.
     * This is to help with clicking somewhere else and having the scrollbar react.
     */
    ScrollableElement.prototype.delegateVerticalScrollbarMouseDown = function (browserEvent) {
        this._verticalScrollbar.delegateMouseDown(browserEvent);
    };
    ScrollableElement.prototype.getVerticalSliderVerticalCenter = function () {
        return this._verticalScrollbar.getVerticalSliderVerticalCenter();
    };
    ScrollableElement.prototype.updateState = function (newState) {
        this._scrollable.updateState(newState);
    };
    ScrollableElement.prototype.getScrollState = function () {
        return this._scrollable.getState();
    };
    /**
     * Update the class name of the scrollable element.
     */
    ScrollableElement.prototype.updateClassName = function (newClassName) {
        this._options.className = newClassName;
        // Defaults are different on Macs
        if (Platform.isMacintosh) {
            this._options.className += ' mac';
        }
        this._domNode.className = 'monaco-scrollable-element ' + this._options.className;
    };
    /**
     * Update configuration options for the scrollbar.
     * Really this is Editor.IEditorScrollbarOptions, but base shouldn't
     * depend on Editor.
     */
    ScrollableElement.prototype.updateOptions = function (newOptions) {
        var massagedOptions = resolveOptions(newOptions);
        this._options.handleMouseWheel = massagedOptions.handleMouseWheel;
        this._options.mouseWheelScrollSensitivity = massagedOptions.mouseWheelScrollSensitivity;
        this._setListeningToMouseWheel(this._options.handleMouseWheel);
        this._shouldRender = this._horizontalScrollbar.setCanUseTranslate3d(massagedOptions.canUseTranslate3d) || this._shouldRender;
        this._shouldRender = this._verticalScrollbar.setCanUseTranslate3d(massagedOptions.canUseTranslate3d) || this._shouldRender;
        if (!this._options.lazyRender) {
            this._render();
        }
    };
    // -------------------- mouse wheel scrolling --------------------
    ScrollableElement.prototype._setListeningToMouseWheel = function (shouldListen) {
        var _this = this;
        var isListening = (this._mouseWheelToDispose.length > 0);
        if (isListening === shouldListen) {
            // No change
            return;
        }
        // Stop listening (if necessary)
        this._mouseWheelToDispose = lifecycle_1.dispose(this._mouseWheelToDispose);
        // Start listening (if necessary)
        if (shouldListen) {
            var onMouseWheel = function (browserEvent) {
                var e = new mouseEvent_1.StandardMouseWheelEvent(browserEvent);
                _this._onMouseWheel(e);
            };
            this._mouseWheelToDispose.push(DomUtils.addDisposableListener(this._listenOnDomNode, 'mousewheel', onMouseWheel));
            this._mouseWheelToDispose.push(DomUtils.addDisposableListener(this._listenOnDomNode, 'DOMMouseScroll', onMouseWheel));
        }
    };
    ScrollableElement.prototype._onMouseWheel = function (e) {
        var desiredScrollTop = -1;
        var desiredScrollLeft = -1;
        if (e.deltaY || e.deltaX) {
            var deltaY = e.deltaY * this._options.mouseWheelScrollSensitivity;
            var deltaX = e.deltaX * this._options.mouseWheelScrollSensitivity;
            if (this._options.flipAxes) {
                _a = [deltaX, deltaY], deltaY = _a[0], deltaX = _a[1];
            }
            if (this._options.scrollYToX && !deltaX) {
                deltaX = deltaY;
                deltaY = 0;
            }
            if (Platform.isMacintosh) {
                // Give preference to vertical scrolling
                if (deltaY && Math.abs(deltaX) < 0.2) {
                    deltaX = 0;
                }
                if (Math.abs(deltaY) > Math.abs(deltaX) * 0.5) {
                    deltaX = 0;
                }
            }
            var scrollState = this._scrollable.getState();
            if (deltaY) {
                var currentScrollTop = scrollState.scrollTop;
                desiredScrollTop = this._verticalScrollbar.validateScrollPosition((desiredScrollTop !== -1 ? desiredScrollTop : currentScrollTop) - SCROLL_WHEEL_SENSITIVITY * deltaY);
                if (desiredScrollTop === currentScrollTop) {
                    desiredScrollTop = -1;
                }
            }
            if (deltaX) {
                var currentScrollLeft = scrollState.scrollLeft;
                desiredScrollLeft = this._horizontalScrollbar.validateScrollPosition((desiredScrollLeft !== -1 ? desiredScrollLeft : currentScrollLeft) - SCROLL_WHEEL_SENSITIVITY * deltaX);
                if (desiredScrollLeft === currentScrollLeft) {
                    desiredScrollLeft = -1;
                }
            }
            if (desiredScrollTop !== -1 || desiredScrollLeft !== -1) {
                if (desiredScrollTop !== -1) {
                    this._shouldRender = this._verticalScrollbar.setDesiredScrollPosition(desiredScrollTop) || this._shouldRender;
                    desiredScrollTop = -1;
                }
                if (desiredScrollLeft !== -1) {
                    this._shouldRender = this._horizontalScrollbar.setDesiredScrollPosition(desiredScrollLeft) || this._shouldRender;
                    desiredScrollLeft = -1;
                }
            }
        }
        if (this._options.alwaysConsumeMouseWheel || this._shouldRender) {
            e.preventDefault();
            e.stopPropagation();
        }
        var _a;
    };
    ScrollableElement.prototype._onDidScroll = function (e) {
        this._shouldRender = this._horizontalScrollbar.onDidScroll(e) || this._shouldRender;
        this._shouldRender = this._verticalScrollbar.onDidScroll(e) || this._shouldRender;
        if (this._options.useShadows) {
            this._shouldRender = true;
        }
        this._reveal();
        if (!this._options.lazyRender) {
            this._render();
        }
    };
    /**
     * Render / mutate the DOM now.
     * Should be used together with the ctor option `lazyRender`.
     */
    ScrollableElement.prototype.renderNow = function () {
        if (!this._options.lazyRender) {
            throw new Error('Please use `lazyRender` together with `renderNow`!');
        }
        this._render();
    };
    ScrollableElement.prototype._render = function () {
        if (!this._shouldRender) {
            return;
        }
        this._shouldRender = false;
        this._horizontalScrollbar.render();
        this._verticalScrollbar.render();
        if (this._options.useShadows) {
            var scrollState = this._scrollable.getState();
            var enableTop = scrollState.scrollTop > 0;
            var enableLeft = scrollState.scrollLeft > 0;
            this._leftShadowDomNode.setClassName('shadow' + (enableLeft ? ' left' : ''));
            this._topShadowDomNode.setClassName('shadow' + (enableTop ? ' top' : ''));
            this._topLeftShadowDomNode.setClassName('shadow top-left-corner' + (enableTop ? ' top' : '') + (enableLeft ? ' left' : ''));
        }
    };
    // -------------------- fade in / fade out --------------------
    ScrollableElement.prototype._onDragStart = function () {
        this._isDragging = true;
        this._reveal();
    };
    ScrollableElement.prototype._onDragEnd = function () {
        this._isDragging = false;
        this._hide();
    };
    ScrollableElement.prototype._onMouseOut = function (e) {
        this._mouseIsOver = false;
        this._hide();
    };
    ScrollableElement.prototype._onMouseOver = function (e) {
        this._mouseIsOver = true;
        this._reveal();
    };
    ScrollableElement.prototype._reveal = function () {
        this._verticalScrollbar.beginReveal();
        this._horizontalScrollbar.beginReveal();
        this._scheduleHide();
    };
    ScrollableElement.prototype._hide = function () {
        if (!this._mouseIsOver && !this._isDragging) {
            this._verticalScrollbar.beginHide();
            this._horizontalScrollbar.beginHide();
        }
    };
    ScrollableElement.prototype._scheduleHide = function () {
        var _this = this;
        if (!this._mouseIsOver && !this._isDragging) {
            this._hideTimeout.cancelAndSet(function () { return _this._hide(); }, HIDE_TIMEOUT);
        }
    };
    return ScrollableElement;
}(widget_1.Widget));
exports.ScrollableElement = ScrollableElement;
var DomScrollableElement = (function (_super) {
    __extends(DomScrollableElement, _super);
    function DomScrollableElement(element, options) {
        var _this = _super.call(this, element, options) || this;
        _this._element = element;
        _this.onScroll(function (e) {
            if (e.scrollTopChanged) {
                _this._element.scrollTop = e.scrollTop;
            }
            if (e.scrollLeftChanged) {
                _this._element.scrollLeft = e.scrollLeft;
            }
        });
        _this.scanDomNode();
        return _this;
    }
    DomScrollableElement.prototype.scanDomNode = function () {
        // widh, scrollLeft, scrollWidth, height, scrollTop, scrollHeight
        this.updateState({
            width: this._element.clientWidth,
            scrollWidth: this._element.scrollWidth,
            scrollLeft: this._element.scrollLeft,
            height: this._element.clientHeight,
            scrollHeight: this._element.scrollHeight,
            scrollTop: this._element.scrollTop,
        });
    };
    return DomScrollableElement;
}(ScrollableElement));
exports.DomScrollableElement = DomScrollableElement;
function resolveOptions(opts) {
    var result = {
        canUseTranslate3d: opts.canUseTranslate3d && Browser.canUseTranslate3d,
        lazyRender: (typeof opts.lazyRender !== 'undefined' ? opts.lazyRender : false),
        className: (typeof opts.className !== 'undefined' ? opts.className : ''),
        useShadows: (typeof opts.useShadows !== 'undefined' ? opts.useShadows : true),
        handleMouseWheel: (typeof opts.handleMouseWheel !== 'undefined' ? opts.handleMouseWheel : true),
        flipAxes: (typeof opts.flipAxes !== 'undefined' ? opts.flipAxes : false),
        alwaysConsumeMouseWheel: (typeof opts.alwaysConsumeMouseWheel !== 'undefined' ? opts.alwaysConsumeMouseWheel : false),
        scrollYToX: (typeof opts.scrollYToX !== 'undefined' ? opts.scrollYToX : false),
        mouseWheelScrollSensitivity: (typeof opts.mouseWheelScrollSensitivity !== 'undefined' ? opts.mouseWheelScrollSensitivity : 1),
        arrowSize: (typeof opts.arrowSize !== 'undefined' ? opts.arrowSize : 11),
        listenOnDomNode: (typeof opts.listenOnDomNode !== 'undefined' ? opts.listenOnDomNode : null),
        horizontal: (typeof opts.horizontal !== 'undefined' ? opts.horizontal : scrollable_1.ScrollbarVisibility.Auto),
        horizontalScrollbarSize: (typeof opts.horizontalScrollbarSize !== 'undefined' ? opts.horizontalScrollbarSize : 10),
        horizontalSliderSize: (typeof opts.horizontalSliderSize !== 'undefined' ? opts.horizontalSliderSize : 0),
        horizontalHasArrows: (typeof opts.horizontalHasArrows !== 'undefined' ? opts.horizontalHasArrows : false),
        vertical: (typeof opts.vertical !== 'undefined' ? opts.vertical : scrollable_1.ScrollbarVisibility.Auto),
        verticalScrollbarSize: (typeof opts.verticalScrollbarSize !== 'undefined' ? opts.verticalScrollbarSize : 10),
        verticalHasArrows: (typeof opts.verticalHasArrows !== 'undefined' ? opts.verticalHasArrows : false),
        verticalSliderSize: (typeof opts.verticalSliderSize !== 'undefined' ? opts.verticalSliderSize : 0)
    };
    result.horizontalSliderSize = (typeof opts.horizontalSliderSize !== 'undefined' ? opts.horizontalSliderSize : result.horizontalScrollbarSize);
    result.verticalSliderSize = (typeof opts.verticalSliderSize !== 'undefined' ? opts.verticalSliderSize : result.verticalScrollbarSize);
    // Defaults are different on Macs
    if (Platform.isMacintosh) {
        result.className += ' mac';
    }
    return result;
}
