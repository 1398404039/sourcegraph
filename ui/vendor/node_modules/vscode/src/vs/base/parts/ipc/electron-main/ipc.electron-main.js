/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var event_1 = require("vs/base/common/event");
var event_2 = require("vs/base/node/event");
var ipc_1 = require("vs/base/parts/ipc/common/ipc");
var ipc_electron_1 = require("vs/base/parts/ipc/common/ipc.electron");
var electron_1 = require("electron");
function createScopedOnMessageEvent(senderId) {
    var onMessage = event_2.fromEventEmitter(electron_1.ipcMain, 'ipc:message', function (event, message) { return ({ event: event, message: message }); });
    var onMessageFromSender = event_1.filterEvent(onMessage, function (_a) {
        var event = _a.event;
        return event.sender.getId() === senderId;
    });
    return event_1.mapEvent(onMessageFromSender, function (_a) {
        var message = _a.message;
        return message;
    });
}
var Server = (function (_super) {
    __extends(Server, _super);
    function Server() {
        return _super.call(this, Server.getOnDidClientConnect()) || this;
    }
    Server.getOnDidClientConnect = function () {
        var onHello = event_2.fromEventEmitter(electron_1.ipcMain, 'ipc:hello', function (_a) {
            var sender = _a.sender;
            return sender;
        });
        return event_1.mapEvent(onHello, function (webContents) {
            var onMessage = createScopedOnMessageEvent(webContents.getId());
            var protocol = new ipc_electron_1.Protocol(webContents, onMessage);
            var onDidClientDisconnect = event_2.fromEventEmitter(webContents, 'destroyed');
            return { protocol: protocol, onDidClientDisconnect: onDidClientDisconnect };
        });
    };
    return Server;
}(ipc_1.IPCServer));
exports.Server = Server;
