/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
var set_1 = require("vs/base/common/set");
var iterator_1 = require("vs/base/common/iterator");
var HistoryNavigator = (function () {
    function HistoryNavigator(history, limit) {
        if (history === void 0) { history = []; }
        if (limit === void 0) { limit = 10; }
        this._history = new set_1.ArraySet(history);
        this._limit = limit;
        this._onChange();
    }
    HistoryNavigator.prototype.add = function (t) {
        this._history.set(t);
        this._onChange();
    };
    HistoryNavigator.prototype.addIfNotPresent = function (t) {
        if (!this._history.contains(t)) {
            this.add(t);
        }
    };
    HistoryNavigator.prototype.next = function () {
        if (this._navigator.next()) {
            return this._navigator.current();
        }
        this.last();
        return null;
    };
    HistoryNavigator.prototype.previous = function () {
        if (this._navigator.previous()) {
            return this._navigator.current();
        }
        this.first();
        return null;
    };
    HistoryNavigator.prototype.current = function () {
        return this._navigator.current();
    };
    HistoryNavigator.prototype.parent = function () {
        return null;
    };
    HistoryNavigator.prototype.first = function () {
        return this._navigator.first();
    };
    HistoryNavigator.prototype.last = function () {
        return this._navigator.last();
    };
    HistoryNavigator.prototype._onChange = function () {
        this._reduceToLimit();
        this._navigator = new iterator_1.ArrayNavigator(this._history.elements);
        this._navigator.last();
    };
    HistoryNavigator.prototype._reduceToLimit = function () {
        var data = this._history.elements;
        if (data.length > this._limit) {
            this._history = new set_1.ArraySet(data.slice(data.length - this._limit));
        }
    };
    return HistoryNavigator;
}());
exports.HistoryNavigator = HistoryNavigator;
