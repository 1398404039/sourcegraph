import { Disposable } from 'vs/base/common/lifecycle';
import Event from 'vs/base/common/event';
export declare enum ScrollbarVisibility {
    Auto = 1,
    Hidden = 2,
    Visible = 3,
}
export interface ScrollEvent {
    width: number;
    scrollWidth: number;
    scrollLeft: number;
    height: number;
    scrollHeight: number;
    scrollTop: number;
    widthChanged: boolean;
    scrollWidthChanged: boolean;
    scrollLeftChanged: boolean;
    heightChanged: boolean;
    scrollHeightChanged: boolean;
    scrollTopChanged: boolean;
}
export declare class ScrollState {
    _scrollStateBrand: void;
    readonly width: number;
    readonly scrollWidth: number;
    readonly scrollLeft: number;
    readonly height: number;
    readonly scrollHeight: number;
    readonly scrollTop: number;
    constructor(width: number, scrollWidth: number, scrollLeft: number, height: number, scrollHeight: number, scrollTop: number);
    equals(other: ScrollState): boolean;
    createScrollEvent(previous: ScrollState): ScrollEvent;
}
export interface INewScrollState {
    width?: number;
    scrollWidth?: number;
    scrollLeft?: number;
    height?: number;
    scrollHeight?: number;
    scrollTop?: number;
}
export declare class Scrollable extends Disposable {
    _scrollableBrand: void;
    private _state;
    private _onScroll;
    onScroll: Event<ScrollEvent>;
    constructor();
    getState(): ScrollState;
    updateState(update: INewScrollState): void;
}
