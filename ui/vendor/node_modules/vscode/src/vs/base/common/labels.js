/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var platform = require("vs/base/common/platform");
var types = require("vs/base/common/types");
var strings = require("vs/base/common/strings");
var paths = require("vs/base/common/paths");
var PathLabelProvider = (function () {
    function PathLabelProvider(arg1) {
        this.root = arg1 && getPath(arg1);
    }
    PathLabelProvider.prototype.getLabel = function (arg1) {
        return getPathLabel(getPath(arg1), this.root);
    };
    return PathLabelProvider;
}());
exports.PathLabelProvider = PathLabelProvider;
function getPathLabel(resource, basePathProvider) {
    var absolutePath = getPath(resource);
    if (!absolutePath) {
        return null;
    }
    var basepath = basePathProvider && getPath(basePathProvider);
    if (basepath && paths.isEqualOrParent(absolutePath, basepath)) {
        if (basepath === absolutePath) {
            return ''; // no label if pathes are identical
        }
        return paths.normalize(strings.ltrim(absolutePath.substr(basepath.length), paths.nativeSep), true);
    }
    if (platform.isWindows && absolutePath && absolutePath[1] === ':') {
        return paths.normalize(absolutePath.charAt(0).toUpperCase() + absolutePath.slice(1), true); // convert c:\something => C:\something
    }
    return paths.normalize(absolutePath, true);
}
exports.getPathLabel = getPathLabel;
function getPath(arg1) {
    if (!arg1) {
        return null;
    }
    if (typeof arg1 === 'string') {
        return arg1;
    }
    if (types.isFunction(arg1.getWorkspace)) {
        var ws = arg1.getWorkspace();
        return ws ? ws.resource.fsPath : void 0;
    }
    return arg1.fsPath;
}
