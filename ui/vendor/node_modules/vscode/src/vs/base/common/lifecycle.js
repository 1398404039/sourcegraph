/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var types_1 = require("./types");
exports.empty = Object.freeze({
    dispose: function () { }
});
function dispose() {
    var disposables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        disposables[_i] = arguments[_i];
    }
    var first = disposables[0];
    if (types_1.isArray(first)) {
        disposables = first;
    }
    disposables.forEach(function (d) { return d && d.dispose(); });
    return [];
}
exports.dispose = dispose;
function combinedDisposable(disposables) {
    return { dispose: function () { return dispose(disposables); } };
}
exports.combinedDisposable = combinedDisposable;
function toDisposable() {
    var fns = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        fns[_i] = arguments[_i];
    }
    return combinedDisposable(fns.map(function (fn) { return ({ dispose: fn }); }));
}
exports.toDisposable = toDisposable;
var Disposable = (function () {
    function Disposable() {
        this._toDispose = [];
    }
    Disposable.prototype.dispose = function () {
        this._toDispose = dispose(this._toDispose);
    };
    Disposable.prototype._register = function (t) {
        this._toDispose.push(t);
        return t;
    };
    return Disposable;
}());
exports.Disposable = Disposable;
var Disposables = (function (_super) {
    __extends(Disposables, _super);
    function Disposables() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Disposables.prototype.add = function (arg) {
        if (!Array.isArray(arg)) {
            return this._register(arg);
        }
        else {
            for (var _i = 0, arg_1 = arg; _i < arg_1.length; _i++) {
                var element = arg_1[_i];
                return this._register(element);
            }
        }
    };
    return Disposables;
}(Disposable));
exports.Disposables = Disposables;
var ReferenceCollection = (function () {
    function ReferenceCollection() {
        this.references = Object.create(null);
    }
    ReferenceCollection.prototype.acquire = function (key) {
        var _this = this;
        var reference = this.references[key];
        if (!reference) {
            reference = this.references[key] = { counter: 0, object: this.createReferencedObject(key) };
        }
        var object = reference.object;
        var dispose = function () {
            if (--reference.counter === 0) {
                _this.destroyReferencedObject(reference.object);
                delete _this.references[key];
            }
        };
        reference.counter++;
        return { object: object, dispose: dispose };
    };
    return ReferenceCollection;
}());
exports.ReferenceCollection = ReferenceCollection;
var ImmortalReference = (function () {
    function ImmortalReference(object) {
        this.object = object;
    }
    ImmortalReference.prototype.dispose = function () { };
    return ImmortalReference;
}());
exports.ImmortalReference = ImmortalReference;
