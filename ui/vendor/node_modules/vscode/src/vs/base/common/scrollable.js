/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var lifecycle_1 = require("vs/base/common/lifecycle");
var event_1 = require("vs/base/common/event");
var ScrollbarVisibility;
(function (ScrollbarVisibility) {
    ScrollbarVisibility[ScrollbarVisibility["Auto"] = 1] = "Auto";
    ScrollbarVisibility[ScrollbarVisibility["Hidden"] = 2] = "Hidden";
    ScrollbarVisibility[ScrollbarVisibility["Visible"] = 3] = "Visible";
})(ScrollbarVisibility = exports.ScrollbarVisibility || (exports.ScrollbarVisibility = {}));
var Scrollable = (function (_super) {
    __extends(Scrollable, _super);
    function Scrollable() {
        var _this = _super.call(this) || this;
        _this._onScroll = _this._register(new event_1.Emitter());
        _this.onScroll = _this._onScroll.event;
        _this._width = 0;
        _this._scrollWidth = 0;
        _this._scrollLeft = 0;
        _this._height = 0;
        _this._scrollHeight = 0;
        _this._scrollTop = 0;
        return _this;
    }
    Scrollable.prototype.getWidth = function () {
        return this._width;
    };
    Scrollable.prototype.getScrollWidth = function () {
        return this._scrollWidth;
    };
    Scrollable.prototype.getScrollLeft = function () {
        return this._scrollLeft;
    };
    Scrollable.prototype.getHeight = function () {
        return this._height;
    };
    Scrollable.prototype.getScrollHeight = function () {
        return this._scrollHeight;
    };
    Scrollable.prototype.getScrollTop = function () {
        return this._scrollTop;
    };
    Scrollable.prototype.updateState = function (newState) {
        var width = (typeof newState.width !== 'undefined' ? newState.width | 0 : this._width);
        var scrollWidth = (typeof newState.scrollWidth !== 'undefined' ? newState.scrollWidth | 0 : this._scrollWidth);
        var scrollLeft = (typeof newState.scrollLeft !== 'undefined' ? newState.scrollLeft | 0 : this._scrollLeft);
        var height = (typeof newState.height !== 'undefined' ? newState.height | 0 : this._height);
        var scrollHeight = (typeof newState.scrollHeight !== 'undefined' ? newState.scrollHeight | 0 : this._scrollHeight);
        var scrollTop = (typeof newState.scrollTop !== 'undefined' ? newState.scrollTop | 0 : this._scrollTop);
        if (width < 0) {
            width = 0;
        }
        if (scrollLeft + width > scrollWidth) {
            scrollLeft = scrollWidth - width;
        }
        if (scrollLeft < 0) {
            scrollLeft = 0;
        }
        if (height < 0) {
            height = 0;
        }
        if (scrollTop + height > scrollHeight) {
            scrollTop = scrollHeight - height;
        }
        if (scrollTop < 0) {
            scrollTop = 0;
        }
        var widthChanged = (this._width !== width);
        var scrollWidthChanged = (this._scrollWidth !== scrollWidth);
        var scrollLeftChanged = (this._scrollLeft !== scrollLeft);
        var heightChanged = (this._height !== height);
        var scrollHeightChanged = (this._scrollHeight !== scrollHeight);
        var scrollTopChanged = (this._scrollTop !== scrollTop);
        if (!widthChanged && !scrollWidthChanged && !scrollLeftChanged && !heightChanged && !scrollHeightChanged && !scrollTopChanged) {
            return;
        }
        this._width = width;
        this._scrollWidth = scrollWidth;
        this._scrollLeft = scrollLeft;
        this._height = height;
        this._scrollHeight = scrollHeight;
        this._scrollTop = scrollTop;
        this._onScroll.fire({
            width: this._width,
            scrollWidth: this._scrollWidth,
            scrollLeft: this._scrollLeft,
            height: this._height,
            scrollHeight: this._scrollHeight,
            scrollTop: this._scrollTop,
            widthChanged: widthChanged,
            scrollWidthChanged: scrollWidthChanged,
            scrollLeftChanged: scrollLeftChanged,
            heightChanged: heightChanged,
            scrollHeightChanged: scrollHeightChanged,
            scrollTopChanged: scrollTopChanged,
        });
    };
    return Scrollable;
}(lifecycle_1.Disposable));
exports.Scrollable = Scrollable;
