/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var lifecycle_1 = require("vs/base/common/lifecycle");
var event_1 = require("vs/base/common/event");
var ScrollbarVisibility;
(function (ScrollbarVisibility) {
    ScrollbarVisibility[ScrollbarVisibility["Auto"] = 1] = "Auto";
    ScrollbarVisibility[ScrollbarVisibility["Hidden"] = 2] = "Hidden";
    ScrollbarVisibility[ScrollbarVisibility["Visible"] = 3] = "Visible";
})(ScrollbarVisibility = exports.ScrollbarVisibility || (exports.ScrollbarVisibility = {}));
var ScrollState = (function () {
    function ScrollState(width, scrollWidth, scrollLeft, height, scrollHeight, scrollTop) {
        width = width | 0;
        scrollWidth = scrollWidth | 0;
        scrollLeft = scrollLeft | 0;
        height = height | 0;
        scrollHeight = scrollHeight | 0;
        scrollTop = scrollTop | 0;
        if (width < 0) {
            width = 0;
        }
        if (scrollLeft + width > scrollWidth) {
            scrollLeft = scrollWidth - width;
        }
        if (scrollLeft < 0) {
            scrollLeft = 0;
        }
        if (height < 0) {
            height = 0;
        }
        if (scrollTop + height > scrollHeight) {
            scrollTop = scrollHeight - height;
        }
        if (scrollTop < 0) {
            scrollTop = 0;
        }
        this.width = width;
        this.scrollWidth = scrollWidth;
        this.scrollLeft = scrollLeft;
        this.height = height;
        this.scrollHeight = scrollHeight;
        this.scrollTop = scrollTop;
    }
    ScrollState.prototype.equals = function (other) {
        return (this.width === other.width
            && this.scrollWidth === other.scrollWidth
            && this.scrollLeft === other.scrollLeft
            && this.height === other.height
            && this.scrollHeight === other.scrollHeight
            && this.scrollTop === other.scrollTop);
    };
    ScrollState.prototype.createScrollEvent = function (previous) {
        var widthChanged = (this.width !== previous.width);
        var scrollWidthChanged = (this.scrollWidth !== previous.scrollWidth);
        var scrollLeftChanged = (this.scrollLeft !== previous.scrollLeft);
        var heightChanged = (this.height !== previous.height);
        var scrollHeightChanged = (this.scrollHeight !== previous.scrollHeight);
        var scrollTopChanged = (this.scrollTop !== previous.scrollTop);
        return {
            width: this.width,
            scrollWidth: this.scrollWidth,
            scrollLeft: this.scrollLeft,
            height: this.height,
            scrollHeight: this.scrollHeight,
            scrollTop: this.scrollTop,
            widthChanged: widthChanged,
            scrollWidthChanged: scrollWidthChanged,
            scrollLeftChanged: scrollLeftChanged,
            heightChanged: heightChanged,
            scrollHeightChanged: scrollHeightChanged,
            scrollTopChanged: scrollTopChanged,
        };
    };
    return ScrollState;
}());
exports.ScrollState = ScrollState;
var Scrollable = (function (_super) {
    __extends(Scrollable, _super);
    function Scrollable() {
        var _this = _super.call(this) || this;
        _this._onScroll = _this._register(new event_1.Emitter());
        _this.onScroll = _this._onScroll.event;
        _this._state = new ScrollState(0, 0, 0, 0, 0, 0);
        return _this;
    }
    Scrollable.prototype.getState = function () {
        return this._state;
    };
    Scrollable.prototype.updateState = function (update) {
        var oldState = this._state;
        var newState = new ScrollState((typeof update.width !== 'undefined' ? update.width : oldState.width), (typeof update.scrollWidth !== 'undefined' ? update.scrollWidth : oldState.scrollWidth), (typeof update.scrollLeft !== 'undefined' ? update.scrollLeft : oldState.scrollLeft), (typeof update.height !== 'undefined' ? update.height : oldState.height), (typeof update.scrollHeight !== 'undefined' ? update.scrollHeight : oldState.scrollHeight), (typeof update.scrollTop !== 'undefined' ? update.scrollTop : oldState.scrollTop));
        if (oldState.equals(newState)) {
            // no change
            return;
        }
        this._state = newState;
        this._onScroll.fire(this._state.createScrollEvent(oldState));
    };
    return Scrollable;
}(lifecycle_1.Disposable));
exports.Scrollable = Scrollable;
