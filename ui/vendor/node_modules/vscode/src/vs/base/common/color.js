/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
var RGBA = (function () {
    function RGBA(r, g, b, a) {
        this.r = RGBA._clampInt_0_255(r);
        this.g = RGBA._clampInt_0_255(g);
        this.b = RGBA._clampInt_0_255(b);
        this.a = RGBA._clampInt_0_255(a);
    }
    RGBA.equals = function (a, b) {
        return (a.r === b.r
            && a.g === b.g
            && a.b === b.b
            && a.a === b.a);
    };
    RGBA._clampInt_0_255 = function (c) {
        if (c < 0) {
            return 0;
        }
        if (c > 255) {
            return 255;
        }
        return c | 0;
    };
    return RGBA;
}());
exports.RGBA = RGBA;
/**
 * http://en.wikipedia.org/wiki/HSL_color_space
 */
var HSLA = (function () {
    function HSLA(h, s, l, a) {
        this.h = HSLA._clampFloat_0_360(h);
        this.s = HSLA._clampFloat_0_1(s);
        this.l = HSLA._clampFloat_0_1(l);
        this.a = HSLA._clampFloat_0_1(a);
    }
    HSLA._clampFloat_0_360 = function (hue) {
        if (hue < 0) {
            return 0.0;
        }
        if (hue > 360) {
            return 360.0;
        }
        return hue;
    };
    HSLA._clampFloat_0_1 = function (n) {
        if (n < 0) {
            return 0.0;
        }
        if (n > 1) {
            return 1.0;
        }
        return n;
    };
    return HSLA;
}());
exports.HSLA = HSLA;
/**
 * Converts an Hex color value to RGB.
 * returns r, g, and b are contained in the set [0, 255]
 * @param hex string (#RRGGBB or #RRGGBBAA).
 */
function hex2rgba(hex) {
    if (!hex) {
        // Invalid color
        return new RGBA(255, 0, 0, 255);
    }
    if (hex.length === 7 && hex.charCodeAt(0) === 35 /* Hash */) {
        // #RRGGBB format
        var r = 16 * _parseHexDigit(hex.charCodeAt(1)) + _parseHexDigit(hex.charCodeAt(2));
        var g = 16 * _parseHexDigit(hex.charCodeAt(3)) + _parseHexDigit(hex.charCodeAt(4));
        var b = 16 * _parseHexDigit(hex.charCodeAt(5)) + _parseHexDigit(hex.charCodeAt(6));
        return new RGBA(r, g, b, 255);
    }
    if (hex.length === 9 && hex.charCodeAt(0) === 35 /* Hash */) {
        // #RRGGBBAA format
        var r = 16 * _parseHexDigit(hex.charCodeAt(1)) + _parseHexDigit(hex.charCodeAt(2));
        var g = 16 * _parseHexDigit(hex.charCodeAt(3)) + _parseHexDigit(hex.charCodeAt(4));
        var b = 16 * _parseHexDigit(hex.charCodeAt(5)) + _parseHexDigit(hex.charCodeAt(6));
        var a = 16 * _parseHexDigit(hex.charCodeAt(7)) + _parseHexDigit(hex.charCodeAt(8));
        return new RGBA(r, g, b, a);
    }
    // Invalid color
    return new RGBA(255, 0, 0, 255);
}
function isValidHexColor(hex) {
    return /^#[0-9a-f]{6}([0-9a-f]{2})?$/i.test(hex);
}
exports.isValidHexColor = isValidHexColor;
function _parseHexDigit(charCode) {
    switch (charCode) {
        case 48 /* Digit0 */: return 0;
        case 49 /* Digit1 */: return 1;
        case 50 /* Digit2 */: return 2;
        case 51 /* Digit3 */: return 3;
        case 52 /* Digit4 */: return 4;
        case 53 /* Digit5 */: return 5;
        case 54 /* Digit6 */: return 6;
        case 55 /* Digit7 */: return 7;
        case 56 /* Digit8 */: return 8;
        case 57 /* Digit9 */: return 9;
        case 97 /* a */: return 10;
        case 65 /* A */: return 10;
        case 98 /* b */: return 11;
        case 66 /* B */: return 11;
        case 99 /* c */: return 12;
        case 67 /* C */: return 12;
        case 100 /* d */: return 13;
        case 68 /* D */: return 13;
        case 101 /* e */: return 14;
        case 69 /* E */: return 14;
        case 102 /* f */: return 15;
        case 70 /* F */: return 15;
    }
    return 0;
}
/**
 * Converts an RGB color value to HSL. Conversion formula
 * adapted from http://en.wikipedia.org/wiki/HSL_color_space.
 * Assumes r, g, and b are contained in the set [0, 255] and
 * returns h in the set [0, 360], s, and l in the set [0, 1].
 */
function rgba2hsla(rgba) {
    var r = rgba.r / 255;
    var g = rgba.g / 255;
    var b = rgba.b / 255;
    var a = rgba.a / 255;
    var max = Math.max(r, g, b);
    var min = Math.min(r, g, b);
    var h = 0;
    var s = 0;
    var l = Math.round(((min + max) / 2) * 1000) / 1000;
    var chroma = max - min;
    if (chroma > 0) {
        s = Math.min(Math.round((l <= 0.5 ? chroma / (2 * l) : chroma / (2 - (2 * l))) * 1000) / 1000, 1);
        switch (max) {
            case r:
                h = (g - b) / chroma + (g < b ? 6 : 0);
                break;
            case g:
                h = (b - r) / chroma + 2;
                break;
            case b:
                h = (r - g) / chroma + 4;
                break;
        }
        h *= 60;
        h = Math.round(h);
    }
    return new HSLA(h, s, l, a);
}
/**
 * Converts an HSL color value to RGB. Conversion formula
 * adapted from http://en.wikipedia.org/wiki/HSL_color_space.
 * Assumes h in the set [0, 360] s, and l are contained in the set [0, 1] and
 * returns r, g, and b in the set [0, 255].
 */
function hsla2rgba(hsla) {
    var h = hsla.h / 360;
    var s = Math.min(hsla.s, 1);
    var l = Math.min(hsla.l, 1);
    var a = hsla.a;
    var r, g, b;
    if (s === 0) {
        r = g = b = l; // achromatic
    }
    else {
        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
        var p = 2 * l - q;
        r = _hue2rgb(p, q, h + 1 / 3);
        g = _hue2rgb(p, q, h);
        b = _hue2rgb(p, q, h - 1 / 3);
    }
    return new RGBA(Math.round(r * 255), Math.round(g * 255), Math.round(b * 255), Math.round(a * 255));
}
function _hue2rgb(p, q, t) {
    if (t < 0) {
        t += 1;
    }
    if (t > 1) {
        t -= 1;
    }
    if (t < 1 / 6) {
        return p + (q - p) * 6 * t;
    }
    if (t < 1 / 2) {
        return q;
    }
    if (t < 2 / 3) {
        return p + (q - p) * (2 / 3 - t) * 6;
    }
    return p;
}
var Color = (function () {
    function Color(arg) {
        if (arg instanceof RGBA) {
            this.rgba = arg;
        }
        else {
            this.rgba = hex2rgba(arg);
        }
    }
    Color.fromRGBA = function (rgba) {
        return new Color(rgba);
    };
    /**
     * Creates a color from a hex string (#RRGGBB or #RRGGBBAA).
     */
    Color.fromHex = function (hex) {
        return new Color(hex);
    };
    Color.fromHSLA = function (hsla) {
        return new Color(hsla2rgba(hsla));
    };
    Color.prototype.equals = function (other) {
        if (!other) {
            return false;
        }
        return RGBA.equals(this.rgba, other.rgba);
    };
    /**
     * http://www.w3.org/TR/WCAG20/#relativeluminancedef
     * Returns the number in the set [0, 1]. O => Darkest Black. 1 => Lightest white.
     */
    Color.prototype.getLuminosity = function () {
        var R = Color._luminosityFor(this.rgba.r);
        var G = Color._luminosityFor(this.rgba.g);
        var B = Color._luminosityFor(this.rgba.b);
        var luminosity = 0.2126 * R + 0.7152 * G + 0.0722 * B;
        return Math.round(luminosity * 10000) / 10000;
    };
    Color._luminosityFor = function (color) {
        var c = color / 255;
        return (c <= 0.03928) ? c / 12.92 : Math.pow(((c + 0.055) / 1.055), 2.4);
    };
    /**
     * http://www.w3.org/TR/WCAG20/#contrast-ratiodef
     * Returns the contrast ration number in the set [1, 21].
     */
    Color.prototype.getContrast = function (another) {
        var lum1 = this.getLuminosity();
        var lum2 = another.getLuminosity();
        return lum1 > lum2 ? (lum1 + 0.05) / (lum2 + 0.05) : (lum2 + 0.05) / (lum1 + 0.05);
    };
    /**
     *	http://24ways.org/2010/calculating-color-contrast
     *  Return 'true' if darker color otherwise 'false'
     */
    Color.prototype.isDarker = function () {
        var yiq = (this.rgba.r * 299 + this.rgba.g * 587 + this.rgba.b * 114) / 1000;
        return yiq < 128;
    };
    /**
     *	http://24ways.org/2010/calculating-color-contrast
     *  Return 'true' if lighter color otherwise 'false'
     */
    Color.prototype.isLighter = function () {
        var yiq = (this.rgba.r * 299 + this.rgba.g * 587 + this.rgba.b * 114) / 1000;
        return yiq >= 128;
    };
    Color.prototype.isLighterThan = function (another) {
        var lum1 = this.getLuminosity();
        var lum2 = another.getLuminosity();
        return lum1 > lum2;
    };
    Color.prototype.isDarkerThan = function (another) {
        var lum1 = this.getLuminosity();
        var lum2 = another.getLuminosity();
        return lum1 < lum2;
    };
    Color.prototype.lighten = function (factor) {
        var hsl = this.toHSLA();
        var result = new HSLA(hsl.h, hsl.s, hsl.l + hsl.l * factor, hsl.a);
        return new Color(hsla2rgba(result));
    };
    Color.prototype.darken = function (factor) {
        var hsl = this.toHSLA();
        var result = new HSLA(hsl.h, hsl.s, hsl.l - hsl.l * factor, hsl.a);
        return new Color(hsla2rgba(result));
    };
    Color.prototype.transparent = function (factor) {
        var p = this.rgba;
        return new Color(new RGBA(p.r, p.g, p.b, Math.round(p.a * factor)));
    };
    Color.prototype.opposite = function () {
        return new Color(new RGBA(255 - this.rgba.r, 255 - this.rgba.g, 255 - this.rgba.b, this.rgba.a));
    };
    Color.prototype.toString = function () {
        var rgba = this.rgba;
        return "rgba(" + rgba.r + ", " + rgba.g + ", " + rgba.b + ", " + +(rgba.a / 255).toFixed(2) + ")";
    };
    /**
     * Prins the color as #RRGGBB
     */
    Color.prototype.toRGBHex = function () {
        var rgba = this.rgba;
        return "#" + Color._toTwoDigitHex(rgba.r) + Color._toTwoDigitHex(rgba.g) + Color._toTwoDigitHex(rgba.b);
    };
    /**
     * Prins the color as #RRGGBBAA
     * If 'compact' is set, colors without transparancy will be printed as #RRGGBB
     */
    Color.prototype.toRGBAHex = function (compact) {
        if (compact === void 0) { compact = false; }
        var rgba = this.rgba;
        if (compact && rgba.a === 0xFF) {
            return this.toRGBHex();
        }
        return "#" + Color._toTwoDigitHex(rgba.r) + Color._toTwoDigitHex(rgba.g) + Color._toTwoDigitHex(rgba.b) + Color._toTwoDigitHex(rgba.a);
    };
    Color._toTwoDigitHex = function (n) {
        var r = n.toString(16);
        if (r.length !== 2) {
            return '0' + r;
        }
        return r;
    };
    Color.prototype.toHSLA = function () {
        return rgba2hsla(this.rgba);
    };
    Color.prototype.toRGBA = function () {
        return this.rgba;
    };
    Color.getLighterColor = function (of, relative, factor) {
        if (of.isLighterThan(relative)) {
            return of;
        }
        factor = factor ? factor : 0.5;
        var lum1 = of.getLuminosity();
        var lum2 = relative.getLuminosity();
        factor = factor * (lum2 - lum1) / lum2;
        return of.lighten(factor);
    };
    Color.getDarkerColor = function (of, relative, factor) {
        if (of.isDarkerThan(relative)) {
            return of;
        }
        factor = factor ? factor : 0.5;
        var lum1 = of.getLuminosity();
        var lum2 = relative.getLuminosity();
        factor = factor * (lum1 - lum2) / lum1;
        return of.darken(factor);
    };
    return Color;
}());
exports.Color = Color;
