/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var event_1 = require("vs/base/common/event");
var editorCommon = require("vs/editor/common/editorCommon");
var editorService_1 = require("vs/workbench/services/editor/common/editorService");
var editor_1 = require("vs/workbench/common/editor");
var files_1 = require("vs/platform/files/common/files");
var RangeHighlightDecorations = (function () {
    function RangeHighlightDecorations(editorService) {
        this.editorService = editorService;
        this.rangeHighlightDecorationId = null;
        this.editor = null;
        this.editorDisposables = [];
        this._onHighlightRemoved = new event_1.Emitter();
        this.onHighlghtRemoved = this._onHighlightRemoved.event;
    }
    RangeHighlightDecorations.prototype.removeHighlightRange = function () {
        if (this.editor && this.editor.getModel() && this.rangeHighlightDecorationId) {
            this.editor.deltaDecorations([this.rangeHighlightDecorationId], []);
            this._onHighlightRemoved.fire();
        }
        this.rangeHighlightDecorationId = null;
    };
    RangeHighlightDecorations.prototype.highlightRange = function (range, editor) {
        editor = editor ? editor : this.getEditor(range);
        if (editor) {
            this.doHighlightRange(editor, range);
        }
    };
    RangeHighlightDecorations.prototype.doHighlightRange = function (editor, selectionRange) {
        var _this = this;
        this.removeHighlightRange();
        editor.changeDecorations(function (changeAccessor) {
            _this.rangeHighlightDecorationId = changeAccessor.addDecoration(selectionRange.range, _this.createRangeHighlightDecoration(selectionRange.isWholeLine));
        });
        this.setEditor(editor);
    };
    RangeHighlightDecorations.prototype.getEditor = function (resourceRange) {
        var fileResource = editor_1.toResource(this.editorService.getActiveEditorInput(), { filter: 'file' });
        if (fileResource) {
            if (files_1.isEqual(fileResource.fsPath, resourceRange.resource.fsPath)) {
                return this.editorService.getActiveEditor().getControl();
            }
        }
        return null;
    };
    RangeHighlightDecorations.prototype.setEditor = function (editor) {
        var _this = this;
        if (this.editor !== editor) {
            this.disposeEditorListeners();
            this.editor = editor;
            this.editorDisposables.push(this.editor.onDidChangeCursorPosition(function (e) {
                if (e.reason === editorCommon.CursorChangeReason.NotSet
                    || e.reason === editorCommon.CursorChangeReason.Explicit
                    || e.reason === editorCommon.CursorChangeReason.Undo
                    || e.reason === editorCommon.CursorChangeReason.Redo) {
                    _this.removeHighlightRange();
                }
            }));
            this.editorDisposables.push(this.editor.onDidChangeModel(function () { _this.removeHighlightRange(); }));
            this.editorDisposables.push(this.editor.onDidDispose(function () {
                _this.removeHighlightRange();
                _this.editor = null;
            }));
        }
    };
    RangeHighlightDecorations.prototype.disposeEditorListeners = function () {
        this.editorDisposables.forEach(function (disposable) { return disposable.dispose(); });
        this.editorDisposables = [];
    };
    RangeHighlightDecorations.prototype.createRangeHighlightDecoration = function (isWholeLine) {
        if (isWholeLine === void 0) { isWholeLine = true; }
        return {
            stickiness: editorCommon.TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges,
            className: 'rangeHighlight',
            isWholeLine: isWholeLine
        };
    };
    RangeHighlightDecorations.prototype.dispose = function () {
        if (this.editor && this.editor.getModel()) {
            this.removeHighlightRange();
            this.disposeEditorListeners();
            this.editor = null;
        }
    };
    return RangeHighlightDecorations;
}());
RangeHighlightDecorations = __decorate([
    __param(0, editorService_1.IWorkbenchEditorService)
], RangeHighlightDecorations);
exports.RangeHighlightDecorations = RangeHighlightDecorations;
