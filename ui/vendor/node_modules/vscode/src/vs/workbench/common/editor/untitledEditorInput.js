/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var winjs_base_1 = require("vs/base/common/winjs.base");
var mime_1 = require("vs/base/common/mime");
var labels = require("vs/base/common/labels");
var modesRegistry_1 = require("vs/editor/common/modes/modesRegistry");
var paths = require("vs/base/common/paths");
var editor_1 = require("vs/workbench/common/editor");
var untitledEditorModel_1 = require("vs/workbench/common/editor/untitledEditorModel");
var instantiation_1 = require("vs/platform/instantiation/common/instantiation");
var workspace_1 = require("vs/platform/workspace/common/workspace");
var lifecycle_1 = require("vs/base/common/lifecycle");
var event_1 = require("vs/base/common/event");
var textfiles_1 = require("vs/workbench/services/textfile/common/textfiles");
/**
 * An editor input to be used for untitled text buffers.
 */
var UntitledEditorInput = (function (_super) {
    __extends(UntitledEditorInput, _super);
    function UntitledEditorInput(resource, hasAssociatedFilePath, modeId, instantiationService, contextService, textFileService) {
        var _this = _super.call(this) || this;
        _this.instantiationService = instantiationService;
        _this.contextService = contextService;
        _this.textFileService = textFileService;
        _this.resource = resource;
        _this._hasAssociatedFilePath = hasAssociatedFilePath;
        _this.modeId = modeId;
        _this.toUnbind = [];
        _this._onDidModelChangeContent = new event_1.Emitter();
        _this._onDidModelChangeEncoding = new event_1.Emitter();
        return _this;
    }
    Object.defineProperty(UntitledEditorInput.prototype, "hasAssociatedFilePath", {
        get: function () {
            return this._hasAssociatedFilePath;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UntitledEditorInput.prototype, "onDidModelChangeContent", {
        get: function () {
            return this._onDidModelChangeContent.event;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UntitledEditorInput.prototype, "onDidModelChangeEncoding", {
        get: function () {
            return this._onDidModelChangeEncoding.event;
        },
        enumerable: true,
        configurable: true
    });
    UntitledEditorInput.prototype.getTypeId = function () {
        return UntitledEditorInput.ID;
    };
    UntitledEditorInput.prototype.getResource = function () {
        return this.resource;
    };
    UntitledEditorInput.prototype.getName = function () {
        return this.hasAssociatedFilePath ? paths.basename(this.resource.fsPath) : this.resource.fsPath;
    };
    UntitledEditorInput.prototype.getDescription = function () {
        return this.hasAssociatedFilePath ? labels.getPathLabel(paths.dirname(this.resource.fsPath), this.contextService) : null;
    };
    UntitledEditorInput.prototype.isDirty = function () {
        if (this.cachedModel) {
            return this.cachedModel.isDirty();
        }
        // A disposed input is never dirty, even if it was restored from backup
        if (this.isDisposed()) {
            return false;
        }
        // untitled files with an associated path or associated resource
        return this.hasAssociatedFilePath;
    };
    UntitledEditorInput.prototype.confirmSave = function () {
        return this.textFileService.confirmSave([this.resource]);
    };
    UntitledEditorInput.prototype.save = function () {
        return this.textFileService.save(this.resource);
    };
    UntitledEditorInput.prototype.revert = function () {
        if (this.cachedModel) {
            this.cachedModel.revert();
        }
        this.dispose(); // a reverted untitled editor is no longer valid, so we dispose it
        return winjs_base_1.TPromise.as(true);
    };
    UntitledEditorInput.prototype.suggestFileName = function () {
        if (!this.hasAssociatedFilePath) {
            if (this.cachedModel) {
                var modeId = this.cachedModel.getModeId();
                if (modeId !== modesRegistry_1.PLAINTEXT_MODE_ID) {
                    return mime_1.suggestFilename(modeId, this.getName());
                }
            }
        }
        return this.getName();
    };
    UntitledEditorInput.prototype.getEncoding = function () {
        if (this.cachedModel) {
            return this.cachedModel.getEncoding();
        }
        return null;
    };
    UntitledEditorInput.prototype.setEncoding = function (encoding, mode /* ignored, we only have Encode */) {
        if (this.cachedModel) {
            this.cachedModel.setEncoding(encoding);
        }
    };
    UntitledEditorInput.prototype.resolve = function (refresh) {
        // Join a model resolve if we have had one before
        if (this.modelResolve) {
            return this.modelResolve;
        }
        // Otherwise Create Model and load
        this.cachedModel = this.createModel();
        this.modelResolve = this.cachedModel.load();
        return this.modelResolve;
    };
    UntitledEditorInput.prototype.createModel = function () {
        var _this = this;
        var model = this.instantiationService.createInstance(untitledEditorModel_1.UntitledEditorModel, this.modeId, this.resource, this.hasAssociatedFilePath);
        // re-emit some events from the model
        this.toUnbind.push(model.onDidChangeContent(function () { return _this._onDidModelChangeContent.fire(); }));
        this.toUnbind.push(model.onDidChangeDirty(function () { return _this._onDidChangeDirty.fire(); }));
        this.toUnbind.push(model.onDidChangeEncoding(function () { return _this._onDidModelChangeEncoding.fire(); }));
        return model;
    };
    UntitledEditorInput.prototype.matches = function (otherInput) {
        if (_super.prototype.matches.call(this, otherInput) === true) {
            return true;
        }
        if (otherInput instanceof UntitledEditorInput) {
            var otherUntitledEditorInput = otherInput;
            // Otherwise compare by properties
            return otherUntitledEditorInput.resource.toString() === this.resource.toString();
        }
        return false;
    };
    UntitledEditorInput.prototype.dispose = function () {
        this._onDidModelChangeContent.dispose();
        this._onDidModelChangeEncoding.dispose();
        // Listeners
        lifecycle_1.dispose(this.toUnbind);
        // Model
        if (this.cachedModel) {
            this.cachedModel.dispose();
            this.cachedModel = null;
        }
        this.modelResolve = void 0;
        _super.prototype.dispose.call(this);
    };
    return UntitledEditorInput;
}(editor_1.UntitledEditorInput));
UntitledEditorInput.ID = 'workbench.editors.untitledEditorInput';
UntitledEditorInput.SCHEMA = 'untitled';
UntitledEditorInput = __decorate([
    __param(3, instantiation_1.IInstantiationService),
    __param(4, workspace_1.IWorkspaceContextService),
    __param(5, textfiles_1.ITextFileService)
], UntitledEditorInput);
exports.UntitledEditorInput = UntitledEditorInput;
