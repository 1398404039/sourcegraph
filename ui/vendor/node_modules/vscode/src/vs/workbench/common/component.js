/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var lifecycle_1 = require("vs/base/common/lifecycle");
var memento_1 = require("vs/workbench/common/memento");
var WorkbenchComponent = (function (_super) {
    __extends(WorkbenchComponent, _super);
    function WorkbenchComponent(id) {
        var _this = _super.call(this) || this;
        _this._toUnbind = [];
        _this.id = id;
        _this.componentMemento = new memento_1.Memento(_this.id);
        return _this;
    }
    Object.defineProperty(WorkbenchComponent.prototype, "toUnbind", {
        get: function () {
            return this._toUnbind;
        },
        enumerable: true,
        configurable: true
    });
    WorkbenchComponent.prototype.getId = function () {
        return this.id;
    };
    WorkbenchComponent.prototype.getMemento = function (storageService, scope) {
        if (scope === void 0) { scope = memento_1.Scope.GLOBAL; }
        return this.componentMemento.getMemento(storageService, scope);
    };
    WorkbenchComponent.prototype.saveMemento = function () {
        this.componentMemento.saveMemento();
    };
    WorkbenchComponent.prototype.shutdown = function () {
        // Save Memento
        this.saveMemento();
    };
    WorkbenchComponent.prototype.dispose = function () {
        this._toUnbind = lifecycle_1.dispose(this._toUnbind);
        _super.prototype.dispose.call(this);
    };
    return WorkbenchComponent;
}(lifecycle_1.Disposable));
exports.WorkbenchComponent = WorkbenchComponent;
