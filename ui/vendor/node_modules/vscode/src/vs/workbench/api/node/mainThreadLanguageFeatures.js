/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var threadService_1 = require("vs/workbench/services/thread/common/threadService");
var modes = require("vs/editor/common/modes");
var search_1 = require("vs/workbench/parts/search/common/search");
var async_1 = require("vs/base/common/async");
var extHost_protocol_1 = require("./extHost.protocol");
var languageConfigurationRegistry_1 = require("vs/editor/common/modes/languageConfigurationRegistry");
var mainThreadHeapService_1 = require("./mainThreadHeapService");
var mainThreadHandlerRegistry_1 = require("vs/workbench/api/node/mainThreadHandlerRegistry");
var MainThreadLanguageFeatures = (function (_super) {
    __extends(MainThreadLanguageFeatures, _super);
    function MainThreadLanguageFeatures(threadService, heapService) {
        var _this = _super.call(this) || this;
        _this._registrations = Object.create(null);
        /**
         * Maintains a collection of callbacks for ongoing requests.
         * Currently, provideReferences is the only call that saves a callback for reporting progress,
         * but other methods may use this to register callbacks as well.
         */
        _this._callbackRegistrations = new mainThreadHandlerRegistry_1.MainThreadHandlerRegistry();
        _this._proxy = threadService.get(extHost_protocol_1.ExtHostContext.ExtHostLanguageFeatures);
        _this._heapService = heapService;
        return _this;
    }
    MainThreadLanguageFeatures.prototype.$unregister = function (handle) {
        var registration = this._registrations[handle];
        if (registration) {
            registration.dispose();
            delete this._registrations[handle];
            this._callbackRegistrations.unregister(handle);
        }
        return undefined;
    };
    // --- outline
    MainThreadLanguageFeatures.prototype.$registerOutlineSupport = function (handle, selector, workspace) {
        var _this = this;
        this._registrations[handle] = modes.DocumentSymbolProviderRegistry.register(selector, {
            provideDocumentSymbols: function (model, token) {
                return async_1.wireCancellationToken(token, _this._proxy.$provideDocumentSymbols(handle, model.uri));
            }
        }, workspace);
        return undefined;
    };
    // --- code lens
    MainThreadLanguageFeatures.prototype.$registerCodeLensSupport = function (handle, selector, workspace) {
        var _this = this;
        this._registrations[handle] = modes.CodeLensProviderRegistry.register(selector, {
            provideCodeLenses: function (model, token) {
                return _this._heapService.trackRecursive(async_1.wireCancellationToken(token, _this._proxy.$provideCodeLenses(handle, model.uri)));
            },
            resolveCodeLens: function (model, codeLens, token) {
                return _this._heapService.trackRecursive(async_1.wireCancellationToken(token, _this._proxy.$resolveCodeLens(handle, model.uri, codeLens)));
            }
        }, workspace);
        return undefined;
    };
    // --- declaration
    MainThreadLanguageFeatures.prototype.$registerDeclaractionSupport = function (handle, selector, workspace) {
        var _this = this;
        this._registrations[handle] = modes.DefinitionProviderRegistry.register(selector, {
            provideDefinition: function (model, position, token) {
                return async_1.wireCancellationToken(token, _this._proxy.$provideDefinition(handle, model.uri, position));
            }
        }, workspace);
        return undefined;
    };
    // --- extra info
    MainThreadLanguageFeatures.prototype.$registerHoverProvider = function (handle, selector, workspace) {
        var _this = this;
        this._registrations[handle] = modes.HoverProviderRegistry.register(selector, {
            provideHover: function (model, position, token) {
                return async_1.wireCancellationToken(token, _this._proxy.$provideHover(handle, model.uri, position));
            }
        }, workspace);
        return undefined;
    };
    // --- occurrences
    MainThreadLanguageFeatures.prototype.$registerDocumentHighlightProvider = function (handle, selector, workspace) {
        var _this = this;
        this._registrations[handle] = modes.DocumentHighlightProviderRegistry.register(selector, {
            provideDocumentHighlights: function (model, position, token) {
                return async_1.wireCancellationToken(token, _this._proxy.$provideDocumentHighlights(handle, model.uri, position));
            }
        }, workspace);
        return undefined;
    };
    // --- references
    MainThreadLanguageFeatures.prototype.$registerReferenceSupport = function (handle, selector, workspace) {
        var _this = this;
        this._registrations[handle] = modes.ReferenceProviderRegistry.register(selector, {
            provideReferences: function (model, position, context, token, progress) {
                var progressHandle = _this._callbackRegistrations.registerChild(handle, progress);
                var refs = _this._proxy.$provideReferences(handle, progressHandle, model.uri, position, context);
                refs = async_1.always(refs, function () { return _this._callbackRegistrations.unregisterChild(handle, progressHandle); });
                return async_1.wireCancellationToken(token, refs);
            }
        }, workspace);
        return undefined;
    };
    MainThreadLanguageFeatures.prototype.$notifyProvideReferencesProgress = function (handle, progressHandle, locations) {
        var progressHandler = this._callbackRegistrations.getChild(handle, progressHandle);
        if (progressHandler) {
            progressHandler(locations);
        }
        return undefined;
    };
    // --- quick fix
    MainThreadLanguageFeatures.prototype.$registerQuickFixSupport = function (handle, selector, workspace) {
        var _this = this;
        this._registrations[handle] = modes.CodeActionProviderRegistry.register(selector, {
            provideCodeActions: function (model, range, token) {
                return _this._heapService.trackRecursive(async_1.wireCancellationToken(token, _this._proxy.$provideCodeActions(handle, model.uri, range)));
            }
        }, workspace);
        return undefined;
    };
    // --- formatting
    MainThreadLanguageFeatures.prototype.$registerDocumentFormattingSupport = function (handle, selector, workspace) {
        var _this = this;
        this._registrations[handle] = modes.DocumentFormattingEditProviderRegistry.register(selector, {
            provideDocumentFormattingEdits: function (model, options, token) {
                return async_1.wireCancellationToken(token, _this._proxy.$provideDocumentFormattingEdits(handle, model.uri, options));
            }
        }, workspace);
        return undefined;
    };
    MainThreadLanguageFeatures.prototype.$registerRangeFormattingSupport = function (handle, selector, workspace) {
        var _this = this;
        this._registrations[handle] = modes.DocumentRangeFormattingEditProviderRegistry.register(selector, {
            provideDocumentRangeFormattingEdits: function (model, range, options, token) {
                return async_1.wireCancellationToken(token, _this._proxy.$provideDocumentRangeFormattingEdits(handle, model.uri, range, options));
            }
        }, workspace);
        return undefined;
    };
    MainThreadLanguageFeatures.prototype.$registerOnTypeFormattingSupport = function (handle, selector, autoFormatTriggerCharacters, workspace) {
        var _this = this;
        this._registrations[handle] = modes.OnTypeFormattingEditProviderRegistry.register(selector, {
            autoFormatTriggerCharacters: autoFormatTriggerCharacters,
            provideOnTypeFormattingEdits: function (model, position, ch, options, token) {
                return async_1.wireCancellationToken(token, _this._proxy.$provideOnTypeFormattingEdits(handle, model.uri, position, ch, options));
            }
        }, workspace);
        return undefined;
    };
    // --- navigate type
    MainThreadLanguageFeatures.prototype.$registerNavigateTypeSupport = function (handle, workspace) {
        var _this = this;
        this._registrations[handle] = search_1.WorkspaceSymbolProviderRegistry.register({
            provideWorkspaceSymbols: function (search) {
                return _this._heapService.trackRecursive(_this._proxy.$provideWorkspaceSymbols(handle, search));
            },
            resolveWorkspaceSymbol: function (item) {
                return _this._proxy.$resolveWorkspaceSymbol(handle, item);
            }
        }, workspace);
        return undefined;
    };
    // --- rename
    MainThreadLanguageFeatures.prototype.$registerRenameSupport = function (handle, selector, workspace) {
        var _this = this;
        this._registrations[handle] = modes.RenameProviderRegistry.register(selector, {
            provideRenameEdits: function (model, position, newName, token) {
                return async_1.wireCancellationToken(token, _this._proxy.$provideRenameEdits(handle, model.uri, position, newName));
            }
        }, workspace);
        return undefined;
    };
    // --- suggest
    MainThreadLanguageFeatures.prototype.$registerSuggestSupport = function (handle, selector, triggerCharacters, workspace) {
        var _this = this;
        this._registrations[handle] = modes.SuggestRegistry.register(selector, {
            triggerCharacters: triggerCharacters,
            provideCompletionItems: function (model, position, token) {
                return _this._heapService.trackRecursive(async_1.wireCancellationToken(token, _this._proxy.$provideCompletionItems(handle, model.uri, position)));
            },
            resolveCompletionItem: function (model, position, suggestion, token) {
                return async_1.wireCancellationToken(token, _this._proxy.$resolveCompletionItem(handle, model.uri, position, suggestion));
            }
        }, workspace);
        return undefined;
    };
    // --- parameter hints
    MainThreadLanguageFeatures.prototype.$registerSignatureHelpProvider = function (handle, selector, triggerCharacter, workspace) {
        var _this = this;
        this._registrations[handle] = modes.SignatureHelpProviderRegistry.register(selector, {
            signatureHelpTriggerCharacters: triggerCharacter,
            provideSignatureHelp: function (model, position, token) {
                return async_1.wireCancellationToken(token, _this._proxy.$provideSignatureHelp(handle, model.uri, position));
            }
        }, workspace);
        return undefined;
    };
    // --- links
    MainThreadLanguageFeatures.prototype.$registerDocumentLinkProvider = function (handle, selector, workspace) {
        var _this = this;
        this._registrations[handle] = modes.LinkProviderRegistry.register(selector, {
            provideLinks: function (model, token) {
                return async_1.wireCancellationToken(token, _this._proxy.$provideDocumentLinks(handle, model.uri));
            },
            resolveLink: function (link, token) {
                return async_1.wireCancellationToken(token, _this._proxy.$resolveDocumentLink(handle, link));
            }
        }, workspace);
        return undefined;
    };
    // --- configuration
    MainThreadLanguageFeatures.prototype.$setLanguageConfiguration = function (handle, languageId, _configuration) {
        var configuration = {
            comments: _configuration.comments,
            brackets: _configuration.brackets,
            wordPattern: _configuration.wordPattern,
            indentationRules: _configuration.indentationRules,
            onEnterRules: _configuration.onEnterRules,
            autoClosingPairs: null,
            surroundingPairs: null,
            __electricCharacterSupport: null
        };
        if (_configuration.__characterPairSupport) {
            // backwards compatibility
            configuration.autoClosingPairs = _configuration.__characterPairSupport.autoClosingPairs;
        }
        if (_configuration.__electricCharacterSupport && _configuration.__electricCharacterSupport.docComment) {
            configuration.__electricCharacterSupport = {
                docComment: {
                    open: _configuration.__electricCharacterSupport.docComment.open,
                    close: _configuration.__electricCharacterSupport.docComment.close
                }
            };
        }
        this._registrations[handle] = languageConfigurationRegistry_1.LanguageConfigurationRegistry.register(languageId, configuration);
        return undefined;
    };
    return MainThreadLanguageFeatures;
}(extHost_protocol_1.MainThreadLanguageFeaturesShape));
MainThreadLanguageFeatures = __decorate([
    __param(0, threadService_1.IThreadService),
    __param(1, mainThreadHeapService_1.IHeapService)
], MainThreadLanguageFeatures);
exports.MainThreadLanguageFeatures = MainThreadLanguageFeatures;
