/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var progress_1 = require("vs/platform/progress/common/progress");
var winjs_base_1 = require("vs/base/common/winjs.base");
var extHost_protocol_1 = require("./extHost.protocol");
var MainThreadProgress = (function (_super) {
    __extends(MainThreadProgress, _super);
    function MainThreadProgress(progressService) {
        var _this = _super.call(this) || this;
        _this.progress = new Map();
        _this._progressService = progressService;
        return _this;
    }
    MainThreadProgress.prototype.$startWindow = function (handle, title) {
        var task = this._createTask(handle);
        this._progressService.withWindowProgress(title, task);
    };
    MainThreadProgress.prototype.$startScm = function (handle) {
        var task = this._createTask(handle);
        this._progressService.withViewletProgress('workbench.view.scm', task);
    };
    MainThreadProgress.prototype._createTask = function (handle) {
        var _this = this;
        return function (progress) {
            return new winjs_base_1.TPromise(function (resolve) {
                _this.progress.set(handle, { resolve: resolve, progress: progress });
            });
        };
    };
    MainThreadProgress.prototype.$progressReport = function (handle, message) {
        this.progress.get(handle).progress.report(message);
    };
    MainThreadProgress.prototype.$progressEnd = function (handle) {
        this.progress.get(handle).resolve();
        this.progress.delete(handle);
    };
    return MainThreadProgress;
}(extHost_protocol_1.MainThreadProgressShape));
MainThreadProgress = __decorate([
    __param(0, progress_1.IProgressService2)
], MainThreadProgress);
exports.MainThreadProgress = MainThreadProgress;
