/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var event_1 = require("vs/base/common/event");
var extHostTypes_1 = require("./extHostTypes");
var TypeConverters = require("./extHostTypeConverters");
var extHostTextEditor_1 = require("./extHostTextEditor");
var extHost_protocol_1 = require("./extHost.protocol");
var ExtHostEditors = (function (_super) {
    __extends(ExtHostEditors, _super);
    function ExtHostEditors(threadService, extHostDocumentsAndEditors) {
        var _this = _super.call(this) || this;
        _this._onDidChangeTextEditorSelection = new event_1.Emitter();
        _this._onDidChangeTextEditorOptions = new event_1.Emitter();
        _this._onDidChangeTextEditorViewColumn = new event_1.Emitter();
        _this._onDidChangeActiveTextEditor = new event_1.Emitter();
        _this._onDidChangeVisibleTextEditors = new event_1.Emitter();
        _this.onDidChangeTextEditorSelection = _this._onDidChangeTextEditorSelection.event;
        _this.onDidChangeTextEditorOptions = _this._onDidChangeTextEditorOptions.event;
        _this.onDidChangeTextEditorViewColumn = _this._onDidChangeTextEditorViewColumn.event;
        _this.onDidChangeActiveTextEditor = _this._onDidChangeActiveTextEditor.event;
        _this.onDidChangeVisibleTextEditors = _this._onDidChangeVisibleTextEditors.event;
        _this._proxy = threadService.get(extHost_protocol_1.MainContext.MainThreadEditors);
        _this._extHostDocumentsAndEditors = extHostDocumentsAndEditors;
        _this._extHostDocumentsAndEditors.onDidChangeVisibleTextEditors(function (e) { return _this._onDidChangeVisibleTextEditors.fire(e); });
        _this._extHostDocumentsAndEditors.onDidChangeActiveTextEditor(function (e) { return _this._onDidChangeActiveTextEditor.fire(e); });
        return _this;
    }
    ExtHostEditors.prototype.getActiveTextEditor = function () {
        return this._extHostDocumentsAndEditors.activeEditor();
    };
    ExtHostEditors.prototype.getVisibleTextEditors = function () {
        return this._extHostDocumentsAndEditors.allEditors();
    };
    ExtHostEditors.prototype.showTextDocument = function (document, column, preserveFocus) {
        var _this = this;
        return this._proxy.$tryShowTextDocument(document.uri, TypeConverters.fromViewColumn(column), preserveFocus).then(function (id) {
            var editor = _this._extHostDocumentsAndEditors.getEditor(id);
            if (editor) {
                return editor;
            }
            else {
                throw new Error("Failed to show text document " + document.uri.toString() + ", should show in editor #" + id);
            }
        });
    };
    ExtHostEditors.prototype.createTextEditorDecorationType = function (options) {
        return new extHostTextEditor_1.TextEditorDecorationType(this._proxy, options);
    };
    // --- called from main thread
    ExtHostEditors.prototype.$acceptOptionsChanged = function (id, opts) {
        var editor = this._extHostDocumentsAndEditors.getEditor(id);
        editor._acceptOptions(opts);
        this._onDidChangeTextEditorOptions.fire({
            textEditor: editor,
            options: opts
        });
    };
    ExtHostEditors.prototype.$acceptSelectionsChanged = function (id, event) {
        var kind = extHostTypes_1.TextEditorSelectionChangeKind.fromValue(event.source);
        var selections = event.selections.map(TypeConverters.toSelection);
        var textEditor = this._extHostDocumentsAndEditors.getEditor(id);
        textEditor._acceptSelections(selections);
        this._onDidChangeTextEditorSelection.fire({
            textEditor: textEditor,
            selections: selections,
            kind: kind
        });
    };
    ExtHostEditors.prototype.$acceptEditorPositionData = function (data) {
        for (var id in data) {
            var textEditor = this._extHostDocumentsAndEditors.getEditor(id);
            var viewColumn = TypeConverters.toViewColumn(data[id]);
            if (textEditor.viewColumn !== viewColumn) {
                textEditor._acceptViewColumn(viewColumn);
                this._onDidChangeTextEditorViewColumn.fire({ textEditor: textEditor, viewColumn: viewColumn });
            }
        }
    };
    return ExtHostEditors;
}(extHost_protocol_1.ExtHostEditorsShape));
exports.ExtHostEditors = ExtHostEditors;
