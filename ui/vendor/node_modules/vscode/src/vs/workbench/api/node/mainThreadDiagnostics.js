/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var markers_1 = require("vs/platform/markers/common/markers");
var extHost_protocol_1 = require("./extHost.protocol");
var MainThreadDiagnostics = (function (_super) {
    __extends(MainThreadDiagnostics, _super);
    function MainThreadDiagnostics(markerService) {
        var _this = _super.call(this) || this;
        _this._markerService = markerService;
        return _this;
    }
    MainThreadDiagnostics.prototype.$changeMany = function (owner, entries) {
        for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {
            var entry = entries_1[_i];
            var uri = entry[0], markers = entry[1];
            this._markerService.changeOne(owner, uri, markers);
        }
        return undefined;
    };
    MainThreadDiagnostics.prototype.$clear = function (owner) {
        this._markerService.changeAll(owner, undefined);
        return undefined;
    };
    return MainThreadDiagnostics;
}(extHost_protocol_1.MainThreadDiagnosticsShape));
MainThreadDiagnostics = __decorate([
    __param(0, markers_1.IMarkerService)
], MainThreadDiagnostics);
exports.MainThreadDiagnostics = MainThreadDiagnostics;
