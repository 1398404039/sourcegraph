/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var threadService_1 = require("vs/workbench/services/thread/common/threadService");
var commands_1 = require("vs/platform/commands/common/commands");
var winjs_base_1 = require("vs/base/common/winjs.base");
var extHost_protocol_1 = require("./extHost.protocol");
var MainThreadCommands = (function (_super) {
    __extends(MainThreadCommands, _super);
    function MainThreadCommands(_threadService, _commandService) {
        var _this = _super.call(this) || this;
        _this._threadService = _threadService;
        _this._commandService = _commandService;
        _this._disposables = Object.create(null);
        _this._proxy = _this._threadService.get(extHost_protocol_1.ExtHostContext.ExtHostCommands);
        return _this;
    }
    MainThreadCommands.prototype.dispose = function () {
        for (var id in this._disposables) {
            this._disposables[id].dispose();
        }
    };
    MainThreadCommands.prototype.$registerCommand = function (id) {
        var _this = this;
        this._disposables[id] = commands_1.CommandsRegistry.registerCommand(id, function (accessor) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            return (_a = _this._proxy).$executeContributedCommand.apply(_a, [id].concat(args));
            var _a;
        });
        return undefined;
    };
    MainThreadCommands.prototype.$unregisterCommand = function (id) {
        if (this._disposables[id]) {
            this._disposables[id].dispose();
            delete this._disposables[id];
        }
        return undefined;
    };
    MainThreadCommands.prototype.$executeCommand = function (id, args) {
        return (_a = this._commandService).executeCommand.apply(_a, [id].concat(args));
        var _a;
    };
    MainThreadCommands.prototype.$getCommands = function () {
        return winjs_base_1.TPromise.as(Object.keys(commands_1.CommandsRegistry.getCommands()));
    };
    return MainThreadCommands;
}(extHost_protocol_1.MainThreadCommandsShape));
MainThreadCommands = __decorate([
    __param(0, threadService_1.IThreadService),
    __param(1, commands_1.ICommandService)
], MainThreadCommands);
exports.MainThreadCommands = MainThreadCommands;
// --- command doc
commands_1.CommandsRegistry.registerCommand('_generateCommandsDocumentation', function (accessor) {
    return accessor.get(threadService_1.IThreadService).get(extHost_protocol_1.ExtHostContext.ExtHostCommands).$getContributedCommandHandlerDescriptions().then(function (result) {
        // add local commands
        var commands = commands_1.CommandsRegistry.getCommands();
        for (var id in commands) {
            var description = commands[id].description;
            if (description) {
                result[id] = description;
            }
        }
        // print all as markdown
        var all = [];
        for (var id in result) {
            all.push('`' + id + '` - ' + _generateMarkdown(result[id]));
        }
        console.log(all.join('\n'));
    });
});
function _generateMarkdown(description) {
    if (typeof description === 'string') {
        return description;
    }
    else {
        var parts = [description.description];
        parts.push('\n\n');
        if (description.args) {
            for (var _i = 0, _a = description.args; _i < _a.length; _i++) {
                var arg = _a[_i];
                parts.push("* _" + arg.name + "_ " + (arg.description || '') + "\n");
            }
        }
        if (description.returns) {
            parts.push("* _(returns)_ " + description.returns);
        }
        parts.push('\n\n');
        return parts.join('');
    }
}
