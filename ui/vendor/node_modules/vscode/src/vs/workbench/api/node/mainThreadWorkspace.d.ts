import URI from 'vs/base/common/uri';
import { ISearchService } from 'vs/platform/search/common/search';
import { IWorkspaceContextService, IWorkspaceRevState } from 'vs/platform/workspace/common/workspace';
import { IThreadService } from 'vs/workbench/services/thread/common/threadService';
import { IWorkbenchEditorService } from 'vs/workbench/services/editor/common/editorService';
import { ITextFileService } from 'vs/workbench/services/textfile/common/textfiles';
import { IResourceEdit } from 'vs/editor/common/services/bulkEdit';
import { TPromise } from 'vs/base/common/winjs.base';
import { Uri } from 'vscode';
import { MainThreadWorkspaceShape } from './extHost.protocol';
import { ITextModelResolverService } from 'vs/editor/common/services/resolverService';
import { IFileService } from 'vs/platform/files/common/files';
export declare class MainThreadWorkspace extends MainThreadWorkspaceShape {
    private _activeSearches;
    private _searchService;
    private _contextService;
    private _textFileService;
    private _editorService;
    private _textModelResolverService;
    private _fileService;
    private _proxy;
    constructor(searchService: ISearchService, contextService: IWorkspaceContextService, threadService: IThreadService, textFileService: ITextFileService, editorService: IWorkbenchEditorService, textModelResolverService: ITextModelResolverService, fileService: IFileService);
    $startSearch(include: string, exclude: string, maxResults: number, requestId: number): Thenable<Uri[]>;
    $cancelSearch(requestId: number): Thenable<boolean>;
    $saveAll(includeUntitled?: boolean): Thenable<boolean>;
    $applyWorkspaceEdit(edits: IResourceEdit[]): TPromise<boolean>;
    $setWorkspace(resource: URI, state?: IWorkspaceRevState): TPromise<void>;
    $setWorkspaceState(state?: IWorkspaceRevState): TPromise<void>;
}
