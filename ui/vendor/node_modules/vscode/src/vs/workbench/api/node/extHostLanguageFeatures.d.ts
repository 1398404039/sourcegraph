import URI from 'vs/base/common/uri';
import { TPromise } from 'vs/base/common/winjs.base';
import { IThreadService } from 'vs/workbench/services/thread/common/threadService';
import * as vscode from 'vscode';
import { IPosition, IRange, ISingleEditOperation } from 'vs/editor/common/editorCommon';
import * as modes from 'vs/editor/common/modes';
import { ExtHostHeapService } from 'vs/workbench/api/node/extHostHeapService';
import { ExtHostDocuments } from 'vs/workbench/api/node/extHostDocuments';
import { ExtHostCommands } from 'vs/workbench/api/node/extHostCommands';
import { ExtHostDiagnostics } from 'vs/workbench/api/node/extHostDiagnostics';
import { IWorkspaceSymbol } from 'vs/workbench/parts/search/common/search';
import { ExtHostLanguageFeaturesShape } from './extHost.protocol';
import { IWorkspace } from 'vs/platform/workspace/common/workspace';
export declare class ExtHostLanguageFeatures extends ExtHostLanguageFeaturesShape {
    private static _handlePool;
    private _seqId;
    private _proxy;
    private _documents;
    private _commands;
    private _heapService;
    private _diagnostics;
    private _adapter;
    constructor(seqId: number, threadService: IThreadService, documents: ExtHostDocuments, commands: ExtHostCommands, heapMonitor: ExtHostHeapService, diagnostics: ExtHostDiagnostics);
    private _createDisposable(handle);
    private _nextHandle();
    private _withAdapter<A, R>(handle, ctor, callback);
    registerDocumentSymbolProvider(selector: vscode.DocumentSelector, provider: vscode.DocumentSymbolProvider, workspace?: IWorkspace): vscode.Disposable;
    $provideDocumentSymbols(handle: number, resource: URI): TPromise<modes.SymbolInformation[]>;
    registerCodeLensProvider(selector: vscode.DocumentSelector, provider: vscode.CodeLensProvider, workspace?: IWorkspace): vscode.Disposable;
    $provideCodeLenses(handle: number, resource: URI): TPromise<modes.ICodeLensSymbol[]>;
    $resolveCodeLens(handle: number, resource: URI, symbol: modes.ICodeLensSymbol): TPromise<modes.ICodeLensSymbol>;
    registerDefinitionProvider(selector: vscode.DocumentSelector, provider: vscode.DefinitionProvider, workspace?: IWorkspace): vscode.Disposable;
    $provideDefinition(handle: number, resource: URI, position: IPosition): TPromise<modes.Definition>;
    registerHoverProvider(selector: vscode.DocumentSelector, provider: vscode.HoverProvider, workspace?: IWorkspace): vscode.Disposable;
    $provideHover(handle: number, resource: URI, position: IPosition): TPromise<modes.Hover>;
    registerDocumentHighlightProvider(selector: vscode.DocumentSelector, provider: vscode.DocumentHighlightProvider, workspace?: IWorkspace): vscode.Disposable;
    $provideDocumentHighlights(handle: number, resource: URI, position: IPosition): TPromise<modes.DocumentHighlight[]>;
    registerReferenceProvider(selector: vscode.DocumentSelector, provider: vscode.ReferenceProvider, workspace?: IWorkspace): vscode.Disposable;
    $provideReferences(handle: number, progressHandle: number, resource: URI, position: IPosition, context: modes.ReferenceContext): TPromise<modes.Location[]>;
    registerCodeActionProvider(selector: vscode.DocumentSelector, provider: vscode.CodeActionProvider, workspace?: IWorkspace): vscode.Disposable;
    $provideCodeActions(handle: number, resource: URI, range: IRange): TPromise<modes.CodeAction[]>;
    registerDocumentFormattingEditProvider(selector: vscode.DocumentSelector, provider: vscode.DocumentFormattingEditProvider, workspace?: IWorkspace): vscode.Disposable;
    $provideDocumentFormattingEdits(handle: number, resource: URI, options: modes.FormattingOptions): TPromise<ISingleEditOperation[]>;
    registerDocumentRangeFormattingEditProvider(selector: vscode.DocumentSelector, provider: vscode.DocumentRangeFormattingEditProvider, workspace?: IWorkspace): vscode.Disposable;
    $provideDocumentRangeFormattingEdits(handle: number, resource: URI, range: IRange, options: modes.FormattingOptions): TPromise<ISingleEditOperation[]>;
    registerOnTypeFormattingEditProvider(selector: vscode.DocumentSelector, provider: vscode.OnTypeFormattingEditProvider, triggerCharacters: string[], workspace?: IWorkspace): vscode.Disposable;
    $provideOnTypeFormattingEdits(handle: number, resource: URI, position: IPosition, ch: string, options: modes.FormattingOptions): TPromise<ISingleEditOperation[]>;
    registerWorkspaceSymbolProvider(provider: vscode.WorkspaceSymbolProvider): vscode.Disposable;
    $provideWorkspaceSymbols(handle: number, search: string): TPromise<IWorkspaceSymbol[]>;
    $resolveWorkspaceSymbol(handle: number, symbol: IWorkspaceSymbol): TPromise<IWorkspaceSymbol>;
    registerRenameProvider(selector: vscode.DocumentSelector, provider: vscode.RenameProvider, workspace?: IWorkspace): vscode.Disposable;
    $provideRenameEdits(handle: number, resource: URI, position: IPosition, newName: string): TPromise<modes.WorkspaceEdit>;
    registerCompletionItemProvider(selector: vscode.DocumentSelector, provider: vscode.CompletionItemProvider, triggerCharacters: string[], workspace?: IWorkspace): vscode.Disposable;
    $provideCompletionItems(handle: number, resource: URI, position: IPosition): TPromise<modes.ISuggestResult>;
    $resolveCompletionItem(handle: number, resource: URI, position: IPosition, suggestion: modes.ISuggestion): TPromise<modes.ISuggestion>;
    registerSignatureHelpProvider(selector: vscode.DocumentSelector, provider: vscode.SignatureHelpProvider, triggerCharacters: string[], workspace?: IWorkspace): vscode.Disposable;
    $provideSignatureHelp(handle: number, resource: URI, position: IPosition): TPromise<modes.SignatureHelp>;
    registerDocumentLinkProvider(selector: vscode.DocumentSelector, provider: vscode.DocumentLinkProvider, workspace?: IWorkspace): vscode.Disposable;
    $provideDocumentLinks(handle: number, resource: URI): TPromise<modes.ILink[]>;
    $resolveDocumentLink(handle: number, link: modes.ILink): TPromise<modes.ILink>;
    setLanguageConfiguration(languageId: string, configuration: vscode.LanguageConfiguration): vscode.Disposable;
}
