import URI from 'vs/base/common/uri';
import { IModelService } from 'vs/editor/common/services/modelService';
import { IThreadService } from 'vs/workbench/services/thread/common/threadService';
import { ITextFileService } from 'vs/workbench/services/textfile/common/textfiles';
import { TPromise } from 'vs/base/common/winjs.base';
import { IFileService } from 'vs/platform/files/common/files';
import { IModeService } from 'vs/editor/common/services/modeService';
import { IUntitledEditorService } from 'vs/workbench/services/untitled/common/untitledEditorService';
import { IEditorGroupService } from 'vs/workbench/services/group/common/groupService';
import { MainThreadDocumentsShape } from './extHost.protocol';
import { ITextModelResolverService } from 'vs/editor/common/services/resolverService';
import { ICodeEditorService } from 'vs/editor/common/services/codeEditorService';
import { ITextSource } from 'vs/editor/common/model/textSource';
import { MainThreadDocumentsAndEditors } from './mainThreadDocumentsAndEditors';
export declare class MainThreadDocuments extends MainThreadDocumentsShape {
    private _modelService;
    private _modeService;
    private _textModelResolverService;
    private _textFileService;
    private _codeEditorService;
    private _fileService;
    private _untitledEditorService;
    private _editorGroupService;
    private _toDispose;
    private _modelToDisposeMap;
    private _proxy;
    private _modelIsSynced;
    private _resourceContentProvider;
    constructor(documentsAndEditors: MainThreadDocumentsAndEditors, threadService: IThreadService, modelService: IModelService, modeService: IModeService, textFileService: ITextFileService, codeEditorService: ICodeEditorService, fileService: IFileService, textModelResolverService: ITextModelResolverService, untitledEditorService: IUntitledEditorService, editorGroupService: IEditorGroupService);
    dispose(): void;
    private _shouldHandleFileEvent(e);
    private _onModelAdded(model);
    private _onModelModeChanged(event);
    private _onModelRemoved(modelUrl);
    private _onModelEvents(modelUrl, events);
    $trySaveDocument(uri: URI): TPromise<boolean>;
    $tryDeleteDocument(uri: URI): TPromise<void>;
    $tryRevertAll(uris: URI[]): TPromise<boolean>;
    $tryOpenDocument(uri: URI): TPromise<any>;
    $tryCreateDocument(options?: {
        language?: string;
        content?: string;
    }): TPromise<URI>;
    private _handleAsResourceInput(uri);
    private _handleUnititledScheme(uri);
    private _doCreateUntitled(uri?, modeId?, initialValue?);
    $registerTextContentProvider(handle: number, scheme: string): void;
    $unregisterTextContentProvider(handle: number): void;
    $onVirtualDocumentChange(uri: URI, value: ITextSource): void;
}
