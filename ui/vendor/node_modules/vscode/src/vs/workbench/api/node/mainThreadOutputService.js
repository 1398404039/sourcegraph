/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var platform_1 = require("vs/platform/platform");
var output_1 = require("vs/workbench/parts/output/common/output");
var partService_1 = require("vs/workbench/services/part/common/partService");
var panelService_1 = require("vs/workbench/services/panel/common/panelService");
var extHost_protocol_1 = require("./extHost.protocol");
var MainThreadOutputService = (function (_super) {
    __extends(MainThreadOutputService, _super);
    function MainThreadOutputService(outputService, partService, panelService) {
        var _this = _super.call(this) || this;
        _this._outputService = outputService;
        _this._partService = partService;
        _this._panelService = panelService;
        _this._disable = false;
        return _this;
    }
    MainThreadOutputService.prototype.disable = function () {
        this._disable = true;
    };
    MainThreadOutputService.prototype.$append = function (channelId, label, value) {
        if (this._disable) {
            return;
        }
        this._getChannel(channelId, label).append(value);
        return undefined;
    };
    MainThreadOutputService.prototype.$clear = function (channelId, label) {
        if (this._disable) {
            return;
        }
        this._getChannel(channelId, label).clear();
        return undefined;
    };
    MainThreadOutputService.prototype.$reveal = function (channelId, label, preserveFocus) {
        if (this._disable) {
            return;
        }
        this._getChannel(channelId, label).show(preserveFocus);
        return undefined;
    };
    MainThreadOutputService.prototype._getChannel = function (channelId, label) {
        if (platform_1.Registry.as(output_1.Extensions.OutputChannels).getChannels().every(function (channel) { return channel.id !== channelId; })) {
            platform_1.Registry.as(output_1.Extensions.OutputChannels).registerChannel(channelId, label);
        }
        return this._outputService.getChannel(channelId);
    };
    MainThreadOutputService.prototype.$close = function (channelId) {
        if (this._disable) {
            return;
        }
        var panel = this._panelService.getActivePanel();
        if (panel && panel.getId() === output_1.OUTPUT_PANEL_ID && channelId === this._outputService.getActiveChannel().id) {
            this._partService.setPanelHidden(true);
        }
        return undefined;
    };
    return MainThreadOutputService;
}(extHost_protocol_1.MainThreadOutputServiceShape));
MainThreadOutputService = __decorate([
    __param(0, output_1.IOutputService),
    __param(1, partService_1.IPartService),
    __param(2, panelService_1.IPanelService)
], MainThreadOutputService);
exports.MainThreadOutputService = MainThreadOutputService;
