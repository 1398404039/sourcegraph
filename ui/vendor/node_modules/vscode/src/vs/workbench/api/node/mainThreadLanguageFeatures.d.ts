import { TPromise } from 'vs/base/common/winjs.base';
import { IThreadService } from 'vs/workbench/services/thread/common/threadService';
import * as vscode from 'vscode';
import * as modes from 'vs/editor/common/modes';
import { MainThreadLanguageFeaturesShape } from './extHost.protocol';
import { IHeapService } from './mainThreadHeapService';
import { IModeService } from 'vs/editor/common/services/modeService';
import { IWorkspace } from 'vs/platform/workspace/common/workspace';
export declare class MainThreadLanguageFeatures extends MainThreadLanguageFeaturesShape {
    private _proxy;
    private _heapService;
    private _modeService;
    private _registrations;
    /**
     * Maintains a collection of callbacks for ongoing requests.
     * Currently, provideReferences is the only call that saves a callback for reporting progress,
     * but other methods may use this to register callbacks as well.
     */
    private _callbackRegistrations;
    constructor(threadService: IThreadService, heapService: IHeapService, modeService: IModeService);
    $unregister(handle: number): TPromise<any>;
    $registerOutlineSupport(handle: number, selector: vscode.DocumentSelector, workspace?: IWorkspace): TPromise<any>;
    $registerCodeLensSupport(handle: number, selector: vscode.DocumentSelector, eventHandle: number, workspace?: IWorkspace): TPromise<any>;
    $emitCodeLensEvent(eventHandle: number, event?: any): TPromise<any>;
    $registerDeclaractionSupport(handle: number, selector: vscode.DocumentSelector, workspace?: IWorkspace): TPromise<any>;
    $registerImplementationSupport(handle: number, selector: vscode.DocumentSelector): TPromise<any>;
    $registerTypeDefinitionSupport(handle: number, selector: vscode.DocumentSelector): TPromise<any>;
    $registerHoverProvider(handle: number, selector: vscode.DocumentSelector, workspace?: IWorkspace): TPromise<any>;
    $registerDocumentHighlightProvider(handle: number, selector: vscode.DocumentSelector, workspace?: IWorkspace): TPromise<any>;
    $registerReferenceSupport(handle: number, selector: vscode.DocumentSelector, workspace?: IWorkspace): TPromise<any>;
    $notifyProvideReferencesProgress(handle: number, progressHandle: number, locations: modes.Location[]): TPromise<any>;
    $registerWorkspaceReferenceSupport(handle: number, selector: vscode.DocumentSelector, workspace?: IWorkspace): TPromise<any>;
    $notifyProvideWorkspaceReferencesProgress(handle: number, progressHandle: number, locations: modes.IReferenceInformation[]): TPromise<any>;
    $registerQuickFixSupport(handle: number, selector: vscode.DocumentSelector, workspace?: IWorkspace): TPromise<any>;
    $registerDocumentFormattingSupport(handle: number, selector: vscode.DocumentSelector, workspace?: IWorkspace): TPromise<any>;
    $registerRangeFormattingSupport(handle: number, selector: vscode.DocumentSelector, workspace?: IWorkspace): TPromise<any>;
    $registerOnTypeFormattingSupport(handle: number, selector: vscode.DocumentSelector, autoFormatTriggerCharacters: string[], workspace?: IWorkspace): TPromise<any>;
    $registerNavigateTypeSupport(handle: number, workspace?: IWorkspace): TPromise<any>;
    $registerRenameSupport(handle: number, selector: vscode.DocumentSelector, workspace?: IWorkspace): TPromise<any>;
    $registerSuggestSupport(handle: number, selector: vscode.DocumentSelector, triggerCharacters: string[], workspace?: IWorkspace): TPromise<any>;
    $registerSignatureHelpProvider(handle: number, selector: vscode.DocumentSelector, triggerCharacter: string[], workspace?: IWorkspace): TPromise<any>;
    $registerDocumentLinkProvider(handle: number, selector: vscode.DocumentSelector, workspace?: IWorkspace): TPromise<any>;
    $setLanguageConfiguration(handle: number, languageId: string, _configuration: vscode.LanguageConfiguration): TPromise<any>;
}
