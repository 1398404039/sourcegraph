/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var contributions_1 = require("vs/workbench/common/contributions");
var platform_1 = require("vs/platform/platform");
var instantiation_1 = require("vs/platform/instantiation/common/instantiation");
var threadService_1 = require("vs/workbench/services/thread/common/threadService");
var extHost_protocol_1 = require("./extHost.protocol");
var extensions_1 = require("vs/platform/extensions/common/extensions");
// --- addressable
var mainThreadCommands_1 = require("./mainThreadCommands");
var mainThreadConfiguration_1 = require("./mainThreadConfiguration");
var mainThreadDiagnostics_1 = require("./mainThreadDiagnostics");
var mainThreadDocuments_1 = require("./mainThreadDocuments");
var mainThreadEditors_1 = require("./mainThreadEditors");
var mainThreadErrors_1 = require("./mainThreadErrors");
var mainThreadTreeExplorers_1 = require("./mainThreadTreeExplorers");
var mainThreadLanguageFeatures_1 = require("./mainThreadLanguageFeatures");
var mainThreadLanguages_1 = require("./mainThreadLanguages");
var mainThreadMessageService_1 = require("./mainThreadMessageService");
var mainThreadOutputService_1 = require("./mainThreadOutputService");
var mainThreadProgress_1 = require("./mainThreadProgress");
var mainThreadQuickOpen_1 = require("./mainThreadQuickOpen");
var mainThreadStatusBar_1 = require("./mainThreadStatusBar");
var mainThreadStorage_1 = require("./mainThreadStorage");
var mainThreadTelemetry_1 = require("./mainThreadTelemetry");
var mainThreadTerminalService_1 = require("./mainThreadTerminalService");
var mainThreadWorkspace_1 = require("./mainThreadWorkspace");
var mainThreadExtensionService_1 = require("./mainThreadExtensionService");
var mainThreadFileSystemEventService_1 = require("./mainThreadFileSystemEventService");
var mainThreadSCM_1 = require("./mainThreadSCM");
// --- other interested parties
var mainThreadDocumentsAndEditors_1 = require("./mainThreadDocumentsAndEditors");
var jsonValidationExtensionPoint_1 = require("vs/platform/jsonschemas/common/jsonValidationExtensionPoint");
var languageConfigurationExtensionPoint_1 = require("vs/editor/node/languageConfigurationExtensionPoint");
var mainThreadSaveParticipant_1 = require("./mainThreadSaveParticipant");
// --- registers itself as service
require("./mainThreadHeapService");
var ExtHostContribution = (function () {
    function ExtHostContribution(threadService, instantiationService, extensionService) {
        this.threadService = threadService;
        this.instantiationService = instantiationService;
        this.extensionService = extensionService;
        this.initExtensionSystem();
    }
    ExtHostContribution.prototype.getId = function () {
        return 'vs.api.extHost';
    };
    ExtHostContribution.prototype.initExtensionSystem = function () {
        var _this = this;
        var create = function (ctor) {
            return _this.instantiationService.createInstance(ctor);
        };
        var documentsAndEditors = this.instantiationService.createInstance(mainThreadDocumentsAndEditors_1.MainThreadDocumentsAndEditors);
        // Addressable instances
        var col = new extHost_protocol_1.InstanceCollection();
        col.define(extHost_protocol_1.MainContext.MainThreadCommands).set(create(mainThreadCommands_1.MainThreadCommands));
        col.define(extHost_protocol_1.MainContext.MainThreadConfiguration).set(create(mainThreadConfiguration_1.MainThreadConfiguration));
        col.define(extHost_protocol_1.MainContext.MainThreadDiagnostics).set(create(mainThreadDiagnostics_1.MainThreadDiagnostics));
        col.define(extHost_protocol_1.MainContext.MainThreadDocuments).set(this.instantiationService.createInstance(mainThreadDocuments_1.MainThreadDocuments, documentsAndEditors));
        col.define(extHost_protocol_1.MainContext.MainThreadEditors).set(this.instantiationService.createInstance(mainThreadEditors_1.MainThreadEditors, documentsAndEditors));
        col.define(extHost_protocol_1.MainContext.MainThreadErrors).set(create(mainThreadErrors_1.MainThreadErrors));
        col.define(extHost_protocol_1.MainContext.MainThreadExplorers).set(create(mainThreadTreeExplorers_1.MainThreadTreeExplorers));
        col.define(extHost_protocol_1.MainContext.MainThreadLanguageFeatures).set(create(mainThreadLanguageFeatures_1.MainThreadLanguageFeatures));
        col.define(extHost_protocol_1.MainContext.MainThreadLanguages).set(create(mainThreadLanguages_1.MainThreadLanguages));
        col.define(extHost_protocol_1.MainContext.MainThreadMessageService).set(create(mainThreadMessageService_1.MainThreadMessageService));
        col.define(extHost_protocol_1.MainContext.MainThreadOutputService).set(create(mainThreadOutputService_1.MainThreadOutputService));
        col.define(extHost_protocol_1.MainContext.MainThreadProgress).set(create(mainThreadProgress_1.MainThreadProgress));
        col.define(extHost_protocol_1.MainContext.MainThreadQuickOpen).set(create(mainThreadQuickOpen_1.MainThreadQuickOpen));
        col.define(extHost_protocol_1.MainContext.MainThreadStatusBar).set(create(mainThreadStatusBar_1.MainThreadStatusBar));
        col.define(extHost_protocol_1.MainContext.MainThreadStorage).set(create(mainThreadStorage_1.MainThreadStorage));
        col.define(extHost_protocol_1.MainContext.MainThreadTelemetry).set(create(mainThreadTelemetry_1.MainThreadTelemetry));
        col.define(extHost_protocol_1.MainContext.MainThreadTerminalService).set(create(mainThreadTerminalService_1.MainThreadTerminalService));
        col.define(extHost_protocol_1.MainContext.MainThreadWorkspace).set(create(mainThreadWorkspace_1.MainThreadWorkspace));
        col.define(extHost_protocol_1.MainContext.MainThreadSCM).set(create(mainThreadSCM_1.MainThreadSCM));
        if (this.extensionService instanceof mainThreadExtensionService_1.MainProcessExtensionService) {
            col.define(extHost_protocol_1.MainContext.MainProcessExtensionService).set(this.extensionService);
        }
        col.finish(true, this.threadService);
        // Other interested parties
        create(jsonValidationExtensionPoint_1.JSONValidationExtensionPoint);
        this.instantiationService.createInstance(languageConfigurationExtensionPoint_1.LanguageConfigurationFileHandler);
        create(mainThreadFileSystemEventService_1.MainThreadFileSystemEventService);
        create(mainThreadSaveParticipant_1.SaveParticipant);
    };
    return ExtHostContribution;
}());
ExtHostContribution = __decorate([
    __param(0, threadService_1.IThreadService),
    __param(1, instantiation_1.IInstantiationService),
    __param(2, extensions_1.IExtensionService)
], ExtHostContribution);
exports.ExtHostContribution = ExtHostContribution;
// Register File Tracker
platform_1.Registry.as(contributions_1.Extensions.Workbench).registerWorkbenchContribution(ExtHostContribution);
