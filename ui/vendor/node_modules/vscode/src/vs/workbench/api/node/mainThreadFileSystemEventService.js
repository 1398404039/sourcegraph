/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var files_1 = require("vs/platform/files/common/files");
var threadService_1 = require("vs/workbench/services/thread/common/threadService");
var event_1 = require("vs/platform/event/common/event");
var async_1 = require("vs/base/common/async");
var extHost_protocol_1 = require("./extHost.protocol");
var MainThreadFileSystemEventService = (function () {
    function MainThreadFileSystemEventService(eventService, threadService) {
        var proxy = threadService.get(extHost_protocol_1.ExtHostContext.ExtHostFileSystemEventService);
        var events = {
            created: [],
            changed: [],
            deleted: []
        };
        var scheduler = new async_1.RunOnceScheduler(function () {
            proxy.$onFileEvent(events);
            events.created.length = 0;
            events.changed.length = 0;
            events.deleted.length = 0;
        }, 100);
        eventService.addListener2('files:fileChanges', function (event) {
            for (var _i = 0, _a = event.changes; _i < _a.length; _i++) {
                var change = _a[_i];
                switch (change.type) {
                    case files_1.FileChangeType.ADDED:
                        events.created.push(change.resource);
                        break;
                    case files_1.FileChangeType.UPDATED:
                        events.changed.push(change.resource);
                        break;
                    case files_1.FileChangeType.DELETED:
                        events.deleted.push(change.resource);
                        break;
                }
            }
            scheduler.schedule();
        });
    }
    return MainThreadFileSystemEventService;
}());
MainThreadFileSystemEventService = __decorate([
    __param(0, event_1.IEventService), __param(1, threadService_1.IThreadService)
], MainThreadFileSystemEventService);
exports.MainThreadFileSystemEventService = MainThreadFileSystemEventService;
