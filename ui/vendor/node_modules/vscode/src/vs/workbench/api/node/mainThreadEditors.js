/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var lifecycle_1 = require("vs/base/common/lifecycle");
var winjs_base_1 = require("vs/base/common/winjs.base");
var threadService_1 = require("vs/workbench/services/thread/common/threadService");
var codeEditorService_1 = require("vs/editor/common/services/codeEditorService");
var editorService_1 = require("vs/workbench/services/editor/common/editorService");
var groupService_1 = require("vs/workbench/services/group/common/groupService");
var telemetry_1 = require("vs/platform/telemetry/common/telemetry");
var objects_1 = require("vs/base/common/objects");
var extHost_protocol_1 = require("./extHost.protocol");
var MainThreadEditors = (function (_super) {
    __extends(MainThreadEditors, _super);
    function MainThreadEditors(documentsAndEditors, _codeEditorService, threadService, workbenchEditorService, editorGroupService, telemetryService) {
        var _this = _super.call(this) || this;
        _this._codeEditorService = _codeEditorService;
        _this._proxy = threadService.get(extHost_protocol_1.ExtHostContext.ExtHostEditors);
        _this._documentsAndEditors = documentsAndEditors;
        _this._workbenchEditorService = workbenchEditorService;
        _this._telemetryService = telemetryService;
        _this._toDispose = [];
        _this._textEditorsListenersMap = Object.create(null);
        _this._editorPositionData = null;
        _this._toDispose.push(documentsAndEditors.onTextEditorAdd(function (editors) { return editors.forEach(_this._onTextEditorAdd, _this); }));
        _this._toDispose.push(documentsAndEditors.onTextEditorRemove(function (editors) { return editors.forEach(_this._onTextEditorRemove, _this); }));
        _this._toDispose.push(editorGroupService.onEditorsChanged(function () { return _this._updateActiveAndVisibleTextEditors(); }));
        _this._toDispose.push(editorGroupService.onEditorsMoved(function () { return _this._updateActiveAndVisibleTextEditors(); }));
        return _this;
    }
    MainThreadEditors.prototype.dispose = function () {
        var _this = this;
        Object.keys(this._textEditorsListenersMap).forEach(function (editorId) {
            lifecycle_1.dispose(_this._textEditorsListenersMap[editorId]);
        });
        this._textEditorsListenersMap = Object.create(null);
        this._toDispose = lifecycle_1.dispose(this._toDispose);
    };
    MainThreadEditors.prototype._onTextEditorAdd = function (textEditor) {
        var _this = this;
        var id = textEditor.getId();
        var toDispose = [];
        toDispose.push(textEditor.onConfigurationChanged(function (opts) {
            _this._proxy.$acceptOptionsChanged(id, opts, textEditor.getModel().uri);
        }));
        toDispose.push(textEditor.onSelectionChanged(function (event) {
            _this._proxy.$acceptSelectionsChanged(id, event, textEditor.getModel().uri);
        }));
        this._textEditorsListenersMap[id] = toDispose;
    };
    MainThreadEditors.prototype._onTextEditorRemove = function (id) {
        lifecycle_1.dispose(this._textEditorsListenersMap[id]);
        delete this._textEditorsListenersMap[id];
    };
    MainThreadEditors.prototype._updateActiveAndVisibleTextEditors = function () {
        // editor columns
        var editorPositionData = this._getTextEditorPositionData();
        if (!objects_1.equals(this._editorPositionData, editorPositionData)) {
            this._editorPositionData = editorPositionData;
            this._proxy.$acceptEditorPositionData(this._editorPositionData);
        }
    };
    MainThreadEditors.prototype._getTextEditorPositionData = function () {
        var result = Object.create(null);
        for (var _i = 0, _a = this._workbenchEditorService.getVisibleEditors(); _i < _a.length; _i++) {
            var workbenchEditor = _a[_i];
            var id = this._documentsAndEditors.findTextEditorIdFor(workbenchEditor);
            if (id) {
                result[id] = workbenchEditor.position;
            }
        }
        return result;
    };
    // --- from extension host process
    MainThreadEditors.prototype.$tryShowTextDocument = function (resource, position, preserveFocus) {
        var _this = this;
        var input = {
            resource: resource,
            options: { preserveFocus: preserveFocus, pinned: true }
        };
        return this._workbenchEditorService.openEditor(input, position).then(function (editor) {
            if (!editor) {
                return undefined;
            }
            return _this._documentsAndEditors.findTextEditorIdFor(editor);
        });
    };
    MainThreadEditors.prototype.$tryShowEditor = function (id, position) {
        // check how often this is used
        this._telemetryService.publicLog('api.deprecated', { function: 'TextEditor.show' });
        var mainThreadEditor = this._documentsAndEditors.getEditor(id);
        if (mainThreadEditor) {
            var model = mainThreadEditor.getModel();
            return this._workbenchEditorService.openEditor({
                resource: model.uri,
                options: { preserveFocus: false }
            }, position).then(function () { return; });
        }
        return undefined;
    };
    MainThreadEditors.prototype.$tryHideEditor = function (id) {
        // check how often this is used
        this._telemetryService.publicLog('api.deprecated', { function: 'TextEditor.hide' });
        var mainThreadEditor = this._documentsAndEditors.getEditor(id);
        if (mainThreadEditor) {
            var editors = this._workbenchEditorService.getVisibleEditors();
            for (var _i = 0, editors_1 = editors; _i < editors_1.length; _i++) {
                var editor = editors_1[_i];
                if (mainThreadEditor.matches(editor)) {
                    return this._workbenchEditorService.closeEditor(editor.position, editor.input).then(function () { return; });
                }
            }
        }
        return undefined;
    };
    MainThreadEditors.prototype.$trySetSelections = function (id, selections) {
        if (!this._documentsAndEditors.getEditor(id)) {
            return winjs_base_1.TPromise.wrapError('TextEditor disposed');
        }
        this._documentsAndEditors.getEditor(id).setSelections(selections);
        return winjs_base_1.TPromise.as(null);
    };
    MainThreadEditors.prototype.$trySetDecorations = function (id, key, ranges) {
        if (!this._documentsAndEditors.getEditor(id)) {
            return winjs_base_1.TPromise.wrapError('TextEditor disposed');
        }
        this._documentsAndEditors.getEditor(id).setDecorations(key, ranges);
        return winjs_base_1.TPromise.as(null);
    };
    MainThreadEditors.prototype.$tryRevealRange = function (id, range, revealType) {
        if (!this._documentsAndEditors.getEditor(id)) {
            return winjs_base_1.TPromise.wrapError('TextEditor disposed');
        }
        this._documentsAndEditors.getEditor(id).revealRange(range, revealType);
        return undefined;
    };
    MainThreadEditors.prototype.$trySetOptions = function (id, options) {
        if (!this._documentsAndEditors.getEditor(id)) {
            return winjs_base_1.TPromise.wrapError('TextEditor disposed');
        }
        this._documentsAndEditors.getEditor(id).setConfiguration(options);
        return winjs_base_1.TPromise.as(null);
    };
    MainThreadEditors.prototype.$tryApplyEdits = function (id, modelVersionId, edits, opts) {
        if (!this._documentsAndEditors.getEditor(id)) {
            return winjs_base_1.TPromise.wrapError('TextEditor disposed');
        }
        return winjs_base_1.TPromise.as(this._documentsAndEditors.getEditor(id).applyEdits(modelVersionId, edits, opts));
    };
    MainThreadEditors.prototype.$tryInsertSnippet = function (id, template, ranges, opts) {
        if (!this._documentsAndEditors.getEditor(id)) {
            return winjs_base_1.TPromise.wrapError('TextEditor disposed');
        }
        return winjs_base_1.TPromise.as(this._documentsAndEditors.getEditor(id).insertSnippet(template, ranges, opts));
    };
    MainThreadEditors.prototype.$registerTextEditorDecorationType = function (key, options) {
        this._codeEditorService.registerDecorationType(key, options);
    };
    MainThreadEditors.prototype.$removeTextEditorDecorationType = function (key) {
        this._codeEditorService.removeDecorationType(key);
    };
    return MainThreadEditors;
}(extHost_protocol_1.MainThreadEditorsShape));
MainThreadEditors = __decorate([
    __param(1, codeEditorService_1.ICodeEditorService),
    __param(2, threadService_1.IThreadService),
    __param(3, editorService_1.IWorkbenchEditorService),
    __param(4, groupService_1.IEditorGroupService),
    __param(5, telemetry_1.ITelemetryService)
], MainThreadEditors);
exports.MainThreadEditors = MainThreadEditors;
