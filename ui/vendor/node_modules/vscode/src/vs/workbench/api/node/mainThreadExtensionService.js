/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var severity_1 = require("vs/base/common/severity");
var winjs_base_1 = require("vs/base/common/winjs.base");
var package_1 = require("vs/platform/node/package");
var nls_1 = require("vs/nls");
var path = require("path");
var uri_1 = require("vs/base/common/uri");
var abstractExtensionService_1 = require("vs/platform/extensions/common/abstractExtensionService");
var extensionManagement_1 = require("vs/platform/extensionManagement/common/extensionManagement");
var extensionManagementUtil_1 = require("vs/platform/extensionManagement/common/extensionManagementUtil");
var extensionsRegistry_1 = require("vs/platform/extensions/common/extensionsRegistry");
var extensionPoints_1 = require("vs/workbench/node/extensionPoints");
var message_1 = require("vs/platform/message/common/message");
var threadService_1 = require("vs/workbench/services/thread/common/threadService");
var extHost_protocol_1 = require("./extHost.protocol");
var environment_1 = require("vs/platform/environment/common/environment");
var SystemExtensionsRoot = path.normalize(path.join(uri_1.default.parse(require.toUrl('')).fsPath, '..', 'extensions'));
/**
 * Represents a failed extension in the ext host.
 */
var MainProcessFailedExtension = (function (_super) {
    __extends(MainProcessFailedExtension, _super);
    function MainProcessFailedExtension() {
        return _super.call(this, true) || this;
    }
    return MainProcessFailedExtension;
}(abstractExtensionService_1.ActivatedExtension));
/**
 * Represents an extension that was successfully loaded or an
 * empty extension in the ext host.
 */
var MainProcessSuccessExtension = (function (_super) {
    __extends(MainProcessSuccessExtension, _super);
    function MainProcessSuccessExtension() {
        return _super.call(this, false) || this;
    }
    return MainProcessSuccessExtension;
}(abstractExtensionService_1.ActivatedExtension));
function messageWithSource(msg) {
    return (msg.source ? '[' + msg.source + ']: ' : '') + msg.message;
}
var hasOwnProperty = Object.hasOwnProperty;
var MainProcessExtensionService = (function (_super) {
    __extends(MainProcessExtensionService, _super);
    /**
     * This class is constructed manually because it is a service, so it doesn't use any ctor injection
     */
    function MainProcessExtensionService(
        // TODO@Joao: remove!
        forcedDisabledExtensions, threadService, messageService, environmentService, extensionEnablementService) {
        var _this = _super.call(this, false) || this;
        _this.environmentService = environmentService;
        _this._isDev = !environmentService.isBuilt || environmentService.isExtensionDevelopment;
        _this._messageService = messageService;
        _this._threadService = threadService;
        _this._proxy = _this._threadService.get(extHost_protocol_1.ExtHostContext.ExtHostExtensionService);
        _this._extensionsStatus = {};
        var disabledExtensions = forcedDisabledExtensions.concat(extensionEnablementService.getGloballyDisabledExtensions(), extensionEnablementService.getWorkspaceDisabledExtensions());
        _this.scanExtensions().done(function (extensionDescriptions) {
            _this._onExtensionDescriptions(disabledExtensions.length ? extensionDescriptions.filter(function (e) { return disabledExtensions.every(function (id) { return !extensionManagementUtil_1.areSameExtensions({ id: id }, e); }); }) : extensionDescriptions);
        });
        return _this;
    }
    MainProcessExtensionService.prototype._handleMessage = function (msg) {
        this._showMessage(msg.type, messageWithSource(msg));
        if (!this._extensionsStatus[msg.source]) {
            this._extensionsStatus[msg.source] = { messages: [] };
        }
        this._extensionsStatus[msg.source].messages.push(msg);
    };
    MainProcessExtensionService.prototype.$localShowMessage = function (severity, msg) {
        var messageShown = false;
        if (severity === severity_1.default.Error || severity === severity_1.default.Warning) {
            if (this._isDev) {
                // Only show nasty intrusive messages if doing extension development.
                this._messageService.show(severity, msg);
                messageShown = true;
            }
        }
        if (!messageShown) {
            switch (severity) {
                case severity_1.default.Error:
                    console.error(msg);
                    break;
                case severity_1.default.Warning:
                    console.warn(msg);
                    break;
                default:
                    console.log(msg);
            }
        }
    };
    // -- overwriting AbstractExtensionService
    MainProcessExtensionService.prototype.getExtensionsStatus = function () {
        return this._extensionsStatus;
    };
    MainProcessExtensionService.prototype._showMessage = function (severity, msg) {
        this._proxy.$localShowMessage(severity, msg);
        this.$localShowMessage(severity, msg);
    };
    MainProcessExtensionService.prototype._createFailedExtension = function () {
        return new MainProcessFailedExtension();
    };
    MainProcessExtensionService.prototype._actualActivateExtension = function (extensionDescription) {
        var _this = this;
        // redirect extension activation to the extension host
        return this._proxy.$activateExtension(extensionDescription).then(function (_) {
            // the extension host calls $onExtensionActivated, where we write to `_activatedExtensions`
            return _this._activatedExtensions[extensionDescription.id];
        });
    };
    // -- called by extension host
    MainProcessExtensionService.prototype._onExtensionDescriptions = function (extensionDescriptions) {
        this._registry.registerExtensions(extensionDescriptions);
        var availableExtensions = this._registry.getAllExtensionDescriptions();
        var extensionPoints = extensionsRegistry_1.ExtensionsRegistry.getExtensionPoints();
        for (var i = 0, len = extensionPoints.length; i < len; i++) {
            this._handleExtensionPoint(extensionPoints[i], availableExtensions);
        }
        this._triggerOnReady();
    };
    MainProcessExtensionService.prototype._handleExtensionPoint = function (extensionPoint, availableExtensions) {
        var _this = this;
        var messageHandler = function (msg) { return _this._handleMessage(msg); };
        var users = [], usersLen = 0;
        for (var i = 0, len = availableExtensions.length; i < len; i++) {
            var desc = availableExtensions[i];
            if (desc.contributes && hasOwnProperty.call(desc.contributes, extensionPoint.name)) {
                users[usersLen++] = {
                    description: desc,
                    value: desc.contributes[extensionPoint.name],
                    collector: new extensionsRegistry_1.ExtensionMessageCollector(messageHandler, desc.extensionFolderPath)
                };
            }
        }
        extensionPoint.acceptUsers(users);
    };
    MainProcessExtensionService.prototype.$onExtensionActivated = function (extensionId) {
        this._activatedExtensions[extensionId] = new MainProcessSuccessExtension();
    };
    MainProcessExtensionService.prototype.$onExtensionActivationFailed = function (extensionId) {
        this._activatedExtensions[extensionId] = new MainProcessFailedExtension();
    };
    MainProcessExtensionService.prototype.scanExtensions = function () {
        var _this = this;
        var collector = new extensionPoints_1.MessagesCollector();
        var version = package_1.default.version;
        var builtinExtensions = extensionPoints_1.ExtensionScanner.scanExtensions(version, collector, SystemExtensionsRoot, true);
        var userExtensions = this.environmentService.disableExtensions || !this.environmentService.extensionsPath ? winjs_base_1.TPromise.as([]) : extensionPoints_1.ExtensionScanner.scanExtensions(version, collector, this.environmentService.extensionsPath, false);
        var developedExtensions = this.environmentService.disableExtensions || !this.environmentService.isExtensionDevelopment ? winjs_base_1.TPromise.as([]) : extensionPoints_1.ExtensionScanner.scanOneOrMultipleExtensions(version, collector, this.environmentService.extensionDevelopmentPath, false);
        return winjs_base_1.TPromise.join([builtinExtensions, userExtensions, developedExtensions]).then(function (extensionDescriptions) {
            var builtinExtensions = extensionDescriptions[0];
            var userExtensions = extensionDescriptions[1];
            var developedExtensions = extensionDescriptions[2];
            var result = {};
            builtinExtensions.forEach(function (builtinExtension) {
                result[builtinExtension.id] = builtinExtension;
            });
            userExtensions.forEach(function (userExtension) {
                if (result.hasOwnProperty(userExtension.id)) {
                    collector.warn(userExtension.extensionFolderPath, nls_1.localize('overwritingExtension', "Overwriting extension {0} with {1}.", result[userExtension.id].extensionFolderPath, userExtension.extensionFolderPath));
                }
                result[userExtension.id] = userExtension;
            });
            developedExtensions.forEach(function (developedExtension) {
                collector.info('', nls_1.localize('extensionUnderDevelopment', "Loading development extension at {0}", developedExtension.extensionFolderPath));
                if (result.hasOwnProperty(developedExtension.id)) {
                    collector.warn(developedExtension.extensionFolderPath, nls_1.localize('overwritingExtension', "Overwriting extension {0} with {1}.", result[developedExtension.id].extensionFolderPath, developedExtension.extensionFolderPath));
                }
                result[developedExtension.id] = developedExtension;
            });
            return Object.keys(result).map(function (name) { return result[name]; });
        }).then(null, function (err) {
            collector.error('', err);
            return [];
        }).then(function (extensions) {
            collector.getMessages().forEach(function (entry) { return _this.$localShowMessage(entry.type, _this._isDev ? (entry.source ? '[' + entry.source + ']: ' : '') + entry.message : entry.message); });
            return extensions;
        });
    };
    return MainProcessExtensionService;
}(abstractExtensionService_1.AbstractExtensionService));
MainProcessExtensionService = __decorate([
    __param(1, threadService_1.IThreadService),
    __param(2, message_1.IMessageService),
    __param(3, environment_1.IEnvironmentService),
    __param(4, extensionManagement_1.IExtensionEnablementService)
], MainProcessExtensionService);
exports.MainProcessExtensionService = MainProcessExtensionService;
