/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var objects_1 = require("vs/base/common/objects");
var event_1 = require("vs/base/common/event");
var extHost_protocol_1 = require("./extHost.protocol");
var configurationEditing_1 = require("vs/workbench/services/configuration/common/configurationEditing");
var model_1 = require("vs/platform/configuration/common/model");
function lookUp(tree, key) {
    if (key) {
        var parts = key.split('.');
        var node = tree;
        for (var i = 0; node && i < parts.length; i++) {
            node = node[parts[i]];
        }
        return node;
    }
}
function createUsefulConfiguration(data) {
    var valueMap = Object.create(null);
    for (var key in data) {
        if (Object.prototype.hasOwnProperty.call(data, key)) {
            valueMap[key] = data[key].value;
        }
    }
    var valueTree = model_1.toValuesTree(valueMap, function (message) { return console.error("Conflict in configuration settings: " + message); });
    return {
        data: data,
        valueTree: valueTree
    };
}
var ExtHostConfiguration = (function (_super) {
    __extends(ExtHostConfiguration, _super);
    function ExtHostConfiguration(proxy, data) {
        var _this = _super.call(this) || this;
        _this._onDidChangeConfiguration = new event_1.Emitter();
        _this._proxy = proxy;
        _this._configuration = createUsefulConfiguration(data);
        return _this;
    }
    Object.defineProperty(ExtHostConfiguration.prototype, "onDidChangeConfiguration", {
        get: function () {
            return this._onDidChangeConfiguration && this._onDidChangeConfiguration.event;
        },
        enumerable: true,
        configurable: true
    });
    ExtHostConfiguration.prototype.$acceptConfigurationChanged = function (data) {
        this._configuration = createUsefulConfiguration(data);
        this._onDidChangeConfiguration.fire(undefined);
    };
    ExtHostConfiguration.prototype.getConfiguration = function (section) {
        var _this = this;
        var config = section
            ? lookUp(this._configuration.valueTree, section)
            : this._configuration.valueTree;
        var result = {
            has: function (key) {
                return typeof lookUp(config, key) !== 'undefined';
            },
            get: function (key, defaultValue) {
                var result = lookUp(config, key);
                if (typeof result === 'undefined') {
                    result = defaultValue;
                }
                return result;
            },
            update: function (key, value, global) {
                if (global === void 0) { global = false; }
                key = section ? section + "." + key : key;
                var target = global ? configurationEditing_1.ConfigurationTarget.USER : configurationEditing_1.ConfigurationTarget.WORKSPACE;
                if (value !== void 0) {
                    return _this._proxy.$updateConfigurationOption(target, key, value);
                }
                else {
                    return _this._proxy.$removeConfigurationOption(target, key);
                }
            },
            inspect: function (key) {
                key = section ? section + "." + key : key;
                var config = _this._configuration.data[key];
                if (config) {
                    return {
                        key: key,
                        defaultValue: config.default,
                        globalValue: config.user,
                        workspaceValue: config.workspace
                    };
                }
                return undefined;
            }
        };
        if (typeof config === 'object') {
            objects_1.mixin(result, config, false);
        }
        return Object.freeze(result);
    };
    return ExtHostConfiguration;
}(extHost_protocol_1.ExtHostConfigurationShape));
exports.ExtHostConfiguration = ExtHostConfiguration;
