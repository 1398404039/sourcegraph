/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var winjs_base_1 = require("vs/base/common/winjs.base");
var uri_1 = require("vs/base/common/uri");
var event_1 = require("vs/base/common/event");
var lifecycle_1 = require("vs/base/common/lifecycle");
var threadService_1 = require("vs/workbench/services/thread/common/threadService");
var scm_1 = require("vs/workbench/services/scm/common/scm");
var instantiation_1 = require("vs/platform/instantiation/common/instantiation");
var commands_1 = require("vs/platform/commands/common/commands");
var extHost_protocol_1 = require("./extHost.protocol");
var MainThreadSCMProvider = (function () {
    function MainThreadSCMProvider(_id, proxy, features, scmService, commandService) {
        this._id = _id;
        this.proxy = proxy;
        this.features = features;
        this.commandService = commandService;
        this._resources = [];
        this._onDidChange = new event_1.Emitter();
        this.disposables = [];
        this._count = undefined;
        this._state = undefined;
        scmService.onDidChangeProvider(this.onDidChangeProvider, this, this.disposables);
        this.disposables.push(scmService.registerSCMProvider(this));
    }
    Object.defineProperty(MainThreadSCMProvider.prototype, "resources", {
        get: function () { return this._resources; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MainThreadSCMProvider.prototype, "onDidChange", {
        get: function () { return this._onDidChange.event; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MainThreadSCMProvider.prototype, "id", {
        get: function () { return this._id; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MainThreadSCMProvider.prototype, "label", {
        get: function () { return this.features.label; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MainThreadSCMProvider.prototype, "count", {
        get: function () { return this._count; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MainThreadSCMProvider.prototype, "state", {
        get: function () { return this._state; },
        enumerable: true,
        configurable: true
    });
    MainThreadSCMProvider.prototype.open = function (resource) {
        if (!this.features.supportsOpen) {
            return winjs_base_1.TPromise.as(null);
        }
        return this.proxy.$open(this.id, resource.resourceGroupId, resource.uri.toString());
    };
    MainThreadSCMProvider.prototype.acceptChanges = function () {
        if (!this.features.supportsAcceptChanges) {
            return winjs_base_1.TPromise.as(null);
        }
        return this.proxy.$acceptChanges(this.id);
    };
    MainThreadSCMProvider.prototype.drag = function (from, to) {
        if (!this.features.supportsDrag) {
            return winjs_base_1.TPromise.as(null);
        }
        return this.proxy.$drag(this.id, from.resourceGroupId, from.uri.toString(), to.id);
    };
    MainThreadSCMProvider.prototype.getOriginalResource = function (uri) {
        if (!this.features.supportsOriginalResource) {
            return winjs_base_1.TPromise.as(null);
        }
        return this.proxy.$getOriginalResource(this.id, uri);
    };
    MainThreadSCMProvider.prototype.onDidChangeProvider = function (provider) {
        // if (provider === this) {
        // 	return
        // }
    };
    MainThreadSCMProvider.prototype.$onChange = function (rawResourceGroups, count, state) {
        this._resources = rawResourceGroups.map(function (rawGroup) {
            var id = rawGroup[0], label = rawGroup[1], rawResources = rawGroup[2];
            var resources = rawResources.map(function (rawResource) {
                var uri = rawResource[0], icons = rawResource[1], strikeThrough = rawResource[2];
                var icon = icons[0];
                var iconDark = icons[1] || icon;
                var decorations = {
                    icon: icon && uri_1.default.parse(icon),
                    iconDark: iconDark && uri_1.default.parse(iconDark),
                    strikeThrough: strikeThrough
                };
                return {
                    resourceGroupId: id,
                    uri: uri_1.default.parse(uri),
                    decorations: decorations
                };
            });
            return { id: id, label: label, resources: resources };
        });
        this._count = count;
        this._state = state;
        this._onDidChange.fire(this.resources);
    };
    MainThreadSCMProvider.prototype.dispose = function () {
        this.disposables = lifecycle_1.dispose(this.disposables);
    };
    return MainThreadSCMProvider;
}());
MainThreadSCMProvider = __decorate([
    __param(3, scm_1.ISCMService),
    __param(4, commands_1.ICommandService)
], MainThreadSCMProvider);
var MainThreadSCM = (function (_super) {
    __extends(MainThreadSCM, _super);
    function MainThreadSCM(threadService, instantiationService, scmService) {
        var _this = _super.call(this) || this;
        _this.instantiationService = instantiationService;
        _this.scmService = scmService;
        _this.providers = Object.create(null);
        _this.proxy = threadService.get(extHost_protocol_1.ExtHostContext.ExtHostSCM);
        _this.inputBoxListener = _this.scmService.input.onDidChange(function (value) {
            _this.proxy.$onInputBoxValueChange(value);
        });
        return _this;
    }
    MainThreadSCM.prototype.$register = function (id, features) {
        this.providers[id] = this.instantiationService.createInstance(MainThreadSCMProvider, id, this.proxy, features);
    };
    MainThreadSCM.prototype.$unregister = function (id) {
        var provider = this.providers[id];
        if (!provider) {
            return;
        }
        provider.dispose();
        delete this.providers[id];
    };
    MainThreadSCM.prototype.$onChange = function (id, rawResourceGroups, count, state) {
        var provider = this.providers[id];
        if (!provider) {
            return;
        }
        provider.$onChange(rawResourceGroups, count, state);
    };
    MainThreadSCM.prototype.$setInputBoxValue = function (value) {
        this.scmService.input.value = value;
    };
    MainThreadSCM.prototype.dispose = function () {
        var _this = this;
        Object.keys(this.providers)
            .forEach(function (id) { return _this.providers[id].dispose(); });
        this.providers = Object.create(null);
        this.inputBoxListener = lifecycle_1.dispose(this.inputBoxListener);
    };
    return MainThreadSCM;
}(extHost_protocol_1.MainThreadSCMShape));
MainThreadSCM = __decorate([
    __param(0, threadService_1.IThreadService),
    __param(1, instantiation_1.IInstantiationService),
    __param(2, scm_1.ISCMService)
], MainThreadSCM);
exports.MainThreadSCM = MainThreadSCM;
