/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var uri_1 = require("vs/base/common/uri");
var winjs_base_1 = require("vs/base/common/winjs.base");
var event_1 = require("vs/base/common/event");
var async_1 = require("vs/base/common/async");
var extHostTypes_1 = require("vs/workbench/api/node/extHostTypes");
var extHost_protocol_1 = require("./extHost.protocol");
function getIconPath(decorations) {
    if (!decorations) {
        return undefined;
    }
    else if (typeof decorations.iconPath === 'string') {
        return uri_1.default.file(decorations.iconPath).toString();
    }
    else if (decorations.iconPath) {
        return "" + decorations.iconPath;
    }
    return undefined;
}
var ExtHostSCMInputBox = (function () {
    function ExtHostSCMInputBox(_proxy) {
        this._proxy = _proxy;
        this._value = '';
        this._onDidChange = new event_1.Emitter();
        // noop
    }
    Object.defineProperty(ExtHostSCMInputBox.prototype, "value", {
        get: function () {
            return this._value;
        },
        set: function (value) {
            this._proxy.$setInputBoxValue(value);
            this.updateValue(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ExtHostSCMInputBox.prototype, "onDidChange", {
        get: function () {
            return this._onDidChange.event;
        },
        enumerable: true,
        configurable: true
    });
    ExtHostSCMInputBox.prototype.$onInputBoxValueChange = function (value) {
        this.updateValue(value);
    };
    ExtHostSCMInputBox.prototype.updateValue = function (value) {
        this._value = value;
        this._onDidChange.fire(value);
    };
    return ExtHostSCMInputBox;
}());
var ExtHostSCM = (function () {
    function ExtHostSCM(threadService) {
        this._providers = Object.create(null);
        this._onDidChangeActiveProvider = new event_1.Emitter();
        this.cache = Object.create(null);
        this._proxy = threadService.get(extHost_protocol_1.MainContext.MainThreadSCM);
        this._inputBox = new ExtHostSCMInputBox(this._proxy);
    }
    Object.defineProperty(ExtHostSCM.prototype, "onDidChangeActiveProvider", {
        get: function () { return this._onDidChangeActiveProvider.event; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ExtHostSCM.prototype, "activeProvider", {
        get: function () { return this._activeProvider; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ExtHostSCM.prototype, "inputBox", {
        get: function () { return this._inputBox; },
        enumerable: true,
        configurable: true
    });
    ExtHostSCM.prototype.getResourceFromURI = function (uri) {
        if (uri.scheme !== 'scm') {
            return undefined;
        }
        var providerId = uri.authority;
        var providerCache = this.cache[providerId];
        if (!providerCache) {
            return undefined;
        }
        var match = /^\/([^/]+)(\/(.*))?$/.exec(uri.path);
        if (!match) {
            return undefined;
        }
        var resourceGroupId = match[1];
        var resourceGroupRef = providerCache[resourceGroupId];
        if (!resourceGroupRef) {
            return undefined;
        }
        var rawResourceUri = match[3];
        if (!rawResourceUri) {
            return resourceGroupRef.resourceGroup;
        }
        var resourceUri;
        try {
            var rawResource = JSON.parse(rawResourceUri);
            var resource_1 = uri_1.default.from(rawResource);
            resourceUri = resource_1.toString();
        }
        catch (err) {
            resourceUri = undefined;
        }
        if (!resourceUri) {
            return undefined;
        }
        var resource = resourceGroupRef.resources[resourceUri];
        if (!resource) {
            return undefined;
        }
        return resource;
    };
    ExtHostSCM.prototype.registerSCMProvider = function (providerId, provider) {
        var _this = this;
        if (this._providers[providerId]) {
            throw new Error("Provider " + providerId + " already registered");
        }
        // TODO@joao: should pluck all the things out of the provider
        this._providers[providerId] = provider;
        this._proxy.$register(providerId, {
            label: provider.label,
            supportsOpen: !!provider.open,
            supportsAcceptChanges: !!provider.acceptChanges,
            supportsDrag: !!provider.drag,
            supportsOriginalResource: !!provider.getOriginalResource
        });
        var onDidChange = event_1.debounceEvent(provider.onDidChange, function (l, e) { return e; }, 100);
        var onDidChangeListener = onDidChange(function (resourceGroups) {
            _this.cache[providerId] = Object.create(null);
            var rawResourceGroups = resourceGroups.map(function (g) {
                var resources = Object.create(null);
                var rawResources = g.resources.map(function (r) {
                    var uri = r.uri.toString();
                    var iconPath = getIconPath(r.decorations);
                    var lightIconPath = r.decorations && getIconPath(r.decorations.light) || iconPath;
                    var darkIconPath = r.decorations && getIconPath(r.decorations.dark) || iconPath;
                    var icons = [];
                    if (lightIconPath || darkIconPath) {
                        icons.push(lightIconPath);
                    }
                    if (darkIconPath !== lightIconPath) {
                        icons.push(darkIconPath);
                    }
                    var strikeThrough = r.decorations && !!r.decorations.strikeThrough;
                    resources[uri] = r;
                    return [uri, icons, strikeThrough];
                });
                _this.cache[providerId][g.id] = { resourceGroup: g, resources: resources };
                return [g.id, g.label, rawResources];
            });
            _this._proxy.$onChange(providerId, rawResourceGroups, provider.count, provider.state);
        });
        return new extHostTypes_1.Disposable(function () {
            onDidChangeListener.dispose();
            delete _this._providers[providerId];
            _this._proxy.$unregister(providerId);
        });
    };
    ExtHostSCM.prototype.$open = function (providerId, resourceGroupId, uri) {
        var provider = this._providers[providerId];
        if (!provider) {
            return winjs_base_1.TPromise.as(null);
        }
        var providerCache = this.cache[providerId];
        var resourceGroup = providerCache[resourceGroupId];
        var resource = resourceGroup && resourceGroup.resources[uri];
        if (!resource) {
            return winjs_base_1.TPromise.as(null);
        }
        return async_1.asWinJsPromise(function (token) { return provider.open(resource, token); });
    };
    ExtHostSCM.prototype.$acceptChanges = function (providerId) {
        var provider = this._providers[providerId];
        if (!provider) {
            return winjs_base_1.TPromise.as(null);
        }
        return async_1.asWinJsPromise(function (token) { return provider.acceptChanges(token); });
    };
    ExtHostSCM.prototype.$drag = function (providerId, fromResourceGroupId, fromUri, toResourceGroupId) {
        var provider = this._providers[providerId];
        if (!provider) {
            return winjs_base_1.TPromise.as(null);
        }
        var providerCache = this.cache[providerId];
        var fromResourceGroup = providerCache[fromResourceGroupId];
        var resource = fromResourceGroup && fromResourceGroup.resources[fromUri];
        var toResourceGroup = providerCache[toResourceGroupId];
        var resourceGroup = toResourceGroup && toResourceGroup.resourceGroup;
        if (!resource || !resourceGroup) {
            return winjs_base_1.TPromise.as(null);
        }
        return async_1.asWinJsPromise(function (token) { return provider.drag(resource, resourceGroup, token); });
    };
    ExtHostSCM.prototype.$getOriginalResource = function (id, uri) {
        var provider = this._providers[id];
        if (!provider) {
            return winjs_base_1.TPromise.as(null);
        }
        return async_1.asWinJsPromise(function (token) { return provider.getOriginalResource(uri, token); });
    };
    ExtHostSCM.prototype.$onInputBoxValueChange = function (value) {
        this._inputBox.$onInputBoxValueChange(value);
        return winjs_base_1.TPromise.as(null);
    };
    return ExtHostSCM;
}());
exports.ExtHostSCM = ExtHostSCM;
