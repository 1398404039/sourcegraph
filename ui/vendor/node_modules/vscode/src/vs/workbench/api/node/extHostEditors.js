/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var errors_1 = require("vs/base/common/errors");
var arrays_1 = require("vs/base/common/arrays");
var idGenerator_1 = require("vs/base/common/idGenerator");
var event_1 = require("vs/base/common/event");
var winjs_base_1 = require("vs/base/common/winjs.base");
var extHostTypes_1 = require("./extHostTypes");
var TypeConverters = require("./extHostTypeConverters");
var extHost_protocol_1 = require("./extHost.protocol");
var ExtHostEditors = (function (_super) {
    __extends(ExtHostEditors, _super);
    function ExtHostEditors(threadService, extHostDocuments) {
        var _this = _super.call(this) || this;
        _this._onDidChangeTextEditorSelection = new event_1.Emitter();
        _this.onDidChangeTextEditorSelection = _this._onDidChangeTextEditorSelection.event;
        _this._onDidChangeTextEditorOptions = new event_1.Emitter();
        _this.onDidChangeTextEditorOptions = _this._onDidChangeTextEditorOptions.event;
        _this._onDidChangeTextEditorViewColumn = new event_1.Emitter();
        _this.onDidChangeTextEditorViewColumn = _this._onDidChangeTextEditorViewColumn.event;
        _this._extHostDocuments = extHostDocuments;
        _this._proxy = threadService.get(extHost_protocol_1.MainContext.MainThreadEditors);
        _this._onDidChangeActiveTextEditor = new event_1.Emitter();
        _this._onDidChangeVisibleTextEditors = new event_1.Emitter();
        _this._editors = Object.create(null);
        _this._visibleEditorIds = [];
        return _this;
    }
    ExtHostEditors.prototype.getActiveTextEditor = function () {
        return this._editors[this._activeEditorId];
    };
    ExtHostEditors.prototype.getVisibleTextEditors = function () {
        var _this = this;
        return this._visibleEditorIds.map(function (id) { return _this._editors[id]; });
    };
    Object.defineProperty(ExtHostEditors.prototype, "onDidChangeActiveTextEditor", {
        get: function () {
            return this._onDidChangeActiveTextEditor && this._onDidChangeActiveTextEditor.event;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ExtHostEditors.prototype, "onDidChangeVisibleTextEditors", {
        get: function () {
            return this._onDidChangeVisibleTextEditors && this._onDidChangeVisibleTextEditors.event;
        },
        enumerable: true,
        configurable: true
    });
    ExtHostEditors.prototype.showTextDocument = function (document, column, preserveFocus) {
        var _this = this;
        return this._proxy.$tryShowTextDocument(document.uri, TypeConverters.fromViewColumn(column), preserveFocus).then(function (id) {
            var editor = _this._editors[id];
            if (editor) {
                return editor;
            }
            else {
                throw new Error("Failed to show text document " + document.uri.toString() + ", should show in editor #" + id);
            }
        });
    };
    ExtHostEditors.prototype.createTextEditorDecorationType = function (options) {
        return new TextEditorDecorationType(this._proxy, options);
    };
    // --- called from main thread
    ExtHostEditors.prototype.$acceptTextEditorAdd = function (data) {
        var document = this._extHostDocuments.getDocumentData(data.document);
        var newEditor = new ExtHostTextEditor(this._proxy, data.id, document, data.selections.map(TypeConverters.toSelection), data.options, TypeConverters.toViewColumn(data.editorPosition));
        this._editors[data.id] = newEditor;
    };
    ExtHostEditors.prototype.$acceptOptionsChanged = function (id, opts) {
        var editor = this._editors[id];
        editor._acceptOptions(opts);
        this._onDidChangeTextEditorOptions.fire({
            textEditor: editor,
            options: opts
        });
    };
    ExtHostEditors.prototype.$acceptSelectionsChanged = function (id, event) {
        var kind = extHostTypes_1.TextEditorSelectionChangeKind.fromValue(event.source);
        var selections = event.selections.map(TypeConverters.toSelection);
        var textEditor = this._editors[id];
        textEditor._acceptSelections(selections);
        this._onDidChangeTextEditorSelection.fire({
            textEditor: textEditor,
            selections: selections,
            kind: kind
        });
    };
    ExtHostEditors.prototype.$acceptActiveEditorAndVisibleEditors = function (id, visibleIds) {
        var visibleChanged = false;
        var activeChanged = false;
        if (!arrays_1.equals(this._visibleEditorIds, visibleIds)) {
            this._visibleEditorIds = visibleIds;
            visibleChanged = true;
        }
        if (this._activeEditorId !== id) {
            this._activeEditorId = id;
            activeChanged = true;
        }
        if (visibleChanged) {
            this._onDidChangeVisibleTextEditors.fire(this.getVisibleTextEditors());
        }
        if (activeChanged) {
            this._onDidChangeActiveTextEditor.fire(this.getActiveTextEditor());
        }
    };
    ExtHostEditors.prototype.$acceptEditorPositionData = function (data) {
        for (var id in data) {
            var textEditor = this._editors[id];
            var viewColumn = TypeConverters.toViewColumn(data[id]);
            if (textEditor.viewColumn !== viewColumn) {
                textEditor._acceptViewColumn(viewColumn);
                this._onDidChangeTextEditorViewColumn.fire({ textEditor: textEditor, viewColumn: viewColumn });
            }
        }
    };
    ExtHostEditors.prototype.$acceptTextEditorRemove = function (id) {
        // make sure the removed editor is not visible
        var newVisibleEditors = this._visibleEditorIds.filter(function (visibleEditorId) { return visibleEditorId !== id; });
        if (this._activeEditorId === id) {
            // removing the current active editor
            this.$acceptActiveEditorAndVisibleEditors(undefined, newVisibleEditors);
        }
        else {
            this.$acceptActiveEditorAndVisibleEditors(this._activeEditorId, newVisibleEditors);
        }
        var editor = this._editors[id];
        editor.dispose();
        delete this._editors[id];
    };
    return ExtHostEditors;
}(extHost_protocol_1.ExtHostEditorsShape));
exports.ExtHostEditors = ExtHostEditors;
var TextEditorDecorationType = (function () {
    function TextEditorDecorationType(proxy, options) {
        this.key = TextEditorDecorationType._Keys.nextId();
        this._proxy = proxy;
        this._proxy.$registerTextEditorDecorationType(this.key, options);
    }
    TextEditorDecorationType.prototype.dispose = function () {
        this._proxy.$removeTextEditorDecorationType(this.key);
    };
    return TextEditorDecorationType;
}());
TextEditorDecorationType._Keys = new idGenerator_1.IdGenerator('TextEditorDecorationType');
var TextEditorEdit = (function () {
    function TextEditorEdit(document, options) {
        this._documentVersionId = document.version;
        this._collectedEdits = [];
        this._setEndOfLine = 0;
        this._undoStopBefore = options.undoStopBefore;
        this._undoStopAfter = options.undoStopAfter;
    }
    TextEditorEdit.prototype.finalize = function () {
        return {
            documentVersionId: this._documentVersionId,
            edits: this._collectedEdits,
            setEndOfLine: this._setEndOfLine,
            undoStopBefore: this._undoStopBefore,
            undoStopAfter: this._undoStopAfter
        };
    };
    TextEditorEdit.prototype.replace = function (location, value) {
        var range = null;
        if (location instanceof extHostTypes_1.Position) {
            range = new extHostTypes_1.Range(location, location);
        }
        else if (location instanceof extHostTypes_1.Range) {
            range = location;
        }
        else {
            throw new Error('Unrecognized location');
        }
        this._collectedEdits.push({
            range: range,
            text: value,
            forceMoveMarkers: false
        });
    };
    TextEditorEdit.prototype.insert = function (location, value) {
        this._collectedEdits.push({
            range: new extHostTypes_1.Range(location, location),
            text: value,
            forceMoveMarkers: true
        });
    };
    TextEditorEdit.prototype.delete = function (location) {
        var range = null;
        if (location instanceof extHostTypes_1.Range) {
            range = location;
        }
        else {
            throw new Error('Unrecognized location');
        }
        this._collectedEdits.push({
            range: range,
            text: null,
            forceMoveMarkers: true
        });
    };
    TextEditorEdit.prototype.setEndOfLine = function (endOfLine) {
        if (endOfLine !== extHostTypes_1.EndOfLine.LF && endOfLine !== extHostTypes_1.EndOfLine.CRLF) {
            throw errors_1.illegalArgument('endOfLine');
        }
        this._setEndOfLine = endOfLine;
    };
    return TextEditorEdit;
}());
exports.TextEditorEdit = TextEditorEdit;
function deprecated(name, message) {
    if (message === void 0) { message = 'Refer to the documentation for further details.'; }
    return function (target, key, descriptor) {
        var originalMethod = descriptor.value;
        descriptor.value = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            console.warn("[Deprecation Warning] method '" + name + "' is deprecated and should no longer be used. " + message);
            return originalMethod.apply(this, args);
        };
        return descriptor;
    };
}
var ExtHostTextEditorOptions = (function () {
    function ExtHostTextEditorOptions(proxy, id, source) {
        this._proxy = proxy;
        this._id = id;
        this._accept(source);
    }
    ExtHostTextEditorOptions.prototype._accept = function (source) {
        this._tabSize = source.tabSize;
        this._insertSpaces = source.insertSpaces;
        this._cursorStyle = source.cursorStyle;
        this._lineNumbers = source.lineNumbers;
    };
    Object.defineProperty(ExtHostTextEditorOptions.prototype, "tabSize", {
        get: function () {
            return this._tabSize;
        },
        set: function (value) {
            var tabSize = this._validateTabSize(value);
            if (tabSize === null) {
                // ignore invalid call
                return;
            }
            if (typeof tabSize === 'number') {
                if (this._tabSize === tabSize) {
                    // nothing to do
                    return;
                }
                // reflect the new tabSize value immediately
                this._tabSize = tabSize;
            }
            warnOnError(this._proxy.$trySetOptions(this._id, {
                tabSize: tabSize
            }));
        },
        enumerable: true,
        configurable: true
    });
    ExtHostTextEditorOptions.prototype._validateTabSize = function (value) {
        if (value === 'auto') {
            return 'auto';
        }
        if (typeof value === 'number') {
            var r = Math.floor(value);
            return (r > 0 ? r : null);
        }
        if (typeof value === 'string') {
            var r = parseInt(value, 10);
            if (isNaN(r)) {
                return null;
            }
            return (r > 0 ? r : null);
        }
        return null;
    };
    Object.defineProperty(ExtHostTextEditorOptions.prototype, "insertSpaces", {
        get: function () {
            return this._insertSpaces;
        },
        set: function (value) {
            var insertSpaces = this._validateInsertSpaces(value);
            if (typeof insertSpaces === 'boolean') {
                if (this._insertSpaces === insertSpaces) {
                    // nothing to do
                    return;
                }
                // reflect the new insertSpaces value immediately
                this._insertSpaces = insertSpaces;
            }
            warnOnError(this._proxy.$trySetOptions(this._id, {
                insertSpaces: insertSpaces
            }));
        },
        enumerable: true,
        configurable: true
    });
    ExtHostTextEditorOptions.prototype._validateInsertSpaces = function (value) {
        if (value === 'auto') {
            return 'auto';
        }
        return (value === 'false' ? false : Boolean(value));
    };
    Object.defineProperty(ExtHostTextEditorOptions.prototype, "cursorStyle", {
        get: function () {
            return this._cursorStyle;
        },
        set: function (value) {
            if (this._cursorStyle === value) {
                // nothing to do
                return;
            }
            this._cursorStyle = value;
            warnOnError(this._proxy.$trySetOptions(this._id, {
                cursorStyle: value
            }));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ExtHostTextEditorOptions.prototype, "lineNumbers", {
        get: function () {
            return this._lineNumbers;
        },
        set: function (value) {
            if (this._lineNumbers === value) {
                // nothing to do
                return;
            }
            this._lineNumbers = value;
            warnOnError(this._proxy.$trySetOptions(this._id, {
                lineNumbers: value
            }));
        },
        enumerable: true,
        configurable: true
    });
    ExtHostTextEditorOptions.prototype.assign = function (newOptions) {
        var bulkConfigurationUpdate = {};
        var hasUpdate = false;
        if (typeof newOptions.tabSize !== 'undefined') {
            var tabSize = this._validateTabSize(newOptions.tabSize);
            if (tabSize === 'auto') {
                hasUpdate = true;
                bulkConfigurationUpdate.tabSize = tabSize;
            }
            else if (typeof tabSize === 'number' && this._tabSize !== tabSize) {
                // reflect the new tabSize value immediately
                this._tabSize = tabSize;
                hasUpdate = true;
                bulkConfigurationUpdate.tabSize = tabSize;
            }
        }
        if (typeof newOptions.insertSpaces !== 'undefined') {
            var insertSpaces = this._validateInsertSpaces(newOptions.insertSpaces);
            if (insertSpaces === 'auto') {
                hasUpdate = true;
                bulkConfigurationUpdate.insertSpaces = insertSpaces;
            }
            else if (this._insertSpaces !== insertSpaces) {
                // reflect the new insertSpaces value immediately
                this._insertSpaces = insertSpaces;
                hasUpdate = true;
                bulkConfigurationUpdate.insertSpaces = insertSpaces;
            }
        }
        if (typeof newOptions.cursorStyle !== 'undefined') {
            if (this._cursorStyle !== newOptions.cursorStyle) {
                this._cursorStyle = newOptions.cursorStyle;
                hasUpdate = true;
                bulkConfigurationUpdate.cursorStyle = newOptions.cursorStyle;
            }
        }
        if (typeof newOptions.lineNumbers !== 'undefined') {
            if (this._lineNumbers !== newOptions.lineNumbers) {
                this._lineNumbers = newOptions.lineNumbers;
                hasUpdate = true;
                bulkConfigurationUpdate.lineNumbers = newOptions.lineNumbers;
            }
        }
        if (hasUpdate) {
            warnOnError(this._proxy.$trySetOptions(this._id, bulkConfigurationUpdate));
        }
    };
    return ExtHostTextEditorOptions;
}());
exports.ExtHostTextEditorOptions = ExtHostTextEditorOptions;
var ExtHostTextEditor = (function () {
    function ExtHostTextEditor(proxy, id, document, selections, options, viewColumn) {
        this._proxy = proxy;
        this._id = id;
        this._documentData = document;
        this._selections = selections;
        this._options = new ExtHostTextEditorOptions(this._proxy, this._id, options);
        this._viewColumn = viewColumn;
    }
    ExtHostTextEditor.prototype.dispose = function () {
        this._documentData = null;
    };
    ExtHostTextEditor.prototype.show = function (column) {
        this._proxy.$tryShowEditor(this._id, TypeConverters.fromViewColumn(column));
    };
    ExtHostTextEditor.prototype.hide = function () {
        this._proxy.$tryHideEditor(this._id);
    };
    Object.defineProperty(ExtHostTextEditor.prototype, "document", {
        // ---- the document
        get: function () {
            return this._documentData.document;
        },
        set: function (value) {
            throw errors_1.readonly('document');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ExtHostTextEditor.prototype, "options", {
        // ---- options
        get: function () {
            return this._options;
        },
        set: function (value) {
            this._options.assign(value);
        },
        enumerable: true,
        configurable: true
    });
    ExtHostTextEditor.prototype._acceptOptions = function (options) {
        this._options._accept(options);
    };
    Object.defineProperty(ExtHostTextEditor.prototype, "viewColumn", {
        // ---- view column
        get: function () {
            return this._viewColumn;
        },
        set: function (value) {
            throw errors_1.readonly('viewColumn');
        },
        enumerable: true,
        configurable: true
    });
    ExtHostTextEditor.prototype._acceptViewColumn = function (value) {
        this._viewColumn = value;
    };
    Object.defineProperty(ExtHostTextEditor.prototype, "selection", {
        // ---- selections
        get: function () {
            return this._selections && this._selections[0];
        },
        set: function (value) {
            if (!(value instanceof extHostTypes_1.Selection)) {
                throw errors_1.illegalArgument('selection');
            }
            this._selections = [value];
            this._trySetSelection(true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ExtHostTextEditor.prototype, "selections", {
        get: function () {
            return this._selections;
        },
        set: function (value) {
            if (!Array.isArray(value) || value.some(function (a) { return !(a instanceof extHostTypes_1.Selection); })) {
                throw errors_1.illegalArgument('selections');
            }
            this._selections = value;
            this._trySetSelection(true);
        },
        enumerable: true,
        configurable: true
    });
    ExtHostTextEditor.prototype.setDecorations = function (decorationType, ranges) {
        var _this = this;
        this._runOnProxy(function () { return _this._proxy.$trySetDecorations(_this._id, decorationType.key, TypeConverters.fromRangeOrRangeWithMessage(ranges)); }, true);
    };
    ExtHostTextEditor.prototype.revealRange = function (range, revealType) {
        var _this = this;
        this._runOnProxy(function () { return _this._proxy.$tryRevealRange(_this._id, TypeConverters.fromRange(range), (revealType || extHostTypes_1.TextEditorRevealType.Default)); }, true);
    };
    ExtHostTextEditor.prototype._trySetSelection = function (silent) {
        var _this = this;
        var selection = this._selections.map(TypeConverters.fromSelection);
        return this._runOnProxy(function () { return _this._proxy.$trySetSelections(_this._id, selection); }, silent);
    };
    ExtHostTextEditor.prototype._acceptSelections = function (selections) {
        this._selections = selections;
    };
    // ---- editing
    ExtHostTextEditor.prototype.edit = function (callback, options) {
        if (options === void 0) { options = { undoStopBefore: true, undoStopAfter: true }; }
        var edit = new TextEditorEdit(this._documentData.document, options);
        callback(edit);
        return this._applyEdit(edit);
    };
    ExtHostTextEditor.prototype._applyEdit = function (editBuilder) {
        var editData = editBuilder.finalize();
        // prepare data for serialization
        var edits = editData.edits.map(function (edit) {
            return {
                range: TypeConverters.fromRange(edit.range),
                text: edit.text,
                forceMoveMarkers: edit.forceMoveMarkers
            };
        });
        return this._proxy.$tryApplyEdits(this._id, editData.documentVersionId, edits, {
            setEndOfLine: editData.setEndOfLine,
            undoStopBefore: editData.undoStopBefore,
            undoStopAfter: editData.undoStopAfter
        });
    };
    // ---- util
    ExtHostTextEditor.prototype._runOnProxy = function (callback, silent) {
        var _this = this;
        return callback().then(function () { return _this; }, function (err) {
            if (!silent) {
                return winjs_base_1.TPromise.wrapError(silent);
            }
            console.warn(err);
        });
    };
    return ExtHostTextEditor;
}());
__decorate([
    deprecated('TextEditor.show')
], ExtHostTextEditor.prototype, "show", null);
__decorate([
    deprecated('TextEditor.hide')
], ExtHostTextEditor.prototype, "hide", null);
function warnOnError(promise) {
    promise.then(null, function (err) {
        console.warn(err);
    });
}
