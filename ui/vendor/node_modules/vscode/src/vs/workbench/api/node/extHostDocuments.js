/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var errors_1 = require("vs/base/common/errors");
var strings_1 = require("vs/base/common/strings");
var mirrorModel2_1 = require("vs/editor/common/model/mirrorModel2");
var event_1 = require("vs/base/common/event");
var extHostTypes_1 = require("vs/workbench/api/node/extHostTypes");
var TypeConverters = require("./extHostTypeConverters");
var winjs_base_1 = require("vs/base/common/winjs.base");
var async_1 = require("vs/base/common/async");
var wordHelper_1 = require("vs/editor/common/model/wordHelper");
var extHost_protocol_1 = require("./extHost.protocol");
var _modeId2WordDefinition = Object.create(null);
function setWordDefinitionFor(modeId, wordDefinition) {
    _modeId2WordDefinition[modeId] = wordDefinition;
}
function getWordDefinitionFor(modeId) {
    return _modeId2WordDefinition[modeId];
}
var ExtHostDocuments = (function (_super) {
    __extends(ExtHostDocuments, _super);
    function ExtHostDocuments(threadService) {
        var _this = _super.call(this) || this;
        _this._proxy = threadService.get(extHost_protocol_1.MainContext.MainThreadDocuments);
        _this._onDidAddDocumentEventEmitter = new event_1.Emitter();
        _this.onDidAddDocument = _this._onDidAddDocumentEventEmitter.event;
        _this._onDidRemoveDocumentEventEmitter = new event_1.Emitter();
        _this.onDidRemoveDocument = _this._onDidRemoveDocumentEventEmitter.event;
        _this._onDidChangeDocumentEventEmitter = new event_1.Emitter();
        _this.onDidChangeDocument = _this._onDidChangeDocumentEventEmitter.event;
        _this._onDidSaveDocumentEventEmitter = new event_1.Emitter();
        _this.onDidSaveDocument = _this._onDidSaveDocumentEventEmitter.event;
        _this._documentData = Object.create(null);
        _this._documentLoader = Object.create(null);
        _this._documentContentProviders = Object.create(null);
        return _this;
    }
    ExtHostDocuments.prototype.getAllDocumentData = function () {
        var result = [];
        for (var key in this._documentData) {
            result.push(this._documentData[key]);
        }
        return result;
    };
    ExtHostDocuments.prototype.getDocumentData = function (resource) {
        if (!resource) {
            return;
        }
        var data = this._documentData[resource.toString()];
        if (data) {
            return data;
        }
    };
    ExtHostDocuments.prototype.ensureDocumentData = function (uri) {
        var _this = this;
        var cached = this._documentData[uri.toString()];
        if (cached) {
            return winjs_base_1.TPromise.as(cached);
        }
        var promise = this._documentLoader[uri.toString()];
        if (!promise) {
            promise = this._proxy.$tryOpenDocument(uri).then(function () {
                delete _this._documentLoader[uri.toString()];
                return _this._documentData[uri.toString()];
            }, function (err) {
                delete _this._documentLoader[uri.toString()];
                return winjs_base_1.TPromise.wrapError(err);
            });
            this._documentLoader[uri.toString()] = promise;
        }
        return promise;
    };
    ExtHostDocuments.prototype.registerTextDocumentContentProvider = function (scheme, provider) {
        var _this = this;
        if (scheme === 'file' || scheme === 'untitled') {
            throw new Error("scheme '" + scheme + "' already registered");
        }
        var handle = ExtHostDocuments._handlePool++;
        this._documentContentProviders[handle] = provider;
        this._proxy.$registerTextContentProvider(handle, scheme);
        var subscription;
        if (typeof provider.onDidChange === 'function') {
            subscription = provider.onDidChange(function (uri) {
                if (_this._documentData[uri.toString()]) {
                    _this.$provideTextDocumentContent(handle, uri).then(function (value) {
                        return _this._proxy.$onVirtualDocumentChange(uri, value);
                    }, errors_1.onUnexpectedError);
                }
            });
        }
        return new extHostTypes_1.Disposable(function () {
            if (delete _this._documentContentProviders[handle]) {
                _this._proxy.$unregisterTextContentProvider(handle);
            }
            if (subscription) {
                subscription.dispose();
                subscription = undefined;
            }
        });
    };
    ExtHostDocuments.prototype.$provideTextDocumentContent = function (handle, uri) {
        var provider = this._documentContentProviders[handle];
        if (!provider) {
            return winjs_base_1.TPromise.wrapError("unsupported uri-scheme: " + uri.scheme);
        }
        return async_1.asWinJsPromise(function (token) { return provider.provideTextDocumentContent(uri, token); });
    };
    ExtHostDocuments.prototype.$acceptModelAdd = function (initData) {
        var data = new ExtHostDocumentData(this._proxy, initData.url, initData.value.lines, initData.value.EOL, initData.modeId, initData.versionId, initData.isDirty);
        var key = data.document.uri.toString();
        if (this._documentData[key]) {
            throw new Error('Document `' + key + '` already exists.');
        }
        this._documentData[key] = data;
        this._onDidAddDocumentEventEmitter.fire(data.document);
    };
    ExtHostDocuments.prototype.$acceptModelModeChanged = function (strURL, oldModeId, newModeId) {
        var data = this._documentData[strURL];
        // Treat a mode change as a remove + add
        this._onDidRemoveDocumentEventEmitter.fire(data.document);
        data._acceptLanguageId(newModeId);
        this._onDidAddDocumentEventEmitter.fire(data.document);
    };
    ExtHostDocuments.prototype.$acceptModelSaved = function (strURL) {
        var data = this._documentData[strURL];
        data._acceptIsDirty(false);
        this._onDidSaveDocumentEventEmitter.fire(data.document);
    };
    ExtHostDocuments.prototype.$acceptModelDirty = function (strURL) {
        var document = this._documentData[strURL];
        document._acceptIsDirty(true);
    };
    ExtHostDocuments.prototype.$acceptModelReverted = function (strURL) {
        var document = this._documentData[strURL];
        document._acceptIsDirty(false);
    };
    ExtHostDocuments.prototype.$acceptModelRemoved = function (strURL) {
        if (!this._documentData[strURL]) {
            throw new Error('Document `' + strURL + '` does not exist.');
        }
        var data = this._documentData[strURL];
        delete this._documentData[strURL];
        this._onDidRemoveDocumentEventEmitter.fire(data.document);
        data.dispose();
    };
    ExtHostDocuments.prototype.$acceptModelChanged = function (strURL, events, isDirty) {
        var data = this._documentData[strURL];
        data._acceptIsDirty(isDirty);
        data.onEvents(events);
        this._onDidChangeDocumentEventEmitter.fire({
            document: data.document,
            contentChanges: events.map(function (e) {
                return {
                    range: TypeConverters.toRange(e.range),
                    rangeLength: e.rangeLength,
                    text: e.text
                };
            })
        });
    };
    ExtHostDocuments.prototype.setWordDefinitionFor = function (modeId, wordDefinition) {
        setWordDefinitionFor(modeId, wordDefinition);
    };
    return ExtHostDocuments;
}(extHost_protocol_1.ExtHostDocumentsShape));
ExtHostDocuments._handlePool = 0;
exports.ExtHostDocuments = ExtHostDocuments;
var ExtHostDocumentData = (function (_super) {
    __extends(ExtHostDocumentData, _super);
    function ExtHostDocumentData(proxy, uri, lines, eol, languageId, versionId, isDirty) {
        var _this = _super.call(this, uri, lines, eol, versionId) || this;
        _this._proxy = proxy;
        _this._languageId = languageId;
        _this._isDirty = isDirty;
        _this._textLines = [];
        return _this;
    }
    ExtHostDocumentData.prototype.dispose = function () {
        this._textLines.length = 0;
        this._isDirty = false;
        _super.prototype.dispose.call(this);
    };
    Object.defineProperty(ExtHostDocumentData.prototype, "document", {
        get: function () {
            if (!this._document) {
                var data_1 = this;
                this._document = {
                    get uri() { return data_1._uri; },
                    get fileName() { return data_1._uri.fsPath; },
                    get isUntitled() { return data_1._uri.scheme !== 'file'; },
                    get languageId() { return data_1._languageId; },
                    get version() { return data_1._versionId; },
                    get isDirty() { return data_1._isDirty; },
                    save: function () { return data_1._proxy.$trySaveDocument(data_1._uri); },
                    revert: function () { return data_1._proxy.$tryRevertAll([data_1._uri]); },
                    getText: function (range) { return range ? data_1._getTextInRange(range) : data_1.getText(); },
                    get lineCount() { return data_1._lines.length; },
                    lineAt: function (lineOrPos) { return data_1.lineAt(lineOrPos); },
                    offsetAt: function (pos) { return data_1.offsetAt(pos); },
                    positionAt: function (offset) { return data_1.positionAt(offset); },
                    validateRange: function (ran) { return data_1.validateRange(ran); },
                    validatePosition: function (pos) { return data_1.validatePosition(pos); },
                    getWordRangeAtPosition: function (pos, regexp) { return data_1.getWordRangeAtPosition(pos, regexp); }
                };
            }
            return this._document;
        },
        enumerable: true,
        configurable: true
    });
    ExtHostDocumentData.prototype._acceptLanguageId = function (newLanguageId) {
        this._languageId = newLanguageId;
    };
    ExtHostDocumentData.prototype._acceptIsDirty = function (isDirty) {
        this._isDirty = isDirty;
    };
    ExtHostDocumentData.prototype._getTextInRange = function (_range) {
        var range = this.validateRange(_range);
        if (range.isEmpty) {
            return '';
        }
        if (range.isSingleLine) {
            return this._lines[range.start.line].substring(range.start.character, range.end.character);
        }
        var lineEnding = this._eol, startLineIndex = range.start.line, endLineIndex = range.end.line, resultLines = [];
        resultLines.push(this._lines[startLineIndex].substring(range.start.character));
        for (var i = startLineIndex + 1; i < endLineIndex; i++) {
            resultLines.push(this._lines[i]);
        }
        resultLines.push(this._lines[endLineIndex].substring(0, range.end.character));
        return resultLines.join(lineEnding);
    };
    ExtHostDocumentData.prototype.lineAt = function (lineOrPosition) {
        var line;
        if (lineOrPosition instanceof extHostTypes_1.Position) {
            line = lineOrPosition.line;
        }
        else if (typeof lineOrPosition === 'number') {
            line = lineOrPosition;
        }
        if (line < 0 || line >= this._lines.length) {
            throw new Error('Illegal value for `line`');
        }
        var result = this._textLines[line];
        if (!result || result.lineNumber !== line || result.text !== this._lines[line]) {
            var text = this._lines[line];
            var firstNonWhitespaceCharacterIndex = /^(\s*)/.exec(text)[1].length;
            var range = new extHostTypes_1.Range(line, 0, line, text.length);
            var rangeIncludingLineBreak = line < this._lines.length - 1
                ? new extHostTypes_1.Range(line, 0, line + 1, 0)
                : range;
            result = Object.freeze({
                lineNumber: line,
                range: range,
                rangeIncludingLineBreak: rangeIncludingLineBreak,
                text: text,
                firstNonWhitespaceCharacterIndex: firstNonWhitespaceCharacterIndex,
                isEmptyOrWhitespace: firstNonWhitespaceCharacterIndex === text.length
            });
            this._textLines[line] = result;
        }
        return result;
    };
    ExtHostDocumentData.prototype.offsetAt = function (position) {
        position = this.validatePosition(position);
        this._ensureLineStarts();
        return this._lineStarts.getAccumulatedValue(position.line - 1) + position.character;
    };
    ExtHostDocumentData.prototype.positionAt = function (offset) {
        offset = Math.floor(offset);
        offset = Math.max(0, offset);
        this._ensureLineStarts();
        var out = this._lineStarts.getIndexOf(offset);
        var lineLength = this._lines[out.index].length;
        // Ensure we return a valid position
        return new extHostTypes_1.Position(out.index, Math.min(out.remainder, lineLength));
    };
    // ---- range math
    ExtHostDocumentData.prototype.validateRange = function (range) {
        if (!(range instanceof extHostTypes_1.Range)) {
            throw new Error('Invalid argument');
        }
        var start = this.validatePosition(range.start);
        var end = this.validatePosition(range.end);
        if (start === range.start && end === range.end) {
            return range;
        }
        return new extHostTypes_1.Range(start.line, start.character, end.line, end.character);
    };
    ExtHostDocumentData.prototype.validatePosition = function (position) {
        if (!(position instanceof extHostTypes_1.Position)) {
            throw new Error('Invalid argument');
        }
        var line = position.line, character = position.character;
        var hasChanged = false;
        if (line < 0) {
            line = 0;
            character = 0;
            hasChanged = true;
        }
        else if (line >= this._lines.length) {
            line = this._lines.length - 1;
            character = this._lines[line].length;
            hasChanged = true;
        }
        else {
            var maxCharacter = this._lines[line].length;
            if (character < 0) {
                character = 0;
                hasChanged = true;
            }
            else if (character > maxCharacter) {
                character = maxCharacter;
                hasChanged = true;
            }
        }
        if (!hasChanged) {
            return position;
        }
        return new extHostTypes_1.Position(line, character);
    };
    ExtHostDocumentData.prototype.getWordRangeAtPosition = function (_position, regexp) {
        var position = this.validatePosition(_position);
        if (!regexp || strings_1.regExpLeadsToEndlessLoop(regexp)) {
            regexp = getWordDefinitionFor(this._languageId);
        }
        var wordAtText = wordHelper_1.getWordAtText(position.character + 1, wordHelper_1.ensureValidWordDefinition(regexp), this._lines[position.line], 0);
        if (wordAtText) {
            return new extHostTypes_1.Range(position.line, wordAtText.startColumn - 1, position.line, wordAtText.endColumn - 1);
        }
    };
    return ExtHostDocumentData;
}(mirrorModel2_1.MirrorModel2));
exports.ExtHostDocumentData = ExtHostDocumentData;
