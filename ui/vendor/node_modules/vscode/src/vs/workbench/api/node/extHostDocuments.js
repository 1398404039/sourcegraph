/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var errors_1 = require("vs/base/common/errors");
var editorCommon = require("vs/editor/common/editorCommon");
var event_1 = require("vs/base/common/event");
var lifecycle_1 = require("vs/base/common/lifecycle");
var extHostTypes_1 = require("vs/workbench/api/node/extHostTypes");
var TypeConverters = require("./extHostTypeConverters");
var winjs_base_1 = require("vs/base/common/winjs.base");
var async_1 = require("vs/base/common/async");
var textSource_1 = require("vs/editor/common/model/textSource");
var extHost_protocol_1 = require("./extHost.protocol");
var extHostDocumentData_1 = require("./extHostDocumentData");
var ExtHostDocuments = (function (_super) {
    __extends(ExtHostDocuments, _super);
    function ExtHostDocuments(threadService, documentsAndEditors) {
        var _this = _super.call(this) || this;
        _this._onDidAddDocument = new event_1.Emitter();
        _this._onDidRemoveDocument = new event_1.Emitter();
        _this._onDidChangeDocument = new event_1.Emitter();
        _this._onDidSaveDocument = new event_1.Emitter();
        _this.onDidAddDocument = _this._onDidAddDocument.event;
        _this.onDidRemoveDocument = _this._onDidRemoveDocument.event;
        _this.onDidChangeDocument = _this._onDidChangeDocument.event;
        _this.onDidSaveDocument = _this._onDidSaveDocument.event;
        _this._documentLoader = new Map();
        _this._documentContentProviders = new Map();
        _this._proxy = threadService.get(extHost_protocol_1.MainContext.MainThreadDocuments);
        _this._documentsAndEditors = documentsAndEditors;
        _this._toDispose = [
            _this._documentsAndEditors.onDidRemoveDocuments(function (documents) {
                for (var _i = 0, documents_1 = documents; _i < documents_1.length; _i++) {
                    var data = documents_1[_i];
                    _this._onDidRemoveDocument.fire(data.document);
                }
            }),
            _this._documentsAndEditors.onDidAddDocuments(function (documents) {
                for (var _i = 0, documents_2 = documents; _i < documents_2.length; _i++) {
                    var data = documents_2[_i];
                    _this._onDidAddDocument.fire(data.document);
                }
            })
        ];
        return _this;
    }
    ExtHostDocuments.prototype.dispose = function () {
        lifecycle_1.dispose(this._toDispose);
    };
    ExtHostDocuments.prototype.getAllDocumentData = function () {
        return this._documentsAndEditors.allDocuments();
    };
    ExtHostDocuments.prototype.getDocumentData = function (resource) {
        if (!resource) {
            return undefined;
        }
        var data = this._documentsAndEditors.getDocument(resource.toString());
        if (data) {
            return data;
        }
        return undefined;
    };
    ExtHostDocuments.prototype.ensureDocumentData = function (uri) {
        var _this = this;
        var cached = this._documentsAndEditors.getDocument(uri.toString());
        if (cached) {
            return winjs_base_1.TPromise.as(cached);
        }
        var promise = this._documentLoader.get(uri.toString());
        if (!promise) {
            promise = this._proxy.$tryOpenDocument(uri).then(function () {
                _this._documentLoader.delete(uri.toString());
                return _this._documentsAndEditors.getDocument(uri.toString());
            }, function (err) {
                _this._documentLoader.delete(uri.toString());
                return winjs_base_1.TPromise.wrapError(err);
            });
            this._documentLoader.set(uri.toString(), promise);
        }
        return promise;
    };
    ExtHostDocuments.prototype.createDocumentData = function (options) {
        return this._proxy.$tryCreateDocument(options);
    };
    ExtHostDocuments.prototype.registerTextDocumentContentProvider = function (scheme, provider) {
        var _this = this;
        if (scheme === 'file' || scheme === 'untitled') {
            throw new Error("scheme '" + scheme + "' already registered");
        }
        var handle = ExtHostDocuments._handlePool++;
        this._documentContentProviders.set(handle, provider);
        this._proxy.$registerTextContentProvider(handle, scheme);
        var subscription;
        if (typeof provider.onDidChange === 'function') {
            subscription = provider.onDidChange(function (uri) {
                if (_this._documentsAndEditors.getDocument(uri.toString())) {
                    _this.$provideTextDocumentContent(handle, uri).then(function (value) {
                        var document = _this._documentsAndEditors.getDocument(uri.toString());
                        if (!document) {
                            // disposed in the meantime
                            return;
                        }
                        // create lines and compare
                        var textSource = textSource_1.TextSource.fromString(value, editorCommon.DefaultEndOfLine.CRLF);
                        // broadcast event when content changed
                        if (!document.equalLines(textSource)) {
                            return _this._proxy.$onVirtualDocumentChange(uri, textSource);
                        }
                    }, errors_1.onUnexpectedError);
                }
            });
        }
        return new extHostTypes_1.Disposable(function () {
            if (_this._documentContentProviders.delete(handle)) {
                _this._proxy.$unregisterTextContentProvider(handle);
            }
            if (subscription) {
                subscription.dispose();
                subscription = undefined;
            }
        });
    };
    ExtHostDocuments.prototype.$provideTextDocumentContent = function (handle, uri) {
        var provider = this._documentContentProviders.get(handle);
        if (!provider) {
            return winjs_base_1.TPromise.wrapError("unsupported uri-scheme: " + uri.scheme);
        }
        return async_1.asWinJsPromise(function (token) { return provider.provideTextDocumentContent(uri, token); });
    };
    ExtHostDocuments.prototype.$acceptModelModeChanged = function (strURL, oldModeId, newModeId) {
        var data = this._documentsAndEditors.getDocument(strURL);
        // Treat a mode change as a remove + add
        this._onDidRemoveDocument.fire(data.document);
        data._acceptLanguageId(newModeId);
        this._onDidAddDocument.fire(data.document);
    };
    ExtHostDocuments.prototype.$acceptModelSaved = function (strURL) {
        var data = this._documentsAndEditors.getDocument(strURL);
        data._acceptIsDirty(false);
        this._onDidSaveDocument.fire(data.document);
    };
    ExtHostDocuments.prototype.$acceptModelDirty = function (strURL) {
        var document = this._documentsAndEditors.getDocument(strURL);
        document._acceptIsDirty(true);
    };
    ExtHostDocuments.prototype.$acceptModelReverted = function (strURL) {
        var document = this._documentsAndEditors.getDocument(strURL);
        document._acceptIsDirty(false);
    };
    ExtHostDocuments.prototype.$acceptModelChanged = function (strURL, events, isDirty) {
        var data = this._documentsAndEditors.getDocument(strURL);
        data._acceptIsDirty(isDirty);
        data.onEvents(events);
        this._onDidChangeDocument.fire({
            document: data.document,
            contentChanges: events.map(function (e) {
                return {
                    range: TypeConverters.toRange(e.range),
                    rangeLength: e.rangeLength,
                    text: e.text
                };
            })
        });
    };
    ExtHostDocuments.prototype.setWordDefinitionFor = function (modeId, wordDefinition) {
        extHostDocumentData_1.setWordDefinitionFor(modeId, wordDefinition);
    };
    return ExtHostDocuments;
}(extHost_protocol_1.ExtHostDocumentsShape));
ExtHostDocuments._handlePool = 0;
exports.ExtHostDocuments = ExtHostDocuments;
