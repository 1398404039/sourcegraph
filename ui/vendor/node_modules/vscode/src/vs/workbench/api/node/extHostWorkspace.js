/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var paths_1 = require("vs/base/common/paths");
var extHostTypeConverters_1 = require("vs/workbench/api/node/extHostTypeConverters");
var extHost_protocol_1 = require("./extHost.protocol");
var ExtHostWorkspace = (function () {
    function ExtHostWorkspace(threadService, workspacePath) {
        this._proxy = threadService.get(extHost_protocol_1.MainContext.MainThreadWorkspace);
        this._workspacePath = workspacePath;
    }
    ExtHostWorkspace.prototype.getPath = function () {
        return this._workspacePath;
    };
    ExtHostWorkspace.prototype.getRelativePath = function (pathOrUri) {
        var path;
        if (typeof pathOrUri === 'string') {
            path = pathOrUri;
        }
        else {
            path = pathOrUri.fsPath;
        }
        if (paths_1.isEqualOrParent(path, this._workspacePath)) {
            return paths_1.relative(this._workspacePath, path) || path;
        }
        return path;
    };
    ExtHostWorkspace.prototype.findFiles = function (include, exclude, maxResults, token) {
        var _this = this;
        var requestId = ExtHostWorkspace._requestIdPool++;
        var result = this._proxy.$startSearch(include, exclude, maxResults, requestId);
        if (token) {
            token.onCancellationRequested(function () { return _this._proxy.$cancelSearch(requestId); });
        }
        return result;
    };
    ExtHostWorkspace.prototype.saveAll = function (includeUntitled) {
        return this._proxy.$saveAll(includeUntitled);
    };
    ExtHostWorkspace.prototype.appyEdit = function (edit) {
        var resourceEdits = [];
        var entries = edit.entries();
        for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {
            var entry = entries_1[_i];
            var uri = entry[0], edits = entry[1];
            for (var _a = 0, edits_1 = edits; _a < edits_1.length; _a++) {
                var edit_1 = edits_1[_a];
                resourceEdits.push({
                    resource: uri,
                    newText: edit_1.newText,
                    range: extHostTypeConverters_1.fromRange(edit_1.range)
                });
            }
        }
        return this._proxy.$applyWorkspaceEdit(resourceEdits);
    };
    return ExtHostWorkspace;
}());
ExtHostWorkspace._requestIdPool = 0;
exports.ExtHostWorkspace = ExtHostWorkspace;
