/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var winjs_base_1 = require("vs/base/common/winjs.base");
var async_1 = require("vs/base/common/async");
var threadService_1 = require("vs/workbench/services/thread/common/threadService");
var quickOpen_1 = require("vs/platform/quickOpen/common/quickOpen");
var extHost_protocol_1 = require("./extHost.protocol");
var MainThreadQuickOpen = (function (_super) {
    __extends(MainThreadQuickOpen, _super);
    function MainThreadQuickOpen(threadService, quickOpenService) {
        var _this = _super.call(this) || this;
        _this._token = 0;
        _this._proxy = threadService.get(extHost_protocol_1.ExtHostContext.ExtHostQuickOpen);
        _this._quickOpenService = quickOpenService;
        return _this;
    }
    MainThreadQuickOpen.prototype.$show = function (options) {
        var _this = this;
        var myToken = ++this._token;
        this._contents = new winjs_base_1.TPromise(function (c, e) {
            _this._doSetItems = function (items) {
                if (myToken === _this._token) {
                    c(items);
                }
            };
            _this._doSetError = function (error) {
                if (myToken === _this._token) {
                    e(error);
                }
            };
        });
        return async_1.asWinJsPromise(function (token) { return _this._quickOpenService.pick(_this._contents, options, token); }).then(function (item) {
            if (item) {
                return item.handle;
            }
            return undefined;
        }, undefined, function (progress) {
            if (progress) {
                _this._proxy.$onItemSelected(progress.handle);
            }
        });
    };
    MainThreadQuickOpen.prototype.$setItems = function (items) {
        if (this._doSetItems) {
            this._doSetItems(items);
        }
        return undefined;
    };
    MainThreadQuickOpen.prototype.$setError = function (error) {
        if (this._doSetError) {
            this._doSetError(error);
        }
        return undefined;
    };
    // ---- input
    MainThreadQuickOpen.prototype.$input = function (options, validateInput) {
        var _this = this;
        var inputOptions = Object.create(null);
        if (options) {
            inputOptions.password = options.password;
            inputOptions.placeHolder = options.placeHolder;
            inputOptions.prompt = options.prompt;
            inputOptions.value = options.value;
            inputOptions.ignoreFocusLost = options.ignoreFocusOut;
        }
        if (validateInput) {
            inputOptions.validateInput = function (value) {
                return _this._proxy.$validateInput(value);
            };
        }
        return async_1.asWinJsPromise(function (token) { return _this._quickOpenService.input(inputOptions, token); });
    };
    return MainThreadQuickOpen;
}(extHost_protocol_1.MainThreadQuickOpenShape));
MainThreadQuickOpen = __decorate([
    __param(0, threadService_1.IThreadService),
    __param(1, quickOpen_1.IQuickOpenService)
], MainThreadQuickOpen);
exports.MainThreadQuickOpen = MainThreadQuickOpen;
