import Event from 'vs/base/common/event';
import URI from 'vs/base/common/uri';
import { IThreadService } from 'vs/workbench/services/thread/common/threadService';
import { IWorkspace } from 'vs/platform/workspace/common/workspace';
import { TPromise } from 'vs/base/common/winjs.base';
import { ExtHostWorkspaceShape } from './extHost.protocol';
import * as vscode from 'vscode';
export declare class ExtHostWorkspace implements ExtHostWorkspaceShape {
    private static _requestIdPool;
    private _proxy;
    private _workspacePath;
    private _workspaceEmitter;
    constructor(threadService: IThreadService, workspacePath: string);
    getPath(): string;
    getRelativePath(pathOrUri: string | vscode.Uri): string;
    findFiles(include: string, exclude: string, maxResults?: number, token?: vscode.CancellationToken): Thenable<vscode.Uri[]>;
    saveAll(includeUntitled?: boolean): Thenable<boolean>;
    appyEdit(edit: vscode.WorkspaceEdit): TPromise<boolean>;
    readonly onDidUpdateWorkspace: Event<IWorkspace>;
    $setWorkspace(resource: URI, state: {
        commitID?: string;
        branch?: string;
        zapRef?: string;
    }): TPromise<void>;
    $setWorkspaceState(workspace: URI, state: {
        commitID?: string;
        branch?: string;
        zapRef?: string;
    }): TPromise<void>;
    $onDidUpdateWorkspace(workspace: IWorkspace): TPromise<void>;
}
