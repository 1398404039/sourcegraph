/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var event_1 = require("vs/base/common/event");
var map_1 = require("vs/base/common/map");
var languageSelector_1 = require("vs/editor/common/modes/languageSelector");
var Platform = require("vs/base/common/platform");
var errors = require("vs/base/common/errors");
var product_1 = require("vs/platform/product");
var package_1 = require("vs/platform/package");
var extHostFileSystemEventService_1 = require("vs/workbench/api/node/extHostFileSystemEventService");
var extHostDocuments_1 = require("vs/workbench/api/node/extHostDocuments");
var extHostDocumentSaveParticipant_1 = require("vs/workbench/api/node/extHostDocumentSaveParticipant");
var extHostConfiguration_1 = require("vs/workbench/api/node/extHostConfiguration");
var extHostDiagnostics_1 = require("vs/workbench/api/node/extHostDiagnostics");
var extHostTreeExplorers_1 = require("vs/workbench/api/node/extHostTreeExplorers");
var extHostWorkspace_1 = require("vs/workbench/api/node/extHostWorkspace");
var extHostQuickOpen_1 = require("vs/workbench/api/node/extHostQuickOpen");
var extHostHeapService_1 = require("vs/workbench/api/node/extHostHeapService");
var extHostStatusBar_1 = require("vs/workbench/api/node/extHostStatusBar");
var extHostCommands_1 = require("vs/workbench/api/node/extHostCommands");
var extHostOutputService_1 = require("vs/workbench/api/node/extHostOutputService");
var extHostMessageService_1 = require("vs/workbench/api/node/extHostMessageService");
var extHostEditors_1 = require("vs/workbench/api/node/extHostEditors");
var extHostLanguages_1 = require("vs/workbench/api/node/extHostLanguages");
var extHostLanguageFeatures_1 = require("vs/workbench/api/node/extHostLanguageFeatures");
var extHostApiCommands_1 = require("vs/workbench/api/node/extHostApiCommands");
var extHostTypes = require("vs/workbench/api/node/extHostTypes");
var uri_1 = require("vs/base/common/uri");
var severity_1 = require("vs/base/common/severity");
var EditorCommon = require("vs/editor/common/editorCommon");
var winjs_base_1 = require("vs/base/common/winjs.base");
var cancellation_1 = require("vs/base/common/cancellation");
var paths = require("vs/base/common/paths");
var fs_1 = require("fs");
var extHost_protocol_1 = require("./extHost.protocol");
var languageConfiguration = require("vs/editor/common/modes/languageConfiguration");
function proposedApiFunction(extension, fn) {
    if (extension.enableProposedApi) {
        return fn;
    }
    else {
        return (function () {
            throw new Error(extension.id + " cannot access proposed api");
        });
    }
}
/**
 * This method instantiates and returns the extension API surface
 */
function createApiFactory(initData, threadService, extensionService, contextService) {
    var currWorkspace = contextService.getWorkspace();
    var workspacePath = currWorkspace && currWorkspace.resource ? currWorkspace.resource.toString() : undefined;
    // Addressable instances
    var col = new extHost_protocol_1.InstanceCollection();
    var extHostHeapService = col.define(extHost_protocol_1.ExtHostContext.ExtHostHeapService).set(new extHostHeapService_1.ExtHostHeapService());
    var extHostDocuments = col.define(extHost_protocol_1.ExtHostContext.ExtHostDocuments).set(new extHostDocuments_1.ExtHostDocuments(threadService));
    var extHostDocumentSaveParticipant = col.define(extHost_protocol_1.ExtHostContext.ExtHostDocumentSaveParticipant).set(new extHostDocumentSaveParticipant_1.ExtHostDocumentSaveParticipant(extHostDocuments, threadService.get(extHost_protocol_1.MainContext.MainThreadWorkspace)));
    var extHostEditors = col.define(extHost_protocol_1.ExtHostContext.ExtHostEditors).set(new extHostEditors_1.ExtHostEditors(threadService, extHostDocuments));
    var extHostCommands = col.define(extHost_protocol_1.ExtHostContext.ExtHostCommands).set(new extHostCommands_1.ExtHostCommands(threadService, extHostEditors, extHostHeapService));
    var extHostExplorers = col.define(extHost_protocol_1.ExtHostContext.ExtHostExplorers).set(new extHostTreeExplorers_1.ExtHostTreeExplorers(threadService, extHostCommands));
    var extHostConfiguration = col.define(extHost_protocol_1.ExtHostContext.ExtHostConfiguration).set(new extHostConfiguration_1.ExtHostConfiguration(threadService.get(extHost_protocol_1.MainContext.MainThreadConfiguration), initData.configuration));
    var extHostDiagnostics = col.define(extHost_protocol_1.ExtHostContext.ExtHostDiagnostics).set(new extHostDiagnostics_1.ExtHostDiagnostics(threadService));
    var languageFeatures = col.define(extHost_protocol_1.ExtHostContext.ExtHostLanguageFeatures).set(new extHostLanguageFeatures_1.ExtHostLanguageFeatures(initData.seqId, threadService, extHostDocuments, extHostCommands, extHostHeapService, extHostDiagnostics));
    var extHostFileSystemEvent = col.define(extHost_protocol_1.ExtHostContext.ExtHostFileSystemEventService).set(new extHostFileSystemEventService_1.ExtHostFileSystemEventService());
    var extHostQuickOpen = col.define(extHost_protocol_1.ExtHostContext.ExtHostQuickOpen).set(new extHostQuickOpen_1.ExtHostQuickOpen(threadService));
    var extHostWorkspace = col.define(extHost_protocol_1.ExtHostContext.ExtHostWorkspace).set(new extHostWorkspace_1.ExtHostWorkspace(threadService, workspacePath));
    col.define(extHost_protocol_1.ExtHostContext.ExtHostExtensionService).set(extensionService);
    col.finish(false, threadService);
    // Other instances
    var extHostMessageService = new extHostMessageService_1.ExtHostMessageService(threadService);
    var extHostStatusBar = new extHostStatusBar_1.ExtHostStatusBar(threadService);
    var extHostOutputService = new extHostOutputService_1.ExtHostOutputService(threadService);
    var extHostLanguages = new extHostLanguages_1.ExtHostLanguages(threadService);
    // Register API-ish commands
    extHostApiCommands_1.ExtHostApiCommands.register(extHostCommands);
    return function (extension) {
        if (extension.enableProposedApi) {
            if (!initData.environment.enableProposedApi) {
                extension.enableProposedApi = false;
                console.warn('PROPOSED API is only available when developing an extension');
            }
            else {
                console.warn(extension.name + " (" + extension.id + ") uses PROPOSED API which is subject to change and removal without notice");
            }
        }
        // namespace: commands
        var commands = {
            registerCommand: function (id, command, thisArgs) {
                return extHostCommands.registerCommand(id, command, thisArgs);
            },
            registerTextEditorCommand: function (id, callback, thisArg) {
                return extHostCommands.registerCommand(id, function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    var activeTextEditor = extHostEditors.getActiveTextEditor();
                    if (!activeTextEditor) {
                        console.warn('Cannot execute ' + id + ' because there is no active text editor.');
                        return;
                    }
                    return activeTextEditor.edit(function (edit) {
                        args.unshift(activeTextEditor, edit);
                        callback.apply(thisArg, args);
                    }).then(function (result) {
                        if (!result) {
                            console.warn('Edits from command ' + id + ' were not applied.');
                        }
                    }, function (err) {
                        console.warn('An error occured while running command ' + id, err);
                    });
                });
            },
            executeCommand: function (id) {
                var args = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    args[_i - 1] = arguments[_i];
                }
                return extHostCommands.executeCommand.apply(extHostCommands, [id].concat(args));
            },
            getCommands: function (filterInternal) {
                if (filterInternal === void 0) { filterInternal = false; }
                return extHostCommands.getCommands(filterInternal);
            }
        };
        // namespace: env
        var env = Object.freeze({
            get machineId() { return initData.telemetryInfo.machineId; },
            get sessionId() { return initData.telemetryInfo.sessionId; },
            get language() { return Platform.language; },
            get appName() { return product_1.default.nameLong; }
        });
        // namespace: extensions
        var extensions = {
            getExtension: function (extensionId) {
                var desc = extensionService.getExtensionDescription(extensionId);
                if (desc) {
                    return new Extension(extensionService, desc);
                }
            },
            get all() {
                return extensionService.getAllExtensionDescriptions().map(function (desc) { return new Extension(extensionService, desc); });
            }
        };
        // namespace: languages
        var languages = {
            createDiagnosticCollection: function (name) {
                return extHostDiagnostics.createDiagnosticCollection(name);
            },
            getLanguages: function () {
                return extHostLanguages.getLanguages();
            },
            match: function (selector, document) {
                return languageSelector_1.score(selector, document.uri, document.languageId);
            },
            registerCodeActionsProvider: function (selector, provider) {
                return languageFeatures.registerCodeActionProvider(selector, provider, currWorkspace);
            },
            registerCodeLensProvider: function (selector, provider) {
                return languageFeatures.registerCodeLensProvider(selector, provider, currWorkspace);
            },
            registerDefinitionProvider: function (selector, provider) {
                return languageFeatures.registerDefinitionProvider(selector, provider, currWorkspace);
            },
            registerHoverProvider: function (selector, provider) {
                return languageFeatures.registerHoverProvider(selector, provider, currWorkspace);
            },
            registerDocumentHighlightProvider: function (selector, provider) {
                return languageFeatures.registerDocumentHighlightProvider(selector, provider, currWorkspace);
            },
            registerReferenceProvider: function (selector, provider) {
                return languageFeatures.registerReferenceProvider(selector, provider, currWorkspace);
            },
            registerWorkspaceReferenceProvider: function (selector, provider) {
                return languageFeatures.registerWorkspaceReferenceProvider(selector, provider, currWorkspace);
            },
            registerRenameProvider: function (selector, provider) {
                return languageFeatures.registerRenameProvider(selector, provider, currWorkspace);
            },
            registerDocumentSymbolProvider: function (selector, provider) {
                return languageFeatures.registerDocumentSymbolProvider(selector, provider, currWorkspace);
            },
            registerWorkspaceSymbolProvider: function (provider) {
                return languageFeatures.registerWorkspaceSymbolProvider(provider, currWorkspace);
            },
            registerDocumentFormattingEditProvider: function (selector, provider) {
                return languageFeatures.registerDocumentFormattingEditProvider(selector, provider, currWorkspace);
            },
            registerDocumentRangeFormattingEditProvider: function (selector, provider) {
                return languageFeatures.registerDocumentRangeFormattingEditProvider(selector, provider, currWorkspace);
            },
            registerOnTypeFormattingEditProvider: function (selector, provider, firstTriggerCharacter) {
                var moreTriggerCharacters = [];
                for (var _i = 3; _i < arguments.length; _i++) {
                    moreTriggerCharacters[_i - 3] = arguments[_i];
                }
                return languageFeatures.registerOnTypeFormattingEditProvider(selector, provider, [firstTriggerCharacter].concat(moreTriggerCharacters), currWorkspace);
            },
            registerSignatureHelpProvider: function (selector, provider) {
                var triggerCharacters = [];
                for (var _i = 2; _i < arguments.length; _i++) {
                    triggerCharacters[_i - 2] = arguments[_i];
                }
                return languageFeatures.registerSignatureHelpProvider(selector, provider, triggerCharacters, currWorkspace);
            },
            registerCompletionItemProvider: function (selector, provider) {
                var triggerCharacters = [];
                for (var _i = 2; _i < arguments.length; _i++) {
                    triggerCharacters[_i - 2] = arguments[_i];
                }
                return languageFeatures.registerCompletionItemProvider(selector, provider, triggerCharacters, currWorkspace);
            },
            registerDocumentLinkProvider: function (selector, provider) {
                return languageFeatures.registerDocumentLinkProvider(selector, provider, currWorkspace);
            },
            setLanguageConfiguration: function (language, configuration) {
                return languageFeatures.setLanguageConfiguration(language, configuration);
            }
        };
        // namespace: window
        var window = {
            get activeTextEditor() {
                return extHostEditors.getActiveTextEditor();
            },
            get visibleTextEditors() {
                return extHostEditors.getVisibleTextEditors();
            },
            showTextDocument: function (document, column, preserveFocus) {
                return extHostEditors.showTextDocument(document, column, preserveFocus);
            },
            createTextEditorDecorationType: function (options) {
                return extHostEditors.createTextEditorDecorationType(options);
            },
            onDidChangeActiveTextEditor: function (listener, thisArg, disposables) {
                return extHostEditors.onDidChangeActiveTextEditor(listener, thisArg, disposables);
            },
            onDidChangeVisibleTextEditors: function (listener, thisArg, disposables) {
                return extHostEditors.onDidChangeVisibleTextEditors(listener, thisArg, disposables);
            },
            onDidChangeTextEditorSelection: function (listener, thisArgs, disposables) {
                return extHostEditors.onDidChangeTextEditorSelection(listener, thisArgs, disposables);
            },
            onDidChangeTextEditorOptions: function (listener, thisArgs, disposables) {
                return extHostEditors.onDidChangeTextEditorOptions(listener, thisArgs, disposables);
            },
            onDidChangeTextEditorViewColumn: function (listener, thisArg, disposables) {
                return extHostEditors.onDidChangeTextEditorViewColumn(listener, thisArg, disposables);
            },
            onDidCloseTerminal: function (listener, thisArg, disposables) {
                throw new Error('ExtHostTerminalService is not available');
            },
            showInformationMessage: function (message) {
                var items = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    items[_i - 1] = arguments[_i];
                }
                return extHostMessageService.showMessage(severity_1.default.Info, message, items);
            },
            showWarningMessage: function (message) {
                var items = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    items[_i - 1] = arguments[_i];
                }
                return extHostMessageService.showMessage(severity_1.default.Warning, message, items);
            },
            showErrorMessage: function (message) {
                var items = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    items[_i - 1] = arguments[_i];
                }
                return extHostMessageService.showMessage(severity_1.default.Error, message, items);
            },
            showQuickPick: function (items, options, token) {
                return extHostQuickOpen.showQuickPick(items, options, token);
            },
            showInputBox: function (options, token) {
                return extHostQuickOpen.showInput(options, token);
            },
            createStatusBarItem: function (position, priority) {
                return extHostStatusBar.createStatusBarEntry(extension.id, position, priority);
            },
            setStatusBarMessage: function (text, timeoutOrThenable) {
                return extHostStatusBar.setStatusBarMessage(text, timeoutOrThenable);
            },
            createOutputChannel: function (name) {
                return extHostOutputService.createOutputChannel(name);
            },
            createTerminal: function (name, shellPath, shellArgs) {
                throw new Error('ExtHostTerminalService is not available');
            },
            // proposed API
            sampleFunction: proposedApiFunction(extension, function () {
                return extHostMessageService.showMessage(severity_1.default.Info, 'Hello Proposed Api!', []);
            }),
            registerTreeExplorerNodeProvider: proposedApiFunction(extension, function (providerId, provider) {
                return extHostExplorers.registerTreeExplorerNodeProvider(providerId, provider);
            }),
        };
        // namespace: workspace
        var workspace = {
            get rootPath() {
                return extHostWorkspace.getPath();
            },
            set rootPath(value) {
                throw errors.readonly();
            },
            asRelativePath: function (pathOrUri) {
                return extHostWorkspace.getRelativePath(pathOrUri);
            },
            findFiles: function (include, exclude, maxResults, token) {
                return extHostWorkspace.findFiles(include, exclude, maxResults, token);
            },
            saveAll: function (includeUntitled) {
                return extHostWorkspace.saveAll(includeUntitled);
            },
            applyEdit: function (edit) {
                return extHostWorkspace.appyEdit(edit);
            },
            createFileSystemWatcher: function (pattern, ignoreCreate, ignoreChange, ignoreDelete) {
                return extHostFileSystemEvent.createFileSystemWatcher(pattern, ignoreCreate, ignoreChange, ignoreDelete);
            },
            get textDocuments() {
                return extHostDocuments.getAllDocumentData().map(function (data) { return data.document; });
            },
            set textDocuments(value) {
                throw errors.readonly();
            },
            openTextDocument: function (uriOrFileName) {
                var uri;
                if (typeof uriOrFileName === 'string') {
                    uri = uri_1.default.file(uriOrFileName);
                }
                else if (uriOrFileName instanceof uri_1.default) {
                    uri = uriOrFileName;
                }
                else {
                    throw new Error('illegal argument - uriOrFileName');
                }
                return extHostDocuments.ensureDocumentData(uri).then(function () {
                    var data = extHostDocuments.getDocumentData(uri);
                    return data && data.document;
                });
            },
            registerTextDocumentContentProvider: function (scheme, provider) {
                return extHostDocuments.registerTextDocumentContentProvider(scheme, provider);
            },
            onDidOpenTextDocument: function (listener, thisArgs, disposables) {
                return extHostDocuments.onDidAddDocument(listener, thisArgs, disposables);
            },
            onDidCloseTextDocument: function (listener, thisArgs, disposables) {
                return extHostDocuments.onDidRemoveDocument(listener, thisArgs, disposables);
            },
            onDidChangeTextDocument: function (listener, thisArgs, disposables) {
                return extHostDocuments.onDidChangeDocument(listener, thisArgs, disposables);
            },
            onDidSaveTextDocument: function (listener, thisArgs, disposables) {
                return extHostDocuments.onDidSaveDocument(listener, thisArgs, disposables);
            },
            onWillSaveTextDocument: function (listener, thisArgs, disposables) {
                return extHostDocumentSaveParticipant.onWillSaveTextDocumentEvent(listener, thisArgs, disposables);
            },
            onDidChangeConfiguration: function (listener, thisArgs, disposables) {
                return extHostConfiguration.onDidChangeConfiguration(listener, thisArgs, disposables);
            },
            setWorkspace: function (resource, state) {
                return extHostWorkspace.$setWorkspace(uri_1.default.parse(resource.toString()), state);
            },
            setWorkspaceState: function (state) {
                return extHostWorkspace.$setWorkspaceState(state);
            },
            onDidUpdateWorkspace: function (listener, thisArgs, disposables) {
                return extHostWorkspace.onDidUpdateWorkspace(listener, thisArgs, disposables);
            },
            getConfiguration: function (section) {
                return extHostConfiguration.getConfiguration(section);
            }
        };
        return {
            version: package_1.default.version,
            // namespaces
            commands: commands,
            env: env,
            extensions: extensions,
            languages: languages,
            window: window,
            workspace: workspace,
            // types
            CancellationTokenSource: cancellation_1.CancellationTokenSource,
            CodeLens: extHostTypes.CodeLens,
            CompletionItem: extHostTypes.CompletionItem,
            CompletionItemKind: extHostTypes.CompletionItemKind,
            CompletionList: extHostTypes.CompletionList,
            Diagnostic: extHostTypes.Diagnostic,
            DiagnosticSeverity: extHostTypes.DiagnosticSeverity,
            Disposable: extHostTypes.Disposable,
            DocumentHighlight: extHostTypes.DocumentHighlight,
            DocumentHighlightKind: extHostTypes.DocumentHighlightKind,
            DocumentLink: extHostTypes.DocumentLink,
            EndOfLine: extHostTypes.EndOfLine,
            EventEmitter: event_1.Emitter,
            Hover: extHostTypes.Hover,
            IndentAction: languageConfiguration.IndentAction,
            Location: extHostTypes.Location,
            OverviewRulerLane: EditorCommon.OverviewRulerLane,
            ParameterInformation: extHostTypes.ParameterInformation,
            Position: extHostTypes.Position,
            Range: extHostTypes.Range,
            Selection: extHostTypes.Selection,
            SignatureHelp: extHostTypes.SignatureHelp,
            SignatureInformation: extHostTypes.SignatureInformation,
            SnippetString: extHostTypes.SnippetString,
            StatusBarAlignment: extHostTypes.StatusBarAlignment,
            SymbolInformation: extHostTypes.SymbolInformation,
            SymbolKind: extHostTypes.SymbolKind,
            TextDocumentSaveReason: extHostTypes.TextDocumentSaveReason,
            TextEdit: extHostTypes.TextEdit,
            TextEditorCursorStyle: EditorCommon.TextEditorCursorStyle,
            TextEditorLineNumbersStyle: extHostTypes.TextEditorLineNumbersStyle,
            TextEditorRevealType: extHostTypes.TextEditorRevealType,
            TextEditorSelectionChangeKind: extHostTypes.TextEditorSelectionChangeKind,
            Uri: uri_1.default,
            ViewColumn: extHostTypes.ViewColumn,
            WorkspaceEdit: extHostTypes.WorkspaceEdit,
        };
    };
}
exports.createApiFactory = createApiFactory;
var Extension = (function () {
    function Extension(extensionService, description) {
        this._extensionService = extensionService;
        this.id = description.id;
        this.extensionPath = paths.normalize(description.extensionFolderPath, true);
        this.packageJSON = description;
    }
    Object.defineProperty(Extension.prototype, "isActive", {
        get: function () {
            return this._extensionService.isActivated(this.id);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Extension.prototype, "exports", {
        get: function () {
            return this._extensionService.get(this.id);
        },
        enumerable: true,
        configurable: true
    });
    Extension.prototype.activate = function () {
        var _this = this;
        return this._extensionService.activateById(this.id).then(function () { return _this.exports; });
    };
    return Extension;
}());
function initializeExtensionApi(extensionService, apiFactory) {
    return createExtensionPathIndex(extensionService).then(function (trie) { return defineAPI(apiFactory, trie); });
}
exports.initializeExtensionApi = initializeExtensionApi;
function createExtensionPathIndex(extensionService) {
    // create trie to enable fast 'filename -> extension id' look up
    var trie = new map_1.TrieMap(map_1.TrieMap.PathSplitter);
    var extensions = extensionService.getAllExtensionDescriptions().map(function (ext) {
        if (!ext.main) {
            return;
        }
        return new winjs_base_1.TPromise(function (resolve, reject) {
            fs_1.realpath(ext.extensionFolderPath, function (err, path) {
                if (err) {
                    reject(err);
                }
                else {
                    trie.insert(path, ext);
                    resolve(void 0);
                }
            });
        });
    });
    return winjs_base_1.TPromise.join(extensions).then(function () { return trie; });
}
function defineAPI(factory, extensionPaths) {
    // each extension is meant to get its own api implementation
    var extApiImpl = Object.create(null);
    var defaultApiImpl;
    var node_module = require.__$__nodeRequire('module');
    var original = node_module._load;
    node_module._load = function load(request, parent, isMain) {
        if (request !== 'vscode') {
            return original.apply(this, arguments);
        }
        // get extension id from filename and api for extension
        var ext = extensionPaths.findSubstr(parent.filename);
        if (ext) {
            var apiImpl = extApiImpl[ext.id];
            if (!apiImpl) {
                apiImpl = extApiImpl[ext.id] = factory(ext);
            }
            return apiImpl;
        }
        // fall back to a default implementation
        if (!defaultApiImpl) {
            defaultApiImpl = factory(nullExtensionDescription);
        }
        return defaultApiImpl;
    };
}
var nullExtensionDescription = {
    id: 'nullExtensionDescription',
    name: 'Null Extension Description',
    publisher: 'vscode',
    activationEvents: undefined,
    contributes: undefined,
    enableProposedApi: false,
    engines: undefined,
    extensionDependencies: undefined,
    extensionFolderPath: undefined,
    isBuiltin: false,
    main: undefined,
    version: undefined
};
