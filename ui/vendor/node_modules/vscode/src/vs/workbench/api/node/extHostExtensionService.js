/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var lifecycle_1 = require("vs/base/common/lifecycle");
var paths = require("vs/base/common/paths");
var pfs_1 = require("vs/base/node/pfs");
var severity_1 = require("vs/base/common/severity");
var winjs_base_1 = require("vs/base/common/winjs.base");
var abstractExtensionService_1 = require("vs/platform/extensions/common/abstractExtensionService");
var extHostStorage_1 = require("vs/workbench/api/node/extHostStorage");
var extHost_api_impl_1 = require("vs/workbench/api/node/extHost.api.impl");
var extHost_protocol_1 = require("./extHost.protocol");
var crypto_1 = require("crypto");
var hasOwnProperty = Object.hasOwnProperty;
var ExtHostExtension = (function (_super) {
    __extends(ExtHostExtension, _super);
    function ExtHostExtension(activationFailed, module, exports, subscriptions) {
        var _this = _super.call(this, activationFailed) || this;
        _this.module = module;
        _this.exports = exports;
        _this.subscriptions = subscriptions;
        return _this;
    }
    return ExtHostExtension;
}(abstractExtensionService_1.ActivatedExtension));
exports.ExtHostExtension = ExtHostExtension;
var ExtHostEmptyExtension = (function (_super) {
    __extends(ExtHostEmptyExtension, _super);
    function ExtHostEmptyExtension() {
        return _super.call(this, false, { activate: undefined, deactivate: undefined }, undefined, []) || this;
    }
    return ExtHostEmptyExtension;
}(ExtHostExtension));
exports.ExtHostEmptyExtension = ExtHostEmptyExtension;
var ExtensionMemento = (function () {
    function ExtensionMemento(id, global, storage) {
        var _this = this;
        this._id = id;
        this._shared = global;
        this._storage = storage;
        this._init = this._storage.getValue(this._shared, this._id, Object.create(null)).then(function (value) {
            _this._value = value;
            return _this;
        });
    }
    Object.defineProperty(ExtensionMemento.prototype, "whenReady", {
        get: function () {
            return this._init;
        },
        enumerable: true,
        configurable: true
    });
    ExtensionMemento.prototype.get = function (key, defaultValue) {
        var value = this._value[key];
        if (typeof value === 'undefined') {
            value = defaultValue;
        }
        return value;
    };
    ExtensionMemento.prototype.update = function (key, value) {
        this._value[key] = value;
        return this._storage
            .setValue(this._shared, this._id, this._value)
            .then(function () { return true; });
    };
    return ExtensionMemento;
}());
var ExtensionStoragePath = (function () {
    function ExtensionStoragePath(contextService, environment) {
        var _this = this;
        this._contextService = contextService;
        this._environment = environment;
        this._ready = this._getOrCreateWorkspaceStoragePath().then(function (value) { return _this._value = value; });
    }
    Object.defineProperty(ExtensionStoragePath.prototype, "whenReady", {
        get: function () {
            return this._ready;
        },
        enumerable: true,
        configurable: true
    });
    ExtensionStoragePath.prototype.value = function (extension) {
        if (this._value) {
            return paths.join(this._value, extension.id);
        }
        return undefined;
    };
    ExtensionStoragePath.prototype._getOrCreateWorkspaceStoragePath = function () {
        var workspace = this._contextService.getWorkspace();
        if (!workspace) {
            return winjs_base_1.TPromise.as(undefined);
        }
        var storageName = crypto_1.createHash('md5')
            .update(workspace.resource.fsPath)
            .update(workspace.uid ? workspace.uid.toString() : '')
            .digest('hex');
        var storagePath = paths.join(this._environment.appSettingsHome, 'workspaceStorage', storageName);
        return pfs_1.dirExists(storagePath).then(function (exists) {
            if (exists) {
                return storagePath;
            }
            return pfs_1.mkdirp(storagePath).then(function (success) {
                return storagePath;
            }, function (err) {
                return undefined;
            });
        });
    };
    return ExtensionStoragePath;
}());
var ExtHostExtensionService = (function (_super) {
    __extends(ExtHostExtensionService, _super);
    /**
     * This class is constructed manually because it is a service, so it doesn't use any ctor injection
     */
    function ExtHostExtensionService(initData, threadService, telemetryService, contextService) {
        var _this = _super.call(this, false) || this;
        _this._registry.registerExtensions(initData.extensions);
        _this._threadService = threadService;
        _this._storage = new extHostStorage_1.ExtHostStorage(threadService);
        _this._storagePath = new ExtensionStoragePath(contextService, initData.environment);
        _this._proxy = _this._threadService.get(extHost_protocol_1.MainContext.MainProcessExtensionService);
        _this._telemetryService = telemetryService;
        _this._contextService = contextService;
        // initialize API first
        var apiFactory = extHost_api_impl_1.createApiFactory(initData, threadService, _this, _this._contextService);
        extHost_api_impl_1.initializeExtensionApi(_this, apiFactory).then(function () { return _this._triggerOnReady(); });
        return _this;
    }
    ExtHostExtensionService.prototype.getAllExtensionDescriptions = function () {
        return this._registry.getAllExtensionDescriptions();
    };
    ExtHostExtensionService.prototype.getExtensionDescription = function (extensionId) {
        return this._registry.getExtensionDescription(extensionId);
    };
    ExtHostExtensionService.prototype.$localShowMessage = function (severity, msg) {
        switch (severity) {
            case severity_1.default.Error:
                console.error(msg);
                break;
            case severity_1.default.Warning:
                console.warn(msg);
                break;
            default:
                console.log(msg);
        }
    };
    ExtHostExtensionService.prototype.get = function (extensionId) {
        if (!hasOwnProperty.call(this._activatedExtensions, extensionId)) {
            throw new Error('Extension `' + extensionId + '` is not known or not activated');
        }
        return this._activatedExtensions[extensionId].exports;
    };
    ExtHostExtensionService.prototype.deactivate = function (extensionId) {
        var result = winjs_base_1.TPromise.as(void 0);
        var extension = this._activatedExtensions[extensionId];
        if (!extension) {
            return result;
        }
        // call deactivate if available
        try {
            if (typeof extension.module.deactivate === 'function') {
                result = winjs_base_1.TPromise.wrap(extension.module.deactivate()).then(null, function (err) {
                    // TODO: Do something with err if this is not the shutdown case
                    return winjs_base_1.TPromise.as(void 0);
                });
            }
        }
        catch (err) {
        }
        // clean up subscriptions
        try {
            lifecycle_1.dispose(extension.subscriptions);
        }
        catch (err) {
        }
        return result;
    };
    // -- overwriting AbstractExtensionService
    ExtHostExtensionService.prototype._showMessage = function (severity, msg) {
        this._proxy.$localShowMessage(severity, msg);
        this.$localShowMessage(severity, msg);
    };
    ExtHostExtensionService.prototype._createFailedExtension = function () {
        return new ExtHostExtension(true, { activate: undefined, deactivate: undefined }, undefined, []);
    };
    ExtHostExtensionService.prototype._loadExtensionContext = function (extensionDescription) {
        var _this = this;
        var globalState = new ExtensionMemento(extensionDescription.id, true, this._storage);
        var workspaceState = new ExtensionMemento(extensionDescription.id, false, this._storage);
        return winjs_base_1.TPromise.join([
            globalState.whenReady,
            workspaceState.whenReady,
            this._storagePath.whenReady
        ]).then(function () {
            return Object.freeze({
                globalState: globalState,
                workspaceState: workspaceState,
                subscriptions: [],
                get extensionPath() { return extensionDescription.extensionFolderPath; },
                storagePath: _this._storagePath.value(extensionDescription),
                asAbsolutePath: function (relativePath) { return paths.normalize(paths.join(extensionDescription.extensionFolderPath, relativePath), true); }
            });
        });
    };
    ExtHostExtensionService.prototype._actualActivateExtension = function (extensionDescription) {
        var _this = this;
        return this._doActualActivateExtension(extensionDescription).then(function (activatedExtension) {
            _this._proxy.$onExtensionActivated(extensionDescription.id);
            return activatedExtension;
        }, function (err) {
            _this._proxy.$onExtensionActivationFailed(extensionDescription.id);
            throw err;
        });
    };
    ExtHostExtensionService.prototype._doActualActivateExtension = function (extensionDescription) {
        var _this = this;
        var event = getTelemetryActivationEvent(extensionDescription);
        this._telemetryService.publicLog('activatePlugin', event);
        if (!extensionDescription.main) {
            // Treat the extension as being empty => NOT AN ERROR CASE
            return winjs_base_1.TPromise.as(new ExtHostEmptyExtension());
        }
        return this.onReady().then(function () {
            return winjs_base_1.TPromise.join([
                loadCommonJSModule(extensionDescription.main),
                _this._loadExtensionContext(extensionDescription)
            ]).then(function (values) {
                return ExtHostExtensionService._callActivate(values[0], values[1]);
            }, function (errors) {
                // Avoid failing with an array of errors, fail with a single error
                if (errors[0]) {
                    return winjs_base_1.TPromise.wrapError(errors[0]);
                }
                if (errors[1]) {
                    return winjs_base_1.TPromise.wrapError(errors[1]);
                }
                return undefined;
            });
        });
    };
    ExtHostExtensionService._callActivate = function (extensionModule, context) {
        // Make sure the extension's surface is not undefined
        extensionModule = extensionModule || {
            activate: undefined,
            deactivate: undefined
        };
        return this._callActivateOptional(extensionModule, context).then(function (extensionExports) {
            return new ExtHostExtension(false, extensionModule, extensionExports, context.subscriptions);
        });
    };
    ExtHostExtensionService._callActivateOptional = function (extensionModule, context) {
        if (typeof extensionModule.activate === 'function') {
            try {
                return winjs_base_1.TPromise.as(extensionModule.activate.apply(global, [context]));
            }
            catch (err) {
                return winjs_base_1.TPromise.wrapError(err);
            }
        }
        else {
            // No activate found => the module is the extension's exports
            return winjs_base_1.TPromise.as(extensionModule);
        }
    };
    // -- called by main thread
    ExtHostExtensionService.prototype.$activateExtension = function (extensionDescription) {
        return this._activateExtension(extensionDescription);
    };
    return ExtHostExtensionService;
}(abstractExtensionService_1.AbstractExtensionService));
exports.ExtHostExtensionService = ExtHostExtensionService;
function loadCommonJSModule(modulePath) {
    var r = null;
    try {
        r = require.__$__nodeRequire(modulePath);
    }
    catch (e) {
        return winjs_base_1.TPromise.wrapError(e);
    }
    return winjs_base_1.TPromise.as(r);
}
function getTelemetryActivationEvent(extensionDescription) {
    var event = {
        id: extensionDescription.id,
        name: extensionDescription.name,
        publisherDisplayName: extensionDescription.publisher,
        activationEvents: extensionDescription.activationEvents ? extensionDescription.activationEvents.join(',') : null,
        isBuiltin: extensionDescription.isBuiltin
    };
    for (var contribution in extensionDescription.contributes) {
        var contributionDetails = extensionDescription.contributes[contribution];
        if (!contributionDetails) {
            continue;
        }
        switch (contribution) {
            case 'debuggers':
                var types = contributionDetails.reduce(function (p, c) { return p ? p + ',' + c['type'] : c['type']; }, '');
                event['contribution.debuggers'] = types;
                break;
            case 'grammars':
                var grammers = contributionDetails.reduce(function (p, c) { return p ? p + ',' + c['language'] : c['language']; }, '');
                event['contribution.grammars'] = grammers;
                break;
            case 'languages':
                var languages = contributionDetails.reduce(function (p, c) { return p ? p + ',' + c['id'] : c['id']; }, '');
                event['contribution.languages'] = languages;
                break;
            case 'tmSnippets':
                var tmSnippets = contributionDetails.reduce(function (p, c) { return p ? p + ',' + c['languageId'] : c['languageId']; }, '');
                event['contribution.tmSnippets'] = tmSnippets;
                break;
            default:
                event["contribution." + contribution] = true;
        }
    }
    return event;
}
