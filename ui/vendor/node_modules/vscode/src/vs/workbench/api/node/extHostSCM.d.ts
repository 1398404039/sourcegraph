import URI from 'vs/base/common/uri';
import { TPromise } from 'vs/base/common/winjs.base';
import Event from 'vs/base/common/event';
import { IThreadService } from 'vs/workbench/services/thread/common/threadService';
import { Disposable } from 'vs/workbench/api/node/extHostTypes';
import * as vscode from 'vscode';
export interface Cache {
    [providerId: string]: {
        [groupId: string]: {
            resourceGroup: vscode.SCMResourceGroup;
            resources: {
                [uri: string]: vscode.SCMResource;
            };
        };
    };
}
export declare class ExtHostSCM {
    private _proxy;
    private _providers;
    private _onDidChangeActiveProvider;
    readonly onDidChangeActiveProvider: Event<vscode.SCMProvider>;
    private _activeProvider;
    readonly activeProvider: vscode.SCMProvider | undefined;
    private _inputBox;
    readonly inputBox: vscode.SCMInputBox;
    private cache;
    constructor(threadService: IThreadService);
    getResourceFromURI(uri: vscode.Uri): vscode.SCMResource | vscode.SCMResourceGroup | undefined;
    registerSCMProvider(providerId: string, provider: vscode.SCMProvider): Disposable;
    $open(providerId: string, resourceGroupId: string, uri: string): TPromise<void>;
    $acceptChanges(providerId: string): TPromise<void>;
    $drag(providerId: string, fromResourceGroupId: string, fromUri: string, toResourceGroupId: string): TPromise<void>;
    $getOriginalResource(id: string, uri: URI): TPromise<URI>;
    $onInputBoxValueChange(value: string): TPromise<void>;
}
