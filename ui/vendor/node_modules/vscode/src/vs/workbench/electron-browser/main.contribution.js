/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var platform_1 = require("vs/platform/platform");
var nls = require("vs/nls");
var product_1 = require("vs/platform/product");
var actions_1 = require("vs/platform/actions/common/actions");
var configurationRegistry_1 = require("vs/platform/configuration/common/configurationRegistry");
var actionRegistry_1 = require("vs/workbench/common/actionRegistry");
var keyCodes_1 = require("vs/base/common/keyCodes");
var platform = require("vs/base/common/platform");
var keybindingsRegistry_1 = require("vs/platform/keybinding/common/keybindingsRegistry");
var partService_1 = require("vs/workbench/services/part/common/partService");
var editorCommonExtensions_1 = require("vs/editor/common/editorCommonExtensions");
var windowService_1 = require("vs/workbench/services/window/electron-browser/windowService");
var actions_2 = require("vs/workbench/electron-browser/actions");
var workbench_1 = require("vs/workbench/electron-browser/workbench");
var windows_1 = require("vs/platform/windows/common/windows");
var closeEditorOrWindowKeybindings = { primary: 32768 /* CtrlCmd */ | 53 /* KEY_W */, win: { primary: 32768 /* CtrlCmd */ | 62 /* F4 */, secondary: [32768 /* CtrlCmd */ | 53 /* KEY_W */] } };
// Contribute Global Actions
var viewCategory = nls.localize('view', "View");
var helpCategory = nls.localize('help', "Help");
var fileCategory = nls.localize('file', "File");
var workbenchActionsRegistry = platform_1.Registry.as(actionRegistry_1.Extensions.WorkbenchActions);
workbenchActionsRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(actions_2.NewWindowAction, actions_2.NewWindowAction.ID, actions_2.NewWindowAction.LABEL, { primary: 32768 /* CtrlCmd */ | 16384 /* Shift */ | 44 /* KEY_N */ }), 'New Window');
workbenchActionsRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(actions_2.CloseWindowAction, actions_2.CloseWindowAction.ID, actions_2.CloseWindowAction.LABEL, { primary: 32768 /* CtrlCmd */ | 16384 /* Shift */ | 53 /* KEY_W */ }), 'Close Window');
workbenchActionsRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(actions_2.SwitchWindow, actions_2.SwitchWindow.ID, actions_2.SwitchWindow.LABEL), 'Switch Window');
workbenchActionsRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(actions_2.CloseFolderAction, actions_2.CloseFolderAction.ID, actions_2.CloseFolderAction.LABEL, { primary: keyCodes_1.KeyChord(32768 /* CtrlCmd */ | 41 /* KEY_K */, 36 /* KEY_F */) }), 'File: Close Folder', fileCategory);
if (!!product_1.default.reportIssueUrl) {
    workbenchActionsRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(actions_2.ReportIssueAction, actions_2.ReportIssueAction.ID, actions_2.ReportIssueAction.LABEL), 'Help: Report Issues', helpCategory);
}
if (actions_2.KeybindingsReferenceAction.AVAILABLE) {
    workbenchActionsRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(actions_2.KeybindingsReferenceAction, actions_2.KeybindingsReferenceAction.ID, actions_2.KeybindingsReferenceAction.LABEL, { primary: keyCodes_1.KeyChord(32768 /* CtrlCmd */ | 41 /* KEY_K */, 32768 /* CtrlCmd */ | 48 /* KEY_R */) }), 'Help: Keyboard Shortcuts Reference', helpCategory);
}
workbenchActionsRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(actions_2.ZoomInAction, actions_2.ZoomInAction.ID, actions_2.ZoomInAction.LABEL, {
    primary: 32768 /* CtrlCmd */ | 81 /* US_EQUAL */,
    secondary: [32768 /* CtrlCmd */ | 16384 /* Shift */ | 81 /* US_EQUAL */, 32768 /* CtrlCmd */ | 104 /* NUMPAD_ADD */]
}), 'View: Zoom In', viewCategory);
workbenchActionsRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(actions_2.ZoomOutAction, actions_2.ZoomOutAction.ID, actions_2.ZoomOutAction.LABEL, {
    primary: 32768 /* CtrlCmd */ | 83 /* US_MINUS */,
    secondary: [32768 /* CtrlCmd */ | 16384 /* Shift */ | 83 /* US_MINUS */, 32768 /* CtrlCmd */ | 106 /* NUMPAD_SUBTRACT */],
    linux: { primary: 32768 /* CtrlCmd */ | 83 /* US_MINUS */, secondary: [32768 /* CtrlCmd */ | 106 /* NUMPAD_SUBTRACT */] }
}), 'View: Zoom Out', viewCategory);
workbenchActionsRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(actions_2.ZoomResetAction, actions_2.ZoomResetAction.ID, actions_2.ZoomResetAction.LABEL, {
    primary: 32768 /* CtrlCmd */ | 93 /* NUMPAD_0 */
}), 'View: Reset Zoom', viewCategory);
workbenchActionsRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(actions_2.CloseMessagesAction, actions_2.CloseMessagesAction.ID, actions_2.CloseMessagesAction.LABEL, { primary: 9 /* Escape */, secondary: [16384 /* Shift */ | 9 /* Escape */] }, workbench_1.MessagesVisibleContext), 'Close Notification Messages');
workbenchActionsRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(actions_2.CloseEditorAction, actions_2.CloseEditorAction.ID, actions_2.CloseEditorAction.LABEL, closeEditorOrWindowKeybindings), 'View: Close Editor', viewCategory);
workbenchActionsRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(actions_2.ToggleFullScreenAction, actions_2.ToggleFullScreenAction.ID, actions_2.ToggleFullScreenAction.LABEL, { primary: 69 /* F11 */, mac: { primary: 32768 /* CtrlCmd */ | 4096 /* WinCtrl */ | 36 /* KEY_F */ } }), 'View: Toggle Full Screen', viewCategory);
if (platform.isWindows || platform.isLinux) {
    workbenchActionsRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(actions_2.ToggleMenuBarAction, actions_2.ToggleMenuBarAction.ID, actions_2.ToggleMenuBarAction.LABEL), 'View: Toggle Menu Bar', viewCategory);
}
// close the window when the last editor is closed by reusing the same keybinding
keybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({
    id: 'workbench.action.closeWindow',
    weight: keybindingsRegistry_1.KeybindingsRegistry.WEIGHT.workbenchContrib(),
    when: workbench_1.NoEditorsVisibleContext,
    primary: closeEditorOrWindowKeybindings.primary,
    handler: function (accessor) {
        var windowService = accessor.get(windowService_1.IWindowIPCService);
        windowService.getWindow().close();
    }
});
keybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({
    id: 'workbench.action.exitZenMode',
    weight: editorCommonExtensions_1.CommonEditorRegistry.commandWeight(-1000),
    handler: function (accessor, configurationOrName) {
        var partService = accessor.get(partService_1.IPartService);
        partService.toggleZenMode();
    },
    when: workbench_1.InZenModeContext,
    primary: keyCodes_1.KeyChord(9 /* Escape */, 9 /* Escape */)
});
keybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({
    id: 'workbench.action.quit',
    weight: keybindingsRegistry_1.KeybindingsRegistry.WEIGHT.workbenchContrib(),
    handler: function (accessor) {
        var windowsService = accessor.get(windows_1.IWindowsService);
        windowsService.quit();
    },
    when: void 0,
    primary: 32768 /* CtrlCmd */ | 47 /* KEY_Q */,
    win: { primary: void 0 }
});
// Configuration: Workbench
var configurationRegistry = platform_1.Registry.as(configurationRegistry_1.Extensions.Configuration);
configurationRegistry.registerConfiguration({
    'id': 'workbench',
    'order': 7,
    'title': nls.localize('workbenchConfigurationTitle', "Workbench"),
    'type': 'object',
    'properties': {
        'workbench.editor.showTabs': {
            'type': 'boolean',
            'description': nls.localize('showEditorTabs', "Controls if opened editors should show in tabs or not."),
            'default': true
        },
        'workbench.editor.showTabCloseButton': {
            'type': 'boolean',
            'description': nls.localize('showEditorTabCloseButton', "Controls if editor tabs should have a visible close button or not."),
            'default': true
        },
        'workbench.editor.showIcons': {
            'type': 'boolean',
            'description': nls.localize('showIcons', "Controls if opened editors should show with an icon or not. This requires an icon theme to be enabled as well."),
            'default': true
        },
        'workbench.editor.enablePreview': {
            'type': 'boolean',
            'description': nls.localize('enablePreview', "Controls if opened editors show as preview. Preview editors are reused until they are kept (e.g. via double click or editing)."),
            'default': true
        },
        'workbench.editor.enablePreviewFromQuickOpen': {
            'type': 'boolean',
            'description': nls.localize('enablePreviewFromQuickOpen', "Controls if opened editors from Quick Open show as preview. Preview editors are reused until they are kept (e.g. via double click or editing)."),
            'default': true
        },
        'workbench.editor.openPositioning': {
            'type': 'string',
            'enum': ['left', 'right', 'first', 'last'],
            'default': 'right',
            'description': nls.localize('editorOpenPositioning', "Controls where editors open. Select 'left' or 'right' to open editors to the left or right of the current active one. Select 'first' or 'last' to open editors independently from the currently active one.")
        },
        'workbench.quickOpen.closeOnFocusLost': {
            'type': 'boolean',
            'description': nls.localize('closeOnFocusLost', "Controls if Quick Open should close automatically once it loses focus."),
            'default': true
        },
        'workbench.settings.openDefaultSettings': {
            'type': 'boolean',
            'description': nls.localize('openDefaultSettings', "Controls if opening settings also opens an editor showing all default settings."),
            'default': true
        },
        'workbench.sideBar.location': {
            'type': 'string',
            'enum': ['left', 'right'],
            'default': 'left',
            'description': nls.localize('sideBarLocation', "Controls the location of the sidebar. It can either show on the left or right of the workbench.")
        },
        'workbench.statusBar.visible': {
            'type': 'boolean',
            'default': true,
            'description': nls.localize('statusBarVisibility', "Controls the visibility of the status bar at the bottom of the workbench.")
        },
        'workbench.activityBar.visible': {
            'type': 'boolean',
            'default': true,
            'description': nls.localize('activityBarVisibility', "Controls the visibility of the activity bar in the workbench.")
        }
    }
});
// Configuration: Window
var properties = {
    'window.openFilesInNewWindow': {
        'type': 'boolean',
        'default': true,
        'description': nls.localize('openFilesInNewWindow', "When enabled, will open files in a new window instead of reusing an existing instance.")
    },
    'window.reopenFolders': {
        'type': 'string',
        'enum': ['none', 'one', 'all'],
        'default': 'one',
        'description': nls.localize('reopenFolders', "Controls how folders are being reopened after a restart. Select 'none' to never reopen a folder, 'one' to reopen the last folder you worked on or 'all' to reopen all folders of your last session.")
    },
    'window.restoreFullscreen': {
        'type': 'boolean',
        'default': false,
        'description': nls.localize('restoreFullscreen', "Controls if a window should restore to full screen mode if it was exited in full screen mode.")
    },
    'window.fullScreenZenMode': {
        'type': 'boolean',
        'default': true,
        'description': nls.localize('fullScreenZenMode', "Controls if turning on Zen Mode also puts the workbench into full screen mode.")
    },
    'window.zoomLevel': {
        'type': 'number',
        'default': 0,
        'description': nls.localize('zoomLevel', "Adjust the zoom level of the window. The original size is 0 and each increment above (e.g. 1) or below (e.g. -1) represents zooming 20% larger or smaller. You can also enter decimals to adjust the zoom level with a finer granularity.")
    },
    'window.showFullPath': {
        'type': 'boolean',
        'default': false,
        'description': nls.localize('showFullPath', "If enabled, will show the full path of opened files in the window title.")
    }
};
if (platform.isMacintosh) {
    properties['window.titleBarStyle'] = {
        'type': 'string',
        'enum': ['native', 'custom'],
        'default': 'custom',
        'description': nls.localize('titleBarStyle', "Adjust the appearance of the window title bar. Changes require a full restart to apply.")
    };
}
configurationRegistry.registerConfiguration({
    'id': 'window',
    'order': 8,
    'title': nls.localize('windowConfigurationTitle', "Window"),
    'type': 'object',
    'properties': properties
});
