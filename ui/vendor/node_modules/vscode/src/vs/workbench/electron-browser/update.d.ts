import { TPromise } from 'vs/base/common/winjs.base';
import { Action } from 'vs/base/common/actions';
import { IMessageService } from 'vs/platform/message/common/message';
import { IWorkbenchEditorService } from 'vs/workbench/services/editor/common/editorService';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import { ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';
import { IOpenerService } from 'vs/platform/opener/common/opener';
export declare function loadReleaseNotes(accessor: ServicesAccessor, version: string): TPromise<string>;
export declare class OpenLatestReleaseNotesInBrowserAction extends Action {
    private openerService;
    constructor(openerService: IOpenerService);
    run(): TPromise<any>;
}
export declare abstract class AbstractShowReleaseNotesAction extends Action {
    private returnValue;
    private version;
    private editorService;
    private instantiationService;
    private openerService;
    constructor(id: any, label: any, returnValue: boolean, version: string, editorService: IWorkbenchEditorService, instantiationService: IInstantiationService, openerService: IOpenerService);
    run(): TPromise<boolean>;
}
export declare class ShowReleaseNotesAction extends AbstractShowReleaseNotesAction {
    constructor(returnValue: boolean, version: string, editorService: IWorkbenchEditorService, instantiationService: IInstantiationService, openerService: IOpenerService);
}
export declare class ShowCurrentReleaseNotesAction extends AbstractShowReleaseNotesAction {
    static ID: string;
    static LABEL: string;
    constructor(id: string, label: string, editorService: IWorkbenchEditorService, instantiationService: IInstantiationService, openerService: IOpenerService);
}
export declare const DownloadAction: (url: string) => Action;
export declare class Update {
    private messageService;
    private instantiationService;
    constructor(messageService: IMessageService, instantiationService: IInstantiationService);
}
