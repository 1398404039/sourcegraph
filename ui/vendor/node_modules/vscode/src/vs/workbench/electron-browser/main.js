/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var nls = require("vs/nls");
var winjs_base_1 = require("vs/base/common/winjs.base");
var shell_1 = require("vs/workbench/electron-browser/shell");
var browser = require("vs/base/browser/browser");
var dom_1 = require("vs/base/browser/dom");
var errors = require("vs/base/common/errors");
var comparer = require("vs/base/common/comparers");
var platform = require("vs/base/common/platform");
var paths = require("vs/base/common/paths");
var uri_1 = require("vs/base/common/uri");
var strings = require("vs/base/common/strings");
var workspace_1 = require("vs/platform/workspace/common/workspace");
var configurationService_1 = require("vs/workbench/services/configuration/node/configurationService");
var pfs_1 = require("vs/base/node/pfs");
var environmentService_1 = require("vs/platform/environment/node/environmentService");
var path = require("path");
var gracefulFs = require("graceful-fs");
var timerService_1 = require("vs/workbench/services/timer/node/timerService");
var electron_1 = require("electron");
var fs = require("fs");
gracefulFs.gracefulify(fs); // enable gracefulFs
function startup(configuration) {
    // Ensure others can listen to zoom level changes
    browser.setZoomFactor(electron_1.webFrame.getZoomFactor());
    browser.setZoomLevel(electron_1.webFrame.getZoomLevel());
    browser.setFullscreen(!!configuration.fullscreen);
    // Setup Intl
    comparer.setFileNameComparer(new Intl.Collator(undefined, { numeric: true, sensitivity: 'base' }));
    // Shell Options
    var filesToOpen = configuration.filesToOpen && configuration.filesToOpen.length ? toInputs(configuration.filesToOpen) : null;
    var filesToCreate = configuration.filesToCreate && configuration.filesToCreate.length ? toInputs(configuration.filesToCreate) : null;
    var filesToDiff = configuration.filesToDiff && configuration.filesToDiff.length ? toInputs(configuration.filesToDiff) : null;
    var shellOptions = {
        filesToOpen: filesToOpen,
        filesToCreate: filesToCreate,
        filesToDiff: filesToDiff
    };
    // Resolve workspace
    return getWorkspace(configuration.workspacePath).then(function (workspace) {
        // Open workbench
        return openWorkbench(configuration, workspace, shellOptions);
    });
}
exports.startup = startup;
function toInputs(paths, isUntitledFile) {
    return paths.map(function (p) {
        var input = {};
        if (isUntitledFile) {
            input.resource = uri_1.default.from({ scheme: 'untitled', path: p.filePath });
        }
        else {
            input.resource = uri_1.default.file(p.filePath);
        }
        if (p.lineNumber) {
            input.options = {
                selection: {
                    startLineNumber: p.lineNumber,
                    startColumn: p.columnNumber
                }
            };
        }
        return input;
    });
}
function getWorkspace(workspacePath) {
    if (!workspacePath) {
        return winjs_base_1.TPromise.as(null);
    }
    return pfs_1.realpath(workspacePath).then(function (realWorkspacePath) {
        // for some weird reason, node adds a trailing slash to UNC paths
        // we never ever want trailing slashes as our workspace path unless
        // someone opens root ("/").
        // See also https://github.com/nodejs/io.js/issues/1765
        if (paths.isUNC(realWorkspacePath) && strings.endsWith(realWorkspacePath, paths.nativeSep)) {
            realWorkspacePath = strings.rtrim(realWorkspacePath, paths.nativeSep);
        }
        var workspaceResource = uri_1.default.file(realWorkspacePath);
        var folderName = path.basename(realWorkspacePath) || realWorkspacePath;
        return pfs_1.stat(realWorkspacePath).then(function (folderStat) {
            return {
                'resource': workspaceResource,
                'name': folderName,
                'uid': platform.isLinux ? folderStat.ino : folderStat.birthtime.getTime() // On Linux, birthtime is ctime, so we cannot use it! We use the ino instead!
            };
        });
    }, function (error) {
        errors.onUnexpectedError(error);
        return null; // treat invalid paths as empty workspace
    });
}
function openWorkbench(environment, workspace, options) {
    var environmentService = new environmentService_1.EnvironmentService(environment, environment.execPath);
    var contextService = new workspace_1.WorkspaceContextService(workspace);
    var configurationService = new configurationService_1.WorkspaceConfigurationService(contextService, environmentService);
    var timerService = new timerService_1.TimerService(window.MonacoEnvironment.timers, !contextService.hasWorkspace());
    // Since the configuration service is one of the core services that is used in so many places, we initialize it
    // right before startup of the workbench shell to have its data ready for consumers
    return configurationService.initialize().then(function () {
        timerService.beforeDOMContentLoaded = new Date();
        return dom_1.domContentLoaded().then(function () {
            timerService.afterDOMContentLoaded = new Date();
            // Open Shell
            timerService.beforeWorkbenchOpen = new Date();
            var shell = new shell_1.WorkbenchShell(document.body, {
                configurationService: configurationService,
                contextService: contextService,
                environmentService: environmentService,
                timerService: timerService
            }, options);
            shell.open();
            // Inform user about loading issues from the loader
            self.require.config({
                onError: function (err) {
                    if (err.errorCode === 'load') {
                        shell.onUnexpectedError(loaderError(err));
                    }
                }
            });
        });
    });
}
function loaderError(err) {
    if (platform.isWeb) {
        return new Error(nls.localize('loaderError', "Failed to load a required file. Either you are no longer connected to the internet or the server you are connected to is offline. Please refresh the browser to try again."));
    }
    return new Error(nls.localize('loaderErrorNative', "Failed to load a required file. Please restart the application to try again. Details: {0}", JSON.stringify(err)));
}
