import { IMessageService } from 'vs/platform/message/common/message';
import { ILifecycleService } from 'vs/platform/lifecycle/common/lifecycle';
import { IWindowsService } from 'vs/platform/windows/common/windows';
import { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';
import { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';
import { IWindowIPCService } from 'vs/workbench/services/window/electron-browser/windowService';
import { IEnvironmentService } from 'vs/platform/environment/common/environment';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import { IMessagePassingProtocol } from 'vs/base/parts/ipc/common/ipc';
import Event from 'vs/base/common/event';
import { MainProcessExtensionService } from 'vs/workbench/api/node/mainThreadExtensionService';
import { IWorkspaceConfigurationService } from 'vs/workbench/services/configuration/common/configuration';
export declare const EXTENSION_LOG_BROADCAST_CHANNEL = "vscode:extensionLog";
export declare const EXTENSION_ATTACH_BROADCAST_CHANNEL = "vscode:extensionAttach";
export declare const EXTENSION_TERMINATE_BROADCAST_CHANNEL = "vscode:extensionTerminate";
export interface ILogEntry {
    type: string;
    severity: string;
    arguments: any;
}
export declare class LazyMessagePassingProtol implements IMessagePassingProtocol {
    private _delegate;
    private _onMessage;
    private _buffer;
    readonly onMessage: Event<any>;
    send(msg: any): void;
    resolve(delegate: IMessagePassingProtocol): void;
}
export declare class ExtensionHostProcessWorker {
    private contextService;
    private messageService;
    private windowsService;
    private windowService;
    private instantiationService;
    private environmentService;
    private configurationService;
    private telemetryService;
    private extensionHostProcess;
    private lastExtensionHostError;
    private terminating;
    private isExtensionDevelopmentHost;
    private isExtensionDevelopmentTestFromCli;
    private isExtensionDevelopmentDebugging;
    readonly messagingProtocol: LazyMessagePassingProtol;
    private extensionService;
    constructor(contextService: IWorkspaceContextService, messageService: IMessageService, windowsService: IWindowsService, windowService: IWindowIPCService, lifecycleService: ILifecycleService, instantiationService: IInstantiationService, environmentService: IEnvironmentService, configurationService: IWorkspaceConfigurationService, telemetryService: ITelemetryService);
    start(extensionService: MainProcessExtensionService): void;
    private tryListenOnPipe();
    private tryFindDebugPort();
    private tryExtHostHandshake(server);
    private createExtHostInitData();
    private logExtensionHostMessage(logEntry);
    private onError(err);
    private onExit(code, signal, onProcessExit);
    terminate(): void;
    private _onWillShutdown(event);
}
