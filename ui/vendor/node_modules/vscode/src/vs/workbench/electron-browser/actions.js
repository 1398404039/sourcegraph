/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var uri_1 = require("vs/base/common/uri");
var winjs_base_1 = require("vs/base/common/winjs.base");
var actions_1 = require("vs/base/common/actions");
var windowService_1 = require("vs/workbench/services/window/electron-browser/windowService");
var windows_1 = require("vs/platform/windows/common/windows");
var editorService_1 = require("vs/workbench/services/editor/common/editorService");
var nls = require("vs/nls");
var product_1 = require("vs/platform/node/product");
var package_1 = require("vs/platform/node/package");
var errors = require("vs/base/common/errors");
var message_1 = require("vs/platform/message/common/message");
var workspace_1 = require("vs/platform/workspace/common/workspace");
var environment_1 = require("vs/platform/environment/common/environment");
var configurationEditing_1 = require("vs/workbench/services/configuration/common/configurationEditing");
var configuration_1 = require("vs/platform/configuration/common/configuration");
var extensionManagement_1 = require("vs/platform/extensionManagement/common/extensionManagement");
var configuration_2 = require("vs/workbench/services/configuration/common/configuration");
var paths = require("vs/base/common/paths");
var platform_1 = require("vs/base/common/platform");
var quickOpen_1 = require("vs/platform/quickOpen/common/quickOpen");
var browser = require("vs/base/browser/browser");
var integrity_1 = require("vs/platform/integrity/common/integrity");
var timerService_1 = require("vs/workbench/services/timer/common/timerService");
var os = require("os");
var electron_1 = require("electron");
// --- actions
var CloseEditorAction = (function (_super) {
    __extends(CloseEditorAction, _super);
    function CloseEditorAction(id, label, editorService) {
        var _this = _super.call(this, id, label) || this;
        _this.editorService = editorService;
        return _this;
    }
    CloseEditorAction.prototype.run = function () {
        var activeEditor = this.editorService.getActiveEditor();
        if (activeEditor) {
            return this.editorService.closeEditor(activeEditor.position, activeEditor.input);
        }
        return winjs_base_1.TPromise.as(false);
    };
    return CloseEditorAction;
}(actions_1.Action));
CloseEditorAction.ID = 'workbench.action.closeActiveEditor';
CloseEditorAction.LABEL = nls.localize('closeActiveEditor', "Close Editor");
CloseEditorAction = __decorate([
    __param(2, editorService_1.IWorkbenchEditorService)
], CloseEditorAction);
exports.CloseEditorAction = CloseEditorAction;
var CloseWindowAction = (function (_super) {
    __extends(CloseWindowAction, _super);
    function CloseWindowAction(id, label, windowService) {
        var _this = _super.call(this, id, label) || this;
        _this.windowService = windowService;
        return _this;
    }
    CloseWindowAction.prototype.run = function () {
        this.windowService.getWindow().close();
        return winjs_base_1.TPromise.as(true);
    };
    return CloseWindowAction;
}(actions_1.Action));
CloseWindowAction.ID = 'workbench.action.closeWindow';
CloseWindowAction.LABEL = nls.localize('closeWindow', "Close Window");
CloseWindowAction = __decorate([
    __param(2, windowService_1.IWindowIPCService)
], CloseWindowAction);
exports.CloseWindowAction = CloseWindowAction;
var SwitchWindow = (function (_super) {
    __extends(SwitchWindow, _super);
    function SwitchWindow(id, label, windowsService, windowService, quickOpenService) {
        var _this = _super.call(this, id, label) || this;
        _this.windowsService = windowsService;
        _this.windowService = windowService;
        _this.quickOpenService = quickOpenService;
        return _this;
    }
    SwitchWindow.prototype.run = function () {
        var _this = this;
        var currentWindowId = this.windowService.getCurrentWindowId();
        return this.windowsService.getWindows().then(function (workspaces) {
            var placeHolder = nls.localize('switchWindowPlaceHolder', "Select a window");
            var picks = workspaces.map(function (w) { return ({
                label: w.title,
                description: (currentWindowId === w.id) ? nls.localize('current', "Current Window") : void 0,
                run: function () { return _this.windowsService.showWindow(w.id); }
            }); });
            _this.quickOpenService.pick(picks, { placeHolder: placeHolder });
        });
    };
    return SwitchWindow;
}(actions_1.Action));
SwitchWindow.ID = 'workbench.action.switchWindow';
SwitchWindow.LABEL = nls.localize('switchWindow', "Switch Window");
SwitchWindow = __decorate([
    __param(2, windows_1.IWindowsService),
    __param(3, windows_1.IWindowService),
    __param(4, quickOpen_1.IQuickOpenService)
], SwitchWindow);
exports.SwitchWindow = SwitchWindow;
var CloseFolderAction = (function (_super) {
    __extends(CloseFolderAction, _super);
    function CloseFolderAction(id, label, contextService, messageService, windowService) {
        var _this = _super.call(this, id, label) || this;
        _this.contextService = contextService;
        _this.messageService = messageService;
        _this.windowService = windowService;
        return _this;
    }
    CloseFolderAction.prototype.run = function () {
        if (!this.contextService.hasWorkspace()) {
            this.messageService.show(message_1.Severity.Info, nls.localize('noFolderOpened', "There is currently no folder opened in this instance to close."));
            return winjs_base_1.TPromise.as(null);
        }
        return this.windowService.closeFolder();
    };
    return CloseFolderAction;
}(actions_1.Action));
CloseFolderAction.ID = 'workbench.action.closeFolder';
CloseFolderAction.LABEL = nls.localize('closeFolder', "Close Folder");
CloseFolderAction = __decorate([
    __param(2, workspace_1.IWorkspaceContextService),
    __param(3, message_1.IMessageService),
    __param(4, windows_1.IWindowService)
], CloseFolderAction);
exports.CloseFolderAction = CloseFolderAction;
var NewWindowAction = (function (_super) {
    __extends(NewWindowAction, _super);
    function NewWindowAction(id, label, windowsService) {
        var _this = _super.call(this, id, label) || this;
        _this.windowsService = windowsService;
        return _this;
    }
    NewWindowAction.prototype.run = function () {
        return this.windowsService.openNewWindow();
    };
    return NewWindowAction;
}(actions_1.Action));
NewWindowAction.ID = 'workbench.action.newWindow';
NewWindowAction.LABEL = nls.localize('newWindow', "New Window");
NewWindowAction = __decorate([
    __param(2, windows_1.IWindowsService)
], NewWindowAction);
exports.NewWindowAction = NewWindowAction;
var ToggleFullScreenAction = (function (_super) {
    __extends(ToggleFullScreenAction, _super);
    function ToggleFullScreenAction(id, label, windowService) {
        var _this = _super.call(this, id, label) || this;
        _this.windowService = windowService;
        return _this;
    }
    ToggleFullScreenAction.prototype.run = function () {
        return this.windowService.toggleFullScreen();
    };
    return ToggleFullScreenAction;
}(actions_1.Action));
ToggleFullScreenAction.ID = 'workbench.action.toggleFullScreen';
ToggleFullScreenAction.LABEL = nls.localize('toggleFullScreen', "Toggle Full Screen");
ToggleFullScreenAction = __decorate([
    __param(2, windows_1.IWindowService)
], ToggleFullScreenAction);
exports.ToggleFullScreenAction = ToggleFullScreenAction;
var ToggleMenuBarAction = (function (_super) {
    __extends(ToggleMenuBarAction, _super);
    function ToggleMenuBarAction(id, label, messageService, configurationService, configurationEditingService) {
        var _this = _super.call(this, id, label) || this;
        _this.messageService = messageService;
        _this.configurationService = configurationService;
        _this.configurationEditingService = configurationEditingService;
        return _this;
    }
    ToggleMenuBarAction.prototype.run = function () {
        var _this = this;
        var currentVisibilityValue = this.configurationService.lookup(ToggleMenuBarAction.menuBarVisibilityKey).value;
        if (typeof currentVisibilityValue !== 'string') {
            currentVisibilityValue = 'default';
        }
        var newVisibilityValue;
        if (currentVisibilityValue === 'visible' || currentVisibilityValue === 'default') {
            newVisibilityValue = 'toggle';
        }
        else {
            newVisibilityValue = 'default';
        }
        this.configurationEditingService.writeConfiguration(configurationEditing_1.ConfigurationTarget.USER, { key: ToggleMenuBarAction.menuBarVisibilityKey, value: newVisibilityValue }).then(null, function (error) {
            _this.messageService.show(message_1.Severity.Error, error);
        });
        return winjs_base_1.TPromise.as(null);
    };
    return ToggleMenuBarAction;
}(actions_1.Action));
ToggleMenuBarAction.ID = 'workbench.action.toggleMenuBar';
ToggleMenuBarAction.LABEL = nls.localize('toggleMenuBar', "Toggle Menu Bar");
ToggleMenuBarAction.menuBarVisibilityKey = 'window.menuBarVisibility';
ToggleMenuBarAction = __decorate([
    __param(2, message_1.IMessageService),
    __param(3, configuration_1.IConfigurationService),
    __param(4, configurationEditing_1.IConfigurationEditingService)
], ToggleMenuBarAction);
exports.ToggleMenuBarAction = ToggleMenuBarAction;
var ToggleDevToolsAction = (function (_super) {
    __extends(ToggleDevToolsAction, _super);
    function ToggleDevToolsAction(id, label, windowsService) {
        var _this = _super.call(this, id, label) || this;
        _this.windowsService = windowsService;
        return _this;
    }
    ToggleDevToolsAction.prototype.run = function () {
        return this.windowsService.toggleDevTools();
    };
    return ToggleDevToolsAction;
}(actions_1.Action));
ToggleDevToolsAction.ID = 'workbench.action.toggleDevTools';
ToggleDevToolsAction.LABEL = nls.localize('toggleDevTools', "Toggle Developer Tools");
ToggleDevToolsAction = __decorate([
    __param(2, windows_1.IWindowService)
], ToggleDevToolsAction);
exports.ToggleDevToolsAction = ToggleDevToolsAction;
var BaseZoomAction = (function (_super) {
    __extends(BaseZoomAction, _super);
    function BaseZoomAction(id, label, configurationService, configurationEditingService) {
        var _this = _super.call(this, id, label) || this;
        _this.configurationService = configurationService;
        _this.configurationEditingService = configurationEditingService;
        return _this;
    }
    BaseZoomAction.prototype.setConfiguredZoomLevel = function (level) {
        var target = configurationEditing_1.ConfigurationTarget.USER;
        if (typeof this.configurationService.lookup(BaseZoomAction.SETTING_KEY).workspace === 'number') {
            target = configurationEditing_1.ConfigurationTarget.WORKSPACE;
        }
        level = Math.round(level); // when reaching smallest zoom, prevent fractional zoom levels
        var applyZoom = function () {
            electron_1.webFrame.setZoomLevel(level);
            browser.setZoomFactor(electron_1.webFrame.getZoomFactor());
            browser.setZoomLevel(level); // Ensure others can listen to zoom level changes
        };
        this.configurationEditingService.writeConfiguration(target, { key: BaseZoomAction.SETTING_KEY, value: level }).done(function () { return applyZoom(); }, function (error) { return applyZoom(); });
    };
    return BaseZoomAction;
}(actions_1.Action));
BaseZoomAction.SETTING_KEY = 'window.zoomLevel';
BaseZoomAction = __decorate([
    __param(2, configuration_2.IWorkspaceConfigurationService),
    __param(3, configurationEditing_1.IConfigurationEditingService)
], BaseZoomAction);
exports.BaseZoomAction = BaseZoomAction;
var ZoomInAction = (function (_super) {
    __extends(ZoomInAction, _super);
    function ZoomInAction(id, label, configurationService, configurationEditingService) {
        return _super.call(this, id, label, configurationService, configurationEditingService) || this;
    }
    ZoomInAction.prototype.run = function () {
        this.setConfiguredZoomLevel(electron_1.webFrame.getZoomLevel() + 1);
        return winjs_base_1.TPromise.as(true);
    };
    return ZoomInAction;
}(BaseZoomAction));
ZoomInAction.ID = 'workbench.action.zoomIn';
ZoomInAction.LABEL = nls.localize('zoomIn', "Zoom In");
ZoomInAction = __decorate([
    __param(2, configuration_2.IWorkspaceConfigurationService),
    __param(3, configurationEditing_1.IConfigurationEditingService)
], ZoomInAction);
exports.ZoomInAction = ZoomInAction;
var ZoomOutAction = (function (_super) {
    __extends(ZoomOutAction, _super);
    function ZoomOutAction(id, label, configurationService, configurationEditingService) {
        return _super.call(this, id, label, configurationService, configurationEditingService) || this;
    }
    ZoomOutAction.prototype.run = function () {
        this.setConfiguredZoomLevel(electron_1.webFrame.getZoomLevel() - 1);
        return winjs_base_1.TPromise.as(true);
    };
    return ZoomOutAction;
}(BaseZoomAction));
ZoomOutAction.ID = 'workbench.action.zoomOut';
ZoomOutAction.LABEL = nls.localize('zoomOut', "Zoom Out");
ZoomOutAction = __decorate([
    __param(2, configuration_2.IWorkspaceConfigurationService),
    __param(3, configurationEditing_1.IConfigurationEditingService)
], ZoomOutAction);
exports.ZoomOutAction = ZoomOutAction;
var ZoomResetAction = (function (_super) {
    __extends(ZoomResetAction, _super);
    function ZoomResetAction(id, label, configurationService, configurationEditingService) {
        return _super.call(this, id, label, configurationService, configurationEditingService) || this;
    }
    ZoomResetAction.prototype.run = function () {
        this.setConfiguredZoomLevel(0);
        return winjs_base_1.TPromise.as(true);
    };
    return ZoomResetAction;
}(BaseZoomAction));
ZoomResetAction.ID = 'workbench.action.zoomReset';
ZoomResetAction.LABEL = nls.localize('zoomReset', "Reset Zoom");
ZoomResetAction = __decorate([
    __param(2, configuration_2.IWorkspaceConfigurationService),
    __param(3, configurationEditing_1.IConfigurationEditingService)
], ZoomResetAction);
exports.ZoomResetAction = ZoomResetAction;
/* Copied from loader.ts */
var LoaderEventType;
(function (LoaderEventType) {
    LoaderEventType[LoaderEventType["LoaderAvailable"] = 1] = "LoaderAvailable";
    LoaderEventType[LoaderEventType["BeginLoadingScript"] = 10] = "BeginLoadingScript";
    LoaderEventType[LoaderEventType["EndLoadingScriptOK"] = 11] = "EndLoadingScriptOK";
    LoaderEventType[LoaderEventType["EndLoadingScriptError"] = 12] = "EndLoadingScriptError";
    LoaderEventType[LoaderEventType["BeginInvokeFactory"] = 21] = "BeginInvokeFactory";
    LoaderEventType[LoaderEventType["EndInvokeFactory"] = 22] = "EndInvokeFactory";
    LoaderEventType[LoaderEventType["NodeBeginEvaluatingScript"] = 31] = "NodeBeginEvaluatingScript";
    LoaderEventType[LoaderEventType["NodeEndEvaluatingScript"] = 32] = "NodeEndEvaluatingScript";
    LoaderEventType[LoaderEventType["NodeBeginNativeRequire"] = 33] = "NodeBeginNativeRequire";
    LoaderEventType[LoaderEventType["NodeEndNativeRequire"] = 34] = "NodeEndNativeRequire";
})(LoaderEventType || (LoaderEventType = {}));
var ShowStartupPerformance = (function (_super) {
    __extends(ShowStartupPerformance, _super);
    function ShowStartupPerformance(id, label, windowService, timerService, environmentService) {
        var _this = _super.call(this, id, label) || this;
        _this.windowService = windowService;
        _this.timerService = timerService;
        _this.environmentService = environmentService;
        return _this;
    }
    ShowStartupPerformance.prototype.run = function () {
        var _this = this;
        // Show dev tools
        this.windowService.openDevTools();
        // Print to console
        setTimeout(function () {
            console.group('Startup Performance Measurement');
            var metrics = _this.timerService.startupMetrics;
            console.log("OS: " + metrics.platform + " (" + metrics.release + ")");
            console.log("CPUs: " + metrics.cpus.model + " (" + metrics.cpus.count + " x " + metrics.cpus.speed + ")");
            console.log("Memory (System): " + (metrics.totalmem / (1024 * 1024 * 1024)).toFixed(2) + "GB (" + (metrics.freemem / (1024 * 1024 * 1024)).toFixed(2) + "GB free)");
            console.log("Memory (Process): " + (metrics.meminfo.workingSetSize / 1024).toFixed(2) + "MB working set (" + (metrics.meminfo.peakWorkingSetSize / 1024).toFixed(2) + "MB peak, " + (metrics.meminfo.privateBytes / 1024).toFixed(2) + "MB private, " + (metrics.meminfo.sharedBytes / 1024).toFixed(2) + "MB shared)");
            console.log("VM (likelyhood): " + metrics.isVMLikelyhood + "%");
            console.log("Initial Startup: " + metrics.initialStartup);
            console.log("Screen Reader Active: " + metrics.hasAccessibilitySupport);
            console.log("Empty Workspace: " + metrics.emptyWorkbench);
            var nodeModuleLoadTime;
            var nodeModuleLoadDetails;
            if (_this.environmentService.performance) {
                var nodeModuleTimes = _this.analyzeNodeModulesLoadTimes();
                nodeModuleLoadTime = nodeModuleTimes.duration;
                nodeModuleLoadDetails = nodeModuleTimes.table;
            }
            console.table(_this.getStartupMetricsTable(nodeModuleLoadTime));
            if (_this.environmentService.performance) {
                var data = _this.analyzeLoaderStats();
                for (var type in data) {
                    console.groupCollapsed("Loader: " + type);
                    console.table(data[type]);
                    console.groupEnd();
                }
            }
            console.groupEnd();
        }, 1000);
        return winjs_base_1.TPromise.as(true);
    };
    ShowStartupPerformance.prototype.getStartupMetricsTable = function (nodeModuleLoadTime) {
        var table = [];
        var metrics = this.timerService.startupMetrics;
        if (metrics.initialStartup) {
            table.push({ Topic: '[main] start => app.isReady', 'Took (ms)': metrics.timers.ellapsedAppReady });
            table.push({ Topic: '[main] app.isReady => window.loadUrl()', 'Took (ms)': metrics.timers.ellapsedWindowLoad });
        }
        table.push({ Topic: '[renderer] window.loadUrl() => begin to require(workbench.main.js)', 'Took (ms)': metrics.timers.ellapsedWindowLoadToRequire });
        table.push({ Topic: '[renderer] require(workbench.main.js)', 'Took (ms)': metrics.timers.ellapsedRequire });
        if (nodeModuleLoadTime) {
            table.push({ Topic: '[renderer] -> of which require() node_modules', 'Took (ms)': nodeModuleLoadTime });
        }
        table.push({ Topic: '[renderer] create extension host => extensions onReady()', 'Took (ms)': metrics.timers.ellapsedExtensions });
        table.push({ Topic: '[renderer] restore viewlet', 'Took (ms)': metrics.timers.ellapsedViewletRestore });
        table.push({ Topic: '[renderer] restore editor view state', 'Took (ms)': metrics.timers.ellapsedEditorRestore });
        table.push({ Topic: '[renderer] overall workbench load', 'Took (ms)': metrics.timers.ellapsedWorkbench });
        table.push({ Topic: '------------------------------------------------------' });
        table.push({ Topic: '[main, renderer] start => extensions ready', 'Took (ms)': metrics.timers.ellapsedExtensionsReady });
        table.push({ Topic: '[main, renderer] start => workbench ready', 'Took (ms)': metrics.ellapsed });
        return table;
    };
    ShowStartupPerformance.prototype.analyzeNodeModulesLoadTimes = function () {
        var stats = require.getStats();
        var result = [];
        var total = 0;
        for (var i = 0, len = stats.length; i < len; i++) {
            if (stats[i].type === LoaderEventType.NodeEndNativeRequire) {
                if (stats[i - 1].type === LoaderEventType.NodeBeginNativeRequire && stats[i - 1].detail === stats[i].detail) {
                    var entry = {};
                    var dur = (stats[i].timestamp - stats[i - 1].timestamp);
                    entry['Event'] = 'nodeRequire ' + stats[i].detail;
                    entry['Took (ms)'] = dur.toFixed(2);
                    total += dur;
                    entry['Start (ms)'] = '**' + stats[i - 1].timestamp.toFixed(2);
                    entry['End (ms)'] = '**' + stats[i - 1].timestamp.toFixed(2);
                    result.push(entry);
                }
            }
        }
        if (total > 0) {
            result.push({ Event: '------------------------------------------------------' });
            var entry = {};
            entry['Event'] = '[renderer] total require() node_modules';
            entry['Took (ms)'] = total.toFixed(2);
            entry['Start (ms)'] = '**';
            entry['End (ms)'] = '**';
            result.push(entry);
        }
        return { table: result, duration: Math.round(total) };
    };
    ShowStartupPerformance.prototype.analyzeLoaderStats = function () {
        var stats = require.getStats().slice(0).sort(function (a, b) {
            if (a.detail < b.detail) {
                return -1;
            }
            else if (a.detail > b.detail) {
                return 1;
            }
            else if (a.type < b.type) {
                return -1;
            }
            else if (a.type > b.type) {
                return 1;
            }
            else {
                return 0;
            }
        });
        var Tick = (function () {
            function Tick(start, end) {
                this.start = start;
                this.end = end;
                console.assert(start.detail === end.detail);
                this.duration = this.end.timestamp - this.start.timestamp;
                this.detail = start.detail;
            }
            Tick.prototype.toTableObject = function () {
                return _a = {},
                    _a['Path'] = this.start.detail,
                    _a['Took (ms)'] = this.duration.toFixed(2),
                    _a;
                var _a;
            };
            Tick.compareUsingStartTimestamp = function (a, b) {
                if (a.start.timestamp < b.start.timestamp) {
                    return -1;
                }
                else if (a.start.timestamp > b.start.timestamp) {
                    return 1;
                }
                else {
                    return 0;
                }
            };
            return Tick;
        }());
        var ticks = (_a = {},
            _a[LoaderEventType.BeginLoadingScript] = [],
            _a[LoaderEventType.BeginInvokeFactory] = [],
            _a[LoaderEventType.NodeBeginEvaluatingScript] = [],
            _a[LoaderEventType.NodeBeginNativeRequire] = [],
            _a);
        for (var i = 1; i < stats.length - 1; i++) {
            var stat = stats[i];
            var nextStat = stats[i + 1];
            if (nextStat.type - stat.type > 2) {
                //bad?!
                break;
            }
            i += 1;
            ticks[stat.type].push(new Tick(stat, nextStat));
        }
        ticks[LoaderEventType.BeginInvokeFactory].sort(Tick.compareUsingStartTimestamp);
        ticks[LoaderEventType.BeginInvokeFactory].sort(Tick.compareUsingStartTimestamp);
        ticks[LoaderEventType.NodeBeginEvaluatingScript].sort(Tick.compareUsingStartTimestamp);
        ticks[LoaderEventType.NodeBeginNativeRequire].sort(Tick.compareUsingStartTimestamp);
        var ret = {
            'Load Script': ticks[LoaderEventType.BeginLoadingScript].map(function (t) { return t.toTableObject(); }),
            '(Node) Load Script': ticks[LoaderEventType.NodeBeginNativeRequire].map(function (t) { return t.toTableObject(); }),
            'Eval Script': ticks[LoaderEventType.BeginInvokeFactory].map(function (t) { return t.toTableObject(); }),
            '(Node) Eval Script': ticks[LoaderEventType.NodeBeginEvaluatingScript].map(function (t) { return t.toTableObject(); }),
        };
        function total(ticks) {
            var sum = 0;
            for (var _i = 0, ticks_1 = ticks; _i < ticks_1.length; _i++) {
                var tick = ticks_1[_i];
                sum += tick.duration;
            }
            return sum;
        }
        // totals
        ret['Load Script'].push((_b = {},
            _b['Path'] = 'TOTAL TIME',
            _b['Took (ms)'] = total(ticks[LoaderEventType.BeginLoadingScript]).toFixed(2),
            _b));
        ret['Eval Script'].push((_c = {},
            _c['Path'] = 'TOTAL TIME',
            _c['Took (ms)'] = total(ticks[LoaderEventType.BeginInvokeFactory]).toFixed(2),
            _c));
        ret['(Node) Load Script'].push((_d = {},
            _d['Path'] = 'TOTAL TIME',
            _d['Took (ms)'] = total(ticks[LoaderEventType.NodeBeginNativeRequire]).toFixed(2),
            _d));
        ret['(Node) Eval Script'].push((_e = {},
            _e['Path'] = 'TOTAL TIME',
            _e['Took (ms)'] = total(ticks[LoaderEventType.NodeBeginEvaluatingScript]).toFixed(2),
            _e));
        return ret;
        var _a, _b, _c, _d, _e;
    };
    return ShowStartupPerformance;
}(actions_1.Action));
ShowStartupPerformance.ID = 'workbench.action.appPerf';
ShowStartupPerformance.LABEL = nls.localize('appPerf', "Startup Performance");
ShowStartupPerformance = __decorate([
    __param(2, windows_1.IWindowService),
    __param(3, timerService_1.ITimerService),
    __param(4, environment_1.IEnvironmentService)
], ShowStartupPerformance);
exports.ShowStartupPerformance = ShowStartupPerformance;
var ReloadWindowAction = (function (_super) {
    __extends(ReloadWindowAction, _super);
    function ReloadWindowAction(id, label, windowService) {
        var _this = _super.call(this, id, label) || this;
        _this.windowService = windowService;
        return _this;
    }
    ReloadWindowAction.prototype.run = function () {
        return this.windowService.reloadWindow().then(function () { return true; });
    };
    return ReloadWindowAction;
}(actions_1.Action));
ReloadWindowAction.ID = 'workbench.action.reloadWindow';
ReloadWindowAction.LABEL = nls.localize('reloadWindow', "Reload Window");
ReloadWindowAction = __decorate([
    __param(2, windows_1.IWindowService)
], ReloadWindowAction);
exports.ReloadWindowAction = ReloadWindowAction;
var OpenRecentAction = (function (_super) {
    __extends(OpenRecentAction, _super);
    function OpenRecentAction(id, label, windowsService, windowService, quickOpenService, contextService) {
        var _this = _super.call(this, id, label) || this;
        _this.windowsService = windowsService;
        _this.windowService = windowService;
        _this.quickOpenService = quickOpenService;
        _this.contextService = contextService;
        return _this;
    }
    OpenRecentAction.prototype.run = function () {
        var _this = this;
        return this.windowService.getRecentlyOpen()
            .then(function (_a) {
            var files = _a.files, folders = _a.folders;
            return _this.openRecent(files, folders);
        });
    };
    OpenRecentAction.prototype.openRecent = function (recentFiles, recentFolders) {
        var _this = this;
        function toPick(path, separator, isFolder) {
            return {
                resource: uri_1.default.file(path),
                isFolder: isFolder,
                label: paths.basename(path),
                description: paths.dirname(path),
                separator: separator,
                run: function (context) { return runPick(path, context); }
            };
        }
        var runPick = function (path, context) {
            var forceNewWindow = context.keymods.indexOf(2048 /* CtrlCmd */) >= 0;
            _this.windowsService.openWindow([path], { forceNewWindow: forceNewWindow });
        };
        var folderPicks = recentFolders.map(function (p, index) { return toPick(p, index === 0 ? { label: nls.localize('folders', "folders") } : void 0, true); });
        var filePicks = recentFiles.map(function (p, index) { return toPick(p, index === 0 ? { label: nls.localize('files', "files"), border: true } : void 0, false); });
        var hasWorkspace = this.contextService.hasWorkspace();
        this.quickOpenService.pick(folderPicks.concat.apply(folderPicks, filePicks), {
            autoFocus: { autoFocusFirstEntry: !hasWorkspace, autoFocusSecondEntry: hasWorkspace },
            placeHolder: platform_1.isMacintosh ? nls.localize('openRecentPlaceHolderMac', "Select a path (hold Cmd-key to open in new window)") : nls.localize('openRecentPlaceHolder', "Select a path to open (hold Ctrl-key to open in new window)"),
            matchOnDescription: true
        }).done(null, errors.onUnexpectedError);
    };
    return OpenRecentAction;
}(actions_1.Action));
OpenRecentAction.ID = 'workbench.action.openRecent';
OpenRecentAction.LABEL = nls.localize('openRecent', "Open Recent");
OpenRecentAction = __decorate([
    __param(2, windows_1.IWindowsService),
    __param(3, windows_1.IWindowService),
    __param(4, quickOpen_1.IQuickOpenService),
    __param(5, workspace_1.IWorkspaceContextService)
], OpenRecentAction);
exports.OpenRecentAction = OpenRecentAction;
var CloseMessagesAction = (function (_super) {
    __extends(CloseMessagesAction, _super);
    function CloseMessagesAction(id, label, messageService, editorService) {
        var _this = _super.call(this, id, label) || this;
        _this.messageService = messageService;
        _this.editorService = editorService;
        return _this;
    }
    CloseMessagesAction.prototype.run = function () {
        // Close any Message if visible
        this.messageService.hideAll();
        // Restore focus if we got an editor
        var editor = this.editorService.getActiveEditor();
        if (editor) {
            editor.focus();
        }
        return winjs_base_1.TPromise.as(true);
    };
    return CloseMessagesAction;
}(actions_1.Action));
CloseMessagesAction.ID = 'workbench.action.closeMessages';
CloseMessagesAction.LABEL = nls.localize('closeMessages', "Close Notification Messages");
CloseMessagesAction = __decorate([
    __param(2, message_1.IMessageService),
    __param(3, editorService_1.IWorkbenchEditorService)
], CloseMessagesAction);
exports.CloseMessagesAction = CloseMessagesAction;
var ReportIssueAction = (function (_super) {
    __extends(ReportIssueAction, _super);
    function ReportIssueAction(id, label, integrityService, extensionManagementService) {
        var _this = _super.call(this, id, label) || this;
        _this.integrityService = integrityService;
        _this.extensionManagementService = extensionManagementService;
        return _this;
    }
    ReportIssueAction.prototype.run = function () {
        var _this = this;
        return this.integrityService.isPure().then(function (res) {
            return _this.extensionManagementService.getInstalled(extensionManagement_1.LocalExtensionType.User).then(function (extensions) {
                var issueUrl = _this.generateNewIssueUrl(product_1.default.reportIssueUrl, package_1.default.name, package_1.default.version, product_1.default.commit, product_1.default.date, res.isPure, extensions);
                window.open(issueUrl);
                return winjs_base_1.TPromise.as(true);
            });
        });
    };
    ReportIssueAction.prototype.generateNewIssueUrl = function (baseUrl, name, version, commit, date, isPure, extensions) {
        // Avoid backticks, these can trigger XSS detectors. (https://github.com/Microsoft/vscode/issues/13098)
        var osVersion = os.type() + " " + os.arch() + " " + os.release();
        var queryStringPrefix = baseUrl.indexOf('?') === -1 ? '?' : '&';
        var body = encodeURIComponent("- VSCode Version: " + name + " " + version + (isPure ? '' : ' **[Unsupported]**') + " (" + (product_1.default.commit || 'Commit unknown') + ", " + (product_1.default.date || 'Date unknown') + ")\n- OS Version: " + osVersion + "\n- Extensions: " + this.generateExtensionTable(extensions) + "\n---\n\nSteps to Reproduce:\n\n1.\n2.");
        return "" + baseUrl + queryStringPrefix + "body=" + body;
    };
    ReportIssueAction.prototype.generateExtensionTable = function (extensions) {
        if (!extensions.length) {
            return 'none';
        }
        var tableHeader = "|Extension|Author|Version|\n|---|---|---|";
        var table = extensions.map(function (e) {
            return "|" + e.manifest.name + "|" + e.manifest.publisher + "|" + e.manifest.version + "|";
        }).join('\n');
        return "\n\n" + tableHeader + "\n" + table + ";\n\n";
    };
    return ReportIssueAction;
}(actions_1.Action));
ReportIssueAction.ID = 'workbench.action.reportIssues';
ReportIssueAction.LABEL = nls.localize('reportIssues', "Report Issues");
ReportIssueAction = __decorate([
    __param(2, integrity_1.IIntegrityService),
    __param(3, extensionManagement_1.IExtensionManagementService)
], ReportIssueAction);
exports.ReportIssueAction = ReportIssueAction;
var ReportPerformanceIssueAction = (function (_super) {
    __extends(ReportPerformanceIssueAction, _super);
    function ReportPerformanceIssueAction(id, label, integrityService, environmentService, timerService) {
        var _this = _super.call(this, id, label) || this;
        _this.integrityService = integrityService;
        _this.environmentService = environmentService;
        _this.timerService = timerService;
        return _this;
    }
    ReportPerformanceIssueAction.prototype.run = function (appendix) {
        var _this = this;
        return this.integrityService.isPure().then(function (res) {
            var issueUrl = _this.generatePerformanceIssueUrl(product_1.default.reportIssueUrl, package_1.default.name, package_1.default.version, product_1.default.commit, product_1.default.date, res.isPure, appendix);
            window.open(issueUrl);
            return winjs_base_1.TPromise.as(true);
        });
    };
    ReportPerformanceIssueAction.prototype.generatePerformanceIssueUrl = function (baseUrl, name, version, commit, date, isPure, appendix) {
        if (!appendix) {
            appendix = "Additional Steps to Reproduce (if any):\n\n1.\n2.";
        }
        var nodeModuleLoadTime;
        if (this.environmentService.performance) {
            nodeModuleLoadTime = this.computeNodeModulesLoadTime();
        }
        var metrics = this.timerService.startupMetrics;
        var osVersion = os.type() + " " + os.arch() + " " + os.release();
        var queryStringPrefix = baseUrl.indexOf('?') === -1 ? '?' : '&';
        var body = encodeURIComponent("- VSCode Version: <code>" + name + " " + version + (isPure ? '' : ' **[Unsupported]**') + " (" + (product_1.default.commit || 'Commit unknown') + ", " + (product_1.default.date || 'Date unknown') + ")</code>\n- OS Version: <code>" + osVersion + "</code>\n- CPUs: <code>" + metrics.cpus.model + " (" + metrics.cpus.count + " x " + metrics.cpus.speed + ")</code>\n- Memory (System): <code>" + (metrics.totalmem / (1024 * 1024 * 1024)).toFixed(2) + "GB (" + (metrics.freemem / (1024 * 1024 * 1024)).toFixed(2) + "GB free)</code>\n- Memory (Process): <code>" + (metrics.meminfo.workingSetSize / 1024).toFixed(2) + "MB working set (" + (metrics.meminfo.peakWorkingSetSize / 1024).toFixed(2) + "MB peak, " + (metrics.meminfo.privateBytes / 1024).toFixed(2) + "MB private, " + (metrics.meminfo.sharedBytes / 1024).toFixed(2) + "MB shared)</code>\n- Load (avg): <code>" + metrics.loadavg.map(function (l) { return Math.round(l); }).join(', ') + "</code>\n- VM: <code>" + metrics.isVMLikelyhood + "%</code>\n- Initial Startup: <code>" + (metrics.initialStartup ? 'yes' : 'no') + "</code>\n- Screen Reader: <code>" + (metrics.hasAccessibilitySupport ? 'yes' : 'no') + "</code>\n- Empty Workspace: <code>" + (metrics.emptyWorkbench ? 'yes' : 'no') + "</code>\n- Timings:\n\n" + this.generatePerformanceTable(nodeModuleLoadTime) + "\n\n---\n\n" + appendix);
        return "" + baseUrl + queryStringPrefix + "body=" + body;
    };
    ReportPerformanceIssueAction.prototype.computeNodeModulesLoadTime = function () {
        var stats = require.getStats();
        var total = 0;
        for (var i = 0, len = stats.length; i < len; i++) {
            if (stats[i].type === LoaderEventType.NodeEndNativeRequire) {
                if (stats[i - 1].type === LoaderEventType.NodeBeginNativeRequire && stats[i - 1].detail === stats[i].detail) {
                    var dur = (stats[i].timestamp - stats[i - 1].timestamp);
                    total += dur;
                }
            }
        }
        return Math.round(total);
    };
    ReportPerformanceIssueAction.prototype.generatePerformanceTable = function (nodeModuleLoadTime) {
        var tableHeader = "|Component|Task|Time (ms)|\n|---|---|---|";
        var table = this.getStartupMetricsTable(nodeModuleLoadTime).map(function (e) {
            return "|" + e.component + "|" + e.task + "|" + e.time + "|";
        }).join('\n');
        return tableHeader + "\n" + table;
    };
    ReportPerformanceIssueAction.prototype.getStartupMetricsTable = function (nodeModuleLoadTime) {
        var table = [];
        var metrics = this.timerService.startupMetrics;
        if (metrics.initialStartup) {
            table.push({ component: 'main', task: 'start => app.isReady', time: metrics.timers.ellapsedAppReady });
            table.push({ component: 'main', task: 'app.isReady => window.loadUrl()', time: metrics.timers.ellapsedWindowLoad });
        }
        table.push({ component: 'renderer', task: 'window.loadUrl() => begin to require(workbench.main.js)', time: metrics.timers.ellapsedWindowLoadToRequire });
        table.push({ component: 'renderer', task: 'require(workbench.main.js)', time: metrics.timers.ellapsedRequire });
        if (nodeModuleLoadTime) {
            table.push({ component: 'renderer', task: '-> of which require() node_modules', time: nodeModuleLoadTime });
        }
        table.push({ component: 'renderer', task: 'create extension host => extensions onReady()', time: metrics.timers.ellapsedExtensions });
        table.push({ component: 'renderer', task: 'restore viewlet', time: metrics.timers.ellapsedViewletRestore });
        table.push({ component: 'renderer', task: 'restore editor view state', time: metrics.timers.ellapsedEditorRestore });
        table.push({ component: 'renderer', task: 'overall workbench load', time: metrics.timers.ellapsedWorkbench });
        table.push({ component: 'main + renderer', task: 'start => extensions ready', time: metrics.timers.ellapsedExtensionsReady });
        table.push({ component: 'main + renderer', task: 'start => workbench ready', time: metrics.ellapsed });
        return table;
    };
    return ReportPerformanceIssueAction;
}(actions_1.Action));
ReportPerformanceIssueAction.ID = 'workbench.action.reportPerformanceIssue';
ReportPerformanceIssueAction.LABEL = nls.localize('reportPerformanceIssue', "Report Performance Issue");
ReportPerformanceIssueAction = __decorate([
    __param(2, integrity_1.IIntegrityService),
    __param(3, environment_1.IEnvironmentService),
    __param(4, timerService_1.ITimerService)
], ReportPerformanceIssueAction);
exports.ReportPerformanceIssueAction = ReportPerformanceIssueAction;
var KeybindingsReferenceAction = (function (_super) {
    __extends(KeybindingsReferenceAction, _super);
    function KeybindingsReferenceAction(id, label) {
        return _super.call(this, id, label) || this;
    }
    KeybindingsReferenceAction.prototype.run = function () {
        window.open(KeybindingsReferenceAction.URL);
        return null;
    };
    return KeybindingsReferenceAction;
}(actions_1.Action));
KeybindingsReferenceAction.ID = 'workbench.action.keybindingsReference';
KeybindingsReferenceAction.LABEL = nls.localize('keybindingsReference', "Keyboard Shortcuts Reference");
KeybindingsReferenceAction.URL = platform_1.isLinux ? product_1.default.keyboardShortcutsUrlLinux : platform_1.isMacintosh ? product_1.default.keyboardShortcutsUrlMac : product_1.default.keyboardShortcutsUrlWin;
KeybindingsReferenceAction.AVAILABLE = !!KeybindingsReferenceAction.URL;
exports.KeybindingsReferenceAction = KeybindingsReferenceAction;
var OpenDocumentationUrlAction = (function (_super) {
    __extends(OpenDocumentationUrlAction, _super);
    function OpenDocumentationUrlAction(id, label) {
        return _super.call(this, id, label) || this;
    }
    OpenDocumentationUrlAction.prototype.run = function () {
        window.open(OpenDocumentationUrlAction.URL);
        return null;
    };
    return OpenDocumentationUrlAction;
}(actions_1.Action));
OpenDocumentationUrlAction.ID = 'workbench.action.openDocumentationUrl';
OpenDocumentationUrlAction.LABEL = nls.localize('openDocumentationUrl', "Documentation");
OpenDocumentationUrlAction.URL = product_1.default.documentationUrl;
OpenDocumentationUrlAction.AVAILABLE = !!OpenDocumentationUrlAction.URL;
exports.OpenDocumentationUrlAction = OpenDocumentationUrlAction;
var OpenIntroductoryVideosUrlAction = (function (_super) {
    __extends(OpenIntroductoryVideosUrlAction, _super);
    function OpenIntroductoryVideosUrlAction(id, label) {
        return _super.call(this, id, label) || this;
    }
    OpenIntroductoryVideosUrlAction.prototype.run = function () {
        window.open(OpenIntroductoryVideosUrlAction.URL);
        return null;
    };
    return OpenIntroductoryVideosUrlAction;
}(actions_1.Action));
OpenIntroductoryVideosUrlAction.ID = 'workbench.action.openIntroductoryVideosUrl';
OpenIntroductoryVideosUrlAction.LABEL = nls.localize('openIntroductoryVideosUrl', "Introductory Videos");
OpenIntroductoryVideosUrlAction.URL = product_1.default.introductoryVideosUrl;
OpenIntroductoryVideosUrlAction.AVAILABLE = !!OpenIntroductoryVideosUrlAction.URL;
exports.OpenIntroductoryVideosUrlAction = OpenIntroductoryVideosUrlAction;
var ToggleSharedProcessAction = (function (_super) {
    __extends(ToggleSharedProcessAction, _super);
    function ToggleSharedProcessAction(id, label, windowsService) {
        var _this = _super.call(this, id, label) || this;
        _this.windowsService = windowsService;
        return _this;
    }
    ToggleSharedProcessAction.prototype.run = function () {
        return this.windowsService.toggleSharedProcess();
    };
    return ToggleSharedProcessAction;
}(actions_1.Action));
ToggleSharedProcessAction.ID = 'workbench.action.toggleSharedProcess';
ToggleSharedProcessAction.LABEL = nls.localize('toggleSharedProcess', "Toggle Shared Process");
ToggleSharedProcessAction = __decorate([
    __param(2, windows_1.IWindowsService)
], ToggleSharedProcessAction);
exports.ToggleSharedProcessAction = ToggleSharedProcessAction;
