/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
require("./media/shell.css");
var nls = require("vs/nls");
var winjs_base_1 = require("vs/base/common/winjs.base");
var platform = require("vs/base/common/platform");
var builder_1 = require("vs/base/browser/builder");
var dom = require("vs/base/browser/dom");
var aria = require("vs/base/browser/ui/aria/aria");
var lifecycle_1 = require("vs/base/common/lifecycle");
var errors = require("vs/base/common/errors");
var errorMessage_1 = require("vs/base/common/errorMessage");
var profiler_1 = require("vs/base/node/profiler");
var product_1 = require("vs/platform/node/product");
var descriptors_1 = require("vs/platform/instantiation/common/descriptors");
var package_1 = require("vs/platform/node/package");
var contextViewService_1 = require("vs/platform/contextview/browser/contextViewService");
var workbench_1 = require("vs/workbench/electron-browser/workbench");
var storageService_1 = require("vs/platform/storage/common/storageService");
var telemetry_1 = require("vs/platform/telemetry/common/telemetry");
var telemetryUtils_1 = require("vs/platform/telemetry/common/telemetryUtils");
var telemetryIpc_1 = require("vs/platform/telemetry/common/telemetryIpc");
var telemetryService_1 = require("vs/platform/telemetry/common/telemetryService");
var idleMonitor_1 = require("vs/platform/telemetry/browser/idleMonitor");
var errorTelemetry_1 = require("vs/platform/telemetry/browser/errorTelemetry");
var window_1 = require("vs/workbench/electron-browser/window");
var workbenchCommonProperties_1 = require("vs/platform/telemetry/node/workbenchCommonProperties");
var commonProperties_1 = require("vs/platform/telemetry/node/commonProperties");
var workspaceStats_1 = require("vs/workbench/services/telemetry/common/workspaceStats");
var windowService_1 = require("vs/workbench/services/window/electron-browser/windowService");
var windows_1 = require("vs/platform/windows/common/windows");
var windowsIpc_1 = require("vs/platform/windows/common/windowsIpc");
var windowService_2 = require("vs/platform/windows/electron-browser/windowService");
var messageService_1 = require("vs/workbench/services/message/electron-browser/messageService");
var request_1 = require("vs/platform/request/node/request");
var requestService_1 = require("vs/platform/request/electron-browser/requestService");
var configuration_1 = require("vs/platform/configuration/common/configuration");
var searchService_1 = require("vs/workbench/services/search/node/searchService");
var lifecycleService_1 = require("vs/workbench/services/lifecycle/electron-browser/lifecycleService");
var threadService_1 = require("vs/workbench/services/thread/electron-browser/threadService");
var markerService_1 = require("vs/platform/markers/common/markerService");
var modelService_1 = require("vs/editor/common/services/modelService");
var modelServiceImpl_1 = require("vs/editor/common/services/modelServiceImpl");
var codeEditorServiceImpl_1 = require("vs/editor/browser/services/codeEditorServiceImpl");
var codeEditorService_1 = require("vs/editor/common/services/codeEditorService");
var integrityServiceImpl_1 = require("vs/platform/integrity/node/integrityServiceImpl");
var integrity_1 = require("vs/platform/integrity/common/integrity");
var editorWorkerServiceImpl_1 = require("vs/editor/common/services/editorWorkerServiceImpl");
var editorWorkerService_1 = require("vs/editor/common/services/editorWorkerService");
var mainThreadExtensionService_1 = require("vs/workbench/api/node/mainThreadExtensionService");
var storage_1 = require("vs/platform/storage/common/storage");
var serviceCollection_1 = require("vs/platform/instantiation/common/serviceCollection");
var instantiationService_1 = require("vs/platform/instantiation/common/instantiationService");
var contextView_1 = require("vs/platform/contextview/browser/contextView");
var lifecycle_2 = require("vs/platform/lifecycle/common/lifecycle");
var markers_1 = require("vs/platform/markers/common/markers");
var environment_1 = require("vs/platform/environment/common/environment");
var message_1 = require("vs/platform/message/common/message");
var messageIpc_1 = require("vs/platform/message/common/messageIpc");
var search_1 = require("vs/platform/search/common/search");
var threadService_2 = require("vs/workbench/services/thread/common/threadService");
var commands_1 = require("vs/platform/commands/common/commands");
var commandService_1 = require("vs/platform/commands/common/commandService");
var workspace_1 = require("vs/platform/workspace/common/workspace");
var extensions_1 = require("vs/platform/extensions/common/extensions");
var workbenchModeService_1 = require("vs/workbench/services/mode/common/workbenchModeService");
var modeService_1 = require("vs/editor/common/services/modeService");
var untitledEditorService_1 = require("vs/workbench/services/untitled/common/untitledEditorService");
var crashReporter_1 = require("vs/workbench/electron-browser/crashReporter");
var nodeCachedDataManager_1 = require("vs/workbench/electron-browser/nodeCachedDataManager");
var ipc_1 = require("vs/base/parts/ipc/common/ipc");
var ipc_net_1 = require("vs/base/parts/ipc/node/ipc.net");
var ipc_electron_browser_1 = require("vs/base/parts/ipc/electron-browser/ipc.electron-browser");
var extensionManagementIpc_1 = require("vs/platform/extensionManagement/common/extensionManagementIpc");
var extensionManagement_1 = require("vs/platform/extensionManagement/common/extensionManagement");
var extensionEnablementService_1 = require("vs/platform/extensionManagement/common/extensionEnablementService");
var updateIpc_1 = require("vs/platform/update/common/updateIpc");
var update_1 = require("vs/platform/update/common/update");
var urlIpc_1 = require("vs/platform/url/common/urlIpc");
var url_1 = require("vs/platform/url/common/url");
var backup_1 = require("vs/platform/backup/common/backup");
var backupIpc_1 = require("vs/platform/backup/common/backupIpc");
var actions_1 = require("vs/workbench/electron-browser/actions");
var extensionHost_1 = require("vs/workbench/electron-browser/extensionHost");
var timerService_1 = require("vs/workbench/services/timer/common/timerService");
var electron_1 = require("electron");
var textMateService_1 = require("vs/editor/node/textMate/textMateService");
var TMSyntax_1 = require("vs/editor/electron-browser/textMate/TMSyntax");
var fontInfo_1 = require("vs/editor/common/config/fontInfo");
var configuration_2 = require("vs/editor/browser/config/configuration");
var browser = require("vs/base/browser/browser");
var scmPreview_1 = require("vs/workbench/parts/scm/browser/scmPreview");
var pfs_1 = require("vs/base/node/pfs");
var path_1 = require("path");
require("vs/platform/opener/browser/opener.contribution");
var currentWindow = electron_1.remote.getCurrentWindow();
/**
 * The workbench shell contains the workbench with a rich header containing navigation and the activity bar.
 * With the Shell being the top level element in the page, it is also responsible for driving the layouting.
 */
var WorkbenchShell = (function () {
    function WorkbenchShell(container, services, options) {
        this.container = container;
        this.options = options;
        this.contextService = services.contextService;
        this.configurationService = services.configurationService;
        this.environmentService = services.environmentService;
        this.timerService = services.timerService;
        this.toUnbind = [];
        this.previousErrorTime = 0;
    }
    WorkbenchShell.prototype.createContents = function (parent) {
        var _this = this;
        // ARIA
        aria.setARIAContainer(document.body);
        // Workbench Container
        var workbenchContainer = builder_1.$(parent).div();
        // Instantiation service with services
        var _a = this.initServiceCollection(parent.getHTMLElement()), instantiationService = _a[0], serviceCollection = _a[1];
        //crash reporting
        if (!!product_1.default.crashReporter) {
            instantiationService.createInstance(crashReporter_1.CrashReporter, product_1.default.crashReporter);
        }
        // Workbench
        this.workbench = instantiationService.createInstance(workbench_1.Workbench, parent.getHTMLElement(), workbenchContainer.getHTMLElement(), this.options, serviceCollection);
        this.workbench.startup({
            onWorkbenchStarted: function (info) {
                // run workbench started logic
                _this.onWorkbenchStarted(info);
                // start cached data manager
                instantiationService.createInstance(nodeCachedDataManager_1.NodeCachedDataManager);
            }
        });
        // Window
        var activeWindow = this.workbench.getInstantiationService().createInstance(window_1.ElectronWindow, currentWindow, this.container);
        this.windowIPCService.registerWindow(activeWindow);
        // Handle case where workbench is not starting up properly
        var timeoutHandle = setTimeout(function () {
            console.warn('Workbench did not finish loading in 10 seconds, that might be a problem that should be reported.');
        }, 10000);
        this.workbench.joinCreation().then(function () {
            clearTimeout(timeoutHandle);
        });
        return workbenchContainer;
    };
    WorkbenchShell.prototype.onWorkbenchStarted = function (info) {
        var _this = this;
        // Telemetry: workspace info
        var _a = this.options, filesToOpen = _a.filesToOpen, filesToCreate = _a.filesToCreate, filesToDiff = _a.filesToDiff;
        this.telemetryService.publicLog('workspaceLoad', {
            userAgent: navigator.userAgent,
            windowSize: { innerHeight: window.innerHeight, innerWidth: window.innerWidth, outerHeight: window.outerHeight, outerWidth: window.outerWidth },
            emptyWorkbench: !this.contextService.hasWorkspace(),
            'workbench.filesToOpen': filesToOpen && filesToOpen.length || undefined,
            'workbench.filesToCreate': filesToCreate && filesToCreate.length || undefined,
            'workbench.filesToDiff': filesToDiff && filesToDiff.length || undefined,
            customKeybindingsCount: info.customKeybindingsCount,
            theme: info.themeId,
            language: platform.language,
            experiments: this.telemetryService.getExperiments(),
            pinnedViewlets: info.pinnedViewlets
        });
        // Telemetry: startup metrics
        var workbenchStarted = Date.now();
        this.timerService.workbenchStarted = new Date(workbenchStarted);
        this.timerService.restoreEditorsDuration = info.restoreEditorsDuration;
        this.timerService.restoreViewletDuration = info.restoreViewletDuration;
        this.extensionService.onReady().done(function () {
            _this.telemetryService.publicLog('startupTime', _this.timerService.startupMetrics);
        });
        // Telemetry: workspace tags
        var workspaceStats = this.workbench.getInstantiationService().createInstance(workspaceStats_1.WorkspaceStats);
        workspaceStats.reportWorkspaceTags(this.options);
        workspaceStats.reportCloudStats();
        if ((platform.isLinux || platform.isMacintosh) && process.getuid() === 0) {
            this.messageService.show(message_1.Severity.Warning, nls.localize('runningAsRoot', "It is recommended not to run Code as 'root'."));
        }
        // Profiler: startup cpu profile
        var profileStartup = this.environmentService.profileStartup;
        if (profileStartup) {
            profiler_1.stopProfiling(profileStartup.dir, profileStartup.prefix).then(function () {
                pfs_1.readdir(profileStartup.dir).then(function (files) {
                    return files.filter(function (value) { return value.indexOf(profileStartup.prefix) === 0; });
                }).then(function (files) {
                    var profileFiles = files.reduce(function (prev, cur) { return "" + prev + path_1.join(profileStartup.dir, cur) + "\n"; }, '\n');
                    var primaryButton = _this.messageService.confirm({
                        type: 'info',
                        message: nls.localize('prof.message', "Successfully created profiles."),
                        detail: nls.localize('prof.detail', "Please create an issue and manually attach the following files:\n{0}", profileFiles),
                        primaryButton: nls.localize('prof.restartAndFileIssue', "Create Issue and Restart"),
                        secondaryButton: nls.localize('prof.restart', "Restart")
                    });
                    var createIssue = winjs_base_1.TPromise.as(undefined);
                    if (primaryButton) {
                        var action = _this.workbench.getInstantiationService().createInstance(actions_1.ReportPerformanceIssueAction, actions_1.ReportPerformanceIssueAction.ID, actions_1.ReportPerformanceIssueAction.LABEL);
                        createIssue = action.run(":warning: Make sure to **attach** these files: :warning:\n" + files.map(function (file) { return "-`" + path_1.join(profileStartup.dir, file) + "`"; }).join('\n')).then(function () {
                            return _this.windowsService.showItemInFolder(profileStartup.dir);
                        });
                    }
                    createIssue.then(function () { return _this.windowsService.relaunch({ removeArgs: ['--prof-startup'] }); });
                });
            }, function (err) { return console.error(err); });
        }
    };
    WorkbenchShell.prototype.initServiceCollection = function (container) {
        var _this = this;
        var disposables = new lifecycle_1.Disposables();
        var serviceCollection = new serviceCollection_1.ServiceCollection();
        serviceCollection.set(workspace_1.IWorkspaceContextService, this.contextService);
        serviceCollection.set(configuration_1.IConfigurationService, this.configurationService);
        serviceCollection.set(environment_1.IEnvironmentService, this.environmentService);
        serviceCollection.set(timerService_1.ITimerService, this.timerService);
        var instantiationService = new instantiationService_1.InstantiationService(serviceCollection, true);
        // TODO@joao remove this
        this.windowIPCService = instantiationService.createInstance(windowService_1.WindowIPCService);
        serviceCollection.set(windowService_1.IWindowIPCService, this.windowIPCService);
        var mainProcessClient = new ipc_electron_browser_1.Client(String("window" + currentWindow.id));
        disposables.add(mainProcessClient);
        var windowsChannel = mainProcessClient.getChannel('windows');
        this.windowsService = new windowsIpc_1.WindowsChannelClient(windowsChannel);
        serviceCollection.set(windows_1.IWindowsService, this.windowsService);
        serviceCollection.set(windows_1.IWindowService, new descriptors_1.SyncDescriptor(windowService_2.WindowService, this.windowIPCService.getWindowId()));
        var sharedProcess = this.windowsService.whenSharedProcessReady()
            .then(function () { return ipc_net_1.connect(_this.environmentService.sharedIPCHandle, "window:" + _this.windowIPCService.getWindowId()); });
        sharedProcess
            .done(function (client) { return client.registerChannel('choice', instantiationService.createInstance(messageIpc_1.ChoiceChannel)); });
        // Storage Sevice
        var disableWorkspaceStorage = this.environmentService.extensionTestsPath || (!this.contextService.hasWorkspace() && !this.environmentService.isExtensionDevelopment); // without workspace or in any extension test, we use inMemory storage unless we develop an extension where we want to preserve state
        this.storageService = instantiationService.createInstance(storageService_1.StorageService, window.localStorage, disableWorkspaceStorage ? storageService_1.inMemoryLocalStorageInstance : window.localStorage);
        serviceCollection.set(storage_1.IStorageService, this.storageService);
        // Warm up font cache information before building up too many dom elements
        configuration_2.restoreFontInfo(this.storageService);
        configuration_2.readFontInfo(fontInfo_1.BareFontInfo.createFromRawSettings(this.configurationService.getConfiguration('editor'), browser.getZoomLevel()));
        // Telemetry
        this.sendMachineIdToMain(this.storageService);
        if (this.environmentService.isBuilt && !this.environmentService.isExtensionDevelopment && !!product_1.default.enableTelemetry) {
            var channel = ipc_1.getDelayedChannel(sharedProcess.then(function (c) { return c.getChannel('telemetryAppender'); }));
            var commit = product_1.default.commit;
            var version = package_1.default.version;
            var config = {
                appender: new telemetryIpc_1.TelemetryAppenderClient(channel),
                commonProperties: workbenchCommonProperties_1.resolveWorkbenchCommonProperties(this.storageService, commit, version),
                piiPaths: [this.environmentService.appRoot, this.environmentService.extensionsPath],
                experiments: instantiationService.invokeFunction(telemetryUtils_1.loadExperiments)
            };
            var telemetryService = instantiationService.createInstance(telemetryService_1.TelemetryService, config);
            this.telemetryService = telemetryService;
            var errorTelemetry = new errorTelemetry_1.default(telemetryService);
            var idleMonitor = new idleMonitor_1.IdleMonitor(2 * 60 * 1000); // 2 minutes
            var listener = idleMonitor.onStatusChange(function (status) {
                return _this.telemetryService.publicLog(status === idleMonitor_1.UserStatus.Active
                    ? telemetryService_1.TelemetryService.IDLE_STOP_EVENT_NAME
                    : telemetryService_1.TelemetryService.IDLE_START_EVENT_NAME);
            });
            disposables.add(telemetryService, errorTelemetry, listener, idleMonitor);
        }
        else {
            telemetryUtils_1.NullTelemetryService._experiments = instantiationService.invokeFunction(telemetryUtils_1.loadExperiments);
            this.telemetryService = telemetryUtils_1.NullTelemetryService;
        }
        serviceCollection.set(telemetry_1.ITelemetryService, this.telemetryService);
        disposables.add(telemetryUtils_1.configurationTelemetry(this.telemetryService, this.configurationService));
        this.messageService = instantiationService.createInstance(messageService_1.MessageService, container);
        serviceCollection.set(message_1.IMessageService, this.messageService);
        serviceCollection.set(message_1.IChoiceService, this.messageService);
        var lifecycleService = instantiationService.createInstance(lifecycleService_1.LifecycleService);
        this.toUnbind.push(lifecycleService.onShutdown(function (reason) { return disposables.dispose(); }));
        this.toUnbind.push(lifecycleService.onShutdown(function (reason) { return configuration_2.saveFontInfo(_this.storageService); }));
        serviceCollection.set(lifecycle_2.ILifecycleService, lifecycleService);
        disposables.add(telemetryUtils_1.lifecycleTelemetry(this.telemetryService, lifecycleService));
        var extensionManagementChannel = ipc_1.getDelayedChannel(sharedProcess.then(function (c) { return c.getChannel('extensions'); }));
        serviceCollection.set(extensionManagement_1.IExtensionManagementService, new descriptors_1.SyncDescriptor(extensionManagementIpc_1.ExtensionManagementChannelClient, extensionManagementChannel));
        var extensionEnablementService = instantiationService.createInstance(extensionEnablementService_1.ExtensionEnablementService);
        serviceCollection.set(extensionManagement_1.IExtensionEnablementService, extensionEnablementService);
        disposables.add(extensionEnablementService);
        var extensionHostProcessWorker = instantiationService.createInstance(extensionHost_1.ExtensionHostProcessWorker);
        this.threadService = instantiationService.createInstance(threadService_1.MainThreadService, extensionHostProcessWorker.messagingProtocol);
        serviceCollection.set(threadService_2.IThreadService, this.threadService);
        this.timerService.beforeExtensionLoad = new Date();
        // TODO@Joao: remove
        var disabledExtensions = scmPreview_1.default.enabled ? [] : ['vscode.git'];
        this.extensionService = instantiationService.createInstance(mainThreadExtensionService_1.MainProcessExtensionService, disabledExtensions);
        serviceCollection.set(extensions_1.IExtensionService, this.extensionService);
        extensionHostProcessWorker.start(this.extensionService);
        this.extensionService.onReady().done(function () {
            _this.timerService.afterExtensionLoad = new Date();
        });
        serviceCollection.set(commands_1.ICommandService, new descriptors_1.SyncDescriptor(commandService_1.CommandService));
        this.contextViewService = instantiationService.createInstance(contextViewService_1.ContextViewService, this.container);
        serviceCollection.set(contextView_1.IContextViewService, this.contextViewService);
        serviceCollection.set(request_1.IRequestService, new descriptors_1.SyncDescriptor(requestService_1.RequestService));
        serviceCollection.set(markers_1.IMarkerService, new descriptors_1.SyncDescriptor(markerService_1.MarkerService));
        serviceCollection.set(modeService_1.IModeService, new descriptors_1.SyncDescriptor(workbenchModeService_1.WorkbenchModeServiceImpl));
        serviceCollection.set(modelService_1.IModelService, new descriptors_1.SyncDescriptor(modelServiceImpl_1.ModelServiceImpl));
        serviceCollection.set(editorWorkerService_1.IEditorWorkerService, new descriptors_1.SyncDescriptor(editorWorkerServiceImpl_1.EditorWorkerServiceImpl));
        serviceCollection.set(untitledEditorService_1.IUntitledEditorService, new descriptors_1.SyncDescriptor(untitledEditorService_1.UntitledEditorService));
        serviceCollection.set(textMateService_1.ITextMateService, new descriptors_1.SyncDescriptor(TMSyntax_1.MainProcessTextMateSyntax));
        serviceCollection.set(search_1.ISearchService, new descriptors_1.SyncDescriptor(searchService_1.SearchService));
        serviceCollection.set(codeEditorService_1.ICodeEditorService, new descriptors_1.SyncDescriptor(codeEditorServiceImpl_1.CodeEditorServiceImpl));
        serviceCollection.set(integrity_1.IIntegrityService, new descriptors_1.SyncDescriptor(integrityServiceImpl_1.IntegrityServiceImpl));
        var updateChannel = mainProcessClient.getChannel('update');
        serviceCollection.set(update_1.IUpdateService, new descriptors_1.SyncDescriptor(updateIpc_1.UpdateChannelClient, updateChannel));
        var urlChannel = mainProcessClient.getChannel('url');
        serviceCollection.set(url_1.IURLService, new descriptors_1.SyncDescriptor(urlIpc_1.URLChannelClient, urlChannel, this.windowIPCService.getWindowId()));
        var backupChannel = mainProcessClient.getChannel('backup');
        serviceCollection.set(backup_1.IBackupService, new descriptors_1.SyncDescriptor(backupIpc_1.BackupChannelClient, backupChannel));
        return [instantiationService, serviceCollection];
    };
    WorkbenchShell.prototype.sendMachineIdToMain = function (storageService) {
        workbenchCommonProperties_1.getOrCreateMachineId(storageService).then(function (machineId) {
            electron_1.ipcRenderer.send(commonProperties_1.machineIdIpcChannel, machineId);
        }).then(null, errors.onUnexpectedError);
    };
    WorkbenchShell.prototype.open = function () {
        var _this = this;
        // Listen on unexpected errors
        errors.setUnexpectedErrorHandler(function (error) {
            _this.onUnexpectedError(error);
        });
        // Shell Class for CSS Scoping
        builder_1.$(this.container).addClass('monaco-shell');
        // Controls
        this.content = builder_1.$('.monaco-shell-content').appendTo(this.container).getHTMLElement();
        // Create Contents
        this.contentsContainer = this.createContents(builder_1.$(this.content));
        // Layout
        this.layout();
        // Listeners
        this.registerListeners();
    };
    WorkbenchShell.prototype.registerListeners = function () {
        var _this = this;
        // Resize
        builder_1.$(window).on(dom.EventType.RESIZE, function () { return _this.layout(); }, this.toUnbind);
    };
    WorkbenchShell.prototype.onUnexpectedError = function (error) {
        var errorMsg = errorMessage_1.toErrorMessage(error, true);
        if (!errorMsg) {
            return;
        }
        var now = Date.now();
        if (errorMsg === this.previousErrorValue && now - this.previousErrorTime <= 1000) {
            return; // Return if error message identical to previous and shorter than 1 second
        }
        this.previousErrorTime = now;
        this.previousErrorValue = errorMsg;
        // Log to console
        console.error(errorMsg);
        // Show to user if friendly message provided
        if (error && error.friendlyMessage && this.messageService) {
            this.messageService.show(message_1.Severity.Error, error.friendlyMessage);
        }
    };
    WorkbenchShell.prototype.layout = function () {
        var clArea = builder_1.$(this.container).getClientArea();
        var contentsSize = new builder_1.Dimension(clArea.width, clArea.height);
        this.contentsContainer.size(contentsSize.width, contentsSize.height);
        this.contextViewService.layout();
        this.workbench.layout();
    };
    WorkbenchShell.prototype.joinCreation = function () {
        return this.workbench.joinCreation();
    };
    WorkbenchShell.prototype.dispose = function () {
        // Workbench
        if (this.workbench) {
            this.workbench.dispose();
        }
        this.contextViewService.dispose();
        // Listeners
        this.toUnbind = lifecycle_1.dispose(this.toUnbind);
        // Container
        builder_1.$(this.container).empty();
    };
    return WorkbenchShell;
}());
exports.WorkbenchShell = WorkbenchShell;
