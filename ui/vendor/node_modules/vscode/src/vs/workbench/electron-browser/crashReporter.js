/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var nls = require("vs/nls");
var errors_1 = require("vs/base/common/errors");
var objects_1 = require("vs/base/common/objects");
var configurationRegistry_1 = require("vs/platform/configuration/common/configurationRegistry");
var configuration_1 = require("vs/platform/configuration/common/configuration");
var windows_1 = require("vs/platform/windows/common/windows");
var telemetry_1 = require("vs/platform/telemetry/common/telemetry");
var platform_1 = require("vs/platform/platform");
var electron_1 = require("electron");
var product_1 = require("vs/platform/product");
var package_1 = require("vs/platform/package");
var TELEMETRY_SECTION_ID = 'telemetry';
var configurationRegistry = platform_1.Registry.as(configurationRegistry_1.Extensions.Configuration);
configurationRegistry.registerConfiguration({
    'id': TELEMETRY_SECTION_ID,
    'order': 110,
    title: nls.localize('telemetryConfigurationTitle', "Telemetry"),
    'type': 'object',
    'properties': {
        'telemetry.enableCrashReporter': {
            'type': 'boolean',
            'description': nls.localize('telemetry.enableCrashReporting', "Enable crash reports to be sent to Microsoft.\nThis option requires restart to take effect."),
            'default': true
        }
    }
});
var CrashReporter = (function () {
    function CrashReporter(configuration, telemetryService, windowsService, configurationService) {
        var config = configurationService.getConfiguration(TELEMETRY_SECTION_ID);
        if (!config.enableCrashReporter) {
            return;
        }
        telemetryService.getTelemetryInfo()
            .then(function (info) { return ({ vscode_sessionId: info.sessionId, vscode_version: package_1.default.version, vscode_commit: product_1.default.commit }); })
            .then(function (extra) { return objects_1.assign(configuration, { extra: extra }); })
            .then(function (configuration) {
            // start crash reporter right here
            electron_1.crashReporter.start(objects_1.clone(configuration));
            // TODO: start crash reporter in the main process
            return windowsService.startCrashReporter(configuration);
        })
            .done(null, errors_1.onUnexpectedError);
    }
    return CrashReporter;
}());
CrashReporter = __decorate([
    __param(1, telemetry_1.ITelemetryService),
    __param(2, windows_1.IWindowsService),
    __param(3, configuration_1.IConfigurationService)
], CrashReporter);
exports.CrashReporter = CrashReporter;
