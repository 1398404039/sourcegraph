/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var lifecycle_1 = require("vs/base/common/lifecycle");
var errors_1 = require("vs/base/common/errors");
var winjs_base_1 = require("vs/base/common/winjs.base");
var paths_1 = require("vs/base/common/paths");
var pfs_1 = require("vs/base/node/pfs");
var environment_1 = require("vs/platform/environment/common/environment");
var telemetry_1 = require("vs/platform/telemetry/common/telemetry");
var NodeCachedDataManager = (function () {
    function NodeCachedDataManager(telemetryService, environmentService) {
        this._disposables = [];
        this._telemetryService = telemetryService;
        this._environmentService = environmentService;
        this._handleCachedDataErrors();
        this._manageCachedDataSoon();
    }
    NodeCachedDataManager.prototype.dispose = function () {
        this._disposables = lifecycle_1.dispose(this._disposables);
    };
    NodeCachedDataManager.prototype._handleCachedDataErrors = function () {
        var _this = this;
        var onNodeCachedDataError = function (err) {
            _this._telemetryService.publicLog('nodeCachedData', { errorCode: err.errorCode, path: err.path });
        };
        // handle future and past errors
        self.require.config({ onNodeCachedDataError: onNodeCachedDataError });
        window.MonacoEnvironment.nodeCachedDataErrors.forEach(onNodeCachedDataError);
        delete window.MonacoEnvironment.nodeCachedDataErrors;
        // stop when being disposed
        this._disposables.push({
            dispose: function () {
                self.require.config({ onNodeCachedDataError: undefined }, true);
            }
        });
    };
    NodeCachedDataManager.prototype._manageCachedDataSoon = function () {
        // Cached data is stored as user data and we run a cleanup task everytime
        // the editor starts. The strategy is to delete all files that are older than
        // 3 months
        var nodeCachedDataDir = this._environmentService.nodeCachedDataDir;
        if (!nodeCachedDataDir) {
            return;
        }
        var handle = setTimeout(function () {
            handle = undefined;
            pfs_1.readdir(nodeCachedDataDir).then(function (entries) {
                var now = Date.now();
                var limit = 1000 * 60 * 60 * 24 * 30 * 3; // roughly 3 months
                var deletes = entries.map(function (entry) {
                    var path = paths_1.join(nodeCachedDataDir, entry);
                    return pfs_1.stat(path).then(function (stats) {
                        var diff = now - stats.mtime.getTime();
                        if (diff > limit) {
                            return pfs_1.rimraf(path);
                        }
                        return undefined;
                    });
                });
                return winjs_base_1.TPromise.join(deletes);
            }).done(undefined, errors_1.onUnexpectedError);
        }, 30 * 1000);
        this._disposables.push({
            dispose: function () { clearTimeout(handle); }
        });
    };
    return NodeCachedDataManager;
}());
NodeCachedDataManager = __decorate([
    __param(0, telemetry_1.ITelemetryService),
    __param(1, environment_1.IEnvironmentService)
], NodeCachedDataManager);
exports.NodeCachedDataManager = NodeCachedDataManager;
