import { TPromise } from 'vs/base/common/winjs.base';
import { IPartService } from 'vs/workbench/services/part/common/partService';
import { IWorkbenchEditorService } from 'vs/workbench/services/editor/common/editorService';
import { IEditorGroupService } from 'vs/workbench/services/group/common/groupService';
import { IWindowsService, IWindowService } from 'vs/platform/windows/common/windows';
import { ITitleService } from 'vs/workbench/services/title/common/titleService';
export declare class ElectronWindow {
    private editorService;
    private editorGroupService;
    private partService;
    private windowsService;
    private windowService;
    private titleService;
    private win;
    private windowId;
    constructor(win: Electron.BrowserWindow, shellContainer: HTMLElement, editorService: IWorkbenchEditorService, editorGroupService: IEditorGroupService, partService: IPartService, windowsService: IWindowsService, windowService: IWindowService, titleService: ITitleService);
    private registerListeners();
    private includesFolder(resources);
    close(): void;
    showMessageBox(options: Electron.ShowMessageBoxOptions): number;
    showSaveDialog(options: Electron.SaveDialogOptions, callback?: (fileName: string) => void): string;
    focus(): TPromise<void>;
}
