import { IHTMLContentElement } from 'vs/base/common/htmlContent';
import { ResolvedKeybinding, Keybinding } from 'vs/base/common/keyCodes';
import { AbstractKeybindingService } from 'vs/platform/keybinding/common/abstractKeybindingService';
import { IStatusbarService } from 'vs/platform/statusbar/common/statusbar';
import { KeybindingResolver } from 'vs/platform/keybinding/common/keybindingResolver';
import { ICommandService } from 'vs/platform/commands/common/commands';
import { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';
import { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';
import { IMessageService } from 'vs/platform/message/common/message';
import { IEnvironmentService } from 'vs/platform/environment/common/environment';
export declare class FancyResolvedKeybinding extends ResolvedKeybinding {
    private readonly _actual;
    constructor(actual: Keybinding);
    getLabel(): string;
    getAriaLabel(): string;
    getHTMLLabel(): IHTMLContentElement[];
    getElectronAccelerator(): string;
    getUserSettingsLabel(): string;
}
export declare class WorkbenchKeybindingService extends AbstractKeybindingService {
    private telemetryService;
    private _cachedResolver;
    private _firstTimeComputingResolver;
    private userKeybindings;
    constructor(windowElement: Window, contextKeyService: IContextKeyService, commandService: ICommandService, telemetryService: ITelemetryService, messageService: IMessageService, environmentService: IEnvironmentService, statusBarService: IStatusbarService);
    private _safeGetConfig();
    customKeybindingsCount(): number;
    private updateResolver(event);
    protected _getResolver(): KeybindingResolver;
    private _getExtraKeybindings(isFirstTime);
    protected _createResolvedKeybinding(kb: Keybinding): ResolvedKeybinding;
    protected getLabelFor(keybinding: Keybinding): string;
    private _handleKeybindingsExtensionPointUser(isBuiltin, keybindings, collector);
    private _handleKeybinding(isBuiltin, idx, keybindings, collector);
    private _asCommandRule(isBuiltin, idx, binding);
}
