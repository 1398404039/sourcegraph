import { TPromise } from 'vs/base/common/winjs.base';
import { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';
import { IEnvironmentService } from 'vs/platform/environment/common/environment';
import { IDisposable, Disposable } from 'vs/base/common/lifecycle';
import { IConfigurationServiceEvent, IConfigurationOptions } from 'vs/platform/configuration/common/configuration';
import { IWorkspaceConfigurationValues, IWorkspaceConfigurationService, IWorkspaceConfigurationValue } from 'vs/workbench/services/configuration/common/configuration';
import { FileChangesEvent } from 'vs/platform/files/common/files';
import Event from 'vs/base/common/event';
/**
 * Wraps around the basic configuration service and adds knowledge about workspace settings.
 */
export declare class WorkspaceConfigurationService extends Disposable implements IWorkspaceConfigurationService, IDisposable {
    private contextService;
    private workspaceSettingsRootFolder;
    _serviceBrand: any;
    private static RELOAD_CONFIGURATION_DELAY;
    private _onDidUpdateConfiguration;
    private baseConfigurationService;
    private cachedConfig;
    private cachedWorkspaceConfig;
    private bulkFetchFromWorkspacePromise;
    private workspaceFilePathToConfiguration;
    private reloadConfigurationScheduler;
    constructor(contextService: IWorkspaceContextService, environmentService: IEnvironmentService, workspaceSettingsRootFolder?: string);
    readonly onDidUpdateConfiguration: Event<IConfigurationServiceEvent>;
    private onBaseConfigurationChanged(event);
    initialize(): TPromise<void>;
    getConfiguration<C>(section?: string): C;
    getConfiguration<C>(options?: IConfigurationOptions): C;
    lookup<C>(key: string, overrideIdentifier?: string): IWorkspaceConfigurationValue<C>;
    keys(): {
        default: string[];
        user: string[];
        workspace: string[];
    };
    values(): IWorkspaceConfigurationValues;
    reloadConfiguration(section?: string): TPromise<any>;
    private toOptions(arg);
    private doLoadConfiguration<T>();
    private loadWorkspaceConfigFiles<T>();
    handleWorkspaceFileEvents(event: FileChangesEvent): void;
    private createConfigModel<T>(content);
    private isWorkspaceConfigurationFile(workspaceRelativePath);
    getUnsupportedWorkspaceKeys(): string[];
}
