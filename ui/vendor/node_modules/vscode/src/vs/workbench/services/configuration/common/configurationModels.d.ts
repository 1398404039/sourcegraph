import { ConfigModel } from 'vs/platform/configuration/common/model';
export declare class ScopedConfigModel<T> extends ConfigModel<T> {
    readonly scope: string;
    constructor(content: string, name: string, scope: string);
    update(content: string): void;
}
export declare class WorkspaceSettingsConfigModel<T> extends ConfigModel<T> {
    private _raw;
    private _unsupportedKeys;
    protected processRaw(raw: T): void;
    reprocess(): void;
    readonly unsupportedKeys: string[];
    private isWorkspaceScoped(key, configurationProperties);
}
export declare class WorkspaceConfigModel<T> extends ConfigModel<T> {
    readonly workspaceSettingsConfig: WorkspaceSettingsConfigModel<T>;
    private scopedConfigs;
    constructor(workspaceSettingsConfig: WorkspaceSettingsConfigModel<T>, scopedConfigs: ScopedConfigModel<T>[]);
    private consolidate();
    readonly keys: string[];
    update(): void;
}
