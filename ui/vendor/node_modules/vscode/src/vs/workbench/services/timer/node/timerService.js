/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var id_1 = require("vs/base/node/id");
var os = require("os");
var TimerService = (function () {
    function TimerService(initData, isEmptyWorkbench) {
        this.isEmptyWorkbench = isEmptyWorkbench;
        this.start = initData.start;
        this.appReady = initData.appReady;
        this.windowLoad = initData.windowLoad;
        this.beforeLoadWorkbenchMain = initData.beforeLoadWorkbenchMain;
        this.afterLoadWorkbenchMain = initData.afterLoadWorkbenchMain;
        this.isInitialStartup = initData.isInitialStartup;
        this.hasAccessibilitySupport = initData.hasAccessibilitySupport;
    }
    Object.defineProperty(TimerService.prototype, "startupMetrics", {
        get: function () {
            if (!this._startupMetrics) {
                this.computeStartupMetrics();
            }
            return this._startupMetrics;
        },
        enumerable: true,
        configurable: true
    });
    ;
    TimerService.prototype.computeStartupMetrics = function () {
        var now = Date.now();
        var initialStartup = !!this.isInitialStartup;
        var start = initialStartup ? this.start : this.windowLoad;
        var totalmem;
        var freemem;
        var cpus;
        var platform;
        var release;
        var loadavg;
        var meminfo;
        var isVMLikelyhood;
        try {
            totalmem = os.totalmem();
            freemem = os.freemem();
            platform = os.platform();
            release = os.release();
            loadavg = os.loadavg();
            meminfo = process.getProcessMemoryInfo();
            isVMLikelyhood = Math.round((id_1.virtualMachineHint.value() * 100));
            var rawCpus = os.cpus();
            if (rawCpus && rawCpus.length > 0) {
                cpus = { count: rawCpus.length, speed: rawCpus[0].speed, model: rawCpus[0].model };
            }
        }
        catch (error) {
            console.error(error); // be on the safe side with these hardware method calls
        }
        this._startupMetrics = {
            version: 1,
            ellapsed: Math.round(this.workbenchStarted.getTime() - start.getTime()),
            timers: {
                ellapsedExtensions: Math.round(this.afterExtensionLoad.getTime() - this.beforeExtensionLoad.getTime()),
                ellapsedExtensionsReady: Math.round(this.afterExtensionLoad.getTime() - start.getTime()),
                ellapsedRequire: Math.round(this.afterLoadWorkbenchMain.getTime() - this.beforeLoadWorkbenchMain.getTime()),
                ellapsedViewletRestore: Math.round(this.restoreViewletDuration),
                ellapsedEditorRestore: Math.round(this.restoreEditorsDuration),
                ellapsedWorkbench: Math.round(this.workbenchStarted.getTime() - this.beforeWorkbenchOpen.getTime()),
                ellapsedWindowLoadToRequire: Math.round(this.beforeLoadWorkbenchMain.getTime() - this.windowLoad.getTime()),
                ellapsedTimersToTimersComputed: Date.now() - now
            },
            platform: platform,
            release: release,
            totalmem: totalmem,
            freemem: freemem,
            meminfo: meminfo,
            cpus: cpus,
            loadavg: loadavg,
            initialStartup: initialStartup,
            isVMLikelyhood: isVMLikelyhood,
            hasAccessibilitySupport: !!this.hasAccessibilitySupport,
            emptyWorkbench: this.isEmptyWorkbench
        };
        if (initialStartup) {
            this._startupMetrics.timers.ellapsedAppReady = Math.round(this.appReady.getTime() - this.start.getTime());
            this._startupMetrics.timers.ellapsedWindowLoad = Math.round(this.windowLoad.getTime() - this.appReady.getTime());
        }
    };
    return TimerService;
}());
exports.TimerService = TimerService;
