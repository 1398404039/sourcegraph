/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var instantiation_1 = require("vs/platform/instantiation/common/instantiation");
var events_1 = require("vs/base/common/events");
/**
 * States the text text file editor model can be in.
 */
var ModelState;
(function (ModelState) {
    ModelState[ModelState["SAVED"] = 0] = "SAVED";
    ModelState[ModelState["DIRTY"] = 1] = "DIRTY";
    ModelState[ModelState["PENDING_SAVE"] = 2] = "PENDING_SAVE";
    ModelState[ModelState["CONFLICT"] = 3] = "CONFLICT";
    ModelState[ModelState["ERROR"] = 4] = "ERROR";
})(ModelState = exports.ModelState || (exports.ModelState = {}));
/**
 * Local file change events are being emitted when a file is added, removed, moved or its contents got updated. These events
 * are being emitted from within the workbench and are not reflecting the truth on the disk file system. For that, please
 * use FileChangesEvent instead.
 */
var LocalFileChangeEvent = (function (_super) {
    __extends(LocalFileChangeEvent, _super);
    function LocalFileChangeEvent(before, after, originalEvent) {
        return _super.call(this, null, before, after, originalEvent) || this;
    }
    /**
     * Returns the meta information of the file before the event occurred or null if the file is new.
     */
    LocalFileChangeEvent.prototype.getBefore = function () {
        return this.oldValue;
    };
    /**
     * Returns the meta information of the file after the event occurred or null if the file got deleted.
     */
    LocalFileChangeEvent.prototype.getAfter = function () {
        return this.newValue;
    };
    /**
     * Indicates if the file was added as a new file.
     */
    LocalFileChangeEvent.prototype.gotAdded = function () {
        return !this.oldValue && !!this.newValue;
    };
    /**
     * Indicates if the file was moved to a different path.
     */
    LocalFileChangeEvent.prototype.gotMoved = function () {
        return !!this.oldValue && !!this.newValue && this.oldValue.resource.toString() !== this.newValue.resource.toString();
    };
    /**
     * Indicates if the files metadata was updated.
     */
    LocalFileChangeEvent.prototype.gotUpdated = function () {
        return !!this.oldValue && !!this.newValue && !this.gotMoved() && this.oldValue !== this.newValue;
    };
    /**
     * Indicates if the file was deleted.
     */
    LocalFileChangeEvent.prototype.gotDeleted = function () {
        return !!this.oldValue && !this.newValue;
    };
    return LocalFileChangeEvent;
}(events_1.PropertyChangeEvent));
exports.LocalFileChangeEvent = LocalFileChangeEvent;
var StateChange;
(function (StateChange) {
    StateChange[StateChange["DIRTY"] = 0] = "DIRTY";
    StateChange[StateChange["SAVING"] = 1] = "SAVING";
    StateChange[StateChange["SAVE_ERROR"] = 2] = "SAVE_ERROR";
    StateChange[StateChange["SAVED"] = 3] = "SAVED";
    StateChange[StateChange["REVERTED"] = 4] = "REVERTED";
    StateChange[StateChange["ENCODING"] = 5] = "ENCODING";
    StateChange[StateChange["CONTENT_CHANGE"] = 6] = "CONTENT_CHANGE";
})(StateChange = exports.StateChange || (exports.StateChange = {}));
var TextFileModelChangeEvent = (function () {
    function TextFileModelChangeEvent(model, kind) {
        this._resource = model.getResource();
        this._kind = kind;
    }
    Object.defineProperty(TextFileModelChangeEvent.prototype, "resource", {
        get: function () {
            return this._resource;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextFileModelChangeEvent.prototype, "kind", {
        get: function () {
            return this._kind;
        },
        enumerable: true,
        configurable: true
    });
    return TextFileModelChangeEvent;
}());
exports.TextFileModelChangeEvent = TextFileModelChangeEvent;
exports.TEXT_FILE_SERVICE_ID = 'textFileService';
var AutoSaveMode;
(function (AutoSaveMode) {
    AutoSaveMode[AutoSaveMode["OFF"] = 0] = "OFF";
    AutoSaveMode[AutoSaveMode["AFTER_SHORT_DELAY"] = 1] = "AFTER_SHORT_DELAY";
    AutoSaveMode[AutoSaveMode["AFTER_LONG_DELAY"] = 2] = "AFTER_LONG_DELAY";
    AutoSaveMode[AutoSaveMode["ON_FOCUS_CHANGE"] = 3] = "ON_FOCUS_CHANGE";
    AutoSaveMode[AutoSaveMode["ON_WINDOW_CHANGE"] = 4] = "ON_WINDOW_CHANGE";
})(AutoSaveMode = exports.AutoSaveMode || (exports.AutoSaveMode = {}));
var SaveReason;
(function (SaveReason) {
    SaveReason[SaveReason["EXPLICIT"] = 1] = "EXPLICIT";
    SaveReason[SaveReason["AUTO"] = 2] = "AUTO";
    SaveReason[SaveReason["FOCUS_CHANGE"] = 3] = "FOCUS_CHANGE";
    SaveReason[SaveReason["WINDOW_CHANGE"] = 4] = "WINDOW_CHANGE";
})(SaveReason = exports.SaveReason || (exports.SaveReason = {}));
exports.ITextFileService = instantiation_1.createDecorator(exports.TEXT_FILE_SERVICE_ID);
