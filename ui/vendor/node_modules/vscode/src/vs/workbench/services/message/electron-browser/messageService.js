/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var windowService_1 = require("vs/workbench/services/window/electron-browser/windowService");
var nls = require("vs/nls");
var product_1 = require("vs/platform/node/product");
var winjs_base_1 = require("vs/base/common/winjs.base");
var messageService_1 = require("vs/workbench/services/message/browser/messageService");
var message_1 = require("vs/platform/message/common/message");
var platform_1 = require("vs/base/common/platform");
var telemetry_1 = require("vs/platform/telemetry/common/telemetry");
var actions_1 = require("vs/base/common/actions");
var MessageService = (function (_super) {
    __extends(MessageService, _super);
    function MessageService(container, windowService, telemetryService) {
        var _this = _super.call(this, container, telemetryService) || this;
        _this.windowService = windowService;
        return _this;
    }
    MessageService.prototype.confirm = function (confirmation) {
        if (!confirmation.primaryButton) {
            confirmation.primaryButton = nls.localize({ key: 'yesButton', comment: ['&& denotes a mnemonic'] }, "&&Yes");
        }
        if (!confirmation.secondaryButton) {
            confirmation.secondaryButton = nls.localize('cancelButton', "Cancel");
        }
        var opts = {
            title: confirmation.title,
            message: confirmation.message,
            buttons: [confirmation.primaryButton, confirmation.secondaryButton],
            defaultId: 0,
            cancelId: 1
        };
        if (confirmation.detail) {
            opts.detail = confirmation.detail;
        }
        if (confirmation.type) {
            opts.type = confirmation.type;
        }
        var result = this.showMessageBox(opts);
        return result === 0 ? true : false;
    };
    MessageService.prototype.choose = function (severity, message, options, modal) {
        var _this = this;
        if (modal === void 0) { modal = false; }
        if (modal) {
            var type = severity === message_1.Severity.Info ? 'question' : severity === message_1.Severity.Error ? 'error' : severity === message_1.Severity.Warning ? 'warning' : 'none';
            return winjs_base_1.TPromise.wrap(this.showMessageBox({ message: message, buttons: options, type: type }));
        }
        var onCancel = null;
        var promise = new winjs_base_1.TPromise(function (c, e) {
            var callback = function (index) { return function () {
                c(index);
                return winjs_base_1.TPromise.as(true);
            }; };
            var actions = options.map(function (option, index) { return new actions_1.Action('?', option, '', true, callback(index)); });
            onCancel = _this.show(severity, { message: message, actions: actions }, function () { return promise.cancel(); });
        }, function () { return onCancel(); });
        return promise;
    };
    MessageService.prototype.showMessageBox = function (opts) {
        var _this = this;
        opts.buttons = opts.buttons.map(function (button) { return _this.mnemonicLabel(button); });
        opts.buttons = platform_1.isLinux ? opts.buttons.reverse() : opts.buttons;
        if (opts.defaultId !== void 0) {
            opts.defaultId = platform_1.isLinux ? opts.buttons.length - opts.defaultId - 1 : opts.defaultId;
        }
        if (opts.cancelId !== void 0) {
            opts.cancelId = platform_1.isLinux ? opts.buttons.length - opts.cancelId - 1 : opts.cancelId;
        }
        opts.noLink = true;
        opts.title = opts.title || product_1.default.nameLong;
        var result = this.windowService.getWindow().showMessageBox(opts);
        return platform_1.isLinux ? opts.buttons.length - result - 1 : result;
    };
    MessageService.prototype.mnemonicLabel = function (label) {
        if (!platform_1.isWindows) {
            return label.replace(/\(&&\w\)|&&/g, ''); // no mnemonic support on mac/linux
        }
        return label.replace(/&&/g, '&');
    };
    return MessageService;
}(messageService_1.WorkbenchMessageService));
MessageService = __decorate([
    __param(1, windowService_1.IWindowIPCService),
    __param(2, telemetry_1.ITelemetryService)
], MessageService);
exports.MessageService = MessageService;
