/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var winjs_base_1 = require("vs/base/common/winjs.base");
var severity_1 = require("vs/base/common/severity");
var actionbar_1 = require("vs/base/browser/ui/actionbar/actionbar");
var dom = require("vs/base/browser/dom");
var contextView_1 = require("vs/platform/contextview/browser/contextView");
var telemetry_1 = require("vs/platform/telemetry/common/telemetry");
var message_1 = require("vs/platform/message/common/message");
var keybinding_1 = require("vs/platform/keybinding/common/keybinding");
var electron_1 = require("electron");
var ContextMenuService = (function () {
    function ContextMenuService(messageService, telemetryService, keybindingService) {
        this.messageService = messageService;
        this.telemetryService = telemetryService;
        this.keybindingService = keybindingService;
    }
    ContextMenuService.prototype.showContextMenu = function (delegate) {
        var _this = this;
        delegate.getActions().then(function (actions) {
            if (!actions.length) {
                return winjs_base_1.TPromise.as(null);
            }
            return winjs_base_1.TPromise.timeout(0).then(function () {
                var menu = _this.createMenu(delegate, actions);
                var anchor = delegate.getAnchor();
                var x, y;
                if (dom.isHTMLElement(anchor)) {
                    var elementPosition = dom.getDomNodePagePosition(anchor);
                    x = elementPosition.left;
                    y = elementPosition.top + elementPosition.height;
                }
                else {
                    var pos = anchor;
                    x = pos.x;
                    y = pos.y;
                }
                var zoom = electron_1.webFrame.getZoomFactor();
                x *= zoom;
                y *= zoom;
                menu.popup(electron_1.remote.getCurrentWindow(), Math.floor(x), Math.floor(y));
                if (delegate.onHide) {
                    delegate.onHide(undefined);
                }
            });
        });
    };
    ContextMenuService.prototype.createMenu = function (delegate, entries) {
        var _this = this;
        var menu = new electron_1.remote.Menu();
        entries.forEach(function (e) {
            if (e instanceof actionbar_1.Separator) {
                menu.append(new electron_1.remote.MenuItem({ type: 'separator' }));
            }
            else if (e instanceof contextView_1.ContextSubMenu) {
                var submenu = new electron_1.remote.MenuItem({
                    submenu: _this.createMenu(delegate, e.entries),
                    label: e.label
                });
                menu.append(submenu);
            }
            else {
                var keybinding = !!delegate.getKeyBinding ? delegate.getKeyBinding(e) : undefined;
                var accelerator = keybinding && _this.keybindingService.getElectronAcceleratorFor(keybinding);
                var item = new electron_1.remote.MenuItem({
                    label: e.label,
                    checked: !!e.checked || !!e.radio,
                    type: !!e.checked ? 'checkbox' : !!e.radio ? 'radio' : void 0,
                    accelerator: accelerator,
                    enabled: !!e.enabled,
                    click: function (menuItem, win, event) {
                        _this.runAction(e, delegate, event);
                    }
                });
                menu.append(item);
            }
        });
        return menu;
    };
    ContextMenuService.prototype.runAction = function (actionToRun, delegate, event) {
        var _this = this;
        this.telemetryService.publicLog('workbenchActionExecuted', { id: actionToRun.id, from: 'contextMenu' });
        var context = delegate.getActionsContext ? delegate.getActionsContext(event) : event;
        var res = actionToRun.run(context) || winjs_base_1.TPromise.as(null);
        res.done(null, function (e) { return _this.messageService.show(severity_1.default.Error, e); });
    };
    return ContextMenuService;
}());
ContextMenuService = __decorate([
    __param(0, message_1.IMessageService),
    __param(1, telemetry_1.ITelemetryService),
    __param(2, keybinding_1.IKeybindingService)
], ContextMenuService);
exports.ContextMenuService = ContextMenuService;
