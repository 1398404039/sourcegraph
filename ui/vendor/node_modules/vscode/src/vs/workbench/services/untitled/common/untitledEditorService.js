/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var uri_1 = require("vs/base/common/uri");
var instantiation_1 = require("vs/platform/instantiation/common/instantiation");
var arrays = require("vs/base/common/arrays");
var untitledEditorInput_1 = require("vs/workbench/common/editor/untitledEditorInput");
var event_1 = require("vs/base/common/event");
exports.IUntitledEditorService = instantiation_1.createDecorator('untitledEditorService');
var UntitledEditorService = (function () {
    function UntitledEditorService(instantiationService) {
        this.instantiationService = instantiationService;
        this._onDidChangeContent = new event_1.Emitter();
        this._onDidChangeDirty = new event_1.Emitter();
        this._onDidChangeEncoding = new event_1.Emitter();
        this._onDidDisposeModel = new event_1.Emitter();
    }
    Object.defineProperty(UntitledEditorService.prototype, "onDidDisposeModel", {
        get: function () {
            return this._onDidDisposeModel.event;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UntitledEditorService.prototype, "onDidChangeContent", {
        get: function () {
            return this._onDidChangeContent.event;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UntitledEditorService.prototype, "onDidChangeDirty", {
        get: function () {
            return this._onDidChangeDirty.event;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UntitledEditorService.prototype, "onDidChangeEncoding", {
        get: function () {
            return this._onDidChangeEncoding.event;
        },
        enumerable: true,
        configurable: true
    });
    UntitledEditorService.prototype.get = function (resource) {
        return UntitledEditorService.CACHE[resource.toString()];
    };
    UntitledEditorService.prototype.getAll = function (resources) {
        var _this = this;
        if (resources) {
            return arrays.coalesce(resources.map(function (r) { return _this.get(r); }));
        }
        return Object.keys(UntitledEditorService.CACHE).map(function (key) { return UntitledEditorService.CACHE[key]; });
    };
    UntitledEditorService.prototype.revertAll = function (resources, force) {
        var reverted = [];
        var untitledInputs = this.getAll(resources);
        untitledInputs.forEach(function (input) {
            if (input) {
                input.revert();
                input.dispose();
                reverted.push(input.getResource());
            }
        });
        return reverted;
    };
    UntitledEditorService.prototype.isDirty = function (resource) {
        var input = this.get(resource);
        return input && input.isDirty();
    };
    UntitledEditorService.prototype.getDirty = function () {
        return Object.keys(UntitledEditorService.CACHE)
            .map(function (key) { return UntitledEditorService.CACHE[key]; })
            .filter(function (i) { return i.isDirty(); })
            .map(function (i) { return i.getResource(); });
    };
    UntitledEditorService.prototype.createOrGet = function (resource, modeId) {
        var hasAssociatedFilePath = false;
        if (resource) {
            hasAssociatedFilePath = (resource.scheme === 'file');
            resource = this.resourceToUntitled(resource); // ensure we have the right scheme
            if (hasAssociatedFilePath) {
                UntitledEditorService.KNOWN_ASSOCIATED_FILE_PATHS[resource.toString()] = true; // remember for future lookups
            }
        }
        // Return existing instance if asked for it
        if (resource && UntitledEditorService.CACHE[resource.toString()]) {
            return UntitledEditorService.CACHE[resource.toString()];
        }
        // Create new otherwise
        return this.doCreate(resource, hasAssociatedFilePath, modeId);
    };
    UntitledEditorService.prototype.doCreate = function (resource, hasAssociatedFilePath, modeId) {
        var _this = this;
        if (!resource) {
            // Create new taking a resource URI that is not already taken
            var counter = Object.keys(UntitledEditorService.CACHE).length + 1;
            do {
                resource = uri_1.default.from({ scheme: untitledEditorInput_1.UntitledEditorInput.SCHEMA, path: "Untitled-" + counter });
                counter++;
            } while (Object.keys(UntitledEditorService.CACHE).indexOf(resource.toString()) >= 0);
        }
        var input = this.instantiationService.createInstance(untitledEditorInput_1.UntitledEditorInput, resource, hasAssociatedFilePath, modeId);
        var contentListener = input.onDidModelChangeContent(function () {
            _this._onDidChangeContent.fire(resource);
        });
        var dirtyListener = input.onDidChangeDirty(function () {
            _this._onDidChangeDirty.fire(resource);
        });
        var encodingListener = input.onDidModelChangeEncoding(function () {
            _this._onDidChangeEncoding.fire(resource);
        });
        var disposeListener = input.onDispose(function () {
            _this._onDidDisposeModel.fire(resource);
        });
        // Remove from cache on dispose
        var onceDispose = event_1.once(input.onDispose);
        onceDispose(function () {
            delete UntitledEditorService.CACHE[input.getResource().toString()];
            delete UntitledEditorService.KNOWN_ASSOCIATED_FILE_PATHS[input.getResource().toString()];
            contentListener.dispose();
            dirtyListener.dispose();
            encodingListener.dispose();
            disposeListener.dispose();
        });
        // Add to cache
        UntitledEditorService.CACHE[resource.toString()] = input;
        return input;
    };
    UntitledEditorService.prototype.resourceToUntitled = function (resource) {
        if (resource.scheme === untitledEditorInput_1.UntitledEditorInput.SCHEMA) {
            return resource;
        }
        return uri_1.default.from({ scheme: untitledEditorInput_1.UntitledEditorInput.SCHEMA, path: resource.fsPath });
    };
    UntitledEditorService.prototype.hasAssociatedFilePath = function (resource) {
        return !!UntitledEditorService.KNOWN_ASSOCIATED_FILE_PATHS[resource.toString()];
    };
    UntitledEditorService.prototype.dispose = function () {
        this._onDidChangeContent.dispose();
        this._onDidChangeDirty.dispose();
        this._onDidChangeEncoding.dispose();
        this._onDidDisposeModel.dispose();
    };
    return UntitledEditorService;
}());
UntitledEditorService.CACHE = Object.create(null);
UntitledEditorService.KNOWN_ASSOCIATED_FILE_PATHS = Object.create(null);
UntitledEditorService = __decorate([
    __param(0, instantiation_1.IInstantiationService)
], UntitledEditorService);
exports.UntitledEditorService = UntitledEditorService;
