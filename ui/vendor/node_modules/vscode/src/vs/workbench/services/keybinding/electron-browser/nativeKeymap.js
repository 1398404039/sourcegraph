/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var nativeKeymap = require("native-keymap");
var keyCodes_1 = require("vs/base/common/keyCodes");
var keybindingLabels_1 = require("vs/platform/keybinding/common/keybindingLabels");
var keyboardEvent_1 = require("vs/base/browser/keyboardEvent");
var Platform = require("vs/base/common/platform");
var getNativeKeymap = (function () {
    var called = false;
    var result;
    return function getNativeKeymap() {
        if (!called) {
            called = true;
            result = nativeKeymap.getKeyMap();
        }
        return result;
    };
})();
function getCurrentKeyboardLayout() {
    return nativeKeymap.getCurrentKeyboardLayout();
}
exports.getCurrentKeyboardLayout = getCurrentKeyboardLayout;
// See https://msdn.microsoft.com/en-us/library/windows/desktop/dd375731(v=vs.85).aspx
// See https://github.com/Microsoft/node-native-keymap/blob/master/deps/chromium/keyboard_codes_win.h
var NATIVE_KEY_CODE_TO_KEY_CODE = {
    VKEY_BACK: 1 /* Backspace */,
    VKEY_TAB: 2 /* Tab */,
    VKEY_CLEAR: 0 /* Unknown */,
    VKEY_RETURN: 3 /* Enter */,
    VKEY_SHIFT: 4 /* Shift */,
    VKEY_CONTROL: 5 /* Ctrl */,
    VKEY_MENU: 6 /* Alt */,
    VKEY_PAUSE: 7 /* PauseBreak */,
    VKEY_CAPITAL: 8 /* CapsLock */,
    VKEY_KANA: 0 /* Unknown */,
    VKEY_HANGUL: 0 /* Unknown */,
    VKEY_JUNJA: 0 /* Unknown */,
    VKEY_FINAL: 0 /* Unknown */,
    VKEY_HANJA: 0 /* Unknown */,
    VKEY_KANJI: 0 /* Unknown */,
    VKEY_ESCAPE: 9 /* Escape */,
    VKEY_CONVERT: 0 /* Unknown */,
    VKEY_NONCONVERT: 0 /* Unknown */,
    VKEY_ACCEPT: 0 /* Unknown */,
    VKEY_MODECHANGE: 0 /* Unknown */,
    VKEY_SPACE: 10 /* Space */,
    VKEY_PRIOR: 11 /* PageUp */,
    VKEY_NEXT: 12 /* PageDown */,
    VKEY_END: 13 /* End */,
    VKEY_HOME: 14 /* Home */,
    VKEY_LEFT: 15 /* LeftArrow */,
    VKEY_UP: 16 /* UpArrow */,
    VKEY_RIGHT: 17 /* RightArrow */,
    VKEY_DOWN: 18 /* DownArrow */,
    VKEY_SELECT: 0 /* Unknown */,
    VKEY_PRINT: 0 /* Unknown */,
    VKEY_EXECUTE: 0 /* Unknown */,
    VKEY_SNAPSHOT: 0 /* Unknown */,
    VKEY_INSERT: 19 /* Insert */,
    VKEY_DELETE: 20 /* Delete */,
    VKEY_HELP: 0 /* Unknown */,
    VKEY_0: 21 /* KEY_0 */,
    VKEY_1: 22 /* KEY_1 */,
    VKEY_2: 23 /* KEY_2 */,
    VKEY_3: 24 /* KEY_3 */,
    VKEY_4: 25 /* KEY_4 */,
    VKEY_5: 26 /* KEY_5 */,
    VKEY_6: 27 /* KEY_6 */,
    VKEY_7: 28 /* KEY_7 */,
    VKEY_8: 29 /* KEY_8 */,
    VKEY_9: 30 /* KEY_9 */,
    VKEY_A: 31 /* KEY_A */,
    VKEY_B: 32 /* KEY_B */,
    VKEY_C: 33 /* KEY_C */,
    VKEY_D: 34 /* KEY_D */,
    VKEY_E: 35 /* KEY_E */,
    VKEY_F: 36 /* KEY_F */,
    VKEY_G: 37 /* KEY_G */,
    VKEY_H: 38 /* KEY_H */,
    VKEY_I: 39 /* KEY_I */,
    VKEY_J: 40 /* KEY_J */,
    VKEY_K: 41 /* KEY_K */,
    VKEY_L: 42 /* KEY_L */,
    VKEY_M: 43 /* KEY_M */,
    VKEY_N: 44 /* KEY_N */,
    VKEY_O: 45 /* KEY_O */,
    VKEY_P: 46 /* KEY_P */,
    VKEY_Q: 47 /* KEY_Q */,
    VKEY_R: 48 /* KEY_R */,
    VKEY_S: 49 /* KEY_S */,
    VKEY_T: 50 /* KEY_T */,
    VKEY_U: 51 /* KEY_U */,
    VKEY_V: 52 /* KEY_V */,
    VKEY_W: 53 /* KEY_W */,
    VKEY_X: 54 /* KEY_X */,
    VKEY_Y: 55 /* KEY_Y */,
    VKEY_Z: 56 /* KEY_Z */,
    VKEY_LWIN: 57 /* Meta */,
    VKEY_COMMAND: 57 /* Meta */,
    VKEY_RWIN: 57 /* Meta */,
    VKEY_APPS: 0 /* Unknown */,
    VKEY_SLEEP: 0 /* Unknown */,
    VKEY_NUMPAD0: 93 /* NUMPAD_0 */,
    VKEY_NUMPAD1: 94 /* NUMPAD_1 */,
    VKEY_NUMPAD2: 95 /* NUMPAD_2 */,
    VKEY_NUMPAD3: 96 /* NUMPAD_3 */,
    VKEY_NUMPAD4: 97 /* NUMPAD_4 */,
    VKEY_NUMPAD5: 98 /* NUMPAD_5 */,
    VKEY_NUMPAD6: 99 /* NUMPAD_6 */,
    VKEY_NUMPAD7: 100 /* NUMPAD_7 */,
    VKEY_NUMPAD8: 101 /* NUMPAD_8 */,
    VKEY_NUMPAD9: 102 /* NUMPAD_9 */,
    VKEY_MULTIPLY: 103 /* NUMPAD_MULTIPLY */,
    VKEY_ADD: 104 /* NUMPAD_ADD */,
    VKEY_SEPARATOR: 105 /* NUMPAD_SEPARATOR */,
    VKEY_SUBTRACT: 106 /* NUMPAD_SUBTRACT */,
    VKEY_DECIMAL: 107 /* NUMPAD_DECIMAL */,
    VKEY_DIVIDE: 108 /* NUMPAD_DIVIDE */,
    VKEY_F1: 59 /* F1 */,
    VKEY_F2: 60 /* F2 */,
    VKEY_F3: 61 /* F3 */,
    VKEY_F4: 62 /* F4 */,
    VKEY_F5: 63 /* F5 */,
    VKEY_F6: 64 /* F6 */,
    VKEY_F7: 65 /* F7 */,
    VKEY_F8: 66 /* F8 */,
    VKEY_F9: 67 /* F9 */,
    VKEY_F10: 68 /* F10 */,
    VKEY_F11: 69 /* F11 */,
    VKEY_F12: 70 /* F12 */,
    VKEY_F13: 71 /* F13 */,
    VKEY_F14: 72 /* F14 */,
    VKEY_F15: 73 /* F15 */,
    VKEY_F16: 74 /* F16 */,
    VKEY_F17: 75 /* F17 */,
    VKEY_F18: 76 /* F18 */,
    VKEY_F19: 77 /* F19 */,
    VKEY_F20: 0 /* Unknown */,
    VKEY_F21: 0 /* Unknown */,
    VKEY_F22: 0 /* Unknown */,
    VKEY_F23: 0 /* Unknown */,
    VKEY_F24: 0 /* Unknown */,
    VKEY_NUMLOCK: 78 /* NumLock */,
    VKEY_SCROLL: 79 /* ScrollLock */,
    VKEY_LSHIFT: 4 /* Shift */,
    VKEY_RSHIFT: 4 /* Shift */,
    VKEY_LCONTROL: 5 /* Ctrl */,
    VKEY_RCONTROL: 5 /* Ctrl */,
    VKEY_LMENU: 0 /* Unknown */,
    VKEY_RMENU: 0 /* Unknown */,
    VKEY_BROWSER_BACK: 0 /* Unknown */,
    VKEY_BROWSER_FORWARD: 0 /* Unknown */,
    VKEY_BROWSER_REFRESH: 0 /* Unknown */,
    VKEY_BROWSER_STOP: 0 /* Unknown */,
    VKEY_BROWSER_SEARCH: 0 /* Unknown */,
    VKEY_BROWSER_FAVORITES: 0 /* Unknown */,
    VKEY_BROWSER_HOME: 0 /* Unknown */,
    VKEY_VOLUME_MUTE: 0 /* Unknown */,
    VKEY_VOLUME_DOWN: 0 /* Unknown */,
    VKEY_VOLUME_UP: 0 /* Unknown */,
    VKEY_MEDIA_NEXT_TRACK: 0 /* Unknown */,
    VKEY_MEDIA_PREV_TRACK: 0 /* Unknown */,
    VKEY_MEDIA_STOP: 0 /* Unknown */,
    VKEY_MEDIA_PLAY_PAUSE: 0 /* Unknown */,
    VKEY_MEDIA_LAUNCH_MAIL: 0 /* Unknown */,
    VKEY_MEDIA_LAUNCH_MEDIA_SELECT: 0 /* Unknown */,
    VKEY_MEDIA_LAUNCH_APP1: 0 /* Unknown */,
    VKEY_MEDIA_LAUNCH_APP2: 0 /* Unknown */,
    VKEY_OEM_1: 80 /* US_SEMICOLON */,
    VKEY_OEM_PLUS: 81 /* US_EQUAL */,
    VKEY_OEM_COMMA: 82 /* US_COMMA */,
    VKEY_OEM_MINUS: 83 /* US_MINUS */,
    VKEY_OEM_PERIOD: 84 /* US_DOT */,
    VKEY_OEM_2: 85 /* US_SLASH */,
    VKEY_OEM_3: 86 /* US_BACKTICK */,
    VKEY_OEM_4: 87 /* US_OPEN_SQUARE_BRACKET */,
    VKEY_OEM_5: 88 /* US_BACKSLASH */,
    VKEY_OEM_6: 89 /* US_CLOSE_SQUARE_BRACKET */,
    VKEY_OEM_7: 90 /* US_QUOTE */,
    VKEY_OEM_8: 91 /* OEM_8 */,
    VKEY_OEM_102: 92 /* OEM_102 */,
    VKEY_PROCESSKEY: 0 /* Unknown */,
    VKEY_PACKET: 0 /* Unknown */,
    VKEY_DBE_SBCSCHAR: 0 /* Unknown */,
    VKEY_DBE_DBCSCHAR: 0 /* Unknown */,
    VKEY_ATTN: 0 /* Unknown */,
    VKEY_CRSEL: 0 /* Unknown */,
    VKEY_EXSEL: 0 /* Unknown */,
    VKEY_EREOF: 0 /* Unknown */,
    VKEY_PLAY: 0 /* Unknown */,
    VKEY_ZOOM: 0 /* Unknown */,
    VKEY_NONAME: 0 /* Unknown */,
    VKEY_PA1: 0 /* Unknown */,
    VKEY_OEM_CLEAR: 0 /* Unknown */,
    VKEY_UNKNOWN: 0 /* Unknown */,
    // Windows does not have a specific key code for AltGr. We use the unused
    // VK_OEM_AX to represent AltGr, matching the behaviour of Firefox on Linux.
    VKEY_ALTGR: 0 /* Unknown */,
};
var _b24_fixedVirtualKeyCodes = [
    { char: ';', virtualKeyCode: 186 },
    { char: ':', virtualKeyCode: 186 },
    { char: '=', virtualKeyCode: 187 },
    { char: '+', virtualKeyCode: 187 },
    { char: ',', virtualKeyCode: 188 },
    { char: '<', virtualKeyCode: 188 },
    { char: '-', virtualKeyCode: 189 },
    { char: '_', virtualKeyCode: 189 },
    { char: '.', virtualKeyCode: 190 },
    { char: '>', virtualKeyCode: 190 },
    { char: '/', virtualKeyCode: 191 },
    { char: '?', virtualKeyCode: 191 },
    { char: '`', virtualKeyCode: 192 },
    { char: '~', virtualKeyCode: 192 },
    { char: '[', virtualKeyCode: 219 },
    { char: '{', virtualKeyCode: 219 },
    { char: '\\', virtualKeyCode: 220 },
    { char: '|', virtualKeyCode: 220 },
    { char: ']', virtualKeyCode: 221 },
    { char: '}', virtualKeyCode: 221 },
    { char: '\'', virtualKeyCode: 222 },
    { char: '"', virtualKeyCode: 222 },
];
var _b24_interestingChars = Object.create(null);
_b24_fixedVirtualKeyCodes.forEach(function (el) { return _b24_interestingChars[el.char] = true; });
var _b24_interestingVirtualKeyCodes = Object.create(null);
_b24_fixedVirtualKeyCodes.forEach(function (el) { return _b24_interestingVirtualKeyCodes[el.virtualKeyCode] = true; });
var _b24_getActualKeyCodeMap = (function () {
    var result = null;
    return function () {
        if (!result) {
            result = Object.create(null);
            var nativeMappings = getNativeKeymap();
            for (var i = 0, len = nativeMappings.length; i < len; i++) {
                var nativeMapping = nativeMappings[i];
                if (nativeMapping.value && _b24_interestingChars[nativeMapping.value]) {
                    // console.log(nativeMapping.value + " is made by " + nativeMapping.key_code);
                    var keyCode = NATIVE_KEY_CODE_TO_KEY_CODE[nativeMapping.key_code];
                    if (keyCode) {
                        if (!result[nativeMapping.value] || result[nativeMapping.value] > keyCode) {
                            result[nativeMapping.value] = keyCode;
                        }
                    }
                }
                if (nativeMapping.withShift && _b24_interestingChars[nativeMapping.withShift]) {
                    // console.log(nativeMapping.withShift + " is made by " + nativeMapping.key_code);
                    var keyCode = NATIVE_KEY_CODE_TO_KEY_CODE[nativeMapping.key_code];
                    if (keyCode) {
                        if (!result[nativeMapping.withShift] || result[nativeMapping.withShift] > keyCode) {
                            result[nativeMapping.withShift] = keyCode;
                        }
                    }
                }
            }
        }
        return result;
    };
})();
keyboardEvent_1.setExtractKeyCode(function (e) {
    if (e.charCode) {
        // "keypress" events mostly
        var char = String.fromCharCode(e.charCode).toUpperCase();
        return keyCodes_1.KeyCodeUtils.fromString(char);
    }
    if (Platform.isMacintosh && _b24_interestingVirtualKeyCodes[e.keyCode] && typeof e.key === 'string') {
        try {
            var unfixMap = _b24_getActualKeyCodeMap();
            if (unfixMap[e.key]) {
                return unfixMap[e.key];
            }
        }
        catch (err) {
        }
    }
    // _b24_getActualKeyCodeMap();
    // console.log('injected!!!');
    return keyboardEvent_1.lookupKeyCode(e);
});
var nativeAriaLabelProvider = null;
function getNativeAriaLabelProvider() {
    if (!nativeAriaLabelProvider) {
        var remaps = getNativeLabelProviderRemaps();
        nativeAriaLabelProvider = new NativeAriaKeyLabelProvider(remaps);
    }
    return nativeAriaLabelProvider;
}
exports.getNativeAriaLabelProvider = getNativeAriaLabelProvider;
var nativeLabelProvider = null;
function getNativeLabelProvider() {
    if (!nativeLabelProvider) {
        var remaps = getNativeLabelProviderRemaps();
        if (Platform.isMacintosh) {
            nativeLabelProvider = new NativeMacUIKeyLabelProvider(remaps);
        }
        else {
            nativeLabelProvider = new NativeClassicUIKeyLabelProvider(remaps);
        }
    }
    return nativeLabelProvider;
}
exports.getNativeLabelProvider = getNativeLabelProvider;
var NativeLabel = (function () {
    function NativeLabel(value, withShift, withAltGr, withShiftAltGr) {
        this._rendered = value || withShift;
        this._rendered = NativeLabel._massageRenderedKey(this._rendered);
    }
    /**
     * Very often, keyboards generate combining diacritical marks
     * They reside in the range 0300..036F
     * See ftp://ftp.unicode.org/Public/UNIDATA/Blocks.txt
     * See https://en.wikipedia.org/wiki/Combining_Diacritical_Marks
     */
    NativeLabel._massageRenderedKey = function (str) {
        if (str.length !== 1) {
            return str;
        }
        return String.fromCharCode(this._combiningToRegular(str.charCodeAt(0)));
    };
    /**
     * Attempt to map a combining character to a regular one that renders the same way.
     *
     * To the brave person following me: Good Luck!
     * https://www.compart.com/en/unicode/bidiclass/NSM
     */
    NativeLabel._combiningToRegular = function (charCode) {
        switch (charCode) {
            case 768 /* U_Combining_Grave_Accent */: return 96 /* U_GRAVE_ACCENT */;
            case 769 /* U_Combining_Acute_Accent */: return 180 /* U_ACUTE_ACCENT */;
            case 770 /* U_Combining_Circumflex_Accent */: return 94 /* U_CIRCUMFLEX */;
            case 771 /* U_Combining_Tilde */: return 732 /* U_SMALL_TILDE */;
            case 772 /* U_Combining_Macron */: return 175 /* U_MACRON */;
            case 773 /* U_Combining_Overline */: return 8254 /* U_OVERLINE */;
            case 774 /* U_Combining_Breve */: return 728 /* U_BREVE */;
            case 775 /* U_Combining_Dot_Above */: return 729 /* U_DOT_ABOVE */;
            case 776 /* U_Combining_Diaeresis */: return 168 /* U_DIAERESIS */;
            case 778 /* U_Combining_Ring_Above */: return 730 /* U_RING_ABOVE */;
            case 779 /* U_Combining_Double_Acute_Accent */: return 733 /* U_DOUBLE_ACUTE_ACCENT */;
        }
        return charCode;
    };
    NativeLabel.prototype.render = function () {
        return this._rendered;
    };
    return NativeLabel;
}());
NativeLabel.Empty = new NativeLabel('', '', '', '');
var nativeLabelRemaps = null;
function getNativeLabelProviderRemaps() {
    if (!nativeLabelRemaps) {
        // See https://msdn.microsoft.com/en-us/library/windows/desktop/dd375731(v=vs.85).aspx
        // See https://github.com/Microsoft/node-native-keymap/blob/master/deps/chromium/keyboard_codes_win.h
        var interestingKeyCodes = {
            VKEY_OEM_1: true,
            VKEY_OEM_PLUS: true,
            VKEY_OEM_COMMA: true,
            VKEY_OEM_MINUS: true,
            VKEY_OEM_PERIOD: true,
            VKEY_OEM_2: true,
            VKEY_OEM_3: true,
            VKEY_OEM_4: true,
            VKEY_OEM_5: true,
            VKEY_OEM_6: true,
            VKEY_OEM_7: true,
            VKEY_OEM_8: true,
            VKEY_OEM_102: true,
        };
        nativeLabelRemaps = [];
        for (var i = 0, len = 109 /* MAX_VALUE */; i < len; i++) {
            nativeLabelRemaps[i] = null;
        }
        var nativeMappings = getNativeKeymap();
        var hadRemap = false;
        for (var i = 0, len = nativeMappings.length; i < len; i++) {
            var nativeMapping = nativeMappings[i];
            if (interestingKeyCodes[nativeMapping.key_code]) {
                if (nativeMapping.value.length > 0 || nativeMapping.withShift.length > 0) {
                    hadRemap = true;
                    nativeLabelRemaps[NATIVE_KEY_CODE_TO_KEY_CODE[nativeMapping.key_code]] = new NativeLabel(nativeMapping.value, nativeMapping.withShift, nativeMapping.withAltGr, nativeMapping.withShiftAltGr);
                }
            }
        }
        if (hadRemap) {
            for (var interestingKeyCode in interestingKeyCodes) {
                if (interestingKeyCodes.hasOwnProperty(interestingKeyCode)) {
                    var keyCode = NATIVE_KEY_CODE_TO_KEY_CODE[interestingKeyCode];
                    nativeLabelRemaps[keyCode] = nativeLabelRemaps[keyCode] || NativeLabel.Empty;
                }
            }
        }
    }
    return nativeLabelRemaps;
}
var NativeMacUIKeyLabelProvider = (function (_super) {
    __extends(NativeMacUIKeyLabelProvider, _super);
    function NativeMacUIKeyLabelProvider(remaps) {
        var _this = _super.call(this) || this;
        _this.remaps = remaps;
        return _this;
    }
    NativeMacUIKeyLabelProvider.prototype.getLabelForKey = function (keyCode) {
        if (this.remaps[keyCode] !== null) {
            return this.remaps[keyCode].render();
        }
        return _super.prototype.getLabelForKey.call(this, keyCode);
    };
    return NativeMacUIKeyLabelProvider;
}(keybindingLabels_1.MacUIKeyLabelProvider));
var NativeClassicUIKeyLabelProvider = (function (_super) {
    __extends(NativeClassicUIKeyLabelProvider, _super);
    function NativeClassicUIKeyLabelProvider(remaps) {
        var _this = _super.call(this) || this;
        _this.remaps = remaps;
        return _this;
    }
    NativeClassicUIKeyLabelProvider.prototype.getLabelForKey = function (keyCode) {
        if (this.remaps[keyCode] !== null) {
            return this.remaps[keyCode].render();
        }
        return _super.prototype.getLabelForKey.call(this, keyCode);
    };
    return NativeClassicUIKeyLabelProvider;
}(keybindingLabels_1.ClassicUIKeyLabelProvider));
var NativeAriaKeyLabelProvider = (function (_super) {
    __extends(NativeAriaKeyLabelProvider, _super);
    function NativeAriaKeyLabelProvider(remaps) {
        var _this = _super.call(this) || this;
        _this.remaps = remaps;
        return _this;
    }
    NativeAriaKeyLabelProvider.prototype.getLabelForKey = function (keyCode) {
        if (this.remaps[keyCode] !== null) {
            return this.remaps[keyCode].render();
        }
        return _super.prototype.getLabelForKey.call(this, keyCode);
    };
    return NativeAriaKeyLabelProvider;
}(keybindingLabels_1.AriaKeyLabelProvider));
