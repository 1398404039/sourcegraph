import { IDisposable } from 'vs/base/common/lifecycle';
import Event from 'vs/base/common/event';
import { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';
import { ISCMService, ISCMProvider, ISCMInput } from './scm';
export declare class SCMService implements ISCMService {
    _serviceBrand: any;
    private providerChangeDisposable;
    private activeProviderContextKey;
    private activeProviderStateContextKey;
    private _activeProvider;
    activeProvider: ISCMProvider | undefined;
    private _providers;
    readonly providers: ISCMProvider[];
    private _onDidChangeProvider;
    readonly onDidChangeProvider: Event<ISCMProvider>;
    readonly input: ISCMInput;
    constructor(contextKeyService: IContextKeyService);
    registerSCMProvider(provider: ISCMProvider): IDisposable;
    private onDidChangeProviderState();
}
