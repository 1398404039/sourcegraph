/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var errors = require("vs/base/common/errors");
var errorMessage_1 = require("vs/base/common/errorMessage");
var types = require("vs/base/common/types");
var messageList_1 = require("vs/workbench/services/message/browser/messageList");
var message_1 = require("vs/platform/message/common/message");
var WorkbenchMessageService = (function () {
    function WorkbenchMessageService(container, telemetryService) {
        this.handler = new messageList_1.MessageList(container, telemetryService);
        this.messageBuffer = [];
        this.canShowMessages = true;
        this.disposeables = [];
    }
    Object.defineProperty(WorkbenchMessageService.prototype, "onMessagesShowing", {
        get: function () {
            return this.handler.onMessagesShowing;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WorkbenchMessageService.prototype, "onMessagesCleared", {
        get: function () {
            return this.handler.onMessagesCleared;
        },
        enumerable: true,
        configurable: true
    });
    WorkbenchMessageService.prototype.suspend = function () {
        this.canShowMessages = false;
        this.handler.hide();
    };
    WorkbenchMessageService.prototype.resume = function () {
        this.canShowMessages = true;
        this.handler.show();
        // Release messages from buffer
        while (this.messageBuffer.length) {
            var bufferedMessage = this.messageBuffer.pop();
            bufferedMessage.disposeFn = this.show(bufferedMessage.severity, bufferedMessage.message, bufferedMessage.onHide);
        }
    };
    WorkbenchMessageService.prototype.toBaseSeverity = function (severity) {
        switch (severity) {
            case message_1.Severity.Info:
                return messageList_1.Severity.Info;
            case message_1.Severity.Warning:
                return messageList_1.Severity.Warning;
        }
        return messageList_1.Severity.Error;
    };
    WorkbenchMessageService.prototype.show = function (sev, message, onHide) {
        var _this = this;
        if (!message) {
            return function () { return void 0; }; // guard against undefined messages
        }
        if (Array.isArray(message)) {
            var closeFns_1 = [];
            message.forEach(function (msg) { return closeFns_1.push(_this.show(sev, msg, onHide)); });
            return function () { return closeFns_1.forEach(function (fn) { return fn(); }); };
        }
        if (errors.isPromiseCanceledError(message)) {
            return function () { return void 0; }; // this kind of error should not be shown
        }
        if (types.isNumber(message.severity)) {
            sev = message.severity;
        }
        return this.doShow(sev, message, onHide);
    };
    WorkbenchMessageService.prototype.doShow = function (sev, message, onHide) {
        var _this = this;
        // Check flag if we can show a message now
        if (!this.canShowMessages) {
            var messageObj_1 = {
                severity: sev,
                message: message,
                onHide: onHide,
                disposeFn: function () { return _this.messageBuffer.splice(_this.messageBuffer.indexOf(messageObj_1), 1); }
            };
            this.messageBuffer.push(messageObj_1);
            // Return function that allows to remove message from buffer
            return function () { return messageObj_1.disposeFn(); };
        }
        // Show in Console
        if (sev === message_1.Severity.Error) {
            console.error(errorMessage_1.toErrorMessage(message, true));
        }
        // Show in Global Handler
        return this.handler.showMessage(this.toBaseSeverity(sev), message, onHide);
    };
    WorkbenchMessageService.prototype.hideAll = function () {
        if (this.handler) {
            this.handler.hideMessages();
        }
    };
    WorkbenchMessageService.prototype.confirm = function (confirmation) {
        var messageText = confirmation.message;
        if (confirmation.detail) {
            messageText = messageText + '\n\n' + confirmation.detail;
        }
        return window.confirm(messageText);
    };
    WorkbenchMessageService.prototype.dispose = function () {
        while (this.disposeables.length) {
            this.disposeables.pop().dispose();
        }
    };
    return WorkbenchMessageService;
}());
exports.WorkbenchMessageService = WorkbenchMessageService;
