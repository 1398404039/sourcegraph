/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
require("vs/workbench/services/progress/browser/media/progressService2.css");
var dom = require("vs/base/browser/dom");
var activityBarService_1 = require("vs/workbench/services/activity/common/activityBarService");
var lifecycle_1 = require("vs/base/common/lifecycle");
var progress_1 = require("vs/platform/progress/common/progress");
var viewlet_1 = require("vs/workbench/services/viewlet/browser/viewlet");
var octiconLabel_1 = require("vs/base/browser/ui/octiconLabel/octiconLabel");
var platform_1 = require("vs/platform/platform");
var statusbar_1 = require("vs/workbench/browser/parts/statusbar/statusbar");
var async_1 = require("vs/base/common/async");
var WindowProgressItem = (function () {
    function WindowProgressItem() {
        WindowProgressItem.Instance = this;
    }
    WindowProgressItem.prototype.render = function (element) {
        this._element = element;
        this._label = new octiconLabel_1.OcticonLabel(this._element);
        this._element.classList.add('progress');
        this.hide();
        return null;
    };
    Object.defineProperty(WindowProgressItem.prototype, "text", {
        set: function (value) {
            this._label.text = value;
        },
        enumerable: true,
        configurable: true
    });
    WindowProgressItem.prototype.hide = function () {
        dom.hide(this._element);
    };
    WindowProgressItem.prototype.show = function () {
        dom.show(this._element);
    };
    return WindowProgressItem;
}());
var ProgressService2 = (function () {
    function ProgressService2(_activityBar, _viewletService) {
        this._activityBar = _activityBar;
        this._viewletService = _viewletService;
        this._stack = [];
        //
    }
    ProgressService2.prototype.withWindowProgress = function (title, callback) {
        var _this = this;
        var task = {
            progress: new progress_1.Progress(function () { return _this._updateProgress(); }),
            title: title
        };
        var promise = callback(task.progress);
        this._stack.unshift(task);
        this._updateProgress();
        async_1.always(promise, function () {
            var idx = _this._stack.indexOf(task);
            _this._stack.splice(idx, 1);
            _this._updateProgress();
        });
    };
    ProgressService2.prototype._updateProgress = function () {
        if (this._stack.length === 0) {
            WindowProgressItem.Instance.hide();
        }
        else {
            var _a = this._stack[0], title = _a.title, progress = _a.progress;
            WindowProgressItem.Instance.text = progress.value || title;
            WindowProgressItem.Instance.show();
        }
    };
    ProgressService2.prototype.withViewletProgress = function (viewletId, task) {
        var _this = this;
        var promise = task(progress_1.emptyProgress);
        // show in viewlet
        var viewletProgress = this._viewletService.getProgressIndicator(viewletId);
        if (viewletProgress) {
            viewletProgress.showWhile(promise);
        }
        // show activity bar
        var activityProgress;
        var delayHandle = setTimeout(function () {
            delayHandle = undefined;
            activityProgress = _this._activityBar.showActivity(viewletId, new activityBarService_1.ProgressBadge(function () { return ''; }), 'progress-badge');
        }, 200);
        async_1.always(promise, function () {
            clearTimeout(delayHandle);
            lifecycle_1.dispose(activityProgress);
        });
    };
    return ProgressService2;
}());
ProgressService2 = __decorate([
    __param(0, activityBarService_1.IActivityBarService),
    __param(1, viewlet_1.IViewletService)
], ProgressService2);
exports.ProgressService2 = ProgressService2;
platform_1.Registry.as(statusbar_1.Extensions.Statusbar).registerStatusbarItem(new statusbar_1.StatusbarItemDescriptor(WindowProgressItem, statusbar_1.StatusbarAlignment.LEFT));
