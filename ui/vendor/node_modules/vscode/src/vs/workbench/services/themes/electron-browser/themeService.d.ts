import { TPromise } from 'vs/base/common/winjs.base';
import { IExtensionService } from 'vs/platform/extensions/common/extensions';
import { IWorkbenchThemeService, IColorTheme, IFileIconTheme } from 'vs/workbench/services/themes/common/themeService';
import { IWindowIPCService } from 'vs/workbench/services/window/electron-browser/windowService';
import { IStorageService } from 'vs/platform/storage/common/storage';
import { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';
import { IConfigurationEditingService, ConfigurationTarget } from 'vs/workbench/services/configuration/common/configurationEditing';
import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
import { IFileService } from 'vs/platform/files/common/files';
import { IEnvironmentService } from 'vs/platform/environment/common/environment';
import { IMessageService } from 'vs/platform/message/common/message';
import { ITheme, IThemingParticipant } from 'vs/platform/theme/common/themeService';
import Event from 'vs/base/common/event';
import { IDisposable } from 'vs/base/common/lifecycle';
export declare class WorkbenchThemeService implements IWorkbenchThemeService {
    private extensionService;
    private storageService;
    private windowService;
    private configurationService;
    private configurationEditingService;
    private environmentService;
    private fileService;
    private messageService;
    private telemetryService;
    _serviceBrand: any;
    private knownColorThemes;
    private currentColorTheme;
    private container;
    private onColorThemeChange;
    private knownIconThemes;
    private currentIconTheme;
    private onFileIconThemeChange;
    private themingParticipants;
    constructor(container: HTMLElement, extensionService: IExtensionService, storageService: IStorageService, windowService: IWindowIPCService, configurationService: IConfigurationService, configurationEditingService: IConfigurationEditingService, environmentService: IEnvironmentService, fileService: IFileService, messageService: IMessageService, telemetryService: ITelemetryService);
    readonly onDidColorThemeChange: Event<IColorTheme>;
    readonly onDidThemeChange: Event<ITheme>;
    readonly onDidFileIconThemeChange: Event<IFileIconTheme>;
    registerThemingParticipant(participant: IThemingParticipant): IDisposable;
    getThemingParticipants(): IThemingParticipant[];
    private backupSettings();
    private migrate();
    private initialize();
    private installConfigurationListener();
    getTheme(): ITheme;
    setColorTheme(themeId: string, settingsTarget: ConfigurationTarget): TPromise<IColorTheme>;
    private writeColorThemeConfiguration(settingsTarget);
    getColorTheme(): IColorTheme;
    private findThemeData(themeId, defaultId?);
    private findThemeDataBySettingsId(settingsId, defaultId);
    getColorThemes(): TPromise<IColorTheme[]>;
    private onThemes(extensionFolderPath, extensionData, themes, collector);
    private onIconThemes(extensionFolderPath, extensionData, iconThemes, collector);
    private themeExtensionsActivated;
    private sendTelemetry(themeId, themeData, themeType);
    getFileIconThemes(): TPromise<IFileIconTheme[]>;
    getFileIconTheme(): IFileIconTheme;
    setFileIconTheme(iconTheme: string, settingsTarget: ConfigurationTarget): TPromise<IFileIconTheme>;
    private writeFileIconConfiguration(settingsTarget);
    private writeConfiguration(key, value, settingsTarget);
    private _findIconThemeData(iconTheme);
    private findIconThemeBySettingsId(settingsId);
}
