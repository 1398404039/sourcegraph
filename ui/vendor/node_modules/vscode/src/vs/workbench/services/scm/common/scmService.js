/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var lifecycle_1 = require("vs/base/common/lifecycle");
var event_1 = require("vs/base/common/event");
var decorators_1 = require("vs/base/common/decorators");
var contextkey_1 = require("vs/platform/contextkey/common/contextkey");
var SCMInput = (function () {
    function SCMInput() {
        this._value = '';
        this._onDidChange = new event_1.Emitter();
    }
    Object.defineProperty(SCMInput.prototype, "value", {
        get: function () {
            return this._value;
        },
        set: function (value) {
            this._value = value;
            this._onDidChange.fire(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SCMInput.prototype, "onDidChange", {
        get: function () { return this._onDidChange.event; },
        enumerable: true,
        configurable: true
    });
    return SCMInput;
}());
var SCMService = (function () {
    function SCMService(contextKeyService) {
        this.providerChangeDisposable = lifecycle_1.empty;
        this._providers = [];
        this._onDidChangeProvider = new event_1.Emitter();
        this.activeProviderContextKey = contextKeyService.createKey('scmProvider', void 0);
        this.activeProviderStateContextKey = contextKeyService.createKey('scmProviderState', void 0);
    }
    Object.defineProperty(SCMService.prototype, "activeProvider", {
        get: function () {
            return this._activeProvider;
        },
        set: function (provider) {
            if (!provider) {
                throw new Error('invalid provider');
            }
            if (provider && this._providers.indexOf(provider) === -1) {
                throw new Error('Provider not registered');
            }
            this._activeProvider = provider;
            this.activeProviderContextKey.set(provider ? provider.id : void 0);
            this.providerChangeDisposable.dispose();
            this.providerChangeDisposable = provider.onDidChange(this.onDidChangeProviderState, this);
            this.onDidChangeProviderState();
            this._onDidChangeProvider.fire(provider);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SCMService.prototype, "providers", {
        get: function () { return this._providers.slice(); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SCMService.prototype, "onDidChangeProvider", {
        get: function () { return this._onDidChangeProvider.event; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SCMService.prototype, "input", {
        get: function () { return new SCMInput(); },
        enumerable: true,
        configurable: true
    });
    SCMService.prototype.registerSCMProvider = function (provider) {
        var _this = this;
        this._providers = [provider].concat(this._providers);
        if (this._providers.length === 1) {
            this.activeProvider = provider;
        }
        return lifecycle_1.toDisposable(function () {
            var index = _this._providers.indexOf(provider);
            if (index < 0) {
                return;
            }
            _this._providers.splice(index, 1);
            if (_this.activeProvider === provider) {
                _this.activeProvider = _this._providers[0];
            }
        });
    };
    SCMService.prototype.onDidChangeProviderState = function () {
        this.activeProviderStateContextKey.set(this.activeProvider.state);
    };
    return SCMService;
}());
__decorate([
    decorators_1.memoize
], SCMService.prototype, "input", null);
SCMService = __decorate([
    __param(0, contextkey_1.IContextKeyService)
], SCMService);
exports.SCMService = SCMService;
