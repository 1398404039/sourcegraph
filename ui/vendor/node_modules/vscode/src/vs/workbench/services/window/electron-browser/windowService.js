/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var instantiation_1 = require("vs/platform/instantiation/common/instantiation");
var event_1 = require("vs/base/common/event");
var electron_1 = require("electron");
var windowId = electron_1.remote.getCurrentWindow().id;
exports.IWindowIPCService = instantiation_1.createDecorator('windowIPCService');
/**
 * TODO@Joao: remove this service
 * @deprecated
 */
var WindowIPCService = (function () {
    function WindowIPCService() {
        this._onBroadcast = new event_1.Emitter();
        this.windowId = windowId;
        this.registerListeners();
    }
    WindowIPCService.prototype.registerListeners = function () {
        var _this = this;
        electron_1.ipcRenderer.on('vscode:broadcast', function (event, b) {
            _this._onBroadcast.fire(b);
        });
    };
    Object.defineProperty(WindowIPCService.prototype, "onBroadcast", {
        get: function () {
            return this._onBroadcast.event;
        },
        enumerable: true,
        configurable: true
    });
    WindowIPCService.prototype.getWindowId = function () {
        return this.windowId;
    };
    WindowIPCService.prototype.getWindow = function () {
        return this.win;
    };
    WindowIPCService.prototype.registerWindow = function (win) {
        this.win = win;
    };
    WindowIPCService.prototype.broadcast = function (b, target) {
        electron_1.ipcRenderer.send('vscode:broadcast', this.getWindowId(), target, {
            channel: b.channel,
            payload: b.payload
        });
    };
    return WindowIPCService;
}());
exports.WindowIPCService = WindowIPCService;
