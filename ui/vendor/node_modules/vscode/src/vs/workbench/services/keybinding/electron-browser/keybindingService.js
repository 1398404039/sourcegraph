/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var nls = require("vs/nls");
var platform = require("vs/base/common/platform");
var lifecycle_1 = require("vs/base/common/lifecycle");
var extensionsRegistry_1 = require("vs/platform/extensions/common/extensionsRegistry");
var jsonContributionRegistry_1 = require("vs/platform/jsonschemas/common/jsonContributionRegistry");
var abstractKeybindingService_1 = require("vs/platform/keybinding/common/abstractKeybindingService");
var statusbar_1 = require("vs/platform/statusbar/common/statusbar");
var keybindingResolver_1 = require("vs/platform/keybinding/common/keybindingResolver");
var commands_1 = require("vs/platform/commands/common/commands");
var keybinding_1 = require("vs/platform/keybinding/common/keybinding");
var contextkey_1 = require("vs/platform/contextkey/common/contextkey");
var keybindingsRegistry_1 = require("vs/platform/keybinding/common/keybindingsRegistry");
var platform_1 = require("vs/platform/platform");
var telemetry_1 = require("vs/platform/telemetry/common/telemetry");
var nativeKeymap_1 = require("vs/workbench/services/keybinding/electron-browser/nativeKeymap");
var message_1 = require("vs/platform/message/common/message");
var config_1 = require("vs/base/node/config");
var environment_1 = require("vs/platform/environment/common/environment");
var dom = require("vs/base/browser/dom");
var keyboardEvent_1 = require("vs/base/browser/keyboardEvent");
function isContributedKeyBindingsArray(thing) {
    return Array.isArray(thing);
}
function isValidContributedKeyBinding(keyBinding, rejects) {
    if (!keyBinding) {
        rejects.push(nls.localize('nonempty', "expected non-empty value."));
        return false;
    }
    if (typeof keyBinding.command !== 'string') {
        rejects.push(nls.localize('requirestring', "property `{0}` is mandatory and must be of type `string`", 'command'));
        return false;
    }
    if (typeof keyBinding.key !== 'string') {
        rejects.push(nls.localize('requirestring', "property `{0}` is mandatory and must be of type `string`", 'key'));
        return false;
    }
    if (keyBinding.when && typeof keyBinding.when !== 'string') {
        rejects.push(nls.localize('optstring', "property `{0}` can be omitted or must be of type `string`", 'when'));
        return false;
    }
    if (keyBinding.mac && typeof keyBinding.mac !== 'string') {
        rejects.push(nls.localize('optstring', "property `{0}` can be omitted or must be of type `string`", 'mac'));
        return false;
    }
    if (keyBinding.linux && typeof keyBinding.linux !== 'string') {
        rejects.push(nls.localize('optstring', "property `{0}` can be omitted or must be of type `string`", 'linux'));
        return false;
    }
    if (keyBinding.win && typeof keyBinding.win !== 'string') {
        rejects.push(nls.localize('optstring', "property `{0}` can be omitted or must be of type `string`", 'win'));
        return false;
    }
    return true;
}
var keybindingType = {
    type: 'object',
    default: { command: '', key: '' },
    properties: {
        command: {
            description: nls.localize('vscode.extension.contributes.keybindings.command', 'Identifier of the command to run when keybinding is triggered.'),
            type: 'string'
        },
        key: {
            description: nls.localize('vscode.extension.contributes.keybindings.key', 'Key or key sequence (separate keys with plus-sign and sequences with space, e.g Ctrl+O and Ctrl+L L for a chord'),
            type: 'string'
        },
        mac: {
            description: nls.localize('vscode.extension.contributes.keybindings.mac', 'Mac specific key or key sequence.'),
            type: 'string'
        },
        linux: {
            description: nls.localize('vscode.extension.contributes.keybindings.linux', 'Linux specific key or key sequence.'),
            type: 'string'
        },
        win: {
            description: nls.localize('vscode.extension.contributes.keybindings.win', 'Windows specific key or key sequence.'),
            type: 'string'
        },
        when: {
            description: nls.localize('vscode.extension.contributes.keybindings.when', 'Condition when the key is active.'),
            type: 'string'
        }
    }
};
var WorkbenchKeybindingService = (function (_super) {
    __extends(WorkbenchKeybindingService, _super);
    function WorkbenchKeybindingService(domNode, contextKeyService, commandService, telemetryService, messageService, environmentService, statusBarService) {
        var _this = _super.call(this, contextKeyService, commandService, messageService, statusBarService) || this;
        _this.telemetryService = telemetryService;
        _this.name = 'keybindings';
        _this._cachedResolver = null;
        _this._firstTimeComputingResolver = true;
        _this.userKeybindings = new config_1.ConfigWatcher(environmentService.appKeybindingsPath, { defaultConfig: [] });
        _this.toDispose.push(lifecycle_1.toDisposable(function () { return _this.userKeybindings.dispose(); }));
        _this.registerHandler();
        _this.toDispose.push(_this.userKeybindings.onDidUpdateConfiguration(function (event) { return _this.updateResolver({
            source: keybinding_1.KeybindingSource.User,
            keybindings: event.config
        }); }));
        _this.toDispose.push(dom.addDisposableListener(domNode, dom.EventType.KEY_DOWN, function (e) {
            var keyEvent = new keyboardEvent_1.StandardKeyboardEvent(e);
            var shouldPreventDefault = _this._dispatch(keyEvent.toKeybinding(), keyEvent.target);
            if (shouldPreventDefault) {
                keyEvent.preventDefault();
            }
        }));
        telemetry_1.keybindingsTelemetry(telemetryService, _this);
        return _this;
    }
    WorkbenchKeybindingService.prototype.registerHandler = function () {
        var _this = this;
        var points = extensionsRegistry_1.ExtensionsRegistry.getExtensionPoints();
        if (points.some(function (point) { return point.name === _this.name; })) {
            return;
        }
        var keybindingsExtPoint = extensionsRegistry_1.ExtensionsRegistry.registerExtensionPoint('keybindings', [], {
            description: nls.localize('vscode.extension.contributes.keybindings', "Contributes keybindings."),
            oneOf: [
                keybindingType,
                {
                    type: 'array',
                    items: keybindingType
                }
            ]
        });
        keybindingsExtPoint.setHandler(function (extensions) {
            var commandAdded = false;
            for (var _i = 0, extensions_1 = extensions; _i < extensions_1.length; _i++) {
                var extension = extensions_1[_i];
                commandAdded = _this._handleKeybindingsExtensionPointUser(extension.description.isBuiltin, extension.value, extension.collector) || commandAdded;
            }
            if (commandAdded) {
                _this.updateResolver({ source: keybinding_1.KeybindingSource.Default });
            }
        });
    };
    WorkbenchKeybindingService.prototype._safeGetConfig = function () {
        var rawConfig = this.userKeybindings.getConfig();
        if (Array.isArray(rawConfig)) {
            return rawConfig;
        }
        return [];
    };
    WorkbenchKeybindingService.prototype.customKeybindingsCount = function () {
        var userKeybindings = this._safeGetConfig();
        return userKeybindings.length;
    };
    WorkbenchKeybindingService.prototype.updateResolver = function (event) {
        this._cachedResolver = null;
        this._onDidUpdateKeybindings.fire(event);
    };
    WorkbenchKeybindingService.prototype._getResolver = function () {
        if (!this._cachedResolver) {
            this._cachedResolver = new keybindingResolver_1.KeybindingResolver(keybindingsRegistry_1.KeybindingsRegistry.getDefaultKeybindings(), this._getExtraKeybindings(this._firstTimeComputingResolver));
            this._firstTimeComputingResolver = false;
        }
        return this._cachedResolver;
    };
    WorkbenchKeybindingService.prototype._getExtraKeybindings = function (isFirstTime) {
        var extraUserKeybindings = this._safeGetConfig();
        if (!isFirstTime) {
            var cnt = extraUserKeybindings.length;
            this.telemetryService.publicLog('customKeybindingsChanged', {
                keyCount: cnt
            });
        }
        return extraUserKeybindings.map(function (k, i) { return keybindingResolver_1.IOSupport.readKeybindingItem(k, i); });
    };
    WorkbenchKeybindingService.prototype.getLabelFor = function (keybinding) {
        return keybinding.toCustomLabel(nativeKeymap_1.getNativeLabelProvider());
    };
    WorkbenchKeybindingService.prototype.getHTMLLabelFor = function (keybinding) {
        return keybinding.toCustomHTMLLabel(nativeKeymap_1.getNativeLabelProvider());
    };
    WorkbenchKeybindingService.prototype.getAriaLabelFor = function (keybinding) {
        return keybinding.toCustomLabel(nativeKeymap_1.getNativeAriaLabelProvider());
    };
    WorkbenchKeybindingService.prototype.getElectronAcceleratorFor = function (keybinding) {
        if (platform.isWindows) {
            // electron menus always do the correct rendering on Windows
            return _super.prototype.getElectronAcceleratorFor.call(this, keybinding);
        }
        var usLabel = keybinding._toUSLabel();
        var label = this.getLabelFor(keybinding);
        if (usLabel !== label) {
            // electron menus are incorrect in rendering (linux) and in rendering and interpreting (mac)
            // for non US standard keyboard layouts
            return null;
        }
        return _super.prototype.getElectronAcceleratorFor.call(this, keybinding);
    };
    WorkbenchKeybindingService.prototype._handleKeybindingsExtensionPointUser = function (isBuiltin, keybindings, collector) {
        if (isContributedKeyBindingsArray(keybindings)) {
            var commandAdded = false;
            for (var i = 0, len = keybindings.length; i < len; i++) {
                commandAdded = this._handleKeybinding(isBuiltin, i + 1, keybindings[i], collector) || commandAdded;
            }
            return commandAdded;
        }
        else {
            return this._handleKeybinding(isBuiltin, 1, keybindings, collector);
        }
    };
    WorkbenchKeybindingService.prototype._handleKeybinding = function (isBuiltin, idx, keybindings, collector) {
        var rejects = [];
        var commandAdded = false;
        if (isValidContributedKeyBinding(keybindings, rejects)) {
            var rule = this._asCommandRule(isBuiltin, idx++, keybindings);
            if (rule) {
                keybindingsRegistry_1.KeybindingsRegistry.registerKeybindingRule(rule);
                commandAdded = true;
            }
        }
        if (rejects.length > 0) {
            collector.error(nls.localize('invalid.keybindings', "Invalid `contributes.{0}`: {1}", this.name, rejects.join('\n')));
        }
        return commandAdded;
    };
    WorkbenchKeybindingService.prototype._asCommandRule = function (isBuiltin, idx, binding) {
        var command = binding.command, when = binding.when, key = binding.key, mac = binding.mac, linux = binding.linux, win = binding.win;
        var weight;
        if (isBuiltin) {
            weight = keybindingsRegistry_1.KeybindingsRegistry.WEIGHT.builtinExtension(idx);
        }
        else {
            weight = keybindingsRegistry_1.KeybindingsRegistry.WEIGHT.externalExtension(idx);
        }
        var desc = {
            id: command,
            when: keybindingResolver_1.IOSupport.readKeybindingWhen(when),
            weight: weight,
            primary: keybindingResolver_1.IOSupport.readKeybinding(key),
            mac: mac && { primary: keybindingResolver_1.IOSupport.readKeybinding(mac) },
            linux: linux && { primary: keybindingResolver_1.IOSupport.readKeybinding(linux) },
            win: win && { primary: keybindingResolver_1.IOSupport.readKeybinding(win) }
        };
        if (!desc.primary && !desc.mac && !desc.linux && !desc.win) {
            return;
        }
        return desc;
    };
    return WorkbenchKeybindingService;
}(abstractKeybindingService_1.AbstractKeybindingService));
WorkbenchKeybindingService = __decorate([
    __param(1, contextkey_1.IContextKeyService),
    __param(2, commands_1.ICommandService),
    __param(3, telemetry_1.ITelemetryService),
    __param(4, message_1.IMessageService),
    __param(5, environment_1.IEnvironmentService),
    __param(6, statusbar_1.IStatusbarService)
], WorkbenchKeybindingService);
exports.WorkbenchKeybindingService = WorkbenchKeybindingService;
var schemaId = 'vscode://schemas/keybindings';
var schema = {
    'id': schemaId,
    'type': 'array',
    'title': nls.localize('keybindings.json.title', "Keybindings configuration"),
    'items': {
        'required': ['key'],
        'type': 'object',
        'defaultSnippets': [{ 'body': { 'key': '$1', 'command': '$2', 'when': '$3' } }],
        'properties': {
            'key': {
                'type': 'string',
                'description': nls.localize('keybindings.json.key', "Key or key sequence (separated by space)"),
            },
            'command': {
                'description': nls.localize('keybindings.json.command', "Name of the command to execute"),
            },
            'when': {
                'type': 'string',
                'description': nls.localize('keybindings.json.when', "Condition when the key is active.")
            },
            'args': {
                'description': nls.localize('keybindings.json.args', "Arguments to pass to the command to execute.")
            }
        }
    }
};
var schemaRegistry = platform_1.Registry.as(jsonContributionRegistry_1.Extensions.JSONContribution);
schemaRegistry.registerSchema(schemaId, schema);
