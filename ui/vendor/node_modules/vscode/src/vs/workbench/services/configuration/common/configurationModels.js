/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var model_1 = require("vs/platform/configuration/common/model");
var configuration_1 = require("vs/workbench/services/configuration/common/configuration");
var platform_1 = require("vs/platform/platform");
var configurationRegistry_1 = require("vs/platform/configuration/common/configurationRegistry");
var ScopedConfigModel = (function (_super) {
    __extends(ScopedConfigModel, _super);
    function ScopedConfigModel(content, name, scope) {
        var _this = _super.call(this, null, name) || this;
        _this.scope = scope;
        _this.update(content);
        return _this;
    }
    ScopedConfigModel.prototype.update = function (content) {
        _super.prototype.update.call(this, content);
        var contents = Object.create(null);
        contents[this.scope] = this.contents;
        this._contents = contents;
    };
    return ScopedConfigModel;
}(model_1.ConfigModel));
exports.ScopedConfigModel = ScopedConfigModel;
var WorkspaceSettingsConfigModel = (function (_super) {
    __extends(WorkspaceSettingsConfigModel, _super);
    function WorkspaceSettingsConfigModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WorkspaceSettingsConfigModel.prototype.processRaw = function (raw) {
        this._raw = raw;
        var processedRaw = {};
        this._unsupportedKeys = [];
        var configurationProperties = platform_1.Registry.as(configurationRegistry_1.Extensions.Configuration).getConfigurationProperties();
        for (var key in raw) {
            if (this.isWorkspaceScoped(key, configurationProperties)) {
                processedRaw[key] = raw[key];
            }
            else {
                this._unsupportedKeys.push(key);
            }
        }
        return _super.prototype.processRaw.call(this, processedRaw);
    };
    WorkspaceSettingsConfigModel.prototype.reprocess = function () {
        this.processRaw(this._raw);
    };
    Object.defineProperty(WorkspaceSettingsConfigModel.prototype, "unsupportedKeys", {
        get: function () {
            return this._unsupportedKeys || [];
        },
        enumerable: true,
        configurable: true
    });
    WorkspaceSettingsConfigModel.prototype.isWorkspaceScoped = function (key, configurationProperties) {
        var propertySchema = configurationProperties[key];
        if (!propertySchema) {
            return true; // Unknown propertis are ignored from checks
        }
        return !propertySchema.isExecutable;
    };
    return WorkspaceSettingsConfigModel;
}(model_1.ConfigModel));
exports.WorkspaceSettingsConfigModel = WorkspaceSettingsConfigModel;
var WorkspaceConfigModel = (function (_super) {
    __extends(WorkspaceConfigModel, _super);
    function WorkspaceConfigModel(workspaceSettingsConfig, scopedConfigs) {
        var _this = _super.call(this) || this;
        _this.workspaceSettingsConfig = workspaceSettingsConfig;
        _this.scopedConfigs = scopedConfigs;
        _this.consolidate();
        return _this;
    }
    WorkspaceConfigModel.prototype.consolidate = function () {
        this._contents = {};
        this._overrides = [];
        this.doMerge(this, this.workspaceSettingsConfig);
        for (var _i = 0, _a = this.scopedConfigs; _i < _a.length; _i++) {
            var configModel = _a[_i];
            this.doMerge(this, configModel);
        }
    };
    Object.defineProperty(WorkspaceConfigModel.prototype, "keys", {
        get: function () {
            var keys = this.workspaceSettingsConfig.keys.slice();
            this.scopedConfigs.forEach(function (scopedConfigModel) {
                Object.keys(configuration_1.WORKSPACE_STANDALONE_CONFIGURATIONS).forEach(function (scope) {
                    if (scopedConfigModel.scope === scope) {
                        keys.push.apply(keys, scopedConfigModel.keys.map(function (key) { return scope + "." + key; }));
                    }
                });
            });
            return keys;
        },
        enumerable: true,
        configurable: true
    });
    WorkspaceConfigModel.prototype.update = function () {
        this.workspaceSettingsConfig.reprocess();
        this.consolidate();
    };
    return WorkspaceConfigModel;
}(model_1.ConfigModel));
exports.WorkspaceConfigModel = WorkspaceConfigModel;
