import { TPromise } from 'vs/base/common/winjs.base';
import uri from 'vs/base/common/uri';
import { IFileService, IResolveFileOptions, IFileStat, IContent, IStreamContent, IImportResult, IResolveContentOptions, IUpdateContentOptions } from 'vs/platform/files/common/files';
import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
import { IEventService } from 'vs/platform/event/common/event';
import { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';
import { IWorkbenchEditorService } from 'vs/workbench/services/editor/common/editorService';
import { IMessageService } from 'vs/platform/message/common/message';
import { IEnvironmentService } from 'vs/platform/environment/common/environment';
import { IEditorGroupService } from 'vs/workbench/services/group/common/groupService';
import { ILifecycleService } from 'vs/platform/lifecycle/common/lifecycle';
import { IStorageService } from 'vs/platform/storage/common/storage';
export declare class FileService implements IFileService {
    private configurationService;
    private eventService;
    private contextService;
    private editorService;
    private editorGroupService;
    private lifecycleService;
    private messageService;
    private storageService;
    _serviceBrand: any;
    private static NET_VERSION_ERROR;
    private static NET_VERSION_ERROR_IGNORE_KEY;
    private raw;
    private toUnbind;
    private activeOutOfWorkspaceWatchers;
    constructor(configurationService: IConfigurationService, eventService: IEventService, contextService: IWorkspaceContextService, editorService: IWorkbenchEditorService, environmentService: IEnvironmentService, editorGroupService: IEditorGroupService, lifecycleService: ILifecycleService, messageService: IMessageService, storageService: IStorageService);
    private onFileServiceError(msg);
    private registerListeners();
    private onEditorsChanged();
    private handleOutOfWorkspaceWatchers();
    private onConfigurationChange(configuration);
    updateOptions(options: any): void;
    resolveFile(resource: uri, options?: IResolveFileOptions): TPromise<IFileStat>;
    existsFile(resource: uri): TPromise<boolean>;
    resolveContent(resource: uri, options?: IResolveContentOptions): TPromise<IContent>;
    resolveStreamContent(resource: uri, options?: IResolveContentOptions): TPromise<IStreamContent>;
    resolveContents(resources: uri[]): TPromise<IContent[]>;
    updateContent(resource: uri, value: string, options?: IUpdateContentOptions): TPromise<IFileStat>;
    moveFile(source: uri, target: uri, overwrite?: boolean): TPromise<IFileStat>;
    copyFile(source: uri, target: uri, overwrite?: boolean): TPromise<IFileStat>;
    createFile(resource: uri, content?: string): TPromise<IFileStat>;
    createFolder(resource: uri): TPromise<IFileStat>;
    touchFile(resource: uri): TPromise<IFileStat>;
    rename(resource: uri, newName: string): TPromise<IFileStat>;
    del(resource: uri, useTrash?: boolean): TPromise<void>;
    private doMoveItemToTrash(resource);
    importFile(source: uri, targetFolder: uri): TPromise<IImportResult>;
    watchFileChanges(resource: uri): void;
    unwatchFileChanges(resource: uri): void;
    unwatchFileChanges(path: string): void;
    getEncoding(resource: uri): string;
    dispose(): void;
}
