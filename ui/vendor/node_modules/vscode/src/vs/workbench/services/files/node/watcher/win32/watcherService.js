/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var common_1 = require("vs/workbench/services/files/node/watcher/common");
var csharpWatcherService_1 = require("vs/workbench/services/files/node/watcher/win32/csharpWatcherService");
var FileWatcher = (function () {
    function FileWatcher(basePath, ignored, onFileChanges, errorLogger, verboseLogging) {
        this.basePath = basePath;
        this.ignored = ignored;
        this.onFileChanges = onFileChanges;
        this.errorLogger = errorLogger;
        this.verboseLogging = verboseLogging;
    }
    FileWatcher.prototype.startWatching = function () {
        var _this = this;
        var watcher = new csharpWatcherService_1.OutOfProcessWin32FolderWatcher(this.basePath, this.ignored, function (events) { return _this.onRawFileEvents(events); }, function (error) { return _this.onError(error); }, this.verboseLogging);
        return function () { return watcher.dispose(); };
    };
    FileWatcher.prototype.onRawFileEvents = function (events) {
        // Emit through broadcast service
        if (events.length > 0) {
            this.onFileChanges(common_1.toFileChangesEvent(events));
        }
    };
    FileWatcher.prototype.onError = function (error) {
        this.errorLogger(error);
    };
    return FileWatcher;
}());
exports.FileWatcher = FileWatcher;
