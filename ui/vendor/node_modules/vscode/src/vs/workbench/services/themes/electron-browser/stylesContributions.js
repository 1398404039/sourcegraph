/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var color_1 = require("vs/base/common/color");
var themes_1 = require("vs/platform/theme/common/themes");
var Theme = (function () {
    function Theme(themeId, themeDocument) {
        this.themeId = themeId;
        this.globalSettings = null;
        this.selector = themes_1.getBaseThemeId(themeId) + "." + themes_1.getSyntaxThemeId(themeId);
        this.settings = themeDocument.settings;
        var settings = this.settings[0];
        if (!settings.scope) {
            this.globalSettings = settings.settings;
        }
    }
    Theme.prototype.getSelector = function () {
        return this.selector;
    };
    Theme.prototype.hasGlobalSettings = function () {
        return !!this.globalSettings;
    };
    Theme.prototype.getGlobalSettings = function () {
        return this.globalSettings;
    };
    Theme.prototype.getSettings = function () {
        return this.settings;
    };
    return Theme;
}());
var StyleRules = (function () {
    function StyleRules() {
    }
    return StyleRules;
}());
var TokenStylesContribution = (function () {
    function TokenStylesContribution() {
    }
    TokenStylesContribution.prototype.contributeStyles = function (themeId, themeDocument, cssRules) {
        var _this = this;
        var theme = new Theme(themeId, themeDocument);
        theme.getSettings().forEach(function (s, index, arr) {
            // @martin TS(2.0.2) - s.scope is already a string[] so no need for all this checking.
            // However will add a cast at split to keep semantic in case s.scope is wrongly typed.
            var scope = s.scope;
            var settings = s.settings;
            if (scope && settings) {
                var rules = Array.isArray(scope) ? scope : scope.split(',');
                var statements_1 = _this._settingsToStatements(settings);
                rules.forEach(function (rule) {
                    rule = rule.trim().replace(/ /g, '.'); // until we have scope hierarchy in the editor dom: replace spaces with .
                    cssRules.push(".monaco-editor." + theme.getSelector() + " .token." + rule + " { " + statements_1 + " }");
                });
            }
        });
    };
    TokenStylesContribution.prototype._settingsToStatements = function (settings) {
        var statements = [];
        for (var settingName in settings) {
            var value = settings[settingName];
            switch (settingName) {
                case 'foreground':
                    var foreground = new color_1.Color(value);
                    statements.push("color: " + foreground + ";");
                    break;
                case 'background':
                    // do not support background color for now, see bug 18924
                    //let background = new Color(value);
                    //statements.push(`background-color: ${background};`);
                    break;
                case 'fontStyle':
                    var segments = value.split(' ');
                    segments.forEach(function (s) {
                        switch (s) {
                            case 'italic':
                                statements.push("font-style: italic;");
                                break;
                            case 'bold':
                                statements.push("font-weight: bold;");
                                break;
                            case 'underline':
                                statements.push("text-decoration: underline;");
                                break;
                        }
                    });
            }
        }
        return statements.join(' ');
    };
    return TokenStylesContribution;
}());
exports.TokenStylesContribution = TokenStylesContribution;
var EditorStylesContribution = (function () {
    function EditorStylesContribution() {
    }
    EditorStylesContribution.prototype.contributeStyles = function (themeId, themeDocument, cssRules) {
        var editorStyleRules = [
            new EditorBackgroundStyleRules(),
            new EditorForegroundStyleRules(),
            new EditorCursorStyleRules(),
            new EditorWhiteSpaceStyleRules(),
            new EditorIndentGuidesStyleRules(),
            new EditorLineHighlightStyleRules(),
            new EditorSelectionStyleRules(),
            new EditorWordHighlightStyleRules(),
            new EditorFindStyleRules(),
            new EditorReferenceSearchStyleRules(),
            new EditorHoverHighlightStyleRules(),
            new EditorLinkStyleRules()
        ];
        var theme = new Theme(themeId, themeDocument);
        if (theme.hasGlobalSettings()) {
            editorStyleRules.forEach((function (editorStyleRule) {
                editorStyleRule.getCssRules(theme, cssRules);
            }));
        }
    };
    return EditorStylesContribution;
}());
exports.EditorStylesContribution = EditorStylesContribution;
var SearchViewStylesContribution = (function () {
    function SearchViewStylesContribution() {
    }
    SearchViewStylesContribution.prototype.contributeStyles = function (themeId, themeDocument, cssRules) {
        var theme = new Theme(themeId, themeDocument);
        if (theme.hasGlobalSettings()) {
            if (theme.getGlobalSettings().findMatchHighlight) {
                var color = new color_1.Color(theme.getGlobalSettings().findMatchHighlight);
                cssRules.push("." + theme.getSelector() + " .search-viewlet .findInFileMatch { background-color: " + color + "; }");
                cssRules.push("." + theme.getSelector() + " .search-viewlet .highlight { background-color: " + color + "; }");
            }
        }
    };
    return SearchViewStylesContribution;
}());
exports.SearchViewStylesContribution = SearchViewStylesContribution;
var TerminalStylesContribution = (function () {
    function TerminalStylesContribution() {
    }
    /**
     * Converts a CSS hex color (#rrggbb) to a CSS rgba color (rgba(r, g, b, a)).
     */
    TerminalStylesContribution.prototype._convertHexCssColorToRgba = function (hex, alpha) {
        var r = parseInt(hex.substr(1, 2), 16);
        var g = parseInt(hex.substr(3, 2), 16);
        var b = parseInt(hex.substr(5, 2), 16);
        return "rgba(" + r + ", " + g + ", " + b + ", " + alpha + ")";
    };
    TerminalStylesContribution.prototype.contributeStyles = function (themeId, themeDocument, cssRules) {
        var _this = this;
        var theme = new Theme(themeId, themeDocument);
        if (theme.hasGlobalSettings()) {
            var keys = Object.keys(theme.getGlobalSettings());
            keys.filter(function (key) { return key.indexOf('ansi') === 0; }).forEach(function (key) {
                if (key in TerminalStylesContribution.ansiColorMap) {
                    var color = theme.getGlobalSettings()[key];
                    var index = TerminalStylesContribution.ansiColorMap[key];
                    var rgba = _this._convertHexCssColorToRgba(color, 0.996);
                    cssRules.push("." + theme.getSelector() + " .panel.integrated-terminal .xterm .xterm-color-" + index + " { color: " + color + "; }");
                    cssRules.push("." + theme.getSelector() + " .panel.integrated-terminal .xterm .xterm-color-" + index + "::selection { background-color: " + rgba + "; }");
                    cssRules.push("." + theme.getSelector() + " .panel.integrated-terminal .xterm .xterm-bg-color-" + index + " { background-color: " + color + "; }");
                    cssRules.push("." + theme.getSelector() + " .panel.integrated-terminal .xterm .xterm-bg-color-" + index + "::selection { color: " + color + "; }");
                }
            });
        }
    };
    return TerminalStylesContribution;
}());
TerminalStylesContribution.ansiColorMap = {
    ansiBlack: 0,
    ansiRed: 1,
    ansiGreen: 2,
    ansiYellow: 3,
    ansiBlue: 4,
    ansiMagenta: 5,
    ansiCyan: 6,
    ansiWhite: 7,
    ansiBrightBlack: 8,
    ansiBrightRed: 9,
    ansiBrightGreen: 10,
    ansiBrightYellow: 11,
    ansiBrightBlue: 12,
    ansiBrightMagenta: 13,
    ansiBrightCyan: 14,
    ansiBrightWhite: 15
};
exports.TerminalStylesContribution = TerminalStylesContribution;
var EditorStyleRules = (function (_super) {
    __extends(EditorStyleRules, _super);
    function EditorStyleRules() {
        return _super.apply(this, arguments) || this;
    }
    EditorStyleRules.prototype.addBackgroundColorRule = function (theme, selector, color, rules) {
        if (color) {
            color = color instanceof color_1.Color ? color : new color_1.Color(color);
            rules.push(".monaco-editor." + theme.getSelector() + " " + selector + " { background-color: " + color + "; }");
        }
    };
    return EditorStyleRules;
}(StyleRules));
var EditorBackgroundStyleRules = (function (_super) {
    __extends(EditorBackgroundStyleRules, _super);
    function EditorBackgroundStyleRules() {
        return _super.apply(this, arguments) || this;
    }
    EditorBackgroundStyleRules.prototype.getCssRules = function (theme, cssRules) {
        var themeSelector = theme.getSelector();
        if (theme.getGlobalSettings().background) {
            var background = new color_1.Color(theme.getGlobalSettings().background);
            this.addBackgroundColorRule(theme, '.monaco-editor-background', background, cssRules);
            this.addBackgroundColorRule(theme, '.glyph-margin', background, cssRules);
            cssRules.push("." + themeSelector + " .monaco-workbench .monaco-editor-background { background-color: " + background + "; }");
        }
    };
    return EditorBackgroundStyleRules;
}(EditorStyleRules));
var EditorForegroundStyleRules = (function (_super) {
    __extends(EditorForegroundStyleRules, _super);
    function EditorForegroundStyleRules() {
        return _super.apply(this, arguments) || this;
    }
    EditorForegroundStyleRules.prototype.getCssRules = function (theme, cssRules) {
        var themeSelector = theme.getSelector();
        if (theme.getGlobalSettings().foreground) {
            var foreground = new color_1.Color(theme.getGlobalSettings().foreground);
            cssRules.push(".monaco-editor." + themeSelector + " .token { color: " + foreground + "; }");
        }
    };
    return EditorForegroundStyleRules;
}(EditorStyleRules));
var EditorHoverHighlightStyleRules = (function (_super) {
    __extends(EditorHoverHighlightStyleRules, _super);
    function EditorHoverHighlightStyleRules() {
        return _super.apply(this, arguments) || this;
    }
    EditorHoverHighlightStyleRules.prototype.getCssRules = function (theme, cssRules) {
        this.addBackgroundColorRule(theme, '.hoverHighlight', theme.getGlobalSettings().hoverHighlight, cssRules);
    };
    return EditorHoverHighlightStyleRules;
}(EditorStyleRules));
var EditorLinkStyleRules = (function (_super) {
    __extends(EditorLinkStyleRules, _super);
    function EditorLinkStyleRules() {
        return _super.apply(this, arguments) || this;
    }
    EditorLinkStyleRules.prototype.getCssRules = function (theme, cssRules) {
        if (theme.getGlobalSettings().activeLinkForeground) {
            cssRules.push(".monaco-editor." + theme.getSelector() + " .detected-link-active { color: " + new color_1.Color(theme.getGlobalSettings().activeLinkForeground) + " !important; }");
            cssRules.push(".monaco-editor." + theme.getSelector() + " .goto-definition-link { color: " + new color_1.Color(theme.getGlobalSettings().activeLinkForeground) + " !important; }");
        }
    };
    return EditorLinkStyleRules;
}(EditorStyleRules));
var EditorSelectionStyleRules = (function (_super) {
    __extends(EditorSelectionStyleRules, _super);
    function EditorSelectionStyleRules() {
        return _super.apply(this, arguments) || this;
    }
    EditorSelectionStyleRules.prototype.getCssRules = function (theme, cssRules) {
        if (theme.getGlobalSettings().selection) {
            this.addBackgroundColorRule(theme, '.focused .selected-text', theme.getGlobalSettings().selection, cssRules);
        }
        if (theme.getGlobalSettings().inactiveSelection) {
            this.addBackgroundColorRule(theme, '.selected-text', theme.getGlobalSettings().inactiveSelection, cssRules);
        }
        else if (theme.getGlobalSettings().selection) {
            var selection = new color_1.Color(theme.getGlobalSettings().selection);
            this.addBackgroundColorRule(theme, '.selected-text', selection.transparent(0.5), cssRules);
        }
        var selectionHighlightColor = this.getSelectionHighlightColor(theme);
        if (selectionHighlightColor) {
            this.addBackgroundColorRule(theme, '.focused .selectionHighlight', selectionHighlightColor, cssRules);
            this.addBackgroundColorRule(theme, '.selectionHighlight', selectionHighlightColor.transparent(0.5), cssRules);
        }
    };
    EditorSelectionStyleRules.prototype.getSelectionHighlightColor = function (theme) {
        if (theme.getGlobalSettings().selectionHighlight) {
            return new color_1.Color(theme.getGlobalSettings().selectionHighlight);
        }
        if (theme.getGlobalSettings().selection && theme.getGlobalSettings().background) {
            var selection = new color_1.Color(theme.getGlobalSettings().selection);
            var background = new color_1.Color(theme.getGlobalSettings().background);
            return deriveLessProminentColor(selection, background);
        }
        return null;
    };
    return EditorSelectionStyleRules;
}(EditorStyleRules));
var EditorWordHighlightStyleRules = (function (_super) {
    __extends(EditorWordHighlightStyleRules, _super);
    function EditorWordHighlightStyleRules() {
        return _super.apply(this, arguments) || this;
    }
    EditorWordHighlightStyleRules.prototype.getCssRules = function (theme, cssRules) {
        this.addBackgroundColorRule(theme, '.wordHighlight', theme.getGlobalSettings().wordHighlight, cssRules);
        this.addBackgroundColorRule(theme, '.wordHighlightStrong', theme.getGlobalSettings().wordHighlightStrong, cssRules);
    };
    return EditorWordHighlightStyleRules;
}(EditorStyleRules));
var EditorFindStyleRules = (function (_super) {
    __extends(EditorFindStyleRules, _super);
    function EditorFindStyleRules() {
        return _super.apply(this, arguments) || this;
    }
    EditorFindStyleRules.prototype.getCssRules = function (theme, cssRules) {
        this.addBackgroundColorRule(theme, '.findMatch', theme.getGlobalSettings().findMatchHighlight, cssRules);
        this.addBackgroundColorRule(theme, '.currentFindMatch', theme.getGlobalSettings().currentFindMatchHighlight, cssRules);
        this.addBackgroundColorRule(theme, '.findScope', theme.getGlobalSettings().findRangeHighlight, cssRules);
    };
    return EditorFindStyleRules;
}(EditorStyleRules));
var EditorReferenceSearchStyleRules = (function (_super) {
    __extends(EditorReferenceSearchStyleRules, _super);
    function EditorReferenceSearchStyleRules() {
        return _super.apply(this, arguments) || this;
    }
    EditorReferenceSearchStyleRules.prototype.getCssRules = function (theme, cssRules) {
        this.addBackgroundColorRule(theme, '.reference-zone-widget .ref-tree .referenceMatch', theme.getGlobalSettings().findMatchHighlight, cssRules);
        this.addBackgroundColorRule(theme, '.reference-zone-widget .preview .reference-decoration', theme.getGlobalSettings().referenceHighlight, cssRules);
    };
    return EditorReferenceSearchStyleRules;
}(EditorStyleRules));
var EditorLineHighlightStyleRules = (function (_super) {
    __extends(EditorLineHighlightStyleRules, _super);
    function EditorLineHighlightStyleRules() {
        return _super.apply(this, arguments) || this;
    }
    EditorLineHighlightStyleRules.prototype.getCssRules = function (theme, cssRules) {
        if (theme.getGlobalSettings().lineHighlight) {
            cssRules.push(".monaco-editor." + theme.getSelector() + " .current-line { background-color: " + new color_1.Color(theme.getGlobalSettings().lineHighlight) + "; border: none; }");
        }
        this.addBackgroundColorRule(theme, '.rangeHighlight', theme.getGlobalSettings().rangeHighlight, cssRules);
    };
    return EditorLineHighlightStyleRules;
}(EditorStyleRules));
var EditorCursorStyleRules = (function (_super) {
    __extends(EditorCursorStyleRules, _super);
    function EditorCursorStyleRules() {
        return _super.apply(this, arguments) || this;
    }
    EditorCursorStyleRules.prototype.getCssRules = function (theme, cssRules) {
        var themeSelector = theme.getSelector();
        if (theme.getGlobalSettings().caret) {
            var caret = new color_1.Color(theme.getGlobalSettings().caret);
            var oppositeCaret = caret.opposite();
            cssRules.push(".monaco-editor." + themeSelector + " .cursor { background-color: " + caret + "; border-color: " + caret + "; color: " + oppositeCaret + "; }");
        }
    };
    return EditorCursorStyleRules;
}(EditorStyleRules));
var EditorWhiteSpaceStyleRules = (function (_super) {
    __extends(EditorWhiteSpaceStyleRules, _super);
    function EditorWhiteSpaceStyleRules() {
        return _super.apply(this, arguments) || this;
    }
    EditorWhiteSpaceStyleRules.prototype.getCssRules = function (theme, cssRules) {
        var themeSelector = theme.getSelector();
        if (theme.getGlobalSettings().invisibles) {
            var invisibles = new color_1.Color(theme.getGlobalSettings().invisibles);
            cssRules.push(".monaco-editor." + themeSelector + " .token.vs-whitespace { color: " + invisibles + " !important; }");
        }
    };
    return EditorWhiteSpaceStyleRules;
}(EditorStyleRules));
var EditorIndentGuidesStyleRules = (function (_super) {
    __extends(EditorIndentGuidesStyleRules, _super);
    function EditorIndentGuidesStyleRules() {
        return _super.apply(this, arguments) || this;
    }
    EditorIndentGuidesStyleRules.prototype.getCssRules = function (theme, cssRules) {
        var themeSelector = theme.getSelector();
        var color = this.getColor(theme.getGlobalSettings());
        if (color !== null) {
            cssRules.push(".monaco-editor." + themeSelector + " .lines-content .cigr { background: " + color + "; }");
        }
    };
    EditorIndentGuidesStyleRules.prototype.getColor = function (theme) {
        if (theme.guide) {
            return new color_1.Color(theme.guide);
        }
        if (theme.invisibles) {
            return new color_1.Color(theme.invisibles);
        }
        return null;
    };
    return EditorIndentGuidesStyleRules;
}(EditorStyleRules));
function deriveLessProminentColor(from, backgroundColor) {
    var contrast = from.getContrast(backgroundColor);
    if (contrast < 1.7 || contrast > 4.5) {
        return null;
    }
    if (from.isDarkerThan(backgroundColor)) {
        return color_1.Color.getLighterColor(from, backgroundColor, 0.4);
    }
    return color_1.Color.getDarkerColor(from, backgroundColor, 0.4);
}
