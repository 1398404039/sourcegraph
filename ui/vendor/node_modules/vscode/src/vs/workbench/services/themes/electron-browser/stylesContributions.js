/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
var nls = require("vs/nls");
var color_1 = require("vs/base/common/color");
var themingRegistry_1 = require("vs/platform/theme/common/themingRegistry");
var platform_1 = require("vs/platform/platform");
var themingRegistry = platform_1.Registry.as(themingRegistry_1.Extensions.ThemingContribution);
var settingToColorIdMapping = {};
function addSettingMapping(settingId, colorId) {
    var colorIds = settingToColorIdMapping[settingId];
    if (!colorIds) {
        settingToColorIdMapping[settingId] = colorIds = [];
    }
    colorIds.push(colorId);
}
function convertSettings(oldSettings, resultRules, resultColors) {
    for (var _i = 0, oldSettings_1 = oldSettings; _i < oldSettings_1.length; _i++) {
        var rule = oldSettings_1[_i];
        resultRules.push(rule);
        if (!rule.scope) {
            var settings = rule.settings;
            for (var key in settings) {
                var mappings = settingToColorIdMapping[key];
                if (mappings) {
                    var color = color_1.Color.fromHex(settings[key]);
                    for (var _a = 0, mappings_1 = mappings; _a < mappings_1.length; _a++) {
                        var colorId = mappings_1[_a];
                        resultColors[colorId] = color;
                    }
                }
                if (key !== 'foreground' && key !== 'background') {
                    delete settings[key];
                }
            }
        }
    }
}
exports.convertSettings = convertSettings;
var ansiColorMap = {
    ansiBlack: 0,
    ansiRed: 1,
    ansiGreen: 2,
    ansiYellow: 3,
    ansiBlue: 4,
    ansiMagenta: 5,
    ansiCyan: 6,
    ansiWhite: 7,
    ansiBrightBlack: 8,
    ansiBrightRed: 9,
    ansiBrightGreen: 10,
    ansiBrightYellow: 11,
    ansiBrightBlue: 12,
    ansiBrightMagenta: 13,
    ansiBrightCyan: 14,
    ansiBrightWhite: 15
};
var keyPrefix = 'terminal';
for (var key in ansiColorMap) {
    var id = keyPrefix + key[0].toUpperCase() + key.substr(1);
    themingRegistry.registerColor(id, nls.localize('terminal.ansiColor', 'Color for terminal {0} color', key));
    addSettingMapping(key, id);
}
var editorBackground = 'editorBackground';
themingRegistry.registerColor(editorBackground, nls.localize('background', 'Editor background color'));
addSettingMapping('background', editorBackground);
var editorHoverHighlight = 'editorHoverHighlight';
themingRegistry.registerColor(editorHoverHighlight, nls.localize('hoverHighlight', 'Background color of the editor hover'));
addSettingMapping('hoverHighlight', editorHoverHighlight);
var editorActiveLinkForeground = 'editorActiveLinkForeground';
themingRegistry.registerColor(editorActiveLinkForeground, nls.localize('activeLinkForeground', 'Color of active links'));
addSettingMapping('hoverHighlight', editorHoverHighlight);
var editorLinkForeground = 'editorLinkForeground';
themingRegistry.registerColor(editorLinkForeground, nls.localize('linkForeground', 'Color of links'));
addSettingMapping('linkForeground', editorLinkForeground);
var editorSelection = 'editorSelection';
themingRegistry.registerColor(editorSelection, nls.localize('selection', 'Color of the editor selection'));
addSettingMapping('selection', editorSelection);
var editorInactiveSelection = 'editorInactiveSelection';
themingRegistry.registerColor(editorInactiveSelection, nls.localize('inactiveSelection', 'Color of the inactive editor selection'));
addSettingMapping('inactiveSelection', editorInactiveSelection);
var editorSelectionHighlightColor = 'editorSelectionHighlightColor';
themingRegistry.registerColor(editorSelectionHighlightColor, nls.localize('selectionHighlightColor', 'Background color of regions highlighted while selecting'));
addSettingMapping('selectionHighlightColor', editorSelectionHighlightColor);
var editorWordHighlight = 'editorWordHighlight';
themingRegistry.registerColor(editorWordHighlight, nls.localize('wordHighlight', 'Background color of a symbol during read-access, like reading a variable'));
addSettingMapping('wordHighlight', editorWordHighlight);
var editorWordHighlightString = 'editorWordHighlightStrong';
themingRegistry.registerColor(editorWordHighlightString, nls.localize('wordHighlightStrong', 'Background color of a symbol during write-access, like writing to a variable'));
addSettingMapping('wordHighlightStrong', editorWordHighlightString);
var editorFindMatchHighlight = 'editorFindMatchHighlight';
themingRegistry.registerColor(editorFindMatchHighlight, nls.localize('findMatchHighlight', 'Background color of regions matching the search'));
addSettingMapping('findMatchHighlight', editorFindMatchHighlight);
var editorCurrentFindMatchHighlight = 'editorCurrentFindMatchHighlight';
themingRegistry.registerColor(editorCurrentFindMatchHighlight, nls.localize('currentFindMatchHighlight', 'Background color of the current region matching the search'));
addSettingMapping('currentFindMatchHighlight', editorCurrentFindMatchHighlight);
var editorFindRangeHighlight = 'editorFindRangeHighlight';
themingRegistry.registerColor(editorFindRangeHighlight, nls.localize('findRangeHighlight', 'Background color of regions selected for search'));
addSettingMapping('findRangeHighlight', editorFindRangeHighlight);
var referencesFindMatchHighlight = 'referencesFindMatchHighlight';
themingRegistry.registerColor(referencesFindMatchHighlight, nls.localize('referencesFindMatchHighlight', 'References view match highlight color'));
addSettingMapping('findMatchHighlight', referencesFindMatchHighlight);
var referencesReferenceHighlight = 'referencesReferenceHighlight';
themingRegistry.registerColor(referencesReferenceHighlight, nls.localize('referencesReferenceHighlight', 'References range highlight color'));
addSettingMapping('referenceHighlight', referencesReferenceHighlight);
var editorLineHighlight = 'editorLineHighlight';
themingRegistry.registerColor(editorLineHighlight, nls.localize('lineHighlight', 'Editor line highlight color'));
addSettingMapping('lineHighlight', editorLineHighlight);
var editorRangeHighlight = 'editorRangeHighlight';
themingRegistry.registerColor(editorRangeHighlight, nls.localize('rangeHighlight', 'Background color of range highlighted, like by Quick open and Find features'));
addSettingMapping('rangeHighlight', editorRangeHighlight);
var editorCursor = 'editorCursor';
themingRegistry.registerColor(editorCursor, nls.localize('caret', 'Editor cursor color'));
addSettingMapping('caret', editorCursor);
var editorInvisibles = 'editorInvisibles';
themingRegistry.registerColor(editorInvisibles, nls.localize('invisibles', 'Editor invisibles color'));
addSettingMapping('invisibles', editorInvisibles);
var editorGuide = 'editorGuide';
themingRegistry.registerColor(editorGuide, nls.localize('guide', 'Editor guide color'));
addSettingMapping('guide', editorGuide);
function addBackgroundColorRule(theme, selector, color, rules) {
    if (color) {
        rules.push(".monaco-editor." + theme.selector + " " + selector + " { background-color: " + color + "; }");
    }
}
function getSelectionHighlightColor(theme) {
    var selectionHighlight = theme.getColor(editorSelectionHighlightColor);
    if (selectionHighlight) {
        return selectionHighlight;
    }
    var selection = theme.getColor(editorSelection);
    var background = theme.getColor(editorBackground);
    if (selection && background) {
        return deriveLessProminentColor(selection, background);
    }
    return null;
}
function registerParticipants(service) {
    // search viewlet
    service.registerThemingParticipant(function (theme, cssRules) {
        var matchHighlightColor = theme.getColor(editorFindMatchHighlight);
        if (matchHighlightColor) {
            cssRules.push("." + theme.selector + " .search-viewlet .findInFileMatch { background-color: " + matchHighlightColor + "; }");
            cssRules.push("." + theme.selector + " .search-viewlet .highlight { background-color: " + matchHighlightColor + "; }");
        }
    });
    service.registerThemingParticipant(function (theme, cssRules) {
        for (var key in ansiColorMap) {
            var color = theme.getColor(keyPrefix + key);
            if (color) {
                var index = ansiColorMap[key];
                var rgba = color.transparent(0.996);
                cssRules.push("." + theme.selector + " .panel.integrated-terminal .xterm .xterm-color-" + index + " { color: " + color + "; }");
                cssRules.push("." + theme.selector + " .panel.integrated-terminal .xterm .xterm-color-" + index + "::selection { background-color: " + rgba + "; }");
                cssRules.push("." + theme.selector + " .panel.integrated-terminal .xterm .xterm-bg-color-" + index + " { background-color: " + color + "; }");
                cssRules.push("." + theme.selector + " .panel.integrated-terminal .xterm .xterm-bg-color-" + index + "::selection { color: " + color + "; }");
            }
            ;
        }
    });
    service.registerThemingParticipant(function (theme, cssRules) {
        var background = theme.getColor(editorBackground);
        if (background) {
            addBackgroundColorRule(theme, '.monaco-editor-background', background, cssRules);
            addBackgroundColorRule(theme, '.glyph-margin', background, cssRules);
            cssRules.push("." + theme.selector + " .monaco-workbench .monaco-editor-background { background-color: " + background + "; }");
        }
    });
    service.registerThemingParticipant(function (theme, cssRules) {
        addBackgroundColorRule(theme, '.hoverHighlight', theme.getColor(editorHoverHighlight), cssRules);
    });
    service.registerThemingParticipant(function (theme, cssRules) {
        var activeLinkForeground = theme.getColor(editorActiveLinkForeground);
        if (activeLinkForeground) {
            cssRules.push(".monaco-editor." + theme.selector + " .detected-link-active { color: " + activeLinkForeground + " !important; }");
            cssRules.push(".monaco-editor." + theme.selector + " .goto-definition-link { color: " + activeLinkForeground + " !important; }");
        }
        var linkForeground = theme.getColor(editorLinkForeground);
        if (linkForeground) {
            cssRules.push(".monaco-editor." + theme.selector + " .detected-link { color: " + linkForeground + " !important; }");
        }
    });
    service.registerThemingParticipant(function (theme, cssRules) {
        var selection = theme.getColor(editorSelection);
        if (selection) {
            addBackgroundColorRule(theme, '.focused .selected-text', selection, cssRules);
        }
        var inactiveSelection = theme.getColor(editorInactiveSelection);
        if (inactiveSelection) {
            addBackgroundColorRule(theme, '.selected-text', inactiveSelection, cssRules);
        }
        else if (selection) {
            addBackgroundColorRule(theme, '.selected-text', selection.transparent(0.5), cssRules);
        }
        var selectionHighlightColor = getSelectionHighlightColor(theme);
        if (selectionHighlightColor) {
            addBackgroundColorRule(theme, '.focused .selectionHighlight', selectionHighlightColor, cssRules);
            addBackgroundColorRule(theme, '.selectionHighlight', selectionHighlightColor.transparent(0.5), cssRules);
        }
    });
    service.registerThemingParticipant(function (theme, cssRules) {
        addBackgroundColorRule(theme, '.wordHighlight', theme.getColor(editorWordHighlight), cssRules);
        addBackgroundColorRule(theme, '.wordHighlightStrong', theme.getColor(editorWordHighlightString), cssRules);
    });
    service.registerThemingParticipant(function (theme, cssRules) {
        addBackgroundColorRule(theme, '.findMatch', theme.getColor(editorFindMatchHighlight), cssRules);
        addBackgroundColorRule(theme, '.currentFindMatch', theme.getColor(editorCurrentFindMatchHighlight), cssRules);
        addBackgroundColorRule(theme, '.findScope', theme.getColor(editorFindRangeHighlight), cssRules);
    });
    service.registerThemingParticipant(function (theme, cssRules) {
        addBackgroundColorRule(theme, '.reference-zone-widget .ref-tree .referenceMatch', theme.getColor(referencesFindMatchHighlight), cssRules);
        addBackgroundColorRule(theme, '.reference-zone-widget .preview .reference-decoration', theme.getColor(referencesReferenceHighlight), cssRules);
    });
    service.registerThemingParticipant(function (theme, cssRules) {
        var lineHighlight = theme.getColor(editorLineHighlight);
        if (lineHighlight) {
            cssRules.push(".monaco-editor." + theme.selector + " .view-overlays .current-line { background-color: " + lineHighlight + "; border: none; }");
            cssRules.push(".monaco-editor." + theme.selector + " .margin-view-overlays .current-line-margin { background-color: " + lineHighlight + "; border: none; }");
        }
        addBackgroundColorRule(theme, '.rangeHighlight', theme.getColor(editorRangeHighlight), cssRules);
    });
    service.registerThemingParticipant(function (theme, cssRules) {
        var caret = theme.getColor(editorCursor);
        if (caret) {
            var oppositeCaret = caret.opposite();
            cssRules.push(".monaco-editor." + theme.selector + " .cursor { background-color: " + caret + "; border-color: " + caret + "; color: " + oppositeCaret + "; }");
        }
    });
    service.registerThemingParticipant(function (theme, cssRules) {
        var invisibles = theme.getColor(editorInvisibles);
        if (invisibles) {
            cssRules.push(".vs-whitespace { color: " + invisibles + " !important; }");
        }
    });
    service.registerThemingParticipant(function (theme, cssRules) {
        var color = theme.getColor(editorGuide);
        if (!color) {
            color = theme.getColor(editorInvisibles);
        }
        if (color !== null) {
            cssRules.push(".monaco-editor." + theme.selector + " .lines-content .cigr { background: " + color + "; }");
        }
    });
}
exports.registerParticipants = registerParticipants;
function deriveLessProminentColor(from, backgroundColor) {
    var contrast = from.getContrast(backgroundColor);
    if (contrast < 1.7 || contrast > 4.5) {
        return null;
    }
    if (from.isDarkerThan(backgroundColor)) {
        return color_1.Color.getLighterColor(from, backgroundColor, 0.4);
    }
    return color_1.Color.getDarkerColor(from, backgroundColor, 0.4);
}
