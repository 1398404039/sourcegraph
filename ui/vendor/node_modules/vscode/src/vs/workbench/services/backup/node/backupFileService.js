/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var path = require("path");
var crypto = require("crypto");
var pfs = require("vs/base/node/pfs");
var platform = require("vs/base/common/platform");
var uri_1 = require("vs/base/common/uri");
var async_1 = require("vs/base/common/async");
var backup_1 = require("vs/workbench/services/backup/common/backup");
var backup_2 = require("vs/platform/backup/common/backup");
var environment_1 = require("vs/platform/environment/common/environment");
var files_1 = require("vs/platform/files/common/files");
var winjs_base_1 = require("vs/base/common/winjs.base");
var stream_1 = require("vs/base/node/stream");
var windows_1 = require("vs/platform/windows/common/windows");
var textSource_1 = require("vs/editor/common/model/textSource");
var editorCommon_1 = require("vs/editor/common/editorCommon");
var BackupFilesModel = (function () {
    function BackupFilesModel() {
        this.cache = Object.create(null);
    }
    BackupFilesModel.prototype.resolve = function (backupRoot) {
        var _this = this;
        return pfs.readDirsInDir(backupRoot).then(function (backupSchemas) {
            // For all supported schemas
            return winjs_base_1.TPromise.join(backupSchemas.map(function (backupSchema) {
                // Read backup directory for backups
                var backupSchemaPath = path.join(backupRoot, backupSchema);
                return pfs.readdir(backupSchemaPath).then(function (backupHashes) {
                    // Remember known backups in our caches
                    backupHashes.forEach(function (backupHash) {
                        var backupResource = uri_1.default.file(path.join(backupSchemaPath, backupHash));
                        _this.add(backupResource);
                    });
                });
            }));
        }).then(function () { return _this; }, function (error) { return _this; });
    };
    BackupFilesModel.prototype.add = function (resource, versionId) {
        if (versionId === void 0) { versionId = 0; }
        this.cache[resource.toString()] = versionId;
    };
    BackupFilesModel.prototype.count = function () {
        return Object.keys(this.cache).length;
    };
    BackupFilesModel.prototype.has = function (resource, versionId) {
        var cachedVersionId = this.cache[resource.toString()];
        if (typeof cachedVersionId !== 'number') {
            return false; // unknown resource
        }
        if (typeof versionId === 'number') {
            return versionId === cachedVersionId; // if we are asked with a specific version ID, make sure to test for it
        }
        return true;
    };
    BackupFilesModel.prototype.get = function () {
        return Object.keys(this.cache).map(function (k) { return uri_1.default.parse(k); });
    };
    BackupFilesModel.prototype.remove = function (resource) {
        delete this.cache[resource.toString()];
    };
    BackupFilesModel.prototype.clear = function () {
        this.cache = Object.create(null);
    };
    return BackupFilesModel;
}());
exports.BackupFilesModel = BackupFilesModel;
var BackupFileService = (function () {
    function BackupFileService(environmentService, fileService, windowService, backupService) {
        this.environmentService = environmentService;
        this.fileService = fileService;
        this.backupService = backupService;
        this.isShuttingDown = false;
        this.ready = this.init(windowService.getCurrentWindowId());
        this.ioOperationQueues = {};
    }
    Object.defineProperty(BackupFileService.prototype, "backupEnabled", {
        get: function () {
            return !this.environmentService.isExtensionDevelopment; // Hot exit is disabled when doing extension development
        },
        enumerable: true,
        configurable: true
    });
    BackupFileService.prototype.init = function (windowId) {
        var _this = this;
        var model = new BackupFilesModel();
        if (!this.backupEnabled) {
            return winjs_base_1.TPromise.as(model);
        }
        return this.backupService.getBackupPath(windowId).then(function (backupPath) {
            _this.backupWorkspacePath = backupPath;
            return model.resolve(_this.backupWorkspacePath);
        });
    };
    BackupFileService.prototype.hasBackups = function () {
        return this.ready.then(function (model) {
            return model.count() > 0;
        });
    };
    BackupFileService.prototype.hasBackup = function (resource) {
        var _this = this;
        return this.ready.then(function (model) {
            var backupResource = _this.getBackupResource(resource);
            if (!backupResource) {
                return winjs_base_1.TPromise.as(false);
            }
            return model.has(backupResource);
        });
    };
    BackupFileService.prototype.loadBackupResource = function (resource) {
        var _this = this;
        return this.ready.then(function () {
            return _this.hasBackup(resource).then(function (hasBackup) {
                if (hasBackup) {
                    return _this.getBackupResource(resource);
                }
                return void 0;
            });
        });
    };
    BackupFileService.prototype.backupResource = function (resource, content, versionId) {
        var _this = this;
        if (this.isShuttingDown) {
            return winjs_base_1.TPromise.as(void 0);
        }
        return this.ready.then(function (model) {
            var backupResource = _this.getBackupResource(resource);
            if (!backupResource) {
                return void 0;
            }
            if (model.has(backupResource, versionId)) {
                return void 0; // return early if backup version id matches requested one
            }
            // Add metadata to top of file
            content = "" + resource.toString() + BackupFileService.META_MARKER + content;
            return _this.getResourceIOQueue(backupResource).queue(function () {
                return _this.fileService.updateContent(backupResource, content, backup_1.BACKUP_FILE_UPDATE_OPTIONS).then(function () { return model.add(backupResource, versionId); });
            });
        });
    };
    BackupFileService.prototype.discardResourceBackup = function (resource) {
        var _this = this;
        return this.ready.then(function (model) {
            var backupResource = _this.getBackupResource(resource);
            if (!backupResource) {
                return void 0;
            }
            return _this.getResourceIOQueue(backupResource).queue(function () {
                return pfs.del(backupResource.fsPath).then(function () { return model.remove(backupResource); });
            });
        });
    };
    BackupFileService.prototype.getResourceIOQueue = function (resource) {
        var _this = this;
        var key = resource.toString();
        if (!this.ioOperationQueues[key]) {
            var queue_1 = new async_1.Queue();
            queue_1.onFinished(function () {
                queue_1.dispose();
                delete _this.ioOperationQueues[key];
            });
            this.ioOperationQueues[key] = queue_1;
        }
        return this.ioOperationQueues[key];
    };
    BackupFileService.prototype.discardAllWorkspaceBackups = function () {
        var _this = this;
        this.isShuttingDown = true;
        return this.ready.then(function (model) {
            if (!_this.backupEnabled) {
                return void 0;
            }
            return pfs.del(_this.backupWorkspacePath).then(function () { return model.clear(); });
        });
    };
    BackupFileService.prototype.getWorkspaceFileBackups = function () {
        return this.ready.then(function (model) {
            var readPromises = [];
            model.get().forEach(function (fileBackup) {
                readPromises.push(stream_1.readToMatchingString(fileBackup.fsPath, BackupFileService.META_MARKER, 2000, 10000)
                    .then(uri_1.default.parse));
            });
            return winjs_base_1.TPromise.join(readPromises);
        });
    };
    BackupFileService.prototype.parseBackupContent = function (rawTextSource) {
        var textSource = textSource_1.TextSource.fromRawTextSource(rawTextSource, editorCommon_1.DefaultEndOfLine.LF);
        return textSource.lines.slice(1).join(textSource.EOL); // The first line of a backup text file is the file name
    };
    BackupFileService.prototype.getBackupResource = function (resource) {
        if (!this.backupEnabled) {
            return null;
        }
        return uri_1.default.file(path.join(this.backupWorkspacePath, resource.scheme, this.hashPath(resource)));
    };
    BackupFileService.prototype.hashPath = function (resource) {
        // Windows and Mac paths are case insensitive, we want backups to be too
        var caseAwarePath = platform.isWindows || platform.isMacintosh ? resource.fsPath.toLowerCase() : resource.fsPath;
        return crypto.createHash('md5').update(caseAwarePath).digest('hex');
    };
    return BackupFileService;
}());
BackupFileService.META_MARKER = '\n';
BackupFileService = __decorate([
    __param(0, environment_1.IEnvironmentService),
    __param(1, files_1.IFileService),
    __param(2, windows_1.IWindowService),
    __param(3, backup_2.IBackupService)
], BackupFileService);
exports.BackupFileService = BackupFileService;
