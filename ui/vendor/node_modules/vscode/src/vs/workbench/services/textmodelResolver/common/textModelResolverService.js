/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var winjs_base_1 = require("vs/base/common/winjs.base");
var uri_1 = require("vs/base/common/uri");
var async_1 = require("vs/base/common/async");
var instantiation_1 = require("vs/platform/instantiation/common/instantiation");
var lifecycle_1 = require("vs/base/common/lifecycle");
var modelService_1 = require("vs/editor/common/services/modelService");
var resourceEditorModel_1 = require("vs/workbench/common/editor/resourceEditorModel");
var textfiles_1 = require("vs/workbench/services/textfile/common/textfiles");
var network = require("vs/base/common/network");
var untitledEditorService_1 = require("vs/workbench/services/untitled/common/untitledEditorService");
var untitledEditorInput_1 = require("vs/workbench/common/editor/untitledEditorInput");
var ResourceModelCollection = (function (_super) {
    __extends(ResourceModelCollection, _super);
    function ResourceModelCollection(instantiationService, modelService) {
        var _this = _super.call(this) || this;
        _this.instantiationService = instantiationService;
        _this.modelService = modelService;
        _this.providers = Object.create(null);
        return _this;
    }
    ResourceModelCollection.prototype.createReferencedObject = function (key) {
        var _this = this;
        var resource = uri_1.default.parse(key);
        return this.resolveTextModelContent(this.modelService, key)
            .then(function () { return _this.instantiationService.createInstance(resourceEditorModel_1.ResourceEditorModel, resource); });
    };
    ResourceModelCollection.prototype.destroyReferencedObject = function (modelPromise) {
        modelPromise.done(function (model) { return model.dispose(); });
    };
    ResourceModelCollection.prototype.registerTextModelContentProvider = function (scheme, provider) {
        var registry = this.providers;
        var providers = registry[scheme] || (registry[scheme] = []);
        providers.unshift(provider);
        return lifecycle_1.toDisposable(function () {
            var array = registry[scheme];
            if (!array) {
                return;
            }
            var index = array.indexOf(provider);
            if (index === -1) {
                return;
            }
            array.splice(index, 1);
            if (array.length === 0) {
                delete registry[scheme];
            }
        });
    };
    ResourceModelCollection.prototype.resolveTextModelContent = function (modelService, key) {
        var resource = uri_1.default.parse(key);
        var model = modelService.getModel(resource);
        if (model) {
            // TODO@Joao this should never happen
            return winjs_base_1.TPromise.as(model);
        }
        var providers = this.providers[resource.scheme] || [];
        var factories = providers.map(function (p) { return function () { return p.provideTextContent(resource); }; });
        return async_1.first(factories).then(function (uri) {
            if (!uri) {
                return winjs_base_1.TPromise.wrapError("Could not resolve any model with uri '" + resource + "'.");
            }
            return uri;
        });
    };
    return ResourceModelCollection;
}(lifecycle_1.ReferenceCollection));
ResourceModelCollection = __decorate([
    __param(0, instantiation_1.IInstantiationService),
    __param(1, modelService_1.IModelService)
], ResourceModelCollection);
var TextModelResolverService = (function () {
    function TextModelResolverService(textFileService, untitledEditorService, instantiationService) {
        this.textFileService = textFileService;
        this.untitledEditorService = untitledEditorService;
        this.promiseCache = Object.create(null);
        this.resourceModelCollection = instantiationService.createInstance(ResourceModelCollection);
    }
    TextModelResolverService.prototype.createModelReference = function (resource) {
        var _this = this;
        var uri = resource.toString();
        var promise = this.promiseCache[uri];
        if (promise) {
            return promise;
        }
        promise = this.promiseCache[uri] = this._createModelReference(resource);
        return async_1.always(promise, function () { return delete _this.promiseCache[uri]; });
    };
    TextModelResolverService.prototype._createModelReference = function (resource) {
        // File Schema: use text file service
        // TODO ImmortalReference is a hack
        if (resource.scheme === network.Schemas.file) {
            return this.textFileService.models.loadOrCreate(resource)
                .then(function (model) { return new lifecycle_1.ImmortalReference(model); });
        }
        // Untitled Schema: go through cached input
        // TODO ImmortalReference is a hack
        if (resource.scheme === untitledEditorInput_1.UntitledEditorInput.SCHEMA) {
            return this.untitledEditorService.createOrGet(resource).resolve()
                .then(function (model) { return new lifecycle_1.ImmortalReference(model); });
        }
        var ref = this.resourceModelCollection.acquire(resource.toString());
        return ref.object.then(function (model) { return ({ object: model, dispose: function () { return ref.dispose(); } }); });
    };
    TextModelResolverService.prototype.registerTextModelContentProvider = function (scheme, provider) {
        return this.resourceModelCollection.registerTextModelContentProvider(scheme, provider);
    };
    return TextModelResolverService;
}());
TextModelResolverService = __decorate([
    __param(0, textfiles_1.ITextFileService),
    __param(1, untitledEditorService_1.IUntitledEditorService),
    __param(2, instantiation_1.IInstantiationService)
], TextModelResolverService);
exports.TextModelResolverService = TextModelResolverService;
