import Uri from 'vs/base/common/uri';
import { IBackupModelService, IBackupFileService, IBackupResult } from 'vs/workbench/services/backup/common/backup';
import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
import { ITextFileEditorModelManager } from 'vs/workbench/services/textfile/common/textfiles';
import { IUntitledEditorService } from 'vs/workbench/services/untitled/common/untitledEditorService';
import { TPromise } from 'vs/base/common/winjs.base';
import { IEnvironmentService } from 'vs/platform/environment/common/environment';
import { IWindowsService } from 'vs/platform/windows/common/windows';
import { ShutdownReason } from 'vs/platform/lifecycle/common/lifecycle';
export declare class BackupModelService implements IBackupModelService {
    private backupFileService;
    private configurationService;
    private untitledEditorService;
    private environmentService;
    private windowsService;
    _serviceBrand: any;
    protected backupHome: string;
    protected backupWorkspacesPath: string;
    private toDispose;
    private configuredHotExit;
    constructor(backupFileService: IBackupFileService, configurationService: IConfigurationService, untitledEditorService: IUntitledEditorService, environmentService: IEnvironmentService, windowsService: IWindowsService);
    private registerListeners();
    private onConfigurationChange(configuration);
    /**
     * Performs an immedate backup of all dirty file and untitled models.
     */
    private backupAll(dirtyToBackup, textFileEditorModelManager);
    private doBackupAll(dirtyFileModels, untitledResources);
    readonly isHotExitEnabled: boolean;
    backupBeforeShutdown(dirtyToBackup: Uri[], textFileEditorModelManager: ITextFileEditorModelManager, reason: ShutdownReason): TPromise<IBackupResult>;
    cleanupBackupsBeforeShutdown(): TPromise<void>;
    dispose(): void;
}
