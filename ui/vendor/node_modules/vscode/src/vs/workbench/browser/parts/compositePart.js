/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
require("./media/compositepart.css");
var nls = require("vs/nls");
var timer = require("vs/base/common/timer");
var uuid = require("vs/base/common/uuid");
var winjs_base_1 = require("vs/base/common/winjs.base");
var platform_1 = require("vs/platform/platform");
var lifecycle_1 = require("vs/base/common/lifecycle");
var builder_1 = require("vs/base/browser/builder");
var events = require("vs/base/common/events");
var strings = require("vs/base/common/strings");
var event_1 = require("vs/base/common/event");
var types = require("vs/base/common/types");
var errors = require("vs/base/common/errors");
var toolbar_1 = require("vs/base/browser/ui/toolbar/toolbar");
var actionbar_1 = require("vs/base/browser/ui/actionbar/actionbar");
var progressbar_1 = require("vs/base/browser/ui/progressbar/progressbar");
var actionBarRegistry_1 = require("vs/workbench/browser/actionBarRegistry");
var part_1 = require("vs/workbench/browser/part");
var progressService_1 = require("vs/workbench/services/progress/browser/progressService");
var storage_1 = require("vs/platform/storage/common/storage");
var serviceCollection_1 = require("vs/platform/instantiation/common/serviceCollection");
var message_1 = require("vs/platform/message/common/message");
var progress_1 = require("vs/platform/progress/common/progress");
var CompositePart = (function (_super) {
    __extends(CompositePart, _super);
    function CompositePart(messageService, storageService, telemetryService, contextMenuService, partService, keybindingService, instantiationService, registry, activeCompositeSettingsKey, nameForTelemetry, compositeCSSClass, actionContributionScope, id) {
        var _this = _super.call(this, id) || this;
        _this.messageService = messageService;
        _this.storageService = storageService;
        _this.telemetryService = telemetryService;
        _this.contextMenuService = contextMenuService;
        _this.partService = partService;
        _this.keybindingService = keybindingService;
        _this.instantiationService = instantiationService;
        _this.registry = registry;
        _this.activeCompositeSettingsKey = activeCompositeSettingsKey;
        _this.nameForTelemetry = nameForTelemetry;
        _this.compositeCSSClass = compositeCSSClass;
        _this.actionContributionScope = actionContributionScope;
        _this._onDidCompositeOpen = new event_1.Emitter();
        _this._onDidCompositeClose = new event_1.Emitter();
        _this.instantiatedCompositeListeners = [];
        _this.mapCompositeToCompositeContainer = {};
        _this.mapActionsBindingToComposite = {};
        _this.mapProgressServiceToComposite = {};
        _this.activeComposite = null;
        _this.instantiatedComposits = [];
        _this.compositeLoaderPromises = {};
        return _this;
    }
    CompositePart.prototype.openComposite = function (id, focus) {
        // Check if composite already visible and just focus in that case
        if (this.activeComposite && this.activeComposite.getId() === id) {
            if (focus) {
                this.activeComposite.focus();
            }
            // Fullfill promise with composite that is being opened
            return winjs_base_1.TPromise.as(this.activeComposite);
        }
        // Open
        return this.doOpenComposite(id, focus);
    };
    CompositePart.prototype.doOpenComposite = function (id, focus) {
        var _this = this;
        var timerEvent = timer.start(timer.Topic.WORKBENCH, strings.format('Open Composite {0}', id.substr(id.lastIndexOf('.') + 1)));
        // Use a generated token to avoid race conditions from long running promises
        var currentCompositeOpenToken = uuid.generateUuid();
        this.currentCompositeOpenToken = currentCompositeOpenToken;
        // Hide current
        var hidePromise;
        if (this.activeComposite) {
            hidePromise = this.hideActiveComposite();
        }
        else {
            hidePromise = winjs_base_1.TPromise.as(null);
        }
        return hidePromise.then(function () {
            // Update Title
            _this.updateTitle(id);
            // Create composite
            return _this.createComposite(id, true).then(function (composite) {
                // Check if another composite opened meanwhile and return in that case
                if ((_this.currentCompositeOpenToken !== currentCompositeOpenToken) || (_this.activeComposite && _this.activeComposite.getId() !== composite.getId())) {
                    timerEvent.stop();
                    return winjs_base_1.TPromise.as(null);
                }
                // Check if composite already visible and just focus in that case
                if (_this.activeComposite && _this.activeComposite.getId() === composite.getId()) {
                    if (focus) {
                        composite.focus();
                    }
                    timerEvent.stop();
                    // Fullfill promise with composite that is being opened
                    return winjs_base_1.TPromise.as(composite);
                }
                // Show Composite and Focus
                return _this.showComposite(composite).then(function () {
                    if (focus) {
                        composite.focus();
                    }
                    timerEvent.stop();
                    // Fullfill promise with composite that is being opened
                    return composite;
                });
            });
        }).then(function (composite) {
            if (composite) {
                _this._onDidCompositeOpen.fire(composite);
            }
            return composite;
        });
    };
    CompositePart.prototype.createComposite = function (id, isActive) {
        var _this = this;
        // Check if composite is already created
        for (var i = 0; i < this.instantiatedComposits.length; i++) {
            if (this.instantiatedComposits[i].getId() === id) {
                return winjs_base_1.TPromise.as(this.instantiatedComposits[i]);
            }
        }
        // Instantiate composite from registry otherwise
        var compositeDescriptor = this.registry.getComposite(id);
        if (compositeDescriptor) {
            var loaderPromise = this.compositeLoaderPromises[id];
            if (!loaderPromise) {
                var progressService_2 = this.instantiationService.createInstance(progressService_1.WorkbenchProgressService, this.progressBar, compositeDescriptor.id, isActive);
                var compositeInstantiationService = this.instantiationService.createChild(new serviceCollection_1.ServiceCollection([progress_1.IProgressService, progressService_2]));
                loaderPromise = compositeInstantiationService.createInstance(compositeDescriptor).then(function (composite) {
                    _this.mapProgressServiceToComposite[composite.getId()] = progressService_2;
                    // Remember as Instantiated
                    _this.instantiatedComposits.push(composite);
                    // Register to title area update events from the composite
                    _this.instantiatedCompositeListeners.push(composite.onTitleAreaUpdate(function () { return _this.onTitleAreaUpdate(composite.getId()); }));
                    // Remove from Promises Cache since Loaded
                    delete _this.compositeLoaderPromises[id];
                    return composite;
                });
                // Report progress for slow loading composits
                progressService_2.showWhile(loaderPromise, this.partService.isCreated() ? 800 : 3200 /* less ugly initial startup */);
                // Add to Promise Cache until Loaded
                this.compositeLoaderPromises[id] = loaderPromise;
            }
            return loaderPromise;
        }
        throw new Error(strings.format('Unable to find composite with id {0}', id));
    };
    CompositePart.prototype.showComposite = function (composite) {
        var _this = this;
        // Remember Composite
        this.activeComposite = composite;
        // Store in preferences
        this.storageService.store(this.activeCompositeSettingsKey, this.activeComposite.getId(), storage_1.StorageScope.WORKSPACE);
        // Remember
        this.lastActiveCompositeId = this.activeComposite.getId();
        var createCompositePromise;
        // Composits created for the first time
        var compositeContainer = this.mapCompositeToCompositeContainer[composite.getId()];
        if (!compositeContainer) {
            // Build Container off-DOM
            compositeContainer = builder_1.$().div({
                'class': ['composite', this.compositeCSSClass],
                id: composite.getId()
            }, function (div) {
                createCompositePromise = composite.create(div);
            });
            // Remember composite container
            this.mapCompositeToCompositeContainer[composite.getId()] = compositeContainer;
        }
        else {
            createCompositePromise = winjs_base_1.TPromise.as(null);
        }
        // Report progress for slow loading composits (but only if we did not create the composits before already)
        var progressService = this.mapProgressServiceToComposite[composite.getId()];
        if (progressService && !compositeContainer) {
            this.mapProgressServiceToComposite[composite.getId()].showWhile(createCompositePromise, this.partService.isCreated() ? 800 : 3200 /* less ugly initial startup */);
        }
        // Fill Content and Actions
        return createCompositePromise.then(function () {
            // Make sure that the user meanwhile did not open another composite or closed the part containing the composite
            if (!_this.activeComposite || composite.getId() !== _this.activeComposite.getId()) {
                return;
            }
            // Take Composite on-DOM and show
            compositeContainer.build(_this.getContentArea());
            compositeContainer.show();
            // Setup action runner
            _this.toolBar.actionRunner = composite.getActionRunner();
            // Update title with composite title if it differs from descriptor
            var descriptor = _this.registry.getComposite(composite.getId());
            if (descriptor && descriptor.name !== composite.getTitle()) {
                _this.updateTitle(composite.getId(), composite.getTitle());
            }
            // Handle Composite Actions
            var actionsBinding = _this.mapActionsBindingToComposite[composite.getId()];
            if (!actionsBinding) {
                actionsBinding = _this.collectCompositeActions(composite);
                _this.mapActionsBindingToComposite[composite.getId()] = actionsBinding;
            }
            actionsBinding();
            if (_this.telemetryActionsListener) {
                _this.telemetryActionsListener.dispose();
                _this.telemetryActionsListener = null;
            }
            // Action Run Handling
            _this.telemetryActionsListener = _this.toolBar.actionRunner.addListener2(events.EventType.RUN, function (e) {
                // Check for Error
                if (e.error && !errors.isPromiseCanceledError(e.error)) {
                    _this.messageService.show(message_1.Severity.Error, e.error);
                }
                // Log in telemetry
                if (_this.telemetryService) {
                    _this.telemetryService.publicLog('workbenchActionExecuted', { id: e.action.id, from: _this.nameForTelemetry });
                }
            });
            // Indicate to composite that it is now visible
            return composite.setVisible(true).then(function () {
                // Make sure that the user meanwhile did not open another composite or closed the part containing the composite
                if (!_this.activeComposite || composite.getId() !== _this.activeComposite.getId()) {
                    return;
                }
                // Make sure the composite is layed out
                if (_this.contentAreaSize) {
                    composite.layout(_this.contentAreaSize);
                }
            });
        }, function (error) { return _this.onError(error); });
    };
    CompositePart.prototype.onTitleAreaUpdate = function (compositeId) {
        // Active Composite
        if (this.activeComposite && this.activeComposite.getId() === compositeId) {
            // Title
            this.updateTitle(this.activeComposite.getId(), this.activeComposite.getTitle());
            // Actions
            var actionsBinding = this.collectCompositeActions(this.activeComposite);
            this.mapActionsBindingToComposite[this.activeComposite.getId()] = actionsBinding;
            actionsBinding();
        }
        else {
            delete this.mapActionsBindingToComposite[compositeId];
        }
    };
    CompositePart.prototype.updateTitle = function (compositeId, compositeTitle) {
        var _this = this;
        var compositeDescriptor = this.registry.getComposite(compositeId);
        if (!compositeDescriptor) {
            return;
        }
        if (!compositeTitle) {
            compositeTitle = compositeDescriptor.name;
        }
        var keybinding = null;
        var keys = this.keybindingService.lookupKeybindings(compositeId).map(function (k) { return _this.keybindingService.getLabelFor(k); });
        if (keys && keys.length) {
            keybinding = keys[0];
        }
        this.titleLabel.safeInnerHtml(compositeTitle);
        this.titleLabel.title(keybinding ? nls.localize('compositeTitleTooltip', "{0} ({1})", compositeTitle, keybinding) : compositeTitle);
        this.toolBar.setAriaLabel(nls.localize('ariaCompositeToolbarLabel', "{0} actions", compositeTitle));
    };
    CompositePart.prototype.collectCompositeActions = function (composite) {
        // From Composite
        var primaryActions = composite.getActions().slice(0);
        var secondaryActions = composite.getSecondaryActions().slice(0);
        // From Part
        primaryActions.push.apply(primaryActions, this.getActions());
        secondaryActions.push.apply(secondaryActions, this.getSecondaryActions());
        // From Contributions
        var actionBarRegistry = platform_1.Registry.as(actionBarRegistry_1.Extensions.Actionbar);
        primaryActions.push.apply(primaryActions, actionBarRegistry.getActionBarActionsForContext(this.actionContributionScope, composite));
        secondaryActions.push.apply(secondaryActions, actionBarRegistry.getSecondaryActionBarActionsForContext(this.actionContributionScope, composite));
        // Return fn to set into toolbar
        return this.toolBar.setActions(actionBarRegistry_1.prepareActions(primaryActions), actionBarRegistry_1.prepareActions(secondaryActions));
    };
    CompositePart.prototype.getActiveComposite = function () {
        return this.activeComposite;
    };
    CompositePart.prototype.getLastActiveCompositetId = function () {
        return this.lastActiveCompositeId;
    };
    CompositePart.prototype.hideActiveComposite = function () {
        var _this = this;
        if (!this.activeComposite) {
            return winjs_base_1.TPromise.as(null); // Nothing to do
        }
        var composite = this.activeComposite;
        this.activeComposite = null;
        var compositeContainer = this.mapCompositeToCompositeContainer[composite.getId()];
        // Indicate to Composite
        return composite.setVisible(false).then(function () {
            // Take Container Off-DOM and hide
            compositeContainer.offDOM();
            compositeContainer.hide();
            // Clear any running Progress
            _this.progressBar.stop().getContainer().hide();
            // Empty Actions
            _this.toolBar.setActions([])();
            _this._onDidCompositeClose.fire(composite);
            return composite;
        });
    };
    CompositePart.prototype.createTitleArea = function (parent) {
        var _this = this;
        // Title Area Container
        var titleArea = builder_1.$(parent).div({
            'class': ['composite', 'title']
        });
        // Left Title Label
        builder_1.$(titleArea).div({
            'class': 'title-label'
        }, function (div) {
            _this.titleLabel = div.span();
        });
        // Right Actions Container
        builder_1.$(titleArea).div({
            'class': 'title-actions'
        }, function (div) {
            // Toolbar
            _this.toolBar = new toolbar_1.ToolBar(div.getHTMLElement(), _this.contextMenuService, {
                actionItemProvider: function (action) { return _this.actionItemProvider(action); },
                orientation: actionbar_1.ActionsOrientation.HORIZONTAL,
                getKeyBinding: function (action) {
                    var opts = _this.keybindingService.lookupKeybindings(action.id);
                    if (opts.length > 0) {
                        return opts[0]; // only take the first one
                    }
                    return null;
                },
                getKeyBindingLabel: function (key) { return _this.keybindingService.getLabelFor(key); }
            });
        });
        return titleArea;
    };
    CompositePart.prototype.actionItemProvider = function (action) {
        var actionItem;
        // Check Active Composite
        if (this.activeComposite) {
            actionItem = this.activeComposite.getActionItem(action);
        }
        // Check Registry
        if (!actionItem) {
            var actionBarRegistry = platform_1.Registry.as(actionBarRegistry_1.Extensions.Actionbar);
            actionItem = actionBarRegistry.getActionItemForContext(this.actionContributionScope, toolbar_1.CONTEXT, action);
        }
        return actionItem;
    };
    CompositePart.prototype.createContentArea = function (parent) {
        var _this = this;
        return builder_1.$(parent).div({
            'class': 'content'
        }, function (div) {
            _this.progressBar = new progressbar_1.ProgressBar(div);
            _this.progressBar.getContainer().hide();
        });
    };
    CompositePart.prototype.onError = function (error) {
        this.messageService.show(message_1.Severity.Error, types.isString(error) ? new Error(error) : error);
    };
    CompositePart.prototype.getActions = function () {
        return [];
    };
    CompositePart.prototype.getSecondaryActions = function () {
        return [];
    };
    CompositePart.prototype.layout = function (dimension) {
        // Pass to super
        var sizes = _super.prototype.layout.call(this, dimension);
        // Pass Contentsize to composite
        this.contentAreaSize = sizes[1];
        if (this.activeComposite) {
            this.activeComposite.layout(this.contentAreaSize);
        }
        return sizes;
    };
    CompositePart.prototype.shutdown = function () {
        this.instantiatedComposits.forEach(function (i) { return i.shutdown(); });
        _super.prototype.shutdown.call(this);
    };
    CompositePart.prototype.dispose = function () {
        this.mapCompositeToCompositeContainer = null;
        this.mapProgressServiceToComposite = null;
        this.mapActionsBindingToComposite = null;
        for (var i = 0; i < this.instantiatedComposits.length; i++) {
            this.instantiatedComposits[i].dispose();
        }
        this.instantiatedComposits = [];
        this.instantiatedCompositeListeners = lifecycle_1.dispose(this.instantiatedCompositeListeners);
        this.progressBar.dispose();
        this.toolBar.dispose();
        // Super Dispose
        _super.prototype.dispose.call(this);
    };
    return CompositePart;
}(part_1.Part));
exports.CompositePart = CompositePart;
