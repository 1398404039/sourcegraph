/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
require("./media/statusbarpart.css");
var dom = require("vs/base/browser/dom");
var nls = require("vs/nls");
var errorMessage_1 = require("vs/base/common/errorMessage");
var winjs_base_1 = require("vs/base/common/winjs.base");
var lifecycle_1 = require("vs/base/common/lifecycle");
var builder_1 = require("vs/base/browser/builder");
var octiconLabel_1 = require("vs/base/browser/ui/octiconLabel/octiconLabel");
var platform_1 = require("vs/platform/platform");
var commands_1 = require("vs/platform/commands/common/commands");
var editorService_1 = require("vs/workbench/services/editor/common/editorService");
var part_1 = require("vs/workbench/browser/part");
var actionRegistry_1 = require("vs/workbench/common/actionRegistry");
var statusbar_1 = require("vs/workbench/browser/parts/statusbar/statusbar");
var instantiation_1 = require("vs/platform/instantiation/common/instantiation");
var telemetry_1 = require("vs/platform/telemetry/common/telemetry");
var message_1 = require("vs/platform/message/common/message");
var codeEditorService_1 = require("vs/editor/common/services/codeEditorService");
var contextView_1 = require("vs/platform/contextview/browser/contextView");
var actions_1 = require("vs/base/common/actions");
var StatusbarPart = (function (_super) {
    __extends(StatusbarPart, _super);
    function StatusbarPart(id, instantiationService) {
        var _this = _super.call(this, id) || this;
        _this.instantiationService = instantiationService;
        _this.toDispose = [];
        return _this;
    }
    StatusbarPart.prototype.addEntry = function (entry, alignment, priority) {
        if (priority === void 0) { priority = 0; }
        // Render entry in status bar
        var el = this.doCreateStatusItem(alignment, priority);
        var item = this.instantiationService.createInstance(StatusBarEntryItem, entry);
        var toDispose = item.render(el);
        // Insert according to priority
        var container = this.statusItemsContainer.getHTMLElement();
        var neighbours = this.getEntries(alignment);
        var inserted = false;
        for (var i = 0; i < neighbours.length; i++) {
            var neighbour = neighbours[i];
            var nPriority = builder_1.$(neighbour).getProperty(StatusbarPart.PRIORITY_PROP);
            if (alignment === statusbar_1.StatusbarAlignment.LEFT && nPriority < priority ||
                alignment === statusbar_1.StatusbarAlignment.RIGHT && nPriority > priority) {
                container.insertBefore(el, neighbour);
                inserted = true;
                break;
            }
        }
        if (!inserted) {
            container.appendChild(el);
        }
        return {
            dispose: function () {
                builder_1.$(el).destroy();
                if (toDispose) {
                    toDispose.dispose();
                }
            }
        };
    };
    StatusbarPart.prototype.getEntries = function (alignment) {
        var entries = [];
        var container = this.statusItemsContainer.getHTMLElement();
        var children = container.children;
        for (var i = 0; i < children.length; i++) {
            var childElement = children.item(i);
            if (builder_1.$(childElement).getProperty(StatusbarPart.ALIGNMENT_PROP) === alignment) {
                entries.push(childElement);
            }
        }
        return entries;
    };
    StatusbarPart.prototype.createContentArea = function (parent) {
        var _this = this;
        this.statusItemsContainer = builder_1.$(parent);
        // Fill in initial items that were contributed from the registry
        var registry = platform_1.Registry.as(statusbar_1.Extensions.Statusbar);
        var leftDescriptors = registry.items.filter(function (d) { return d.alignment === statusbar_1.StatusbarAlignment.LEFT; }).sort(function (a, b) { return b.priority - a.priority; });
        var rightDescriptors = registry.items.filter(function (d) { return d.alignment === statusbar_1.StatusbarAlignment.RIGHT; }).sort(function (a, b) { return a.priority - b.priority; });
        var descriptors = rightDescriptors.concat(leftDescriptors); // right first because they float
        (_a = this.toDispose).push.apply(_a, descriptors.map(function (descriptor) {
            var item = _this.instantiationService.createInstance(descriptor.syncDescriptor);
            var el = _this.doCreateStatusItem(descriptor.alignment, descriptor.priority);
            var dispose = item.render(el);
            _this.statusItemsContainer.append(el);
            return dispose;
        }));
        return this.statusItemsContainer;
        var _a;
    };
    StatusbarPart.prototype.doCreateStatusItem = function (alignment, priority) {
        if (priority === void 0) { priority = 0; }
        var el = document.createElement('div');
        dom.addClass(el, 'statusbar-item');
        if (alignment === statusbar_1.StatusbarAlignment.RIGHT) {
            dom.addClass(el, 'right');
        }
        else {
            dom.addClass(el, 'left');
        }
        builder_1.$(el).setProperty(StatusbarPart.PRIORITY_PROP, priority);
        builder_1.$(el).setProperty(StatusbarPart.ALIGNMENT_PROP, alignment);
        return el;
    };
    StatusbarPart.prototype.setStatusMessage = function (message, autoDisposeAfter, delayBy) {
        var _this = this;
        if (autoDisposeAfter === void 0) { autoDisposeAfter = -1; }
        if (delayBy === void 0) { delayBy = 0; }
        if (this.statusMsgDispose) {
            this.statusMsgDispose.dispose(); // dismiss any previous
        }
        // Create new
        var statusDispose;
        var showHandle = setTimeout(function () {
            statusDispose = _this.addEntry({ text: message }, statusbar_1.StatusbarAlignment.LEFT, Number.MIN_VALUE);
            showHandle = null;
        }, delayBy);
        var hideHandle;
        // Dispose function takes care of timeouts and actual entry
        var dispose = {
            dispose: function () {
                if (showHandle) {
                    clearTimeout(showHandle);
                }
                if (hideHandle) {
                    clearTimeout(hideHandle);
                }
                if (statusDispose) {
                    statusDispose.dispose();
                }
            }
        };
        this.statusMsgDispose = dispose;
        if (typeof autoDisposeAfter === 'number' && autoDisposeAfter > 0) {
            hideHandle = setTimeout(function () { return dispose.dispose(); }, autoDisposeAfter);
        }
        return dispose;
    };
    StatusbarPart.prototype.dispose = function () {
        this.toDispose = lifecycle_1.dispose(this.toDispose);
        _super.prototype.dispose.call(this);
    };
    return StatusbarPart;
}(part_1.Part));
StatusbarPart.PRIORITY_PROP = 'priority';
StatusbarPart.ALIGNMENT_PROP = 'alignment';
StatusbarPart = __decorate([
    __param(1, instantiation_1.IInstantiationService)
], StatusbarPart);
exports.StatusbarPart = StatusbarPart;
var manageExtensionAction;
var StatusBarEntryItem = (function () {
    function StatusBarEntryItem(entry, commandService, instantiationService, messageService, telemetryService, contextMenuService, editorService) {
        this.commandService = commandService;
        this.instantiationService = instantiationService;
        this.messageService = messageService;
        this.telemetryService = telemetryService;
        this.contextMenuService = contextMenuService;
        this.editorService = editorService;
        this.entry = entry;
        if (!manageExtensionAction) {
            manageExtensionAction = this.instantiationService.createInstance(ManageExtensionAction);
        }
    }
    StatusBarEntryItem.prototype.render = function (el) {
        var _this = this;
        var toDispose = [];
        dom.addClass(el, 'statusbar-entry');
        // Text Container
        var textContainer;
        if (this.entry.command) {
            textContainer = document.createElement('a');
            builder_1.$(textContainer).on('click', function () { return _this.executeCommand(_this.entry.command); }, toDispose);
        }
        else {
            textContainer = document.createElement('span');
        }
        // Label
        new octiconLabel_1.OcticonLabel(textContainer).text = this.entry.text;
        // Tooltip
        if (this.entry.tooltip) {
            builder_1.$(textContainer).title(this.entry.tooltip);
        }
        // Color
        if (this.entry.color) {
            builder_1.$(textContainer).color(this.entry.color);
        }
        // Context Menu
        if (this.entry.extensionId) {
            builder_1.$(textContainer).on('contextmenu', function (e) {
                dom.EventHelper.stop(e, true);
                _this.contextMenuService.showContextMenu({
                    getAnchor: function () { return el; },
                    getActionsContext: function () { return _this.entry.extensionId; },
                    getActions: function () { return winjs_base_1.TPromise.as([manageExtensionAction]); }
                });
            }, toDispose);
        }
        el.appendChild(textContainer);
        return {
            dispose: function () {
                toDispose = lifecycle_1.dispose(toDispose);
            }
        };
    };
    StatusBarEntryItem.prototype.executeCommand = function (id) {
        var _this = this;
        // Lookup built in commands
        var builtInActionDescriptor = platform_1.Registry.as(actionRegistry_1.Extensions.WorkbenchActions).getWorkbenchAction(id);
        if (builtInActionDescriptor) {
            var action_1 = this.instantiationService.createInstance(builtInActionDescriptor.syncDescriptor);
            if (action_1.enabled) {
                this.telemetryService.publicLog('workbenchActionExecuted', { id: action_1.id, from: 'status bar' });
                (action_1.run() || winjs_base_1.TPromise.as(null)).done(function () {
                    action_1.dispose();
                }, function (err) { return _this.messageService.show(message_1.Severity.Error, errorMessage_1.toErrorMessage(err)); });
            }
            else {
                this.messageService.show(message_1.Severity.Warning, nls.localize('canNotRun', "Command '{0}' is currently not enabled and can not be run.", action_1.label || id));
            }
            return;
        }
        // Maintain old behaviour of always focusing the editor here
        var activeEditor = this.editorService.getActiveEditor();
        var codeEditor = codeEditorService_1.getCodeEditor(activeEditor);
        if (codeEditor) {
            codeEditor.focus();
        }
        // Fallback to the command service for any other case
        this.commandService.executeCommand(id).done(undefined, function (err) { return _this.messageService.show(message_1.Severity.Error, errorMessage_1.toErrorMessage(err)); });
    };
    return StatusBarEntryItem;
}());
StatusBarEntryItem = __decorate([
    __param(1, commands_1.ICommandService),
    __param(2, instantiation_1.IInstantiationService),
    __param(3, message_1.IMessageService),
    __param(4, telemetry_1.ITelemetryService),
    __param(5, contextView_1.IContextMenuService),
    __param(6, editorService_1.IWorkbenchEditorService)
], StatusBarEntryItem);
var ManageExtensionAction = (function (_super) {
    __extends(ManageExtensionAction, _super);
    function ManageExtensionAction(commandService) {
        var _this = _super.call(this, 'statusbar.manage.extension', nls.localize('manageExtension', "Manage Extension")) || this;
        _this.commandService = commandService;
        return _this;
    }
    ManageExtensionAction.prototype.run = function (extensionId) {
        return this.commandService.executeCommand('_extensions.manage', extensionId);
    };
    return ManageExtensionAction;
}(actions_1.Action));
ManageExtensionAction = __decorate([
    __param(0, commands_1.ICommandService)
], ManageExtensionAction);
