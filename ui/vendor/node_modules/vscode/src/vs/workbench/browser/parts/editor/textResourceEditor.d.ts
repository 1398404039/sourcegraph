import { TPromise } from 'vs/base/common/winjs.base';
import { IEditorOptions } from 'vs/editor/common/editorCommon';
import { EditorInput, EditorOptions } from 'vs/workbench/common/editor';
import { BaseTextEditor } from 'vs/workbench/browser/parts/editor/textEditor';
import { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';
import { IStorageService } from 'vs/platform/storage/common/storage';
import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import { IWorkbenchThemeService } from 'vs/workbench/services/themes/common/themeService';
import { IUntitledEditorService } from 'vs/workbench/services/untitled/common/untitledEditorService';
import { IEditorGroupService } from 'vs/workbench/services/group/common/groupService';
import { IModeService } from 'vs/editor/common/services/modeService';
import { ITextFileService } from 'vs/workbench/services/textfile/common/textfiles';
/**
 * An editor implementation that is capable of showing the contents of resource inputs. Uses
 * the TextEditor widget to show the contents.
 */
export declare class TextResourceEditor extends BaseTextEditor {
    private untitledEditorService;
    static ID: string;
    constructor(telemetryService: ITelemetryService, instantiationService: IInstantiationService, storageService: IStorageService, configurationService: IConfigurationService, themeService: IWorkbenchThemeService, untitledEditorService: IUntitledEditorService, editorGroupService: IEditorGroupService, modeService: IModeService, textFileService: ITextFileService);
    private onUntitledDirtyChange(resource);
    getTitle(): string;
    setInput(input: EditorInput, options?: EditorOptions): TPromise<void>;
    protected restoreViewState(input: EditorInput): void;
    protected getConfigurationOverrides(): IEditorOptions;
    protected getAriaLabel(): string;
    /**
     * Reveals the last line of this editor if it has a model set.
     * If smart reveal is true will only reveal the last line if the line before last is visible #3351
     */
    revealLastLine(): void;
    clearInput(): void;
    shutdown(): void;
    protected saveTextEditorViewState(input: EditorInput): void;
    protected saveTextEditorViewState(key: string): void;
}
