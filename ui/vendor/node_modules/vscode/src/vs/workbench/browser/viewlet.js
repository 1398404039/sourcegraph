/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var nls = require("vs/nls");
var winjs_base_1 = require("vs/base/common/winjs.base");
var DOM = require("vs/base/browser/dom");
var errors = require("vs/base/common/errors");
var platform_1 = require("vs/platform/platform");
var builder_1 = require("vs/base/browser/builder");
var actions_1 = require("vs/base/common/actions");
var actionbar_1 = require("vs/base/browser/ui/actionbar/actionbar");
var actionBarRegistry_1 = require("vs/workbench/browser/actionBarRegistry");
var toolbar_1 = require("vs/base/browser/ui/toolbar/toolbar");
var dnd_1 = require("vs/base/browser/dnd");
var lifecycle_1 = require("vs/base/common/lifecycle");
var splitview_1 = require("vs/base/browser/ui/splitview/splitview");
var viewlet_1 = require("vs/workbench/services/viewlet/browser/viewlet");
var editorService_1 = require("vs/workbench/services/editor/common/editorService");
var composite_1 = require("vs/workbench/browser/composite");
var Viewlet = (function (_super) {
    __extends(Viewlet, _super);
    function Viewlet() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Viewlet.prototype.getOptimalWidth = function () {
        return null;
    };
    return Viewlet;
}(composite_1.Composite));
exports.Viewlet = Viewlet;
/**
 * Helper subtype of viewlet for those that use a tree inside.
 */
var ViewerViewlet = (function (_super) {
    __extends(ViewerViewlet, _super);
    function ViewerViewlet() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ViewerViewlet.prototype.create = function (parent) {
        var _this = this;
        _super.prototype.create.call(this, parent);
        // Container for Viewer
        this.viewerContainer = parent.div();
        // Viewer
        this.viewer = this.createViewer(this.viewerContainer);
        // Eventing
        this.toUnbind.push(this.viewer.addListener2('selection', function (e) { return _this.onSelection(e); }));
        this.toUnbind.push(this.viewer.addListener2('focus', function (e) { return _this.onFocus(e); }));
        return winjs_base_1.TPromise.as(null);
    };
    /**
     * Returns the viewer that is contained in this viewlet.
     */
    ViewerViewlet.prototype.getViewer = function () {
        return this.viewer;
    };
    ViewerViewlet.prototype.setVisible = function (visible) {
        var promise;
        if (visible) {
            promise = _super.prototype.setVisible.call(this, visible);
            this.getViewer().onVisible();
        }
        else {
            this.getViewer().onHidden();
            promise = _super.prototype.setVisible.call(this, visible);
        }
        return promise;
    };
    ViewerViewlet.prototype.focus = function () {
        if (!this.viewer) {
            return; // return early if viewlet has not yet been created
        }
        // Make sure the current selected element is revealed
        var selection = this.viewer.getSelection();
        if (selection.length > 0) {
            this.reveal(selection[0], 0.5).done(null, errors.onUnexpectedError);
        }
        // Pass Focus to Viewer
        this.viewer.DOMFocus();
    };
    ViewerViewlet.prototype.reveal = function (element, relativeTop) {
        if (!this.viewer) {
            return winjs_base_1.TPromise.as(null); // return early if viewlet has not yet been created
        }
        // The viewer cannot properly reveal without being layed out, so force it if not yet done
        if (!this.wasLayouted) {
            this.viewer.layout();
        }
        // Now reveal
        return this.viewer.reveal(element, relativeTop);
    };
    ViewerViewlet.prototype.layout = function (dimension) {
        if (!this.viewer) {
            return; // return early if viewlet has not yet been created
        }
        // Pass on to Viewer
        this.wasLayouted = true;
        this.viewer.layout(dimension.height);
    };
    ViewerViewlet.prototype.getControl = function () {
        return this.viewer;
    };
    ViewerViewlet.prototype.dispose = function () {
        // Dispose Viewer
        if (this.viewer) {
            this.viewer.dispose();
        }
        _super.prototype.dispose.call(this);
    };
    return ViewerViewlet;
}(Viewlet));
exports.ViewerViewlet = ViewerViewlet;
/**
 * A viewlet descriptor is a leightweight descriptor of a viewlet in the workbench.
 */
var ViewletDescriptor = (function (_super) {
    __extends(ViewletDescriptor, _super);
    function ViewletDescriptor(moduleId, ctorName, id, name, cssClass, order, _extensionId) {
        var _this = _super.call(this, moduleId, ctorName, id, name, cssClass, order) || this;
        _this._extensionId = _extensionId;
        if (_extensionId) {
            _this.appendStaticArguments([id]); // Pass viewletId to external viewlet, which doesn't know its id until runtime.
        }
        return _this;
    }
    Object.defineProperty(ViewletDescriptor.prototype, "extensionId", {
        get: function () {
            return this._extensionId;
        },
        enumerable: true,
        configurable: true
    });
    return ViewletDescriptor;
}(composite_1.CompositeDescriptor));
exports.ViewletDescriptor = ViewletDescriptor;
exports.Extensions = {
    Viewlets: 'workbench.contributions.viewlets'
};
var ViewletRegistry = (function (_super) {
    __extends(ViewletRegistry, _super);
    function ViewletRegistry() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Registers a viewlet to the platform.
     */
    ViewletRegistry.prototype.registerViewlet = function (descriptor) {
        _super.prototype.registerComposite.call(this, descriptor);
    };
    /**
     * Returns the viewlet descriptor for the given id or null if none.
     */
    ViewletRegistry.prototype.getViewlet = function (id) {
        return this.getComposite(id);
    };
    /**
     * Returns an array of registered viewlets known to the platform.
     */
    ViewletRegistry.prototype.getViewlets = function () {
        return this.getComposits();
    };
    /**
     * Sets the id of the viewlet that should open on startup by default.
     */
    ViewletRegistry.prototype.setDefaultViewletId = function (id) {
        this.defaultViewletId = id;
    };
    /**
     * Gets the id of the viewlet that should open on startup by default.
     */
    ViewletRegistry.prototype.getDefaultViewletId = function () {
        return this.defaultViewletId;
    };
    return ViewletRegistry;
}(composite_1.CompositeRegistry));
exports.ViewletRegistry = ViewletRegistry;
platform_1.Registry.add(exports.Extensions.Viewlets, new ViewletRegistry());
/**
 * A reusable action to toggle a viewlet with a specific id.
 */
var ToggleViewletAction = (function (_super) {
    __extends(ToggleViewletAction, _super);
    function ToggleViewletAction(id, name, viewletId, viewletService, editorService) {
        var _this = _super.call(this, id, name) || this;
        _this.viewletService = viewletService;
        _this.editorService = editorService;
        _this.viewletId = viewletId;
        _this.enabled = !!_this.viewletService && !!_this.editorService;
        return _this;
    }
    ToggleViewletAction.prototype.run = function () {
        // Pass focus to viewlet if not open or focussed
        if (this.otherViewletShowing() || !this.sidebarHasFocus()) {
            return this.viewletService.openViewlet(this.viewletId, true);
        }
        // Otherwise pass focus to editor if possible
        var editor = this.editorService.getActiveEditor();
        if (editor) {
            editor.focus();
        }
        return winjs_base_1.TPromise.as(true);
    };
    ToggleViewletAction.prototype.otherViewletShowing = function () {
        var activeViewlet = this.viewletService.getActiveViewlet();
        return !activeViewlet || activeViewlet.getId() !== this.viewletId;
    };
    ToggleViewletAction.prototype.sidebarHasFocus = function () {
        var activeViewlet = this.viewletService.getActiveViewlet();
        var activeElement = document.activeElement;
        return activeViewlet && activeElement && DOM.isAncestor(activeElement, activeViewlet.getContainer().getHTMLElement());
    };
    return ToggleViewletAction;
}(actions_1.Action));
ToggleViewletAction = __decorate([
    __param(3, viewlet_1.IViewletService),
    __param(4, editorService_1.IWorkbenchEditorService)
], ToggleViewletAction);
exports.ToggleViewletAction = ToggleViewletAction;
// Collapse All action
var CollapseAction = (function (_super) {
    __extends(CollapseAction, _super);
    function CollapseAction(viewer, enabled, clazz) {
        return _super.call(this, 'workbench.action.collapse', nls.localize('collapse', "Collapse All"), clazz, enabled, function (context) {
            if (viewer.getHighlight()) {
                return winjs_base_1.TPromise.as(null); // Global action disabled if user is in edit mode from another action
            }
            viewer.collapseAll();
            viewer.clearSelection();
            viewer.clearFocus();
            viewer.DOMFocus();
            viewer.focusFirst();
            return winjs_base_1.TPromise.as(null);
        }) || this;
    }
    return CollapseAction;
}(actions_1.Action));
exports.CollapseAction = CollapseAction;
/**
 * The AdaptiveCollapsibleViewletView can grow with the content inside dynamically.
 */
var AdaptiveCollapsibleViewletView = (function (_super) {
    __extends(AdaptiveCollapsibleViewletView, _super);
    function AdaptiveCollapsibleViewletView(actionRunner, initialBodySize, collapsed, viewName, keybindingService, contextMenuService) {
        var _this = _super.call(this, {
            expandedBodySize: initialBodySize,
            headerSize: 22,
            initialState: collapsed ? splitview_1.CollapsibleState.COLLAPSED : splitview_1.CollapsibleState.EXPANDED,
            ariaHeaderLabel: viewName
        }) || this;
        _this.viewName = viewName;
        _this.keybindingService = keybindingService;
        _this.contextMenuService = contextMenuService;
        _this.actionRunner = actionRunner;
        _this.toDispose = [];
        return _this;
    }
    AdaptiveCollapsibleViewletView.prototype.create = function () {
        return winjs_base_1.TPromise.as(null);
    };
    AdaptiveCollapsibleViewletView.prototype.renderHeader = function (container) {
        var _this = this;
        // Tool bar
        this.toolBar = new toolbar_1.ToolBar(builder_1.$('div.actions').appendTo(container).getHTMLElement(), this.contextMenuService, {
            orientation: actionbar_1.ActionsOrientation.HORIZONTAL,
            actionItemProvider: function (action) { return _this.getActionItem(action); },
            ariaLabel: nls.localize('viewToolbarAriaLabel', "{0} actions", this.viewName),
            getKeyBinding: function (action) {
                var opts = _this.keybindingService.lookupKeybindings(action.id);
                if (opts.length > 0) {
                    return opts[0]; // only take the first one
                }
                return null;
            },
            getKeyBindingLabel: function (key) { return _this.keybindingService.getLabelFor(key); }
        });
        this.toolBar.actionRunner = this.actionRunner;
        this.toolBar.setActions(actionBarRegistry_1.prepareActions(this.getActions()), actionBarRegistry_1.prepareActions(this.getSecondaryActions()))();
        // Expand on drag over
        this.dragHandler = new dnd_1.DelayedDragHandler(container, function () {
            if (!_this.isExpanded()) {
                _this.expand();
            }
        });
    };
    AdaptiveCollapsibleViewletView.prototype.changeState = function (state) {
        updateTreeVisibility(this.tree, state === splitview_1.CollapsibleState.EXPANDED);
        _super.prototype.changeState.call(this, state);
    };
    AdaptiveCollapsibleViewletView.prototype.renderViewTree = function (container) {
        return renderViewTree(container);
    };
    AdaptiveCollapsibleViewletView.prototype.getViewer = function () {
        return this.tree;
    };
    AdaptiveCollapsibleViewletView.prototype.setVisible = function (visible) {
        this.isVisible = visible;
        updateTreeVisibility(this.tree, visible && this.state === splitview_1.CollapsibleState.EXPANDED);
        return winjs_base_1.TPromise.as(null);
    };
    AdaptiveCollapsibleViewletView.prototype.focusBody = function () {
        focus(this.tree);
    };
    AdaptiveCollapsibleViewletView.prototype.reveal = function (element, relativeTop) {
        return reveal(this.tree, element, relativeTop);
    };
    AdaptiveCollapsibleViewletView.prototype.layoutBody = function (size) {
        this.treeContainer.style.height = size + 'px';
        this.tree.layout(size);
    };
    AdaptiveCollapsibleViewletView.prototype.getActions = function () {
        return [];
    };
    AdaptiveCollapsibleViewletView.prototype.getSecondaryActions = function () {
        return [];
    };
    AdaptiveCollapsibleViewletView.prototype.getActionItem = function (action) {
        return null;
    };
    AdaptiveCollapsibleViewletView.prototype.shutdown = function () {
        // Subclass to implement
    };
    AdaptiveCollapsibleViewletView.prototype.dispose = function () {
        this.isDisposed = true;
        this.treeContainer = null;
        this.tree.dispose();
        this.dragHandler.dispose();
        this.toDispose = lifecycle_1.dispose(this.toDispose);
        if (this.toolBar) {
            this.toolBar.dispose();
        }
        _super.prototype.dispose.call(this);
    };
    return AdaptiveCollapsibleViewletView;
}(splitview_1.FixedCollapsibleView));
exports.AdaptiveCollapsibleViewletView = AdaptiveCollapsibleViewletView;
var CollapsibleViewletView = (function (_super) {
    __extends(CollapsibleViewletView, _super);
    function CollapsibleViewletView(actionRunner, collapsed, viewName, messageService, keybindingService, contextMenuService, headerSize) {
        var _this = _super.call(this, {
            minimumSize: 2 * 22,
            initialState: collapsed ? splitview_1.CollapsibleState.COLLAPSED : splitview_1.CollapsibleState.EXPANDED,
            ariaHeaderLabel: viewName,
            headerSize: headerSize
        }) || this;
        _this.viewName = viewName;
        _this.messageService = messageService;
        _this.keybindingService = keybindingService;
        _this.contextMenuService = contextMenuService;
        _this.actionRunner = actionRunner;
        _this.toDispose = [];
        return _this;
    }
    CollapsibleViewletView.prototype.changeState = function (state) {
        updateTreeVisibility(this.tree, state === splitview_1.CollapsibleState.EXPANDED);
        _super.prototype.changeState.call(this, state);
    };
    CollapsibleViewletView.prototype.create = function () {
        return winjs_base_1.TPromise.as(null);
    };
    CollapsibleViewletView.prototype.renderHeader = function (container) {
        var _this = this;
        // Tool bar
        this.toolBar = new toolbar_1.ToolBar(builder_1.$('div.actions').appendTo(container).getHTMLElement(), this.contextMenuService, {
            orientation: actionbar_1.ActionsOrientation.HORIZONTAL,
            actionItemProvider: function (action) { return _this.getActionItem(action); },
            ariaLabel: nls.localize('viewToolbarAriaLabel', "{0} actions", this.viewName),
            getKeyBinding: function (action) {
                var opts = _this.keybindingService.lookupKeybindings(action.id);
                if (opts.length > 0) {
                    return opts[0]; // only take the first one
                }
                return null;
            },
            getKeyBindingLabel: function (key) { return _this.keybindingService.getLabelFor(key); }
        });
        this.toolBar.actionRunner = this.actionRunner;
        this.toolBar.setActions(actionBarRegistry_1.prepareActions(this.getActions()), actionBarRegistry_1.prepareActions(this.getSecondaryActions()))();
        // Expand on drag over
        this.dragHandler = new dnd_1.DelayedDragHandler(container, function () {
            if (!_this.isExpanded()) {
                _this.expand();
            }
        });
    };
    CollapsibleViewletView.prototype.renderViewTree = function (container) {
        return renderViewTree(container);
    };
    CollapsibleViewletView.prototype.getViewer = function () {
        return this.tree;
    };
    CollapsibleViewletView.prototype.setVisible = function (visible) {
        this.isVisible = visible;
        updateTreeVisibility(this.tree, visible && this.state === splitview_1.CollapsibleState.EXPANDED);
        return winjs_base_1.TPromise.as(null);
    };
    CollapsibleViewletView.prototype.focusBody = function () {
        focus(this.tree);
    };
    CollapsibleViewletView.prototype.reveal = function (element, relativeTop) {
        return reveal(this.tree, element, relativeTop);
    };
    CollapsibleViewletView.prototype.layoutBody = function (size) {
        this.treeContainer.style.height = size + 'px';
        this.tree.layout(size);
    };
    CollapsibleViewletView.prototype.getActions = function () {
        return [];
    };
    CollapsibleViewletView.prototype.getSecondaryActions = function () {
        return [];
    };
    CollapsibleViewletView.prototype.getActionItem = function (action) {
        return null;
    };
    CollapsibleViewletView.prototype.shutdown = function () {
        // Subclass to implement
    };
    CollapsibleViewletView.prototype.dispose = function () {
        this.isDisposed = true;
        this.treeContainer = null;
        this.tree.dispose();
        if (this.dragHandler) {
            this.dragHandler.dispose();
        }
        this.toDispose = lifecycle_1.dispose(this.toDispose);
        if (this.toolBar) {
            this.toolBar.dispose();
        }
        _super.prototype.dispose.call(this);
    };
    return CollapsibleViewletView;
}(splitview_1.CollapsibleView));
exports.CollapsibleViewletView = CollapsibleViewletView;
function renderViewTree(container) {
    var treeContainer = document.createElement('div');
    container.appendChild(treeContainer);
    return treeContainer;
}
function updateTreeVisibility(tree, isVisible) {
    if (!tree) {
        return;
    }
    if (isVisible) {
        builder_1.$(tree.getHTMLElement()).show();
    }
    else {
        builder_1.$(tree.getHTMLElement()).hide(); // make sure the tree goes out of the tabindex world by hiding it
    }
    if (isVisible) {
        tree.onVisible();
    }
    else {
        tree.onHidden();
    }
}
function focus(tree) {
    if (!tree) {
        return; // return early if viewlet has not yet been created
    }
    // Make sure the current selected element is revealed
    var selection = tree.getSelection();
    if (selection.length > 0) {
        reveal(tree, selection[0], 0.5).done(null, errors.onUnexpectedError);
    }
    // Pass Focus to Viewer
    tree.DOMFocus();
}
function reveal(tree, element, relativeTop) {
    if (!tree) {
        return winjs_base_1.TPromise.as(null); // return early if viewlet has not yet been created
    }
    return tree.reveal(element, relativeTop);
}
