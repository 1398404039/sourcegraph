/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
require("./media/titlebarpart.css");
var winjs_base_1 = require("vs/base/common/winjs.base");
var builder_1 = require("vs/base/browser/builder");
var DOM = require("vs/base/browser/dom");
var paths = require("vs/base/common/paths");
var part_1 = require("vs/workbench/browser/part");
var browser_1 = require("vs/base/browser/browser");
var windows_1 = require("vs/platform/windows/common/windows");
var errors = require("vs/base/common/errors");
var contextView_1 = require("vs/platform/contextview/browser/contextView");
var mouseEvent_1 = require("vs/base/browser/mouseEvent");
var actions_1 = require("vs/base/common/actions");
var TitlebarPart = (function (_super) {
    __extends(TitlebarPart, _super);
    function TitlebarPart(id, contextMenuService, windowService, windowsService) {
        var _this = _super.call(this, id) || this;
        _this.contextMenuService = contextMenuService;
        _this.windowService = windowService;
        _this.windowsService = windowsService;
        _this.registerListeners();
        return _this;
    }
    TitlebarPart.prototype.registerListeners = function () {
        var _this = this;
        this.toUnbind.push(DOM.addDisposableListener(window, DOM.EventType.BLUR, function () { if (_this.titleContainer) {
            _this.titleContainer.addClass('blurred');
        } }));
        this.toUnbind.push(DOM.addDisposableListener(window, DOM.EventType.FOCUS, function () { if (_this.titleContainer) {
            _this.titleContainer.removeClass('blurred');
        } }));
    };
    TitlebarPart.prototype.createContentArea = function (parent) {
        var _this = this;
        this.titleContainer = builder_1.$(parent);
        // Title
        this.title = builder_1.$(this.titleContainer).div({ class: 'window-title' });
        if (this.pendingTitle) {
            this.title.text(this.pendingTitle);
        }
        // Maximize/Restore on doubleclick
        this.titleContainer.on(DOM.EventType.DBLCLICK, function (e) {
            DOM.EventHelper.stop(e);
            _this.onTitleDoubleclick();
        });
        // Context menu on title
        this.title.on([DOM.EventType.CONTEXT_MENU, DOM.EventType.MOUSE_DOWN], function (e) {
            if (e.type === DOM.EventType.CONTEXT_MENU || e.metaKey) {
                DOM.EventHelper.stop(e);
                _this.onContextMenu(e);
            }
        });
        return this.titleContainer;
    };
    TitlebarPart.prototype.onTitleDoubleclick = function () {
        var _this = this;
        this.windowService.isMaximized().then(function (maximized) {
            if (maximized) {
                _this.windowService.unmaximizeWindow().done(null, errors.onUnexpectedError);
            }
            else {
                _this.windowService.maximizeWindow().done(null, errors.onUnexpectedError);
            }
        }, errors.onUnexpectedError);
    };
    TitlebarPart.prototype.onContextMenu = function (e) {
        // Find target anchor
        var event = new mouseEvent_1.StandardMouseEvent(e);
        var anchor = { x: event.posx, y: event.posy };
        // Show menu
        var actions = this.getContextMenuActions();
        if (actions.length) {
            this.contextMenuService.showContextMenu({
                getAnchor: function () { return anchor; },
                getActions: function () { return winjs_base_1.TPromise.as(actions); },
                onHide: function () { return actions.forEach(function (a) { return a.dispose(); }); }
            });
        }
    };
    TitlebarPart.prototype.getContextMenuActions = function () {
        var actions = [];
        if (this.representedFileName) {
            var segments = this.representedFileName.split(paths.sep);
            for (var i = segments.length; i > 0; i--) {
                var isFile = (i === segments.length);
                var pathOffset = i;
                if (!isFile) {
                    pathOffset++; // for segments which are not the file name we want to open the folder
                }
                var path = segments.slice(0, pathOffset).join(paths.sep);
                var label = paths.basename(path);
                if (!isFile) {
                    label = paths.basename(paths.dirname(path));
                }
                actions.push(new ShowItemInFolderAction(path, label || paths.sep, this.windowsService));
            }
        }
        return actions;
    };
    TitlebarPart.prototype.updateTitle = function (title) {
        // Always set the native window title to identify us properly to the OS
        window.document.title = title;
        // Apply if we can
        if (this.title) {
            this.title.text(title);
        }
        else {
            this.pendingTitle = title;
        }
    };
    TitlebarPart.prototype.setRepresentedFilename = function (path) {
        // Apply to window
        this.windowService.setRepresentedFilename(path);
        // Keep for context menu
        this.representedFileName = path;
    };
    TitlebarPart.prototype.layout = function (dimension) {
        // To prevent zooming we need to adjust the font size with the zoom factor
        if (typeof this.initialTitleFontSize !== 'number') {
            this.initialTitleFontSize = parseInt(this.titleContainer.getComputedStyle().fontSize, 10);
        }
        this.titleContainer.style({ fontSize: this.initialTitleFontSize / browser_1.getZoomFactor() + "px" });
        return _super.prototype.layout.call(this, dimension);
    };
    return TitlebarPart;
}(part_1.Part));
TitlebarPart = __decorate([
    __param(1, contextView_1.IContextMenuService),
    __param(2, windows_1.IWindowService),
    __param(3, windows_1.IWindowsService)
], TitlebarPart);
exports.TitlebarPart = TitlebarPart;
var ShowItemInFolderAction = (function (_super) {
    __extends(ShowItemInFolderAction, _super);
    function ShowItemInFolderAction(path, label, windowsService) {
        var _this = _super.call(this, 'showItemInFolder.action.id', label) || this;
        _this.path = path;
        _this.windowsService = windowsService;
        return _this;
    }
    ShowItemInFolderAction.prototype.run = function () {
        return this.windowsService.showItemInFolder(this.path);
    };
    return ShowItemInFolderAction;
}(actions_1.Action));
