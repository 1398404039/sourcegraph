/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
require("./media/titlebarpart.css");
var winjs_base_1 = require("vs/base/common/winjs.base");
var builder_1 = require("vs/base/browser/builder");
var DOM = require("vs/base/browser/dom");
var paths = require("vs/base/common/paths");
var part_1 = require("vs/workbench/browser/part");
var browser_1 = require("vs/base/browser/browser");
var windows_1 = require("vs/platform/windows/common/windows");
var errors = require("vs/base/common/errors");
var contextView_1 = require("vs/platform/contextview/browser/contextView");
var mouseEvent_1 = require("vs/base/browser/mouseEvent");
var actions_1 = require("vs/base/common/actions");
var configuration_1 = require("vs/platform/configuration/common/configuration");
var integrity_1 = require("vs/platform/integrity/common/integrity");
var editorService_1 = require("vs/workbench/services/editor/common/editorService");
var groupService_1 = require("vs/workbench/services/group/common/groupService");
var lifecycle_1 = require("vs/base/common/lifecycle");
var nls = require("vs/nls");
var labels = require("vs/base/common/labels");
var editor_1 = require("vs/workbench/common/editor");
var environment_1 = require("vs/platform/environment/common/environment");
var workspace_1 = require("vs/platform/workspace/common/workspace");
var editor_2 = require("vs/platform/editor/common/editor");
var TitlebarPart = (function (_super) {
    __extends(TitlebarPart, _super);
    function TitlebarPart(id, contextMenuService, windowService, configurationService, windowsService, editorService, editorGroupService, integrityService, environmentService, contextService) {
        var _this = _super.call(this, id, { hasTitle: false }) || this;
        _this.contextMenuService = contextMenuService;
        _this.windowService = windowService;
        _this.configurationService = configurationService;
        _this.windowsService = windowsService;
        _this.editorService = editorService;
        _this.editorGroupService = editorGroupService;
        _this.integrityService = integrityService;
        _this.environmentService = environmentService;
        _this.contextService = contextService;
        _this.isPure = true;
        _this.activeEditorListeners = [];
        _this.workspacePath = contextService.hasWorkspace() ? labels.tildify(labels.getPathLabel(contextService.getWorkspace().resource), environmentService.userHome) : '';
        _this.init();
        _this.registerListeners();
        return _this;
    }
    TitlebarPart.prototype.init = function () {
        var _this = this;
        // Read initial config
        this.onConfigurationChanged();
        // Initial window title
        this.setTitle(this.getWindowTitle());
        // Integrity for window title
        this.integrityService.isPure().then(function (r) {
            if (!r.isPure) {
                _this.isPure = false;
                _this.setTitle(_this.getWindowTitle());
            }
        });
    };
    TitlebarPart.prototype.registerListeners = function () {
        var _this = this;
        this.toUnbind.push(DOM.addDisposableListener(window, DOM.EventType.BLUR, function () { if (_this.titleContainer) {
            _this.titleContainer.addClass('blurred');
        } }));
        this.toUnbind.push(DOM.addDisposableListener(window, DOM.EventType.FOCUS, function () { if (_this.titleContainer) {
            _this.titleContainer.removeClass('blurred');
        } }));
        this.toUnbind.push(this.configurationService.onDidUpdateConfiguration(function () { return _this.onConfigurationChanged(true); }));
        this.toUnbind.push(this.editorGroupService.onEditorsChanged(function () { return _this.onEditorsChanged(); }));
    };
    TitlebarPart.prototype.onConfigurationChanged = function (update) {
        var currentTitleTemplate = this.titleTemplate;
        this.titleTemplate = this.configurationService.lookup('window.title').value;
        if (update && currentTitleTemplate !== this.titleTemplate) {
            this.setTitle(this.getWindowTitle());
        }
    };
    TitlebarPart.prototype.onEditorsChanged = function () {
        var _this = this;
        // Dispose old listeners
        lifecycle_1.dispose(this.activeEditorListeners);
        this.activeEditorListeners = [];
        var activeEditor = this.editorService.getActiveEditor();
        var activeInput = activeEditor ? activeEditor.input : void 0;
        // Calculate New Window Title
        this.setTitle(this.getWindowTitle());
        // Apply listener for dirty and label changes
        if (activeInput instanceof editor_1.EditorInput) {
            this.activeEditorListeners.push(activeInput.onDidChangeDirty(function () {
                _this.setTitle(_this.getWindowTitle());
            }));
            this.activeEditorListeners.push(activeInput.onDidChangeLabel(function () {
                _this.setTitle(_this.getWindowTitle());
            }));
        }
    };
    TitlebarPart.prototype.getWindowTitle = function () {
        var title = this.doGetWindowTitle();
        if (!title) {
            title = this.environmentService.appNameLong;
        }
        if (!this.isPure) {
            title = title + " " + TitlebarPart.NLS_UNSUPPORTED;
        }
        // Extension Development Host gets a special title to identify itself
        if (this.environmentService.isExtensionDevelopment) {
            title = TitlebarPart.NLS_EXTENSION_HOST + " - " + title;
        }
        return title;
    };
    /**
     * Possible template values:
     *
     * {activeEditorLong}: e.g. /Users/Development/myProject/myFolder/myFile.txt
     * {activeEditorMedium}: e.g. myFolder/myFile.txt
     * {activeEditorShort}: e.g. myFile.txt
     * {rootName}: e.g. myProject
     * {rootPath}: e.g. /Users/Development/myProject
     * {appName}: e.g. VS Code
     * {dirty}: indiactor
     * {separator}: conditional separator
     */
    TitlebarPart.prototype.doGetWindowTitle = function () {
        var input = this.editorService.getActiveEditorInput();
        var workspace = this.contextService.getWorkspace();
        // Variables
        var activeEditorShort = input ? input.getTitle(editor_2.Verbosity.SHORT) : '';
        var activeEditorMedium = input ? input.getTitle(editor_2.Verbosity.MEDIUM) : activeEditorShort;
        var activeEditorLong = input ? input.getTitle(editor_2.Verbosity.LONG) : activeEditorMedium;
        var rootName = workspace ? workspace.name : '';
        var rootPath = workspace ? this.workspacePath : '';
        var dirty = input && input.isDirty() ? TitlebarPart.TITLE_DIRTY : '';
        var appName = this.environmentService.appNameLong;
        var separator = TitlebarPart.TITLE_SEPARATOR;
        return labels.template(this.titleTemplate, {
            activeEditorShort: activeEditorShort,
            activeEditorLong: activeEditorLong,
            activeEditorMedium: activeEditorMedium,
            rootName: rootName,
            rootPath: rootPath,
            dirty: dirty,
            appName: appName,
            separator: { label: separator }
        });
    };
    TitlebarPart.prototype.createContentArea = function (parent) {
        var _this = this;
        this.titleContainer = builder_1.$(parent);
        // Title
        this.title = builder_1.$(this.titleContainer).div({ class: 'window-title' });
        if (this.pendingTitle) {
            this.title.text(this.pendingTitle);
        }
        // Maximize/Restore on doubleclick
        this.titleContainer.on(DOM.EventType.DBLCLICK, function (e) {
            DOM.EventHelper.stop(e);
            _this.onTitleDoubleclick();
        });
        // Context menu on title
        this.title.on([DOM.EventType.CONTEXT_MENU, DOM.EventType.MOUSE_DOWN], function (e) {
            if (e.type === DOM.EventType.CONTEXT_MENU || e.metaKey) {
                DOM.EventHelper.stop(e);
                _this.onContextMenu(e);
            }
        });
        return this.titleContainer;
    };
    TitlebarPart.prototype.onTitleDoubleclick = function () {
        var _this = this;
        this.windowService.isMaximized().then(function (maximized) {
            if (maximized) {
                _this.windowService.unmaximizeWindow().done(null, errors.onUnexpectedError);
            }
            else {
                _this.windowService.maximizeWindow().done(null, errors.onUnexpectedError);
            }
        }, errors.onUnexpectedError);
    };
    TitlebarPart.prototype.onContextMenu = function (e) {
        // Find target anchor
        var event = new mouseEvent_1.StandardMouseEvent(e);
        var anchor = { x: event.posx, y: event.posy };
        // Show menu
        var actions = this.getContextMenuActions();
        if (actions.length) {
            this.contextMenuService.showContextMenu({
                getAnchor: function () { return anchor; },
                getActions: function () { return winjs_base_1.TPromise.as(actions); },
                onHide: function () { return actions.forEach(function (a) { return a.dispose(); }); }
            });
        }
    };
    TitlebarPart.prototype.getContextMenuActions = function () {
        var actions = [];
        if (this.representedFileName) {
            var segments = this.representedFileName.split(paths.sep);
            for (var i = segments.length; i > 0; i--) {
                var isFile = (i === segments.length);
                var pathOffset = i;
                if (!isFile) {
                    pathOffset++; // for segments which are not the file name we want to open the folder
                }
                var path = segments.slice(0, pathOffset).join(paths.sep);
                var label = paths.basename(path);
                if (!isFile) {
                    label = paths.basename(paths.dirname(path));
                }
                actions.push(new ShowItemInFolderAction(path, label || paths.sep, this.windowsService));
            }
        }
        return actions;
    };
    TitlebarPart.prototype.setTitle = function (title) {
        // Apply if we can
        if (this.title) {
            this.title.text(title);
        }
        else {
            this.pendingTitle = title;
        }
    };
    TitlebarPart.prototype.setRepresentedFilename = function (path) {
        // Apply to window
        this.windowService.setRepresentedFilename(path);
        // Keep for context menu
        this.representedFileName = path;
    };
    TitlebarPart.prototype.layout = function (dimension) {
        // To prevent zooming we need to adjust the font size with the zoom factor
        if (typeof this.initialTitleFontSize !== 'number') {
            this.initialTitleFontSize = parseInt(this.titleContainer.getComputedStyle().fontSize, 10);
        }
        this.titleContainer.style({ fontSize: this.initialTitleFontSize / browser_1.getZoomFactor() + "px" });
        return _super.prototype.layout.call(this, dimension);
    };
    return TitlebarPart;
}(part_1.Part));
TitlebarPart.NLS_UNSUPPORTED = nls.localize('patchedWindowTitle', "[Unsupported]");
TitlebarPart.NLS_EXTENSION_HOST = nls.localize('devExtensionWindowTitlePrefix', "[Extension Development Host]");
TitlebarPart.TITLE_DIRTY = '\u25cf ';
TitlebarPart.TITLE_SEPARATOR = ' - ';
TitlebarPart = __decorate([
    __param(1, contextView_1.IContextMenuService),
    __param(2, windows_1.IWindowService),
    __param(3, configuration_1.IConfigurationService),
    __param(4, windows_1.IWindowsService),
    __param(5, editorService_1.IWorkbenchEditorService),
    __param(6, groupService_1.IEditorGroupService),
    __param(7, integrity_1.IIntegrityService),
    __param(8, environment_1.IEnvironmentService),
    __param(9, workspace_1.IWorkspaceContextService)
], TitlebarPart);
exports.TitlebarPart = TitlebarPart;
var ShowItemInFolderAction = (function (_super) {
    __extends(ShowItemInFolderAction, _super);
    function ShowItemInFolderAction(path, label, windowsService) {
        var _this = _super.call(this, 'showItemInFolder.action.id', label) || this;
        _this.path = path;
        _this.windowsService = windowsService;
        return _this;
    }
    ShowItemInFolderAction.prototype.run = function () {
        return this.windowsService.showItemInFolder(this.path);
    };
    return ShowItemInFolderAction;
}(actions_1.Action));
