/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var DOM = require("vs/base/browser/dom");
var platform_1 = require("vs/platform/platform");
var winjs_base_1 = require("vs/base/common/winjs.base");
var composite_1 = require("vs/workbench/browser/composite");
var actions_1 = require("vs/base/common/actions");
var Panel = (function (_super) {
    __extends(Panel, _super);
    function Panel() {
        return _super.apply(this, arguments) || this;
    }
    return Panel;
}(composite_1.Composite));
exports.Panel = Panel;
/**
 * A panel descriptor is a leightweight descriptor of a panel in the workbench.
 */
var PanelDescriptor = (function (_super) {
    __extends(PanelDescriptor, _super);
    function PanelDescriptor(moduleId, ctorName, id, name, cssClass, order) {
        return _super.call(this, moduleId, ctorName, id, name, cssClass, order) || this;
    }
    return PanelDescriptor;
}(composite_1.CompositeDescriptor));
exports.PanelDescriptor = PanelDescriptor;
var PanelRegistry = (function (_super) {
    __extends(PanelRegistry, _super);
    function PanelRegistry() {
        return _super.apply(this, arguments) || this;
    }
    /**
     * Registers a panel to the platform.
     */
    PanelRegistry.prototype.registerPanel = function (descriptor) {
        _super.prototype.registerComposite.call(this, descriptor);
    };
    /**
     * Returns the panel descriptor for the given id or null if none.
     */
    PanelRegistry.prototype.getPanel = function (id) {
        return this.getComposite(id);
    };
    /**
     * Returns an array of registered panels known to the platform.
     */
    PanelRegistry.prototype.getPanels = function () {
        return this.getComposits();
    };
    /**
     * Sets the id of the panel that should open on startup by default.
     */
    PanelRegistry.prototype.setDefaultPanelId = function (id) {
        this.defaultPanelId = id;
    };
    /**
     * Gets the id of the panel that should open on startup by default.
     */
    PanelRegistry.prototype.getDefaultPanelId = function () {
        return this.defaultPanelId;
    };
    return PanelRegistry;
}(composite_1.CompositeRegistry));
exports.PanelRegistry = PanelRegistry;
/**
 * A reusable action to toggle a panel with a specific id.
 */
var TogglePanelAction = (function (_super) {
    __extends(TogglePanelAction, _super);
    function TogglePanelAction(id, label, panelId, panelService, partService, cssClass) {
        var _this = _super.call(this, id, label, cssClass) || this;
        _this.panelService = panelService;
        _this.partService = partService;
        _this.panelId = panelId;
        return _this;
    }
    TogglePanelAction.prototype.run = function () {
        if (this.isPanelShowing()) {
            this.partService.setPanelHidden(true);
            return winjs_base_1.TPromise.as(true);
        }
        return this.panelService.openPanel(this.panelId, true);
    };
    TogglePanelAction.prototype.isPanelShowing = function () {
        var panel = this.panelService.getActivePanel();
        return panel && panel.getId() === this.panelId;
    };
    TogglePanelAction.prototype.isPanelFocussed = function () {
        var activePanel = this.panelService.getActivePanel();
        var activeElement = document.activeElement;
        return activePanel && activeElement && DOM.isAncestor(activeElement, activePanel.getContainer().getHTMLElement());
    };
    return TogglePanelAction;
}(actions_1.Action));
exports.TogglePanelAction = TogglePanelAction;
exports.Extensions = {
    Panels: 'workbench.contributions.panels'
};
platform_1.Registry.add(exports.Extensions.Panels, new PanelRegistry());
