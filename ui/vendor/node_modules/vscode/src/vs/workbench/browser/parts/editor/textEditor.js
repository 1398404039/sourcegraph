/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var objects = require("vs/base/common/objects");
var codeEditor_1 = require("vs/editor/browser/codeEditor");
var baseEditor_1 = require("vs/workbench/browser/parts/editor/baseEditor");
var commonEditorConfig_1 = require("vs/editor/common/config/commonEditorConfig");
var workspace_1 = require("vs/platform/workspace/common/workspace");
var storage_1 = require("vs/platform/storage/common/storage");
var configuration_1 = require("vs/platform/configuration/common/configuration");
var event_1 = require("vs/platform/event/common/event");
var instantiation_1 = require("vs/platform/instantiation/common/instantiation");
var message_1 = require("vs/platform/message/common/message");
var telemetry_1 = require("vs/platform/telemetry/common/telemetry");
var editorService_1 = require("vs/workbench/services/editor/common/editorService");
var themeService_1 = require("vs/workbench/services/themes/common/themeService");
/**
 * The base class of editors that leverage the text editor for the editing experience. This class is only intended to
 * be subclassed and not instantiated.
 */
var BaseTextEditor = (function (_super) {
    __extends(BaseTextEditor, _super);
    function BaseTextEditor(id, telemetryService, _instantiationService, _contextService, _storageService, _messageService, configurationService, _eventService, _editorService, themeService) {
        var _this = _super.call(this, id, telemetryService) || this;
        _this._instantiationService = _instantiationService;
        _this._contextService = _contextService;
        _this._storageService = _storageService;
        _this._messageService = _messageService;
        _this.configurationService = configurationService;
        _this._eventService = _eventService;
        _this._editorService = _editorService;
        _this.themeService = themeService;
        _this.toUnbind.push(_this.configurationService.onDidUpdateConfiguration(function (e) { return _this.handleConfigurationChangeEvent(e.config); }));
        _this.toUnbind.push(themeService.onDidColorThemeChange(function (_) { return _this.handleConfigurationChangeEvent(); }));
        return _this;
    }
    Object.defineProperty(BaseTextEditor.prototype, "instantiationService", {
        get: function () {
            return this._instantiationService;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseTextEditor.prototype, "contextService", {
        get: function () {
            return this._contextService;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseTextEditor.prototype, "storageService", {
        get: function () {
            return this._storageService;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseTextEditor.prototype, "messageService", {
        get: function () {
            return this._messageService;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseTextEditor.prototype, "eventService", {
        get: function () {
            return this._eventService;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseTextEditor.prototype, "editorService", {
        get: function () {
            return this._editorService;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseTextEditor.prototype, "editorContainer", {
        get: function () {
            return this._editorContainer;
        },
        enumerable: true,
        configurable: true
    });
    BaseTextEditor.prototype.handleConfigurationChangeEvent = function (configuration) {
        if (this.isVisible()) {
            this.applyConfiguration(configuration);
        }
        else {
            this.hasPendingConfigurationChange = true;
        }
    };
    BaseTextEditor.prototype.consumePendingConfigurationChangeEvent = function () {
        if (this.hasPendingConfigurationChange) {
            this.applyConfiguration(this.configurationService.getConfiguration());
            this.hasPendingConfigurationChange = false;
        }
    };
    BaseTextEditor.prototype.applyConfiguration = function (configuration) {
        if (!this.editorControl) {
            return;
        }
        // Configuration & Options
        if (configuration) {
            var specificEditorSettings = this.getCodeEditorOptions();
            configuration = objects.clone(configuration); // dont modify original config
            objects.assign(configuration[commonEditorConfig_1.EditorConfiguration.EDITOR_SECTION], specificEditorSettings);
            commonEditorConfig_1.EditorConfiguration.apply(configuration, this.editorControl);
        }
        else {
            this.editorControl.updateOptions(this.getCodeEditorOptions());
        }
    };
    BaseTextEditor.prototype.getCodeEditorOptions = function () {
        return {
            overviewRulerLanes: 3,
            lineNumbersMinChars: 3,
            theme: this.themeService.getColorTheme(),
            fixedOverflowWidgets: true
        };
    };
    BaseTextEditor.prototype.createEditor = function (parent) {
        // Editor for Text
        this._editorContainer = parent;
        this.editorControl = this.createEditorControl(parent);
        // Configuration
        this.applyConfiguration(this.configurationService.getConfiguration());
    };
    /**
     * This method creates and returns the text editor control to be used. Subclasses can override to
     * provide their own editor control that should be used (e.g. a DiffEditor).
     */
    BaseTextEditor.prototype.createEditorControl = function (parent) {
        // Use a getter for the instantiation service since some subclasses might use scoped instantiation services
        return this.instantiationService.createInstance(codeEditor_1.CodeEditor, parent.getHTMLElement(), this.getCodeEditorOptions());
    };
    BaseTextEditor.prototype.setInput = function (input, options) {
        var _this = this;
        return _super.prototype.setInput.call(this, input, options).then(function () {
            _this.editorControl.updateOptions(_this.getCodeEditorOptions()); // support input specific editor options
        });
    };
    BaseTextEditor.prototype.setEditorVisible = function (visible, position) {
        if (position === void 0) { position = null; }
        // Pass on to Editor
        if (visible) {
            this.consumePendingConfigurationChangeEvent();
            this.editorControl.onVisible();
        }
        else {
            this.editorControl.onHide();
        }
        _super.prototype.setEditorVisible.call(this, visible, position);
    };
    BaseTextEditor.prototype.focus = function () {
        this.editorControl.focus();
    };
    BaseTextEditor.prototype.layout = function (dimension) {
        // Pass on to Editor
        this.editorControl.layout(dimension);
    };
    BaseTextEditor.prototype.getControl = function () {
        return this.editorControl;
    };
    BaseTextEditor.prototype.dispose = function () {
        // Destroy Editor Control
        this.editorControl.destroy();
        _super.prototype.dispose.call(this);
    };
    return BaseTextEditor;
}(baseEditor_1.BaseEditor));
BaseTextEditor = __decorate([
    __param(1, telemetry_1.ITelemetryService),
    __param(2, instantiation_1.IInstantiationService),
    __param(3, workspace_1.IWorkspaceContextService),
    __param(4, storage_1.IStorageService),
    __param(5, message_1.IMessageService),
    __param(6, configuration_1.IConfigurationService),
    __param(7, event_1.IEventService),
    __param(8, editorService_1.IWorkbenchEditorService),
    __param(9, themeService_1.IThemeService)
], BaseTextEditor);
exports.BaseTextEditor = BaseTextEditor;
