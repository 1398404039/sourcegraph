/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var winjs_base_1 = require("vs/base/common/winjs.base");
var nls = require("vs/nls");
var types = require("vs/base/common/types");
var textEditorModel_1 = require("vs/workbench/common/editor/textEditorModel");
var untitledEditorInput_1 = require("vs/workbench/common/editor/untitledEditorInput");
var textEditor_1 = require("vs/workbench/browser/parts/editor/textEditor");
var telemetry_1 = require("vs/platform/telemetry/common/telemetry");
var storage_1 = require("vs/platform/storage/common/storage");
var configuration_1 = require("vs/platform/configuration/common/configuration");
var instantiation_1 = require("vs/platform/instantiation/common/instantiation");
var themeService_1 = require("vs/workbench/services/themes/common/themeService");
var untitledEditorService_1 = require("vs/workbench/services/untitled/common/untitledEditorService");
var groupService_1 = require("vs/workbench/services/group/common/groupService");
var modeService_1 = require("vs/editor/common/services/modeService");
var textfiles_1 = require("vs/workbench/services/textfile/common/textfiles");
/**
 * An editor implementation that is capable of showing the contents of resource inputs. Uses
 * the TextEditor widget to show the contents.
 */
var TextResourceEditor = (function (_super) {
    __extends(TextResourceEditor, _super);
    function TextResourceEditor(telemetryService, instantiationService, storageService, configurationService, themeService, untitledEditorService, editorGroupService, modeService, textFileService) {
        var _this = _super.call(this, TextResourceEditor.ID, telemetryService, instantiationService, storageService, configurationService, themeService, modeService, textFileService, editorGroupService) || this;
        _this.untitledEditorService = untitledEditorService;
        _this.toUnbind.push(_this.untitledEditorService.onDidChangeDirty(function (e) { return _this.onUntitledDirtyChange(e); }));
        return _this;
    }
    TextResourceEditor.prototype.onUntitledDirtyChange = function (resource) {
        if (!this.untitledEditorService.isDirty(resource)) {
            this.clearTextEditorViewState([resource.toString()]); // untitled file got reverted, so remove view state
        }
    };
    TextResourceEditor.prototype.getTitle = function () {
        if (this.input) {
            return this.input.getName();
        }
        return nls.localize('textEditor', "Text Editor");
    };
    TextResourceEditor.prototype.setInput = function (input, options) {
        var _this = this;
        var oldInput = this.input;
        _super.prototype.setInput.call(this, input, options);
        // Detect options
        var forceOpen = options && options.forceOpen;
        // Same Input
        if (!forceOpen && input.matches(oldInput)) {
            // TextOptions (avoiding instanceof here for a reason, do not change!)
            var textOptions = options;
            if (textOptions && types.isFunction(textOptions.apply)) {
                textOptions.apply(this.getControl());
            }
            return winjs_base_1.TPromise.as(null);
        }
        // Remember view settings if input changes
        this.saveTextEditorViewState(oldInput);
        // Different Input (Reload)
        return input.resolve(true).then(function (resolvedModel) {
            // Assert Model instance
            if (!(resolvedModel instanceof textEditorModel_1.BaseTextEditorModel)) {
                return winjs_base_1.TPromise.wrapError('Invalid editor input. String editor requires a model instance of BaseTextEditorModel.');
            }
            // Assert that the current input is still the one we expect. This prevents a race condition when loading takes long and another input was set meanwhile
            if (!_this.input || _this.input !== input) {
                return null;
            }
            // Set Editor Model
            var textEditor = _this.getControl();
            var textEditorModel = resolvedModel.textEditorModel;
            textEditor.setModel(textEditorModel);
            // Apply Options from TextOptions
            var optionsGotApplied = false;
            var textOptions = options;
            if (textOptions && types.isFunction(textOptions.apply)) {
                optionsGotApplied = textOptions.apply(textEditor);
            }
            // Otherwise restore View State
            if (!optionsGotApplied) {
                _this.restoreViewState(input);
            }
            return undefined;
        });
    };
    TextResourceEditor.prototype.restoreViewState = function (input) {
        if (input instanceof untitledEditorInput_1.UntitledEditorInput) {
            var viewState = this.loadTextEditorViewState(input.getResource().toString());
            if (viewState) {
                this.getControl().restoreViewState(viewState);
            }
        }
    };
    TextResourceEditor.prototype.getConfigurationOverrides = function () {
        var options = _super.prototype.getConfigurationOverrides.call(this);
        options.readOnly = !(this.input instanceof untitledEditorInput_1.UntitledEditorInput); // all resource editors are readonly except for the untitled one;
        return options;
    };
    TextResourceEditor.prototype.getAriaLabel = function () {
        var input = this.input;
        var isReadonly = !(this.input instanceof untitledEditorInput_1.UntitledEditorInput);
        var ariaLabel;
        var inputName = input && input.getName();
        if (isReadonly) {
            ariaLabel = inputName ? nls.localize('readonlyEditorWithInputAriaLabel', "{0}. Readonly text editor.", inputName) : nls.localize('readonlyEditorAriaLabel', "Readonly text editor.");
        }
        else {
            ariaLabel = inputName ? nls.localize('untitledFileEditorWithInputAriaLabel', "{0}. Untitled file text editor.", inputName) : nls.localize('untitledFileEditorAriaLabel', "Untitled file text editor.");
        }
        return ariaLabel;
    };
    /**
     * Reveals the last line of this editor if it has a model set.
     * If smart reveal is true will only reveal the last line if the line before last is visible #3351
     */
    TextResourceEditor.prototype.revealLastLine = function () {
        var codeEditor = this.getControl();
        var model = codeEditor.getModel();
        if (model) {
            var lastLine = model.getLineCount();
            codeEditor.revealLine(lastLine);
        }
    };
    TextResourceEditor.prototype.clearInput = function () {
        // Keep editor view state in settings to restore when coming back
        this.saveTextEditorViewState(this.input);
        // Clear Model
        this.getControl().setModel(null);
        _super.prototype.clearInput.call(this);
    };
    TextResourceEditor.prototype.shutdown = function () {
        // Save View State
        this.saveTextEditorViewState(this.input);
        // Call Super
        _super.prototype.shutdown.call(this);
    };
    TextResourceEditor.prototype.saveTextEditorViewState = function (arg1) {
        if (typeof arg1 === 'string') {
            return _super.prototype.saveTextEditorViewState.call(this, arg1);
        }
        if (arg1 instanceof untitledEditorInput_1.UntitledEditorInput && !arg1.isDisposed()) {
            return _super.prototype.saveTextEditorViewState.call(this, arg1.getResource().toString());
        }
    };
    return TextResourceEditor;
}(textEditor_1.BaseTextEditor));
TextResourceEditor.ID = 'workbench.editors.textResourceEditor';
TextResourceEditor = __decorate([
    __param(0, telemetry_1.ITelemetryService),
    __param(1, instantiation_1.IInstantiationService),
    __param(2, storage_1.IStorageService),
    __param(3, configuration_1.IConfigurationService),
    __param(4, themeService_1.IWorkbenchThemeService),
    __param(5, untitledEditorService_1.IUntitledEditorService),
    __param(6, groupService_1.IEditorGroupService),
    __param(7, modeService_1.IModeService),
    __param(8, textfiles_1.ITextFileService)
], TextResourceEditor);
exports.TextResourceEditor = TextResourceEditor;
