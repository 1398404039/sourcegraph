/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var platform_1 = require("vs/platform/platform");
var nls = require("vs/nls");
var uri_1 = require("vs/base/common/uri");
var untitledEditorService_1 = require("vs/workbench/services/untitled/common/untitledEditorService");
var quickopen_1 = require("vs/workbench/browser/quickopen");
var statusbar_1 = require("vs/workbench/browser/parts/statusbar/statusbar");
var baseEditor_1 = require("vs/workbench/browser/parts/editor/baseEditor");
var editor_1 = require("vs/workbench/common/editor");
var stringEditorInput_1 = require("vs/workbench/common/editor/stringEditorInput");
var stringEditor_1 = require("vs/workbench/browser/parts/editor/stringEditor");
var sideBySideEditor_1 = require("vs/workbench/browser/parts/editor/sideBySideEditor");
var diffEditorInput_1 = require("vs/workbench/common/editor/diffEditorInput");
var untitledEditorInput_1 = require("vs/workbench/common/editor/untitledEditorInput");
var resourceEditorInput_1 = require("vs/workbench/common/editor/resourceEditorInput");
var instantiation_1 = require("vs/platform/instantiation/common/instantiation");
var keybindingsRegistry_1 = require("vs/platform/keybinding/common/keybindingsRegistry");
var textDiffEditor_1 = require("vs/workbench/browser/parts/editor/textDiffEditor");
var editorService_1 = require("vs/workbench/services/editor/common/editorService");
var binaryDiffEditor_1 = require("vs/workbench/browser/parts/editor/binaryDiffEditor");
var groupService_1 = require("vs/workbench/services/group/common/groupService");
var editorStatus_1 = require("vs/workbench/browser/parts/editor/editorStatus");
var actionRegistry_1 = require("vs/workbench/common/actionRegistry");
var actionBarRegistry_1 = require("vs/workbench/browser/actionBarRegistry");
var actions_1 = require("vs/platform/actions/common/actions");
var descriptors_1 = require("vs/platform/instantiation/common/descriptors");
var keyCodes_1 = require("vs/base/common/keyCodes");
var editorActions_1 = require("vs/workbench/browser/parts/editor/editorActions");
var editorCommands = require("vs/workbench/browser/parts/editor/editorCommands");
// Register String Editor
platform_1.Registry.as(editor_1.Extensions.Editors).registerEditor(new baseEditor_1.EditorDescriptor(stringEditor_1.StringEditor.ID, nls.localize('textEditor', "Text Editor"), 'vs/workbench/browser/parts/editor/stringEditor', 'StringEditor'), [
    new descriptors_1.SyncDescriptor(stringEditorInput_1.StringEditorInput),
    new descriptors_1.SyncDescriptor(untitledEditorInput_1.UntitledEditorInput),
    new descriptors_1.SyncDescriptor(resourceEditorInput_1.ResourceEditorInput)
]);
// Register Text Diff Editor
platform_1.Registry.as(editor_1.Extensions.Editors).registerEditor(new baseEditor_1.EditorDescriptor(textDiffEditor_1.TextDiffEditor.ID, nls.localize('textDiffEditor', "Text Diff Editor"), 'vs/workbench/browser/parts/editor/textDiffEditor', 'TextDiffEditor'), [
    new descriptors_1.SyncDescriptor(diffEditorInput_1.DiffEditorInput)
]);
// Register Binary Resource Diff Editor
platform_1.Registry.as(editor_1.Extensions.Editors).registerEditor(new baseEditor_1.EditorDescriptor(binaryDiffEditor_1.BinaryResourceDiffEditor.ID, nls.localize('binaryDiffEditor', "Binary Diff Editor"), 'vs/workbench/browser/parts/editor/binaryDiffEditor', 'BinaryResourceDiffEditor'), [
    new descriptors_1.SyncDescriptor(diffEditorInput_1.DiffEditorInput)
]);
platform_1.Registry.as(editor_1.Extensions.Editors).registerEditor(new baseEditor_1.EditorDescriptor(sideBySideEditor_1.SideBySideEditor.ID, nls.localize('sideBySideEditor', "Side by Side Editor"), 'vs/workbench/browser/parts/editor/sideBySideEditor', 'SideBySideEditor'), [
    new descriptors_1.SyncDescriptor(editor_1.SideBySideEditorInput)
]);
var untitledEditorServiceAccessor;
var UntitledEditorServiceAccessor = (function () {
    function UntitledEditorServiceAccessor(untitledEditorService) {
        this.untitledEditorService = untitledEditorService;
    }
    return UntitledEditorServiceAccessor;
}());
UntitledEditorServiceAccessor = __decorate([
    __param(0, untitledEditorService_1.IUntitledEditorService)
], UntitledEditorServiceAccessor);
// Register Editor Input Factory
var UntitledEditorInputFactory = (function () {
    function UntitledEditorInputFactory() {
    }
    UntitledEditorInputFactory.prototype.serialize = function (editorInput) {
        var untitledEditorInput = editorInput;
        var resource = untitledEditorInput.getResource();
        if (untitledEditorInput.hasAssociatedFilePath) {
            resource = uri_1.default.file(resource.fsPath); // untitled with associated file path use the file schema
        }
        var serialized = { resource: resource.toString() };
        return JSON.stringify(serialized);
    };
    UntitledEditorInputFactory.prototype.deserialize = function (instantiationService, serializedEditorInput) {
        var deserialized = JSON.parse(serializedEditorInput);
        if (!untitledEditorServiceAccessor) {
            untitledEditorServiceAccessor = instantiationService.createInstance(UntitledEditorServiceAccessor);
        }
        return untitledEditorServiceAccessor.untitledEditorService.createOrGet(uri_1.default.parse(deserialized.resource));
    };
    return UntitledEditorInputFactory;
}());
platform_1.Registry.as(editor_1.Extensions.Editors).registerEditorInputFactory(untitledEditorInput_1.UntitledEditorInput.ID, UntitledEditorInputFactory);
// Register Side by Side Editor Input Factory
var SideBySideEditorInputFactory = (function () {
    function SideBySideEditorInputFactory() {
    }
    SideBySideEditorInputFactory.prototype.serialize = function (editorInput) {
        var input = editorInput;
        if (input.details && input.master) {
            var registry_1 = platform_1.Registry.as(editor_1.Extensions.Editors);
            var detailsInputFactory = registry_1.getEditorInputFactory(input.details.getTypeId());
            var masterInputFactory = registry_1.getEditorInputFactory(input.master.getTypeId());
            if (detailsInputFactory && masterInputFactory) {
                var detailsSerialized = detailsInputFactory.serialize(input.details);
                var masterSerialized = masterInputFactory.serialize(input.master);
                if (detailsSerialized && masterSerialized) {
                    return JSON.stringify({
                        name: input.getName(),
                        description: input.getDescription(),
                        detailsSerialized: detailsSerialized,
                        masterSerialized: masterSerialized,
                        detailsTypeId: input.details.getTypeId(),
                        masterTypeId: input.master.getTypeId()
                    });
                }
            }
        }
        return null;
    };
    SideBySideEditorInputFactory.prototype.deserialize = function (instantiationService, serializedEditorInput) {
        var deserialized = JSON.parse(serializedEditorInput);
        var registry = platform_1.Registry.as(editor_1.Extensions.Editors);
        var detailsInputFactory = registry.getEditorInputFactory(deserialized.detailsTypeId);
        var masterInputFactory = registry.getEditorInputFactory(deserialized.masterTypeId);
        if (detailsInputFactory && masterInputFactory) {
            var detailsInput = detailsInputFactory.deserialize(instantiationService, deserialized.detailsSerialized);
            var masterInput = masterInputFactory.deserialize(instantiationService, deserialized.masterSerialized);
            if (detailsInput && masterInput) {
                return new editor_1.SideBySideEditorInput(deserialized.name, deserialized.description, detailsInput, masterInput);
            }
        }
        return null;
    };
    return SideBySideEditorInputFactory;
}());
platform_1.Registry.as(editor_1.Extensions.Editors).registerEditorInputFactory(editor_1.SideBySideEditorInput.ID, SideBySideEditorInputFactory);
// Register Editor Status
var statusBar = platform_1.Registry.as(statusbar_1.Extensions.Statusbar);
statusBar.registerStatusbarItem(new statusbar_1.StatusbarItemDescriptor(editorStatus_1.EditorStatus, statusbar_1.StatusbarAlignment.RIGHT, 100 /* High Priority */));
// Register Status Actions
var registry = platform_1.Registry.as(actionRegistry_1.Extensions.WorkbenchActions);
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(editorStatus_1.ChangeModeAction, editorStatus_1.ChangeModeAction.ID, editorStatus_1.ChangeModeAction.LABEL, { primary: keyCodes_1.KeyChord(32768 /* CtrlCmd */ | 41 /* KEY_K */, 43 /* KEY_M */) }), 'Change Language Mode');
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(editorStatus_1.ChangeEOLAction, editorStatus_1.ChangeEOLAction.ID, editorStatus_1.ChangeEOLAction.LABEL), 'Change End of Line Sequence');
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(editorStatus_1.ChangeEncodingAction, editorStatus_1.ChangeEncodingAction.ID, editorStatus_1.ChangeEncodingAction.LABEL), 'Change File Encoding');
var QuickOpenActionContributor = (function (_super) {
    __extends(QuickOpenActionContributor, _super);
    function QuickOpenActionContributor(instantiationService) {
        var _this = _super.call(this) || this;
        _this.instantiationService = instantiationService;
        return _this;
    }
    QuickOpenActionContributor.prototype.hasActions = function (context) {
        var entry = this.getEntry(context);
        return !!entry;
    };
    QuickOpenActionContributor.prototype.getActions = function (context) {
        var actions = [];
        var entry = this.getEntry(context);
        if (entry) {
            if (!this.openToSideActionInstance) {
                this.openToSideActionInstance = this.instantiationService.createInstance(editorActions_1.OpenToSideAction);
            }
            else {
                this.openToSideActionInstance.updateClass();
            }
            actions.push(this.openToSideActionInstance);
        }
        return actions;
    };
    QuickOpenActionContributor.prototype.getEntry = function (context) {
        if (!context || !context.element) {
            return null;
        }
        return editorActions_1.toEditorQuickOpenEntry(context.element);
    };
    return QuickOpenActionContributor;
}(actionBarRegistry_1.ActionBarContributor));
QuickOpenActionContributor = __decorate([
    __param(0, instantiation_1.IInstantiationService)
], QuickOpenActionContributor);
exports.QuickOpenActionContributor = QuickOpenActionContributor;
var actionBarRegistry = platform_1.Registry.as(actionBarRegistry_1.Extensions.Actionbar);
actionBarRegistry.registerActionBarContributor(actionBarRegistry_1.Scope.VIEWER, QuickOpenActionContributor);
platform_1.Registry.as(quickopen_1.Extensions.Quickopen).registerQuickOpenHandler(new quickopen_1.QuickOpenHandlerDescriptor('vs/workbench/browser/parts/editor/editorPicker', 'GroupOnePicker', editorActions_1.NAVIGATE_IN_GROUP_ONE_PREFIX, [
    {
        prefix: editorActions_1.NAVIGATE_IN_GROUP_ONE_PREFIX,
        needsEditor: false,
        description: nls.localize('groupOnePicker', "Show Editors in First Group")
    }
]));
platform_1.Registry.as(quickopen_1.Extensions.Quickopen).registerQuickOpenHandler(new quickopen_1.QuickOpenHandlerDescriptor('vs/workbench/browser/parts/editor/editorPicker', 'GroupTwoPicker', editorActions_1.NAVIGATE_IN_GROUP_TWO_PREFIX, [
    {
        prefix: editorActions_1.NAVIGATE_IN_GROUP_TWO_PREFIX,
        needsEditor: false,
        description: nls.localize('groupTwoPicker', "Show Editors in Second Group")
    }
]));
platform_1.Registry.as(quickopen_1.Extensions.Quickopen).registerQuickOpenHandler(new quickopen_1.QuickOpenHandlerDescriptor('vs/workbench/browser/parts/editor/editorPicker', 'GroupThreePicker', editorActions_1.NAVIGATE_IN_GROUP_THREE_PREFIX, [
    {
        prefix: editorActions_1.NAVIGATE_IN_GROUP_THREE_PREFIX,
        needsEditor: false,
        description: nls.localize('groupThreePicker', "Show Editors in Third Group")
    }
]));
platform_1.Registry.as(quickopen_1.Extensions.Quickopen).registerQuickOpenHandler(new quickopen_1.QuickOpenHandlerDescriptor('vs/workbench/browser/parts/editor/editorPicker', 'AllEditorsPicker', editorActions_1.NAVIGATE_ALL_EDITORS_GROUP_PREFIX, [
    {
        prefix: editorActions_1.NAVIGATE_ALL_EDITORS_GROUP_PREFIX,
        needsEditor: false,
        description: nls.localize('allEditorsPicker', "Show All Opened Editors")
    }
]));
// Register Editor Actions
var category = nls.localize('view', "View");
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(editorActions_1.OpenNextEditorInGroup, editorActions_1.OpenNextEditorInGroup.ID, editorActions_1.OpenNextEditorInGroup.LABEL), 'View: Open Next Editor in Group', category);
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(editorActions_1.OpenPreviousEditorInGroup, editorActions_1.OpenPreviousEditorInGroup.ID, editorActions_1.OpenPreviousEditorInGroup.LABEL), 'View: Open Next Recently Used Editor in Group', category);
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(editorActions_1.OpenNextRecentlyUsedEditorInGroupAction, editorActions_1.OpenNextRecentlyUsedEditorInGroupAction.ID, editorActions_1.OpenNextRecentlyUsedEditorInGroupAction.LABEL, { primary: 32768 /* CtrlCmd */ | 2 /* Tab */, mac: { primary: 4096 /* WinCtrl */ | 2 /* Tab */ } }), 'Open Next Recently Used Editor in Group');
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(editorActions_1.OpenPreviousRecentlyUsedEditorInGroupAction, editorActions_1.OpenPreviousRecentlyUsedEditorInGroupAction.ID, editorActions_1.OpenPreviousRecentlyUsedEditorInGroupAction.LABEL, { primary: 32768 /* CtrlCmd */ | 16384 /* Shift */ | 2 /* Tab */, mac: { primary: 4096 /* WinCtrl */ | 16384 /* Shift */ | 2 /* Tab */ } }), 'Open Previous Recently Used Editor in Group');
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(editorActions_1.ShowAllEditorsAction, editorActions_1.ShowAllEditorsAction.ID, editorActions_1.ShowAllEditorsAction.LABEL, { primary: keyCodes_1.KeyChord(32768 /* CtrlCmd */ | 41 /* KEY_K */, 32768 /* CtrlCmd */ | 46 /* KEY_P */), mac: { primary: 32768 /* CtrlCmd */ | 8192 /* Alt */ | 2 /* Tab */ } }), 'View: Show All Editors', category);
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(editorActions_1.ShowEditorsInGroupOneAction, editorActions_1.ShowEditorsInGroupOneAction.ID, editorActions_1.ShowEditorsInGroupOneAction.LABEL), 'View: Show Editors in First Group', category);
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(editorActions_1.ShowEditorsInGroupTwoAction, editorActions_1.ShowEditorsInGroupTwoAction.ID, editorActions_1.ShowEditorsInGroupTwoAction.LABEL), 'View: Show Editors in Second Group', category);
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(editorActions_1.ShowEditorsInGroupThreeAction, editorActions_1.ShowEditorsInGroupThreeAction.ID, editorActions_1.ShowEditorsInGroupThreeAction.LABEL), 'View: Show Editors in Third Group', category);
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(editorActions_1.OpenNextEditor, editorActions_1.OpenNextEditor.ID, editorActions_1.OpenNextEditor.LABEL, { primary: 32768 /* CtrlCmd */ | 12 /* PageDown */, mac: { primary: 32768 /* CtrlCmd */ | 8192 /* Alt */ | 17 /* RightArrow */ } }), 'View: Open Next Editor', category);
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(editorActions_1.OpenPreviousEditor, editorActions_1.OpenPreviousEditor.ID, editorActions_1.OpenPreviousEditor.LABEL, { primary: 32768 /* CtrlCmd */ | 11 /* PageUp */, mac: { primary: 32768 /* CtrlCmd */ | 8192 /* Alt */ | 15 /* LeftArrow */ } }), 'View: Open Previous Editor', category);
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(editorActions_1.ReopenClosedEditorAction, editorActions_1.ReopenClosedEditorAction.ID, editorActions_1.ReopenClosedEditorAction.LABEL, { primary: 32768 /* CtrlCmd */ | 16384 /* Shift */ | 50 /* KEY_T */ }), 'View: Reopen Closed Editor', category);
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(editorActions_1.KeepEditorAction, editorActions_1.KeepEditorAction.ID, editorActions_1.KeepEditorAction.LABEL, { primary: keyCodes_1.KeyChord(32768 /* CtrlCmd */ | 41 /* KEY_K */, 3 /* Enter */) }), 'View: Keep Editor', category);
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(editorActions_1.CloseAllEditorsAction, editorActions_1.CloseAllEditorsAction.ID, editorActions_1.CloseAllEditorsAction.LABEL, { primary: keyCodes_1.KeyChord(32768 /* CtrlCmd */ | 41 /* KEY_K */, 32768 /* CtrlCmd */ | 53 /* KEY_W */) }), 'View: Close All Editors', category);
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(editorActions_1.CloseLeftEditorsInGroupAction, editorActions_1.CloseLeftEditorsInGroupAction.ID, editorActions_1.CloseLeftEditorsInGroupAction.LABEL), 'View: Close Editors to the Left', category);
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(editorActions_1.CloseRightEditorsInGroupAction, editorActions_1.CloseRightEditorsInGroupAction.ID, editorActions_1.CloseRightEditorsInGroupAction.LABEL), 'View: Close Editors to the Right', category);
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(editorActions_1.CloseEditorsInGroupAction, editorActions_1.CloseEditorsInGroupAction.ID, editorActions_1.CloseEditorsInGroupAction.LABEL, { primary: keyCodes_1.KeyChord(32768 /* CtrlCmd */ | 41 /* KEY_K */, 53 /* KEY_W */) }), 'View: Close All Editors in Group', category);
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(editorActions_1.CloseOtherEditorsInGroupAction, editorActions_1.CloseOtherEditorsInGroupAction.ID, editorActions_1.CloseOtherEditorsInGroupAction.LABEL, { primary: null, mac: { primary: 32768 /* CtrlCmd */ | 8192 /* Alt */ | 50 /* KEY_T */ } }), 'View: Close Other Editors', category);
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(editorActions_1.CloseEditorsInOtherGroupsAction, editorActions_1.CloseEditorsInOtherGroupsAction.ID, editorActions_1.CloseEditorsInOtherGroupsAction.LABEL), 'View: Close Editors in Other Groups', category);
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(editorActions_1.SplitEditorAction, editorActions_1.SplitEditorAction.ID, editorActions_1.SplitEditorAction.LABEL, { primary: 32768 /* CtrlCmd */ | 88 /* US_BACKSLASH */ }), 'View: Split Editor', category);
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(editorActions_1.NavigateBetweenGroupsAction, editorActions_1.NavigateBetweenGroupsAction.ID, editorActions_1.NavigateBetweenGroupsAction.LABEL), 'View: Navigate Between Editor Groups', category);
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(editorActions_1.FocusActiveGroupAction, editorActions_1.FocusActiveGroupAction.ID, editorActions_1.FocusActiveGroupAction.LABEL), 'View: Focus Active Editor Group', category);
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(editorActions_1.FocusFirstGroupAction, editorActions_1.FocusFirstGroupAction.ID, editorActions_1.FocusFirstGroupAction.LABEL, { primary: 32768 /* CtrlCmd */ | 22 /* KEY_1 */ }), 'View: Focus First Editor Group', category);
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(editorActions_1.FocusSecondGroupAction, editorActions_1.FocusSecondGroupAction.ID, editorActions_1.FocusSecondGroupAction.LABEL, { primary: 32768 /* CtrlCmd */ | 23 /* KEY_2 */ }), 'View: Focus Second Editor Group', category);
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(editorActions_1.FocusThirdGroupAction, editorActions_1.FocusThirdGroupAction.ID, editorActions_1.FocusThirdGroupAction.LABEL, { primary: 32768 /* CtrlCmd */ | 24 /* KEY_3 */ }), 'View: Focus Third Editor Group', category);
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(editorActions_1.FocusLastEditorInStackAction, editorActions_1.FocusLastEditorInStackAction.ID, editorActions_1.FocusLastEditorInStackAction.LABEL, { primary: 8192 /* Alt */ | 21 /* KEY_0 */, mac: { primary: 4096 /* WinCtrl */ | 21 /* KEY_0 */ } }), 'View: Focus Last Editor in Group', category);
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(editorActions_1.EvenGroupWidthsAction, editorActions_1.EvenGroupWidthsAction.ID, editorActions_1.EvenGroupWidthsAction.LABEL), 'View: Even Editor Group Widths', category);
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(editorActions_1.MaximizeGroupAction, editorActions_1.MaximizeGroupAction.ID, editorActions_1.MaximizeGroupAction.LABEL), 'View: Maximize Editor Group and Hide Sidebar', category);
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(editorActions_1.MinimizeOtherGroupsAction, editorActions_1.MinimizeOtherGroupsAction.ID, editorActions_1.MinimizeOtherGroupsAction.LABEL), 'View: Minimize Other Editor Groups', category);
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(editorActions_1.MoveEditorLeftInGroupAction, editorActions_1.MoveEditorLeftInGroupAction.ID, editorActions_1.MoveEditorLeftInGroupAction.LABEL, { primary: 32768 /* CtrlCmd */ | 16384 /* Shift */ | 11 /* PageUp */, mac: { primary: keyCodes_1.KeyChord(32768 /* CtrlCmd */ | 41 /* KEY_K */, 32768 /* CtrlCmd */ | 16384 /* Shift */ | 15 /* LeftArrow */) } }), 'View: Move Editor Left', category);
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(editorActions_1.MoveEditorRightInGroupAction, editorActions_1.MoveEditorRightInGroupAction.ID, editorActions_1.MoveEditorRightInGroupAction.LABEL, { primary: 32768 /* CtrlCmd */ | 16384 /* Shift */ | 12 /* PageDown */, mac: { primary: keyCodes_1.KeyChord(32768 /* CtrlCmd */ | 41 /* KEY_K */, 32768 /* CtrlCmd */ | 16384 /* Shift */ | 17 /* RightArrow */) } }), 'View: Move Editor Right', category);
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(editorActions_1.MoveGroupLeftAction, editorActions_1.MoveGroupLeftAction.ID, editorActions_1.MoveGroupLeftAction.LABEL, { primary: keyCodes_1.KeyChord(32768 /* CtrlCmd */ | 41 /* KEY_K */, 15 /* LeftArrow */) }), 'View: Move Editor Group Left', category);
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(editorActions_1.MoveGroupRightAction, editorActions_1.MoveGroupRightAction.ID, editorActions_1.MoveGroupRightAction.LABEL, { primary: keyCodes_1.KeyChord(32768 /* CtrlCmd */ | 41 /* KEY_K */, 17 /* RightArrow */) }), 'View: Move Editor Group Right', category);
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(editorActions_1.MoveEditorToPreviousGroupAction, editorActions_1.MoveEditorToPreviousGroupAction.ID, editorActions_1.MoveEditorToPreviousGroupAction.LABEL, { primary: 32768 /* CtrlCmd */ | 8192 /* Alt */ | 15 /* LeftArrow */, mac: { primary: 32768 /* CtrlCmd */ | 4096 /* WinCtrl */ | 15 /* LeftArrow */ } }), 'View: Move Editor into Previous Group', category);
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(editorActions_1.MoveEditorToNextGroupAction, editorActions_1.MoveEditorToNextGroupAction.ID, editorActions_1.MoveEditorToNextGroupAction.LABEL, { primary: 32768 /* CtrlCmd */ | 8192 /* Alt */ | 17 /* RightArrow */, mac: { primary: 32768 /* CtrlCmd */ | 4096 /* WinCtrl */ | 17 /* RightArrow */ } }), 'View: Move Editor into Next Group', category);
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(editorActions_1.FocusPreviousGroup, editorActions_1.FocusPreviousGroup.ID, editorActions_1.FocusPreviousGroup.LABEL, { primary: keyCodes_1.KeyChord(32768 /* CtrlCmd */ | 41 /* KEY_K */, 32768 /* CtrlCmd */ | 15 /* LeftArrow */) }), 'View: Focus Previous Group', category);
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(editorActions_1.FocusNextGroup, editorActions_1.FocusNextGroup.ID, editorActions_1.FocusNextGroup.LABEL, { primary: keyCodes_1.KeyChord(32768 /* CtrlCmd */ | 41 /* KEY_K */, 32768 /* CtrlCmd */ | 17 /* RightArrow */) }), 'View: Focus Next Group', category);
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(editorActions_1.NavigateForwardAction, editorActions_1.NavigateForwardAction.ID, editorActions_1.NavigateForwardAction.LABEL, { primary: null, win: { primary: 8192 /* Alt */ | 17 /* RightArrow */ }, mac: { primary: 4096 /* WinCtrl */ | 16384 /* Shift */ | 83 /* US_MINUS */ }, linux: { primary: 32768 /* CtrlCmd */ | 16384 /* Shift */ | 83 /* US_MINUS */ } }), 'Go Forward');
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(editorActions_1.NavigateBackwardsAction, editorActions_1.NavigateBackwardsAction.ID, editorActions_1.NavigateBackwardsAction.LABEL, { primary: null, win: { primary: 8192 /* Alt */ | 15 /* LeftArrow */ }, mac: { primary: 4096 /* WinCtrl */ | 83 /* US_MINUS */ }, linux: { primary: 32768 /* CtrlCmd */ | 8192 /* Alt */ | 83 /* US_MINUS */ } }), 'Go Back');
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(editorActions_1.OpenPreviousEditorFromHistoryAction, editorActions_1.OpenPreviousEditorFromHistoryAction.ID, editorActions_1.OpenPreviousEditorFromHistoryAction.LABEL), 'Open Previous Editor from History');
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(editorActions_1.ClearEditorHistoryAction, editorActions_1.ClearEditorHistoryAction.ID, editorActions_1.ClearEditorHistoryAction.LABEL), 'Clear Editor History');
var _loop_1 = function (i) {
    var editorIndex = i;
    var visibleIndex = i + 1;
    keybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({
        id: 'workbench.action.openEditorAtIndex' + visibleIndex,
        weight: keybindingsRegistry_1.KeybindingsRegistry.WEIGHT.workbenchContrib(),
        when: void 0,
        primary: 8192 /* Alt */ | toKeyCode(visibleIndex),
        mac: { primary: 4096 /* WinCtrl */ | toKeyCode(visibleIndex) },
        handler: function (accessor) {
            var editorService = accessor.get(editorService_1.IWorkbenchEditorService);
            var editorGroupService = accessor.get(groupService_1.IEditorGroupService);
            var active = editorService.getActiveEditor();
            if (active) {
                var group = editorGroupService.getStacksModel().groupAt(active.position);
                var editor = group.getEditor(editorIndex);
                if (editor) {
                    return editorService.openEditor(editor);
                }
            }
        }
    });
};
// Keybindings to focus a specific index in the tab folder if tabs are enabled
for (var i = 0; i < 9; i++) {
    _loop_1(i);
}
function toKeyCode(index) {
    switch (index) {
        case 0: return 21 /* KEY_0 */;
        case 1: return 22 /* KEY_1 */;
        case 2: return 23 /* KEY_2 */;
        case 3: return 24 /* KEY_3 */;
        case 4: return 25 /* KEY_4 */;
        case 5: return 26 /* KEY_5 */;
        case 6: return 27 /* KEY_6 */;
        case 7: return 28 /* KEY_7 */;
        case 8: return 29 /* KEY_8 */;
        case 9: return 30 /* KEY_9 */;
    }
}
// Editor Commands
editorCommands.setup();
