/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
require("./media/panelpart.css");
var nls = require("vs/nls");
var winjs_base_1 = require("vs/base/common/winjs.base");
var actions_1 = require("vs/base/common/actions");
var platform_1 = require("vs/platform/platform");
var activitybarActions_1 = require("vs/workbench/browser/parts/activitybar/activitybarActions");
var actionBarRegistry_1 = require("vs/workbench/browser/actionBarRegistry");
var actions_2 = require("vs/platform/actions/common/actions");
var actionRegistry_1 = require("vs/workbench/common/actionRegistry");
var compositePart_1 = require("vs/workbench/browser/parts/compositePart");
var panel_1 = require("vs/workbench/browser/panel");
var panelService_1 = require("vs/workbench/services/panel/common/panelService");
var partService_1 = require("vs/workbench/services/part/common/partService");
var storage_1 = require("vs/platform/storage/common/storage");
var contextView_1 = require("vs/platform/contextview/browser/contextView");
var message_1 = require("vs/platform/message/common/message");
var telemetry_1 = require("vs/platform/telemetry/common/telemetry");
var keybinding_1 = require("vs/platform/keybinding/common/keybinding");
var instantiation_1 = require("vs/platform/instantiation/common/instantiation");
var PanelPart = (function (_super) {
    __extends(PanelPart, _super);
    function PanelPart(id, messageService, storageService, telemetryService, contextMenuService, partService, keybindingService, instantiationService) {
        return _super.call(this, messageService, storageService, telemetryService, contextMenuService, partService, keybindingService, instantiationService, platform_1.Registry.as(panel_1.Extensions.Panels), PanelPart.activePanelSettingsKey, 'panel', 'panel', actionBarRegistry_1.Scope.PANEL, id) || this;
    }
    Object.defineProperty(PanelPart.prototype, "onDidPanelOpen", {
        get: function () {
            return this._onDidCompositeOpen.event;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PanelPart.prototype, "onDidPanelClose", {
        get: function () {
            return this._onDidCompositeClose.event;
        },
        enumerable: true,
        configurable: true
    });
    PanelPart.prototype.create = function (parent) {
        _super.prototype.create.call(this, parent);
    };
    PanelPart.prototype.openPanel = function (id, focus) {
        if (this.blockOpeningPanel) {
            return winjs_base_1.TPromise.as(null); // Workaround against a potential race condition
        }
        // First check if panel is hidden and show if so
        if (!this.partService.isVisible(partService_1.Parts.PANEL_PART)) {
            try {
                this.blockOpeningPanel = true;
                this.partService.setPanelHidden(false);
            }
            finally {
                this.blockOpeningPanel = false;
            }
        }
        return this.openComposite(id, focus);
    };
    PanelPart.prototype.getActions = function () {
        return [this.instantiationService.createInstance(ClosePanelAction, ClosePanelAction.ID, ClosePanelAction.LABEL)];
    };
    PanelPart.prototype.getActivePanel = function () {
        return this.getActiveComposite();
    };
    PanelPart.prototype.getLastActivePanelId = function () {
        return this.getLastActiveCompositetId();
    };
    PanelPart.prototype.hideActivePanel = function () {
        return this.hideActiveComposite().then(function (composite) { return void 0; });
    };
    return PanelPart;
}(compositePart_1.CompositePart));
PanelPart.activePanelSettingsKey = 'workbench.panelpart.activepanelid';
PanelPart = __decorate([
    __param(1, message_1.IMessageService),
    __param(2, storage_1.IStorageService),
    __param(3, telemetry_1.ITelemetryService),
    __param(4, contextView_1.IContextMenuService),
    __param(5, partService_1.IPartService),
    __param(6, keybinding_1.IKeybindingService),
    __param(7, instantiation_1.IInstantiationService)
], PanelPart);
exports.PanelPart = PanelPart;
var ClosePanelAction = (function (_super) {
    __extends(ClosePanelAction, _super);
    function ClosePanelAction(id, name, partService) {
        var _this = _super.call(this, id, name, 'hide-panel-action') || this;
        _this.partService = partService;
        return _this;
    }
    ClosePanelAction.prototype.run = function () {
        this.partService.setPanelHidden(true);
        return winjs_base_1.TPromise.as(true);
    };
    return ClosePanelAction;
}(actions_1.Action));
ClosePanelAction.ID = 'workbench.action.closePanel';
ClosePanelAction.LABEL = nls.localize('closePanel', "Close Panel");
ClosePanelAction = __decorate([
    __param(2, partService_1.IPartService)
], ClosePanelAction);
var TogglePanelAction = (function (_super) {
    __extends(TogglePanelAction, _super);
    function TogglePanelAction(id, name, partService) {
        var _this = _super.call(this, id, name, partService.isVisible(partService_1.Parts.PANEL_PART) ? 'panel expanded' : 'panel') || this;
        _this.partService = partService;
        return _this;
    }
    TogglePanelAction.prototype.run = function () {
        this.partService.setPanelHidden(this.partService.isVisible(partService_1.Parts.PANEL_PART));
        return winjs_base_1.TPromise.as(true);
    };
    return TogglePanelAction;
}(activitybarActions_1.ActivityAction));
TogglePanelAction.ID = 'workbench.action.togglePanel';
TogglePanelAction.LABEL = nls.localize('togglePanel', "Toggle Panel");
TogglePanelAction = __decorate([
    __param(2, partService_1.IPartService)
], TogglePanelAction);
exports.TogglePanelAction = TogglePanelAction;
var FocusPanelAction = (function (_super) {
    __extends(FocusPanelAction, _super);
    function FocusPanelAction(id, label, panelService, partService) {
        var _this = _super.call(this, id, label) || this;
        _this.panelService = panelService;
        _this.partService = partService;
        return _this;
    }
    FocusPanelAction.prototype.run = function () {
        // Show panel
        if (!this.partService.isVisible(partService_1.Parts.PANEL_PART)) {
            this.partService.setPanelHidden(false);
        }
        else {
            var panel = this.panelService.getActivePanel();
            if (panel) {
                panel.focus();
            }
        }
        return winjs_base_1.TPromise.as(true);
    };
    return FocusPanelAction;
}(actions_1.Action));
FocusPanelAction.ID = 'workbench.action.focusPanel';
FocusPanelAction.LABEL = nls.localize('focusPanel', "Focus into Panel");
FocusPanelAction = __decorate([
    __param(2, panelService_1.IPanelService),
    __param(3, partService_1.IPartService)
], FocusPanelAction);
var ToggleMaximizedPanelAction = (function (_super) {
    __extends(ToggleMaximizedPanelAction, _super);
    function ToggleMaximizedPanelAction(id, label, partService) {
        var _this = _super.call(this, id, label) || this;
        _this.partService = partService;
        return _this;
    }
    ToggleMaximizedPanelAction.prototype.run = function () {
        // Show panel
        this.partService.setPanelHidden(false);
        this.partService.toggleMaximizedPanel();
        return winjs_base_1.TPromise.as(true);
    };
    return ToggleMaximizedPanelAction;
}(actions_1.Action));
ToggleMaximizedPanelAction.ID = 'workbench.action.toggleMaximizedPanel';
ToggleMaximizedPanelAction.LABEL = nls.localize('toggleMaximizedPanel', "Toggle Maximized Panel");
ToggleMaximizedPanelAction = __decorate([
    __param(2, partService_1.IPartService)
], ToggleMaximizedPanelAction);
var actionRegistry = platform_1.Registry.as(actionRegistry_1.Extensions.WorkbenchActions);
actionRegistry.registerWorkbenchAction(new actions_2.SyncActionDescriptor(TogglePanelAction, TogglePanelAction.ID, TogglePanelAction.LABEL, { primary: 32768 /* CtrlCmd */ | 40 /* KEY_J */ }), 'View: Toggle Panel Visibility', nls.localize('view', "View"));
actionRegistry.registerWorkbenchAction(new actions_2.SyncActionDescriptor(FocusPanelAction, FocusPanelAction.ID, FocusPanelAction.LABEL), 'View: Focus into Panel', nls.localize('view', "View"));
actionRegistry.registerWorkbenchAction(new actions_2.SyncActionDescriptor(ToggleMaximizedPanelAction, ToggleMaximizedPanelAction.ID, ToggleMaximizedPanelAction.LABEL), 'View: Toggle Maximized Panel', nls.localize('view', "View"));
actionRegistry.registerWorkbenchAction(new actions_2.SyncActionDescriptor(ClosePanelAction, ClosePanelAction.ID, ClosePanelAction.LABEL), 'View: Close Panel', nls.localize('view', "View"));
