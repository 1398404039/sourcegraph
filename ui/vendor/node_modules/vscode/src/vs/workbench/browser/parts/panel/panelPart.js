/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
require("./media/panelpart.css");
var nls = require("vs/nls");
var winjs_base_1 = require("vs/base/common/winjs.base");
var builder_1 = require("vs/base/browser/builder");
var platform_1 = require("vs/platform/platform");
var actionBarRegistry_1 = require("vs/workbench/browser/actionBarRegistry");
var compositePart_1 = require("vs/workbench/browser/parts/compositePart");
var panel_1 = require("vs/workbench/browser/panel");
var partService_1 = require("vs/workbench/services/part/common/partService");
var storage_1 = require("vs/platform/storage/common/storage");
var contextView_1 = require("vs/platform/contextview/browser/contextView");
var message_1 = require("vs/platform/message/common/message");
var telemetry_1 = require("vs/platform/telemetry/common/telemetry");
var keybinding_1 = require("vs/platform/keybinding/common/keybinding");
var instantiation_1 = require("vs/platform/instantiation/common/instantiation");
var actionbar_1 = require("vs/base/browser/ui/actionbar/actionbar");
var panelActions_1 = require("vs/workbench/browser/parts/panel/panelActions");
var PanelPart = (function (_super) {
    __extends(PanelPart, _super);
    function PanelPart(id, messageService, storageService, telemetryService, contextMenuService, partService, keybindingService, instantiationService) {
        var _this = _super.call(this, messageService, storageService, telemetryService, contextMenuService, partService, keybindingService, instantiationService, platform_1.Registry.as(panel_1.Extensions.Panels), PanelPart.activePanelSettingsKey, 'panel', 'panel', actionBarRegistry_1.Scope.PANEL, id, { hasTitle: true }) || this;
        _this.panelIdToActions = Object.create(null);
        _this.registerListeners();
        return _this;
    }
    PanelPart.prototype.registerListeners = function () {
        var _this = this;
        // Activate panel action on opening of a panel
        this.toUnbind.push(this.onDidPanelOpen(function (panel) { return _this.updatePanelActions(panel.getId(), true); }));
        // Deactivate panel action on close
        this.toUnbind.push(this.onDidPanelClose(function (panel) { return _this.updatePanelActions(panel.getId(), false); }));
    };
    PanelPart.prototype.updatePanelActions = function (id, didOpen) {
        if (this.panelIdToActions[id]) {
            didOpen ? this.panelIdToActions[id].activate() : this.panelIdToActions[id].deactivate();
        }
    };
    Object.defineProperty(PanelPart.prototype, "onDidPanelOpen", {
        get: function () {
            return this._onDidCompositeOpen.event;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PanelPart.prototype, "onDidPanelClose", {
        get: function () {
            return this._onDidCompositeClose.event;
        },
        enumerable: true,
        configurable: true
    });
    PanelPart.prototype.openPanel = function (id, focus) {
        var _this = this;
        if (this.blockOpeningPanel) {
            return winjs_base_1.TPromise.as(null); // Workaround against a potential race condition
        }
        // First check if panel is hidden and show if so
        var promise = winjs_base_1.TPromise.as(null);
        if (!this.partService.isVisible(partService_1.Parts.PANEL_PART)) {
            try {
                this.blockOpeningPanel = true;
                promise = this.partService.setPanelHidden(false);
            }
            finally {
                this.blockOpeningPanel = false;
            }
        }
        return promise.then(function () { return _this.openComposite(id, focus); });
    };
    PanelPart.prototype.getPanels = function () {
        return platform_1.Registry.as(panel_1.Extensions.Panels).getPanels()
            .sort(function (v1, v2) { return v1.order - v2.order; });
    };
    PanelPart.prototype.getActions = function () {
        return [this.instantiationService.createInstance(panelActions_1.ClosePanelAction, panelActions_1.ClosePanelAction.ID, panelActions_1.ClosePanelAction.LABEL)];
    };
    PanelPart.prototype.getActivePanel = function () {
        return this.getActiveComposite();
    };
    PanelPart.prototype.getLastActivePanelId = function () {
        return this.getLastActiveCompositetId();
    };
    PanelPart.prototype.hideActivePanel = function () {
        return this.hideActiveComposite().then(function (composite) { return void 0; });
    };
    PanelPart.prototype.createTitleLabel = function (parent) {
        var _this = this;
        var titleArea = builder_1.$(parent).div({
            'class': ['panel-switcher-container']
        });
        // Show a panel switcher
        this.panelSwitcherBar = new actionbar_1.ActionBar(titleArea, {
            orientation: actionbar_1.ActionsOrientation.HORIZONTAL,
            ariaLabel: nls.localize('panelSwitcherBarAriaLabel', "Active Panel Switcher"),
            animated: false
        });
        this.toUnbind.push(this.panelSwitcherBar);
        this.fillPanelSwitcher();
        return {
            updateTitle: function (id, title, keybinding) {
                var action = _this.panelIdToActions[id];
                if (action) {
                    action.label = title;
                }
            }
        };
    };
    PanelPart.prototype.fillPanelSwitcher = function () {
        var _this = this;
        var panels = this.getPanels();
        this.panelSwitcherBar.push(panels.map(function (panel) {
            var action = _this.instantiationService.createInstance(panelActions_1.PanelAction, panel);
            _this.panelIdToActions[panel.id] = action;
            _this.toUnbind.push(action);
            return action;
        }));
    };
    return PanelPart;
}(compositePart_1.CompositePart));
PanelPart.activePanelSettingsKey = 'workbench.panelpart.activepanelid';
PanelPart = __decorate([
    __param(1, message_1.IMessageService),
    __param(2, storage_1.IStorageService),
    __param(3, telemetry_1.ITelemetryService),
    __param(4, contextView_1.IContextMenuService),
    __param(5, partService_1.IPartService),
    __param(6, keybinding_1.IKeybindingService),
    __param(7, instantiation_1.IInstantiationService)
], PanelPart);
exports.PanelPart = PanelPart;
