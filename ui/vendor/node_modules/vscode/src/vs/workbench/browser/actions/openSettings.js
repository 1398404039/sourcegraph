/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var winjs_base_1 = require('vs/base/common/winjs.base');
var nls = require('vs/nls');
var uri_1 = require('vs/base/common/uri');
var network = require('vs/base/common/network');
var labels = require('vs/base/common/labels');
var platform_1 = require('vs/platform/platform');
var actions_1 = require('vs/base/common/actions');
var strings = require('vs/base/common/strings');
var actionRegistry_1 = require('vs/workbench/common/actionRegistry');
var stringEditorInput_1 = require('vs/workbench/common/editor/stringEditorInput');
var model_1 = require('vs/platform/configuration/common/model');
var editorService_1 = require('vs/workbench/services/editor/common/editorService');
var workspace_1 = require('vs/platform/workspace/common/workspace');
var configuration_1 = require('vs/workbench/services/configuration/common/configuration');
var editor_1 = require('vs/platform/editor/common/editor');
var groupService_1 = require('vs/workbench/services/group/common/groupService');
var storage_1 = require('vs/platform/storage/common/storage');
var files_1 = require('vs/platform/files/common/files');
var message_1 = require('vs/platform/message/common/message');
var keybinding_1 = require('vs/platform/keybinding/common/keybinding');
var actions_2 = require('vs/platform/actions/common/actions');
var instantiation_1 = require('vs/platform/instantiation/common/instantiation');
var environment_1 = require('vs/platform/environment/common/environment');
var BaseTwoEditorsAction = (function (_super) {
    __extends(BaseTwoEditorsAction, _super);
    function BaseTwoEditorsAction(id, label, editorService, editorGroupService, fileService, configurationService, messageService, contextService, keybindingService, instantiationService) {
        _super.call(this, id, label);
        this.editorService = editorService;
        this.editorGroupService = editorGroupService;
        this.fileService = fileService;
        this.configurationService = configurationService;
        this.messageService = messageService;
        this.contextService = contextService;
        this.keybindingService = keybindingService;
        this.instantiationService = instantiationService;
        this.enabled = true;
    }
    BaseTwoEditorsAction.prototype.createIfNotExists = function (resource, contents) {
        var _this = this;
        return this.fileService.resolveContent(resource, { acceptTextOnly: true }).then(null, function (error) {
            if (error.fileOperationResult === files_1.FileOperationResult.FILE_NOT_FOUND) {
                return _this.fileService.updateContent(resource, contents).then(null, function (error) {
                    return winjs_base_1.TPromise.wrapError(new Error(nls.localize('fail.createSettings', "Unable to create '{0}' ({1}).", labels.getPathLabel(resource, _this.contextService), error)));
                });
            }
            return winjs_base_1.TPromise.wrapError(error);
        });
    };
    BaseTwoEditorsAction.prototype.openTwoEditors = function (leftHandDefaultInput, editableResource, defaultEditableContents) {
        var _this = this;
        // Create as needed and open in editor
        return this.createIfNotExists(editableResource, defaultEditableContents).then(function () {
            return _this.editorService.createInput({ resource: editableResource }).then(function (typedRightHandEditableInput) {
                var editors = [
                    { input: leftHandDefaultInput, position: editor_1.Position.LEFT, options: { pinned: true } },
                    { input: typedRightHandEditableInput, position: editor_1.Position.CENTER, options: { pinned: true } }
                ];
                return _this.editorService.openEditors(editors).then(function () {
                    _this.editorGroupService.focusGroup(editor_1.Position.CENTER);
                });
            });
        });
    };
    BaseTwoEditorsAction = __decorate([
        __param(2, editorService_1.IWorkbenchEditorService),
        __param(3, groupService_1.IEditorGroupService),
        __param(4, files_1.IFileService),
        __param(5, configuration_1.IWorkspaceConfigurationService),
        __param(6, message_1.IMessageService),
        __param(7, workspace_1.IWorkspaceContextService),
        __param(8, keybinding_1.IKeybindingService),
        __param(9, instantiation_1.IInstantiationService)
    ], BaseTwoEditorsAction);
    return BaseTwoEditorsAction;
}(actions_1.Action));
exports.BaseTwoEditorsAction = BaseTwoEditorsAction;
var BaseOpenSettingsAction = (function (_super) {
    __extends(BaseOpenSettingsAction, _super);
    function BaseOpenSettingsAction(id, label, editorService, editorGroupService, fileService, configurationService, messageService, contextService, keybindingService, instantiationService) {
        _super.call(this, id, label, editorService, editorGroupService, fileService, configurationService, messageService, contextService, keybindingService, instantiationService);
    }
    BaseOpenSettingsAction.prototype.open = function (emptySettingsContents, settingsResource) {
        var _this = this;
        var openDefaultSettings = !!this.configurationService.getConfiguration().workbench.settings.openDefaultSettings;
        if (openDefaultSettings) {
            return this.openTwoEditors(DefaultSettingsInput.getInstance(this.instantiationService, this.configurationService), settingsResource, emptySettingsContents);
        }
        // Create as needed and open in editor
        return this.createIfNotExists(settingsResource, emptySettingsContents).then(function () { return _this.editorService.openEditor({
            resource: settingsResource,
            options: { pinned: true }
        }).then(function () { return null; }); });
    };
    BaseOpenSettingsAction = __decorate([
        __param(2, editorService_1.IWorkbenchEditorService),
        __param(3, groupService_1.IEditorGroupService),
        __param(4, files_1.IFileService),
        __param(5, configuration_1.IWorkspaceConfigurationService),
        __param(6, message_1.IMessageService),
        __param(7, workspace_1.IWorkspaceContextService),
        __param(8, keybinding_1.IKeybindingService),
        __param(9, instantiation_1.IInstantiationService)
    ], BaseOpenSettingsAction);
    return BaseOpenSettingsAction;
}(BaseTwoEditorsAction));
exports.BaseOpenSettingsAction = BaseOpenSettingsAction;
var OpenGlobalSettingsAction = (function (_super) {
    __extends(OpenGlobalSettingsAction, _super);
    function OpenGlobalSettingsAction(id, label, editorService, editorGroupService, fileService, configurationService, messageService, contextService, keybindingService, instantiationService, storageService, environmentService) {
        _super.call(this, id, label, editorService, editorGroupService, fileService, configurationService, messageService, contextService, keybindingService, instantiationService);
        this.storageService = storageService;
        this.environmentService = environmentService;
    }
    OpenGlobalSettingsAction.prototype.run = function (event) {
        var _this = this;
        // Inform user about workspace settings
        if (this.configurationService.hasWorkspaceConfiguration() && !this.storageService.getBoolean(OpenGlobalSettingsAction.SETTINGS_INFO_IGNORE_KEY, storage_1.StorageScope.WORKSPACE)) {
            this.messageService.show(message_1.Severity.Info, {
                message: nls.localize('workspaceHasSettings', "The currently opened folder contains workspace settings that may override user settings"),
                actions: [
                    new actions_1.Action('open.workspaceSettings', nls.localize('openWorkspaceSettings', "Open Workspace Settings"), null, true, function () {
                        var editorCount = _this.editorService.getVisibleEditors().length;
                        return _this.editorService.createInput({ resource: _this.contextService.toResource(configuration_1.WORKSPACE_CONFIG_DEFAULT_PATH) }).then(function (typedInput) {
                            return _this.editorService.openEditor(typedInput, { pinned: true }, editorCount === 2 ? editor_1.Position.RIGHT : editorCount === 1 ? editor_1.Position.CENTER : void 0);
                        });
                    }),
                    new actions_1.Action('neverShowAgain', nls.localize('neverShowAgain', "Don't show again"), null, true, function () {
                        _this.storageService.store(OpenGlobalSettingsAction.SETTINGS_INFO_IGNORE_KEY, true, storage_1.StorageScope.WORKSPACE);
                        return winjs_base_1.TPromise.as(true);
                    }),
                    message_1.CloseAction
                ]
            });
        }
        // Open settings
        var emptySettingsHeader = nls.localize('emptySettingsHeader', "Place your settings in this file to overwrite the default settings");
        return this.open('// ' + emptySettingsHeader + '\n{\n}', uri_1.default.file(this.environmentService.appSettingsPath));
    };
    OpenGlobalSettingsAction.ID = 'workbench.action.openGlobalSettings';
    OpenGlobalSettingsAction.LABEL = nls.localize('openGlobalSettings', "Open User Settings");
    OpenGlobalSettingsAction.SETTINGS_INFO_IGNORE_KEY = 'settings.workspace.info.ignore';
    OpenGlobalSettingsAction = __decorate([
        __param(2, editorService_1.IWorkbenchEditorService),
        __param(3, groupService_1.IEditorGroupService),
        __param(4, files_1.IFileService),
        __param(5, configuration_1.IWorkspaceConfigurationService),
        __param(6, message_1.IMessageService),
        __param(7, workspace_1.IWorkspaceContextService),
        __param(8, keybinding_1.IKeybindingService),
        __param(9, instantiation_1.IInstantiationService),
        __param(10, storage_1.IStorageService),
        __param(11, environment_1.IEnvironmentService)
    ], OpenGlobalSettingsAction);
    return OpenGlobalSettingsAction;
}(BaseOpenSettingsAction));
exports.OpenGlobalSettingsAction = OpenGlobalSettingsAction;
var OpenGlobalKeybindingsAction = (function (_super) {
    __extends(OpenGlobalKeybindingsAction, _super);
    function OpenGlobalKeybindingsAction(id, label, editorService, editorGroupService, fileService, configurationService, messageService, contextService, keybindingService, instantiationService, environmentService) {
        _super.call(this, id, label, editorService, editorGroupService, fileService, configurationService, messageService, contextService, keybindingService, instantiationService);
        this.environmentService = environmentService;
    }
    OpenGlobalKeybindingsAction.prototype.run = function (event) {
        var emptyContents = '// ' + nls.localize('emptyKeybindingsHeader', "Place your key bindings in this file to overwrite the defaults") + '\n[\n]';
        return this.openTwoEditors(DefaultKeybindingsInput.getInstance(this.instantiationService, this.keybindingService), uri_1.default.file(this.environmentService.appKeybindingsPath), emptyContents);
    };
    OpenGlobalKeybindingsAction.ID = 'workbench.action.openGlobalKeybindings';
    OpenGlobalKeybindingsAction.LABEL = nls.localize('openGlobalKeybindings', "Open Keyboard Shortcuts");
    OpenGlobalKeybindingsAction = __decorate([
        __param(2, editorService_1.IWorkbenchEditorService),
        __param(3, groupService_1.IEditorGroupService),
        __param(4, files_1.IFileService),
        __param(5, configuration_1.IWorkspaceConfigurationService),
        __param(6, message_1.IMessageService),
        __param(7, workspace_1.IWorkspaceContextService),
        __param(8, keybinding_1.IKeybindingService),
        __param(9, instantiation_1.IInstantiationService),
        __param(10, environment_1.IEnvironmentService)
    ], OpenGlobalKeybindingsAction);
    return OpenGlobalKeybindingsAction;
}(BaseTwoEditorsAction));
exports.OpenGlobalKeybindingsAction = OpenGlobalKeybindingsAction;
var OpenWorkspaceSettingsAction = (function (_super) {
    __extends(OpenWorkspaceSettingsAction, _super);
    function OpenWorkspaceSettingsAction() {
        _super.apply(this, arguments);
    }
    OpenWorkspaceSettingsAction.prototype.run = function (event) {
        if (!this.contextService.getWorkspace()) {
            this.messageService.show(message_1.Severity.Info, nls.localize('openFolderFirst', "Open a folder first to create workspace settings"));
            return;
        }
        var emptySettingsHeader = [
            '// ' + nls.localize('emptySettingsHeader1', "Place your settings in this file to overwrite default and user settings."),
            '{',
            '}'
        ].join('\n');
        return this.open(emptySettingsHeader, this.contextService.toResource('.vscode/settings.json'));
    };
    OpenWorkspaceSettingsAction.ID = 'workbench.action.openWorkspaceSettings';
    OpenWorkspaceSettingsAction.LABEL = nls.localize('openWorkspaceSettings', "Open Workspace Settings");
    return OpenWorkspaceSettingsAction;
}(BaseOpenSettingsAction));
exports.OpenWorkspaceSettingsAction = OpenWorkspaceSettingsAction;
var DefaultSettingsInput = (function (_super) {
    __extends(DefaultSettingsInput, _super);
    function DefaultSettingsInput() {
        _super.apply(this, arguments);
    }
    DefaultSettingsInput.getInstance = function (instantiationService, configurationService) {
        if (!DefaultSettingsInput.INSTANCE) {
            var editorConfig = configurationService.getConfiguration();
            var defaults = model_1.getDefaultValuesContent(editorConfig.editor.insertSpaces ? strings.repeat(' ', editorConfig.editor.tabSize) : '\t');
            var defaultsHeader = '// ' + nls.localize('defaultSettingsHeader', "Overwrite settings by placing them into your settings file.");
            defaultsHeader += '\n// ' + nls.localize('defaultSettingsHeader2', "See http://go.microsoft.com/fwlink/?LinkId=808995 for the most commonly used settings.");
            DefaultSettingsInput.INSTANCE = instantiationService.createInstance(DefaultSettingsInput, nls.localize('defaultName', "Default Settings"), null, defaultsHeader + '\n' + defaults, 'application/json', false);
        }
        return DefaultSettingsInput.INSTANCE;
    };
    DefaultSettingsInput.prototype.getResource = function () {
        return uri_1.default.from({ scheme: network.Schemas.vscode, authority: 'defaultsettings', path: '/settings.json' }); // URI is used to register JSON schema support
    };
    return DefaultSettingsInput;
}(stringEditorInput_1.StringEditorInput));
var DefaultKeybindingsInput = (function (_super) {
    __extends(DefaultKeybindingsInput, _super);
    function DefaultKeybindingsInput() {
        _super.apply(this, arguments);
    }
    DefaultKeybindingsInput.getInstance = function (instantiationService, keybindingService) {
        if (!DefaultKeybindingsInput.INSTANCE) {
            var defaultsHeader = '// ' + nls.localize('defaultKeybindingsHeader', "Overwrite key bindings by placing them into your key bindings file.");
            var defaultContents = keybindingService.getDefaultKeybindings();
            DefaultKeybindingsInput.INSTANCE = instantiationService.createInstance(DefaultKeybindingsInput, nls.localize('defaultKeybindings', "Default Keyboard Shortcuts"), null, defaultsHeader + '\n' + defaultContents, 'application/json', false);
        }
        return DefaultKeybindingsInput.INSTANCE;
    };
    DefaultKeybindingsInput.prototype.getResource = function () {
        return uri_1.default.from({ scheme: network.Schemas.vscode, authority: 'defaultsettings', path: '/keybindings.json' }); // URI is used to register JSON schema support
    };
    return DefaultKeybindingsInput;
}(stringEditorInput_1.StringEditorInput));
// Contribute Global Actions
var category = nls.localize('preferences', "Preferences");
var registry = platform_1.Registry.as(actionRegistry_1.Extensions.WorkbenchActions);
registry.registerWorkbenchAction(new actions_2.SyncActionDescriptor(OpenGlobalSettingsAction, OpenGlobalSettingsAction.ID, OpenGlobalSettingsAction.LABEL, {
    primary: null,
    mac: { primary: 32768 /* CtrlCmd */ | 82 /* US_COMMA */ }
}), 'Preferences: Open User Settings', category);
registry.registerWorkbenchAction(new actions_2.SyncActionDescriptor(OpenGlobalKeybindingsAction, OpenGlobalKeybindingsAction.ID, OpenGlobalKeybindingsAction.LABEL), 'Preferences: Open Keyboard Shortcuts', category);
registry.registerWorkbenchAction(new actions_2.SyncActionDescriptor(OpenWorkspaceSettingsAction, OpenWorkspaceSettingsAction.ID, OpenWorkspaceSettingsAction.LABEL), 'Preferences: Open Workspace Settings', category);
