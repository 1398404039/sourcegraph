/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var lifecycle_1 = require("vs/base/common/lifecycle");
var editorBrowserExtensions_1 = require("vs/editor/browser/editorBrowserExtensions");
var webview_1 = require("./webview");
var HtmlZone = (function () {
    function HtmlZone(lineNumber, htmlContent) {
        this.lineNumber = lineNumber;
        this.htmlContent = htmlContent;
        this._disposables = [];
    }
    HtmlZone.prototype.dispose = function () {
        lifecycle_1.dispose(this._disposables);
    };
    Object.defineProperty(HtmlZone.prototype, "domNode", {
        get: function () {
            var _this = this;
            if (!this._domNode) {
                this._domNode = document.createElement('div');
                var observer_1 = new MutationObserver(function (_) { return _this._onVisibilityChanged(); });
                observer_1.observe(this._domNode, { attributes: true, attributeFilter: ['monaco-visible-view-zone'] });
                this._disposables.push({ dispose: function () { return observer_1.disconnect(); } });
            }
            return this._domNode;
        },
        enumerable: true,
        configurable: true
    });
    HtmlZone.prototype._onVisibilityChanged = function () {
        if (this._domNode.hasAttribute('monaco-visible-view-zone') && !this._webview) {
            this._webview = new webview_1.default(this.domNode, document.querySelector('.monaco-editor-background'), { nodeintegration: true });
            this._disposables.push(this._webview);
            this._webview.contents = [this.htmlContent];
        }
    };
    Object.defineProperty(HtmlZone.prototype, "afterLineNumber", {
        get: function () {
            return this.lineNumber;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HtmlZone.prototype, "heightInLines", {
        get: function () {
            return 6;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HtmlZone.prototype, "suppressMouseDown", {
        get: function () {
            return false;
        },
        enumerable: true,
        configurable: true
    });
    return HtmlZone;
}());
var HtmlZoneController = (function () {
    function HtmlZoneController(editor) {
        var _this = this;
        this._zones = [];
        this._editor = editor;
        this._editor.onDidChangeModel(function () { return _this._zones = lifecycle_1.dispose(_this._zones); });
    }
    HtmlZoneController.getInstance = function (editor) {
        return editor.getContribution('htmlZoneContribution');
    };
    HtmlZoneController.prototype.getId = function () {
        return 'htmlZoneContribution';
    };
    HtmlZoneController.prototype.dispose = function () {
        lifecycle_1.dispose(this._zones);
    };
    HtmlZoneController.prototype.addZone = function (lineNumber, htmlContents) {
        var zone = new HtmlZone(lineNumber, htmlContents);
        this._zones.push(zone);
        this._editor.changeViewZones(function (accessor) {
            zone.zoneId = accessor.addZone(zone);
            console.log('ADDED new zone #', zone.zoneId);
        });
    };
    return HtmlZoneController;
}());
HtmlZoneController = __decorate([
    editorBrowserExtensions_1.editorContribution
], HtmlZoneController);
exports.HtmlZoneController = HtmlZoneController;
