/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var lifecycle = require("vs/base/common/lifecycle");
var paths = require("vs/base/common/paths");
var nls_1 = require("vs/nls");
var winjs_base_1 = require("vs/base/common/winjs.base");
var mime_1 = require("vs/base/common/mime");
var modelService_1 = require("vs/editor/common/services/modelService");
var modeService_1 = require("vs/editor/common/services/modeService");
var resolverService_1 = require("vs/editor/common/services/resolverService");
var debug_1 = require("vs/workbench/parts/debug/common/debug");
var DebugContentProvider = (function () {
    function DebugContentProvider(textModelResolverService, debugService, modelService, modeService) {
        var _this = this;
        this.debugService = debugService;
        this.modelService = modelService;
        this.modeService = modeService;
        textModelResolverService.registerTextModelContentProvider(debug_1.DEBUG_SCHEME, this);
        this.modelsToDispose = [];
        this.debugService.onDidChangeState(function () {
            if (_this.debugService.state === debug_1.State.Inactive) {
                _this.modelsToDispose = lifecycle.dispose(_this.modelsToDispose);
            }
        });
    }
    DebugContentProvider.prototype.getId = function () {
        return 'debug.contentprovider';
    };
    DebugContentProvider.prototype.provideTextContent = function (resource) {
        var _this = this;
        var process = this.debugService.getViewModel().focusedProcess;
        if (!process) {
            return winjs_base_1.TPromise.wrapError(nls_1.localize('unable', "Unable to resolve the resource without a debug session"));
        }
        var source = process.sources.get(resource.toString());
        var rawSource = source ? source.raw : { path: paths.normalize(resource.fsPath, true) };
        return process.session.source({ sourceReference: source ? source.reference : undefined, source: rawSource }).then(function (response) {
            var mime = response.body.mimeType || mime_1.guessMimeTypes(resource.toString())[0];
            var modePromise = _this.modeService.getOrCreateMode(mime);
            var model = _this.modelService.createModel(response.body.content, modePromise, resource);
            _this.modelsToDispose.push(model);
            return model;
        }, function (err) {
            _this.debugService.deemphasizeSource(resource);
            var modePromise = _this.modeService.getOrCreateMode(mime_1.MIME_TEXT);
            var model = _this.modelService.createModel(err.message, modePromise, resource);
            return model;
        });
    };
    return DebugContentProvider;
}());
DebugContentProvider = __decorate([
    __param(0, resolverService_1.ITextModelResolverService),
    __param(1, debug_1.IDebugService),
    __param(2, modelService_1.IModelService),
    __param(3, modeService_1.IModeService)
], DebugContentProvider);
exports.DebugContentProvider = DebugContentProvider;
