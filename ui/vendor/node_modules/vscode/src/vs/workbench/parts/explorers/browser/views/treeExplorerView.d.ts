import { TPromise } from 'vs/base/common/winjs.base';
import { Builder } from 'vs/base/browser/builder';
import { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';
import { CollapsibleViewletView } from 'vs/workbench/browser/viewlet';
import { IAction, IActionRunner } from 'vs/base/common/actions';
import { IMessageService } from 'vs/platform/message/common/message';
import { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';
import { IContextMenuService } from 'vs/platform/contextview/browser/contextView';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import { ITreeExplorerService } from 'vs/workbench/parts/explorers/common/treeExplorerService';
import { ITree } from 'vs/base/parts/tree/browser/tree';
import { TreeExplorerViewletState } from 'vs/workbench/parts/explorers/browser/views/treeExplorerViewer';
export declare class TreeExplorerView extends CollapsibleViewletView {
    private viewletState;
    private treeNodeProviderId;
    private instantiationService;
    private treeExplorerService;
    private workspace;
    constructor(viewletState: TreeExplorerViewletState, treeNodeProviderId: string, actionRunner: IActionRunner, headerSize: number, messageService: IMessageService, keybindingService: IKeybindingService, contextMenuService: IContextMenuService, contextService: IWorkspaceContextService, instantiationService: IInstantiationService, treeExplorerService: ITreeExplorerService);
    renderBody(container: HTMLElement): void;
    createViewer(container: Builder): ITree;
    getActions(): IAction[];
    create(): TPromise<void>;
    setVisible(visible: boolean): TPromise<void>;
    updateInput(): TPromise<void>;
    getOptimalWidth(): number;
}
