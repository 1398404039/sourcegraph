import { IActionRunner, IAction } from 'vs/base/common/actions';
import { CollapsibleViewletView, AdaptiveCollapsibleViewletView } from 'vs/workbench/browser/viewlet';
import { IDebugService } from 'vs/workbench/parts/debug/common/debug';
import { IContextMenuService } from 'vs/platform/contextview/browser/contextView';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';
import { IMessageService } from 'vs/platform/message/common/message';
import { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';
export declare class VariablesView extends CollapsibleViewletView {
    private settings;
    private telemetryService;
    private debugService;
    private instantiationService;
    private static MEMENTO;
    private onFocusStackFrameScheduler;
    constructor(actionRunner: IActionRunner, settings: any, messageService: IMessageService, contextMenuService: IContextMenuService, telemetryService: ITelemetryService, debugService: IDebugService, keybindingService: IKeybindingService, instantiationService: IInstantiationService);
    renderHeader(container: HTMLElement): void;
    renderBody(container: HTMLElement): void;
    shutdown(): void;
}
export declare class WatchExpressionsView extends CollapsibleViewletView {
    private settings;
    private debugService;
    private instantiationService;
    private static MEMENTO;
    private onWatchExpressionsUpdatedScheduler;
    private toReveal;
    constructor(actionRunner: IActionRunner, settings: any, messageService: IMessageService, contextMenuService: IContextMenuService, debugService: IDebugService, keybindingService: IKeybindingService, instantiationService: IInstantiationService);
    renderHeader(container: HTMLElement): void;
    renderBody(container: HTMLElement): void;
    shutdown(): void;
}
export declare class CallStackView extends CollapsibleViewletView {
    private settings;
    private telemetryService;
    private debugService;
    private instantiationService;
    private static MEMENTO;
    private pauseMessage;
    private pauseMessageLabel;
    private onCallStackChangeScheduler;
    constructor(actionRunner: IActionRunner, settings: any, messageService: IMessageService, contextMenuService: IContextMenuService, telemetryService: ITelemetryService, debugService: IDebugService, keybindingService: IKeybindingService, instantiationService: IInstantiationService);
    renderHeader(container: HTMLElement): void;
    renderBody(container: HTMLElement): void;
    shutdown(): void;
}
export declare class BreakpointsView extends AdaptiveCollapsibleViewletView {
    private settings;
    private debugService;
    private instantiationService;
    private static MAX_VISIBLE_FILES;
    private static MEMENTO;
    constructor(actionRunner: IActionRunner, settings: any, contextMenuService: IContextMenuService, debugService: IDebugService, keybindingService: IKeybindingService, instantiationService: IInstantiationService);
    renderHeader(container: HTMLElement): void;
    renderBody(container: HTMLElement): void;
    getActions(): IAction[];
    private onBreakpointsChange();
    private static getExpandedBodySize(length);
    shutdown(): void;
}
