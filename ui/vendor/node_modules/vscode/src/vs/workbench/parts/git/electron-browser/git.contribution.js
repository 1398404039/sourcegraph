/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var nls_1 = require("vs/nls");
var gitWorkbenchContributions_1 = require("vs/workbench/parts/git/browser/gitWorkbenchContributions");
var electronGitService_1 = require("vs/workbench/parts/git/electron-browser/electronGitService");
var git_1 = require("vs/workbench/parts/git/common/git");
var extensions_1 = require("vs/platform/instantiation/common/extensions");
var actions_1 = require("vs/platform/actions/common/actions");
var platform_1 = require("vs/platform/platform");
var gitActions_1 = require("./gitActions");
var actionRegistry_1 = require("vs/workbench/common/actionRegistry");
var scmPreview_1 = require("vs/workbench/parts/scm/browser/scmPreview");
var viewlet_1 = require("vs/workbench/browser/viewlet");
var viewlet_2 = require("vs/workbench/services/viewlet/browser/viewlet");
var editorService_1 = require("vs/workbench/services/editor/common/editorService");
// TODO@joao: remove
var OpenScmViewletAction = (function (_super) {
    __extends(OpenScmViewletAction, _super);
    function OpenScmViewletAction(id, label, viewletService, editorService) {
        return _super.call(this, id, label, 'workbench.view.scm', viewletService, editorService) || this;
    }
    return OpenScmViewletAction;
}(viewlet_1.ToggleViewletAction));
OpenScmViewletAction.ID = 'workbench.view.git'; // fake redirect
OpenScmViewletAction.LABEL = nls_1.localize('toggleSCMViewlet', "Show SCM");
OpenScmViewletAction = __decorate([
    __param(2, viewlet_2.IViewletService), __param(3, editorService_1.IWorkbenchEditorService)
], OpenScmViewletAction);
if (scmPreview_1.default.enabled) {
    platform_1.Registry.as(actionRegistry_1.Extensions.WorkbenchActions)
        .registerWorkbenchAction(new actions_1.SyncActionDescriptor(OpenScmViewletAction, OpenScmViewletAction.ID, OpenScmViewletAction.LABEL), 'View: Show SCM', 'View');
}
else {
    gitWorkbenchContributions_1.registerContributions();
    // Register Service
    extensions_1.registerSingleton(git_1.IGitService, electronGitService_1.ElectronGitService);
    var category = nls_1.localize('git', "Git");
    platform_1.Registry.as(actionRegistry_1.Extensions.WorkbenchActions)
        .registerWorkbenchAction(new actions_1.SyncActionDescriptor(gitActions_1.CloneAction, gitActions_1.CloneAction.ID, gitActions_1.CloneAction.LABEL), 'Git: Clone', category);
}
