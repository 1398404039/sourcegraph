/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
require("./welcomePage.css");
var uri_1 = require("vs/base/common/uri");
var path = require("path");
var platform = require("vs/base/common/platform");
var strings = require("vs/base/common/strings");
var arrays = require("vs/base/common/arrays");
var walkThroughInput_1 = require("vs/workbench/parts/welcome/walkThrough/node/walkThroughInput");
var partService_1 = require("vs/workbench/services/part/common/partService");
var instantiation_1 = require("vs/platform/instantiation/common/instantiation");
var editorService_1 = require("vs/workbench/services/editor/common/editorService");
var editor_1 = require("vs/platform/editor/common/editor");
var errors_1 = require("vs/base/common/errors");
var windows_1 = require("vs/platform/windows/common/windows");
var winjs_base_1 = require("vs/base/common/winjs.base");
var workspace_1 = require("vs/platform/workspace/common/workspace");
var configuration_1 = require("vs/platform/configuration/common/configuration");
var configurationEditing_1 = require("vs/workbench/services/configuration/common/configurationEditing");
var nls_1 = require("vs/nls");
var actions_1 = require("vs/base/common/actions");
var telemetry_1 = require("vs/platform/telemetry/common/telemetry");
var environment_1 = require("vs/platform/environment/common/environment");
var network_1 = require("vs/base/common/network");
var backup_1 = require("vs/workbench/services/backup/common/backup");
var message_1 = require("vs/platform/message/common/message");
var keymapExtensions_1 = require("vs/workbench/parts/extensions/electron-browser/keymapExtensions");
var extensionManagement_1 = require("vs/platform/extensionManagement/common/extensionManagement");
var vs_code_welcome_page_1 = require("vs/workbench/parts/welcome/page/electron-browser/vs_code_welcome_page");
var lifecycle_1 = require("vs/platform/lifecycle/common/lifecycle");
var lifecycle_2 = require("vs/base/common/lifecycle");
vs_code_welcome_page_1.used();
var enabledKey = 'workbench.welcome.enabled';
var telemetryFrom = 'welcomePage';
var WelcomePageContribution = (function () {
    function WelcomePageContribution(partService, instantiationService, configurationService, editorService, backupFileService, telemetryService) {
        var enabled = configurationService.lookup(enabledKey).value;
        if (enabled) {
            winjs_base_1.TPromise.join([
                backupFileService.hasBackups(),
                partService.joinCreation()
            ]).then(function (_a) {
                var hasBackups = _a[0];
                var activeInput = editorService.getActiveEditorInput();
                if (!activeInput && !hasBackups) {
                    instantiationService.createInstance(WelcomePage);
                }
            }).then(null, errors_1.onUnexpectedError);
        }
    }
    WelcomePageContribution.prototype.getId = function () {
        return 'vs.welcomePage';
    };
    return WelcomePageContribution;
}());
WelcomePageContribution = __decorate([
    __param(0, partService_1.IPartService),
    __param(1, instantiation_1.IInstantiationService),
    __param(2, configuration_1.IConfigurationService),
    __param(3, editorService_1.IWorkbenchEditorService),
    __param(4, backup_1.IBackupFileService),
    __param(5, telemetry_1.ITelemetryService)
], WelcomePageContribution);
exports.WelcomePageContribution = WelcomePageContribution;
var WelcomePageAction = (function (_super) {
    __extends(WelcomePageAction, _super);
    function WelcomePageAction(id, label, instantiationService) {
        var _this = _super.call(this, id, label) || this;
        _this.instantiationService = instantiationService;
        return _this;
    }
    WelcomePageAction.prototype.run = function () {
        this.instantiationService.createInstance(WelcomePage);
        return null;
    };
    return WelcomePageAction;
}(actions_1.Action));
WelcomePageAction.ID = 'workbench.action.showWelcomePage';
WelcomePageAction.LABEL = nls_1.localize('welcomePage', "Welcome");
WelcomePageAction = __decorate([
    __param(2, instantiation_1.IInstantiationService)
], WelcomePageAction);
exports.WelcomePageAction = WelcomePageAction;
var reorderedQuickLinks = [
    'showInterfaceOverview',
    'selectTheme',
    'showRecommendedKeymapExtensions',
    'showCommands',
    'keybindingsReference',
    'openGlobalSettings',
    'showInteractivePlayground',
];
var WelcomePage = (function () {
    function WelcomePage(editorService, instantiationService, windowService, windowsService, contextService, configurationService, configurationEditingService, environmentService, messageService, extensionEnablementService, extensionGalleryService, extensionManagementService, lifecycleService, telemetryService) {
        var _this = this;
        this.editorService = editorService;
        this.instantiationService = instantiationService;
        this.windowService = windowService;
        this.windowsService = windowsService;
        this.contextService = contextService;
        this.configurationService = configurationService;
        this.configurationEditingService = configurationEditingService;
        this.environmentService = environmentService;
        this.messageService = messageService;
        this.extensionEnablementService = extensionEnablementService;
        this.extensionGalleryService = extensionGalleryService;
        this.extensionManagementService = extensionManagementService;
        this.telemetryService = telemetryService;
        this.disposables = [];
        this.disposables.push(lifecycleService.onShutdown(function () { return _this.dispose(); }));
        this.create();
    }
    WelcomePage.prototype.create = function () {
        var _this = this;
        var recentlyOpened = this.windowService.getRecentlyOpen();
        var installedKeymaps = this.instantiationService.invokeFunction(keymapExtensions_1.getInstalledKeymaps);
        var uri = uri_1.default.parse(require.toUrl('./vs_code_welcome_page'))
            .with({
            scheme: network_1.Schemas.walkThrough,
            query: JSON.stringify({ moduleId: 'vs/workbench/parts/welcome/page/electron-browser/vs_code_welcome_page' })
        });
        var input = this.instantiationService.createInstance(walkThroughInput_1.WalkThroughInput, nls_1.localize('welcome.title', "Welcome"), '', uri, telemetryFrom, function (container) { return _this.onReady(container, recentlyOpened, installedKeymaps); });
        this.editorService.openEditor(input, { pinned: true }, editor_1.Position.ONE)
            .then(null, errors_1.onUnexpectedError);
    };
    WelcomePage.prototype.onReady = function (container, recentlyOpened, installedKeymaps) {
        var _this = this;
        var enabled = this.configurationService.lookup(enabledKey).value;
        var showOnStartup = container.querySelector('#showOnStartup');
        if (enabled) {
            showOnStartup.setAttribute('checked', 'checked');
        }
        showOnStartup.addEventListener('click', function (e) {
            _this.configurationEditingService.writeConfiguration(configurationEditing_1.ConfigurationTarget.USER, { key: enabledKey, value: showOnStartup.checked })
                .then(null, function (error) { return _this.messageService.show(message_1.Severity.Error, error); });
        });
        recentlyOpened.then(function (_a) {
            var folders = _a.folders;
            if (_this.contextService.hasWorkspace()) {
                var current_1 = _this.contextService.getWorkspace().resource.fsPath;
                folders = folders.filter(function (folder) { return folder !== current_1; });
            }
            if (!folders.length) {
                var recent = container.querySelector('.welcomePage');
                recent.classList.add('emptyRecent');
                return;
            }
            var ul = container.querySelector('.recent ul');
            folders.slice(0, 5).forEach(function (folder) {
                var li = document.createElement('li');
                var a = document.createElement('a');
                var name = path.basename(folder);
                var parentFolder = path.dirname(folder);
                if (!name && parentFolder) {
                    var tmp = name;
                    name = parentFolder;
                    parentFolder = tmp;
                }
                a.innerText = name;
                a.title = folder;
                a.href = 'javascript:void(0)';
                a.addEventListener('click', function (e) {
                    _this.telemetryService.publicLog('workbenchActionExecuted', {
                        id: 'openRecentFolder',
                        from: telemetryFrom
                    });
                    _this.windowsService.openWindow([folder], { forceNewWindow: e.ctrlKey || e.metaKey });
                    e.preventDefault();
                    e.stopPropagation();
                });
                li.appendChild(a);
                var span = document.createElement('span');
                span.classList.add('path');
                if ((platform.isMacintosh || platform.isLinux) && strings.startsWith(parentFolder, _this.environmentService.userHome)) {
                    parentFolder = "~" + parentFolder.substr(_this.environmentService.userHome.length);
                }
                span.innerText = parentFolder;
                span.title = folder;
                li.appendChild(span);
                ul.appendChild(li);
            });
        }).then(null, errors_1.onUnexpectedError);
        if (this.telemetryService.getExperiments().reorderQuickLinks) {
            reorderedQuickLinks.forEach(function (clazz) {
                var link = container.querySelector(".commands ." + clazz);
                if (link) {
                    link.parentElement.appendChild(link);
                }
            });
        }
        container.addEventListener('click', function (event) {
            for (var node = event.target; node; node = node.parentNode) {
                if (node instanceof HTMLAnchorElement && node.classList.contains('installKeymap')) {
                    var keymapName = node.getAttribute('data-keymap-name');
                    var keymapIdentifier = node.getAttribute('data-keymap');
                    if (keymapName && keymapIdentifier) {
                        _this.installKeymap(keymapName, keymapIdentifier);
                        event.preventDefault();
                        event.stopPropagation();
                    }
                }
            }
        });
        this.updateInstalledKeymaps(container, installedKeymaps);
        this.disposables.push(this.instantiationService.invokeFunction(keymapExtensions_1.onKeymapExtensionChanged)(function (ids) {
            for (var _i = 0, ids_1 = ids; _i < ids_1.length; _i++) {
                var id = ids_1[_i];
                if (container.querySelector(".installKeymap[data-keymap=\"" + id + "\"], .currentKeymap[data-keymap=\"" + id + "\"]")) {
                    var installedKeymaps_1 = _this.instantiationService.invokeFunction(keymapExtensions_1.getInstalledKeymaps);
                    _this.updateInstalledKeymaps(container, installedKeymaps_1);
                    break;
                }
            }
            ;
        }));
    };
    WelcomePage.prototype.installKeymap = function (keymapName, keymapIdentifier) {
        var _this = this;
        this.telemetryService.publicLog('installKeymap', {
            from: telemetryFrom,
            extensionId: keymapIdentifier,
        });
        this.instantiationService.invokeFunction(keymapExtensions_1.getInstalledKeymaps).then(function (extensions) {
            var keymap = arrays.first(extensions, function (extension) { return extension.identifier === keymapIdentifier; });
            if (keymap && keymap.globallyEnabled) {
                _this.telemetryService.publicLog('installedKeymap', {
                    from: telemetryFrom,
                    extensionId: keymapIdentifier,
                    outcome: 'already_enabled',
                });
                _this.messageService.show(message_1.Severity.Info, nls_1.localize('welcomePage.keymapAlreadyInstalled', "The {0} keyboard shortcuts are already installed.", keymapName));
                return;
            }
            var foundAndInstalled = keymap ? winjs_base_1.TPromise.as(true) : _this.extensionGalleryService.query({ names: [keymapIdentifier] })
                .then(function (result) {
                var extension = result.firstPage[0];
                if (!extension) {
                    return false;
                }
                return _this.extensionManagementService.installFromGallery(extension)
                    .then(function () {
                    // TODO: Do this as part of the install to avoid multiple events.
                    return _this.extensionEnablementService.setEnablement(keymapIdentifier, false);
                }).then(function () {
                    return true;
                });
            });
            _this.messageService.show(message_1.Severity.Info, {
                message: nls_1.localize('welcomePage.willReloadAfterInstallingKeymap', "The window will reload after installing the {0} keyboard shortcuts.", keymapName),
                actions: [
                    new actions_1.Action('ok', nls_1.localize('ok', "OK"), null, true, function () {
                        var messageDelay = winjs_base_1.TPromise.timeout(300);
                        messageDelay.then(function () {
                            _this.messageService.show(message_1.Severity.Info, {
                                message: nls_1.localize('welcomePage.installingKeymap', "Installing the {0} keyboard shortcuts...", keymapName),
                                actions: [message_1.CloseAction]
                            });
                        });
                        winjs_base_1.TPromise.join(extensions.filter(function (extension) { return extension.globallyEnabled; })
                            .map(function (extension) {
                            return _this.extensionEnablementService.setEnablement(extension.identifier, false);
                        })).then(function () {
                            return foundAndInstalled.then(function (found) {
                                messageDelay.cancel();
                                if (found) {
                                    return _this.extensionEnablementService.setEnablement(keymapIdentifier, true)
                                        .then(function () {
                                        _this.telemetryService.publicLog('installedKeymap', {
                                            from: telemetryFrom,
                                            extensionId: keymapIdentifier,
                                            outcome: keymap ? 'enabled' : 'installed',
                                        });
                                        return _this.windowService.reloadWindow();
                                    });
                                }
                                else {
                                    _this.telemetryService.publicLog('installedKeymap', {
                                        from: telemetryFrom,
                                        extensionId: keymapIdentifier,
                                        outcome: 'not_found',
                                    });
                                    _this.messageService.show(message_1.Severity.Error, nls_1.localize('welcomePage.keymapNotFound', "The {0} keyboard shortcuts with id {1} could not be found.", keymapName, keymapIdentifier));
                                    return undefined;
                                }
                            });
                        }).then(null, function (err) {
                            _this.telemetryService.publicLog('installedKeymap', {
                                from: telemetryFrom,
                                extensionId: keymapIdentifier,
                                outcome: errors_1.isPromiseCanceledError(err) ? 'canceled' : 'error',
                                error: String(err),
                            });
                            _this.messageService.show(message_1.Severity.Error, err);
                        });
                        return winjs_base_1.TPromise.as(true);
                    }),
                    new actions_1.Action('cancel', nls_1.localize('cancel', "Cancel"), null, true, function () {
                        _this.telemetryService.publicLog('installedKeymap', {
                            from: telemetryFrom,
                            extensionId: keymapIdentifier,
                            outcome: 'user_canceled',
                        });
                        return winjs_base_1.TPromise.as(true);
                    })
                ]
            });
        }).then(null, function (err) {
            _this.telemetryService.publicLog('installedKeymap', {
                from: telemetryFrom,
                extensionId: keymapIdentifier,
                outcome: errors_1.isPromiseCanceledError(err) ? 'canceled' : 'error',
                error: String(err),
            });
            _this.messageService.show(message_1.Severity.Error, err);
        });
    };
    WelcomePage.prototype.updateInstalledKeymaps = function (container, installedKeymaps) {
        installedKeymaps.then(function (extensions) {
            var elements = container.querySelectorAll('.installKeymap, .currentKeymap');
            for (var i = 0; i < elements.length; i++) {
                elements[i].classList.remove('installed');
            }
            extensions.filter(function (ext) { return ext.globallyEnabled; })
                .map(function (ext) { return ext.identifier; })
                .forEach(function (id) {
                var install = container.querySelector(".installKeymap[data-keymap=\"" + id + "\"]");
                if (install) {
                    install.classList.add('installed');
                }
                var current = container.querySelector(".currentKeymap[data-keymap=\"" + id + "\"]");
                if (current) {
                    current.classList.add('installed');
                }
            });
        }).then(null, errors_1.onUnexpectedError);
    };
    WelcomePage.prototype.dispose = function () {
        this.disposables = lifecycle_2.dispose(this.disposables);
    };
    return WelcomePage;
}());
WelcomePage = __decorate([
    __param(0, editorService_1.IWorkbenchEditorService),
    __param(1, instantiation_1.IInstantiationService),
    __param(2, windows_1.IWindowService),
    __param(3, windows_1.IWindowsService),
    __param(4, workspace_1.IWorkspaceContextService),
    __param(5, configuration_1.IConfigurationService),
    __param(6, configurationEditing_1.IConfigurationEditingService),
    __param(7, environment_1.IEnvironmentService),
    __param(8, message_1.IMessageService),
    __param(9, extensionManagement_1.IExtensionEnablementService),
    __param(10, extensionManagement_1.IExtensionGalleryService),
    __param(11, extensionManagement_1.IExtensionManagementService),
    __param(12, lifecycle_1.ILifecycleService),
    __param(13, telemetry_1.ITelemetryService)
], WelcomePage);
