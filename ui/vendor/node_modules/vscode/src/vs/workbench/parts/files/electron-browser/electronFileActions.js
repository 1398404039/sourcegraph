/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var winjs_base_1 = require("vs/base/common/winjs.base");
var actions_1 = require("vs/base/common/actions");
var nls = require("vs/nls");
var paths = require("vs/base/common/paths");
var labels = require("vs/base/common/labels");
var platform = require("vs/base/common/platform");
var severity_1 = require("vs/base/common/severity");
var editorService_1 = require("vs/workbench/services/editor/common/editorService");
var editor_1 = require("vs/workbench/common/editor");
var message_1 = require("vs/platform/message/common/message");
var groupService_1 = require("vs/workbench/services/group/common/groupService");
var windows_1 = require("vs/platform/windows/common/windows");
var electron_1 = require("electron");
var RevealInOSAction = (function (_super) {
    __extends(RevealInOSAction, _super);
    function RevealInOSAction(resource, windowsService) {
        var _this = _super.call(this, 'workbench.action.files.revealInWindows', platform.isWindows ? nls.localize('revealInWindows', "Reveal in Explorer") : (platform.isMacintosh ? nls.localize('revealInMac', "Reveal in Finder") : nls.localize('openContainer', "Open Containing Folder"))) || this;
        _this.windowsService = windowsService;
        _this.resource = resource;
        _this.order = 45;
        return _this;
    }
    RevealInOSAction.prototype.run = function () {
        this.windowsService.showItemInFolder(paths.normalize(this.resource.fsPath, true));
        return winjs_base_1.TPromise.as(true);
    };
    return RevealInOSAction;
}(actions_1.Action));
RevealInOSAction = __decorate([
    __param(1, windows_1.IWindowsService)
], RevealInOSAction);
exports.RevealInOSAction = RevealInOSAction;
var GlobalRevealInOSAction = (function (_super) {
    __extends(GlobalRevealInOSAction, _super);
    function GlobalRevealInOSAction(id, label, editorService, windowsService, messageService) {
        var _this = _super.call(this, id, label) || this;
        _this.editorService = editorService;
        _this.windowsService = windowsService;
        _this.messageService = messageService;
        return _this;
    }
    GlobalRevealInOSAction.prototype.run = function () {
        var fileInput = editor_1.asFileEditorInput(this.editorService.getActiveEditorInput(), true);
        if (fileInput) {
            this.windowsService.showItemInFolder(paths.normalize(fileInput.getResource().fsPath, true));
        }
        else {
            this.messageService.show(severity_1.default.Info, nls.localize('openFileToReveal', "Open a file first to reveal"));
        }
        return winjs_base_1.TPromise.as(true);
    };
    return GlobalRevealInOSAction;
}(actions_1.Action));
GlobalRevealInOSAction.ID = 'workbench.action.files.revealActiveFileInWindows';
GlobalRevealInOSAction.LABEL = platform.isWindows ? nls.localize('revealActiveFileInWindows', "Reveal Active File in Windows Explorer") : (platform.isMacintosh ? nls.localize('revealActiveFileInMac', "Reveal Active File in Finder") : nls.localize('openActiveFileContainer', "Open Containing Folder of Active File"));
GlobalRevealInOSAction = __decorate([
    __param(2, editorService_1.IWorkbenchEditorService),
    __param(3, windows_1.IWindowsService),
    __param(4, message_1.IMessageService)
], GlobalRevealInOSAction);
exports.GlobalRevealInOSAction = GlobalRevealInOSAction;
var CopyPathAction = (function (_super) {
    __extends(CopyPathAction, _super);
    function CopyPathAction(resource) {
        var _this = _super.call(this, 'workbench.action.files.copyPath', nls.localize('copyPath', "Copy Path")) || this;
        _this.resource = resource;
        _this.order = 140;
        return _this;
    }
    CopyPathAction.prototype.run = function () {
        electron_1.clipboard.writeText(labels.getPathLabel(this.resource));
        return winjs_base_1.TPromise.as(true);
    };
    return CopyPathAction;
}(actions_1.Action));
exports.CopyPathAction = CopyPathAction;
var GlobalCopyPathAction = (function (_super) {
    __extends(GlobalCopyPathAction, _super);
    function GlobalCopyPathAction(id, label, editorService, editorGroupService, messageService) {
        var _this = _super.call(this, id, label) || this;
        _this.editorService = editorService;
        _this.editorGroupService = editorGroupService;
        _this.messageService = messageService;
        return _this;
    }
    GlobalCopyPathAction.prototype.run = function () {
        var activeEditor = this.editorService.getActiveEditor();
        var fileInput = activeEditor ? editor_1.asFileEditorInput(activeEditor.input, true) : void 0;
        if (fileInput) {
            electron_1.clipboard.writeText(labels.getPathLabel(fileInput.getResource()));
            this.editorGroupService.focusGroup(activeEditor.position); // focus back to active editor group
        }
        else {
            this.messageService.show(severity_1.default.Info, nls.localize('openFileToCopy', "Open a file first to copy its path"));
        }
        return winjs_base_1.TPromise.as(true);
    };
    return GlobalCopyPathAction;
}(actions_1.Action));
GlobalCopyPathAction.ID = 'workbench.action.files.copyPathOfActiveFile';
GlobalCopyPathAction.LABEL = nls.localize('copyPathOfActive', "Copy Path of Active File");
GlobalCopyPathAction = __decorate([
    __param(2, editorService_1.IWorkbenchEditorService),
    __param(3, groupService_1.IEditorGroupService),
    __param(4, message_1.IMessageService)
], GlobalCopyPathAction);
exports.GlobalCopyPathAction = GlobalCopyPathAction;
var OpenFileAction = (function (_super) {
    __extends(OpenFileAction, _super);
    function OpenFileAction(id, label, editorService, windowService) {
        var _this = _super.call(this, id, label) || this;
        _this.editorService = editorService;
        _this.windowService = windowService;
        return _this;
    }
    OpenFileAction.prototype.run = function () {
        var fileInput = editor_1.asFileEditorInput(this.editorService.getActiveEditorInput(), true);
        // Handle in browser process
        if (fileInput) {
            return this.windowService.openFilePicker(false, paths.dirname(fileInput.getResource().fsPath));
        }
        return this.windowService.openFilePicker();
    };
    return OpenFileAction;
}(actions_1.Action));
OpenFileAction.ID = 'workbench.action.files.openFile';
OpenFileAction.LABEL = nls.localize('openFile', "Open File...");
OpenFileAction = __decorate([
    __param(2, editorService_1.IWorkbenchEditorService),
    __param(3, windows_1.IWindowService)
], OpenFileAction);
exports.OpenFileAction = OpenFileAction;
var OpenFolderAction = (function (_super) {
    __extends(OpenFolderAction, _super);
    function OpenFolderAction(id, label, windowService) {
        var _this = _super.call(this, id, label) || this;
        _this.windowService = windowService;
        return _this;
    }
    OpenFolderAction.prototype.run = function () {
        return this.windowService.openFolderPicker();
    };
    return OpenFolderAction;
}(actions_1.Action));
OpenFolderAction.ID = 'workbench.action.files.openFolder';
OpenFolderAction.LABEL = nls.localize('openFolder', "Open Folder...");
OpenFolderAction = __decorate([
    __param(2, windows_1.IWindowService)
], OpenFolderAction);
exports.OpenFolderAction = OpenFolderAction;
var OpenFileFolderAction = (function (_super) {
    __extends(OpenFileFolderAction, _super);
    function OpenFileFolderAction(id, label, windowService) {
        var _this = _super.call(this, id, label) || this;
        _this.windowService = windowService;
        return _this;
    }
    OpenFileFolderAction.prototype.run = function () {
        return this.windowService.openFileFolderPicker();
    };
    return OpenFileFolderAction;
}(actions_1.Action));
OpenFileFolderAction.ID = 'workbench.action.files.openFileFolder';
OpenFileFolderAction.LABEL = nls.localize('openFileFolder', "Open...");
OpenFileFolderAction = __decorate([
    __param(2, windows_1.IWindowService)
], OpenFileFolderAction);
exports.OpenFileFolderAction = OpenFileFolderAction;
var ShowOpenedFileInNewWindow = (function (_super) {
    __extends(ShowOpenedFileInNewWindow, _super);
    function ShowOpenedFileInNewWindow(id, label, windowsService, editorService, messageService) {
        var _this = _super.call(this, id, label) || this;
        _this.windowsService = windowsService;
        _this.editorService = editorService;
        _this.messageService = messageService;
        return _this;
    }
    ShowOpenedFileInNewWindow.prototype.run = function () {
        var fileInput = editor_1.asFileEditorInput(this.editorService.getActiveEditorInput(), true);
        if (fileInput) {
            this.windowsService.windowOpen([fileInput.getResource().fsPath], true);
        }
        else {
            this.messageService.show(severity_1.default.Info, nls.localize('openFileToShow', "Open a file first to open in new window"));
        }
        return winjs_base_1.TPromise.as(true);
    };
    return ShowOpenedFileInNewWindow;
}(actions_1.Action));
ShowOpenedFileInNewWindow.ID = 'workbench.action.files.showOpenedFileInNewWindow';
ShowOpenedFileInNewWindow.LABEL = nls.localize('openFileInNewWindow', "Open Active File in New Window");
ShowOpenedFileInNewWindow = __decorate([
    __param(2, windows_1.IWindowsService),
    __param(3, editorService_1.IWorkbenchEditorService),
    __param(4, message_1.IMessageService)
], ShowOpenedFileInNewWindow);
exports.ShowOpenedFileInNewWindow = ShowOpenedFileInNewWindow;
