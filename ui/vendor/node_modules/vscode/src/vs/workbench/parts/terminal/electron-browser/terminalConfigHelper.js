/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var defaultConfig_1 = require("vs/editor/common/config/defaultConfig");
var configuration_1 = require("vs/platform/configuration/common/configuration");
var platform_1 = require("vs/base/common/platform");
var DEFAULT_LINE_HEIGHT = 1.2;
var DEFAULT_ANSI_COLORS = {
    'hc-black': [
        '#000000',
        '#cd0000',
        '#00cd00',
        '#cdcd00',
        '#0000ee',
        '#cd00cd',
        '#00cdcd',
        '#e5e5e5',
        '#7f7f7f',
        '#ff0000',
        '#00ff00',
        '#ffff00',
        '#5c5cff',
        '#ff00ff',
        '#00ffff',
        '#ffffff' // bright white
    ],
    'vs': [
        '#000000',
        '#cd3131',
        '#00BC00',
        '#949800',
        '#0451a5',
        '#bc05bc',
        '#0598bc',
        '#555555',
        '#666666',
        '#cd3131',
        '#14CE14',
        '#b5ba00',
        '#0451a5',
        '#bc05bc',
        '#0598bc',
        '#a5a5a5' // bright white
    ],
    'vs-dark': [
        '#000000',
        '#cd3131',
        '#0DBC79',
        '#e5e510',
        '#2472c8',
        '#bc3fbc',
        '#11a8cd',
        '#e5e5e5',
        '#666666',
        '#f14c4c',
        '#23d18b',
        '#f5f543',
        '#3b8eea',
        '#d670d6',
        '#29b8db',
        '#e5e5e5' // bright white
    ]
};
/**
 * Encapsulates terminal configuration logic, the primary purpose of this file is so that platform
 * specific test cases can be written.
 */
var TerminalConfigHelper = (function () {
    function TerminalConfigHelper(_platform, _configurationService) {
        this._platform = _platform;
        this._configurationService = _configurationService;
    }
    Object.defineProperty(TerminalConfigHelper.prototype, "config", {
        get: function () {
            return this._configurationService.getConfiguration().terminal.integrated;
        },
        enumerable: true,
        configurable: true
    });
    TerminalConfigHelper.prototype.getTheme = function (baseThemeId) {
        return DEFAULT_ANSI_COLORS[baseThemeId];
    };
    TerminalConfigHelper.prototype._measureFont = function (fontFamily, fontSize, lineHeight) {
        // Create charMeasureElement if it hasn't been created or if it was orphaned by its parent
        if (!this._charMeasureElement || !this._charMeasureElement.parentElement) {
            this._charMeasureElement = document.createElement('div');
            this.panelContainer.appendChild(this._charMeasureElement);
        }
        var style = this._charMeasureElement.style;
        style.display = 'block';
        style.fontFamily = fontFamily;
        style.fontSize = fontSize + 'px';
        style.lineHeight = lineHeight.toString(10);
        this._charMeasureElement.innerText = 'X';
        var rect = this._charMeasureElement.getBoundingClientRect();
        style.display = 'none';
        var charWidth = rect.width;
        var charHeight = rect.height;
        return {
            fontFamily: fontFamily,
            fontSize: fontSize + 'px',
            lineHeight: lineHeight,
            charWidth: charWidth,
            charHeight: charHeight
        };
    };
    /**
     * Gets the font information based on the terminal.integrated.fontFamily
     * terminal.integrated.fontSize, terminal.integrated.lineHeight configuration properties
     */
    TerminalConfigHelper.prototype.getFont = function () {
        var config = this._configurationService.getConfiguration();
        var editorConfig = config.editor;
        var terminalConfig = this.config;
        var fontFamily = terminalConfig.fontFamily || editorConfig.fontFamily;
        var fontSize = this._toInteger(terminalConfig.fontSize, 0);
        if (fontSize <= 0) {
            fontSize = defaultConfig_1.DefaultConfig.editor.fontSize;
        }
        var lineHeight = terminalConfig.lineHeight <= 0 ? DEFAULT_LINE_HEIGHT : terminalConfig.lineHeight;
        if (!lineHeight) {
            lineHeight = DEFAULT_LINE_HEIGHT;
        }
        return this._measureFont(fontFamily, fontSize, lineHeight);
    };
    TerminalConfigHelper.prototype.mergeDefaultShellPathAndArgs = function (shell) {
        var config = this.config;
        shell.executable = '';
        shell.args = [];
        if (config && config.shell && config.shellArgs) {
            if (this._platform === platform_1.Platform.Windows) {
                shell.executable = config.shell.windows;
                shell.args = config.shellArgs.windows;
            }
            else if (this._platform === platform_1.Platform.Mac) {
                shell.executable = config.shell.osx;
                shell.args = config.shellArgs.osx;
            }
            else if (this._platform === platform_1.Platform.Linux) {
                shell.executable = config.shell.linux;
                shell.args = config.shellArgs.linux;
            }
        }
        return shell;
    };
    TerminalConfigHelper.prototype._toInteger = function (source, minimum) {
        var r = parseInt(source, 10);
        if (isNaN(r)) {
            r = 0;
        }
        if (typeof minimum === 'number') {
            r = Math.max(minimum, r);
        }
        return r;
    };
    return TerminalConfigHelper;
}());
TerminalConfigHelper = __decorate([
    __param(1, configuration_1.IConfigurationService)
], TerminalConfigHelper);
exports.TerminalConfigHelper = TerminalConfigHelper;
