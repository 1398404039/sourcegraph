import Event from 'vs/base/common/event';
import { TPromise } from 'vs/base/common/winjs.base';
import { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';
import { ILocalExtension, IExtensionEnablementService } from 'vs/platform/extensionManagement/common/extensionManagement';
import { IChoiceService } from 'vs/platform/message/common/message';
import { ILifecycleService } from 'vs/platform/lifecycle/common/lifecycle';
import { IWorkbenchContribution } from 'vs/workbench/common/contributions';
import { ServicesAccessor, IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
export interface IKeymapExtension {
    identifier: string;
    local: ILocalExtension;
    globallyEnabled: boolean;
}
export declare class KeymapExtensions implements IWorkbenchContribution {
    private instantiationService;
    private extensionEnablementService;
    private choiceService;
    private telemetryService;
    private disposables;
    constructor(instantiationService: IInstantiationService, extensionEnablementService: IExtensionEnablementService, choiceService: IChoiceService, lifecycleService: ILifecycleService, telemetryService: ITelemetryService);
    getId(): string;
    private checkForOtherKeymaps(extensionId);
    private promptForDisablingOtherKeymaps(newKeymap, oldKeymaps);
    dispose(): void;
}
export declare function onKeymapExtensionChanged(accessor: ServicesAccessor): Event<string[]>;
export declare function getInstalledKeymaps(accessor: ServicesAccessor): TPromise<IKeymapExtension[]>;
