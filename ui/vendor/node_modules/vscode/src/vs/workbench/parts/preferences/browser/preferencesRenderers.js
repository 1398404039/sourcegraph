/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var winjs_base_1 = require("vs/base/common/winjs.base");
var nls = require("vs/nls");
var DOM = require("vs/base/browser/dom");
var async_1 = require("vs/base/common/async");
var lifecycle_1 = require("vs/base/common/lifecycle");
var arrays_1 = require("vs/base/common/arrays");
var iterator_1 = require("vs/base/common/iterator");
var event_1 = require("vs/base/common/event");
var platform_1 = require("vs/platform/platform");
var editorCommon = require("vs/editor/common/editorCommon");
var range_1 = require("vs/editor/common/core/range");
var configurationRegistry_1 = require("vs/platform/configuration/common/configurationRegistry");
var instantiation_1 = require("vs/platform/instantiation/common/instantiation");
var preferences_1 = require("vs/workbench/parts/preferences/common/preferences");
var preferencesModels_1 = require("vs/workbench/parts/preferences/common/preferencesModels");
var contextView_1 = require("vs/platform/contextview/browser/contextView");
var preferencesWidgets_1 = require("vs/workbench/parts/preferences/browser/preferencesWidgets");
var telemetry_1 = require("vs/platform/telemetry/common/telemetry");
var rangeDecorations_1 = require("vs/workbench/common/editor/rangeDecorations");
var configurationEditing_1 = require("vs/workbench/services/configuration/common/configurationEditing");
var textfiles_1 = require("vs/workbench/services/textfile/common/textfiles");
var model_1 = require("vs/platform/configuration/common/model");
var markers_1 = require("vs/platform/markers/common/markers");
var configuration_1 = require("vs/workbench/services/configuration/common/configuration");
var message_1 = require("vs/platform/message/common/message");
var editorService_1 = require("vs/workbench/services/editor/common/editorService");
var UserSettingsRenderer = (function (_super) {
    __extends(UserSettingsRenderer, _super);
    function UserSettingsRenderer(editor, preferencesModel, associatedPreferencesModel, preferencesService, telemetryService, textFileService, configurationEditingService, messageService, instantiationService) {
        var _this = _super.call(this) || this;
        _this.editor = editor;
        _this.preferencesModel = preferencesModel;
        _this.associatedPreferencesModel = associatedPreferencesModel;
        _this.preferencesService = preferencesService;
        _this.telemetryService = telemetryService;
        _this.textFileService = textFileService;
        _this.configurationEditingService = configurationEditingService;
        _this.messageService = messageService;
        _this.instantiationService = instantiationService;
        _this.modelChangeDelayer = new async_1.Delayer(200);
        _this._onFocusPreference = new event_1.Emitter();
        _this.onFocusPreference = _this._onFocusPreference.event;
        _this._onUpdatePreference = new event_1.Emitter();
        _this.onUpdatePreference = _this._onUpdatePreference.event;
        _this._onClearFocusPreference = new event_1.Emitter();
        _this.onClearFocusPreference = _this._onClearFocusPreference.event;
        _this._register(preferencesModel);
        _this._register(associatedPreferencesModel);
        _this.settingHighlighter = _this._register(instantiationService.createInstance(SettingHighlighter, editor, _this._onFocusPreference, _this._onClearFocusPreference));
        _this.highlightPreferencesRenderer = _this._register(instantiationService.createInstance(HighlightPreferencesRenderer, editor));
        _this.editSettingActionRenderer = _this._register(_this.instantiationService.createInstance(EditSettingRenderer, _this.editor, _this.preferencesModel, _this.settingHighlighter));
        _this._register(_this.editSettingActionRenderer.onUpdateSetting(function (_a) {
            var key = _a.key, value = _a.value, source = _a.source;
            return _this.updatePreference(key, value, source);
        }));
        _this._register(_this.editor.getModel().onDidChangeContent(function () { return _this.modelChangeDelayer.trigger(function () { return _this.onModelChanged(); }); }));
        return _this;
    }
    Object.defineProperty(UserSettingsRenderer.prototype, "iterator", {
        get: function () {
            return null;
        },
        enumerable: true,
        configurable: true
    });
    UserSettingsRenderer.prototype.render = function () {
        this.editSettingActionRenderer.render(this.preferencesModel.settingsGroups, this.associatedPreferencesModel);
        if (this.filterResult) {
            this.filterPreferences(this.filterResult);
        }
    };
    UserSettingsRenderer.prototype.updatePreference = function (key, value, source) {
        var _this = this;
        this.telemetryService.publicLog('defaultSettingsActions.copySetting', { userConfigurationKeys: [key] });
        var overrideIdentifier = source.overrideOf ? model_1.overrideIdentifierFromKey(source.overrideOf.key) : null;
        this.configurationEditingService.writeConfiguration(this.preferencesModel.configurationTarget, { key: key, value: value, overrideIdentifier: overrideIdentifier }, !this.textFileService.isDirty(this.preferencesModel.uri))
            .then(function () { return _this.onSettingUpdated(source); }, function (error) { return _this.messageService.show(message_1.Severity.Error, error); });
    };
    UserSettingsRenderer.prototype.onModelChanged = function () {
        if (!this.editor.getModel()) {
            // model could have been disposed during the delay
            return;
        }
        this.render();
    };
    UserSettingsRenderer.prototype.onSettingUpdated = function (setting) {
        this.editor.focus();
        setting = this.getSetting(setting);
        if (setting) {
            // TODO:@sandy Selection range should be template range
            this.editor.setSelection(setting.valueRange);
            this.settingHighlighter.highlight(setting, true);
        }
    };
    UserSettingsRenderer.prototype.getSetting = function (setting) {
        var key = setting.key, overrideOf = setting.overrideOf;
        if (overrideOf) {
            var setting_1 = this.getSetting(overrideOf);
            for (var _i = 0, _a = setting_1.overrides; _i < _a.length; _i++) {
                var override = _a[_i];
                if (override.key === key) {
                    return override;
                }
            }
            return null;
        }
        return this.preferencesModel.getPreference(key);
    };
    UserSettingsRenderer.prototype.filterPreferences = function (filterResult) {
        var _this = this;
        this.filterResult = filterResult;
        this.highlightPreferencesRenderer.render([]);
        this.settingHighlighter.clear(true);
        if (this.associatedPreferencesModel && filterResult) {
            var settings = arrays_1.distinct(filterResult.filteredGroups.reduce(function (settings, settingsGroup) {
                for (var _i = 0, _a = settingsGroup.sections; _i < _a.length; _i++) {
                    var section = _a[_i];
                    for (var _b = 0, _c = section.settings; _b < _c.length; _b++) {
                        var setting = _c[_b];
                        var s = _this.getSetting(setting);
                        if (s) {
                            settings.push(s);
                        }
                    }
                }
                return settings;
            }, []));
            this.highlightPreferencesRenderer.render(settings);
        }
    };
    UserSettingsRenderer.prototype.focusPreference = function (setting) {
        var s = this.getSetting(setting);
        if (s) {
            this.settingHighlighter.highlight(s, true);
        }
        else {
            this.settingHighlighter.clear(true);
        }
    };
    UserSettingsRenderer.prototype.clearFocus = function (setting) {
        this.settingHighlighter.clear(true);
    };
    return UserSettingsRenderer;
}(lifecycle_1.Disposable));
UserSettingsRenderer = __decorate([
    __param(3, preferences_1.IPreferencesService),
    __param(4, telemetry_1.ITelemetryService),
    __param(5, textfiles_1.ITextFileService),
    __param(6, configurationEditing_1.IConfigurationEditingService),
    __param(7, message_1.IMessageService),
    __param(8, instantiation_1.IInstantiationService)
], UserSettingsRenderer);
exports.UserSettingsRenderer = UserSettingsRenderer;
var WorkspaceSettingsRenderer = (function (_super) {
    __extends(WorkspaceSettingsRenderer, _super);
    function WorkspaceSettingsRenderer(editor, preferencesModel, associatedPreferencesModel, preferencesService, telemetryService, textFileService, configurationEditingService, messageService, instantiationService) {
        var _this = _super.call(this, editor, preferencesModel, associatedPreferencesModel, preferencesService, telemetryService, textFileService, configurationEditingService, messageService, instantiationService) || this;
        _this.untrustedSettingRenderer = _this._register(instantiationService.createInstance(UnsupportedWorkspaceSettingsRenderer, editor, preferencesModel));
        return _this;
    }
    WorkspaceSettingsRenderer.prototype.render = function () {
        _super.prototype.render.call(this);
        this.untrustedSettingRenderer.render();
    };
    return WorkspaceSettingsRenderer;
}(UserSettingsRenderer));
WorkspaceSettingsRenderer = __decorate([
    __param(3, preferences_1.IPreferencesService),
    __param(4, telemetry_1.ITelemetryService),
    __param(5, textfiles_1.ITextFileService),
    __param(6, configurationEditing_1.IConfigurationEditingService),
    __param(7, message_1.IMessageService),
    __param(8, instantiation_1.IInstantiationService)
], WorkspaceSettingsRenderer);
exports.WorkspaceSettingsRenderer = WorkspaceSettingsRenderer;
var DefaultSettingsRenderer = (function (_super) {
    __extends(DefaultSettingsRenderer, _super);
    function DefaultSettingsRenderer(editor, preferencesModel, _associatedPreferencesModel, preferencesService, editorService, instantiationService) {
        var _this = _super.call(this) || this;
        _this.editor = editor;
        _this.preferencesModel = preferencesModel;
        _this._associatedPreferencesModel = _associatedPreferencesModel;
        _this.preferencesService = preferencesService;
        _this.editorService = editorService;
        _this.instantiationService = instantiationService;
        _this._onUpdatePreference = new event_1.Emitter();
        _this.onUpdatePreference = _this._onUpdatePreference.event;
        _this._onFocusPreference = new event_1.Emitter();
        _this.onFocusPreference = _this._onFocusPreference.event;
        _this._onClearFocusPreference = new event_1.Emitter();
        _this.onClearFocusPreference = _this._onClearFocusPreference.event;
        _this._register(preferencesModel);
        _this._register(_associatedPreferencesModel);
        _this.settingHighlighter = _this._register(instantiationService.createInstance(SettingHighlighter, editor, _this._onFocusPreference, _this._onClearFocusPreference));
        _this.settingsGroupTitleRenderer = _this._register(instantiationService.createInstance(SettingsGroupTitleRenderer, editor));
        _this.filteredMatchesRenderer = _this._register(instantiationService.createInstance(FilteredMatchesRenderer, editor));
        _this.filteredSettingsNavigationRenderer = _this._register(instantiationService.createInstance(FilteredSettingsNavigationRenderer, editor, _this.settingHighlighter));
        _this.editSettingActionRenderer = _this._register(instantiationService.createInstance(EditSettingRenderer, editor, preferencesModel, _this.settingHighlighter));
        _this._register(_this.editSettingActionRenderer.onUpdateSetting(function (e) { return _this._onUpdatePreference.fire(e); }));
        var paranthesisHidingRenderer = _this._register(instantiationService.createInstance(StaticContentHidingRenderer, editor, preferencesModel.settingsGroups));
        _this.hiddenAreasRenderer = _this._register(instantiationService.createInstance(HiddenAreasRenderer, editor, [_this.settingsGroupTitleRenderer, _this.filteredMatchesRenderer, paranthesisHidingRenderer]));
        _this._register(_this.settingsGroupTitleRenderer.onHiddenAreasChanged(function () { return _this.hiddenAreasRenderer.render(); }));
        return _this;
    }
    Object.defineProperty(DefaultSettingsRenderer.prototype, "iterator", {
        get: function () {
            return this.filteredSettingsNavigationRenderer;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DefaultSettingsRenderer.prototype, "associatedPreferencesModel", {
        get: function () {
            return this._associatedPreferencesModel;
        },
        set: function (associatedPreferencesModel) {
            this._associatedPreferencesModel = associatedPreferencesModel;
            this.editSettingActionRenderer.associatedPreferencesModel = associatedPreferencesModel;
        },
        enumerable: true,
        configurable: true
    });
    DefaultSettingsRenderer.prototype.render = function () {
        this.settingsGroupTitleRenderer.render(this.preferencesModel.settingsGroups);
        this.editSettingActionRenderer.render(this.preferencesModel.settingsGroups, this._associatedPreferencesModel);
        this.hiddenAreasRenderer.render();
        this.filteredSettingsNavigationRenderer.render([]);
        this.settingsGroupTitleRenderer.showGroup(1);
        this.hiddenAreasRenderer.render();
    };
    DefaultSettingsRenderer.prototype.filterPreferences = function (filterResult) {
        if (!filterResult) {
            this.filteredSettingsNavigationRenderer.render([]);
            this.filteredMatchesRenderer.render(null);
            this.settingsGroupTitleRenderer.render(this.preferencesModel.settingsGroups);
            this.settingsGroupTitleRenderer.showGroup(1);
            this.editSettingActionRenderer.render(this.preferencesModel.settingsGroups, this._associatedPreferencesModel);
        }
        else {
            this.filteredMatchesRenderer.render(filterResult);
            this.settingsGroupTitleRenderer.render(filterResult.filteredGroups);
            this.filteredSettingsNavigationRenderer.render(filterResult.filteredGroups);
            this.editSettingActionRenderer.render(filterResult.filteredGroups, this._associatedPreferencesModel);
        }
        this.hiddenAreasRenderer.render();
    };
    DefaultSettingsRenderer.prototype.focusPreference = function (setting) {
        this.settingsGroupTitleRenderer.showSetting(setting);
        this.settingHighlighter.highlight(setting, true);
    };
    DefaultSettingsRenderer.prototype.clearFocus = function (setting) {
        this.settingHighlighter.clear(true);
    };
    DefaultSettingsRenderer.prototype.collapseAll = function () {
        this.settingsGroupTitleRenderer.collapseAll();
    };
    DefaultSettingsRenderer.prototype.updatePreference = function (key, value, source) {
    };
    return DefaultSettingsRenderer;
}(lifecycle_1.Disposable));
DefaultSettingsRenderer = __decorate([
    __param(3, preferences_1.IPreferencesService),
    __param(4, editorService_1.IWorkbenchEditorService),
    __param(5, instantiation_1.IInstantiationService)
], DefaultSettingsRenderer);
exports.DefaultSettingsRenderer = DefaultSettingsRenderer;
var StaticContentHidingRenderer = (function (_super) {
    __extends(StaticContentHidingRenderer, _super);
    function StaticContentHidingRenderer(editor, settingsGroups) {
        var _this = _super.call(this) || this;
        _this.editor = editor;
        _this.settingsGroups = settingsGroups;
        return _this;
    }
    Object.defineProperty(StaticContentHidingRenderer.prototype, "hiddenAreas", {
        get: function () {
            var model = this.editor.getModel();
            return [
                {
                    startLineNumber: 1,
                    startColumn: model.getLineMinColumn(1),
                    endLineNumber: 2,
                    endColumn: model.getLineMaxColumn(2)
                },
                {
                    startLineNumber: this.settingsGroups[0].range.endLineNumber + 1,
                    startColumn: model.getLineMinColumn(this.settingsGroups[0].range.endLineNumber + 1),
                    endLineNumber: this.settingsGroups[0].range.endLineNumber + 4,
                    endColumn: model.getLineMaxColumn(this.settingsGroups[0].range.endLineNumber + 4)
                },
                {
                    startLineNumber: model.getLineCount() - 1,
                    startColumn: model.getLineMinColumn(model.getLineCount() - 1),
                    endLineNumber: model.getLineCount(),
                    endColumn: model.getLineMaxColumn(model.getLineCount())
                }
            ];
        },
        enumerable: true,
        configurable: true
    });
    return StaticContentHidingRenderer;
}(lifecycle_1.Disposable));
exports.StaticContentHidingRenderer = StaticContentHidingRenderer;
var SettingsGroupTitleRenderer = (function (_super) {
    __extends(SettingsGroupTitleRenderer, _super);
    function SettingsGroupTitleRenderer(editor, instantiationService) {
        var _this = _super.call(this) || this;
        _this.editor = editor;
        _this.instantiationService = instantiationService;
        _this._onHiddenAreasChanged = new event_1.Emitter();
        _this.hiddenGroups = [];
        _this.disposables = [];
        return _this;
    }
    Object.defineProperty(SettingsGroupTitleRenderer.prototype, "onHiddenAreasChanged", {
        get: function () { return this._onHiddenAreasChanged.event; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(SettingsGroupTitleRenderer.prototype, "hiddenAreas", {
        get: function () {
            var hiddenAreas = [];
            for (var _i = 0, _a = this.hiddenGroups; _i < _a.length; _i++) {
                var group = _a[_i];
                hiddenAreas.push(group.range);
            }
            return hiddenAreas;
        },
        enumerable: true,
        configurable: true
    });
    SettingsGroupTitleRenderer.prototype.render = function (settingsGroups) {
        var _this = this;
        this.disposeWidgets();
        this.settingsGroups = settingsGroups.slice();
        this.settingsGroupTitleWidgets = [];
        var _loop_1 = function (group) {
            var settingsGroupTitleWidget = this_1.instantiationService.createInstance(preferencesWidgets_1.SettingsGroupTitleWidget, this_1.editor, group);
            settingsGroupTitleWidget.render();
            this_1.settingsGroupTitleWidgets.push(settingsGroupTitleWidget);
            this_1.disposables.push(settingsGroupTitleWidget);
            this_1.disposables.push(settingsGroupTitleWidget.onToggled(function (collapsed) { return _this.onToggled(collapsed, settingsGroupTitleWidget.settingsGroup); }));
        };
        var this_1 = this;
        for (var _i = 0, _a = this.settingsGroups.slice().reverse(); _i < _a.length; _i++) {
            var group = _a[_i];
            _loop_1(group);
        }
        this.settingsGroupTitleWidgets.reverse();
    };
    SettingsGroupTitleRenderer.prototype.showGroup = function (group) {
        this.hiddenGroups = this.settingsGroups.filter(function (g, i) { return i !== group - 1; });
        for (var _i = 0, _a = this.settingsGroupTitleWidgets.filter(function (g, i) { return i !== group - 1; }); _i < _a.length; _i++) {
            var groupTitleWidget = _a[_i];
            groupTitleWidget.toggleCollapse(true);
        }
        this._onHiddenAreasChanged.fire();
    };
    SettingsGroupTitleRenderer.prototype.showSetting = function (setting) {
        var settingsGroupTitleWidget = this.settingsGroupTitleWidgets.filter(function (widget) { return range_1.Range.containsRange(widget.settingsGroup.range, setting.range); })[0];
        if (settingsGroupTitleWidget && settingsGroupTitleWidget.isCollapsed()) {
            settingsGroupTitleWidget.toggleCollapse(false);
            this.hiddenGroups.splice(this.hiddenGroups.indexOf(settingsGroupTitleWidget.settingsGroup), 1);
            this._onHiddenAreasChanged.fire();
        }
    };
    SettingsGroupTitleRenderer.prototype.collapseAll = function () {
        this.editor.setPosition({ lineNumber: 1, column: 1 });
        this.hiddenGroups = this.settingsGroups.slice();
        for (var _i = 0, _a = this.settingsGroupTitleWidgets; _i < _a.length; _i++) {
            var groupTitleWidget = _a[_i];
            groupTitleWidget.toggleCollapse(true);
        }
        this._onHiddenAreasChanged.fire();
    };
    SettingsGroupTitleRenderer.prototype.onToggled = function (collapsed, group) {
        var index = this.hiddenGroups.indexOf(group);
        if (collapsed) {
            var currentPosition = this.editor.getPosition();
            if (group.range.startLineNumber <= currentPosition.lineNumber && group.range.endLineNumber >= currentPosition.lineNumber) {
                this.editor.setPosition({ lineNumber: group.range.startLineNumber - 1, column: 1 });
            }
            this.hiddenGroups.push(group);
        }
        else {
            this.hiddenGroups.splice(index, 1);
        }
        this._onHiddenAreasChanged.fire();
    };
    SettingsGroupTitleRenderer.prototype.disposeWidgets = function () {
        this.hiddenGroups = [];
        this.disposables = lifecycle_1.dispose(this.disposables);
    };
    SettingsGroupTitleRenderer.prototype.dispose = function () {
        this.disposeWidgets();
        _super.prototype.dispose.call(this);
    };
    return SettingsGroupTitleRenderer;
}(lifecycle_1.Disposable));
SettingsGroupTitleRenderer = __decorate([
    __param(1, instantiation_1.IInstantiationService)
], SettingsGroupTitleRenderer);
exports.SettingsGroupTitleRenderer = SettingsGroupTitleRenderer;
var HiddenAreasRenderer = (function (_super) {
    __extends(HiddenAreasRenderer, _super);
    function HiddenAreasRenderer(editor, hiddenAreasProviders, instantiationService) {
        var _this = _super.call(this) || this;
        _this.editor = editor;
        _this.hiddenAreasProviders = hiddenAreasProviders;
        _this.instantiationService = instantiationService;
        return _this;
    }
    HiddenAreasRenderer.prototype.render = function () {
        var ranges = [];
        for (var _i = 0, _a = this.hiddenAreasProviders; _i < _a.length; _i++) {
            var hiddenAreaProvider = _a[_i];
            ranges.push.apply(ranges, hiddenAreaProvider.hiddenAreas);
        }
        this.editor.setHiddenAreas(ranges);
    };
    HiddenAreasRenderer.prototype.dispose = function () {
        this.editor.setHiddenAreas([]);
        _super.prototype.dispose.call(this);
    };
    return HiddenAreasRenderer;
}(lifecycle_1.Disposable));
HiddenAreasRenderer = __decorate([
    __param(2, instantiation_1.IInstantiationService)
], HiddenAreasRenderer);
exports.HiddenAreasRenderer = HiddenAreasRenderer;
var FilteredMatchesRenderer = (function (_super) {
    __extends(FilteredMatchesRenderer, _super);
    function FilteredMatchesRenderer(editor, instantiationService) {
        var _this = _super.call(this) || this;
        _this.editor = editor;
        _this.instantiationService = instantiationService;
        _this.decorationIds = [];
        _this.hiddenAreas = [];
        return _this;
    }
    FilteredMatchesRenderer.prototype.render = function (result) {
        var _this = this;
        var model = this.editor.getModel();
        this.hiddenAreas = [];
        this.editor.changeDecorations(function (changeAccessor) {
            _this.decorationIds = changeAccessor.deltaDecorations(_this.decorationIds, []);
        });
        if (result) {
            this.hiddenAreas = this.computeHiddenRanges(result.filteredGroups, result.allGroups, model);
            this.editor.changeDecorations(function (changeAccessor) {
                _this.decorationIds = changeAccessor.deltaDecorations(_this.decorationIds, arrays_1.flatten(result.matches.values()).map(function (match) { return _this.createDecoration(match, model); }));
            });
        }
    };
    FilteredMatchesRenderer.prototype.createDecoration = function (range, model) {
        return {
            range: range,
            options: {
                stickiness: editorCommon.TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges,
                className: 'findMatch'
            }
        };
    };
    FilteredMatchesRenderer.prototype.computeHiddenRanges = function (filteredGroups, allSettingsGroups, model) {
        var notMatchesRanges = [];
        var _loop_2 = function (group) {
            var filteredGroup = filteredGroups.filter(function (g) { return g.title === group.title; })[0];
            if (!filteredGroup) {
                notMatchesRanges.push({
                    startLineNumber: group.range.startLineNumber - 1,
                    startColumn: model.getLineMinColumn(group.range.startLineNumber - 1),
                    endLineNumber: group.range.endLineNumber,
                    endColumn: model.getLineMaxColumn(group.range.endLineNumber),
                });
            }
            else {
                for (var _i = 0, _a = group.sections; _i < _a.length; _i++) {
                    var section = _a[_i];
                    if (section.titleRange) {
                        if (!this_2.containsLine(section.titleRange.startLineNumber, filteredGroup)) {
                            notMatchesRanges.push(this_2.createCompleteRange(section.titleRange, model));
                        }
                    }
                    for (var _b = 0, _c = section.settings; _b < _c.length; _b++) {
                        var setting = _c[_b];
                        if (!this_2.containsLine(setting.range.startLineNumber, filteredGroup)) {
                            notMatchesRanges.push(this_2.createCompleteRange(setting.range, model));
                        }
                    }
                }
            }
        };
        var this_2 = this;
        for (var _i = 0, allSettingsGroups_1 = allSettingsGroups; _i < allSettingsGroups_1.length; _i++) {
            var group = allSettingsGroups_1[_i];
            _loop_2(group);
        }
        return notMatchesRanges;
    };
    FilteredMatchesRenderer.prototype.containsLine = function (lineNumber, settingsGroup) {
        if (settingsGroup.titleRange && lineNumber >= settingsGroup.titleRange.startLineNumber && lineNumber <= settingsGroup.titleRange.endLineNumber) {
            return true;
        }
        for (var _i = 0, _a = settingsGroup.sections; _i < _a.length; _i++) {
            var section = _a[_i];
            if (section.titleRange && lineNumber >= section.titleRange.startLineNumber && lineNumber <= section.titleRange.endLineNumber) {
                return true;
            }
            for (var _b = 0, _c = section.settings; _b < _c.length; _b++) {
                var setting = _c[_b];
                if (lineNumber >= setting.range.startLineNumber && lineNumber <= setting.range.endLineNumber) {
                    return true;
                }
            }
        }
        return false;
    };
    FilteredMatchesRenderer.prototype.createCompleteRange = function (range, model) {
        return {
            startLineNumber: range.startLineNumber,
            startColumn: model.getLineMinColumn(range.startLineNumber),
            endLineNumber: range.endLineNumber,
            endColumn: model.getLineMaxColumn(range.endLineNumber)
        };
    };
    FilteredMatchesRenderer.prototype.dispose = function () {
        var _this = this;
        if (this.decorationIds) {
            this.decorationIds = this.editor.changeDecorations(function (changeAccessor) {
                return changeAccessor.deltaDecorations(_this.decorationIds, []);
            });
        }
        _super.prototype.dispose.call(this);
    };
    return FilteredMatchesRenderer;
}(lifecycle_1.Disposable));
FilteredMatchesRenderer = __decorate([
    __param(1, instantiation_1.IInstantiationService)
], FilteredMatchesRenderer);
exports.FilteredMatchesRenderer = FilteredMatchesRenderer;
var HighlightPreferencesRenderer = (function (_super) {
    __extends(HighlightPreferencesRenderer, _super);
    function HighlightPreferencesRenderer(editor, instantiationService) {
        var _this = _super.call(this) || this;
        _this.editor = editor;
        _this.instantiationService = instantiationService;
        _this.decorationIds = [];
        return _this;
    }
    HighlightPreferencesRenderer.prototype.render = function (settings) {
        var _this = this;
        var model = this.editor.getModel();
        this.editor.changeDecorations(function (changeAccessor) {
            _this.decorationIds = changeAccessor.deltaDecorations(_this.decorationIds, []);
        });
        if (settings.length) {
            this.editor.changeDecorations(function (changeAccessor) {
                _this.decorationIds = changeAccessor.deltaDecorations(_this.decorationIds, settings.map(function (setting) { return _this.createDecoration(setting.keyRange, model); }));
            });
        }
    };
    HighlightPreferencesRenderer.prototype.createDecoration = function (range, model) {
        return {
            range: range,
            options: {
                stickiness: editorCommon.TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges,
                className: 'findMatch'
            }
        };
    };
    HighlightPreferencesRenderer.prototype.dispose = function () {
        var _this = this;
        if (this.decorationIds) {
            this.decorationIds = this.editor.changeDecorations(function (changeAccessor) {
                return changeAccessor.deltaDecorations(_this.decorationIds, []);
            });
        }
        _super.prototype.dispose.call(this);
    };
    return HighlightPreferencesRenderer;
}(lifecycle_1.Disposable));
HighlightPreferencesRenderer = __decorate([
    __param(1, instantiation_1.IInstantiationService)
], HighlightPreferencesRenderer);
exports.HighlightPreferencesRenderer = HighlightPreferencesRenderer;
var FilteredSettingsNavigationRenderer = (function (_super) {
    __extends(FilteredSettingsNavigationRenderer, _super);
    function FilteredSettingsNavigationRenderer(editor, settingHighlighter) {
        var _this = _super.call(this) || this;
        _this.editor = editor;
        _this.settingHighlighter = settingHighlighter;
        return _this;
    }
    FilteredSettingsNavigationRenderer.prototype.next = function () {
        return this.iterator.next() || this.iterator.first();
    };
    FilteredSettingsNavigationRenderer.prototype.render = function (filteredGroups) {
        this.settingHighlighter.clear(true);
        var settings = [];
        for (var _i = 0, filteredGroups_1 = filteredGroups; _i < filteredGroups_1.length; _i++) {
            var group = filteredGroups_1[_i];
            for (var _a = 0, _b = group.sections; _a < _b.length; _a++) {
                var section = _b[_a];
                settings.push.apply(settings, section.settings);
            }
        }
        this.iterator = new iterator_1.ArrayNavigator(settings);
    };
    return FilteredSettingsNavigationRenderer;
}(lifecycle_1.Disposable));
var EditSettingRenderer = (function (_super) {
    __extends(EditSettingRenderer, _super);
    function EditSettingRenderer(editor, masterSettingsModel, settingHighlighter, preferencesService, instantiationService, contextMenuService) {
        var _this = _super.call(this) || this;
        _this.editor = editor;
        _this.masterSettingsModel = masterSettingsModel;
        _this.settingHighlighter = settingHighlighter;
        _this.preferencesService = preferencesService;
        _this.instantiationService = instantiationService;
        _this.contextMenuService = contextMenuService;
        _this._onUpdateSetting = new event_1.Emitter();
        _this.onUpdateSetting = _this._onUpdateSetting.event;
        _this.editPreferenceWidgetForCusorPosition = _this._register(_this.instantiationService.createInstance(preferencesWidgets_1.EditPreferenceWidget, editor));
        _this.editPreferenceWidgetForMouseMove = _this._register(_this.instantiationService.createInstance(preferencesWidgets_1.EditPreferenceWidget, editor));
        _this.toggleEditPreferencesForMouseMoveDelayer = new async_1.Delayer(75);
        _this._register(_this.editPreferenceWidgetForCusorPosition.onClick(function (setting) { return _this.onEditSettingClicked(_this.editPreferenceWidgetForCusorPosition); }));
        _this._register(_this.editPreferenceWidgetForMouseMove.onClick(function (setting) { return _this.onEditSettingClicked(_this.editPreferenceWidgetForMouseMove); }));
        _this._register(_this.editPreferenceWidgetForCusorPosition.onMouseOver(function (setting) { return _this.onMouseOver(_this.editPreferenceWidgetForCusorPosition); }));
        _this._register(_this.editPreferenceWidgetForMouseMove.onMouseOver(function (setting) { return _this.onMouseOver(_this.editPreferenceWidgetForMouseMove); }));
        _this._register(_this.editor.onDidChangeCursorPosition(function (positionChangeEvent) { return _this.onPositionChanged(positionChangeEvent); }));
        _this._register(_this.editor.onMouseMove(function (mouseMoveEvent) { return _this.onMouseMoved(mouseMoveEvent); }));
        _this._register(_this.editor.onDidChangeConfiguration(function () { return _this.onConfigurationChanged(); }));
        return _this;
    }
    EditSettingRenderer.prototype.render = function (settingsGroups, associatedPreferencesModel) {
        this.editPreferenceWidgetForCusorPosition.hide();
        this.editPreferenceWidgetForMouseMove.hide();
        this.settingsGroups = settingsGroups;
        this.associatedPreferencesModel = associatedPreferencesModel;
        var settings = this.getSettings(this.editor.getPosition().lineNumber);
        if (settings.length) {
            this.showEditPreferencesWidget(this.editPreferenceWidgetForCusorPosition, settings);
        }
    };
    EditSettingRenderer.prototype.isDefaultSettings = function () {
        return this.masterSettingsModel instanceof preferencesModels_1.DefaultSettingsEditorModel;
    };
    EditSettingRenderer.prototype.onConfigurationChanged = function () {
        if (!this.editor.getRawConfiguration().glyphMargin) {
            this.editPreferenceWidgetForCusorPosition.hide();
            this.editPreferenceWidgetForMouseMove.hide();
        }
    };
    EditSettingRenderer.prototype.onPositionChanged = function (positionChangeEvent) {
        this.editPreferenceWidgetForMouseMove.hide();
        var settings = this.getSettings(positionChangeEvent.position.lineNumber);
        if (settings.length) {
            this.showEditPreferencesWidget(this.editPreferenceWidgetForCusorPosition, settings);
        }
        else {
            this.editPreferenceWidgetForCusorPosition.hide();
        }
    };
    EditSettingRenderer.prototype.onMouseMoved = function (mouseMoveEvent) {
        var _this = this;
        var editPreferenceWidget = this.getEditPreferenceWidgetUnderMouse(mouseMoveEvent);
        if (editPreferenceWidget) {
            this.onMouseOver(editPreferenceWidget);
            return;
        }
        this.settingHighlighter.clear();
        this.toggleEditPreferencesForMouseMoveDelayer.trigger(function () { return _this.toggleEidtPreferenceWidgetForMouseMove(mouseMoveEvent); });
    };
    EditSettingRenderer.prototype.getEditPreferenceWidgetUnderMouse = function (mouseMoveEvent) {
        if (mouseMoveEvent.event.target === this.editPreferenceWidgetForMouseMove.getDomNode()) {
            return this.editPreferenceWidgetForMouseMove;
        }
        if (mouseMoveEvent.event.target === this.editPreferenceWidgetForCusorPosition.getDomNode()) {
            return this.editPreferenceWidgetForCusorPosition;
        }
        return null;
    };
    EditSettingRenderer.prototype.toggleEidtPreferenceWidgetForMouseMove = function (mouseMoveEvent) {
        var settings = mouseMoveEvent.target.position ? this.getSettings(mouseMoveEvent.target.position.lineNumber) : null;
        if (settings && settings.length) {
            this.showEditPreferencesWidget(this.editPreferenceWidgetForMouseMove, settings);
        }
        else {
            this.editPreferenceWidgetForMouseMove.hide();
        }
    };
    EditSettingRenderer.prototype.showEditPreferencesWidget = function (editPreferencesWidget, settings) {
        if (this.editor.getRawConfiguration().glyphMargin) {
            editPreferencesWidget.show(settings[0].valueRange.startLineNumber, settings);
            editPreferencesWidget.getDomNode().title = nls.localize('editTtile', "Edit");
            var editPreferenceWidgetToHide = editPreferencesWidget === this.editPreferenceWidgetForCusorPosition ? this.editPreferenceWidgetForMouseMove : this.editPreferenceWidgetForCusorPosition;
            editPreferenceWidgetToHide.hide();
        }
    };
    EditSettingRenderer.prototype.getSettings = function (lineNumber) {
        var _this = this;
        var configurationMap = this.getConfigurationsMap();
        return this.getSettingsAtLineNumber(lineNumber).filter(function (setting) {
            var jsonSchema = configurationMap[setting.key];
            return jsonSchema && (_this.isDefaultSettings() || jsonSchema.type === 'boolean' || jsonSchema.enum);
        });
    };
    EditSettingRenderer.prototype.getSettingsAtLineNumber = function (lineNumber) {
        var settings = [];
        for (var _i = 0, _a = this.settingsGroups; _i < _a.length; _i++) {
            var group = _a[_i];
            if (group.range.startLineNumber > lineNumber) {
                break;
            }
            if (lineNumber >= group.range.startLineNumber && lineNumber <= group.range.endLineNumber) {
                for (var _b = 0, _c = group.sections; _b < _c.length; _b++) {
                    var section = _c[_b];
                    for (var _d = 0, _e = section.settings; _d < _e.length; _d++) {
                        var setting = _e[_d];
                        if (setting.range.startLineNumber > lineNumber) {
                            break;
                        }
                        if (lineNumber >= setting.range.startLineNumber && lineNumber <= setting.range.endLineNumber) {
                            if (setting.overrides.length > 0) {
                                // Only one level because override settings cannot have override settings
                                for (var _f = 0, _g = setting.overrides; _f < _g.length; _f++) {
                                    var overrideSetting = _g[_f];
                                    if (lineNumber >= overrideSetting.range.startLineNumber && lineNumber <= overrideSetting.range.endLineNumber) {
                                        settings.push(overrideSetting);
                                    }
                                }
                            }
                            else {
                                settings.push(setting);
                            }
                        }
                    }
                }
            }
        }
        return settings;
    };
    EditSettingRenderer.prototype.onMouseOver = function (editPreferenceWidget) {
        this.settingHighlighter.highlight(editPreferenceWidget.preferences[0]);
    };
    EditSettingRenderer.prototype.onEditSettingClicked = function (editPreferenceWidget) {
        var _this = this;
        var elementPosition = DOM.getDomNodePagePosition(editPreferenceWidget.getDomNode());
        var anchor = { x: elementPosition.left + elementPosition.width, y: elementPosition.top + elementPosition.height + 10 };
        var actions = this.getSettings(editPreferenceWidget.getLine()).length === 1 ? this.getActions(editPreferenceWidget.preferences[0], this.getConfigurationsMap()[editPreferenceWidget.preferences[0].key])
            : editPreferenceWidget.preferences.map(function (setting) { return new contextView_1.ContextSubMenu(setting.key, _this.getActions(setting, _this.getConfigurationsMap()[setting.key])); });
        this.contextMenuService.showContextMenu({
            getAnchor: function () { return anchor; },
            getActions: function () { return winjs_base_1.TPromise.wrap(actions); }
        });
    };
    EditSettingRenderer.prototype.getConfigurationsMap = function () {
        return platform_1.Registry.as(configurationRegistry_1.Extensions.Configuration).getConfigurationProperties();
    };
    EditSettingRenderer.prototype.getActions = function (setting, jsonSchema) {
        var _this = this;
        if (jsonSchema.type === 'boolean') {
            return [{
                    id: 'truthyValue',
                    label: 'true',
                    enabled: true,
                    run: function () { return _this.updateSetting(setting.key, true, setting); }
                }, {
                    id: 'falsyValue',
                    label: 'false',
                    enabled: true,
                    run: function () { return _this.updateSetting(setting.key, false, setting); }
                }];
        }
        if (jsonSchema.enum) {
            return jsonSchema.enum.map(function (value) {
                return {
                    id: value,
                    label: JSON.stringify(value),
                    enabled: true,
                    run: function () { return _this.updateSetting(setting.key, value, setting); }
                };
            });
        }
        return this.getDefaultActions(setting);
    };
    EditSettingRenderer.prototype.getDefaultActions = function (setting) {
        var _this = this;
        var settingInOtherModel = this.associatedPreferencesModel.getPreference(setting.key);
        if (this.isDefaultSettings()) {
            return [{
                    id: 'setDefaultValue',
                    label: settingInOtherModel ? nls.localize('replaceDefaultValue', "Replace in Settings") : nls.localize('copyDefaultValue', "Copy to Settings"),
                    enabled: true,
                    run: function () { return _this.updateSetting(setting.key, setting.value, setting); }
                }];
        }
        return [];
    };
    EditSettingRenderer.prototype.updateSetting = function (key, value, source) {
        this._onUpdateSetting.fire({ key: key, value: value, source: source });
    };
    return EditSettingRenderer;
}(lifecycle_1.Disposable));
EditSettingRenderer = __decorate([
    __param(3, preferences_1.IPreferencesService),
    __param(4, instantiation_1.IInstantiationService),
    __param(5, contextView_1.IContextMenuService)
], EditSettingRenderer);
var SettingHighlighter = (function (_super) {
    __extends(SettingHighlighter, _super);
    function SettingHighlighter(editor, focusEventEmitter, clearFocusEventEmitter, instantiationService) {
        var _this = _super.call(this) || this;
        _this.editor = editor;
        _this.focusEventEmitter = focusEventEmitter;
        _this.clearFocusEventEmitter = clearFocusEventEmitter;
        _this.fixedHighlighter = _this._register(instantiationService.createInstance(rangeDecorations_1.RangeHighlightDecorations));
        _this.volatileHighlighter = _this._register(instantiationService.createInstance(rangeDecorations_1.RangeHighlightDecorations));
        _this.fixedHighlighter.onHighlghtRemoved(function () { return _this.clearFocusEventEmitter.fire(_this.highlightedSetting); });
        _this.volatileHighlighter.onHighlghtRemoved(function () { return _this.clearFocusEventEmitter.fire(_this.highlightedSetting); });
        return _this;
    }
    SettingHighlighter.prototype.highlight = function (setting, fix) {
        if (fix === void 0) { fix = false; }
        this.highlightedSetting = setting;
        this.volatileHighlighter.removeHighlightRange();
        this.fixedHighlighter.removeHighlightRange();
        var highlighter = fix ? this.fixedHighlighter : this.volatileHighlighter;
        highlighter.highlightRange({
            range: setting.valueRange,
            resource: this.editor.getModel().uri
        }, this.editor);
        this.editor.revealLinesInCenterIfOutsideViewport(setting.valueRange.startLineNumber, setting.valueRange.endLineNumber - 1);
        this.focusEventEmitter.fire(setting);
    };
    SettingHighlighter.prototype.clear = function (fix) {
        if (fix === void 0) { fix = false; }
        this.volatileHighlighter.removeHighlightRange();
        if (fix) {
            this.fixedHighlighter.removeHighlightRange();
        }
        this.clearFocusEventEmitter.fire(this.highlightedSetting);
    };
    return SettingHighlighter;
}(lifecycle_1.Disposable));
SettingHighlighter = __decorate([
    __param(3, instantiation_1.IInstantiationService)
], SettingHighlighter);
var UnsupportedWorkspaceSettingsRenderer = (function (_super) {
    __extends(UnsupportedWorkspaceSettingsRenderer, _super);
    function UnsupportedWorkspaceSettingsRenderer(editor, workspaceSettingsEditorModel, configurationService, markerService) {
        var _this = _super.call(this) || this;
        _this.editor = editor;
        _this.workspaceSettingsEditorModel = workspaceSettingsEditorModel;
        _this.configurationService = configurationService;
        _this.markerService = markerService;
        _this._register(_this.configurationService.onDidUpdateConfiguration(function () { return _this.render(); }));
        return _this;
    }
    UnsupportedWorkspaceSettingsRenderer.prototype.getMarkerMessage = function (settingKey) {
        switch (settingKey) {
            case 'php.validate.executablePath':
                return nls.localize('unsupportedPHPExecutablePathSetting', "This setting must be a User Setting. To configure PHP for the workspace, open a PHP file and click on 'PHP Path' in the status bar.");
            default:
                return nls.localize('unsupportedWorkspaceSetting', "This setting must be a User Setting.");
        }
    };
    UnsupportedWorkspaceSettingsRenderer.prototype.render = function () {
        var unsupportedWorkspaceKeys = this.configurationService.getUnsupportedWorkspaceKeys();
        if (unsupportedWorkspaceKeys.length) {
            var markerData = [];
            for (var _i = 0, unsupportedWorkspaceKeys_1 = unsupportedWorkspaceKeys; _i < unsupportedWorkspaceKeys_1.length; _i++) {
                var unsupportedKey = unsupportedWorkspaceKeys_1[_i];
                var setting = this.workspaceSettingsEditorModel.getPreference(unsupportedKey);
                if (setting) {
                    markerData.push({
                        severity: message_1.Severity.Warning,
                        startLineNumber: setting.keyRange.startLineNumber,
                        startColumn: setting.keyRange.startColumn,
                        endLineNumber: setting.keyRange.endLineNumber,
                        endColumn: setting.keyRange.endColumn,
                        message: this.getMarkerMessage(unsupportedKey)
                    });
                }
            }
            if (markerData.length) {
                this.markerService.changeOne('preferencesEditor', this.workspaceSettingsEditorModel.uri, markerData);
            }
            else {
                this.markerService.remove('preferencesEditor', [this.workspaceSettingsEditorModel.uri]);
            }
        }
    };
    UnsupportedWorkspaceSettingsRenderer.prototype.dispose = function () {
        this.markerService.remove('preferencesEditor', [this.workspaceSettingsEditorModel.uri]);
        _super.prototype.dispose.call(this);
    };
    return UnsupportedWorkspaceSettingsRenderer;
}(lifecycle_1.Disposable));
UnsupportedWorkspaceSettingsRenderer = __decorate([
    __param(2, configuration_1.IWorkspaceConfigurationService),
    __param(3, markers_1.IMarkerService)
], UnsupportedWorkspaceSettingsRenderer);
