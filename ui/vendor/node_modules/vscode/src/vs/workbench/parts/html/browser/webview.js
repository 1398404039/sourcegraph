/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var nls_1 = require("vs/nls");
var uri_1 = require("vs/base/common/uri");
var winjs_base_1 = require("vs/base/common/winjs.base");
var lifecycle_1 = require("vs/base/common/lifecycle");
var event_1 = require("vs/base/common/event");
var dom_1 = require("vs/base/browser/dom");
var commands_1 = require("vs/platform/commands/common/commands");
var actions_1 = require("vs/platform/actions/common/actions");
commands_1.CommandsRegistry.registerCommand('_webview.openDevTools', function () {
    var elements = document.querySelectorAll('webview.ready');
    for (var i = 0; i < elements.length; i++) {
        try {
            elements.item(i).openDevTools();
        }
        catch (e) {
            console.error(e);
        }
    }
});
actions_1.MenuRegistry.addCommand({
    id: '_webview.openDevTools',
    title: nls_1.localize('devtools.webview', "Developer: Webview Tools")
});
var Webview = (function () {
    function Webview(parent, _styleElement) {
        var _this = this;
        this._styleElement = _styleElement;
        this._onDidClickLink = new event_1.Emitter();
        this._onDidLoadContent = new event_1.Emitter();
        this._webview = document.createElement('webview');
        this._webview.style.width = '100%';
        this._webview.style.height = '100%';
        this._webview.style.outline = '0';
        this._webview.style.opacity = '0';
        this._webview.autoSize = 'on';
        this._webview.preload = require.toUrl('./webview-pre.js');
        this._webview.src = require.toUrl('./webview.html');
        this._ready = new winjs_base_1.TPromise(function (resolve) {
            var subscription = dom_1.addDisposableListener(_this._webview, 'ipc-message', function (event) {
                if (event.channel === 'webview-ready') {
                    // console.info('[PID Webview] ' + event.args[0]);
                    dom_1.addClass(_this._webview, 'ready'); // can be found by debug command
                    subscription.dispose();
                    resolve(_this);
                }
            });
        });
        this._disposables = [
            dom_1.addDisposableListener(this._webview, 'console-message', function (e) {
                console.log("[Embedded Page] " + e.message);
            }),
            dom_1.addDisposableListener(this._webview, 'crashed', function () {
                console.error('embedded page crashed');
            }),
            dom_1.addDisposableListener(this._webview, 'ipc-message', function (event) {
                if (event.channel === 'did-click-link') {
                    var uri = event.args[0];
                    _this._onDidClickLink.fire(uri_1.default.parse(uri));
                    return;
                }
                if (event.channel === 'did-set-content') {
                    _this._webview.style.opacity = '';
                    var stats = event.args[0];
                    _this._onDidLoadContent.fire({ stats: stats });
                    return;
                }
            })
        ];
        if (parent) {
            parent.appendChild(this._webview);
        }
    }
    Webview.prototype.dispose = function () {
        this._onDidClickLink.dispose();
        this._onDidLoadContent.dispose();
        this._disposables = lifecycle_1.dispose(this._disposables);
        if (this._webview.parentElement) {
            this._webview.parentElement.removeChild(this._webview);
        }
    };
    Object.defineProperty(Webview.prototype, "onDidClickLink", {
        get: function () {
            return this._onDidClickLink.event;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Webview.prototype, "onDidLoadContent", {
        get: function () {
            return this._onDidLoadContent.event;
        },
        enumerable: true,
        configurable: true
    });
    Webview.prototype._send = function (channel) {
        var _this = this;
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        this._ready
            .then(function () {
            return (_a = _this._webview).send.apply(_a, [channel].concat(args));
            var _a;
        })
            .done(void 0, console.error);
    };
    Object.defineProperty(Webview.prototype, "contents", {
        set: function (value) {
            this._send('content', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Webview.prototype, "baseUrl", {
        set: function (value) {
            this._send('baseUrl', value);
        },
        enumerable: true,
        configurable: true
    });
    Webview.prototype.focus = function () {
        this._webview.focus();
        this._send('focus');
    };
    Webview.prototype.sendMessage = function (data) {
        this._send('message', data);
    };
    Webview.prototype.style = function (theme) {
        var _a = window.getComputedStyle(this._styleElement), color = _a.color, backgroundColor = _a.backgroundColor, fontFamily = _a.fontFamily, fontWeight = _a.fontWeight, fontSize = _a.fontSize;
        var value = "\n\t\t:root {\n\t\t\t--background-color: " + backgroundColor + ";\n\t\t\t--color: " + color + ";\n\t\t\t--font-family: " + fontFamily + ";\n\t\t\t--font-weight: " + fontWeight + ";\n\t\t\t--font-size: " + fontSize + ";\n\t\t}\n\t\tbody {\n\t\t\tbackground-color: var(--background-color);\n\t\t\tcolor: var(--color);\n\t\t\tfont-family: var(--font-family);\n\t\t\tfont-weight: var(--font-weight);\n\t\t\tfont-size: var(--font-size);\n\t\t\tmargin: 0;\n\t\t}\n\n\t\timg {\n\t\t\tmax-width: 100%;\n\t\t\tmax-height: 100%;\n\t\t}\n\t\ta:focus,\n\t\tinput:focus,\n\t\tselect:focus,\n\t\ttextarea:focus {\n\t\t\toutline: 1px solid -webkit-focus-ring-color;\n\t\t\toutline-offset: -1px;\n\t\t}\n\t\t::-webkit-scrollbar {\n\t\t\twidth: 10px;\n\t\t\theight: 10px;\n\t\t}";
        var activeTheme;
        if (theme.isLightTheme()) {
            value += "\n\t\t\t::-webkit-scrollbar-thumb {\n\t\t\t\tbackground-color: rgba(100, 100, 100, 0.4);\n\t\t\t}\n\t\t\t::-webkit-scrollbar-thumb:hover {\n\t\t\t\tbackground-color: rgba(100, 100, 100, 0.7);\n\t\t\t}\n\t\t\t::-webkit-scrollbar-thumb:active {\n\t\t\t\tbackground-color: rgba(0, 0, 0, 0.6);\n\t\t\t}";
            activeTheme = 'vscode-light';
        }
        else if (theme.isDarkTheme()) {
            value += "\n\t\t\t::-webkit-scrollbar-thumb {\n\t\t\t\tbackground-color: rgba(121, 121, 121, 0.4);\n\t\t\t}\n\t\t\t::-webkit-scrollbar-thumb:hover {\n\t\t\t\tbackground-color: rgba(100, 100, 100, 0.7);\n\t\t\t}\n\t\t\t::-webkit-scrollbar-thumb:active {\n\t\t\t\tbackground-color: rgba(85, 85, 85, 0.8);\n\t\t\t}";
            activeTheme = 'vscode-dark';
        }
        else {
            value += "\n\t\t\t::-webkit-scrollbar-thumb {\n\t\t\t\tbackground-color: rgba(111, 195, 223, 0.3);\n\t\t\t}\n\t\t\t::-webkit-scrollbar-thumb:hover {\n\t\t\t\tbackground-color: rgba(111, 195, 223, 0.8);\n\t\t\t}\n\t\t\t::-webkit-scrollbar-thumb:active {\n\t\t\t\tbackground-color: rgba(111, 195, 223, 0.8);\n\t\t\t}";
            activeTheme = 'vscode-high-contrast';
        }
        this._send('styles', value, activeTheme);
    };
    return Webview;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Webview;
