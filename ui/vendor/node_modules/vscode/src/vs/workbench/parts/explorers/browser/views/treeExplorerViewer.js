/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var winjs_base_1 = require("vs/base/common/winjs.base");
var builder_1 = require("vs/base/browser/builder");
var treeDefaults_1 = require("vs/base/parts/tree/browser/treeDefaults");
var actionsRenderer_1 = require("vs/base/parts/tree/browser/actionsRenderer");
var actionBarRegistry_1 = require("vs/workbench/browser/actionBarRegistry");
var treeExplorerService_1 = require("vs/workbench/parts/explorers/common/treeExplorerService");
var progress_1 = require("vs/platform/progress/common/progress");
var TreeDataSource = (function () {
    function TreeDataSource(treeNodeProviderId, treeExplorerService, progressService) {
        this.treeNodeProviderId = treeNodeProviderId;
        this.treeExplorerService = treeExplorerService;
        this.progressService = progressService;
    }
    TreeDataSource.prototype.getId = function (tree, node) {
        return node.id.toString();
    };
    TreeDataSource.prototype.hasChildren = function (tree, node) {
        return node.hasChildren;
    };
    TreeDataSource.prototype.getChildren = function (tree, node) {
        var promise = this.treeExplorerService.resolveChildren(this.treeNodeProviderId, node);
        this.progressService.showWhile(promise, 800);
        return promise;
    };
    TreeDataSource.prototype.getParent = function (tree, node) {
        return winjs_base_1.TPromise.as(null);
    };
    return TreeDataSource;
}());
TreeDataSource = __decorate([
    __param(1, treeExplorerService_1.ITreeExplorerService),
    __param(2, progress_1.IProgressService)
], TreeDataSource);
exports.TreeDataSource = TreeDataSource;
var TreeRenderer = (function (_super) {
    __extends(TreeRenderer, _super);
    function TreeRenderer(state, actionRunner) {
        return _super.call(this, {
            actionProvider: state.actionProvider,
            actionRunner: actionRunner
        }) || this;
    }
    TreeRenderer.prototype.getContentHeight = function (tree, element) {
        return 22;
    };
    TreeRenderer.prototype.renderContents = function (tree, node, domElement, previousCleanupFn) {
        var el = builder_1.$(domElement).clearChildren();
        var item = builder_1.$('.custom-viewlet-tree-node-item');
        item.appendTo(el);
        return this.renderFileFolderLabel(item, node);
    };
    TreeRenderer.prototype.renderFileFolderLabel = function (container, node) {
        var label = builder_1.$('.custom-viewlet-tree-node-item-label').appendTo(container);
        builder_1.$('a.plain').text(node.label).title(node.label).appendTo(label);
        return null;
    };
    return TreeRenderer;
}(actionsRenderer_1.ActionsRenderer));
exports.TreeRenderer = TreeRenderer;
var TreeController = (function (_super) {
    __extends(TreeController, _super);
    function TreeController(treeNodeProviderId, treeExplorerService) {
        var _this = _super.call(this, { clickBehavior: treeDefaults_1.ClickBehavior.ON_MOUSE_UP /* do not change to not break DND */, keyboardSupport: false }) || this;
        _this.treeNodeProviderId = treeNodeProviderId;
        _this.treeExplorerService = treeExplorerService;
        return _this;
    }
    TreeController.prototype.onLeftClick = function (tree, node, event, origin) {
        if (origin === void 0) { origin = 'mouse'; }
        _super.prototype.onLeftClick.call(this, tree, node, event, origin);
        if (node.clickCommand) {
            this.treeExplorerService.executeCommand(this.treeNodeProviderId, node);
        }
        return true;
    };
    return TreeController;
}(treeDefaults_1.DefaultController));
TreeController = __decorate([
    __param(1, treeExplorerService_1.ITreeExplorerService)
], TreeController);
exports.TreeController = TreeController;
var TreeExplorerActionProvider = (function (_super) {
    __extends(TreeExplorerActionProvider, _super);
    function TreeExplorerActionProvider(state) {
        var _this = _super.call(this) || this;
        _this.state = state;
        return _this;
    }
    return TreeExplorerActionProvider;
}(actionBarRegistry_1.ContributableActionProvider));
exports.TreeExplorerActionProvider = TreeExplorerActionProvider;
var TreeExplorerViewletState = (function () {
    function TreeExplorerViewletState() {
        this._actionProvider = new TreeExplorerActionProvider(this);
    }
    Object.defineProperty(TreeExplorerViewletState.prototype, "actionProvider", {
        get: function () { return this._actionProvider; },
        enumerable: true,
        configurable: true
    });
    return TreeExplorerViewletState;
}());
exports.TreeExplorerViewletState = TreeExplorerViewletState;
