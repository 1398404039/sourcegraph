import URI from 'vs/base/common/uri';
import { Disposable } from 'vs/base/common/lifecycle';
import { IModel, IRange } from 'vs/editor/common/editorCommon';
import { ISettingsEditorModel, IKeybindingsEditorModel, ISettingsGroup, ISetting, IFilterResult } from 'vs/workbench/parts/preferences/common/preferences';
import { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';
import { ConfigurationTarget } from 'vs/workbench/services/configuration/common/configurationEditing';
import { IFilter } from 'vs/base/common/filters';
export declare abstract class AbstractSettingsModel extends Disposable {
    static _fuzzyFilter: IFilter;
    readonly groupsTerms: string[];
    protected doFilterSettings(filter: string, allGroups: ISettingsGroup[]): IFilterResult;
    private filterByGroupTerm(filter);
    protected abstract _findMatchesInSetting(searchString: string, searchRegex: RegExp, setting: ISetting): IRange[];
    abstract settingsGroups: ISettingsGroup[];
}
export declare class SettingsEditorModel extends AbstractSettingsModel implements ISettingsEditorModel {
    private model;
    private _configurationTarget;
    private _settingsGroups;
    constructor(model: IModel, _configurationTarget: ConfigurationTarget);
    readonly uri: URI;
    readonly configurationTarget: ConfigurationTarget;
    readonly settingsGroups: ISettingsGroup[];
    readonly content: string;
    filterSettings(filter: string): IFilterResult;
    private parse();
    protected _findMatchesInSetting(searchString: string, searchRegex: RegExp, setting: ISetting): IRange[];
    private _findMatchesInLine(searchString, lineNumber);
}
export declare class DefaultSettingsEditorModel extends AbstractSettingsModel implements ISettingsEditorModel {
    private _uri;
    private _mostCommonlyUsedSettingsKeys;
    private indent;
    private _allSettingsGroups;
    private _content;
    private _contentByLines;
    constructor(_uri: URI, _mostCommonlyUsedSettingsKeys: string[]);
    readonly uri: URI;
    readonly content: string;
    readonly settingsGroups: ISettingsGroup[];
    readonly mostCommonlyUsedSettings: ISettingsGroup;
    filterSettings(filter: string): IFilterResult;
    getSetting(key: string): ISetting;
    private parse();
    private getMostCommonlyUsedSettings(allSettingsGroups);
    private parseConfig(config, result, settingsGroup?);
    private compareConfigurationNodes(c1, c2);
    private toContent(settingsGroups);
    private addDescription(description, indent, result);
    protected _findMatchesInSetting(searchString: string, searchRegex: RegExp, setting: ISetting): IRange[];
    private _findMatchesInDescription(searchString, setting);
    private _findMatchesInLine(searchRegex, lineNumber);
}
export declare class DefaultKeybindingsEditorModel implements IKeybindingsEditorModel {
    private _uri;
    private keybindingService;
    private _content;
    constructor(_uri: URI, keybindingService: IKeybindingService);
    readonly uri: URI;
    readonly content: string;
}
