/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
require("../browser/media/debug.contribution.css");
require("../browser/media/debugHover.css");
var nls = require("vs/nls");
var actions_1 = require("vs/platform/actions/common/actions");
var platform_1 = require("vs/platform/platform");
var extensions_1 = require("vs/platform/instantiation/common/extensions");
var keybindingsRegistry_1 = require("vs/platform/keybinding/common/keybindingsRegistry");
var configurationRegistry_1 = require("vs/platform/configuration/common/configurationRegistry");
var actionRegistry_1 = require("vs/workbench/common/actionRegistry");
var viewlet_1 = require("vs/workbench/browser/viewlet");
var panel_1 = require("vs/workbench/browser/panel");
var debugViewRegistry_1 = require("vs/workbench/parts/debug/browser/debugViewRegistry");
var debugViews_1 = require("vs/workbench/parts/debug/electron-browser/debugViews");
var contributions_1 = require("vs/workbench/common/contributions");
var debug_1 = require("vs/workbench/parts/debug/common/debug");
var partService_1 = require("vs/workbench/services/part/common/partService");
var panelService_1 = require("vs/workbench/services/panel/common/panelService");
var debugEditorModelManager_1 = require("vs/workbench/parts/debug/browser/debugEditorModelManager");
var debugActions_1 = require("vs/workbench/parts/debug/browser/debugActions");
var debugActionsWidget_1 = require("vs/workbench/parts/debug/browser/debugActionsWidget");
var service = require("vs/workbench/parts/debug/electron-browser/debugService");
var debugContentProvider_1 = require("vs/workbench/parts/debug/browser/debugContentProvider");
require("vs/workbench/parts/debug/electron-browser/debugEditorContribution");
var viewlet_2 = require("vs/workbench/services/viewlet/browser/viewlet");
var editorService_1 = require("vs/workbench/services/editor/common/editorService");
var debugCommands = require("vs/workbench/parts/debug/electron-browser/debugCommands");
var quickopen_1 = require("vs/workbench/browser/quickopen");
var OpenDebugViewletAction = (function (_super) {
    __extends(OpenDebugViewletAction, _super);
    function OpenDebugViewletAction(id, label, viewletService, editorService) {
        return _super.call(this, id, label, debug_1.VIEWLET_ID, viewletService, editorService) || this;
    }
    return OpenDebugViewletAction;
}(viewlet_1.ToggleViewletAction));
OpenDebugViewletAction.ID = debug_1.VIEWLET_ID;
OpenDebugViewletAction.LABEL = nls.localize('toggleDebugViewlet', "Show Debug");
OpenDebugViewletAction = __decorate([
    __param(2, viewlet_2.IViewletService),
    __param(3, editorService_1.IWorkbenchEditorService)
], OpenDebugViewletAction);
var OpenDebugPanelAction = (function (_super) {
    __extends(OpenDebugPanelAction, _super);
    function OpenDebugPanelAction(id, label, panelService, partService) {
        return _super.call(this, id, label, debug_1.REPL_ID, panelService, partService) || this;
    }
    return OpenDebugPanelAction;
}(panel_1.TogglePanelAction));
OpenDebugPanelAction.ID = 'workbench.debug.action.toggleRepl';
OpenDebugPanelAction.LABEL = nls.localize('toggleDebugPanel', "Debug Console");
OpenDebugPanelAction = __decorate([
    __param(2, panelService_1.IPanelService),
    __param(3, partService_1.IPartService)
], OpenDebugPanelAction);
// register viewlet
platform_1.Registry.as(viewlet_1.Extensions.Viewlets).registerViewlet(new viewlet_1.ViewletDescriptor('vs/workbench/parts/debug/browser/debugViewlet', 'DebugViewlet', debug_1.VIEWLET_ID, nls.localize('debug', "Debug"), 'debug', 40));
var openViewletKb = {
    primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 34 /* KEY_D */
};
var openPanelKb = {
    primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 55 /* KEY_Y */
};
// register repl panel
platform_1.Registry.as(panel_1.Extensions.Panels).registerPanel(new panel_1.PanelDescriptor('vs/workbench/parts/debug/electron-browser/repl', 'Repl', debug_1.REPL_ID, nls.localize({ comment: ['Debug is a noun in this context, not a verb.'], key: 'debugPanel' }, 'Debug Console'), 'repl', 30, OpenDebugPanelAction.ID));
platform_1.Registry.as(panel_1.Extensions.Panels).setDefaultPanelId(debug_1.REPL_ID);
// Register default debug views
debugViewRegistry_1.DebugViewRegistry.registerDebugView(debugViews_1.VariablesView, 10, 40);
debugViewRegistry_1.DebugViewRegistry.registerDebugView(debugViews_1.WatchExpressionsView, 20, 10);
debugViewRegistry_1.DebugViewRegistry.registerDebugView(debugViews_1.CallStackView, 30, 30);
debugViewRegistry_1.DebugViewRegistry.registerDebugView(debugViews_1.BreakpointsView, 40, 20);
// register action to open viewlet
var registry = platform_1.Registry.as(actionRegistry_1.Extensions.WorkbenchActions);
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(OpenDebugPanelAction, OpenDebugPanelAction.ID, OpenDebugPanelAction.LABEL, openPanelKb), 'View: Debug Console', nls.localize('view', "View"));
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(OpenDebugViewletAction, OpenDebugViewletAction.ID, OpenDebugViewletAction.LABEL, openViewletKb), 'View: Show Debug', nls.localize('view', "View"));
platform_1.Registry.as(contributions_1.Extensions.Workbench).registerWorkbenchContribution(debugEditorModelManager_1.DebugEditorModelManager);
platform_1.Registry.as(contributions_1.Extensions.Workbench).registerWorkbenchContribution(debugActionsWidget_1.DebugActionsWidget);
platform_1.Registry.as(contributions_1.Extensions.Workbench).registerWorkbenchContribution(debugContentProvider_1.DebugContentProvider);
var debugCategory = nls.localize('debugCategory', "Debug");
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(debugActions_1.StartAction, debugActions_1.StartAction.ID, debugActions_1.StartAction.LABEL, { primary: 63 /* F5 */ }, debug_1.CONTEXT_NOT_IN_DEBUG_MODE), 'Debug: Start Debugging', debugCategory);
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(debugActions_1.StepOverAction, debugActions_1.StepOverAction.ID, debugActions_1.StepOverAction.LABEL, { primary: 68 /* F10 */ }, debug_1.CONTEXT_IN_DEBUG_MODE), 'Debug: Step Over', debugCategory);
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(debugActions_1.StepIntoAction, debugActions_1.StepIntoAction.ID, debugActions_1.StepIntoAction.LABEL, { primary: 69 /* F11 */ }, debug_1.CONTEXT_IN_DEBUG_MODE, keybindingsRegistry_1.KeybindingsRegistry.WEIGHT.workbenchContrib(1)), 'Debug: Step Into', debugCategory);
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(debugActions_1.StepOutAction, debugActions_1.StepOutAction.ID, debugActions_1.StepOutAction.LABEL, { primary: 1024 /* Shift */ | 69 /* F11 */ }, debug_1.CONTEXT_IN_DEBUG_MODE), 'Debug: Step Out', debugCategory);
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(debugActions_1.RestartAction, debugActions_1.RestartAction.ID, debugActions_1.RestartAction.LABEL, { primary: 1024 /* Shift */ | 2048 /* CtrlCmd */ | 63 /* F5 */ }, debug_1.CONTEXT_IN_DEBUG_MODE), 'Debug: Restart', debugCategory);
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(debugActions_1.StopAction, debugActions_1.StopAction.ID, debugActions_1.StopAction.LABEL, { primary: 1024 /* Shift */ | 63 /* F5 */ }, debug_1.CONTEXT_IN_DEBUG_MODE), 'Debug: Stop', debugCategory);
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(debugActions_1.DisconnectAction, debugActions_1.DisconnectAction.ID, debugActions_1.DisconnectAction.LABEL), 'Debug: Disconnect', debugCategory);
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(debugActions_1.ContinueAction, debugActions_1.ContinueAction.ID, debugActions_1.ContinueAction.LABEL, { primary: 63 /* F5 */ }, debug_1.CONTEXT_IN_DEBUG_MODE), 'Debug: Continue', debugCategory);
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(debugActions_1.PauseAction, debugActions_1.PauseAction.ID, debugActions_1.PauseAction.LABEL, { primary: 64 /* F6 */ }, debug_1.CONTEXT_IN_DEBUG_MODE), 'Debug: Pause', debugCategory);
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(debugActions_1.ConfigureAction, debugActions_1.ConfigureAction.ID, debugActions_1.ConfigureAction.LABEL), 'Debug: Open launch.json', debugCategory);
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(debugActions_1.AddFunctionBreakpointAction, debugActions_1.AddFunctionBreakpointAction.ID, debugActions_1.AddFunctionBreakpointAction.LABEL), 'Debug: Add Function Breakpoint', debugCategory);
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(debugActions_1.ReapplyBreakpointsAction, debugActions_1.ReapplyBreakpointsAction.ID, debugActions_1.ReapplyBreakpointsAction.LABEL), 'Debug: Reapply All Breakpoints', debugCategory);
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(debugActions_1.RunAction, debugActions_1.RunAction.ID, debugActions_1.RunAction.LABEL, { primary: 2048 /* CtrlCmd */ | 63 /* F5 */ }, debug_1.CONTEXT_NOT_IN_DEBUG_MODE), 'Debug: Start Without Debugging', debugCategory);
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(debugActions_1.RemoveAllBreakpointsAction, debugActions_1.RemoveAllBreakpointsAction.ID, debugActions_1.RemoveAllBreakpointsAction.LABEL), 'Debug: Remove All Breakpoints', debugCategory);
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(debugActions_1.EnableAllBreakpointsAction, debugActions_1.EnableAllBreakpointsAction.ID, debugActions_1.EnableAllBreakpointsAction.LABEL), 'Debug: Enable All Breakpoints', debugCategory);
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(debugActions_1.DisableAllBreakpointsAction, debugActions_1.DisableAllBreakpointsAction.ID, debugActions_1.DisableAllBreakpointsAction.LABEL), 'Debug: Disable All Breakpoints', debugCategory);
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(debugActions_1.ClearReplAction, debugActions_1.ClearReplAction.ID, debugActions_1.ClearReplAction.LABEL), 'Debug: Clear Debug Console', debugCategory);
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(debugActions_1.FocusReplAction, debugActions_1.FocusReplAction.ID, debugActions_1.FocusReplAction.LABEL), 'Debug: Focus Debug Console', debugCategory);
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(debugActions_1.SelectAndStartAction, debugActions_1.SelectAndStartAction.ID, debugActions_1.SelectAndStartAction.LABEL), 'Debug: Launch Configuration', debugCategory);
// Register Quick Open
platform_1.Registry.as(quickopen_1.Extensions.Quickopen).registerQuickOpenHandler(new quickopen_1.QuickOpenHandlerDescriptor('vs/workbench/parts/debug/browser/debugQuickOpen', 'DebugQuickOpenHandler', 'debug ', nls.localize('debugCommands', "Debug Configuration")));
// register service
extensions_1.registerSingleton(debug_1.IDebugService, service.DebugService);
// Register configuration
var configurationRegistry = platform_1.Registry.as(configurationRegistry_1.Extensions.Configuration);
configurationRegistry.registerConfiguration({
    id: 'debug',
    order: 20,
    title: nls.localize('debugConfigurationTitle', "Debug"),
    type: 'object',
    properties: {
        'debug.allowBreakpointsEverywhere': {
            type: 'boolean',
            description: nls.localize({ comment: ['This is the description for a setting'], key: 'allowBreakpointsEverywhere' }, "Allows setting breakpoint in any file"),
            default: false
        },
        'debug.openExplorerOnEnd': {
            type: 'boolean',
            description: nls.localize({ comment: ['This is the description for a setting'], key: 'openExplorerOnEnd' }, "Automatically open explorer view on the end of a debug session"),
            default: false
        },
        'debug.inlineValues': {
            type: 'boolean',
            description: nls.localize({ comment: ['This is the description for a setting'], key: 'inlineValues' }, "Show variable values inline in editor while debugging"),
            default: false
        },
        'debug.hideActionBar': {
            type: 'boolean',
            description: nls.localize({ comment: ['This is the description for a setting'], key: 'hideActionBar' }, "Controls if the floating debug action bar should be hidden"),
            default: false
        }
    }
});
debugCommands.registerCommands();
