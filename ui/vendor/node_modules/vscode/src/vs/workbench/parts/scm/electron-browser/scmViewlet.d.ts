import './media/scmViewlet.css';
import { TPromise } from 'vs/base/common/winjs.base';
import { Builder, Dimension } from 'vs/base/browser/builder';
import { Viewlet } from 'vs/workbench/browser/viewlet';
import { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';
import { ISCMService } from 'vs/workbench/services/scm/common/scm';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import { IContextViewService, IContextMenuService } from 'vs/platform/contextview/browser/contextView';
import { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';
import { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';
import { IMessageService } from 'vs/platform/message/common/message';
import { IListService } from 'vs/platform/list/browser/listService';
import { IMenuService } from 'vs/platform/actions/common/actions';
import { IAction, IActionItem } from 'vs/base/common/actions';
import { IWorkbenchThemeService } from 'vs/workbench/services/themes/common/themeService';
import { IModelService } from 'vs/editor/common/services/modelService';
export declare class SCMViewlet extends Viewlet {
    private scmService;
    private instantiationService;
    private contextViewService;
    private contextKeyService;
    private keybindingService;
    private messageService;
    private listService;
    private contextMenuService;
    private themeService;
    private menuService;
    private modelService;
    private cachedDimension;
    private inputBoxContainer;
    private inputBox;
    private listContainer;
    private list;
    private menus;
    private providerChangeDisposable;
    private disposables;
    constructor(telemetryService: ITelemetryService, scmService: ISCMService, instantiationService: IInstantiationService, contextViewService: IContextViewService, contextKeyService: IContextKeyService, keybindingService: IKeybindingService, messageService: IMessageService, listService: IListService, contextMenuService: IContextMenuService, themeService: IWorkbenchThemeService, menuService: IMenuService, modelService: IModelService);
    private setActiveProvider(activeProvider);
    create(parent: Builder): TPromise<void>;
    private update();
    layout(dimension?: Dimension): void;
    getOptimalWidth(): number;
    focus(): void;
    private open(e);
    private acceptChanges();
    getActions(): IAction[];
    getSecondaryActions(): IAction[];
    getActionItem(action: IAction): IActionItem;
    private onListContextMenu(e);
    dispose(): void;
}
