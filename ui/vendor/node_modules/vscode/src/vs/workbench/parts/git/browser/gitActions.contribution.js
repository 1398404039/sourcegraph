/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var nls = require("vs/nls");
var lifecycle = require("vs/base/common/lifecycle");
var platform = require("vs/platform/platform");
var abr = require("vs/workbench/browser/actionBarRegistry");
var winjs_base_1 = require("vs/base/common/winjs.base");
var baseeditor = require("vs/workbench/browser/parts/editor/baseEditor");
var WorkbenchEditorCommon = require("vs/workbench/common/editor");
var tdeditor = require("vs/workbench/browser/parts/editor/textDiffEditor");
var teditor = require("vs/workbench/browser/parts/editor/textEditor");
var filesCommon = require("vs/workbench/parts/files/common/files");
var gitcontrib = require("vs/workbench/parts/git/browser/gitWorkbenchContributions");
var diffei = require("vs/workbench/common/editor/diffEditorInput");
var git_1 = require("vs/workbench/parts/git/common/git");
var gitei = require("vs/workbench/parts/git/browser/gitEditorInputs");
var stageRanges_1 = require("vs/workbench/parts/git/common/stageRanges");
var editorService_1 = require("vs/workbench/services/editor/common/editorService");
var viewlet_1 = require("vs/workbench/services/viewlet/browser/viewlet");
var partService_1 = require("vs/workbench/services/part/common/partService");
var workspace_1 = require("vs/platform/workspace/common/workspace");
var files_1 = require("vs/platform/files/common/files");
var instantiation_1 = require("vs/platform/instantiation/common/instantiation");
var wbar = require("vs/workbench/common/actionRegistry");
var actions_1 = require("vs/platform/actions/common/actions");
var gitActions_1 = require("./gitActions");
var paths = require("vs/base/common/paths");
var uri_1 = require("vs/base/common/uri");
var fileEditorInput_1 = require("vs/workbench/parts/files/common/editors/fileEditorInput");
var scmPreview_1 = require("vs/workbench/parts/scm/browser/scmPreview");
var message_1 = require("vs/platform/message/common/message");
function getStatus(gitService, contextService, input) {
    var model = gitService.getModel();
    var repositoryRoot = model.getRepositoryRoot();
    var statusModel = model.getStatus();
    var repositoryRelativePath = paths.normalize(paths.relative(repositoryRoot, input.getResource().fsPath));
    return statusModel.getWorkingTreeStatus().find(repositoryRelativePath) ||
        statusModel.getIndexStatus().find(repositoryRelativePath) ||
        statusModel.getMergeStatus().find(repositoryRelativePath);
}
var OpenInDiffAction = (function (_super) {
    __extends(OpenInDiffAction, _super);
    function OpenInDiffAction(editorService, gitService, viewletService, partService, contextService) {
        var _this = _super.call(this, OpenInDiffAction.ID, OpenInDiffAction.Label) || this;
        _this.class = 'git-action open-in-diff';
        _this.gitService = gitService;
        _this.viewletService = viewletService;
        _this.editorService = editorService;
        _this.partService = partService;
        _this.contextService = contextService;
        _this.toDispose = [_this.gitService.addBulkListener2(function () { return _this.onGitStateChanged(); })];
        _this.enabled = _this.isEnabled();
        return _this;
    }
    OpenInDiffAction.prototype.isEnabled = function () {
        if (!_super.prototype.isEnabled.call(this)) {
            return false;
        }
        var model = this.gitService.getModel();
        if (!model || !(typeof model.getRepositoryRoot() === 'string')) {
            return false;
        }
        var status = this.getStatus();
        return status && (status.getStatus() === git_1.Status.MODIFIED ||
            status.getStatus() === git_1.Status.INDEX_MODIFIED ||
            status.getStatus() === git_1.Status.INDEX_RENAMED);
    };
    OpenInDiffAction.prototype.onGitStateChanged = function () {
        if (this.gitService.isIdle()) {
            this.enabled = this.isEnabled();
        }
    };
    OpenInDiffAction.prototype.getStatus = function () {
        return getStatus(this.gitService, this.contextService, this.input);
    };
    OpenInDiffAction.prototype.run = function (context) {
        var _this = this;
        var event = context ? context.event : null;
        var sideBySide = !!(event && (event.ctrlKey || event.metaKey));
        var editor = this.editorService.getActiveEditor().getControl();
        var viewState = editor ? editor.saveViewState() : null;
        return this.gitService.getInput(this.getStatus()).then(function (input) {
            var promise = winjs_base_1.TPromise.as(null);
            if (_this.partService.isVisible(partService_1.Parts.SIDEBAR_PART)) {
                promise = _this.viewletService.openViewlet(gitcontrib.VIEWLET_ID, false);
            }
            return promise.then(function () {
                var options = new WorkbenchEditorCommon.TextDiffEditorOptions();
                options.forceOpen = true;
                options.autoRevealFirstChange = false;
                return _this.editorService.openEditor(input, options, sideBySide).then(function (editor) {
                    if (viewState) {
                        var codeEditor = _this.editorService.getActiveEditor().getControl();
                        codeEditor.restoreViewState({
                            original: {},
                            modified: viewState
                        });
                    }
                });
            });
        });
    };
    OpenInDiffAction.prototype.dispose = function () {
        this.toDispose = lifecycle.dispose(this.toDispose);
    };
    return OpenInDiffAction;
}(baseeditor.EditorInputAction));
OpenInDiffAction.ID = 'workbench.action.git.openInDiff';
OpenInDiffAction.Label = nls.localize('switchToChangesView', "Switch to Changes View");
OpenInDiffAction = __decorate([
    __param(0, editorService_1.IWorkbenchEditorService), __param(1, git_1.IGitService), __param(2, viewlet_1.IViewletService), __param(3, partService_1.IPartService), __param(4, workspace_1.IWorkspaceContextService)
], OpenInDiffAction);
var OpenInEditorAction = (function (_super) {
    __extends(OpenInEditorAction, _super);
    function OpenInEditorAction(fileService, editorService, gitService, viewletService, partService, contextService) {
        var _this = _super.call(this, OpenInEditorAction.ID, OpenInEditorAction.LABEL) || this;
        _this.class = 'git-action open-in-editor';
        _this.gitService = gitService;
        _this.fileService = fileService;
        _this.viewletService = viewletService;
        _this.editorService = editorService;
        _this.partService = partService;
        _this.contextService = contextService;
        _this.enabled = _this.isEnabled();
        return _this;
    }
    OpenInEditorAction.prototype.isEnabled = function () {
        if (!_super.prototype.isEnabled.call(this)) {
            return false;
        }
        var model = this.gitService.getModel();
        if (!model || !(typeof model.getRepositoryRoot() === 'string')) {
            return false;
        }
        var status = this.input.getFileStatus();
        if (OpenInEditorAction.DELETED_STATES.indexOf(status.getStatus()) > -1) {
            return false;
        }
        return true;
    };
    OpenInEditorAction.prototype.run = function (context) {
        var _this = this;
        var model = this.gitService.getModel();
        var resource = uri_1.default.file(paths.join(model.getRepositoryRoot(), this.getRepositoryRelativePath()));
        var event = context ? context.event : null;
        var sideBySide = !!(event && (event.ctrlKey || event.metaKey));
        var modifiedViewState = this.saveTextViewState();
        return this.fileService.resolveFile(resource).then(function (stat) {
            return _this.editorService.openEditor({
                resource: stat.resource,
                options: {
                    forceOpen: true
                }
            }, sideBySide).then(function (editor) {
                _this.restoreTextViewState(modifiedViewState);
                if (_this.partService.isVisible(partService_1.Parts.SIDEBAR_PART)) {
                    return _this.viewletService.openViewlet(filesCommon.VIEWLET_ID, false);
                }
                return undefined;
            });
        });
    };
    OpenInEditorAction.prototype.saveTextViewState = function () {
        var textEditor = this.getTextEditor();
        if (textEditor) {
            return textEditor.saveViewState();
        }
        return null;
    };
    OpenInEditorAction.prototype.restoreTextViewState = function (state) {
        var textEditor = this.getTextEditor();
        if (textEditor) {
            return textEditor.restoreViewState(state);
        }
    };
    OpenInEditorAction.prototype.getTextEditor = function () {
        var editor = this.editorService.getActiveEditor();
        if (editor instanceof tdeditor.TextDiffEditor) {
            return editor.getControl().getModifiedEditor();
        }
        else if (editor instanceof teditor.BaseTextEditor) {
            return editor.getControl();
        }
        return null;
    };
    OpenInEditorAction.prototype.getRepositoryRelativePath = function () {
        var status = this.input.getFileStatus();
        if (status.getStatus() === git_1.Status.INDEX_RENAMED) {
            return status.getRename();
        }
        else {
            var indexStatus = this.gitService.getModel().getStatus().find(status.getPath(), git_1.StatusType.INDEX);
            if (indexStatus && indexStatus.getStatus() === git_1.Status.INDEX_RENAMED) {
                return indexStatus.getRename();
            }
            else {
                return status.getPath();
            }
        }
    };
    return OpenInEditorAction;
}(baseeditor.EditorInputAction));
OpenInEditorAction.DELETED_STATES = [git_1.Status.BOTH_DELETED, git_1.Status.DELETED, git_1.Status.DELETED_BY_US, git_1.Status.INDEX_DELETED];
OpenInEditorAction.ID = 'workbench.action.git.openInEditor';
OpenInEditorAction.LABEL = nls.localize('openInEditor', "Switch to Editor View");
OpenInEditorAction = __decorate([
    __param(0, files_1.IFileService), __param(1, editorService_1.IWorkbenchEditorService), __param(2, git_1.IGitService), __param(3, viewlet_1.IViewletService), __param(4, partService_1.IPartService), __param(5, workspace_1.IWorkspaceContextService)
], OpenInEditorAction);
var WorkbenchStageAction = (function (_super) {
    __extends(WorkbenchStageAction, _super);
    function WorkbenchStageAction(id, label, gitService, editorService, contextService) {
        if (id === void 0) { id = WorkbenchStageAction.ID; }
        if (label === void 0) { label = WorkbenchStageAction.LABEL; }
        var _this = _super.call(this, id, label, '', gitService, editorService) || this;
        _this.contextService = contextService;
        _this.onGitServiceChange();
        return _this;
    }
    WorkbenchStageAction.prototype.updateEnablement = function () {
        if (this.contextService) {
            this.enabled = this.isEnabled();
        }
        else {
            this.enabled = _super.prototype.isEnabled.call(this);
        }
    };
    WorkbenchStageAction.prototype.isEnabled = function () {
        if (!_super.prototype.isEnabled.call(this)) {
            return false;
        }
        var editor = this.editorService.getActiveEditor();
        if (!editor || !(editor instanceof baseeditor.BaseEditor)) {
            return false;
        }
        return true;
    };
    WorkbenchStageAction.prototype.run = function (context) {
        var input = this.editorService.getActiveEditor().input;
        var fileStatus;
        if (gitei.isGitEditorInput(input)) {
            var gitInput = input;
            fileStatus = gitInput.getFileStatus();
        }
        else {
            fileStatus = getStatus(this.gitService, this.contextService, input);
        }
        if (!fileStatus) {
            return winjs_base_1.TPromise.as(null);
        }
        return _super.prototype.run.call(this, fileStatus);
    };
    return WorkbenchStageAction;
}(gitActions_1.BaseStageAction));
WorkbenchStageAction.ID = 'workbench.action.git.stage';
WorkbenchStageAction.LABEL = nls.localize('workbenchStage', "Stage");
WorkbenchStageAction = __decorate([
    __param(2, git_1.IGitService),
    __param(3, editorService_1.IWorkbenchEditorService),
    __param(4, workspace_1.IWorkspaceContextService)
], WorkbenchStageAction);
exports.WorkbenchStageAction = WorkbenchStageAction;
var WorkbenchUnstageAction = (function (_super) {
    __extends(WorkbenchUnstageAction, _super);
    function WorkbenchUnstageAction(id, label, gitService, editorService, contextService) {
        if (id === void 0) { id = WorkbenchUnstageAction.ID; }
        if (label === void 0) { label = WorkbenchUnstageAction.LABEL; }
        var _this = _super.call(this, id, label, '', gitService, editorService) || this;
        _this.contextService = contextService;
        _this.onGitServiceChange();
        return _this;
    }
    WorkbenchUnstageAction.prototype.updateEnablement = function () {
        if (this.contextService) {
            this.enabled = this.isEnabled();
        }
        else {
            this.enabled = _super.prototype.isEnabled.call(this);
        }
    };
    WorkbenchUnstageAction.prototype.isEnabled = function () {
        if (!_super.prototype.isEnabled.call(this)) {
            return false;
        }
        var editor = this.editorService.getActiveEditor();
        if (!editor || !(editor instanceof baseeditor.BaseEditor)) {
            return false;
        }
        return true;
    };
    WorkbenchUnstageAction.prototype.run = function (context) {
        var input = this.editorService.getActiveEditor().input;
        var fileStatus;
        if (gitei.isGitEditorInput(input)) {
            var gitInput = input;
            fileStatus = gitInput.getFileStatus();
        }
        else {
            fileStatus = getStatus(this.gitService, this.contextService, input);
        }
        if (!fileStatus) {
            return winjs_base_1.TPromise.as(null);
        }
        return _super.prototype.run.call(this, fileStatus);
    };
    return WorkbenchUnstageAction;
}(gitActions_1.BaseUnstageAction));
WorkbenchUnstageAction.ID = 'workbench.action.git.unstage';
WorkbenchUnstageAction.LABEL = nls.localize('workbenchUnstage', "Unstage");
WorkbenchUnstageAction = __decorate([
    __param(2, git_1.IGitService),
    __param(3, editorService_1.IWorkbenchEditorService),
    __param(4, workspace_1.IWorkspaceContextService)
], WorkbenchUnstageAction);
exports.WorkbenchUnstageAction = WorkbenchUnstageAction;
var BaseStageRangesAction = (function (_super) {
    __extends(BaseStageRangesAction, _super);
    function BaseStageRangesAction(id, label, editor, gitService, editorService) {
        var _this = _super.call(this, id, label) || this;
        _this.editorService = editorService;
        _this.gitService = gitService;
        _this.editor = editor.getControl();
        _this.editor.onDidChangeCursorSelection(function () { return _this.updateEnablement(); });
        _this.editor.onDidUpdateDiff(function () { return _this.updateEnablement(); });
        _this.class = 'git-action stage-ranges';
        return _this;
    }
    BaseStageRangesAction.prototype.isEnabled = function () {
        if (!_super.prototype.isEnabled.call(this)) {
            return false;
        }
        if (!this.gitService || !this.editorService) {
            return false;
        }
        var changes = this.editor.getLineChanges();
        var selections = this.editor.getSelections();
        if (!changes || !selections || selections.length === 0) {
            return false;
        }
        return stageRanges_1.getSelectedChanges(changes, selections).length > 0;
    };
    BaseStageRangesAction.prototype.getRangesAppliedResult = function (editor) {
        var selections = editor.getSelections();
        var changes = stageRanges_1.getSelectedChanges(editor.getLineChanges(), selections);
        return stageRanges_1.applyChangesToModel(editor.getModel().original, editor.getModel().modified, changes);
    };
    BaseStageRangesAction.prototype.run = function () {
        var _this = this;
        var result = this.getRangesAppliedResult(this.editor);
        var status = this.input.getFileStatus();
        var path = status.getPath();
        var viewState = this.editor.saveViewState();
        return this.gitService.stage(status.getPath(), result).then(function () {
            var statusModel = _this.gitService.getModel().getStatus();
            status = statusModel.getWorkingTreeStatus().find(path) || statusModel.getIndexStatus().find(path);
            if (status) {
                return _this.gitService.getInput(status).then(function (input) {
                    var options = new WorkbenchEditorCommon.TextDiffEditorOptions();
                    options.forceOpen = true;
                    options.autoRevealFirstChange = false;
                    return _this.editorService.openEditor(input, options, _this.position).then(function () {
                        _this.editor.restoreViewState(viewState);
                    });
                });
            }
            return undefined;
        });
    };
    BaseStageRangesAction.prototype.updateEnablement = function () {
        this.enabled = this.isEnabled();
    };
    return BaseStageRangesAction;
}(baseeditor.EditorInputAction));
BaseStageRangesAction = __decorate([
    __param(3, git_1.IGitService), __param(4, editorService_1.IWorkbenchEditorService)
], BaseStageRangesAction);
exports.BaseStageRangesAction = BaseStageRangesAction;
var StageRangesAction = (function (_super) {
    __extends(StageRangesAction, _super);
    function StageRangesAction(editor, gitService, editorService) {
        return _super.call(this, StageRangesAction.ID, StageRangesAction.LABEL, editor, gitService, editorService) || this;
    }
    return StageRangesAction;
}(BaseStageRangesAction));
StageRangesAction.ID = 'workbench.action.git.stageRanges';
StageRangesAction.LABEL = nls.localize('stageSelectedLines', "Stage Selected Lines");
StageRangesAction = __decorate([
    __param(1, git_1.IGitService), __param(2, editorService_1.IWorkbenchEditorService)
], StageRangesAction);
exports.StageRangesAction = StageRangesAction;
var UnstageRangesAction = (function (_super) {
    __extends(UnstageRangesAction, _super);
    function UnstageRangesAction(editor, gitService, editorService) {
        return _super.call(this, UnstageRangesAction.ID, UnstageRangesAction.LABEL, editor, gitService, editorService) || this;
    }
    UnstageRangesAction.prototype.getRangesAppliedResult = function (editor) {
        var selections = editor.getSelections();
        var changes = stageRanges_1.getSelectedChanges(editor.getLineChanges(), selections)
            .map(function (c) { return ({
            modifiedStartLineNumber: c.originalStartLineNumber,
            modifiedEndLineNumber: c.originalEndLineNumber,
            originalStartLineNumber: c.modifiedStartLineNumber,
            originalEndLineNumber: c.modifiedEndLineNumber
        }); });
        return stageRanges_1.applyChangesToModel(editor.getModel().modified, editor.getModel().original, changes);
    };
    return UnstageRangesAction;
}(BaseStageRangesAction));
UnstageRangesAction.ID = 'workbench.action.git.unstageRanges';
UnstageRangesAction.LABEL = nls.localize('unstageSelectedLines', "Unstage Selected Lines");
UnstageRangesAction = __decorate([
    __param(1, git_1.IGitService), __param(2, editorService_1.IWorkbenchEditorService)
], UnstageRangesAction);
exports.UnstageRangesAction = UnstageRangesAction;
var RevertRangesAction = (function (_super) {
    __extends(RevertRangesAction, _super);
    function RevertRangesAction(editor, editorService, messageService) {
        var _this = _super.call(this, RevertRangesAction.ID, RevertRangesAction.LABEL) || this;
        _this.editorService = editorService;
        _this.messageService = messageService;
        _this.editor = editor.getControl();
        _this.editor.onDidChangeCursorSelection(function () { return _this.updateEnablement(); });
        _this.editor.onDidUpdateDiff(function () { return _this.updateEnablement(); });
        _this.class = 'git-action revert-ranges';
        return _this;
    }
    RevertRangesAction.prototype.isEnabled = function () {
        if (!_super.prototype.isEnabled.call(this)) {
            return false;
        }
        if (!this.editorService) {
            return false;
        }
        var changes = this.editor.getLineChanges();
        var selections = this.editor.getSelections();
        if (!changes || !selections || selections.length === 0) {
            return false;
        }
        return stageRanges_1.getSelectedChanges(changes, selections).length > 0;
    };
    RevertRangesAction.prototype.run = function () {
        var selections = this.editor.getSelections();
        var changes = stageRanges_1.getSelectedChanges(this.editor.getLineChanges(), selections);
        var _a = this.editor.getModel(), original = _a.original, modified = _a.modified;
        var revertEdits = stageRanges_1.getChangeRevertEdits(original, modified, changes);
        if (revertEdits.length === 0) {
            return winjs_base_1.TPromise.as(null);
        }
        var confirm = {
            message: nls.localize('confirmRevertMessage', "Are you sure you want to revert the selected changes?"),
            detail: nls.localize('', "This action is irreversible!"),
            primaryButton: nls.localize({ key: 'revertChangesLabel', comment: ['&& denotes a mnemonic'] }, "&&Revert Changes")
        };
        if (!this.messageService.confirm(confirm)) {
            return winjs_base_1.TPromise.as(null);
        }
        modified.pushEditOperations(selections, revertEdits, function () { return selections; });
        modified.pushStackElement();
        return winjs_base_1.TPromise.wrap(null);
    };
    RevertRangesAction.prototype.updateEnablement = function () {
        this.enabled = this.isEnabled();
    };
    return RevertRangesAction;
}(baseeditor.EditorInputAction));
RevertRangesAction.ID = 'workbench.action.git.revertRanges';
RevertRangesAction.LABEL = nls.localize('revertSelectedLines', "Revert Selected Lines");
RevertRangesAction = __decorate([
    __param(1, editorService_1.IWorkbenchEditorService),
    __param(2, message_1.IMessageService)
], RevertRangesAction);
exports.RevertRangesAction = RevertRangesAction;
var FileEditorActionContributor = (function (_super) {
    __extends(FileEditorActionContributor, _super);
    function FileEditorActionContributor(instantiationService) {
        var _this = _super.call(this) || this;
        _this.instantiationService = instantiationService;
        return _this;
    }
    FileEditorActionContributor.prototype.hasActionsForEditorInput = function (context) {
        return context.input instanceof fileEditorInput_1.FileEditorInput;
    };
    FileEditorActionContributor.prototype.getActionsForEditorInput = function (context) {
        return [this.instantiationService.createInstance(OpenInDiffAction)];
    };
    return FileEditorActionContributor;
}(baseeditor.EditorInputActionContributor));
FileEditorActionContributor = __decorate([
    __param(0, instantiation_1.IInstantiationService)
], FileEditorActionContributor);
var GitEditorActionContributor = (function (_super) {
    __extends(GitEditorActionContributor, _super);
    function GitEditorActionContributor(instantiationService) {
        var _this = _super.call(this) || this;
        _this.instantiationService = instantiationService;
        return _this;
    }
    GitEditorActionContributor.prototype.hasActionsForEditorInput = function (context) {
        return gitei.isGitEditorInput(context.input);
    };
    GitEditorActionContributor.prototype.getActionsForEditorInput = function (context) {
        return [this.instantiationService.createInstance(OpenInEditorAction)];
    };
    return GitEditorActionContributor;
}(baseeditor.EditorInputActionContributor));
GitEditorActionContributor = __decorate([
    __param(0, instantiation_1.IInstantiationService)
], GitEditorActionContributor);
var GitWorkingTreeDiffEditorActionContributor = (function (_super) {
    __extends(GitWorkingTreeDiffEditorActionContributor, _super);
    function GitWorkingTreeDiffEditorActionContributor(instantiationService) {
        var _this = _super.call(this) || this;
        _this.instantiationService = instantiationService;
        return _this;
    }
    GitWorkingTreeDiffEditorActionContributor.prototype.hasSecondaryActionsForEditorInput = function (context) {
        return (context.input instanceof gitei.GitDiffEditorInput && context.editor instanceof tdeditor.TextDiffEditor);
    };
    GitWorkingTreeDiffEditorActionContributor.prototype.getSecondaryActionsForEditorInput = function (context) {
        if (context.input instanceof gitei.GitIndexDiffEditorInput) {
            return [this.instantiationService.createInstance(UnstageRangesAction, context.editor)];
        }
        return [
            this.instantiationService.createInstance(StageRangesAction, context.editor),
            this.instantiationService.createInstance(RevertRangesAction, context.editor)
        ];
    };
    return GitWorkingTreeDiffEditorActionContributor;
}(baseeditor.EditorInputActionContributor));
GitWorkingTreeDiffEditorActionContributor = __decorate([
    __param(0, instantiation_1.IInstantiationService)
], GitWorkingTreeDiffEditorActionContributor);
var GlobalOpenChangeAction = (function (_super) {
    __extends(GlobalOpenChangeAction, _super);
    function GlobalOpenChangeAction(id, label, editorService, gitService, contextService, viewletService, partService) {
        var _this = _super.call(this, editorService, gitService) || this;
        _this.contextService = contextService;
        _this.viewletService = viewletService;
        _this.partService = partService;
        return _this;
    }
    GlobalOpenChangeAction.prototype.getInput = function () {
        var input = this.editorService.getActiveEditorInput();
        if (input instanceof fileEditorInput_1.FileEditorInput) {
            return input;
        }
        return null;
    };
    GlobalOpenChangeAction.prototype.run = function (context) {
        var _this = this;
        var input = this.getInput();
        if (!input) {
            return winjs_base_1.TPromise.as(null);
        }
        var status = getStatus(this.gitService, this.contextService, input);
        if (!status) {
            return winjs_base_1.TPromise.as(null);
        }
        var sideBySide = !!(context && (context.ctrlKey || context.metaKey));
        var editor = this.editorService.getActiveEditor().getControl();
        var viewState = editor ? editor.saveViewState() : null;
        return this.gitService.getInput(status).then(function (input) {
            var promise = winjs_base_1.TPromise.as(null);
            if (_this.partService.isVisible(partService_1.Parts.SIDEBAR_PART)) {
                promise = _this.viewletService.openViewlet(gitcontrib.VIEWLET_ID, false);
            }
            return promise.then(function () {
                var options = new WorkbenchEditorCommon.TextDiffEditorOptions();
                options.forceOpen = true;
                options.autoRevealFirstChange = false;
                return _this.editorService.openEditor(input, options, sideBySide).then(function (editor) {
                    if (viewState) {
                        var codeEditor = _this.editorService.getActiveEditor().getControl();
                        codeEditor.restoreViewState({
                            original: {},
                            modified: viewState
                        });
                    }
                });
            });
        });
    };
    return GlobalOpenChangeAction;
}(gitActions_1.OpenChangeAction));
GlobalOpenChangeAction.ID = 'workbench.action.git.globalOpenChange';
GlobalOpenChangeAction.LABEL = nls.localize('openChange', "Open Change");
GlobalOpenChangeAction = __decorate([
    __param(2, editorService_1.IWorkbenchEditorService),
    __param(3, git_1.IGitService),
    __param(4, workspace_1.IWorkspaceContextService),
    __param(5, viewlet_1.IViewletService),
    __param(6, partService_1.IPartService)
], GlobalOpenChangeAction);
var GlobalOpenInEditorAction = (function (_super) {
    __extends(GlobalOpenInEditorAction, _super);
    function GlobalOpenInEditorAction(id, label, editorService, fileService, gitService, contextService) {
        if (id === void 0) { id = GlobalOpenInEditorAction.ID; }
        if (label === void 0) { label = GlobalOpenInEditorAction.LABEL; }
        return _super.call(this, editorService, fileService, gitService, contextService) || this;
    }
    GlobalOpenInEditorAction.prototype.run = function (event) {
        var input = this.editorService.getActiveEditorInput();
        if (input instanceof diffei.DiffEditorInput) {
            input = input.modifiedInput;
        }
        if (!(input instanceof fileEditorInput_1.FileEditorInput)) {
            return winjs_base_1.TPromise.as(null);
        }
        var status = getStatus(this.gitService, this.contextService, input);
        if (!status) {
            return winjs_base_1.TPromise.as(null);
        }
        return _super.prototype.run.call(this, status);
    };
    return GlobalOpenInEditorAction;
}(gitActions_1.OpenFileAction));
GlobalOpenInEditorAction.ID = 'workbench.action.git.globalOpenFile';
GlobalOpenInEditorAction.LABEL = nls.localize('openFile', "Open File");
GlobalOpenInEditorAction = __decorate([
    __param(2, editorService_1.IWorkbenchEditorService),
    __param(3, files_1.IFileService),
    __param(4, git_1.IGitService),
    __param(5, workspace_1.IWorkspaceContextService)
], GlobalOpenInEditorAction);
if (!scmPreview_1.default.enabled) {
    var actionBarRegistry = platform.Registry.as(abr.Extensions.Actionbar);
    actionBarRegistry.registerActionBarContributor(abr.Scope.EDITOR, FileEditorActionContributor);
    actionBarRegistry.registerActionBarContributor(abr.Scope.EDITOR, GitEditorActionContributor);
    actionBarRegistry.registerActionBarContributor(abr.Scope.EDITOR, GitWorkingTreeDiffEditorActionContributor);
    var workbenchActionRegistry = platform.Registry.as(wbar.Extensions.WorkbenchActions);
    // Register Actions
    var category = nls.localize('git', "Git");
    workbenchActionRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(GlobalOpenChangeAction, GlobalOpenChangeAction.ID, GlobalOpenChangeAction.LABEL), 'Git: Open Change', category);
    workbenchActionRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(GlobalOpenInEditorAction, GlobalOpenInEditorAction.ID, GlobalOpenInEditorAction.LABEL), 'Git: Open File', category);
    workbenchActionRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(gitActions_1.PullAction, gitActions_1.PullAction.ID, gitActions_1.PullAction.LABEL), 'Git: Pull', category);
    workbenchActionRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(gitActions_1.PullWithRebaseAction, gitActions_1.PullWithRebaseAction.ID, gitActions_1.PullWithRebaseAction.LABEL), 'Git: Pull (Rebase)', category);
    workbenchActionRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(gitActions_1.PushAction, gitActions_1.PushAction.ID, gitActions_1.PushAction.LABEL), 'Git: Push', category);
    workbenchActionRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(gitActions_1.PushToRemoteAction, gitActions_1.PushToRemoteAction.ID, gitActions_1.PushToRemoteAction.LABEL), 'Git: Push to...', category);
    workbenchActionRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(gitActions_1.SyncAction, gitActions_1.SyncAction.ID, gitActions_1.SyncAction.LABEL), 'Git: Sync', category);
    workbenchActionRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(gitActions_1.PublishAction, gitActions_1.PublishAction.ID, gitActions_1.PublishAction.LABEL), 'Git: Publish', category);
    workbenchActionRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(gitActions_1.StartGitBranchAction, gitActions_1.StartGitBranchAction.ID, gitActions_1.StartGitBranchAction.LABEL), 'Git: Branch', category);
    workbenchActionRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(gitActions_1.StartGitCheckoutAction, gitActions_1.StartGitCheckoutAction.ID, gitActions_1.StartGitCheckoutAction.LABEL), 'Git: Checkout', category);
    workbenchActionRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(gitActions_1.InputCommitAction, gitActions_1.InputCommitAction.ID, gitActions_1.InputCommitAction.LABEL), 'Git: Commit', category);
    workbenchActionRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(gitActions_1.UndoLastCommitAction, gitActions_1.UndoLastCommitAction.ID, gitActions_1.UndoLastCommitAction.LABEL), 'Git: Undo Last Commit', category);
    workbenchActionRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(WorkbenchStageAction, WorkbenchStageAction.ID, WorkbenchStageAction.LABEL), 'Git: Stage', category);
    workbenchActionRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(WorkbenchUnstageAction, WorkbenchUnstageAction.ID, WorkbenchUnstageAction.LABEL), 'Git: Unstage', category);
}
