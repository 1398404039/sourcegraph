/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var nls_1 = require("vs/nls");
var strings = require("vs/base/common/strings");
var instantiation_1 = require("vs/platform/instantiation/common/instantiation");
var extensions_1 = require("vs/platform/instantiation/common/extensions");
var suggest_1 = require("vs/editor/contrib/suggest/common/suggest");
var modeService_1 = require("vs/editor/common/services/modeService");
exports.ISnippetsService = instantiation_1.createDecorator('snippetService');
var SnippetsService = (function () {
    function SnippetsService(_modeService) {
        var _this = this;
        this._modeService = _modeService;
        this._snippets = [];
        suggest_1.setSnippetSuggestSupport({
            provideCompletionItems: function (model, position) {
                var suggestions = _this._getSnippetCompletions(model, position);
                return { suggestions: suggestions };
            }
        });
    }
    SnippetsService.prototype.registerSnippets = function (languageIdentifier, snippets, owner) {
        if (owner === void 0) { owner = ''; }
        var snippetsByMode = this._snippets[languageIdentifier.id];
        if (!snippetsByMode) {
            this._snippets[languageIdentifier.id] = snippetsByMode = {};
        }
        snippetsByMode[owner] = snippets;
    };
    SnippetsService.prototype.visitSnippets = function (languageId, accept) {
        var snippetsByMode = this._snippets[languageId];
        if (snippetsByMode) {
            for (var s in snippetsByMode) {
                var result = snippetsByMode[s].every(accept);
                if (!result) {
                    return;
                }
            }
        }
    };
    SnippetsService.prototype._getLanguageIdAtPosition = function (model, position) {
        // validate the `languageId` to ensure this is a user
        // facing language with a name and the chance to have
        // snippets, else fall back to the outer language
        model.forceTokenization(position.lineNumber);
        var languageId = model.getLanguageIdAtPosition(position.lineNumber, position.column);
        var language = this._modeService.getLanguageIdentifier(languageId).language;
        if (!this._modeService.getLanguageName(language)) {
            languageId = model.getLanguageIdentifier().id;
        }
        return languageId;
    };
    SnippetsService.prototype._getSnippetCompletions = function (model, position) {
        var languageId = this._getLanguageIdAtPosition(model, position);
        if (!this._snippets[languageId]) {
            return undefined;
        }
        var result = [];
        var word = model.getWordAtPosition(position);
        var currentWord = word ? word.word.substring(0, position.column - word.startColumn).toLowerCase() : '';
        var currentFullWord = getNonWhitespacePrefix(model, position).toLowerCase();
        this.visitSnippets(languageId, function (s) {
            var prefixLower = s.prefix.toLowerCase();
            var overwriteBefore = 0;
            if (currentWord.length > 0) {
                // there is a word -> the prefix should match that
                if (strings.startsWith(prefixLower, currentWord)) {
                    overwriteBefore = currentWord.length;
                }
                else {
                    return true;
                }
            }
            else if (currentFullWord.length > currentWord.length) {
                // there is something -> fine if it matches
                overwriteBefore = strings.commonPrefixLength(prefixLower, currentFullWord);
            }
            // store in result
            result.push({
                type: 'snippet',
                label: s.prefix,
                get disambiguateLabel() { return nls_1.localize('snippetSuggest.longLabel', "{0}, {1}", s.prefix, s.name); },
                detail: s.owner,
                documentation: s.description,
                insertText: s.codeSnippet,
                noAutoAccept: true,
                snippetType: 'textmate',
                overwriteBefore: overwriteBefore
            });
            return true;
        });
        // dismbiguate suggestions with same labels
        var lastSuggestion;
        for (var _i = 0, _a = result.sort(SnippetsService._compareSuggestionsByLabel); _i < _a.length; _i++) {
            var suggestion = _a[_i];
            if (lastSuggestion && lastSuggestion.label === suggestion.label) {
                // use the disambiguateLabel instead of the actual label
                lastSuggestion.label = lastSuggestion.disambiguateLabel;
                suggestion.label = suggestion.disambiguateLabel;
            }
            lastSuggestion = suggestion;
        }
        return result;
    };
    SnippetsService._compareSuggestionsByLabel = function (a, b) {
        return strings.compare(a.label, b.label);
    };
    return SnippetsService;
}());
SnippetsService = __decorate([
    __param(0, modeService_1.IModeService)
], SnippetsService);
extensions_1.registerSingleton(exports.ISnippetsService, SnippetsService);
function getNonWhitespacePrefix(model, position) {
    /**
     * Do not analyze more characters
     */
    var MAX_PREFIX_LENGTH = 100;
    var line = model.getLineContent(position.lineNumber).substr(0, position.column - 1);
    var minChIndex = Math.max(0, line.length - MAX_PREFIX_LENGTH);
    for (var chIndex = line.length - 1; chIndex >= minChIndex; chIndex--) {
        var ch = line.charAt(chIndex);
        if (/\s/.test(ch)) {
            return line.substr(chIndex + 1);
        }
    }
    if (minChIndex === 0) {
        return line;
    }
    return '';
}
exports.getNonWhitespacePrefix = getNonWhitespacePrefix;
