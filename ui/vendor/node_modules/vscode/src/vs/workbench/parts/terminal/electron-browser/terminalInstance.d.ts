import Event from 'vs/base/common/event';
import lifecycle = require('vs/base/common/lifecycle');
import { Dimension } from 'vs/base/browser/builder';
import { IContextKeyService, IContextKey } from 'vs/platform/contextkey/common/contextkey';
import { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';
import { IMessageService } from 'vs/platform/message/common/message';
import { IPanelService } from 'vs/workbench/services/panel/common/panelService';
import { IStringDictionary } from 'vs/base/common/collections';
import { ITerminalInstance, IShellLaunchConfig } from 'vs/workbench/parts/terminal/common/terminal';
import { ITerminalProcessFactory } from 'vs/workbench/parts/terminal/electron-browser/terminal';
import { IWorkspace, IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';
import { IWorkbenchEditorService } from 'vs/workbench/services/editor/common/editorService';
import { TerminalConfigHelper } from 'vs/workbench/parts/terminal/electron-browser/terminalConfigHelper';
import { TerminalLinkHandler } from 'vs/workbench/parts/terminal/electron-browser/terminalLinkHandler';
export declare class TerminalInstance implements ITerminalInstance {
    private _terminalFocusContextKey;
    private _configHelper;
    private _linkHandler;
    private _container;
    private _shellLaunchConfig;
    private _contextKeyService;
    private _keybindingService;
    private _messageService;
    private _panelService;
    private _contextService;
    private _editorService;
    private static readonly EOL_REGEX;
    private static _terminalProcessFactory;
    private static _idCounter;
    private _id;
    private _isExiting;
    private _hadFocusOnExit;
    private _isLaunching;
    private _isVisible;
    private _isDisposed;
    private _onDisposed;
    private _onProcessIdReady;
    private _onTitleChanged;
    private _process;
    private _processId;
    private _skipTerminalCommands;
    private _title;
    private _instanceDisposables;
    private _processDisposables;
    private _wrapperElement;
    private _xterm;
    private _xtermElement;
    private _terminalHasTextContextKey;
    private _cols;
    private _rows;
    readonly id: number;
    readonly processId: number;
    readonly onDisposed: Event<ITerminalInstance>;
    readonly onProcessIdReady: Event<TerminalInstance>;
    readonly onTitleChanged: Event<string>;
    readonly title: string;
    readonly hadFocusOnExit: boolean;
    constructor(_terminalFocusContextKey: IContextKey<boolean>, _configHelper: TerminalConfigHelper, _linkHandler: TerminalLinkHandler, _container: HTMLElement, _shellLaunchConfig: IShellLaunchConfig, _contextKeyService: IContextKeyService, _keybindingService: IKeybindingService, _messageService: IMessageService, _panelService: IPanelService, _contextService: IWorkspaceContextService, _editorService: IWorkbenchEditorService);
    addDisposable(disposable: lifecycle.IDisposable): void;
    private _initDimensions();
    /**
     * Evaluates and sets the cols and rows of the terminal if possible.
     * @param width The width of the container.
     * @param height The height of the container.
     * @return The terminal's width if it requires a layout.
     */
    private _evaluateColsAndRows(width, height);
    /**
     * Create xterm.js instance and attach data listeners.
     */
    protected _createXterm(): void;
    attachToElement(container: HTMLElement): void;
    registerLinkMatcher(regex: RegExp, handler: (url: string) => void, matchIndex?: number, validationCallback?: (uri: string, callback: (isValid: boolean) => void) => void): number;
    deregisterLinkMatcher(linkMatcherId: number): void;
    hasSelection(): boolean;
    copySelection(): void;
    clearSelection(): void;
    dispose(): void;
    focus(force?: boolean): void;
    paste(): void;
    sendText(text: string, addNewLine: boolean): void;
    setVisible(visible: boolean): void;
    scrollDownLine(): void;
    scrollDownPage(): void;
    scrollToBottom(): void;
    scrollUpLine(): void;
    scrollUpPage(): void;
    scrollToTop(): void;
    clear(): void;
    private _refreshSelectionContextKey();
    private _sanitizeInput(data);
    protected _getCwd(shell: IShellLaunchConfig, workspace: IWorkspace): string;
    protected _createProcess(workspace: IWorkspace, shell: IShellLaunchConfig): void;
    private _sendPtyDataToXterm(message);
    private _onPtyProcessExit(exitCode);
    reuseTerminal(shell?: IShellLaunchConfig): void;
    static createTerminalEnv(parentEnv: IStringDictionary<string>, shell: IShellLaunchConfig, cwd: string, locale?: string, cols?: number, rows?: number): IStringDictionary<string>;
    onData(listener: (data: string) => void): lifecycle.IDisposable;
    onExit(listener: (exitCode: number) => void): lifecycle.IDisposable;
    private static _sanitizeCwd(cwd);
    private static _cloneEnv(env);
    private static _getLangEnvVariable(locale?);
    updateConfig(): void;
    private _setCursorBlink(blink);
    private _setCursorStyle(style);
    private _setCommandsToSkipShell(commands);
    private _setScrollback(lineCount);
    layout(dimension: Dimension): void;
    static setTerminalProcessFactory(factory: ITerminalProcessFactory): void;
}
