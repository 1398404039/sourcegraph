/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var nls_1 = require("vs/nls");
var winjs_base_1 = require("vs/base/common/winjs.base");
var async_1 = require("vs/base/common/async");
var actions_1 = require("vs/base/common/actions");
var message_1 = require("vs/platform/message/common/message");
var windows_1 = require("vs/platform/windows/common/windows");
var workspace_1 = require("vs/platform/workspace/common/workspace");
var severity_1 = require("vs/base/common/severity");
var git_1 = require("vs/workbench/parts/git/common/git");
var quickOpenService_1 = require("vs/workbench/services/quickopen/common/quickOpenService");
var url = require("url");
var electron_1 = require("electron");
var dialog = electron_1.remote.dialog;
var CloneAction = (function (_super) {
    __extends(CloneAction, _super);
    function CloneAction(id, label, gitService, quickOpenService, messageService, windowsService, workspaceService) {
        var _this = _super.call(this, id, label) || this;
        _this.gitService = gitService;
        _this.quickOpenService = quickOpenService;
        _this.messageService = messageService;
        _this.windowsService = windowsService;
        _this.workspaceService = workspaceService;
        return _this;
    }
    CloneAction.prototype.run = function () {
        var _this = this;
        return this.quickOpenService.input({
            prompt: nls_1.localize('repo', "Provide a git repository URL."),
            placeHolder: nls_1.localize('url', "Repository URL"),
            validateInput: function (input) {
                var parsedUrl = url.parse(input);
                if (!parsedUrl.protocol || !parsedUrl.host) {
                    return winjs_base_1.TPromise.as(nls_1.localize('valid', "Please provide a valid git repository URL"));
                }
                return winjs_base_1.TPromise.as('');
            }
        })
            .then(function (url) {
            if (!url) {
                return winjs_base_1.TPromise.as(null);
            }
            var result = dialog.showOpenDialog(electron_1.remote.getCurrentWindow(), {
                title: nls_1.localize('directory', "Destination clone directory"),
                properties: ['openDirectory', 'createDirectory']
            });
            if (!result || result.length === 0) {
                return winjs_base_1.TPromise.as(null);
            }
            var promise = winjs_base_1.TPromise.timeout(200)
                .then(function () { return _this.messageService.show(severity_1.default.Info, nls_1.localize('cloning', "Cloning repository '{0}'...", url)); })
                .then(function (close) { return new winjs_base_1.TPromise(function () { return null; }, close); });
            var clone = async_1.always(_this.gitService.clone(url, result[0]), function () { return promise.cancel(); });
            return clone.then(function (path) {
                var forceNewWindow = !!_this.workspaceService.getWorkspace();
                return _this.windowsService.windowOpen([path], forceNewWindow);
            }).then(null, function (e) {
                if (/already exists and is not an empty directory/.test(e.stderr || '')) {
                    return winjs_base_1.TPromise.wrapError(nls_1.localize('already exists', "Destination repository already exists, please pick another directory to clone to."));
                }
                return winjs_base_1.TPromise.wrapError(e);
            });
        });
    };
    return CloneAction;
}(actions_1.Action));
CloneAction.ID = 'workbench.action.git.clone';
CloneAction.LABEL = 'Clone';
CloneAction = __decorate([
    __param(2, git_1.IGitService),
    __param(3, quickOpenService_1.IQuickOpenService),
    __param(4, message_1.IMessageService),
    __param(5, windows_1.IWindowsService),
    __param(6, workspace_1.IWorkspaceContextService)
], CloneAction);
exports.CloneAction = CloneAction;
