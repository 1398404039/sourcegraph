/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
require("./emptyView.css");
var nls = require("vs/nls");
var Lifecycle = require("vs/base/common/lifecycle");
var EventEmitter = require("vs/base/common/eventEmitter");
var DOM = require("vs/base/browser/dom");
var button_1 = require("vs/base/browser/ui/button/button");
var WinJS = require("vs/base/common/winjs.base");
var Builder = require("vs/base/browser/builder");
var GitActions = require("vs/workbench/parts/git/browser/gitActions");
var files_1 = require("vs/platform/files/common/files");
var instantiation_1 = require("vs/platform/instantiation/common/instantiation");
var message_1 = require("vs/platform/message/common/message");
var git_1 = require("vs/workbench/parts/git/common/git");
var $ = Builder.$;
var EmptyView = (function (_super) {
    __extends(EmptyView, _super);
    function EmptyView(controller, actionRunner, gitService, instantiationService, messageService, fileService) {
        var _this = _super.call(this) || this;
        _this.ID = 'empty';
        _this.gitService = gitService;
        _this.instantiationService = instantiationService;
        _this.messageService = messageService;
        _this.fileService = fileService;
        _this.actionRunner = actionRunner;
        _this.isVisible = false;
        _this.needsRender = false;
        _this.controller = controller;
        _this.toDispose = [];
        return _this;
    }
    Object.defineProperty(EmptyView.prototype, "initAction", {
        get: function () {
            if (!this._initAction) {
                this._initAction = this.instantiationService.createInstance(GitActions.InitAction);
            }
            return this._initAction;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EmptyView.prototype, "element", {
        // IView
        get: function () {
            this.render();
            return this.$el.getHTMLElement();
        },
        enumerable: true,
        configurable: true
    });
    EmptyView.prototype.render = function () {
        var _this = this;
        if (this.$el) {
            return;
        }
        this.$el = $('.empty-view');
        $('p').appendTo(this.$el).text(EmptyView.EMPTY_MESSAGE);
        var initSection = $('.section').appendTo(this.$el);
        this.initButton = new button_1.Button(initSection);
        this.initButton.label = nls.localize('gitinit', 'Initialize git repository');
        this.initButton.addListener2('click', function (e) {
            DOM.EventHelper.stop(e);
            _this.disableUI();
            _this.actionRunner.run(_this.initAction).done(function () { return _this.enableUI(); });
        });
    };
    EmptyView.prototype.disableUI = function () {
        if (this.urlInputBox) {
            this.urlInputBox.disable();
        }
        if (this.cloneButton) {
            this.cloneButton.enabled = false;
        }
        this.initButton.enabled = false;
    };
    EmptyView.prototype.enableUI = function () {
        if (this.gitService.getRunningOperations().length > 0) {
            return;
        }
        if (this.urlInputBox) {
            this.urlInputBox.enable();
            this.urlInputBox.validate();
        }
        this.initButton.enabled = true;
    };
    EmptyView.prototype.focus = function () {
        this.initButton.focus();
    };
    EmptyView.prototype.layout = function (dimension) {
        // no-op
    };
    EmptyView.prototype.setVisible = function (visible) {
        this.isVisible = visible;
        return WinJS.TPromise.as(null);
    };
    EmptyView.prototype.getControl = function () {
        return null;
    };
    EmptyView.prototype.getActions = function () {
        return this.refreshAction ? [this.refreshAction] : [];
    };
    EmptyView.prototype.getSecondaryActions = function () {
        return [];
    };
    // Events
    EmptyView.prototype.dispose = function () {
        if (this.$el) {
            this.$el.dispose();
            this.$el = null;
        }
        this.toDispose = Lifecycle.dispose(this.toDispose);
        _super.prototype.dispose.call(this);
    };
    return EmptyView;
}(EventEmitter.EventEmitter));
EmptyView.EMPTY_MESSAGE = nls.localize('noGit', "This workspace isn't yet under git source control.");
EmptyView = __decorate([
    __param(2, git_1.IGitService),
    __param(3, instantiation_1.IInstantiationService),
    __param(4, message_1.IMessageService),
    __param(5, files_1.IFileService)
], EmptyView);
exports.EmptyView = EmptyView;
