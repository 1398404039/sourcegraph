/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
require("./media/commandsHandler.css");
var winjs_base_1 = require("vs/base/common/winjs.base");
var nls = require("vs/nls");
var arrays = require("vs/base/common/arrays");
var types = require("vs/base/common/types");
var platform_1 = require("vs/base/common/platform");
var errorMessage_1 = require("vs/base/common/errorMessage");
var quickOpen_1 = require("vs/base/parts/quickopen/common/quickOpen");
var quickOpenModel_1 = require("vs/base/parts/quickopen/browser/quickOpenModel");
var actions_1 = require("vs/platform/actions/common/actions");
var actionRegistry_1 = require("vs/workbench/common/actionRegistry");
var platform_2 = require("vs/platform/platform");
var quickopen_1 = require("vs/workbench/browser/quickopen");
var filters_1 = require("vs/base/common/filters");
var editorService_1 = require("vs/workbench/services/editor/common/editorService");
var instantiation_1 = require("vs/platform/instantiation/common/instantiation");
var message_1 = require("vs/platform/message/common/message");
var telemetry_1 = require("vs/platform/telemetry/common/telemetry");
var keybinding_1 = require("vs/platform/keybinding/common/keybinding");
var quickOpenService_1 = require("vs/workbench/services/quickopen/common/quickOpenService");
exports.ALL_COMMANDS_PREFIX = '>';
exports.EDITOR_COMMANDS_PREFIX = '$';
var wordFilter = filters_1.or(filters_1.matchesPrefix, filters_1.matchesWords, filters_1.matchesContiguousSubString);
var ShowAllCommandsAction = (function (_super) {
    __extends(ShowAllCommandsAction, _super);
    function ShowAllCommandsAction(actionId, actionLabel, quickOpenService) {
        return _super.call(this, actionId, actionLabel, exports.ALL_COMMANDS_PREFIX, quickOpenService) || this;
    }
    return ShowAllCommandsAction;
}(quickopen_1.QuickOpenAction));
ShowAllCommandsAction.ID = 'workbench.action.showCommands';
ShowAllCommandsAction.LABEL = nls.localize('showTriggerActions', "Show All Commands");
ShowAllCommandsAction = __decorate([
    __param(2, quickOpenService_1.IQuickOpenService)
], ShowAllCommandsAction);
exports.ShowAllCommandsAction = ShowAllCommandsAction;
var BaseCommandEntry = (function (_super) {
    __extends(BaseCommandEntry, _super);
    function BaseCommandEntry(keyLabel, keyAriaLabel, label, alias, labelHighlights, aliasHighlights, messageService, telemetryService) {
        var _this = _super.call(this) || this;
        _this.messageService = messageService;
        _this.telemetryService = telemetryService;
        _this.keyLabel = keyLabel;
        _this.keyAriaLabel = keyAriaLabel;
        _this.label = label;
        if (label !== alias) {
            _this.alias = alias;
        }
        else {
            aliasHighlights = null;
        }
        _this.setHighlights(labelHighlights, null, aliasHighlights);
        return _this;
    }
    BaseCommandEntry.prototype.getLabel = function () {
        return this.label;
    };
    BaseCommandEntry.prototype.getDetail = function () {
        return this.alias;
    };
    BaseCommandEntry.prototype.getAriaLabel = function () {
        if (this.keyAriaLabel) {
            return nls.localize('entryAriaLabelWithKey', "{0}, {1}, commands", this.getLabel(), this.keyAriaLabel);
        }
        return nls.localize('entryAriaLabel', "{0}, commands", this.getLabel());
    };
    BaseCommandEntry.prototype.getGroupLabel = function () {
        return this.keyLabel;
    };
    BaseCommandEntry.prototype.onError = function (arg1) {
        var message;
        var messagesWithAction = arg1;
        if (messagesWithAction && typeof messagesWithAction.message === 'string' && Array.isArray(messagesWithAction.actions)) {
            message = messagesWithAction;
        }
        else {
            message = !arg1 ? nls.localize('canNotRun', "Command '{0}' can not be run from here.", this.label) : errorMessage_1.toErrorMessage(arg1);
        }
        this.messageService.show(message_1.Severity.Error, message);
    };
    BaseCommandEntry.prototype.runAction = function (action) {
        var _this = this;
        // Use a timeout to give the quick open widget a chance to close itself first
        winjs_base_1.TPromise.timeout(50).done(function () {
            if (action && action.enabled) {
                try {
                    _this.telemetryService.publicLog('workbenchActionExecuted', { id: action.id, from: 'quick open' });
                    (action.run() || winjs_base_1.TPromise.as(null)).done(function () {
                        action.dispose();
                    }, function (err) { return _this.onError(err); });
                }
                catch (error) {
                    _this.onError(error);
                }
            }
            else {
                _this.messageService.show(message_1.Severity.Info, nls.localize('actionNotEnabled', "Command '{0}' is not enabled in the current context.", _this.getLabel()));
            }
        }, function (err) { return _this.onError(err); });
    };
    return BaseCommandEntry;
}(quickOpenModel_1.QuickOpenEntryGroup));
BaseCommandEntry = __decorate([
    __param(6, message_1.IMessageService),
    __param(7, telemetry_1.ITelemetryService)
], BaseCommandEntry);
var CommandEntry = (function (_super) {
    __extends(CommandEntry, _super);
    function CommandEntry(keyLabel, keyAriaLabel, label, meta, labelHighlights, aliasHighlights, actionDescriptor, instantiationService, messageService, telemetryService) {
        var _this = _super.call(this, keyLabel, keyAriaLabel, label, meta, labelHighlights, aliasHighlights, messageService, telemetryService) || this;
        _this.instantiationService = instantiationService;
        _this.actionDescriptor = actionDescriptor;
        return _this;
    }
    CommandEntry.prototype.run = function (mode, context) {
        if (mode === quickOpen_1.Mode.OPEN) {
            var action = this.instantiationService.createInstance(this.actionDescriptor.syncDescriptor);
            this.runAction(action);
            return true;
        }
        return false;
    };
    return CommandEntry;
}(BaseCommandEntry));
CommandEntry = __decorate([
    __param(7, instantiation_1.IInstantiationService),
    __param(8, message_1.IMessageService),
    __param(9, telemetry_1.ITelemetryService)
], CommandEntry);
var EditorActionCommandEntry = (function (_super) {
    __extends(EditorActionCommandEntry, _super);
    function EditorActionCommandEntry(keyLabel, keyAriaLabel, label, meta, labelHighlights, aliasHighlights, action, messageService, telemetryService) {
        var _this = _super.call(this, keyLabel, keyAriaLabel, label, meta, labelHighlights, aliasHighlights, messageService, telemetryService) || this;
        _this.action = action;
        return _this;
    }
    EditorActionCommandEntry.prototype.run = function (mode, context) {
        var _this = this;
        if (mode === quickOpen_1.Mode.OPEN) {
            // Use a timeout to give the quick open widget a chance to close itself first
            winjs_base_1.TPromise.timeout(50).done(function () {
                if (_this.action) {
                    try {
                        _this.telemetryService.publicLog('workbenchActionExecuted', { id: _this.action.id, from: 'quick open' });
                        (_this.action.run() || winjs_base_1.TPromise.as(null)).done(null, function (err) { return _this.onError(err); });
                    }
                    catch (error) {
                        _this.onError(error);
                    }
                }
                else {
                    _this.messageService.show(message_1.Severity.Info, nls.localize('actionNotEnabled', "Command '{0}' is not enabled in the current context.", _this.getLabel()));
                }
            }, function (err) { return _this.onError(err); });
            return true;
        }
        return false;
    };
    return EditorActionCommandEntry;
}(BaseCommandEntry));
EditorActionCommandEntry = __decorate([
    __param(7, message_1.IMessageService),
    __param(8, telemetry_1.ITelemetryService)
], EditorActionCommandEntry);
var ActionCommandEntry = (function (_super) {
    __extends(ActionCommandEntry, _super);
    function ActionCommandEntry(keyLabel, keyAriaLabel, label, alias, labelHighlights, aliasHighlights, action, messageService, telemetryService) {
        var _this = _super.call(this, keyLabel, keyAriaLabel, label, alias, labelHighlights, aliasHighlights, messageService, telemetryService) || this;
        _this.action = action;
        return _this;
    }
    ActionCommandEntry.prototype.run = function (mode, context) {
        if (mode === quickOpen_1.Mode.OPEN) {
            this.runAction(this.action);
            return true;
        }
        return false;
    };
    return ActionCommandEntry;
}(BaseCommandEntry));
ActionCommandEntry = __decorate([
    __param(7, message_1.IMessageService),
    __param(8, telemetry_1.ITelemetryService)
], ActionCommandEntry);
var CommandsHandler = (function (_super) {
    __extends(CommandsHandler, _super);
    function CommandsHandler(editorService, instantiationService, keybindingService, menuService) {
        var _this = _super.call(this) || this;
        _this.editorService = editorService;
        _this.instantiationService = instantiationService;
        _this.keybindingService = keybindingService;
        _this.menuService = menuService;
        return _this;
    }
    CommandsHandler.prototype.includeWorkbenchCommands = function () {
        return true;
    };
    CommandsHandler.prototype.getResults = function (searchValue) {
        var _this = this;
        searchValue = searchValue.trim();
        // Workbench Actions (if prefix asks for all commands)
        var workbenchEntries = [];
        if (this.includeWorkbenchCommands()) {
            var workbenchActions = platform_2.Registry.as(actionRegistry_1.Extensions.WorkbenchActions).getWorkbenchActions();
            workbenchEntries = this.actionDescriptorsToEntries(workbenchActions, searchValue);
        }
        // Editor Actions
        var activeEditor = this.editorService.getActiveEditor();
        var activeEditorControl = (activeEditor ? activeEditor.getControl() : null);
        var editorActions = [];
        if (activeEditorControl) {
            var editor = activeEditorControl;
            if (types.isFunction(editor.getSupportedActions)) {
                editorActions = editor.getSupportedActions();
            }
        }
        var editorEntries = this.editorActionsToEntries(editorActions, searchValue);
        // Other Actions
        var otherActions = this.menuService.getCommandActions().map(function (command) {
            return _this.instantiationService.createInstance(actions_1.ExecuteCommandAction, command.id, command.category ? nls.localize('', "{0}: {1}", command.category, command.title) : command.title);
        });
        var otherEntries = this.otherActionsToEntries(otherActions, searchValue);
        // Concat
        var entries = workbenchEntries.concat(editorEntries, otherEntries);
        // Remove duplicates
        entries = arrays.distinct(entries, function (entry) { return entry.getLabel() + entry.getGroupLabel(); });
        // Sort by name
        entries = entries.sort(function (elementA, elementB) { return elementA.getLabel().toLowerCase().localeCompare(elementB.getLabel().toLowerCase()); });
        return winjs_base_1.TPromise.as(new quickOpenModel_1.QuickOpenModel(entries));
    };
    CommandsHandler.prototype.actionDescriptorsToEntries = function (actionDescriptors, searchValue) {
        var _this = this;
        var entries = [];
        var registry = platform_2.Registry.as(actionRegistry_1.Extensions.WorkbenchActions);
        for (var i = 0; i < actionDescriptors.length; i++) {
            var actionDescriptor = actionDescriptors[i];
            var keys = this.keybindingService.lookupKeybindings(actionDescriptor.id);
            var keyLabel = keys.map(function (k) { return _this.keybindingService.getLabelFor(k); });
            var keyAriaLabel = keys.map(function (k) { return _this.keybindingService.getAriaLabelFor(k); });
            if (actionDescriptor.label) {
                // Label (with optional category)
                var label = actionDescriptor.label;
                var category = registry.getCategory(actionDescriptor.id);
                if (category) {
                    label = nls.localize('commandLabel', "{0}: {1}", category, label);
                }
                // Alias for non default languages
                var alias = (platform_1.language !== platform_1.LANGUAGE_DEFAULT) ? registry.getAlias(actionDescriptor.id) : null;
                var labelHighlights = wordFilter(searchValue, label);
                var aliasHighlights = alias ? wordFilter(searchValue, alias) : null;
                if (labelHighlights || aliasHighlights) {
                    entries.push(this.instantiationService.createInstance(CommandEntry, keyLabel.length > 0 ? keyLabel.join(', ') : '', keyAriaLabel.length > 0 ? keyAriaLabel.join(', ') : '', label, alias, labelHighlights, aliasHighlights, actionDescriptor));
                }
            }
        }
        return entries;
    };
    CommandsHandler.prototype.editorActionsToEntries = function (actions, searchValue) {
        var _this = this;
        var entries = [];
        for (var i = 0; i < actions.length; i++) {
            var action = actions[i];
            var keys = this.keybindingService.lookupKeybindings(action.id);
            var keyLabel = keys.map(function (k) { return _this.keybindingService.getLabelFor(k); });
            var keyAriaLabel = keys.map(function (k) { return _this.keybindingService.getAriaLabelFor(k); });
            var label = action.label;
            if (label) {
                // Alias for non default languages
                var alias = (platform_1.language !== platform_1.LANGUAGE_DEFAULT) ? action.alias : null;
                var labelHighlights = wordFilter(searchValue, label);
                var aliasHighlights = alias ? wordFilter(searchValue, alias) : null;
                if (labelHighlights || aliasHighlights) {
                    entries.push(this.instantiationService.createInstance(EditorActionCommandEntry, keyLabel.length > 0 ? keyLabel.join(', ') : '', keyAriaLabel.length > 0 ? keyAriaLabel.join(', ') : '', label, alias, labelHighlights, aliasHighlights, action));
                }
            }
        }
        return entries;
    };
    CommandsHandler.prototype.otherActionsToEntries = function (actions, searchValue) {
        var _this = this;
        var entries = [];
        for (var _i = 0, actions_2 = actions; _i < actions_2.length; _i++) {
            var action = actions_2[_i];
            var keys = this.keybindingService.lookupKeybindings(action.id);
            var keyLabel = keys.map(function (k) { return _this.keybindingService.getLabelFor(k); });
            var keyAriaLabel = keys.map(function (k) { return _this.keybindingService.getAriaLabelFor(k); });
            var highlights = wordFilter(searchValue, action.label);
            if (highlights) {
                entries.push(this.instantiationService.createInstance(ActionCommandEntry, keyLabel.join(', '), keyAriaLabel.join(', '), action.label, null, highlights, null, action));
            }
        }
        return entries;
    };
    CommandsHandler.prototype.getAutoFocus = function (searchValue) {
        return {
            autoFocusFirstEntry: true,
            autoFocusPrefixMatch: searchValue.trim()
        };
    };
    CommandsHandler.prototype.getClass = function () {
        return 'commands-handler';
    };
    CommandsHandler.prototype.getEmptyLabel = function (searchString) {
        return nls.localize('noCommandsMatching', "No commands matching");
    };
    return CommandsHandler;
}(quickopen_1.QuickOpenHandler));
CommandsHandler = __decorate([
    __param(0, editorService_1.IWorkbenchEditorService),
    __param(1, instantiation_1.IInstantiationService),
    __param(2, keybinding_1.IKeybindingService),
    __param(3, actions_1.IMenuService)
], CommandsHandler);
exports.CommandsHandler = CommandsHandler;
var EditorCommandsHandler = (function (_super) {
    __extends(EditorCommandsHandler, _super);
    function EditorCommandsHandler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    EditorCommandsHandler.prototype.includeWorkbenchCommands = function () {
        return false;
    };
    return EditorCommandsHandler;
}(CommandsHandler));
exports.EditorCommandsHandler = EditorCommandsHandler;
