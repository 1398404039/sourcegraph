/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var lifecycle = require("vs/base/common/lifecycle");
var async = require("vs/base/common/async");
var stringei = require("vs/workbench/common/editor/stringEditorInput");
var diffei = require("vs/workbench/common/editor/diffEditorInput");
var git = require("vs/workbench/parts/git/common/git");
var editorService_1 = require("vs/workbench/services/editor/common/editorService");
var instantiation_1 = require("vs/platform/instantiation/common/instantiation");
var IGitService = git.IGitService;
function isGitEditorInput(input) {
    return input instanceof GitDiffEditorInput || input instanceof NativeGitIndexStringEditorInput;
}
exports.isGitEditorInput = isGitEditorInput;
var GitDiffEditorInput = (function (_super) {
    __extends(GitDiffEditorInput, _super);
    function GitDiffEditorInput(name, description, originalInput, modifiedInput, status) {
        var _this = _super.call(this, name, description, originalInput, modifiedInput) || this;
        _this.status = status;
        return _this;
    }
    GitDiffEditorInput.prototype.getFileStatus = function () {
        return this.status;
    };
    GitDiffEditorInput.prototype.contains = function (otherInput) {
        if (this.matches(otherInput)) {
            return true;
        }
        var originalInput = this.originalInput;
        if (originalInput && originalInput.matches(otherInput)) {
            return true;
        }
        var modifiedInput = this.modifiedInput;
        if (modifiedInput && modifiedInput.matches(otherInput)) {
            return true;
        }
        return false;
    };
    return GitDiffEditorInput;
}(diffei.DiffEditorInput));
exports.GitDiffEditorInput = GitDiffEditorInput;
var GitWorkingTreeDiffEditorInput = (function (_super) {
    __extends(GitWorkingTreeDiffEditorInput, _super);
    function GitWorkingTreeDiffEditorInput(name, description, originalInput, modifiedInput, status) {
        return _super.call(this, name, description, originalInput, modifiedInput, status) || this;
    }
    GitWorkingTreeDiffEditorInput.prototype.getTypeId = function () {
        return GitWorkingTreeDiffEditorInput.ID;
    };
    return GitWorkingTreeDiffEditorInput;
}(GitDiffEditorInput));
GitWorkingTreeDiffEditorInput.ID = 'vs.git.workingTreeDiffInput';
exports.GitWorkingTreeDiffEditorInput = GitWorkingTreeDiffEditorInput;
var GitIndexDiffEditorInput = (function (_super) {
    __extends(GitIndexDiffEditorInput, _super);
    function GitIndexDiffEditorInput(name, description, originalInput, modifiedInput, status) {
        return _super.call(this, name, description, originalInput, modifiedInput, status) || this;
    }
    GitIndexDiffEditorInput.prototype.getTypeId = function () {
        return GitIndexDiffEditorInput.ID;
    };
    return GitIndexDiffEditorInput;
}(GitDiffEditorInput));
GitIndexDiffEditorInput.ID = 'vs.git.indexDiffInput';
exports.GitIndexDiffEditorInput = GitIndexDiffEditorInput;
var NativeGitIndexStringEditorInput = (function (_super) {
    __extends(NativeGitIndexStringEditorInput, _super);
    function NativeGitIndexStringEditorInput(name, description, mime, status, path, treeish, gitService, editorService, instantiationService) {
        var _this = _super.call(this, name, description, null, mime, false, instantiationService) || this;
        _this.gitService = gitService;
        _this.editorService = editorService;
        _this.status = status;
        _this.path = path;
        _this.treeish = treeish;
        _this.delayer = new async.ThrottledDelayer(1000);
        _this.toDispose = [];
        _this.toDispose.push(_this.gitService.addListener2(git.ServiceEvents.STATE_CHANGED, function () { return _this.onGitServiceStateChange(); }));
        _this.toDispose.push(_this.gitService.addListener2(git.ServiceEvents.OPERATION_END, function () { return _this.onGitServiceStateChange(); }));
        return _this;
    }
    NativeGitIndexStringEditorInput.prototype.getTypeId = function () {
        return NativeGitIndexStringEditorInput.ID;
    };
    NativeGitIndexStringEditorInput.prototype.getFileStatus = function () {
        return this.status;
    };
    NativeGitIndexStringEditorInput.prototype.resolve = function (refresh) {
        var _this = this;
        if (refresh || !this.getValue()) {
            return this.gitService.buffer(this.path, this.treeish).then(function (contents) {
                if (_this.getValue() !== contents) {
                    _this.setValue(contents);
                }
                return _super.prototype.resolve.call(_this, refresh);
            });
        }
        else {
            return _super.prototype.resolve.call(this, refresh);
        }
    };
    NativeGitIndexStringEditorInput.prototype.onGitServiceStateChange = function () {
        var _this = this;
        var isVisible = this.editorService.isVisible(this, true);
        if (!isVisible) {
            return;
        }
        this.delayer.trigger(function () { return _this.resolve(true); });
    };
    NativeGitIndexStringEditorInput.prototype.dispose = function () {
        if (this.delayer) {
            this.delayer.cancel();
            this.delayer = null;
        }
        this.toDispose = lifecycle.dispose(this.toDispose);
        _super.prototype.dispose.call(this);
    };
    return NativeGitIndexStringEditorInput;
}(stringei.StringEditorInput));
NativeGitIndexStringEditorInput.ID = 'vs.git.stringEditorInput';
NativeGitIndexStringEditorInput = __decorate([
    __param(6, IGitService),
    __param(7, editorService_1.IWorkbenchEditorService),
    __param(8, instantiation_1.IInstantiationService)
], NativeGitIndexStringEditorInput);
exports.NativeGitIndexStringEditorInput = NativeGitIndexStringEditorInput;
