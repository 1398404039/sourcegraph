/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
require("vs/workbench/parts/debug/browser/media/debugActionsWidget.css");
var lifecycle = require("vs/base/common/lifecycle");
var errors = require("vs/base/common/errors");
var strings = require("vs/base/common/strings");
var browser = require("vs/base/browser/browser");
var severity_1 = require("vs/base/common/severity");
var builder = require("vs/base/browser/builder");
var dom = require("vs/base/browser/dom");
var arrays = require("vs/base/common/arrays");
var mouseEvent_1 = require("vs/base/browser/mouseEvent");
var events_1 = require("vs/base/common/events");
var actionbar_1 = require("vs/base/browser/ui/actionbar/actionbar");
var partService_1 = require("vs/workbench/services/part/common/partService");
var debug_1 = require("vs/workbench/parts/debug/common/debug");
var debugActions_1 = require("vs/workbench/parts/debug/browser/debugActions");
var debugActionItems_1 = require("vs/workbench/parts/debug/browser/debugActionItems");
var instantiation_1 = require("vs/platform/instantiation/common/instantiation");
var configuration_1 = require("vs/platform/configuration/common/configuration");
var storage_1 = require("vs/platform/storage/common/storage");
var message_1 = require("vs/platform/message/common/message");
var telemetry_1 = require("vs/platform/telemetry/common/telemetry");
var $ = builder.$;
var DEBUG_ACTIONS_WIDGET_POSITION_KEY = 'debug.actionswidgetposition';
var DebugActionsWidget = (function () {
    function DebugActionsWidget(messageService, telemetryService, debugService, instantiationService, partService, storageService, configurationService) {
        var _this = this;
        this.messageService = messageService;
        this.telemetryService = telemetryService;
        this.debugService = debugService;
        this.instantiationService = instantiationService;
        this.partService = partService;
        this.storageService = storageService;
        this.configurationService = configurationService;
        this.$el = $().div().addClass('debug-actions-widget').style('top', partService.getTitleBarOffset() + "px");
        this.dragArea = $().div().addClass('drag-area');
        this.$el.append(this.dragArea);
        var actionBarContainter = $().div().addClass('.action-bar-container');
        this.$el.append(actionBarContainter);
        this.toDispose = [];
        this.activeActions = [];
        this.actionBar = new actionbar_1.ActionBar(actionBarContainter, {
            orientation: actionbar_1.ActionsOrientation.HORIZONTAL,
            actionItemProvider: function (action) {
                if (action.id === debugActions_1.FocusProcessAction.ID) {
                    if (!_this.focusProcessActionItem) {
                        _this.focusProcessActionItem = _this.instantiationService.createInstance(debugActionItems_1.FocusProcessActionItem, action);
                        _this.toDispose.push(_this.focusProcessActionItem);
                    }
                    return _this.focusProcessActionItem;
                }
                return null;
            }
        });
        this.toDispose.push(this.actionBar);
        this.registerListeners();
        this.hide();
        this.isBuilt = false;
    }
    DebugActionsWidget.prototype.registerListeners = function () {
        var _this = this;
        this.toDispose.push(this.debugService.onDidChangeState(function () { return _this.update(); }));
        this.toDispose.push(this.configurationService.onDidUpdateConfiguration(function () { return _this.update(); }));
        this.toDispose.push(this.actionBar.actionRunner.addListener2(events_1.EventType.RUN, function (e) {
            // check for error
            if (e.error && !errors.isPromiseCanceledError(e.error)) {
                _this.messageService.show(severity_1.default.Error, e.error);
            }
            // log in telemetry
            if (_this.telemetryService) {
                _this.telemetryService.publicLog('workbenchActionExecuted', { id: e.action.id, from: 'debugActionsWidget' });
            }
        }));
        $(window).on(dom.EventType.RESIZE, function () { return _this.setXCoordinate(); }, this.toDispose);
        this.dragArea.on(dom.EventType.MOUSE_UP, function (event) {
            var mouseClickEvent = new mouseEvent_1.StandardMouseEvent(event);
            if (mouseClickEvent.detail === 2) {
                // double click on debug bar centers it again #8250
                _this.setXCoordinate(0.5 * window.innerWidth);
            }
        });
        this.dragArea.on(dom.EventType.MOUSE_DOWN, function (event) {
            var $window = $(window);
            _this.dragArea.addClass('dragged');
            $window.on('mousemove', function (e) {
                var mouseMoveEvent = new mouseEvent_1.StandardMouseEvent(e);
                // Prevent default to stop editor selecting text #8524
                mouseMoveEvent.preventDefault();
                // Reduce x by width of drag handle to reduce jarring #16604
                _this.setXCoordinate(mouseMoveEvent.posx - 14);
            }).once('mouseup', function (e) {
                var mouseMoveEvent = new mouseEvent_1.StandardMouseEvent(e);
                _this.storageService.store(DEBUG_ACTIONS_WIDGET_POSITION_KEY, mouseMoveEvent.posx / window.innerWidth, storage_1.StorageScope.WORKSPACE);
                _this.dragArea.removeClass('dragged');
                $window.off('mousemove');
            });
        });
        this.toDispose.push(this.partService.onTitleBarVisibilityChange(function () { return _this.positionDebugWidget(); }));
        this.toDispose.push(browser.onDidChangeZoomLevel(function () { return _this.positionDebugWidget(); }));
    };
    DebugActionsWidget.prototype.positionDebugWidget = function () {
        var titlebarOffset = this.partService.getTitleBarOffset();
        $(this.$el).style('top', titlebarOffset + "px");
    };
    DebugActionsWidget.prototype.setXCoordinate = function (x) {
        if (!this.isVisible) {
            return;
        }
        if (x === undefined) {
            x = parseFloat(this.storageService.get(DEBUG_ACTIONS_WIDGET_POSITION_KEY, storage_1.StorageScope.WORKSPACE, '0.5')) * window.innerWidth;
        }
        var widgetWidth = this.$el.getHTMLElement().clientWidth;
        x = Math.max(0, Math.min(x, window.innerWidth - widgetWidth)); // do not allow the widget to overflow on the right
        this.$el.style('left', x + "px");
    };
    DebugActionsWidget.prototype.getId = function () {
        return DebugActionsWidget.ID;
    };
    DebugActionsWidget.prototype.update = function () {
        if (this.debugService.state === debug_1.State.Inactive || this.configurationService.getConfiguration('debug').hideActionBar) {
            return this.hide();
        }
        var actions = this.getActions();
        if (!arrays.equals(actions, this.activeActions, function (first, second) { return first.id === second.id; })) {
            this.actionBar.clear();
            this.actionBar.push(actions, { icon: true, label: false });
            this.activeActions = actions;
        }
        this.show();
    };
    DebugActionsWidget.prototype.show = function () {
        if (this.isVisible) {
            return;
        }
        if (!this.isBuilt) {
            this.isBuilt = true;
            this.$el.build(builder.withElementById(this.partService.getWorkbenchElementId()).getHTMLElement());
        }
        this.isVisible = true;
        this.$el.show();
        this.setXCoordinate();
    };
    DebugActionsWidget.prototype.hide = function () {
        this.isVisible = false;
        this.$el.hide();
    };
    DebugActionsWidget.prototype.getActions = function () {
        var _this = this;
        if (!this.allActions) {
            this.allActions = [];
            this.allActions.push(this.instantiationService.createInstance(debugActions_1.ContinueAction, debugActions_1.ContinueAction.ID, debugActions_1.ContinueAction.LABEL));
            this.allActions.push(this.instantiationService.createInstance(debugActions_1.PauseAction, debugActions_1.PauseAction.ID, debugActions_1.PauseAction.LABEL));
            this.allActions.push(this.instantiationService.createInstance(debugActions_1.StopAction, debugActions_1.StopAction.ID, debugActions_1.StopAction.LABEL));
            this.allActions.push(this.instantiationService.createInstance(debugActions_1.DisconnectAction, debugActions_1.DisconnectAction.ID, debugActions_1.DisconnectAction.LABEL));
            this.allActions.push(this.instantiationService.createInstance(debugActions_1.StepOverAction, debugActions_1.StepOverAction.ID, debugActions_1.StepOverAction.LABEL));
            this.allActions.push(this.instantiationService.createInstance(debugActions_1.StepIntoAction, debugActions_1.StepIntoAction.ID, debugActions_1.StepIntoAction.LABEL));
            this.allActions.push(this.instantiationService.createInstance(debugActions_1.StepOutAction, debugActions_1.StepOutAction.ID, debugActions_1.StepOutAction.LABEL));
            this.allActions.push(this.instantiationService.createInstance(debugActions_1.RestartAction, debugActions_1.RestartAction.ID, debugActions_1.RestartAction.LABEL));
            this.allActions.push(this.instantiationService.createInstance(debugActions_1.StepBackAction, debugActions_1.StepBackAction.ID, debugActions_1.StepBackAction.LABEL));
            this.allActions.push(this.instantiationService.createInstance(debugActions_1.ReverseContinueAction, debugActions_1.ReverseContinueAction.ID, debugActions_1.ReverseContinueAction.LABEL));
            this.allActions.push(this.instantiationService.createInstance(debugActions_1.FocusProcessAction, debugActions_1.FocusProcessAction.ID, debugActions_1.FocusProcessAction.LABEL));
            this.allActions.forEach(function (a) {
                _this.toDispose.push(a);
            });
        }
        var state = this.debugService.state;
        var process = this.debugService.getViewModel().focusedProcess;
        var attached = process && strings.equalsIgnoreCase(process.configuration.request, 'attach') && !strings.equalsIgnoreCase(process.configuration.type, 'extensionHost');
        return this.allActions.filter(function (a) {
            if (a.id === debugActions_1.ContinueAction.ID) {
                return state !== debug_1.State.Running;
            }
            if (a.id === debugActions_1.PauseAction.ID) {
                return state === debug_1.State.Running;
            }
            if (a.id === debugActions_1.StepBackAction.ID) {
                return process && process.session.capabilities.supportsStepBack;
            }
            if (a.id === debugActions_1.ReverseContinueAction.ID) {
                return process && process.session.capabilities.supportsStepBack;
            }
            if (a.id === debugActions_1.DisconnectAction.ID) {
                return attached;
            }
            if (a.id === debugActions_1.StopAction.ID) {
                return !attached;
            }
            if (a.id === debugActions_1.FocusProcessAction.ID) {
                return _this.debugService.getViewModel().isMultiProcessView();
            }
            return true;
        }).sort(function (first, second) { return first.weight - second.weight; });
    };
    DebugActionsWidget.prototype.dispose = function () {
        this.toDispose = lifecycle.dispose(this.toDispose);
        if (this.$el) {
            this.$el.destroy();
            delete this.$el;
        }
    };
    return DebugActionsWidget;
}());
DebugActionsWidget.ID = 'debug.actionsWidget';
DebugActionsWidget = __decorate([
    __param(0, message_1.IMessageService),
    __param(1, telemetry_1.ITelemetryService),
    __param(2, debug_1.IDebugService),
    __param(3, instantiation_1.IInstantiationService),
    __param(4, partService_1.IPartService),
    __param(5, storage_1.IStorageService),
    __param(6, configuration_1.IConfigurationService)
], DebugActionsWidget);
exports.DebugActionsWidget = DebugActionsWidget;
