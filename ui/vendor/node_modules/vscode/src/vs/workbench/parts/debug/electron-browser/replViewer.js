/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var nls = require("vs/nls");
var winjs_base_1 = require("vs/base/common/winjs.base");
var strings_1 = require("vs/base/common/strings");
var uri_1 = require("vs/base/common/uri");
var platform_1 = require("vs/base/common/platform");
var actionbar_1 = require("vs/base/browser/ui/actionbar/actionbar");
var dom = require("vs/base/browser/dom");
var errors = require("vs/base/common/errors");
var severity_1 = require("vs/base/common/severity");
var mouseEvent_1 = require("vs/base/browser/mouseEvent");
var debug_1 = require("vs/workbench/parts/debug/common/debug");
var debugModel_1 = require("vs/workbench/parts/debug/common/debugModel");
var debugViewer_1 = require("vs/workbench/parts/debug/electron-browser/debugViewer");
var debugActions_1 = require("vs/workbench/parts/debug/browser/debugActions");
var electronDebugActions_1 = require("vs/workbench/parts/debug/electron-browser/electronDebugActions");
var contextView_1 = require("vs/platform/contextview/browser/contextView");
var actions_1 = require("vs/platform/actions/common/actions");
var contextkey_1 = require("vs/platform/contextkey/common/contextkey");
var editorService_1 = require("vs/workbench/services/editor/common/editorService");
var workspace_1 = require("vs/platform/workspace/common/workspace");
var $ = dom.$;
var ReplExpressionsDataSource = (function () {
    function ReplExpressionsDataSource() {
    }
    ReplExpressionsDataSource.prototype.getId = function (tree, element) {
        return element.getId();
    };
    ReplExpressionsDataSource.prototype.hasChildren = function (tree, element) {
        return element instanceof debugModel_1.Model || element.hasChildren;
    };
    ReplExpressionsDataSource.prototype.getChildren = function (tree, element) {
        if (element instanceof debugModel_1.Model) {
            return winjs_base_1.TPromise.as(element.getReplElements());
        }
        if (element instanceof debugModel_1.OutputNameValueElement) {
            return winjs_base_1.TPromise.as(element.getChildren());
        }
        if (element instanceof debugModel_1.OutputElement) {
            return winjs_base_1.TPromise.as(null);
        }
        return element.getChildren();
    };
    ReplExpressionsDataSource.prototype.getParent = function (tree, element) {
        return winjs_base_1.TPromise.as(null);
    };
    return ReplExpressionsDataSource;
}());
exports.ReplExpressionsDataSource = ReplExpressionsDataSource;
var ReplExpressionsRenderer = (function () {
    function ReplExpressionsRenderer(editorService, contextService) {
        this.editorService = editorService;
        this.contextService = contextService;
        // noop
    }
    ReplExpressionsRenderer.prototype.getHeight = function (tree, element) {
        return this.getHeightForString(element.value) + (element instanceof debugModel_1.Expression ? this.getHeightForString(element.name) : 0);
    };
    ReplExpressionsRenderer.prototype.getHeightForString = function (s) {
        var _this = this;
        if (!s || !s.length || !this.width || this.width <= 0 || !this.characterWidth || this.characterWidth <= 0) {
            return ReplExpressionsRenderer.LINE_HEIGHT_PX;
        }
        // Last new line should be ignored since the repl elements are by design split by rows
        if (strings_1.endsWith(s, '\n')) {
            s = s.substr(0, s.length - 1);
        }
        var lines = strings_1.removeAnsiEscapeCodes(s).split('\n');
        var numLines = lines.reduce(function (lineCount, line) {
            var lineLength = 0;
            for (var i = 0; i < line.length; i++) {
                lineLength += strings_1.isFullWidthCharacter(line.charCodeAt(i)) ? 2 : 1;
            }
            return lineCount + Math.floor(lineLength * _this.characterWidth / _this.width);
        }, lines.length);
        return ReplExpressionsRenderer.LINE_HEIGHT_PX * numLines;
    };
    ReplExpressionsRenderer.prototype.setWidth = function (fullWidth, characterWidth) {
        this.width = fullWidth;
        this.characterWidth = characterWidth;
    };
    ReplExpressionsRenderer.prototype.getTemplateId = function (tree, element) {
        if (element instanceof debugModel_1.Variable) {
            return ReplExpressionsRenderer.VARIABLE_TEMPLATE_ID;
        }
        if (element instanceof debugModel_1.Expression) {
            return ReplExpressionsRenderer.EXPRESSION_TEMPLATE_ID;
        }
        if (element instanceof debugModel_1.OutputElement) {
            return ReplExpressionsRenderer.VALUE_OUTPUT_TEMPLATE_ID;
        }
        if (element instanceof debugModel_1.OutputNameValueElement) {
            return ReplExpressionsRenderer.NAME_VALUE_OUTPUT_TEMPLATE_ID;
        }
        return null;
    };
    ReplExpressionsRenderer.prototype.renderTemplate = function (tree, templateId, container) {
        if (templateId === ReplExpressionsRenderer.VARIABLE_TEMPLATE_ID) {
            var data = Object.create(null);
            data.expression = dom.append(container, $('.expression'));
            data.name = dom.append(data.expression, $('span.name'));
            data.value = dom.append(data.expression, $('span.value'));
            return data;
        }
        if (templateId === ReplExpressionsRenderer.EXPRESSION_TEMPLATE_ID) {
            var data = Object.create(null);
            dom.addClass(container, 'input-output-pair');
            data.input = dom.append(container, $('.input.expression'));
            data.output = dom.append(container, $('.output.expression'));
            data.value = dom.append(data.output, $('span.value'));
            data.annotation = dom.append(data.output, $('span'));
            return data;
        }
        if (templateId === ReplExpressionsRenderer.VALUE_OUTPUT_TEMPLATE_ID) {
            var data = Object.create(null);
            dom.addClass(container, 'output');
            var expression = dom.append(container, $('.output.expression'));
            data.container = container;
            data.counter = dom.append(expression, $('div.counter'));
            data.value = dom.append(expression, $('span.value'));
            return data;
        }
        if (templateId === ReplExpressionsRenderer.NAME_VALUE_OUTPUT_TEMPLATE_ID) {
            var data = Object.create(null);
            dom.addClass(container, 'output');
            data.container = container;
            data.expression = dom.append(container, $('.output.expression'));
            data.name = dom.append(data.expression, $('span.name'));
            data.value = dom.append(data.expression, $('span.value'));
            data.annotation = dom.append(data.expression, $('span'));
            return data;
        }
    };
    ReplExpressionsRenderer.prototype.renderElement = function (tree, element, templateId, templateData) {
        if (templateId === ReplExpressionsRenderer.VARIABLE_TEMPLATE_ID) {
            debugViewer_1.renderVariable(tree, element, templateData, false);
        }
        else if (templateId === ReplExpressionsRenderer.EXPRESSION_TEMPLATE_ID) {
            this.renderExpression(tree, element, templateData);
        }
        else if (templateId === ReplExpressionsRenderer.VALUE_OUTPUT_TEMPLATE_ID) {
            this.renderOutputValue(element, templateData);
        }
        else if (templateId === ReplExpressionsRenderer.NAME_VALUE_OUTPUT_TEMPLATE_ID) {
            this.renderOutputNameValue(tree, element, templateData);
        }
    };
    ReplExpressionsRenderer.prototype.renderExpression = function (tree, expression, templateData) {
        templateData.input.textContent = expression.name;
        debugViewer_1.renderExpressionValue(expression, templateData.value, {
            preserveWhitespace: true,
            showHover: false
        });
        if (expression.hasChildren) {
            templateData.annotation.className = 'annotation octicon octicon-info';
            templateData.annotation.title = nls.localize('stateCapture', "Object state is captured from first evaluation");
        }
    };
    ReplExpressionsRenderer.prototype.renderOutputValue = function (output, templateData) {
        // counter
        if (output.counter > 1) {
            templateData.counter.textContent = String(output.counter);
            templateData.counter.className = (output.severity === severity_1.default.Warning) ? 'counter warn' : (output.severity === severity_1.default.Error) ? 'counter error' : 'counter info';
        }
        else {
            templateData.counter.textContent = '';
            templateData.counter.className = 'counter';
        }
        // value
        dom.clearNode(templateData.value);
        templateData.value.className = '';
        var result = this.handleANSIOutput(output.value);
        if (typeof result === 'string') {
            debugViewer_1.renderExpressionValue(result, templateData.value, {
                preserveWhitespace: true,
                showHover: false
            });
        }
        else {
            templateData.value.appendChild(result);
        }
        dom.addClass(templateData.value, (output.severity === severity_1.default.Warning) ? 'warn' : (output.severity === severity_1.default.Error) ? 'error' : 'info');
    };
    ReplExpressionsRenderer.prototype.renderOutputNameValue = function (tree, output, templateData) {
        // key
        if (output.name) {
            templateData.name.textContent = output.name + ":";
        }
        else {
            templateData.name.textContent = '';
        }
        // value
        debugViewer_1.renderExpressionValue(output.value, templateData.value, {
            preserveWhitespace: true,
            showHover: false
        });
        // annotation if any
        if (output.annotation) {
            templateData.annotation.className = 'annotation octicon octicon-info';
            templateData.annotation.title = output.annotation;
        }
        else {
            templateData.annotation.className = '';
            templateData.annotation.title = '';
        }
    };
    ReplExpressionsRenderer.prototype.handleANSIOutput = function (text) {
        var tokensContainer;
        var currentToken;
        var buffer = '';
        for (var i = 0, len = text.length; i < len; i++) {
            // start of ANSI escape sequence (see http://ascii-table.com/ansi-escape-sequences.php)
            if (text.charCodeAt(i) === 27) {
                var index = i;
                var chr = (++index < len ? text.charAt(index) : null);
                if (chr && chr === '[') {
                    var code = null;
                    chr = (++index < len ? text.charAt(index) : null);
                    if (chr && chr >= '0' && chr <= '9') {
                        code = chr;
                        chr = (++index < len ? text.charAt(index) : null);
                    }
                    if (chr && chr >= '0' && chr <= '9') {
                        code += chr;
                        chr = (++index < len ? text.charAt(index) : null);
                    }
                    if (code === null) {
                        code = '0';
                    }
                    if (chr === 'm') {
                        // only respect text-foreground ranges and ignore the values for "black" & "white" because those
                        // only make sense in combination with text-background ranges which we currently not support
                        var parsedMode = parseInt(code, 10);
                        var token = document.createElement('span');
                        if ((parsedMode >= 30 && parsedMode <= 37) || (parsedMode >= 90 && parsedMode <= 97)) {
                            token.className = 'code' + parsedMode;
                        }
                        else if (parsedMode === 1) {
                            token.className = 'code-bold';
                        }
                        // we need a tokens container now
                        if (!tokensContainer) {
                            tokensContainer = document.createElement('span');
                        }
                        // flush text buffer if we have any
                        if (buffer) {
                            this.insert(this.handleLinks(buffer), currentToken || tokensContainer);
                            buffer = '';
                        }
                        currentToken = token;
                        tokensContainer.appendChild(token);
                        i = index;
                    }
                }
            }
            else {
                buffer += text[i];
            }
        }
        // flush remaining text buffer if we have any
        if (buffer) {
            var res = this.handleLinks(buffer);
            if (typeof res !== 'string' || currentToken) {
                if (!tokensContainer) {
                    tokensContainer = document.createElement('span');
                }
                this.insert(res, currentToken || tokensContainer);
            }
        }
        return tokensContainer || buffer;
    };
    ReplExpressionsRenderer.prototype.insert = function (arg, target) {
        if (typeof arg === 'string') {
            target.textContent = arg;
        }
        else {
            target.appendChild(arg);
        }
    };
    ReplExpressionsRenderer.prototype.handleLinks = function (text) {
        var _this = this;
        var linkContainer;
        var _loop_1 = function (pattern) {
            pattern.lastIndex = 0; // the holy grail of software development
            var match = pattern.exec(text);
            var resource = null;
            try {
                // If root slash / drive letter is present, resolve relative path
                resource = match && (match[2] ? uri_1.default.file(match[1]) : this_1.contextService.toResource(match[1]));
            }
            catch (e) { }
            if (resource) {
                linkContainer = document.createElement('span');
                var textBeforeLink = text.substr(0, match.index);
                if (textBeforeLink) {
                    var span = document.createElement('span');
                    span.textContent = textBeforeLink;
                    linkContainer.appendChild(span);
                }
                var link = document.createElement('a');
                link.textContent = text.substr(match.index, match[0].length);
                link.title = platform_1.isMacintosh ? nls.localize('fileLinkMac', "Click to follow (Cmd + click opens to the side)") : nls.localize('fileLink', "Click to follow (Ctrl + click opens to the side)");
                linkContainer.appendChild(link);
                link.onclick = function (e) { return _this.onLinkClick(new mouseEvent_1.StandardMouseEvent(e), resource, Number(match[3]), match[4] && Number(match[4])); };
                var textAfterLink = text.substr(match.index + match[0].length);
                if (textAfterLink) {
                    var span = document.createElement('span');
                    span.textContent = textAfterLink;
                    linkContainer.appendChild(span);
                }
                return "break";
            }
        };
        var this_1 = this;
        for (var _i = 0, _a = ReplExpressionsRenderer.FILE_LOCATION_PATTERNS; _i < _a.length; _i++) {
            var pattern = _a[_i];
            var state_1 = _loop_1(pattern);
            if (state_1 === "break")
                break;
        }
        return linkContainer || text;
    };
    ReplExpressionsRenderer.prototype.onLinkClick = function (event, resource, line, column) {
        if (column === void 0) { column = 0; }
        var selection = window.getSelection();
        if (selection.type === 'Range') {
            return; // do not navigate when user is selecting
        }
        event.preventDefault();
        this.editorService.openEditor({
            resource: resource,
            options: {
                selection: {
                    startLineNumber: line,
                    startColumn: column
                }
            }
        }, event.ctrlKey || event.metaKey).done(null, errors.onUnexpectedError);
    };
    ReplExpressionsRenderer.prototype.disposeTemplate = function (tree, templateId, templateData) {
        // noop
    };
    return ReplExpressionsRenderer;
}());
ReplExpressionsRenderer.VARIABLE_TEMPLATE_ID = 'variable';
ReplExpressionsRenderer.EXPRESSION_TEMPLATE_ID = 'inputOutputPair';
ReplExpressionsRenderer.VALUE_OUTPUT_TEMPLATE_ID = 'outputValue';
ReplExpressionsRenderer.NAME_VALUE_OUTPUT_TEMPLATE_ID = 'outputNameValue';
ReplExpressionsRenderer.FILE_LOCATION_PATTERNS = [
    // group 0: the full thing :)
    // group 1: absolute path
    // group 2: the root slash/drive letter, if present
    // group 3: line number
    // group 4: column number
    // eg: at Context.<anonymous> (c:\Users\someone\Desktop\mocha-runner\test\test.js:26:11)
    /(?:at |^|[\(<\'\"\[])(?:file:\/\/)?((?:(\/|[a-zA-Z]:)|[^\(\)<>\'\"\[\]:\s]+)(?:[\\/][^\(\)<>\'\"\[\]:]*)?):(\d+)(?::(\d+))?(?:$|[\)>\'\"\]])/
];
ReplExpressionsRenderer.LINE_HEIGHT_PX = 18;
ReplExpressionsRenderer = __decorate([
    __param(0, editorService_1.IWorkbenchEditorService),
    __param(1, workspace_1.IWorkspaceContextService)
], ReplExpressionsRenderer);
exports.ReplExpressionsRenderer = ReplExpressionsRenderer;
var ReplExpressionsAccessibilityProvider = (function () {
    function ReplExpressionsAccessibilityProvider() {
    }
    ReplExpressionsAccessibilityProvider.prototype.getAriaLabel = function (tree, element) {
        if (element instanceof debugModel_1.Variable) {
            return nls.localize('replVariableAriaLabel', "Variable {0} has value {1}, read eval print loop, debug", element.name, element.value);
        }
        if (element instanceof debugModel_1.Expression) {
            return nls.localize('replExpressionAriaLabel', "Expression {0} has value {1}, read eval print loop, debug", element.name, element.value);
        }
        if (element instanceof debugModel_1.OutputElement) {
            return nls.localize('replValueOutputAriaLabel', "{0}, read eval print loop, debug", element.value);
        }
        if (element instanceof debugModel_1.OutputNameValueElement) {
            return nls.localize('replKeyValueOutputAriaLabel', "Output variable {0} has value {1}, read eval print loop, debug", element.name, element.value);
        }
        return null;
    };
    return ReplExpressionsAccessibilityProvider;
}());
exports.ReplExpressionsAccessibilityProvider = ReplExpressionsAccessibilityProvider;
var ReplExpressionsActionProvider = (function () {
    function ReplExpressionsActionProvider(instantiationService) {
        this.instantiationService = instantiationService;
        // noop
    }
    ReplExpressionsActionProvider.prototype.hasActions = function (tree, element) {
        return false;
    };
    ReplExpressionsActionProvider.prototype.getActions = function (tree, element) {
        return winjs_base_1.TPromise.as([]);
    };
    ReplExpressionsActionProvider.prototype.hasSecondaryActions = function (tree, element) {
        return true;
    };
    ReplExpressionsActionProvider.prototype.getSecondaryActions = function (tree, element) {
        var actions = [];
        if (element instanceof debugModel_1.Variable || element instanceof debugModel_1.Expression) {
            actions.push(this.instantiationService.createInstance(debugActions_1.AddToWatchExpressionsAction, debugActions_1.AddToWatchExpressionsAction.ID, debugActions_1.AddToWatchExpressionsAction.LABEL, element));
            actions.push(new actionbar_1.Separator());
        }
        actions.push(new electronDebugActions_1.CopyAction(electronDebugActions_1.CopyAction.ID, electronDebugActions_1.CopyAction.LABEL));
        actions.push(this.instantiationService.createInstance(debugActions_1.ClearReplAction, debugActions_1.ClearReplAction.ID, debugActions_1.ClearReplAction.LABEL));
        return winjs_base_1.TPromise.as(actions);
    };
    ReplExpressionsActionProvider.prototype.getActionItem = function (tree, element, action) {
        return null;
    };
    return ReplExpressionsActionProvider;
}());
exports.ReplExpressionsActionProvider = ReplExpressionsActionProvider;
var ReplExpressionsController = (function (_super) {
    __extends(ReplExpressionsController, _super);
    function ReplExpressionsController(replInput, actionProvider, debugService, contextMenuService, contextKeyService, menuService) {
        var _this = _super.call(this, actionProvider, actions_1.MenuId.DebugConsoleContext, debugService, contextMenuService, contextKeyService, menuService) || this;
        _this.replInput = replInput;
        _this.lastSelectedString = null;
        return _this;
    }
    ReplExpressionsController.prototype.onLeftClick = function (tree, element, eventish, origin) {
        if (origin === void 0) { origin = 'mouse'; }
        var mouseEvent = eventish;
        // input and output are one element in the tree => we only expand if the user clicked on the output.
        if ((element.reference > 0 || (element instanceof debugModel_1.OutputNameValueElement && element.hasChildren)) && mouseEvent.target.className.indexOf('input expression') === -1) {
            _super.prototype.onLeftClick.call(this, tree, element, eventish, origin);
            tree.clearFocus();
            tree.deselect(element);
        }
        var selection = window.getSelection();
        if (selection.type !== 'Range' || this.lastSelectedString === selection.toString()) {
            // only focus the input if the user is not currently selecting.
            this.replInput.focus();
        }
        this.lastSelectedString = selection.toString();
        return true;
    };
    ReplExpressionsController.prototype.onDown = function (tree, event) {
        if (tree.getFocus()) {
            return _super.prototype.onDown.call(this, tree, event);
        }
        var payload = { origin: 'keyboard', originalEvent: event };
        tree.focusLast(payload);
        tree.reveal(tree.getFocus()).done(null, errors.onUnexpectedError);
        return true;
    };
    return ReplExpressionsController;
}(debugViewer_1.BaseDebugController));
ReplExpressionsController = __decorate([
    __param(2, debug_1.IDebugService),
    __param(3, contextView_1.IContextMenuService),
    __param(4, contextkey_1.IContextKeyService),
    __param(5, actions_1.IMenuService)
], ReplExpressionsController);
exports.ReplExpressionsController = ReplExpressionsController;
