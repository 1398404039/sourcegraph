/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
require("./media/files.contribution.css");
var uri_1 = require("vs/base/common/uri");
var viewlet_1 = require("vs/workbench/browser/viewlet");
var nls = require("vs/nls");
var actions_1 = require("vs/platform/actions/common/actions");
var platform_1 = require("vs/platform/platform");
var configurationRegistry_1 = require("vs/platform/configuration/common/configurationRegistry");
var actionRegistry_1 = require("vs/workbench/common/actionRegistry");
var contributions_1 = require("vs/workbench/common/contributions");
var editor_1 = require("vs/workbench/common/editor");
var files_1 = require("vs/platform/files/common/files");
var baseEditor_1 = require("vs/workbench/browser/parts/editor/baseEditor");
var files_2 = require("vs/workbench/parts/files/common/files");
var fileEditorTracker_1 = require("vs/workbench/parts/files/common/editors/fileEditorTracker");
var saveErrorHandler_1 = require("vs/workbench/parts/files/browser/saveErrorHandler");
var fileEditorInput_1 = require("vs/workbench/parts/files/common/editors/fileEditorInput");
var textFileEditor_1 = require("vs/workbench/parts/files/browser/editors/textFileEditor");
var binaryFileEditor_1 = require("vs/workbench/parts/files/browser/editors/binaryFileEditor");
var descriptors_1 = require("vs/platform/instantiation/common/descriptors");
var viewlet_2 = require("vs/workbench/services/viewlet/browser/viewlet");
var editorService_1 = require("vs/workbench/services/editor/common/editorService");
var platform = require("vs/base/common/platform");
// Viewlet Action
var OpenExplorerViewletAction = (function (_super) {
    __extends(OpenExplorerViewletAction, _super);
    function OpenExplorerViewletAction(id, label, viewletService, editorService) {
        return _super.call(this, id, label, files_2.VIEWLET_ID, viewletService, editorService) || this;
    }
    return OpenExplorerViewletAction;
}(viewlet_1.ToggleViewletAction));
OpenExplorerViewletAction.ID = files_2.VIEWLET_ID;
OpenExplorerViewletAction.LABEL = nls.localize('showExplorerViewlet', "Show Explorer");
OpenExplorerViewletAction = __decorate([
    __param(2, viewlet_2.IViewletService),
    __param(3, editorService_1.IWorkbenchEditorService)
], OpenExplorerViewletAction);
exports.OpenExplorerViewletAction = OpenExplorerViewletAction;
// Register Viewlet
platform_1.Registry.as(viewlet_1.Extensions.Viewlets).registerViewlet(new viewlet_1.ViewletDescriptor('vs/workbench/parts/files/browser/explorerViewlet', 'ExplorerViewlet', files_2.VIEWLET_ID, nls.localize('explore', "Explorer"), 'explore', 0));
platform_1.Registry.as(viewlet_1.Extensions.Viewlets).setDefaultViewletId(files_2.VIEWLET_ID);
var openViewletKb = {
    primary: 32768 /* CtrlCmd */ | 16384 /* Shift */ | 35 /* KEY_E */
};
// Register Action to Open Viewlet
var registry = platform_1.Registry.as(actionRegistry_1.Extensions.WorkbenchActions);
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(OpenExplorerViewletAction, OpenExplorerViewletAction.ID, OpenExplorerViewletAction.LABEL, openViewletKb), 'View: Show Explorer', nls.localize('view', "View"));
// Register file editors
platform_1.Registry.as(editor_1.Extensions.Editors).registerEditor(new baseEditor_1.EditorDescriptor(textFileEditor_1.TextFileEditor.ID, // explicit dependency because we don't want these editors lazy loaded
nls.localize('textFileEditor', "Text File Editor"), 'vs/workbench/parts/files/browser/editors/textFileEditor', 'TextFileEditor'), [
    new descriptors_1.SyncDescriptor(fileEditorInput_1.FileEditorInput)
]);
platform_1.Registry.as(editor_1.Extensions.Editors).registerEditor(new baseEditor_1.EditorDescriptor(binaryFileEditor_1.BinaryFileEditor.ID, // explicit dependency because we don't want these editors lazy loaded
nls.localize('binaryFileEditor', "Binary File Editor"), 'vs/workbench/parts/files/browser/editors/binaryFileEditor', 'BinaryFileEditor'), [
    new descriptors_1.SyncDescriptor(fileEditorInput_1.FileEditorInput)
]);
// Register default file input handler
// Note: because of service injection, the descriptor needs to have the exact count
// of arguments as the FileEditorInput constructor. Otherwise when creating an
// instance through the instantiation service he will inject the services wrong!
var descriptor = new descriptors_1.AsyncDescriptor('vs/workbench/parts/files/common/editors/fileEditorInput', 'FileEditorInput', /* DO NOT REMOVE */ void 0, /* DO NOT REMOVE */ void 0);
platform_1.Registry.as(editor_1.Extensions.Editors).registerDefaultFileInput(descriptor);
// Register Editor Input Factory
var FileEditorInputFactory = (function () {
    function FileEditorInputFactory() {
    }
    FileEditorInputFactory.prototype.serialize = function (editorInput) {
        var fileEditorInput = editorInput;
        var fileInput = {
            resource: fileEditorInput.getResource().toString()
        };
        return JSON.stringify(fileInput);
    };
    FileEditorInputFactory.prototype.deserialize = function (instantiationService, serializedEditorInput) {
        var fileInput = JSON.parse(serializedEditorInput);
        return instantiationService.createInstance(fileEditorInput_1.FileEditorInput, uri_1.default.parse(fileInput.resource), void 0);
    };
    return FileEditorInputFactory;
}());
platform_1.Registry.as(editor_1.Extensions.Editors).registerEditorInputFactory(files_2.FILE_EDITOR_INPUT_ID, FileEditorInputFactory);
// Register File Editor Tracker
platform_1.Registry.as(contributions_1.Extensions.Workbench).registerWorkbenchContribution(fileEditorTracker_1.FileEditorTracker);
// Register Save Error Handler
platform_1.Registry.as(contributions_1.Extensions.Workbench).registerWorkbenchContribution(saveErrorHandler_1.SaveErrorHandler);
// Configuration
var configurationRegistry = platform_1.Registry.as(configurationRegistry_1.Extensions.Configuration);
configurationRegistry.registerConfiguration({
    'id': 'files',
    'order': 9,
    'title': nls.localize('filesConfigurationTitle', "Files"),
    'type': 'object',
    'properties': {
        'files.exclude': {
            'type': 'object',
            'description': nls.localize('exclude', "Configure glob patterns for excluding files and folders."),
            'default': { '**/.git': true, '**/.svn': true, '**/.hg': true, '**/.DS_Store': true },
            'additionalProperties': {
                'anyOf': [
                    {
                        'type': 'boolean',
                        'description': nls.localize('files.exclude.boolean', "The glob pattern to match file paths against. Set to true or false to enable or disable the pattern."),
                    },
                    {
                        'type': 'object',
                        'properties': {
                            'when': {
                                'type': 'string',
                                'pattern': '\\w*\\$\\(basename\\)\\w*',
                                'default': '$(basename).ext',
                                'description': nls.localize('files.exclude.when', 'Additional check on the siblings of a matching file. Use $(basename) as variable for the matching file name.')
                            }
                        }
                    }
                ]
            }
        },
        'files.associations': {
            'type': 'object',
            'description': nls.localize('associations', "Configure file associations to languages (e.g. \"*.extension\": \"html\"). These have precedence over the default associations of the languages installed."),
        },
        'files.encoding': {
            'type': 'string',
            'enum': Object.keys(files_1.SUPPORTED_ENCODINGS),
            'default': 'utf8',
            'description': nls.localize('encoding', "The default character set encoding to use when reading and writing files."),
        },
        'files.eol': {
            'type': 'string',
            'enum': [
                '\n',
                '\r\n'
            ],
            'default': (platform.isLinux || platform.isMacintosh) ? '\n' : '\r\n',
            'description': nls.localize('eol', "The default end of line character."),
        },
        'files.trimTrailingWhitespace': {
            'type': 'boolean',
            'default': false,
            'description': nls.localize('trimTrailingWhitespace', "When enabled, will trim trailing whitespace when saving a file.")
        },
        'files.insertFinalNewline': {
            'type': 'boolean',
            'default': false,
            'description': nls.localize('insertFinalNewline', "When enabled, insert a final new line at the end of the file when saving it.")
        },
        'files.autoSave': {
            'type': 'string',
            'enum': [files_1.AutoSaveConfiguration.OFF, files_1.AutoSaveConfiguration.AFTER_DELAY, files_1.AutoSaveConfiguration.ON_FOCUS_CHANGE, , files_1.AutoSaveConfiguration.ON_WINDOW_CHANGE],
            'default': files_1.AutoSaveConfiguration.OFF,
            'description': nls.localize('autoSave', "Controls auto save of dirty files. Accepted values:  \"{0}\", \"{1}\", \"{2}\" (editor loses focus), \"{3}\" (window loses focus). If set to \"{4}\", you can configure the delay in \"files.autoSaveDelay\".", files_1.AutoSaveConfiguration.OFF, files_1.AutoSaveConfiguration.AFTER_DELAY, files_1.AutoSaveConfiguration.ON_FOCUS_CHANGE, files_1.AutoSaveConfiguration.ON_WINDOW_CHANGE, files_1.AutoSaveConfiguration.AFTER_DELAY)
        },
        'files.autoSaveDelay': {
            'type': 'number',
            'default': 1000,
            'description': nls.localize('autoSaveDelay', "Controls the delay in ms after which a dirty file is saved automatically. Only applies when \"files.autoSave\" is set to \"{0}\"", files_1.AutoSaveConfiguration.AFTER_DELAY)
        },
        'files.watcherExclude': {
            'type': 'object',
            'default': (platform.isLinux || platform.isMacintosh) ? { '**/.git/objects/**': true, '**/node_modules/**': true } : { '**/.git/objects/**': true },
            'description': nls.localize('watcherExclude', "Configure glob patterns of file paths to exclude from file watching. Changing this setting requires a restart. When you experience Code consuming lots of cpu time on startup, you can exclude large folders to reduce the initial load.")
        },
        'files.hotExit': {
            'type': 'boolean',
            'default': true,
            'description': nls.localize('hotExit', "Controls whether unsaved files are restored after relaunching. If this is enabled there will be no prompt to save when exiting the editor.")
        }
    }
});
configurationRegistry.registerConfiguration({
    id: 'editor',
    order: 5,
    title: nls.localize('editorConfigurationTitle', "Editor"),
    type: 'object',
    properties: {
        'editor.formatOnSave': {
            'type': 'boolean',
            'default': false,
            'description': nls.localize('formatOnSave', "Format a file on save. A formatter must be available, the file must not be auto-saved, and editor must not be shutting down.")
        }
    }
});
configurationRegistry.registerConfiguration({
    'id': 'explorer',
    'order': 10,
    'title': nls.localize('explorerConfigurationTitle', "File Explorer"),
    'type': 'object',
    'properties': {
        'explorer.openEditors.visible': {
            'type': 'number',
            'description': nls.localize({ key: 'openEditorsVisible', comment: ['Open is an adjective'] }, "Number of editors shown in the Open Editors pane. Set it to 0 to hide the pane."),
            'default': 9
        },
        'explorer.openEditors.dynamicHeight': {
            'type': 'boolean',
            'description': nls.localize({ key: 'dynamicHeight', comment: ['Open is an adjective'] }, "Controls if the height of the open editors section should adapt dynamically to the number of elements or not."),
            'default': true
        },
        'explorer.autoReveal': {
            'type': 'boolean',
            'description': nls.localize('autoReveal', "Controls if the explorer should automatically reveal files when opening them."),
            'default': true
        },
        'explorer.enableDragAndDrop': {
            'type': 'boolean',
            'description': nls.localize('enableDragAndDrop', "Controls if the explorer should allow to move files and folders via drag and drop."),
            'default': true
        }
    }
});
