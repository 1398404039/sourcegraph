import { IChange, IModel, IIdentifiedSingleEditOperation } from 'vs/editor/common/editorCommon';
import { Selection } from 'vs/editor/common/core/selection';
/**
 * Represents the selected portion of an IChange, and includes the start/end line numbers of the full change
 */
export declare class SelectedChange implements IChange {
    readonly originalStartLineNumber: number;
    readonly originalEndLineNumber: number;
    readonly modifiedStartLineNumber: number;
    readonly modifiedEndLineNumber: number;
    readonly fullModifiedStartLineNumber: number;
    readonly fullModifiedEndLineNumber: number;
    constructor(selected: IChange, full: IChange);
    /**
     * True when the change is entirely selected
     */
    readonly isCompletelySelected: boolean;
}
/**
 * Returns an intersection between a change and a selection.
 * Returns null if intersection does not exist.
 */
export declare function intersectChangeAndSelection(change: IChange, selection: Selection): {
    modifiedStartLineNumber: number;
    modifiedEndLineNumber: number;
    originalStartLineNumber: number;
    originalEndLineNumber: number;
};
/**
 * Returns all selected changes (there can be multiple selections due to multiple cursors).
 * If a change is partially selected, the selected part of the change will be returned.
 */
export declare function getSelectedChanges(changes: IChange[], selections: Selection[]): SelectedChange[];
/**
 * Applies a list of changes to the original model and returns the new IModel.
 * First sorts changes by line number.
 */
export declare function applyChangesToModel(original: IModel, modified: IModel, changes: IChange[]): string;
export declare function getChangeRevertEdits(original: IModel, modified: IModel, changes: SelectedChange[]): IIdentifiedSingleEditOperation[];
