/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
require("../browser/media/exceptionWidget.css");
var nls = require("vs/nls");
var dom = require("vs/base/browser/dom");
var zoneWidget_1 = require("vs/editor/contrib/zoneWidget/browser/zoneWidget");
var contextView_1 = require("vs/platform/contextview/browser/contextView");
var debug_1 = require("vs/workbench/parts/debug/common/debug");
var async_1 = require("vs/base/common/async");
var $ = dom.$;
var ExceptionWidget = (function (_super) {
    __extends(ExceptionWidget, _super);
    function ExceptionWidget(editor, lineNumber, contextViewService, debugService) {
        var _this = _super.call(this, editor, { showFrame: true, showArrow: true, frameWidth: 1 }) || this;
        _this.lineNumber = lineNumber;
        _this.contextViewService = contextViewService;
        _this.debugService = debugService;
        _this.create();
        var onDidLayoutChangeScheduler = new async_1.RunOnceScheduler(function () { return _this._doLayout(undefined, undefined); }, 50);
        _this._disposables.add(_this.editor.onDidLayoutChange(function () { return onDidLayoutChangeScheduler.schedule(); }));
        return _this;
    }
    ExceptionWidget.prototype._fillContainer = function (container) {
        this.setCssClass('exception-widget');
        // Set the font size and line height to the one from the editor configuration.
        var fontInfo = this.editor.getConfiguration().fontInfo;
        this.container.style.fontSize = fontInfo.fontSize + "px";
        this.container.style.lineHeight = fontInfo.lineHeight + "px";
        var title = $('.title');
        title.textContent = nls.localize('exceptionThrown', 'Exception occurred');
        dom.append(container, title);
        var thread = this.debugService.getViewModel().focusedThread;
        if (thread && thread.stoppedDetails) {
            var msg = $('.message');
            msg.textContent = thread.stoppedDetails.text;
            dom.append(container, msg);
        }
    };
    ExceptionWidget.prototype._doLayout = function (heightInPixel, widthInPixel) {
        // Reload the height with respect to the exception text content and relayout it to match the line count.
        this.container.style.height = 'initial';
        var computedLinesNumber = Math.ceil(this.container.offsetHeight / this.editor.getConfiguration().fontInfo.lineHeight);
        this._relayout(computedLinesNumber);
    };
    return ExceptionWidget;
}(zoneWidget_1.ZoneWidget));
ExceptionWidget = __decorate([
    __param(2, contextView_1.IContextViewService),
    __param(3, debug_1.IDebugService)
], ExceptionWidget);
exports.ExceptionWidget = ExceptionWidget;
