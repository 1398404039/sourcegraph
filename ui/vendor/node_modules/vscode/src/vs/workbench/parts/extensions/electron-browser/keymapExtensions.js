/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var arrays = require("vs/base/common/arrays");
var nls = require("vs/nls");
var event_1 = require("vs/base/common/event");
var errors_1 = require("vs/base/common/errors");
var winjs_base_1 = require("vs/base/common/winjs.base");
var lifecycle_1 = require("vs/base/common/lifecycle");
var telemetry_1 = require("vs/platform/telemetry/common/telemetry");
var extensionManagement_1 = require("vs/platform/extensionManagement/common/extensionManagement");
var message_1 = require("vs/platform/message/common/message");
var severity_1 = require("vs/base/common/severity");
var lifecycle_2 = require("vs/platform/lifecycle/common/lifecycle");
var instantiation_1 = require("vs/platform/instantiation/common/instantiation");
var KeymapExtensions = (function () {
    function KeymapExtensions(instantiationService, extensionEnablementService, choiceService, lifecycleService, telemetryService) {
        var _this = this;
        this.instantiationService = instantiationService;
        this.extensionEnablementService = extensionEnablementService;
        this.choiceService = choiceService;
        this.telemetryService = telemetryService;
        this.disposables = [];
        this.disposables.push(lifecycleService.onShutdown(function () { return _this.dispose(); }), instantiationService.invokeFunction(onKeymapExtensionChanged)((function (ids) {
            winjs_base_1.TPromise.join(ids.map(function (id) { return _this.checkForOtherKeymaps(id); }))
                .then(null, errors_1.onUnexpectedError);
        })));
    }
    KeymapExtensions.prototype.getId = function () {
        return 'vs.extensions.keymapExtensions';
    };
    KeymapExtensions.prototype.checkForOtherKeymaps = function (extensionId) {
        var _this = this;
        return this.instantiationService.invokeFunction(getInstalledKeymaps).then(function (extensions) {
            var extension = arrays.first(extensions, function (extension) { return extension.identifier === extensionId; });
            if (extension && extension.globallyEnabled) {
                var otherKeymaps = extensions.filter(function (extension) { return extension.identifier !== extensionId && extension.globallyEnabled; });
                if (otherKeymaps.length) {
                    return _this.promptForDisablingOtherKeymaps(extension, otherKeymaps);
                }
            }
            return undefined;
        });
    };
    KeymapExtensions.prototype.promptForDisablingOtherKeymaps = function (newKeymap, oldKeymaps) {
        var _this = this;
        var telemetryData = {
            newKeymap: newKeymap.identifier,
            oldKeymaps: oldKeymaps.map(function (k) { return k.identifier; })
        };
        this.telemetryService.publicLog('disableOtherKeymapsConfirmation', telemetryData);
        var message = nls.localize('disableOtherKeymapsConfirmation', "Disable other keymaps to avoid conflicts between keybindings?");
        var options = [
            nls.localize('yes', "Yes"),
            nls.localize('no', "No")
        ];
        return this.choiceService.choose(severity_1.default.Info, message, options, false)
            .then(function (value) {
            var confirmed = value === 0;
            telemetryData['confirmed'] = confirmed;
            _this.telemetryService.publicLog('disableOtherKeymaps', telemetryData);
            if (confirmed) {
                return winjs_base_1.TPromise.join(oldKeymaps.map(function (keymap) {
                    return _this.extensionEnablementService.setEnablement(keymap.identifier, false);
                }));
            }
            return undefined;
        }, function (error) { return winjs_base_1.TPromise.wrapError(errors_1.canceled()); });
    };
    KeymapExtensions.prototype.dispose = function () {
        this.disposables = lifecycle_1.dispose(this.disposables);
    };
    return KeymapExtensions;
}());
KeymapExtensions = __decorate([
    __param(0, instantiation_1.IInstantiationService),
    __param(1, extensionManagement_1.IExtensionEnablementService),
    __param(2, message_1.IChoiceService),
    __param(3, lifecycle_2.ILifecycleService),
    __param(4, telemetry_1.ITelemetryService)
], KeymapExtensions);
exports.KeymapExtensions = KeymapExtensions;
function onKeymapExtensionChanged(accessor) {
    var extensionService = accessor.get(extensionManagement_1.IExtensionManagementService);
    var extensionEnablementService = accessor.get(extensionManagement_1.IExtensionEnablementService);
    return event_1.debounceEvent(event_1.any(event_1.chain(event_1.any(extensionService.onDidInstallExtension, extensionService.onDidUninstallExtension))
        .map(function (e) { return stripVersion(e.id); })
        .event, extensionEnablementService.onEnablementChanged), function (list, id) {
        if (!list) {
            return [id];
        }
        else if (list.indexOf(id) === -1) {
            list.push(id);
        }
        return list;
    });
}
exports.onKeymapExtensionChanged = onKeymapExtensionChanged;
function getInstalledKeymaps(accessor) {
    var extensionService = accessor.get(extensionManagement_1.IExtensionManagementService);
    var extensionEnablementService = accessor.get(extensionManagement_1.IExtensionEnablementService);
    var tipsService = accessor.get(extensionManagement_1.IExtensionTipsService);
    return extensionService.getInstalled().then(function (extensions) {
        var globallyDisabled = extensionEnablementService.getGloballyDisabledExtensions();
        var installedExtensions = extensions.map(function (extension) {
            var identifier = stripVersion(extension.id);
            return {
                identifier: identifier,
                local: extension,
                globallyEnabled: globallyDisabled.indexOf(identifier) === -1
            };
        });
        return installedExtensions.filter(function (extension) { return isKeymapExtension(tipsService, extension); });
    });
}
exports.getInstalledKeymaps = getInstalledKeymaps;
function isKeymapExtension(tipsService, extension) {
    var cats = extension.local.manifest.categories;
    return cats && cats.indexOf('Keymaps') !== -1 || tipsService.getKeymapRecommendations().indexOf(extension.identifier) !== -1;
}
function stripVersion(id) {
    return id.replace(/-\d+\.\d+\.\d+$/, '');
}
