import { Builder } from 'vs/base/browser/builder';
import { IPartService } from 'vs/workbench/services/part/common/partService';
import { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';
export declare class DynamicOverlay {
    private partService;
    private _contextKeyService;
    private _overlayVisible;
    private _overlay;
    constructor(partService: IPartService, _contextKeyService: IContextKeyService);
    /**
     * Creates a customizable component to be rendered anywhere inside of the editor.
     * @param  {Builder} content A full builder object to be appended to the Overlay.
     * @param  {any} overlayStyles? Custom styling for the Overlay component otherwise default styles are used.
     * @param  {HTMLElement} parentContainer? The container to be wrapped around to provid a way for the element to manipulate it and add more child elements. Default value EDITOR_PART container.
     * @returns void
     */
    create(content: Builder, overlayStyles?: any, parentContainer?: HTMLElement): void;
    /**
     * Default overlay styles to be used.
     * @returns any
     */
    getDefaultOverlayStyles(): any;
    /**
     * Sets the overlyVisible state to true and updates the overlay display value
     * @param  {string} display? CSS display value to be used when the overlay is shown. Default is block.
     */
    show(display?: string): void;
    /**
     * Sets the overlayVisible state to false and updates the overlay's display value to 'none'.
     * @returns void
     */
    hide(): void;
    /**
     * Removes the current HTML element and all its children from its parent and unbinds
     * all listeners and properties set to the data slots.
     * @returns void
     */
    destroy(): void;
}
