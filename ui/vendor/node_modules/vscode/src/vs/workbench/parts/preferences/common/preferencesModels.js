/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var nls = require("vs/nls");
var strings = require("vs/base/common/strings");
var objects_1 = require("vs/base/common/objects");
var map_1 = require("vs/base/common/map");
var platform_1 = require("vs/platform/platform");
var json_1 = require("vs/base/common/json");
var editor_1 = require("vs/workbench/common/editor");
var configurationRegistry_1 = require("vs/platform/configuration/common/configurationRegistry");
var keybinding_1 = require("vs/platform/keybinding/common/keybinding");
var filters_1 = require("vs/base/common/filters");
var AbstractSettingsModel = (function (_super) {
    __extends(AbstractSettingsModel, _super);
    function AbstractSettingsModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(AbstractSettingsModel.prototype, "groupsTerms", {
        get: function () {
            return this.settingsGroups.map(function (group) { return '@' + group.id; });
        },
        enumerable: true,
        configurable: true
    });
    AbstractSettingsModel.prototype.doFilterSettings = function (filter, allGroups) {
        if (!filter) {
            return {
                filteredGroups: allGroups,
                allGroups: allGroups,
                matches: new map_1.LinkedMap()
            };
        }
        var group = this.filterByGroupTerm(filter);
        if (group) {
            return {
                filteredGroups: [group],
                allGroups: allGroups,
                matches: new map_1.LinkedMap()
            };
        }
        var matches = new map_1.LinkedMap();
        var filteredGroups = [];
        var regex = strings.createRegExp(filter, false, { global: true });
        for (var _i = 0, allGroups_1 = allGroups; _i < allGroups_1.length; _i++) {
            var group_1 = allGroups_1[_i];
            var groupMatched = regex.test(group_1.title);
            var sections = [];
            for (var _a = 0, _b = group_1.sections; _a < _b.length; _a++) {
                var section = _b[_a];
                var settings = [];
                for (var _c = 0, _d = section.settings; _c < _d.length; _c++) {
                    var setting = _d[_c];
                    var settingMatches = this._findMatchesInSetting(filter, setting);
                    if (groupMatched || settingMatches.length > 0) {
                        settings.push(setting);
                    }
                    matches.set(group_1.title + setting.key, settingMatches);
                }
                if (settings.length) {
                    sections.push({
                        title: section.title,
                        settings: settings,
                        titleRange: section.titleRange
                    });
                }
            }
            if (sections.length) {
                filteredGroups.push({
                    id: group_1.id,
                    title: group_1.title,
                    titleRange: group_1.titleRange,
                    sections: sections,
                    range: group_1.range
                });
            }
        }
        return { filteredGroups: filteredGroups, matches: matches, allGroups: allGroups };
    };
    AbstractSettingsModel.prototype.filterByGroupTerm = function (filter) {
        if (this.groupsTerms.indexOf(filter) !== -1) {
            var id_1 = filter.substring(1);
            return this.settingsGroups.filter(function (group) { return group.id === id_1; })[0];
        }
        return null;
    };
    AbstractSettingsModel.prototype.getPreference = function (key) {
        for (var _i = 0, _a = this.settingsGroups; _i < _a.length; _i++) {
            var group = _a[_i];
            for (var _b = 0, _c = group.sections; _b < _c.length; _b++) {
                var section = _c[_b];
                for (var _d = 0, _e = section.settings; _d < _e.length; _d++) {
                    var setting = _e[_d];
                    if (key === setting.key) {
                        return setting;
                    }
                }
            }
        }
        return null;
    };
    AbstractSettingsModel.prototype._findMatchesInSetting = function (searchString, setting) {
        var _this = this;
        var registry = platform_1.Registry.as(configurationRegistry_1.Extensions.Configuration).getConfigurationProperties();
        var schema = registry[setting.key];
        var words = searchString.split(' ');
        var descriptionMatchingWords = new map_1.LinkedMap();
        var keyMatchingWords = new map_1.LinkedMap();
        var valueMatchingWords = new map_1.LinkedMap();
        var settingKeyAsWords = setting.key.split('.').join(' ');
        var _loop_1 = function (word) {
            var _loop_2 = function (lineIndex) {
                var descriptionMatches = filters_1.matchesWords(word, setting.description[lineIndex], true);
                if (descriptionMatches) {
                    descriptionMatchingWords.set(word, descriptionMatches.map(function (match) { return _this.toDescriptionRange(setting, match, lineIndex); }));
                }
            };
            for (var lineIndex = 0; lineIndex < setting.description.length; lineIndex++) {
                _loop_2(lineIndex);
            }
            var keyMatches_1 = filters_1.or(filters_1.matchesWords, filters_1.matchesCamelCase)(word, settingKeyAsWords);
            if (keyMatches_1) {
                keyMatchingWords.set(word, keyMatches_1.map(function (match) { return _this.toKeyRange(setting, match); }));
            }
            var valueMatches = typeof setting.value === 'string' ? filters_1.matchesContiguousSubString(word, setting.value) : null;
            if (valueMatches) {
                valueMatchingWords.set(word, valueMatches.map(function (match) { return _this.toValueRange(setting, match); }));
            }
            else if (schema.enum && schema.enum.some(function (enumValue) { return typeof enumValue === 'string' && !!filters_1.matchesContiguousSubString(word, enumValue); })) {
                valueMatchingWords.set(word, []);
            }
        };
        for (var _i = 0, words_1 = words; _i < words_1.length; _i++) {
            var word = words_1[_i];
            _loop_1(word);
        }
        var descriptionRanges = [];
        var _loop_3 = function (lineIndex) {
            var matches = filters_1.or(filters_1.matchesContiguousSubString)(searchString, setting.description[lineIndex] || '') || [];
            descriptionRanges.push.apply(descriptionRanges, matches.map(function (match) { return _this.toDescriptionRange(setting, match, lineIndex); }));
        };
        for (var lineIndex = 0; lineIndex < setting.description.length; lineIndex++) {
            _loop_3(lineIndex);
        }
        if (descriptionRanges.length === 0) {
            descriptionRanges.push.apply(descriptionRanges, this.getRangesForWords(words, descriptionMatchingWords, [keyMatchingWords, valueMatchingWords]));
        }
        var keyMatches = filters_1.or(filters_1.matchesPrefix, filters_1.matchesContiguousSubString)(searchString, setting.key);
        var keyRanges = keyMatches ? keyMatches.map(function (match) { return _this.toKeyRange(setting, match); }) : this.getRangesForWords(words, keyMatchingWords, [descriptionMatchingWords, valueMatchingWords]);
        var valueRanges = [];
        if (setting.value && typeof setting.value === 'string') {
            var valueMatches = filters_1.or(filters_1.matchesPrefix, filters_1.matchesContiguousSubString)(searchString, setting.value);
            valueRanges = valueMatches ? valueMatches.map(function (match) { return _this.toValueRange(setting, match); }) : this.getRangesForWords(words, valueMatchingWords, [keyMatchingWords, descriptionMatchingWords]);
        }
        return descriptionRanges.concat(keyRanges, valueRanges);
    };
    AbstractSettingsModel.prototype.getRangesForWords = function (words, from, others) {
        var result = [];
        var _loop_4 = function (word) {
            var ranges = from.get(word);
            if (ranges) {
                result.push.apply(result, ranges);
            }
            else if (others.every(function (o) { return !o.has(word); })) {
                return { value: [] };
            }
        };
        for (var _i = 0, words_2 = words; _i < words_2.length; _i++) {
            var word = words_2[_i];
            var state_1 = _loop_4(word);
            if (typeof state_1 === "object")
                return state_1.value;
        }
        return result;
    };
    AbstractSettingsModel.prototype.toKeyRange = function (setting, match) {
        return {
            startLineNumber: setting.keyRange.startLineNumber,
            startColumn: setting.keyRange.startColumn + match.start,
            endLineNumber: setting.keyRange.startLineNumber,
            endColumn: setting.keyRange.startColumn + match.end
        };
    };
    AbstractSettingsModel.prototype.toDescriptionRange = function (setting, match, lineIndex) {
        return {
            startLineNumber: setting.descriptionRanges[lineIndex].startLineNumber + lineIndex,
            startColumn: setting.descriptionRanges[lineIndex].startColumn + match.start,
            endLineNumber: setting.descriptionRanges[lineIndex].startLineNumber + lineIndex,
            endColumn: setting.descriptionRanges[lineIndex].startColumn + match.end
        };
    };
    AbstractSettingsModel.prototype.toValueRange = function (setting, match) {
        return {
            startLineNumber: setting.valueRange.startLineNumber,
            startColumn: setting.valueRange.startColumn + match.start + 1,
            endLineNumber: setting.valueRange.startLineNumber,
            endColumn: setting.valueRange.startColumn + match.end + 1
        };
    };
    return AbstractSettingsModel;
}(editor_1.EditorModel));
exports.AbstractSettingsModel = AbstractSettingsModel;
var SettingsEditorModel = (function (_super) {
    __extends(SettingsEditorModel, _super);
    function SettingsEditorModel(reference, _configurationTarget) {
        var _this = _super.call(this) || this;
        _this._configurationTarget = _configurationTarget;
        _this.model = reference.object.textEditorModel;
        _this._register(_this.onDispose(function () { return reference.dispose(); }));
        _this._register(_this.model.onDidChangeContent(function () {
            _this._settingsGroups = null;
        }));
        return _this;
    }
    Object.defineProperty(SettingsEditorModel.prototype, "uri", {
        get: function () {
            return this.model.uri;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SettingsEditorModel.prototype, "configurationTarget", {
        get: function () {
            return this._configurationTarget;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SettingsEditorModel.prototype, "settingsGroups", {
        get: function () {
            if (!this._settingsGroups) {
                this.parse();
            }
            return this._settingsGroups;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SettingsEditorModel.prototype, "content", {
        get: function () {
            return this.model.getValue();
        },
        enumerable: true,
        configurable: true
    });
    SettingsEditorModel.prototype.filterSettings = function (filter) {
        return this.doFilterSettings(filter, this.settingsGroups);
    };
    SettingsEditorModel.prototype.parse = function () {
        var model = this.model;
        var settings = [];
        var overrideSetting = null;
        var currentProperty = null;
        var currentParent = [];
        var previousParents = [];
        var range = {
            startLineNumber: 0,
            startColumn: 0,
            endLineNumber: 0,
            endColumn: 0
        };
        function onValue(value, offset, length) {
            if (Array.isArray(currentParent)) {
                currentParent.push(value);
            }
            else if (currentProperty) {
                currentParent[currentProperty] = value;
            }
            if (previousParents.length === 1 || (previousParents.length === 2 && overrideSetting !== null)) {
                // settings value started
                var setting = previousParents.length === 1 ? settings[settings.length - 1] : overrideSetting.overrides[overrideSetting.overrides.length - 1];
                if (setting) {
                    var valueStartPosition = model.getPositionAt(offset);
                    var valueEndPosition = model.getPositionAt(offset + length);
                    setting.value = value;
                    setting.valueRange = {
                        startLineNumber: valueStartPosition.lineNumber,
                        startColumn: valueStartPosition.column,
                        endLineNumber: valueEndPosition.lineNumber,
                        endColumn: valueEndPosition.column
                    };
                    setting.range = objects_1.assign(setting.range, {
                        endLineNumber: valueEndPosition.lineNumber,
                        endColumn: valueEndPosition.column
                    });
                }
            }
        }
        var visitor = {
            onObjectBegin: function (offset, length) {
                if (previousParents.length === 0) {
                    // Settings started
                    var position = model.getPositionAt(offset);
                    range.startLineNumber = position.lineNumber;
                    range.startColumn = position.column;
                }
                var object = {};
                onValue(object, offset, length);
                currentParent = object;
                currentProperty = null;
                previousParents.push(currentParent);
            },
            onObjectProperty: function (name, offset, length) {
                currentProperty = name;
                if (previousParents.length === 1 || (previousParents.length === 2 && overrideSetting !== null)) {
                    // setting started
                    var settingStartPosition = model.getPositionAt(offset);
                    var setting = {
                        description: [],
                        key: name,
                        keyRange: {
                            startLineNumber: settingStartPosition.lineNumber,
                            startColumn: settingStartPosition.column,
                            endLineNumber: settingStartPosition.lineNumber,
                            endColumn: settingStartPosition.column + length
                        },
                        range: {
                            startLineNumber: settingStartPosition.lineNumber,
                            startColumn: settingStartPosition.column,
                            endLineNumber: 0,
                            endColumn: 0
                        },
                        value: null,
                        valueRange: null,
                        descriptionRanges: null,
                        overrides: [],
                        overrideOf: overrideSetting
                    };
                    if (previousParents.length === 1) {
                        settings.push(setting);
                        if (configurationRegistry_1.OVERRIDE_PROPERTY_PATTERN.test(name)) {
                            overrideSetting = setting;
                        }
                    }
                    else {
                        overrideSetting.overrides.push(setting);
                    }
                }
            },
            onObjectEnd: function (offset, length) {
                currentParent = previousParents.pop();
                if (previousParents.length === 1 || (previousParents.length === 2 && overrideSetting !== null)) {
                    // setting ended
                    var setting = previousParents.length === 1 ? settings[settings.length - 1] : overrideSetting.overrides[overrideSetting.overrides.length - 1];
                    if (setting) {
                        var valueEndPosition = model.getPositionAt(offset + length);
                        setting.valueRange = objects_1.assign(setting.valueRange, {
                            endLineNumber: valueEndPosition.lineNumber,
                            endColumn: valueEndPosition.column
                        });
                        setting.range = objects_1.assign(setting.range, {
                            endLineNumber: valueEndPosition.lineNumber,
                            endColumn: valueEndPosition.column
                        });
                    }
                    if (previousParents.length === 1) {
                        overrideSetting = null;
                    }
                }
                if (previousParents.length === 0) {
                    // settings ended
                    var position = model.getPositionAt(offset);
                    range.endLineNumber = position.lineNumber;
                    range.endColumn = position.column;
                }
            },
            onArrayBegin: function (offset, length) {
                var array = [];
                onValue(array, offset, length);
                previousParents.push(currentParent);
                currentParent = array;
                currentProperty = null;
            },
            onArrayEnd: function (offset, length) {
                currentParent = previousParents.pop();
                if (previousParents.length === 1 || (previousParents.length === 2 && overrideSetting !== null)) {
                    // setting value ended
                    var setting = previousParents.length === 1 ? settings[settings.length - 1] : overrideSetting.overrides[overrideSetting.overrides.length - 1];
                    if (setting) {
                        var valueEndPosition = model.getPositionAt(offset + length);
                        setting.valueRange = objects_1.assign(setting.valueRange, {
                            endLineNumber: valueEndPosition.lineNumber,
                            endColumn: valueEndPosition.column
                        });
                        setting.range = objects_1.assign(setting.range, {
                            endLineNumber: valueEndPosition.lineNumber,
                            endColumn: valueEndPosition.column
                        });
                    }
                }
            },
            onLiteralValue: onValue,
            onError: function (error) {
                var setting = settings[settings.length - 1];
                if (setting && (!setting.range || !setting.keyRange || !setting.valueRange)) {
                    settings.pop();
                }
            }
        };
        if (!model.isDisposed()) {
            json_1.visit(model.getValue(), visitor);
        }
        this._settingsGroups = settings.length > 0 ? [{
                sections: [
                    {
                        settings: settings
                    }
                ],
                title: null,
                titleRange: null,
                range: range
            }] : [];
    };
    return SettingsEditorModel;
}(AbstractSettingsModel));
exports.SettingsEditorModel = SettingsEditorModel;
var DefaultSettingsEditorModel = (function (_super) {
    __extends(DefaultSettingsEditorModel, _super);
    function DefaultSettingsEditorModel(_uri, _mostCommonlyUsedSettingsKeys) {
        var _this = _super.call(this) || this;
        _this._uri = _uri;
        _this._mostCommonlyUsedSettingsKeys = _mostCommonlyUsedSettingsKeys;
        _this.indent = '  ';
        return _this;
    }
    Object.defineProperty(DefaultSettingsEditorModel.prototype, "uri", {
        get: function () {
            return this._uri;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DefaultSettingsEditorModel.prototype, "content", {
        get: function () {
            if (!this._content) {
                this.parse();
            }
            return this._content;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DefaultSettingsEditorModel.prototype, "settingsGroups", {
        get: function () {
            if (!this._allSettingsGroups) {
                this.parse();
            }
            return this._allSettingsGroups;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DefaultSettingsEditorModel.prototype, "mostCommonlyUsedSettings", {
        get: function () {
            return this.settingsGroups[0];
        },
        enumerable: true,
        configurable: true
    });
    DefaultSettingsEditorModel.prototype.filterSettings = function (filter) {
        return this.doFilterSettings(filter, this.settingsGroups);
    };
    DefaultSettingsEditorModel.prototype.getPreference = function (key) {
        for (var _i = 0, _a = this.settingsGroups; _i < _a.length; _i++) {
            var group = _a[_i];
            for (var _b = 0, _c = group.sections; _b < _c.length; _b++) {
                var section = _c[_b];
                for (var _d = 0, _e = section.settings; _d < _e.length; _d++) {
                    var setting = _e[_d];
                    if (setting.key === key) {
                        return setting;
                    }
                }
            }
        }
        return null;
    };
    DefaultSettingsEditorModel.prototype.parse = function () {
        var _this = this;
        var configurations = platform_1.Registry.as(configurationRegistry_1.Extensions.Configuration).getConfigurations().slice();
        var settingsGroups = configurations.sort(this.compareConfigurationNodes).reduce(function (result, config, index, array) { return _this.parseConfig(config, result, array); }, []);
        var mostCommonlyUsed = this.getMostCommonlyUsedSettings(settingsGroups);
        this._allSettingsGroups = [mostCommonlyUsed].concat(settingsGroups);
        this._content = this.toContent(mostCommonlyUsed, settingsGroups);
    };
    DefaultSettingsEditorModel.prototype.getMostCommonlyUsedSettings = function (allSettingsGroups) {
        var map = new map_1.LinkedMap();
        for (var _i = 0, allSettingsGroups_1 = allSettingsGroups; _i < allSettingsGroups_1.length; _i++) {
            var group = allSettingsGroups_1[_i];
            for (var _a = 0, _b = group.sections; _a < _b.length; _a++) {
                var section = _b[_a];
                for (var _c = 0, _d = section.settings; _c < _d.length; _c++) {
                    var setting = _d[_c];
                    map.set(setting.key, setting);
                }
            }
        }
        var settings = this._mostCommonlyUsedSettingsKeys.map(function (key) {
            var setting = map.get(key);
            if (setting) {
                return {
                    description: setting.description,
                    key: setting.key,
                    value: setting.value,
                    range: null,
                    valueRange: null,
                    overrides: []
                };
            }
            return null;
        }).filter(function (setting) { return !!setting; });
        return {
            id: 'mostCommonlyUsed',
            range: null,
            title: nls.localize('commonlyUsed', "Commonly Used"),
            titleRange: null,
            sections: [
                {
                    settings: settings
                }
            ]
        };
    };
    DefaultSettingsEditorModel.prototype.parseConfig = function (config, result, configurations, settingsGroup) {
        var _this = this;
        var title = config.title;
        if (!title) {
            var configWithTitleAndSameId = configurations.filter(function (c) { return c.id === config.id && c.title; })[0];
            if (configWithTitleAndSameId) {
                title = configWithTitleAndSameId.title;
            }
        }
        if (title) {
            if (!settingsGroup) {
                settingsGroup = result.filter(function (g) { return g.title === title; })[0];
                if (!settingsGroup) {
                    settingsGroup = { sections: [{ settings: [] }], id: config.id, title: title, titleRange: null, range: null };
                    result.push(settingsGroup);
                }
            }
            else {
                settingsGroup.sections[settingsGroup.sections.length - 1].title = title;
            }
        }
        if (config.properties) {
            if (!settingsGroup) {
                settingsGroup = { sections: [{ settings: [] }], id: config.id, title: config.id, titleRange: null, range: null };
                result.push(settingsGroup);
            }
            var configurationSettings = Object.keys(config.properties).map(function (key) {
                var prop = config.properties[key];
                var value = prop.default;
                var description = (prop.description || '').split('\n');
                return { key: key, value: value, description: description, range: null, keyRange: null, valueRange: null, descriptionRanges: [], overrides: [] };
            });
            (_a = settingsGroup.sections[settingsGroup.sections.length - 1].settings).push.apply(_a, configurationSettings);
        }
        if (config.allOf) {
            config.allOf.forEach(function (c) { return _this.parseConfig(c, result, configurations, settingsGroup); });
        }
        return result;
        var _a;
    };
    DefaultSettingsEditorModel.prototype.compareConfigurationNodes = function (c1, c2) {
        if (typeof c1.order !== 'number') {
            return 1;
        }
        if (typeof c2.order !== 'number') {
            return -1;
        }
        if (c1.order === c2.order) {
            var title1 = c1.title || '';
            var title2 = c2.title || '';
            return title1.localeCompare(title2);
        }
        return c1.order - c2.order;
    };
    DefaultSettingsEditorModel.prototype.toContent = function (mostCommonlyUsed, settingsGroups) {
        this._contentByLines = [];
        this._contentByLines.push('[');
        this.pushGroups([mostCommonlyUsed]);
        this._contentByLines.push(',');
        this.pushGroups(settingsGroups);
        this._contentByLines.push(']');
        return this._contentByLines.join('\n');
    };
    DefaultSettingsEditorModel.prototype.pushGroups = function (settingsGroups) {
        var lastSetting = null;
        this._contentByLines.push('{');
        this._contentByLines.push('');
        for (var _i = 0, settingsGroups_1 = settingsGroups; _i < settingsGroups_1.length; _i++) {
            var group = settingsGroups_1[_i];
            lastSetting = this.pushGroup(group);
        }
        if (lastSetting) {
            var content = this._contentByLines[lastSetting.range.endLineNumber - 2];
            this._contentByLines[lastSetting.range.endLineNumber - 2] = content.substring(0, content.length - 1);
        }
        this._contentByLines.push('}');
    };
    DefaultSettingsEditorModel.prototype.pushGroup = function (group) {
        var lastSetting = null;
        this._contentByLines.push('');
        var groupStart = this._contentByLines.length + 1;
        for (var _i = 0, _a = group.sections; _i < _a.length; _i++) {
            var section = _a[_i];
            if (section.title) {
                var sectionTitleStart = this._contentByLines.length + 1;
                this.addDescription([section.title], this.indent, this._contentByLines);
                section.titleRange = { startLineNumber: sectionTitleStart, startColumn: 1, endLineNumber: this._contentByLines.length, endColumn: this._contentByLines[this._contentByLines.length - 1].length };
            }
            for (var _b = 0, _c = section.settings; _b < _c.length; _b++) {
                var setting = _c[_b];
                var settingStart = this._contentByLines.length + 1;
                setting.descriptionRanges = [];
                var descriptionPreValue = this.indent + '// ';
                for (var _d = 0, _e = setting.description; _d < _e.length; _d++) {
                    var line = _e[_d];
                    this._contentByLines.push(descriptionPreValue + line);
                    setting.descriptionRanges.push({ startLineNumber: this._contentByLines.length, startColumn: this._contentByLines[this._contentByLines.length - 1].indexOf(line) + 1, endLineNumber: this._contentByLines.length, endColumn: this._contentByLines[this._contentByLines.length - 1].length });
                }
                var preValueConent = this.indent;
                var keyString = JSON.stringify(setting.key);
                preValueConent += keyString;
                setting.keyRange = { startLineNumber: this._contentByLines.length + 1, startColumn: preValueConent.indexOf(setting.key) + 1, endLineNumber: this._contentByLines.length + 1, endColumn: setting.key.length };
                preValueConent += ': ';
                var valueStart = this._contentByLines.length + 1;
                var valueString = JSON.stringify(setting.value, null, this.indent);
                if (valueString && (typeof setting.value === 'object')) {
                    var mulitLineValue = valueString.split('\n');
                    this._contentByLines.push(preValueConent + mulitLineValue[0]);
                    for (var i = 1; i < mulitLineValue.length; i++) {
                        this._contentByLines.push(this.indent + mulitLineValue[i]);
                    }
                }
                else {
                    this._contentByLines.push(preValueConent + valueString);
                }
                setting.valueRange = { startLineNumber: valueStart, startColumn: preValueConent.length + 1, endLineNumber: this._contentByLines.length, endColumn: this._contentByLines[this._contentByLines.length - 1].length + 1 };
                this._contentByLines[this._contentByLines.length - 1] += ',';
                lastSetting = setting;
                this._contentByLines.push('');
                setting.range = { startLineNumber: settingStart, startColumn: 1, endLineNumber: this._contentByLines.length, endColumn: this._contentByLines[this._contentByLines.length - 1].length };
            }
        }
        group.range = { startLineNumber: groupStart, startColumn: 1, endLineNumber: this._contentByLines.length, endColumn: this._contentByLines[this._contentByLines.length - 1].length };
        return lastSetting;
    };
    DefaultSettingsEditorModel.prototype.addDescription = function (description, indent, result) {
        for (var _i = 0, description_1 = description; _i < description_1.length; _i++) {
            var line = description_1[_i];
            result.push(indent + '// ' + line);
        }
    };
    DefaultSettingsEditorModel.prototype.dispose = function () {
        // Not disposable
    };
    return DefaultSettingsEditorModel;
}(AbstractSettingsModel));
exports.DefaultSettingsEditorModel = DefaultSettingsEditorModel;
var DefaultKeybindingsEditorModel = (function () {
    function DefaultKeybindingsEditorModel(_uri, keybindingService) {
        this._uri = _uri;
        this.keybindingService = keybindingService;
    }
    Object.defineProperty(DefaultKeybindingsEditorModel.prototype, "uri", {
        get: function () {
            return this._uri;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DefaultKeybindingsEditorModel.prototype, "content", {
        get: function () {
            if (!this._content) {
                var defaultsHeader = '// ' + nls.localize('defaultKeybindingsHeader', "Overwrite key bindings by placing them into your key bindings file.");
                this._content = defaultsHeader + '\n' + this.keybindingService.getDefaultKeybindings();
            }
            return this._content;
        },
        enumerable: true,
        configurable: true
    });
    DefaultKeybindingsEditorModel.prototype.getPreference = function () {
        return null;
    };
    DefaultKeybindingsEditorModel.prototype.dispose = function () {
        // Not disposable
    };
    return DefaultKeybindingsEditorModel;
}());
DefaultKeybindingsEditorModel = __decorate([
    __param(1, keybinding_1.IKeybindingService)
], DefaultKeybindingsEditorModel);
exports.DefaultKeybindingsEditorModel = DefaultKeybindingsEditorModel;
