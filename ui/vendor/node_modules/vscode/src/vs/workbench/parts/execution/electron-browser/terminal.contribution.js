/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var nls = require("vs/nls");
var winjs_base_1 = require("vs/base/common/winjs.base");
var platform_1 = require("vs/platform/platform");
var baseplatform = require("vs/base/common/platform");
var actions_1 = require("vs/base/common/actions");
var actionRegistry_1 = require("vs/workbench/common/actionRegistry");
var paths = require("vs/base/common/paths");
var actionBarRegistry_1 = require("vs/workbench/browser/actionBarRegistry");
var uri_1 = require("vs/base/common/uri");
var files_1 = require("vs/workbench/parts/files/common/files");
var workspace_1 = require("vs/platform/workspace/common/workspace");
var execution_1 = require("vs/workbench/parts/execution/common/execution");
var actions_2 = require("vs/platform/actions/common/actions");
var instantiation_1 = require("vs/platform/instantiation/common/instantiation");
var editorService_1 = require("vs/workbench/services/editor/common/editorService");
var editor_1 = require("vs/workbench/common/editor");
var configurationRegistry_1 = require("vs/platform/configuration/common/configurationRegistry");
var terminal_1 = require("vs/workbench/parts/terminal/common/terminal");
var terminal_2 = require("vs/workbench/parts/execution/electron-browser/terminal");
terminal_2.DEFAULT_TERMINAL_LINUX_READY.then(function (defaultTerminalLinux) {
    var configurationRegistry = platform_1.Registry.as(configurationRegistry_1.Extensions.Configuration);
    configurationRegistry.registerConfiguration({
        'id': 'externalTerminal',
        'order': 100,
        'title': nls.localize('terminalConfigurationTitle', "External Terminal"),
        'type': 'object',
        'properties': {
            'terminal.external.windowsExec': {
                'type': 'string',
                'description': nls.localize('terminal.external.windowsExec', "Customizes which terminal to run on Windows."),
                'default': terminal_2.DEFAULT_TERMINAL_WINDOWS,
                'isExecutable': true
            },
            'terminal.external.osxExec': {
                'type': 'string',
                'description': nls.localize('terminal.external.osxExec', "Customizes which terminal application to run on OS X."),
                'default': terminal_2.DEFAULT_TERMINAL_OSX,
                'isExecutable': true
            },
            'terminal.external.linuxExec': {
                'type': 'string',
                'description': nls.localize('terminal.external.linuxExec', "Customizes which terminal to run on Linux."),
                'default': defaultTerminalLinux,
                'isExecutable': true
            }
        }
    });
});
var OpenConsoleAction = (function (_super) {
    __extends(OpenConsoleAction, _super);
    function OpenConsoleAction(id, label, terminalService, editorService, contextService) {
        var _this = _super.call(this, id, label) || this;
        _this.terminalService = terminalService;
        _this.editorService = editorService;
        _this.contextService = contextService;
        _this.order = 49; // Allow other actions to position before or after
        return _this;
    }
    OpenConsoleAction.prototype.setResource = function (resource) {
        this.resource = resource;
        this.enabled = !paths.isUNC(this.resource.fsPath);
    };
    OpenConsoleAction.prototype.run = function (event) {
        var pathToOpen;
        // Try workspace path first
        var workspace = this.contextService.getWorkspace();
        pathToOpen = this.resource ? this.resource.fsPath : (workspace && workspace.resource.fsPath);
        // Otherwise check if we have an active file open
        if (!pathToOpen) {
            var file = editor_1.toResource(this.editorService.getActiveEditorInput(), { supportSideBySide: true, filter: 'file' });
            if (file) {
                pathToOpen = paths.dirname(file.fsPath); // take parent folder of file
            }
        }
        this.terminalService.openTerminal(pathToOpen);
        return winjs_base_1.TPromise.as(null);
    };
    return OpenConsoleAction;
}(actions_1.Action));
OpenConsoleAction.ID = 'workbench.action.terminal.openNativeConsole';
OpenConsoleAction.Label = baseplatform.isWindows ? nls.localize('globalConsoleActionWin', "Open New Command Prompt") :
    nls.localize('globalConsoleActionMacLinux', "Open New Terminal");
OpenConsoleAction.ScopedLabel = baseplatform.isWindows ? nls.localize('scopedConsoleActionWin', "Open in Command Prompt") :
    nls.localize('scopedConsoleActionMacLinux', "Open in Terminal");
OpenConsoleAction = __decorate([
    __param(2, execution_1.ITerminalService),
    __param(3, editorService_1.IWorkbenchEditorService),
    __param(4, workspace_1.IWorkspaceContextService)
], OpenConsoleAction);
exports.OpenConsoleAction = OpenConsoleAction;
var ExplorerViewerActionContributor = (function (_super) {
    __extends(ExplorerViewerActionContributor, _super);
    function ExplorerViewerActionContributor(instantiationService) {
        var _this = _super.call(this) || this;
        _this.instantiationService = instantiationService;
        return _this;
    }
    ExplorerViewerActionContributor.prototype.hasSecondaryActions = function (context) {
        return !!files_1.explorerItemToFileResource(context.element);
    };
    ExplorerViewerActionContributor.prototype.getSecondaryActions = function (context) {
        var fileResource = files_1.explorerItemToFileResource(context.element);
        var resource = fileResource.resource;
        // We want the parent unless this resource is a directory
        if (!fileResource.isDirectory) {
            resource = uri_1.default.file(paths.dirname(resource.fsPath));
        }
        var action = this.instantiationService.createInstance(OpenConsoleAction, OpenConsoleAction.ID, OpenConsoleAction.ScopedLabel);
        action.setResource(resource);
        return [action];
    };
    return ExplorerViewerActionContributor;
}(actionBarRegistry_1.ActionBarContributor));
ExplorerViewerActionContributor = __decorate([
    __param(0, instantiation_1.IInstantiationService)
], ExplorerViewerActionContributor);
var actionBarRegistry = platform_1.Registry.as(actionBarRegistry_1.Extensions.Actionbar);
actionBarRegistry.registerActionBarContributor(actionBarRegistry_1.Scope.VIEWER, ExplorerViewerActionContributor);
// Register Global Action to Open Console
platform_1.Registry.as(actionRegistry_1.Extensions.WorkbenchActions).registerWorkbenchAction(new actions_2.SyncActionDescriptor(OpenConsoleAction, OpenConsoleAction.ID, OpenConsoleAction.Label, { primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 33 /* KEY_C */ }, terminal_1.KEYBINDING_CONTEXT_TERMINAL_NOT_FOCUSED), 'Open New Command Prompt');
