/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
require("./walkThroughPart.css");
var scrollableElement_1 = require("vs/base/browser/ui/scrollbar/scrollableElement");
var scrollable_1 = require("vs/base/common/scrollable");
var strings = require("vs/base/common/strings");
var uri_1 = require("vs/base/common/uri");
var winjs_base_1 = require("vs/base/common/winjs.base");
var defaultConfig_1 = require("vs/editor/common/config/defaultConfig");
var builder_1 = require("vs/base/browser/builder");
var lifecycle_1 = require("vs/base/common/lifecycle");
var baseEditor_1 = require("vs/workbench/browser/parts/editor/baseEditor");
var telemetry_1 = require("vs/platform/telemetry/common/telemetry");
var walkThroughInput_1 = require("vs/workbench/parts/welcome/walkThrough/node/walkThroughInput");
var themeService_1 = require("vs/workbench/services/themes/common/themeService");
var opener_1 = require("vs/platform/opener/common/opener");
var marked_1 = require("vs/base/common/marked/marked");
var modeService_1 = require("vs/editor/common/services/modeService");
var files_1 = require("vs/platform/files/common/files");
var modelService_1 = require("vs/editor/common/services/modelService");
var codeEditor_1 = require("vs/editor/browser/codeEditor");
var instantiation_1 = require("vs/platform/instantiation/common/instantiation");
var keybinding_1 = require("vs/platform/keybinding/common/keybinding");
var nls_1 = require("vs/nls");
var storage_1 = require("vs/platform/storage/common/storage");
var memento_1 = require("vs/workbench/common/memento");
var contextkey_1 = require("vs/platform/contextkey/common/contextkey");
var configuration_1 = require("vs/platform/configuration/common/configuration");
var event_1 = require("vs/base/common/event");
var scmPreview_1 = require("vs/workbench/parts/scm/browser/scmPreview");
var types_1 = require("vs/base/common/types");
var commands_1 = require("vs/platform/commands/common/commands");
var codeEditorService_1 = require("vs/editor/common/services/codeEditorService");
exports.WALK_THROUGH_FOCUS = new contextkey_1.RawContextKey('interactivePlaygroundFocus', false);
var UNBOUND_COMMAND = nls_1.localize('walkThrough.unboundCommand', "unbound");
var WALK_THROUGH_EDITOR_VIEW_STATE_PREFERENCE_KEY = 'walkThroughEditorViewState';
var WalkThroughCodeEditor = (function (_super) {
    __extends(WalkThroughCodeEditor, _super);
    function WalkThroughCodeEditor(domElement, options, telemetryData, instantiationService, codeEditorService, commandService, contextKeyService) {
        var _this = _super.call(this, domElement, options, instantiationService, codeEditorService, commandService, contextKeyService) || this;
        _this.telemetryData = telemetryData;
        return _this;
    }
    WalkThroughCodeEditor.prototype.getTelemetryData = function () {
        return this.telemetryData;
    };
    return WalkThroughCodeEditor;
}(codeEditor_1.CodeEditor));
WalkThroughCodeEditor = __decorate([
    __param(3, instantiation_1.IInstantiationService),
    __param(4, codeEditorService_1.ICodeEditorService),
    __param(5, commands_1.ICommandService),
    __param(6, contextkey_1.IContextKeyService)
], WalkThroughCodeEditor);
var WalkThroughPart = (function (_super) {
    __extends(WalkThroughPart, _super);
    function WalkThroughPart(telemetryService, instantiationService, themeService, openerService, fileService, modelService, keybindingService, storageService, contextKeyService, configurationService, modeService) {
        var _this = _super.call(this, WalkThroughPart.ID, telemetryService) || this;
        _this.instantiationService = instantiationService;
        _this.themeService = themeService;
        _this.openerService = openerService;
        _this.fileService = fileService;
        _this.modelService = modelService;
        _this.keybindingService = keybindingService;
        _this.storageService = storageService;
        _this.contextKeyService = contextKeyService;
        _this.configurationService = configurationService;
        _this.modeService = modeService;
        _this.disposables = [];
        _this.contentDisposables = [];
        _this.editorFocus = exports.WALK_THROUGH_FOCUS.bindTo(_this.contextKeyService);
        return _this;
    }
    WalkThroughPart.prototype.createEditor = function (parent) {
        var _this = this;
        var container = parent.getHTMLElement();
        this.content = document.createElement('div');
        this.content.tabIndex = 0;
        this.content.style.outlineStyle = 'none';
        this.scrollbar = new scrollableElement_1.DomScrollableElement(this.content, {
            canUseTranslate3d: false,
            horizontal: scrollable_1.ScrollbarVisibility.Auto,
            vertical: scrollable_1.ScrollbarVisibility.Auto
        });
        this.disposables.push(this.scrollbar);
        container.appendChild(this.scrollbar.getDomNode());
        this.registerFocusHandlers();
        this.registerClickHandler();
        this.disposables.push(this.scrollbar.onScroll(function (e) { return _this.updatedScrollPosition(); }));
    };
    WalkThroughPart.prototype.updatedScrollPosition = function () {
        var scrollState = this.scrollbar.getScrollState();
        var scrollHeight = scrollState.scrollHeight;
        if (scrollHeight && this.input instanceof walkThroughInput_1.WalkThroughInput) {
            var scrollTop = scrollState.scrollTop;
            var height = scrollState.height;
            this.input.relativeScrollPosition(scrollTop / scrollHeight, (scrollTop + height) / scrollHeight);
        }
    };
    WalkThroughPart.prototype.addEventListener = function (element, type, listener, useCapture) {
        element.addEventListener(type, listener, useCapture);
        return { dispose: function () { element.removeEventListener(type, listener, useCapture); } };
    };
    WalkThroughPart.prototype.registerFocusHandlers = function () {
        var _this = this;
        this.disposables.push(this.addEventListener(this.content, 'mousedown', function (e) {
            _this.focus();
        }));
        this.disposables.push(this.addEventListener(this.content, 'focus', function (e) {
            _this.editorFocus.set(true);
        }));
        this.disposables.push(this.addEventListener(this.content, 'blur', function (e) {
            _this.editorFocus.reset();
        }));
        this.disposables.push(this.addEventListener(this.content, 'focusin', function (e) {
            // Work around scrolling as side-effect of setting focus on the offscreen zone widget (#18929)
            if (e.target instanceof HTMLElement && e.target.classList.contains('zone-widget-container')) {
                var scrollState = _this.scrollbar.getScrollState();
                _this.content.scrollTop = scrollState.scrollTop;
                _this.content.scrollLeft = scrollState.scrollLeft;
            }
        }));
    };
    WalkThroughPart.prototype.registerClickHandler = function () {
        var _this = this;
        this.content.addEventListener('click', function (event) {
            for (var node = event.target; node; node = node.parentNode) {
                if (node instanceof HTMLAnchorElement && node.href) {
                    var baseElement = window.document.getElementsByTagName('base')[0] || window.location;
                    if (baseElement && node.href.indexOf(baseElement.href) >= 0 && node.hash) {
                        var scrollTarget = _this.content.querySelector(node.hash);
                        _this.telemetryService.publicLog('revealInDocument', {
                            hash: node.hash,
                            broken: !scrollTarget,
                            from: _this.input instanceof walkThroughInput_1.WalkThroughInput ? _this.input.getTelemetryFrom() : undefined
                        });
                        var innerContent = _this.content.firstElementChild;
                        if (scrollTarget && innerContent) {
                            var targetTop = scrollTarget.getBoundingClientRect().top - 20;
                            var containerTop = innerContent.getBoundingClientRect().top;
                            _this.scrollbar.updateState({ scrollTop: targetTop - containerTop });
                        }
                    }
                    else {
                        _this.open(uri_1.default.parse(node.href));
                    }
                    event.preventDefault();
                    break;
                }
                else if (node instanceof HTMLButtonElement) {
                    var href = node.getAttribute('data-href');
                    if (href) {
                        _this.open(uri_1.default.parse(href));
                    }
                    break;
                }
                else if (node === event.currentTarget) {
                    break;
                }
            }
        });
    };
    WalkThroughPart.prototype.open = function (uri) {
        if (uri.scheme === 'http' || uri.scheme === 'https') {
            this.telemetryService.publicLog('openExternal', {
                uri: uri.toString(true),
                from: this.input instanceof walkThroughInput_1.WalkThroughInput ? this.input.getTelemetryFrom() : undefined
            });
        }
        this.openerService.open(this.addFrom(uri));
    };
    WalkThroughPart.prototype.addFrom = function (uri) {
        if (uri.scheme !== 'command' || !(this.input instanceof walkThroughInput_1.WalkThroughInput)) {
            return uri;
        }
        var query = uri.query ? JSON.parse(uri.query) : {};
        query.from = this.input.getTelemetryFrom();
        return uri.with({ query: JSON.stringify(query) });
    };
    WalkThroughPart.prototype.layout = function (size) {
        this.size = size;
        builder_1.$(this.content).style({ height: size.height + "px", width: size.width + "px" });
        this.updateSizeClasses();
        this.contentDisposables.forEach(function (disposable) {
            if (disposable instanceof codeEditor_1.CodeEditor) {
                disposable.layout();
            }
        });
        this.scrollbar.scanDomNode();
    };
    WalkThroughPart.prototype.updateSizeClasses = function () {
        var innerContent = this.content.firstElementChild;
        if (this.size && innerContent) {
            var classList = innerContent.classList;
            classList[this.size.height <= 685 ? 'add' : 'remove']('max-height-685px');
        }
    };
    WalkThroughPart.prototype.focus = function () {
        var active = document.activeElement;
        while (active && active !== this.content) {
            active = active.parentElement;
        }
        if (!active) {
            this.content.focus();
        }
        this.editorFocus.set(true);
    };
    WalkThroughPart.prototype.arrowUp = function () {
        var scrollState = this.scrollbar.getScrollState();
        this.scrollbar.updateState({ scrollTop: scrollState.scrollTop - this.getArrowScrollHeight() });
    };
    WalkThroughPart.prototype.arrowDown = function () {
        var scrollState = this.scrollbar.getScrollState();
        this.scrollbar.updateState({ scrollTop: scrollState.scrollTop + this.getArrowScrollHeight() });
    };
    WalkThroughPart.prototype.getArrowScrollHeight = function () {
        var fontSize = this.configurationService.lookup('editor.fontSize').value;
        if (typeof fontSize !== 'number' || fontSize < 1) {
            fontSize = 12;
        }
        return 3 * fontSize;
    };
    WalkThroughPart.prototype.pageUp = function () {
        var scrollState = this.scrollbar.getScrollState();
        this.scrollbar.updateState({ scrollTop: scrollState.scrollTop - scrollState.height });
    };
    WalkThroughPart.prototype.pageDown = function () {
        var scrollState = this.scrollbar.getScrollState();
        this.scrollbar.updateState({ scrollTop: scrollState.scrollTop + scrollState.height });
    };
    WalkThroughPart.prototype.setInput = function (input, options) {
        var _this = this;
        if (this.input instanceof walkThroughInput_1.WalkThroughInput && this.input.matches(input)) {
            return winjs_base_1.TPromise.as(undefined);
        }
        if (this.input instanceof walkThroughInput_1.WalkThroughInput) {
            this.saveTextEditorViewState(this.input.getResource());
        }
        this.contentDisposables = lifecycle_1.dispose(this.contentDisposables);
        this.content.innerHTML = '';
        return _super.prototype.setInput.call(this, input, options)
            .then(function () {
            return input.resolve(true);
        })
            .then(function (model) {
            var content = model.main.textEditorModel.getLinesContent().join('\n');
            if (!strings.endsWith(input.getResource().path, '.md')) {
                _this.content.innerHTML = content;
                _this.updateSizeClasses();
                _this.updateMarkerClasses();
                _this.decorateContent();
                if (input.onReady) {
                    input.onReady(_this.content.firstElementChild);
                }
                _this.scrollbar.scanDomNode();
                _this.loadTextEditorViewState(input.getResource());
                _this.updatedScrollPosition();
                return;
            }
            var i = 0;
            var renderer = new marked_1.marked.Renderer();
            renderer.code = function (code, lang) {
                var id = "snippet-" + model.snippets[i++].textEditorModel.uri.fragment;
                return "<div id=\"" + id + "\" class=\"walkThroughEditorContainer\" ></div>";
            };
            var innerContent = document.createElement('div');
            innerContent.classList.add('walkThroughContent'); // only for markdown files
            var markdown = _this.expandMacros(content);
            innerContent.innerHTML = marked_1.marked(markdown, { renderer: renderer });
            _this.style(innerContent);
            _this.contentDisposables.push(_this.themeService.onDidColorThemeChange(function () { return _this.style(innerContent); }));
            _this.content.appendChild(innerContent);
            model.snippets.forEach(function (snippet, i) {
                var model = snippet.textEditorModel;
                var id = "snippet-" + model.uri.fragment;
                var div = innerContent.querySelector("#" + id.replace(/\./g, '\\.'));
                var options = _this.getEditorOptions(snippet.textEditorModel.getModeId());
                var telemetryData = {
                    target: _this.input instanceof walkThroughInput_1.WalkThroughInput ? _this.input.getTelemetryFrom() : undefined,
                    snippet: i
                };
                var editor = _this.instantiationService.createInstance(WalkThroughCodeEditor, div, options, telemetryData);
                editor.setModel(model);
                _this.contentDisposables.push(editor);
                var updateHeight = function (initial) {
                    var lineHeight = editor.getConfiguration().lineHeight;
                    var height = Math.max(model.getLineCount() + 1, 4) * lineHeight + "px";
                    if (div.style.height !== height) {
                        div.style.height = height;
                        editor.layout();
                        if (!initial) {
                            _this.scrollbar.scanDomNode();
                        }
                    }
                };
                updateHeight(true);
                _this.contentDisposables.push(editor.onDidChangeModelContent(function () { return updateHeight(false); }));
                _this.contentDisposables.push(editor.onDidChangeCursorPosition(function (e) {
                    var innerContent = _this.content.firstElementChild;
                    if (innerContent) {
                        var targetTop = div.getBoundingClientRect().top;
                        var containerTop = innerContent.getBoundingClientRect().top;
                        var lineHeight = editor.getConfiguration().lineHeight;
                        var lineTop = (targetTop + (e.position.lineNumber - 1) * lineHeight) - containerTop;
                        var lineBottom = lineTop + lineHeight;
                        var scrollState = _this.scrollbar.getScrollState();
                        var scrollTop = scrollState.scrollTop;
                        var height = scrollState.height;
                        if (scrollTop > lineTop) {
                            _this.scrollbar.updateState({ scrollTop: lineTop });
                        }
                        else if (scrollTop < lineBottom - height) {
                            _this.scrollbar.updateState({ scrollTop: lineBottom - height });
                        }
                    }
                }));
                _this.contentDisposables.push(_this.themeService.onDidColorThemeChange(function (theme) { return editor.updateOptions({ theme: theme.id }); }));
                _this.contentDisposables.push(_this.configurationService.onDidUpdateConfiguration(function () { return editor.updateOptions(_this.getEditorOptions(snippet.textEditorModel.getModeId())); }));
                _this.contentDisposables.push(event_1.once(editor.onMouseDown)(function () {
                    _this.telemetryService.publicLog('walkThroughSnippetInteraction', {
                        from: _this.input instanceof walkThroughInput_1.WalkThroughInput ? _this.input.getTelemetryFrom() : undefined,
                        type: 'mouseDown',
                        snippet: i
                    });
                }));
                _this.contentDisposables.push(event_1.once(editor.onKeyDown)(function () {
                    _this.telemetryService.publicLog('walkThroughSnippetInteraction', {
                        from: _this.input instanceof walkThroughInput_1.WalkThroughInput ? _this.input.getTelemetryFrom() : undefined,
                        type: 'keyDown',
                        snippet: i
                    });
                }));
                _this.contentDisposables.push(event_1.once(editor.onDidChangeModelContent)(function () {
                    _this.telemetryService.publicLog('walkThroughSnippetInteraction', {
                        from: _this.input instanceof walkThroughInput_1.WalkThroughInput ? _this.input.getTelemetryFrom() : undefined,
                        type: 'changeModelContent',
                        snippet: i
                    });
                }));
            });
            _this.updateSizeClasses();
            _this.updateMarkerClasses();
            if (input.onReady) {
                input.onReady(innerContent);
            }
            _this.scrollbar.scanDomNode();
            _this.loadTextEditorViewState(input.getResource());
            _this.updatedScrollPosition();
        });
    };
    WalkThroughPart.prototype.getEditorOptions = function (language) {
        var config = this.configurationService.getConfiguration({ overrideIdentifier: language, section: 'editor' });
        return __assign({}, types_1.isObject(config) ? config : Object.create(null), { scrollBeyondLastLine: false, scrollbar: defaultConfig_1.DefaultConfig.editor.scrollbar, overviewRulerLanes: 3, fixedOverflowWidgets: true, lineNumbersMinChars: 1, theme: this.themeService.getColorTheme().id, minimap: false });
    };
    WalkThroughPart.prototype.updateMarkerClasses = function () {
        var innerContent = this.content.firstElementChild;
        if (scmPreview_1.default.enabled && innerContent) {
            innerContent.classList.add('scmEnabled');
        }
    };
    WalkThroughPart.prototype.style = function (div) {
        var styleElement = document.querySelector('.monaco-editor-background');
        var _a = window.getComputedStyle(styleElement), color = _a.color, backgroundColor = _a.backgroundColor, fontFamily = _a.fontFamily, fontWeight = _a.fontWeight, fontSize = _a.fontSize;
        div.style.color = color;
        div.style.backgroundColor = backgroundColor;
        div.style.fontFamily = fontFamily;
        div.style.fontWeight = fontWeight;
        div.style.fontSize = fontSize;
    };
    WalkThroughPart.prototype.expandMacros = function (input) {
        var _this = this;
        return input.replace(/kb\(([a-z.\d\-]+)\)/gi, function (match, kb) {
            var keybinding = _this.keybindingService.lookupKeybinding(kb);
            var shortcut = keybinding ? keybinding.getLabel() : UNBOUND_COMMAND;
            return "<span class=\"shortcut\">" + strings.escape(shortcut) + "</span>";
        });
    };
    WalkThroughPart.prototype.decorateContent = function () {
        var _this = this;
        var keys = this.content.querySelectorAll('.shortcut[data-command]');
        Array.prototype.forEach.call(keys, function (key) {
            var command = key.getAttribute('data-command');
            var keybinding = command && _this.keybindingService.lookupKeybinding(command);
            var label = keybinding ? keybinding.getLabel() : UNBOUND_COMMAND;
            key.appendChild(document.createTextNode(label));
        });
    };
    WalkThroughPart.prototype.saveTextEditorViewState = function (resource) {
        var memento = this.getMemento(this.storageService, memento_1.Scope.WORKSPACE);
        var editorViewStateMemento = memento[WALK_THROUGH_EDITOR_VIEW_STATE_PREFERENCE_KEY];
        if (!editorViewStateMemento) {
            editorViewStateMemento = Object.create(null);
            memento[WALK_THROUGH_EDITOR_VIEW_STATE_PREFERENCE_KEY] = editorViewStateMemento;
        }
        var scrollState = this.scrollbar.getScrollState();
        var editorViewState = {
            viewState: {
                scrollTop: scrollState.scrollTop,
                scrollLeft: scrollState.scrollLeft
            }
        };
        var fileViewState = editorViewStateMemento[resource.toString()];
        if (!fileViewState) {
            fileViewState = Object.create(null);
            editorViewStateMemento[resource.toString()] = fileViewState;
        }
        if (typeof this.position === 'number') {
            fileViewState[this.position] = editorViewState;
        }
    };
    WalkThroughPart.prototype.loadTextEditorViewState = function (resource) {
        var memento = this.getMemento(this.storageService, memento_1.Scope.WORKSPACE);
        var editorViewStateMemento = memento[WALK_THROUGH_EDITOR_VIEW_STATE_PREFERENCE_KEY];
        if (editorViewStateMemento) {
            var fileViewState = editorViewStateMemento[resource.toString()];
            if (fileViewState) {
                var state = fileViewState[this.position];
                if (state) {
                    this.scrollbar.updateState(state.viewState);
                }
            }
        }
    };
    WalkThroughPart.prototype.clearInput = function () {
        if (this.input instanceof walkThroughInput_1.WalkThroughInput) {
            this.saveTextEditorViewState(this.input.getResource());
        }
        _super.prototype.clearInput.call(this);
    };
    WalkThroughPart.prototype.shutdown = function () {
        if (this.input instanceof walkThroughInput_1.WalkThroughInput) {
            this.saveTextEditorViewState(this.input.getResource());
        }
        _super.prototype.shutdown.call(this);
    };
    WalkThroughPart.prototype.dispose = function () {
        this.editorFocus.reset();
        this.contentDisposables = lifecycle_1.dispose(this.contentDisposables);
        this.disposables = lifecycle_1.dispose(this.disposables);
        _super.prototype.dispose.call(this);
    };
    return WalkThroughPart;
}(baseEditor_1.BaseEditor));
WalkThroughPart.ID = 'workbench.editor.walkThroughPart';
WalkThroughPart = __decorate([
    __param(0, telemetry_1.ITelemetryService),
    __param(1, instantiation_1.IInstantiationService),
    __param(2, themeService_1.IWorkbenchThemeService),
    __param(3, opener_1.IOpenerService),
    __param(4, files_1.IFileService),
    __param(5, modelService_1.IModelService),
    __param(6, keybinding_1.IKeybindingService),
    __param(7, storage_1.IStorageService),
    __param(8, contextkey_1.IContextKeyService),
    __param(9, configuration_1.IConfigurationService),
    __param(10, modeService_1.IModeService)
], WalkThroughPart);
exports.WalkThroughPart = WalkThroughPart;
