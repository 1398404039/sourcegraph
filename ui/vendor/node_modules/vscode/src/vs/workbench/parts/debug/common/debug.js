/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
var instantiation_1 = require("vs/platform/instantiation/common/instantiation");
var contextkey_1 = require("vs/platform/contextkey/common/contextkey");
exports.VIEWLET_ID = 'workbench.view.debug';
exports.REPL_ID = 'workbench.panel.repl';
exports.DEBUG_SERVICE_ID = 'debugService';
exports.CONTEXT_DEBUG_TYPE = new contextkey_1.RawContextKey('debugType', undefined);
exports.CONTEXT_IN_DEBUG_MODE = new contextkey_1.RawContextKey('inDebugMode', false);
exports.CONTEXT_NOT_IN_DEBUG_MODE = exports.CONTEXT_IN_DEBUG_MODE.toNegated();
exports.CONTEXT_IN_DEBUG_REPL = new contextkey_1.RawContextKey('inDebugRepl', false);
exports.CONTEXT_NOT_IN_DEBUG_REPL = exports.CONTEXT_IN_DEBUG_REPL.toNegated();
exports.CONTEXT_ON_FIRST_DEBUG_REPL_LINE = new contextkey_1.RawContextKey('onFirsteDebugReplLine', false);
exports.CONTEXT_ON_LAST_DEBUG_REPL_LINE = new contextkey_1.RawContextKey('onLastDebugReplLine', false);
exports.CONTEXT_BREAKPOINT_WIDGET_VISIBLE = new contextkey_1.RawContextKey('breakpointWidgetVisible', false);
exports.CONTEXT_BREAKPOINTS_FOCUSED = new contextkey_1.RawContextKey('breakpointsFocused', false);
exports.CONTEXT_WATCH_EXPRESSIONS_FOCUSED = new contextkey_1.RawContextKey('watchExpressionsFocused', false);
exports.CONTEXT_VARIABLES_FOCUSED = new contextkey_1.RawContextKey('variablesFocused', false);
exports.EDITOR_CONTRIBUTION_ID = 'editor.contrib.debug';
exports.DEBUG_SCHEME = 'debug';
;
// Debug enums
var State;
(function (State) {
    State[State["Inactive"] = 0] = "Inactive";
    State[State["Initializing"] = 1] = "Initializing";
    State[State["Stopped"] = 2] = "Stopped";
    State[State["Running"] = 3] = "Running";
})(State = exports.State || (exports.State = {}));
// Debug service interfaces
exports.IDebugService = instantiation_1.createDecorator(exports.DEBUG_SERVICE_ID);
// utils
var _formatPIIRegexp = /{([^}]+)}/g;
function formatPII(value, excludePII, args) {
    return value.replace(_formatPIIRegexp, function (match, group) {
        if (excludePII && group.length > 0 && group[0] !== '_') {
            return match;
        }
        return args && args.hasOwnProperty(group) ?
            args[group] :
            match;
    });
}
exports.formatPII = formatPII;
