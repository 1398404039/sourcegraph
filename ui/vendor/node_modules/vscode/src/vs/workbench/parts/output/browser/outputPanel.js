/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var nls = require("vs/nls");
var lifecycle_1 = require("vs/base/common/lifecycle");
var telemetry_1 = require("vs/platform/telemetry/common/telemetry");
var storage_1 = require("vs/platform/storage/common/storage");
var configuration_1 = require("vs/platform/configuration/common/configuration");
var instantiation_1 = require("vs/platform/instantiation/common/instantiation");
var serviceCollection_1 = require("vs/platform/instantiation/common/serviceCollection");
var contextkey_1 = require("vs/platform/contextkey/common/contextkey");
var textResourceEditor_1 = require("vs/workbench/browser/parts/editor/textResourceEditor");
var output_1 = require("vs/workbench/parts/output/common/output");
var outputActions_1 = require("vs/workbench/parts/output/browser/outputActions");
var themeService_1 = require("vs/workbench/services/themes/common/themeService");
var untitledEditorService_1 = require("vs/workbench/services/untitled/common/untitledEditorService");
var groupService_1 = require("vs/workbench/services/group/common/groupService");
var modeService_1 = require("vs/editor/common/services/modeService");
var textfiles_1 = require("vs/workbench/services/textfile/common/textfiles");
var OutputPanel = (function (_super) {
    __extends(OutputPanel, _super);
    function OutputPanel(telemetryService, instantiationService, storageService, configurationService, themeService, outputService, untitledEditorService, contextKeyService, editorGroupService, modeService, textFileService) {
        var _this = _super.call(this, telemetryService, instantiationService, storageService, configurationService, themeService, untitledEditorService, editorGroupService, modeService, textFileService) || this;
        _this.outputService = outputService;
        _this.contextKeyService = contextKeyService;
        _this.scopedInstantiationService = instantiationService;
        _this.toDispose = [];
        return _this;
    }
    OutputPanel.prototype.getId = function () {
        return output_1.OUTPUT_PANEL_ID;
    };
    OutputPanel.prototype.getActions = function () {
        var _this = this;
        if (!this.actions) {
            this.actions = [
                this.instantiationService.createInstance(outputActions_1.SwitchOutputAction),
                this.instantiationService.createInstance(outputActions_1.ClearOutputAction, outputActions_1.ClearOutputAction.ID, outputActions_1.ClearOutputAction.LABEL),
                this.instantiationService.createInstance(outputActions_1.ToggleOutputScrollLockAction, outputActions_1.ToggleOutputScrollLockAction.ID, outputActions_1.ToggleOutputScrollLockAction.LABEL)
            ];
            this.actions.forEach(function (a) {
                _this.toDispose.push(a);
            });
        }
        return this.actions;
    };
    OutputPanel.prototype.getActionItem = function (action) {
        if (action.id === outputActions_1.SwitchOutputAction.ID) {
            return this.instantiationService.createInstance(outputActions_1.SwitchOutputActionItem, action);
        }
        return _super.prototype.getActionItem.call(this, action);
    };
    OutputPanel.prototype.getConfigurationOverrides = function () {
        var options = _super.prototype.getConfigurationOverrides.call(this);
        options.wordWrap = 'on'; // all output editors wrap
        options.lineNumbers = 'off'; // all output editors hide line numbers
        options.glyphMargin = false;
        options.lineDecorationsWidth = 20;
        options.rulers = [];
        options.folding = false;
        options.scrollBeyondLastLine = false;
        options.renderLineHighlight = 'none';
        return options;
    };
    OutputPanel.prototype.getAriaLabel = function () {
        var channel = this.outputService.getActiveChannel();
        return channel ? nls.localize('outputPanelWithInputAriaLabel', "{0}, Output panel", channel.label) : nls.localize('outputPanelAriaLabel', "Output panel");
    };
    OutputPanel.prototype.setInput = function (input, options) {
        var _this = this;
        return _super.prototype.setInput.call(this, input, options).then(function () { return _this.revealLastLine(); });
    };
    OutputPanel.prototype.createEditor = function (parent) {
        // First create the scoped instantation service and only then construct the editor using the scoped service
        var scopedContextKeyService = this.contextKeyService.createScoped(parent.getHTMLElement());
        this.toDispose.push(scopedContextKeyService);
        this.scopedInstantiationService = this.instantiationService.createChild(new serviceCollection_1.ServiceCollection([contextkey_1.IContextKeyService, scopedContextKeyService]));
        _super.prototype.createEditor.call(this, parent);
        output_1.CONTEXT_IN_OUTPUT.bindTo(scopedContextKeyService).set(true);
        this.setInput(output_1.OutputEditors.getInstance(this.instantiationService, this.outputService.getActiveChannel()), null);
    };
    Object.defineProperty(OutputPanel.prototype, "instantiationService", {
        get: function () {
            return this.scopedInstantiationService;
        },
        enumerable: true,
        configurable: true
    });
    OutputPanel.prototype.dispose = function () {
        this.toDispose = lifecycle_1.dispose(this.toDispose);
        _super.prototype.dispose.call(this);
    };
    return OutputPanel;
}(textResourceEditor_1.TextResourceEditor));
OutputPanel = __decorate([
    __param(0, telemetry_1.ITelemetryService),
    __param(1, instantiation_1.IInstantiationService),
    __param(2, storage_1.IStorageService),
    __param(3, configuration_1.IConfigurationService),
    __param(4, themeService_1.IWorkbenchThemeService),
    __param(5, output_1.IOutputService),
    __param(6, untitledEditorService_1.IUntitledEditorService),
    __param(7, contextkey_1.IContextKeyService),
    __param(8, groupService_1.IEditorGroupService),
    __param(9, modeService_1.IModeService),
    __param(10, textfiles_1.ITextFileService)
], OutputPanel);
exports.OutputPanel = OutputPanel;
