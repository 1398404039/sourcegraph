/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var nls = require("vs/nls");
var winjs_base_1 = require("vs/base/common/winjs.base");
var errors_1 = require("vs/base/common/errors");
var async_1 = require("vs/base/common/async");
var quickopen_1 = require("vs/workbench/browser/quickopen");
var quickOpenModel_1 = require("vs/base/parts/quickopen/browser/quickOpenModel");
var quickOpen_1 = require("vs/base/parts/quickopen/common/quickOpen");
var filters = require("vs/base/common/filters");
var range_1 = require("vs/editor/common/core/range");
var labels = require("vs/base/common/labels");
var editorService_1 = require("vs/workbench/services/editor/common/editorService");
var instantiation_1 = require("vs/platform/instantiation/common/instantiation");
var workspace_1 = require("vs/platform/workspace/common/workspace");
var configuration_1 = require("vs/platform/configuration/common/configuration");
var search_1 = require("vs/workbench/parts/search/common/search");
var SymbolEntry = (function (_super) {
    __extends(SymbolEntry, _super);
    function SymbolEntry(_bearing, _provider, _configurationService, _contextService, editorService) {
        var _this = _super.call(this, editorService) || this;
        _this._bearing = _bearing;
        _this._provider = _provider;
        _this._configurationService = _configurationService;
        _this._contextService = _contextService;
        return _this;
    }
    SymbolEntry.prototype.getLabel = function () {
        return this._bearing.name;
    };
    SymbolEntry.prototype.getAriaLabel = function () {
        return nls.localize('entryAriaLabel', "{0}, symbols picker", this.getLabel());
    };
    SymbolEntry.prototype.getDescription = function () {
        var result = this._bearing.containerName;
        if (!result && this._bearing.resource) {
            result = labels.getPathLabel(this._bearing.resource, this._contextService);
        }
        return result;
    };
    SymbolEntry.prototype.getIcon = function () {
        return this._bearing.type;
    };
    SymbolEntry.prototype.getResource = function () {
        return this._bearing.resource;
    };
    SymbolEntry.prototype.run = function (mode, context) {
        var _this = this;
        // resolve this type bearing if neccessary
        if (!this._bearingResolve
            && typeof this._provider.resolveWorkspaceSymbol === 'function'
            && !this._bearing.range) {
            this._bearingResolve = this._provider.resolveWorkspaceSymbol(this._bearing).then(function (result) {
                _this._bearing = result || _this._bearing;
                return _this;
            }, errors_1.onUnexpectedError);
        }
        winjs_base_1.TPromise.as(this._bearingResolve)
            .then(function (_) { return _super.prototype.run.call(_this, mode, context); })
            .done(undefined, errors_1.onUnexpectedError);
        // hide if OPEN
        return mode === quickOpen_1.Mode.OPEN;
    };
    SymbolEntry.prototype.getInput = function () {
        var input = {
            resource: this._bearing.resource,
            options: {
                pinned: !this._configurationService.getConfiguration().workbench.editor.enablePreviewFromQuickOpen
            }
        };
        if (this._bearing.range) {
            input.options.selection = range_1.Range.collapseToStart(this._bearing.range);
        }
        return input;
    };
    SymbolEntry.compare = function (elementA, elementB, searchValue) {
        // Sort by Type if name is identical
        var elementAName = elementA.getLabel().toLowerCase();
        var elementBName = elementB.getLabel().toLowerCase();
        if (elementAName === elementBName) {
            var elementAType = elementA._bearing.type;
            var elementBType = elementB._bearing.type;
            return elementAType.localeCompare(elementBType);
        }
        return quickOpenModel_1.QuickOpenEntry.compare(elementA, elementB, searchValue);
    };
    return SymbolEntry;
}(quickopen_1.EditorQuickOpenEntry));
SymbolEntry = __decorate([
    __param(2, configuration_1.IConfigurationService),
    __param(3, workspace_1.IWorkspaceContextService),
    __param(4, editorService_1.IWorkbenchEditorService)
], SymbolEntry);
var OpenSymbolHandler = (function (_super) {
    __extends(OpenSymbolHandler, _super);
    function OpenSymbolHandler(instantiationService, contextService) {
        var _this = _super.call(this) || this;
        _this.instantiationService = instantiationService;
        _this.contextService = contextService;
        _this.delayer = new async_1.ThrottledDelayer(OpenSymbolHandler.SEARCH_DELAY);
        _this.options = Object.create(null);
        return _this;
    }
    OpenSymbolHandler.prototype.setOptions = function (options) {
        this.options = options;
    };
    OpenSymbolHandler.prototype.canRun = function () {
        return true;
    };
    OpenSymbolHandler.prototype.getResults = function (searchValue) {
        var _this = this;
        searchValue = searchValue.trim();
        // Respond directly to empty search
        if (!searchValue) {
            return winjs_base_1.TPromise.as(new quickOpenModel_1.QuickOpenModel([]));
        }
        var promise;
        if (!this.options.skipDelay) {
            promise = this.delayer.trigger(function () { return _this.doGetResults(searchValue); }); // Run search with delay as needed
        }
        else {
            promise = this.doGetResults(searchValue);
        }
        return promise.then(function (e) { return new quickOpenModel_1.QuickOpenModel(e); });
    };
    OpenSymbolHandler.prototype.doGetResults = function (searchValue) {
        var _this = this;
        return search_1.getWorkspaceSymbols(searchValue, this.contextService.getWorkspace()).then(function (tuples) {
            var result = [];
            for (var _i = 0, tuples_1 = tuples; _i < tuples_1.length; _i++) {
                var tuple = tuples_1[_i];
                var provider = tuple[0], bearings = tuple[1];
                _this.fillInSymbolEntries(result, provider, bearings, searchValue);
            }
            // Sort (Standalone only)
            if (!_this.options.skipSorting) {
                searchValue = searchValue.toLowerCase();
                return result.sort(function (a, b) { return SymbolEntry.compare(a, b, searchValue); });
            }
            else {
                return result;
            }
        });
    };
    OpenSymbolHandler.prototype.fillInSymbolEntries = function (bucket, provider, types, searchValue) {
        // Convert to Entries
        for (var _i = 0, types_1 = types; _i < types_1.length; _i++) {
            var element = types_1[_i];
            if (this.options.skipLocalSymbols && !!element.containerName) {
                continue; // ignore local symbols if we are told so
            }
            var entry = this.instantiationService.createInstance(SymbolEntry, element, provider);
            entry.setHighlights(filters.matchesFuzzy(searchValue, entry.getLabel()));
            bucket.push(entry);
        }
    };
    OpenSymbolHandler.prototype.getGroupLabel = function () {
        return nls.localize('symbols', "symbol results");
    };
    OpenSymbolHandler.prototype.getEmptyLabel = function (searchString) {
        if (searchString.length > 0) {
            return nls.localize('noSymbolsMatching', "No symbols matching");
        }
        return nls.localize('noSymbolsWithoutInput', "Type to search for symbols");
    };
    OpenSymbolHandler.prototype.getAutoFocus = function (searchValue) {
        return {
            autoFocusFirstEntry: true,
            autoFocusPrefixMatch: searchValue.trim()
        };
    };
    return OpenSymbolHandler;
}(quickopen_1.QuickOpenHandler));
OpenSymbolHandler.SEARCH_DELAY = 500; // This delay accommodates for the user typing a word and then stops typing to start searching
OpenSymbolHandler = __decorate([
    __param(0, instantiation_1.IInstantiationService),
    __param(1, workspace_1.IWorkspaceContextService)
], OpenSymbolHandler);
exports.OpenSymbolHandler = OpenSymbolHandler;
