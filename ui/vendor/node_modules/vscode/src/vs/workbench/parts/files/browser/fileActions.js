/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
require("./media/fileactions.css");
var winjs_base_1 = require("vs/base/common/winjs.base");
var nls = require("vs/nls");
var platform_1 = require("vs/base/common/platform");
var async_1 = require("vs/base/common/async");
var paths = require("vs/base/common/paths");
var uri_1 = require("vs/base/common/uri");
var errors = require("vs/base/common/errors");
var errorMessage_1 = require("vs/base/common/errorMessage");
var strings = require("vs/base/common/strings");
var events_1 = require("vs/base/common/events");
var severity_1 = require("vs/base/common/severity");
var diagnostics = require("vs/base/common/diagnostics");
var actions_1 = require("vs/base/common/actions");
var inputBox_1 = require("vs/base/browser/ui/inputbox/inputBox");
var lifecycle_1 = require("vs/base/common/lifecycle");
var files_1 = require("vs/workbench/parts/files/common/files");
var labels = require("vs/base/common/labels");
var textfiles_1 = require("vs/workbench/services/textfile/common/textfiles");
var files_2 = require("vs/platform/files/common/files");
var editor_1 = require("vs/workbench/common/editor");
var explorerViewModel_1 = require("vs/workbench/parts/files/common/explorerViewModel");
var untitledEditorService_1 = require("vs/workbench/services/untitled/common/untitledEditorService");
var editorService_1 = require("vs/workbench/services/editor/common/editorService");
var viewlet_1 = require("vs/workbench/browser/viewlet");
var groupService_1 = require("vs/workbench/services/group/common/groupService");
var quickOpen_1 = require("vs/platform/quickOpen/common/quickOpen");
var history_1 = require("vs/workbench/services/history/common/history");
var viewlet_2 = require("vs/workbench/services/viewlet/browser/viewlet");
var editor_2 = require("vs/platform/editor/common/editor");
var instantiation_1 = require("vs/platform/instantiation/common/instantiation");
var message_1 = require("vs/platform/message/common/message");
var workspace_1 = require("vs/platform/workspace/common/workspace");
var codeEditorService_1 = require("vs/editor/common/services/codeEditorService");
var backup_1 = require("vs/workbench/services/backup/common/backup");
var resolverService_1 = require("vs/editor/common/services/resolverService");
var windows_1 = require("vs/platform/windows/common/windows");
var fileCommands_1 = require("vs/workbench/parts/files/browser/fileCommands");
var BaseFileAction = (function (_super) {
    __extends(BaseFileAction, _super);
    function BaseFileAction(id, label, _fileService, _messageService, _textFileService) {
        var _this = _super.call(this, id, label) || this;
        _this._fileService = _fileService;
        _this._messageService = _messageService;
        _this._textFileService = _textFileService;
        _this.enabled = false;
        return _this;
    }
    Object.defineProperty(BaseFileAction.prototype, "messageService", {
        get: function () {
            return this._messageService;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseFileAction.prototype, "fileService", {
        get: function () {
            return this._fileService;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseFileAction.prototype, "textFileService", {
        get: function () {
            return this._textFileService;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseFileAction.prototype, "element", {
        get: function () {
            return this._element;
        },
        set: function (element) {
            this._element = element;
        },
        enumerable: true,
        configurable: true
    });
    BaseFileAction.prototype._isEnabled = function () {
        return true;
    };
    BaseFileAction.prototype._updateEnablement = function () {
        this.enabled = !!(this._fileService && this._isEnabled());
    };
    BaseFileAction.prototype.onError = function (error) {
        this._messageService.show(message_1.Severity.Error, error);
    };
    BaseFileAction.prototype.onWarning = function (warning) {
        this._messageService.show(message_1.Severity.Warning, warning);
    };
    BaseFileAction.prototype.onErrorWithRetry = function (error, retry, extraAction) {
        var actions = [
            new actions_1.Action(this.id, nls.localize('retry', "Retry"), null, true, function () { return retry(); }),
            message_1.CancelAction
        ];
        if (extraAction) {
            actions.unshift(extraAction);
        }
        var errorWithRetry = {
            actions: actions,
            message: errorMessage_1.toErrorMessage(error, false)
        };
        this._messageService.show(message_1.Severity.Error, errorWithRetry);
    };
    return BaseFileAction;
}(actions_1.Action));
BaseFileAction = __decorate([
    __param(2, files_2.IFileService),
    __param(3, message_1.IMessageService),
    __param(4, textfiles_1.ITextFileService)
], BaseFileAction);
exports.BaseFileAction = BaseFileAction;
var TriggerRenameFileAction = (function (_super) {
    __extends(TriggerRenameFileAction, _super);
    function TriggerRenameFileAction(tree, element, fileService, messageService, textFileService, instantiationService) {
        var _this = _super.call(this, TriggerRenameFileAction.ID, nls.localize('rename', "Rename"), fileService, messageService, textFileService) || this;
        _this.tree = tree;
        _this.element = element;
        _this.renameAction = instantiationService.createInstance(RenameFileAction, element);
        _this._updateEnablement();
        return _this;
    }
    TriggerRenameFileAction.prototype.validateFileName = function (parent, name) {
        return this.renameAction.validateFileName(this.element.parent, name);
    };
    TriggerRenameFileAction.prototype.run = function (context) {
        var _this = this;
        if (!context) {
            return winjs_base_1.TPromise.wrapError('No context provided to BaseEnableFileRenameAction.');
        }
        var viewletState = context.viewletState;
        if (!viewletState) {
            return winjs_base_1.TPromise.wrapError('Invalid viewlet state provided to BaseEnableFileRenameAction.');
        }
        var stat = context.stat;
        if (!stat) {
            return winjs_base_1.TPromise.wrapError('Invalid stat provided to BaseEnableFileRenameAction.');
        }
        viewletState.setEditable(stat, {
            action: this.renameAction,
            validator: function (value) {
                var message = _this.validateFileName(_this.element.parent, value);
                if (!message) {
                    return null;
                }
                return {
                    content: message,
                    formatContent: true,
                    type: inputBox_1.MessageType.ERROR
                };
            }
        });
        this.tree.refresh(stat, false).then(function () {
            _this.tree.setHighlight(stat);
            var unbind = _this.tree.addListener2(events_1.EventType.HIGHLIGHT, function (e) {
                if (!e.highlight) {
                    viewletState.clearEditable(stat);
                    _this.tree.refresh(stat).done(null, errors.onUnexpectedError);
                    unbind.dispose();
                }
            });
        }).done(null, errors.onUnexpectedError);
        return undefined;
    };
    return TriggerRenameFileAction;
}(BaseFileAction));
TriggerRenameFileAction.ID = 'renameFile';
TriggerRenameFileAction = __decorate([
    __param(2, files_2.IFileService),
    __param(3, message_1.IMessageService),
    __param(4, textfiles_1.ITextFileService),
    __param(5, instantiation_1.IInstantiationService)
], TriggerRenameFileAction);
exports.TriggerRenameFileAction = TriggerRenameFileAction;
var BaseRenameAction = (function (_super) {
    __extends(BaseRenameAction, _super);
    function BaseRenameAction(id, label, element, fileService, messageService, textFileService) {
        var _this = _super.call(this, id, label, fileService, messageService, textFileService) || this;
        _this.element = element;
        return _this;
    }
    BaseRenameAction.prototype.run = function (context) {
        var _this = this;
        if (!context) {
            return winjs_base_1.TPromise.wrapError('No context provided to BaseRenameFileAction.');
        }
        var name = context.value;
        if (!name) {
            return winjs_base_1.TPromise.wrapError('No new name provided to BaseRenameFileAction.');
        }
        // Automatically trim whitespaces and trailing dots to produce nice file names
        name = getWellFormedFileName(name);
        var existingName = getWellFormedFileName(this.element.name);
        // Return early if name is invalid or didn't change
        if (name === existingName || this.validateFileName(this.element.parent, name)) {
            return winjs_base_1.TPromise.as(null);
        }
        // Call function and Emit Event through viewer
        var promise = this.runAction(name).then(null, function (error) {
            _this.onError(error);
        });
        return promise;
    };
    BaseRenameAction.prototype.validateFileName = function (parent, name) {
        var source = this.element.name;
        var target = name;
        if (!platform_1.isLinux) {
            source = source.toLowerCase();
            target = target.toLowerCase();
        }
        if (getWellFormedFileName(source) === getWellFormedFileName(target)) {
            return null;
        }
        return validateFileName(parent, name, false);
    };
    return BaseRenameAction;
}(BaseFileAction));
BaseRenameAction = __decorate([
    __param(3, files_2.IFileService),
    __param(4, message_1.IMessageService),
    __param(5, textfiles_1.ITextFileService)
], BaseRenameAction);
exports.BaseRenameAction = BaseRenameAction;
var RenameFileAction = (function (_super) {
    __extends(RenameFileAction, _super);
    function RenameFileAction(element, fileService, messageService, textFileService, textModelResolverService, backupFileService) {
        var _this = _super.call(this, RenameFileAction.ID, nls.localize('rename', "Rename"), element, fileService, messageService, textFileService) || this;
        _this.textModelResolverService = textModelResolverService;
        _this.backupFileService = backupFileService;
        _this._updateEnablement();
        return _this;
    }
    RenameFileAction.prototype.runAction = function (newName) {
        var _this = this;
        // 1. check for dirty files that are being moved and backup to new target
        var dirty = this.textFileService.getDirty().filter(function (d) { return paths.isEqualOrParent(d.fsPath, _this.element.resource.fsPath); });
        var dirtyRenamed = [];
        return winjs_base_1.TPromise.join(dirty.map(function (d) {
            var targetPath = paths.join(_this.element.parent.resource.fsPath, newName);
            var renamed;
            // If the dirty file itself got moved, just reparent it to the target folder
            if (files_2.isEqual(_this.element.resource.fsPath, d.fsPath)) {
                renamed = uri_1.default.file(targetPath);
            }
            else {
                renamed = uri_1.default.file(paths.join(targetPath, d.fsPath.substr(_this.element.resource.fsPath.length + 1)));
            }
            dirtyRenamed.push(renamed);
            var model = _this.textFileService.models.get(d);
            return _this.backupFileService.backupResource(renamed, model.getValue(), model.getVersionId());
        }))
            .then(function () { return _this.textFileService.revertAll(dirty, { soft: true /* do not attempt to load content from disk */ }); })
            .then(function () { return _this.fileService.rename(_this.element.resource, newName).then(null, function (error) {
            return winjs_base_1.TPromise.join(dirtyRenamed.map(function (d) { return _this.backupFileService.discardResourceBackup(d); })).then(function () {
                _this.onErrorWithRetry(error, function () { return _this.runAction(newName); });
            });
        }); })
            .then(function () {
            return winjs_base_1.TPromise.join(dirtyRenamed.map(function (t) { return _this.textModelResolverService.createModelReference(t); }));
        });
    };
    return RenameFileAction;
}(BaseRenameAction));
RenameFileAction.ID = 'workbench.files.action.renameFile';
RenameFileAction = __decorate([
    __param(1, files_2.IFileService),
    __param(2, message_1.IMessageService),
    __param(3, textfiles_1.ITextFileService),
    __param(4, resolverService_1.ITextModelResolverService),
    __param(5, backup_1.IBackupFileService)
], RenameFileAction);
/* Base New File/Folder Action */
var BaseNewAction = (function (_super) {
    __extends(BaseNewAction, _super);
    function BaseNewAction(id, label, tree, isFile, editableAction, element, fileService, messageService, textFileService) {
        var _this = _super.call(this, id, label, fileService, messageService, textFileService) || this;
        if (element) {
            _this.presetFolder = element.isDirectory ? element : element.parent;
        }
        _this.tree = tree;
        _this.isFile = isFile;
        _this.renameAction = editableAction;
        return _this;
    }
    BaseNewAction.prototype.run = function (context) {
        var _this = this;
        if (!context) {
            return winjs_base_1.TPromise.wrapError('No context provided to BaseNewAction.');
        }
        var viewletState = context.viewletState;
        if (!viewletState) {
            return winjs_base_1.TPromise.wrapError('Invalid viewlet state provided to BaseNewAction.');
        }
        var folder = this.presetFolder;
        if (!folder) {
            var focus_1 = this.tree.getFocus();
            if (focus_1) {
                folder = focus_1.isDirectory ? focus_1 : focus_1.parent;
            }
            else {
                folder = this.tree.getInput();
            }
        }
        if (!folder) {
            return winjs_base_1.TPromise.wrapError('Invalid parent folder to create.');
        }
        return this.tree.reveal(folder, 0.5).then(function () {
            return _this.tree.expand(folder).then(function () {
                var stat = explorerViewModel_1.NewStatPlaceholder.addNewStatPlaceholder(folder, !_this.isFile);
                _this.renameAction.element = stat;
                viewletState.setEditable(stat, {
                    action: _this.renameAction,
                    validator: function (value) {
                        var message = _this.renameAction.validateFileName(folder, value);
                        if (!message) {
                            return null;
                        }
                        return {
                            content: message,
                            formatContent: true,
                            type: inputBox_1.MessageType.ERROR
                        };
                    }
                });
                return _this.tree.refresh(folder).then(function () {
                    return _this.tree.expand(folder).then(function () {
                        return _this.tree.reveal(stat, 0.5).then(function () {
                            _this.tree.setHighlight(stat);
                            var unbind = _this.tree.addListener2(events_1.EventType.HIGHLIGHT, function (e) {
                                if (!e.highlight) {
                                    stat.destroy();
                                    _this.tree.refresh(folder).done(null, errors.onUnexpectedError);
                                    unbind.dispose();
                                }
                            });
                        });
                    });
                });
            });
        });
    };
    return BaseNewAction;
}(BaseFileAction));
BaseNewAction = __decorate([
    __param(6, files_2.IFileService),
    __param(7, message_1.IMessageService),
    __param(8, textfiles_1.ITextFileService)
], BaseNewAction);
exports.BaseNewAction = BaseNewAction;
/* New File */
var NewFileAction = (function (_super) {
    __extends(NewFileAction, _super);
    function NewFileAction(tree, element, fileService, messageService, textFileService, instantiationService) {
        var _this = _super.call(this, 'explorer.newFile', nls.localize('newFile', "New File"), tree, true, instantiationService.createInstance(CreateFileAction, element), null, fileService, messageService, textFileService) || this;
        _this.class = 'explorer-action new-file';
        _this._updateEnablement();
        return _this;
    }
    return NewFileAction;
}(BaseNewAction));
NewFileAction = __decorate([
    __param(2, files_2.IFileService),
    __param(3, message_1.IMessageService),
    __param(4, textfiles_1.ITextFileService),
    __param(5, instantiation_1.IInstantiationService)
], NewFileAction);
exports.NewFileAction = NewFileAction;
/* New Folder */
var NewFolderAction = (function (_super) {
    __extends(NewFolderAction, _super);
    function NewFolderAction(tree, element, fileService, messageService, textFileService, instantiationService) {
        var _this = _super.call(this, 'explorer.newFolder', nls.localize('newFolder', "New Folder"), tree, false, instantiationService.createInstance(CreateFolderAction, element), null, fileService, messageService, textFileService) || this;
        _this.class = 'explorer-action new-folder';
        _this._updateEnablement();
        return _this;
    }
    return NewFolderAction;
}(BaseNewAction));
NewFolderAction = __decorate([
    __param(2, files_2.IFileService),
    __param(3, message_1.IMessageService),
    __param(4, textfiles_1.ITextFileService),
    __param(5, instantiation_1.IInstantiationService)
], NewFolderAction);
exports.NewFolderAction = NewFolderAction;
var BaseGlobalNewAction = (function (_super) {
    __extends(BaseGlobalNewAction, _super);
    function BaseGlobalNewAction(id, label, viewletService, instantiationService, messageService) {
        var _this = _super.call(this, id, label) || this;
        _this.viewletService = viewletService;
        _this.instantiationService = instantiationService;
        _this.messageService = messageService;
        return _this;
    }
    BaseGlobalNewAction.prototype.run = function () {
        var _this = this;
        return this.viewletService.openViewlet(files_1.VIEWLET_ID, true).then(function (viewlet) {
            return winjs_base_1.TPromise.timeout(100).then(function () {
                viewlet.focus();
                var explorer = viewlet;
                var explorerView = explorer.getExplorerView();
                // Not having a folder opened
                if (!explorerView) {
                    return _this.messageService.show(message_1.Severity.Info, nls.localize('openFolderFirst', "Open a folder first to create files or folders within."));
                }
                if (!explorerView.isExpanded()) {
                    explorerView.expand();
                }
                var action = _this.toDispose = _this.instantiationService.createInstance(_this.getAction(), explorerView.getViewer(), null);
                return explorer.getActionRunner().run(action);
            });
        });
    };
    BaseGlobalNewAction.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        if (this.toDispose) {
            this.toDispose.dispose();
            this.toDispose = null;
        }
    };
    return BaseGlobalNewAction;
}(actions_1.Action));
BaseGlobalNewAction = __decorate([
    __param(2, viewlet_2.IViewletService),
    __param(3, instantiation_1.IInstantiationService),
    __param(4, message_1.IMessageService)
], BaseGlobalNewAction);
exports.BaseGlobalNewAction = BaseGlobalNewAction;
/* Create new file from anywhere: Open untitled */
var GlobalNewUntitledFileAction = (function (_super) {
    __extends(GlobalNewUntitledFileAction, _super);
    function GlobalNewUntitledFileAction(id, label, editorService, untitledEditorService) {
        var _this = _super.call(this, id, label) || this;
        _this.editorService = editorService;
        _this.untitledEditorService = untitledEditorService;
        return _this;
    }
    GlobalNewUntitledFileAction.prototype.run = function () {
        var input = this.untitledEditorService.createOrGet();
        return this.editorService.openEditor(input, { pinned: true }); // untitled are always pinned
    };
    return GlobalNewUntitledFileAction;
}(actions_1.Action));
GlobalNewUntitledFileAction.ID = 'workbench.action.files.newUntitledFile';
GlobalNewUntitledFileAction.LABEL = nls.localize('newUntitledFile', "New Untitled File");
GlobalNewUntitledFileAction = __decorate([
    __param(2, editorService_1.IWorkbenchEditorService),
    __param(3, untitledEditorService_1.IUntitledEditorService)
], GlobalNewUntitledFileAction);
exports.GlobalNewUntitledFileAction = GlobalNewUntitledFileAction;
/* Create new file from anywhere */
var GlobalNewFileAction = (function (_super) {
    __extends(GlobalNewFileAction, _super);
    function GlobalNewFileAction() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GlobalNewFileAction.prototype.getAction = function () {
        return NewFileAction;
    };
    return GlobalNewFileAction;
}(BaseGlobalNewAction));
GlobalNewFileAction.ID = 'explorer.newFile';
GlobalNewFileAction.LABEL = nls.localize('newFile', "New File");
exports.GlobalNewFileAction = GlobalNewFileAction;
/* Create new folder from anywhere */
var GlobalNewFolderAction = (function (_super) {
    __extends(GlobalNewFolderAction, _super);
    function GlobalNewFolderAction() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GlobalNewFolderAction.prototype.getAction = function () {
        return NewFolderAction;
    };
    return GlobalNewFolderAction;
}(BaseGlobalNewAction));
GlobalNewFolderAction.ID = 'explorer.newFolder';
GlobalNewFolderAction.LABEL = nls.localize('newFolder', "New Folder");
exports.GlobalNewFolderAction = GlobalNewFolderAction;
/* Create New File/Folder (only used internally by explorerViewer) */
var BaseCreateAction = (function (_super) {
    __extends(BaseCreateAction, _super);
    function BaseCreateAction() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BaseCreateAction.prototype.validateFileName = function (parent, name) {
        if (this.element instanceof explorerViewModel_1.NewStatPlaceholder) {
            return validateFileName(parent, name, false);
        }
        return _super.prototype.validateFileName.call(this, parent, name);
    };
    return BaseCreateAction;
}(BaseRenameAction));
exports.BaseCreateAction = BaseCreateAction;
/* Create New File (only used internally by explorerViewer) */
var CreateFileAction = (function (_super) {
    __extends(CreateFileAction, _super);
    function CreateFileAction(element, fileService, editorService, messageService, textFileService) {
        var _this = _super.call(this, CreateFileAction.ID, CreateFileAction.LABEL, element, fileService, messageService, textFileService) || this;
        _this.editorService = editorService;
        _this._updateEnablement();
        return _this;
    }
    CreateFileAction.prototype.runAction = function (fileName) {
        var _this = this;
        return this.fileService.createFile(uri_1.default.file(paths.join(this.element.parent.resource.fsPath, fileName))).then(function (stat) {
            return _this.editorService.openEditor({ resource: stat.resource, options: { pinned: true } });
        }, function (error) {
            _this.onErrorWithRetry(error, function () { return _this.runAction(fileName); });
        });
    };
    return CreateFileAction;
}(BaseCreateAction));
CreateFileAction.ID = 'workbench.files.action.createFileFromExplorer';
CreateFileAction.LABEL = nls.localize('createNewFile', "New File");
CreateFileAction = __decorate([
    __param(1, files_2.IFileService),
    __param(2, editorService_1.IWorkbenchEditorService),
    __param(3, message_1.IMessageService),
    __param(4, textfiles_1.ITextFileService)
], CreateFileAction);
exports.CreateFileAction = CreateFileAction;
/* Create New Folder (only used internally by explorerViewer) */
var CreateFolderAction = (function (_super) {
    __extends(CreateFolderAction, _super);
    function CreateFolderAction(element, fileService, messageService, textFileService) {
        var _this = _super.call(this, CreateFolderAction.ID, CreateFolderAction.LABEL, null, fileService, messageService, textFileService) || this;
        _this._updateEnablement();
        return _this;
    }
    CreateFolderAction.prototype.runAction = function (fileName) {
        var _this = this;
        return this.fileService.createFolder(uri_1.default.file(paths.join(this.element.parent.resource.fsPath, fileName))).then(null, function (error) {
            _this.onErrorWithRetry(error, function () { return _this.runAction(fileName); });
        });
    };
    return CreateFolderAction;
}(BaseCreateAction));
CreateFolderAction.ID = 'workbench.files.action.createFolderFromExplorer';
CreateFolderAction.LABEL = nls.localize('createNewFolder', "New Folder");
CreateFolderAction = __decorate([
    __param(1, files_2.IFileService),
    __param(2, message_1.IMessageService),
    __param(3, textfiles_1.ITextFileService)
], CreateFolderAction);
exports.CreateFolderAction = CreateFolderAction;
var BaseDeleteFileAction = (function (_super) {
    __extends(BaseDeleteFileAction, _super);
    function BaseDeleteFileAction(id, label, tree, element, useTrash, fileService, messageService, textFileService) {
        var _this = _super.call(this, id, label, fileService, messageService, textFileService) || this;
        _this.tree = tree;
        _this.element = element;
        _this.useTrash = useTrash && !paths.isUNC(element.resource.fsPath); // on UNC shares there is no trash
        _this._updateEnablement();
        return _this;
    }
    BaseDeleteFileAction.prototype.run = function (context) {
        var _this = this;
        // Remove highlight
        if (this.tree) {
            this.tree.clearHighlight();
        }
        // Read context
        if (context) {
            if (context.event) {
                var bypassTrash = (platform_1.isMacintosh && context.event.altKey) || (!platform_1.isMacintosh && context.event.shiftKey);
                if (bypassTrash) {
                    this.useTrash = false;
                }
            }
            else if (typeof context.useTrash === 'boolean') {
                this.useTrash = context.useTrash;
            }
        }
        var primaryButton;
        if (this.useTrash) {
            primaryButton = platform_1.isWindows ? nls.localize('deleteButtonLabelRecycleBin', "&&Move to Recycle Bin") : nls.localize({ key: 'deleteButtonLabelTrash', comment: ['&& denotes a mnemonic'] }, "&&Move to Trash");
        }
        else {
            primaryButton = nls.localize({ key: 'deleteButtonLabel', comment: ['&& denotes a mnemonic'] }, "&&Delete");
        }
        // Handle dirty
        var revertPromise = winjs_base_1.TPromise.as(null);
        var dirty = this.textFileService.getDirty().filter(function (d) { return paths.isEqualOrParent(d.fsPath, _this.element.resource.fsPath); });
        if (dirty.length) {
            var message = void 0;
            if (this.element.isDirectory) {
                if (dirty.length === 1) {
                    message = nls.localize('dirtyMessageFolderOneDelete', "You are deleting a folder with unsaved changes in 1 file. Do you want to continue?");
                }
                else {
                    message = nls.localize('dirtyMessageFolderDelete', "You are deleting a folder with unsaved changes in {0} files. Do you want to continue?", dirty.length);
                }
            }
            else {
                message = nls.localize('dirtyMessageFileDelete', "You are deleting a file with unsaved changes. Do you want to continue?");
            }
            var res = this.messageService.confirm({
                message: message,
                type: 'warning',
                detail: nls.localize('dirtyWarning', "Your changes will be lost if you don't save them."),
                primaryButton: primaryButton
            });
            if (!res) {
                return winjs_base_1.TPromise.as(null);
            }
            this.skipConfirm = true; // since we already asked for confirmation
            revertPromise = this.textFileService.revertAll(dirty);
        }
        // Check if file is dirty in editor and save it to avoid data loss
        return revertPromise.then(function () {
            // Ask for Confirm
            if (!_this.skipConfirm) {
                var confirm_1;
                if (_this.useTrash) {
                    confirm_1 = {
                        message: _this.element.isDirectory ? nls.localize('confirmMoveTrashMessageFolder', "Are you sure you want to delete '{0}' and its contents?", _this.element.name) : nls.localize('confirmMoveTrashMessageFile', "Are you sure you want to delete '{0}'?", _this.element.name),
                        detail: platform_1.isWindows ? nls.localize('undoBin', "You can restore from the recycle bin.") : nls.localize('undoTrash', "You can restore from the trash."),
                        primaryButton: primaryButton
                    };
                }
                else {
                    confirm_1 = {
                        message: _this.element.isDirectory ? nls.localize('confirmDeleteMessageFolder', "Are you sure you want to permanently delete '{0}' and its contents?", _this.element.name) : nls.localize('confirmDeleteMessageFile', "Are you sure you want to permanently delete '{0}'?", _this.element.name),
                        detail: nls.localize('irreversible', "This action is irreversible!"),
                        primaryButton: primaryButton
                    };
                }
                if (!_this.messageService.confirm(confirm_1)) {
                    return winjs_base_1.TPromise.as(null);
                }
            }
            // Call function
            var servicePromise = _this.fileService.del(_this.element.resource, _this.useTrash).then(function () {
                if (_this.element.parent) {
                    _this.tree.setFocus(_this.element.parent); // move focus to parent
                }
            }, function (error) {
                // Allow to retry
                var extraAction;
                if (_this.useTrash) {
                    extraAction = new actions_1.Action('permanentDelete', nls.localize('permDelete', "Delete Permanently"), null, true, function () { _this.useTrash = false; _this.skipConfirm = true; return _this.run(); });
                }
                _this.onErrorWithRetry(error, function () { return _this.run(); }, extraAction);
                // Focus back to tree
                _this.tree.DOMFocus();
            });
            return servicePromise;
        });
    };
    return BaseDeleteFileAction;
}(BaseFileAction));
BaseDeleteFileAction = __decorate([
    __param(5, files_2.IFileService),
    __param(6, message_1.IMessageService),
    __param(7, textfiles_1.ITextFileService)
], BaseDeleteFileAction);
exports.BaseDeleteFileAction = BaseDeleteFileAction;
/* Move File/Folder to trash */
var MoveFileToTrashAction = (function (_super) {
    __extends(MoveFileToTrashAction, _super);
    function MoveFileToTrashAction(tree, element, fileService, messageService, textFileService) {
        return _super.call(this, MoveFileToTrashAction.ID, nls.localize('delete', "Delete"), tree, element, true, fileService, messageService, textFileService) || this;
    }
    return MoveFileToTrashAction;
}(BaseDeleteFileAction));
MoveFileToTrashAction.ID = 'moveFileToTrash';
MoveFileToTrashAction = __decorate([
    __param(2, files_2.IFileService),
    __param(3, message_1.IMessageService),
    __param(4, textfiles_1.ITextFileService)
], MoveFileToTrashAction);
exports.MoveFileToTrashAction = MoveFileToTrashAction;
/* Import File */
var ImportFileAction = (function (_super) {
    __extends(ImportFileAction, _super);
    function ImportFileAction(tree, element, clazz, fileService, editorService, messageService, textFileService) {
        var _this = _super.call(this, ImportFileAction.ID, nls.localize('importFiles', "Import Files"), fileService, messageService, textFileService) || this;
        _this.editorService = editorService;
        _this.tree = tree;
        _this.element = element;
        if (clazz) {
            _this.class = clazz;
        }
        _this._updateEnablement();
        return _this;
    }
    ImportFileAction.prototype.getViewer = function () {
        return this.tree;
    };
    ImportFileAction.prototype.run = function (context) {
        var _this = this;
        var importPromise = winjs_base_1.TPromise.as(null).then(function () {
            var input = context.input;
            if (input.files && input.files.length > 0) {
                // Find parent for import
                var targetElement_1;
                if (_this.element) {
                    targetElement_1 = _this.element;
                }
                else {
                    targetElement_1 = _this.tree.getFocus() || _this.tree.getInput();
                }
                if (!targetElement_1.isDirectory) {
                    targetElement_1 = targetElement_1.parent;
                }
                // Create real files array
                var filesArray_1 = [];
                for (var i = 0; i < input.files.length; i++) {
                    var file = input.files[i];
                    filesArray_1.push(file);
                }
                // Resolve target to check for name collisions and ask user
                return _this.fileService.resolveFile(targetElement_1.resource).then(function (targetStat) {
                    // Check for name collisions
                    var targetNames = {};
                    targetStat.children.forEach(function (child) {
                        targetNames[platform_1.isLinux ? child.name : child.name.toLowerCase()] = child;
                    });
                    var overwrite = true;
                    if (filesArray_1.some(function (file) {
                        return !!targetNames[platform_1.isLinux ? file.name : file.name.toLowerCase()];
                    })) {
                        var confirm_2 = {
                            message: nls.localize('confirmOverwrite', "A file or folder with the same name already exists in the destination folder. Do you want to replace it?"),
                            detail: nls.localize('irreversible', "This action is irreversible!"),
                            primaryButton: nls.localize({ key: 'replaceButtonLabel', comment: ['&& denotes a mnemonic'] }, "&&Replace")
                        };
                        overwrite = _this.messageService.confirm(confirm_2);
                    }
                    if (!overwrite) {
                        return undefined;
                    }
                    // Run import in sequence
                    var importPromisesFactory = [];
                    filesArray_1.forEach(function (file) {
                        importPromisesFactory.push(function () {
                            var sourceFile = uri_1.default.file(file.path);
                            var targetFile = uri_1.default.file(paths.join(targetElement_1.resource.fsPath, paths.basename(file.path)));
                            // if the target exists and is dirty, make sure to revert it. otherwise the dirty contents
                            // of the target file would replace the contents of the imported file. since we already
                            // confirmed the overwrite before, this is OK.
                            var revertPromise = winjs_base_1.TPromise.as(null);
                            if (_this.textFileService.isDirty(targetFile)) {
                                revertPromise = _this.textFileService.revertAll([targetFile], { soft: true });
                            }
                            return revertPromise.then(function () {
                                return _this.fileService.importFile(sourceFile, targetElement_1.resource).then(function (res) {
                                    // if we only import one file, just open it directly
                                    if (filesArray_1.length === 1) {
                                        _this.editorService.openEditor({ resource: res.stat.resource, options: { pinned: true } }).done(null, errors.onUnexpectedError);
                                    }
                                }, function (error) {
                                    _this.messageService.show(message_1.Severity.Error, error);
                                });
                            });
                        });
                    });
                    return async_1.sequence(importPromisesFactory);
                });
            }
            return undefined;
        });
        return importPromise.then(function () {
            _this.tree.clearHighlight();
        }, function (error) {
            _this.onError(error);
            _this.tree.clearHighlight();
        });
    };
    return ImportFileAction;
}(BaseFileAction));
ImportFileAction.ID = 'workbench.files.action.importFile';
ImportFileAction = __decorate([
    __param(3, files_2.IFileService),
    __param(4, editorService_1.IWorkbenchEditorService),
    __param(5, message_1.IMessageService),
    __param(6, textfiles_1.ITextFileService)
], ImportFileAction);
exports.ImportFileAction = ImportFileAction;
// Copy File/Folder
var fileToCopy;
var CopyFileAction = (function (_super) {
    __extends(CopyFileAction, _super);
    function CopyFileAction(tree, element, fileService, messageService, textFileService) {
        var _this = _super.call(this, CopyFileAction.ID, nls.localize('copyFile', "Copy"), fileService, messageService, textFileService) || this;
        _this.tree = tree;
        _this.element = element;
        _this._updateEnablement();
        return _this;
    }
    CopyFileAction.prototype.run = function () {
        // Remember as file/folder to copy
        fileToCopy = this.element;
        // Remove highlight
        if (this.tree) {
            this.tree.clearHighlight();
        }
        this.tree.DOMFocus();
        return winjs_base_1.TPromise.as(null);
    };
    return CopyFileAction;
}(BaseFileAction));
CopyFileAction.ID = 'filesExplorer.copy';
CopyFileAction = __decorate([
    __param(2, files_2.IFileService),
    __param(3, message_1.IMessageService),
    __param(4, textfiles_1.ITextFileService)
], CopyFileAction);
exports.CopyFileAction = CopyFileAction;
// Paste File/Folder
var PasteFileAction = (function (_super) {
    __extends(PasteFileAction, _super);
    function PasteFileAction(tree, element, fileService, messageService, textFileService, instantiationService) {
        var _this = _super.call(this, PasteFileAction.ID, nls.localize('pasteFile', "Paste"), fileService, messageService, textFileService) || this;
        _this.instantiationService = instantiationService;
        _this.tree = tree;
        _this.element = element || _this.tree.getInput();
        _this._updateEnablement();
        return _this;
    }
    PasteFileAction.prototype._isEnabled = function () {
        // Need at least a file to copy
        if (!fileToCopy) {
            return false;
        }
        // Check if file was deleted or moved meanwhile
        var root = this.tree.getInput();
        var exists = root.find(fileToCopy.resource);
        if (!exists) {
            fileToCopy = null;
            return false;
        }
        // Check if target is ancestor of pasted folder
        if (this.element.resource.toString() !== fileToCopy.resource.toString() && paths.isEqualOrParent(this.element.resource.fsPath, fileToCopy.resource.fsPath)) {
            return false;
        }
        return true;
    };
    PasteFileAction.prototype.run = function () {
        var _this = this;
        // Find target
        var target;
        if (this.element.resource.toString() === fileToCopy.resource.toString()) {
            target = this.element.parent;
        }
        else {
            target = this.element.isDirectory ? this.element : this.element.parent;
        }
        // Reuse duplicate action
        var pasteAction = this.instantiationService.createInstance(DuplicateFileAction, this.tree, fileToCopy, target);
        return pasteAction.run().then(function () {
            _this.tree.DOMFocus();
        });
    };
    return PasteFileAction;
}(BaseFileAction));
PasteFileAction.ID = 'filesExplorer.paste';
PasteFileAction = __decorate([
    __param(2, files_2.IFileService),
    __param(3, message_1.IMessageService),
    __param(4, textfiles_1.ITextFileService),
    __param(5, instantiation_1.IInstantiationService)
], PasteFileAction);
exports.PasteFileAction = PasteFileAction;
exports.pasteIntoFocusedFilesExplorerViewItem = function (accessor) {
    var instantiationService = accessor.get(instantiation_1.IInstantiationService);
    fileCommands_1.withFocussedFilesExplorer(accessor).then(function (res) {
        if (res) {
            var pasteAction = instantiationService.createInstance(PasteFileAction, res.tree, res.tree.getFocus());
            if (pasteAction._isEnabled()) {
                pasteAction.run().done(null, errors.onUnexpectedError);
            }
        }
    });
};
// Duplicate File/Folder
var DuplicateFileAction = (function (_super) {
    __extends(DuplicateFileAction, _super);
    function DuplicateFileAction(tree, element, target, fileService, editorService, messageService, textFileService) {
        var _this = _super.call(this, 'workbench.files.action.duplicateFile', nls.localize('duplicateFile', "Duplicate"), fileService, messageService, textFileService) || this;
        _this.editorService = editorService;
        _this.tree = tree;
        _this.element = element;
        _this.target = (target && target.isDirectory) ? target : element.parent;
        _this._updateEnablement();
        return _this;
    }
    DuplicateFileAction.prototype.run = function () {
        var _this = this;
        // Remove highlight
        if (this.tree) {
            this.tree.clearHighlight();
        }
        // Copy File
        var result = this.fileService.copyFile(this.element.resource, this.findTarget()).then(function (stat) {
            if (!stat.isDirectory) {
                return _this.editorService.openEditor({ resource: stat.resource, options: { pinned: true } });
            }
            return undefined;
        }, function (error) {
            _this.onError(error);
        });
        return result;
    };
    DuplicateFileAction.prototype.onError = function (error) {
        this.messageService.show(message_1.Severity.Error, error);
    };
    DuplicateFileAction.prototype.findTarget = function () {
        var root = this.tree.getInput();
        var name = this.element.name;
        var candidate = uri_1.default.file(paths.join(this.target.resource.fsPath, name));
        while (true) {
            if (!root.find(candidate)) {
                break;
            }
            name = this.toCopyName(name, this.element.isDirectory);
            candidate = uri_1.default.file(paths.join(this.target.resource.fsPath, name));
        }
        return candidate;
    };
    DuplicateFileAction.prototype.toCopyName = function (name, isFolder) {
        // file.1.txt=>file.2.txt
        if (!isFolder && name.match(/(\d+)(\..*)$/)) {
            return name.replace(/(\d+)(\..*)$/, function (match, g1, g2) { return (parseInt(g1) + 1) + g2; });
        }
        // file.txt=>file.1.txt
        var lastIndexOfDot = name.lastIndexOf('.');
        if (!isFolder && lastIndexOfDot >= 0) {
            return strings.format('{0}.1{1}', name.substr(0, lastIndexOfDot), name.substr(lastIndexOfDot));
        }
        // folder.1=>folder.2
        if (isFolder && name.match(/(\d+)$/)) {
            return name.replace(/(\d+)$/, function (match) {
                var groups = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    groups[_i - 1] = arguments[_i];
                }
                return String(parseInt(groups[0]) + 1);
            });
        }
        // file/folder=>file.1/folder.1
        return strings.format('{0}.1', name);
    };
    return DuplicateFileAction;
}(BaseFileAction));
DuplicateFileAction = __decorate([
    __param(3, files_2.IFileService),
    __param(4, editorService_1.IWorkbenchEditorService),
    __param(5, message_1.IMessageService),
    __param(6, textfiles_1.ITextFileService)
], DuplicateFileAction);
exports.DuplicateFileAction = DuplicateFileAction;
// Open to the side
var OpenToSideAction = (function (_super) {
    __extends(OpenToSideAction, _super);
    function OpenToSideAction(tree, resource, preserveFocus, editorService) {
        var _this = _super.call(this, OpenToSideAction.ID, OpenToSideAction.LABEL) || this;
        _this.editorService = editorService;
        _this.tree = tree;
        _this.preserveFocus = preserveFocus;
        _this.resource = resource;
        _this.updateEnablement();
        return _this;
    }
    OpenToSideAction.prototype.updateEnablement = function () {
        var activeEditor = this.editorService.getActiveEditor();
        this.enabled = (!activeEditor || activeEditor.position !== editor_2.Position.THREE);
    };
    OpenToSideAction.prototype.run = function () {
        // Remove highlight
        this.tree.clearHighlight();
        // Set side input
        return this.editorService.openEditor({
            resource: this.resource,
            options: {
                preserveFocus: this.preserveFocus
            }
        }, true);
    };
    return OpenToSideAction;
}(actions_1.Action));
OpenToSideAction.ID = 'explorer.openToSide';
OpenToSideAction.LABEL = nls.localize('openToSide', "Open to the Side");
OpenToSideAction = __decorate([
    __param(3, editorService_1.IWorkbenchEditorService)
], OpenToSideAction);
exports.OpenToSideAction = OpenToSideAction;
var globalResourceToCompare;
var SelectResourceForCompareAction = (function (_super) {
    __extends(SelectResourceForCompareAction, _super);
    function SelectResourceForCompareAction(resource, tree) {
        var _this = _super.call(this, 'workbench.files.action.selectForCompare', nls.localize('compareSource', "Select for Compare")) || this;
        _this.tree = tree;
        _this.resource = resource;
        _this.enabled = true;
        return _this;
    }
    SelectResourceForCompareAction.prototype.run = function () {
        // Remember as source file to compare
        globalResourceToCompare = this.resource;
        // Remove highlight
        if (this.tree) {
            this.tree.clearHighlight();
            this.tree.DOMFocus();
        }
        return winjs_base_1.TPromise.as(null);
    };
    return SelectResourceForCompareAction;
}(actions_1.Action));
exports.SelectResourceForCompareAction = SelectResourceForCompareAction;
// Global Compare with
var GlobalCompareResourcesAction = (function (_super) {
    __extends(GlobalCompareResourcesAction, _super);
    function GlobalCompareResourcesAction(id, label, quickOpenService, instantiationService, editorService, historyService, contextService, messageService) {
        var _this = _super.call(this, id, label) || this;
        _this.quickOpenService = quickOpenService;
        _this.instantiationService = instantiationService;
        _this.editorService = editorService;
        _this.historyService = historyService;
        _this.contextService = contextService;
        _this.messageService = messageService;
        return _this;
    }
    GlobalCompareResourcesAction.prototype.run = function () {
        var _this = this;
        var activeResource = editor_1.toResource(this.editorService.getActiveEditorInput(), { filter: ['file', 'untitled'] });
        if (activeResource) {
            // Keep as resource to compare
            globalResourceToCompare = activeResource;
            var history_2 = this.historyService.getHistory();
            var picks = history_2.map(function (input) {
                var resource;
                var label;
                var description;
                if (input instanceof editor_1.EditorInput) {
                    resource = editor_1.toResource(input, { filter: ['file', 'untitled'] });
                }
                else {
                    resource = input.resource;
                }
                if (!resource) {
                    return void 0; // only support to compare with files and untitled
                }
                label = paths.basename(resource.fsPath);
                description = resource.scheme === 'file' ? labels.getPathLabel(paths.dirname(resource.fsPath), _this.contextService) : void 0;
                return { input: input, resource: resource, label: label, description: description };
            }).filter(function (p) { return !!p; });
            return this.quickOpenService.pick(picks, { placeHolder: nls.localize('pickHistory', "Select a previously opened file to compare with"), autoFocus: { autoFocusFirstEntry: true }, matchOnDescription: true }).then(function (pick) {
                if (pick) {
                    var compareAction_1 = _this.instantiationService.createInstance(CompareResourcesAction, pick.resource, null);
                    if (compareAction_1._isEnabled()) {
                        compareAction_1.run().done(function () { return compareAction_1.dispose(); });
                    }
                    else {
                        _this.messageService.show(message_1.Severity.Info, nls.localize('unableToFileToCompare', "The selected file can not be compared with '{0}'.", paths.basename(globalResourceToCompare.fsPath)));
                    }
                }
            });
        }
        else {
            this.messageService.show(message_1.Severity.Info, nls.localize('openFileToCompare', "Open a file first to compare it with another file."));
        }
        return winjs_base_1.TPromise.as(true);
    };
    return GlobalCompareResourcesAction;
}(actions_1.Action));
GlobalCompareResourcesAction.ID = 'workbench.files.action.compareFileWith';
GlobalCompareResourcesAction.LABEL = nls.localize('globalCompareFile', "Compare Active File With...");
GlobalCompareResourcesAction = __decorate([
    __param(2, quickOpen_1.IQuickOpenService),
    __param(3, instantiation_1.IInstantiationService),
    __param(4, editorService_1.IWorkbenchEditorService),
    __param(5, history_1.IHistoryService),
    __param(6, workspace_1.IWorkspaceContextService),
    __param(7, message_1.IMessageService)
], GlobalCompareResourcesAction);
exports.GlobalCompareResourcesAction = GlobalCompareResourcesAction;
// Compare with Resource
var CompareResourcesAction = (function (_super) {
    __extends(CompareResourcesAction, _super);
    function CompareResourcesAction(resource, tree, editorService) {
        var _this = _super.call(this, 'workbench.files.action.compareFiles', CompareResourcesAction.computeLabel()) || this;
        _this.editorService = editorService;
        _this.tree = tree;
        _this.resource = resource;
        return _this;
    }
    CompareResourcesAction.computeLabel = function () {
        if (globalResourceToCompare) {
            return nls.localize('compareWith', "Compare with '{0}'", paths.basename(globalResourceToCompare.fsPath));
        }
        return nls.localize('compareFiles', "Compare Files");
    };
    CompareResourcesAction.prototype.getLabel = function () {
        return CompareResourcesAction.computeLabel();
    };
    CompareResourcesAction.prototype._isEnabled = function () {
        // Need at least a resource to compare
        if (!globalResourceToCompare) {
            return false;
        }
        // Check if file was deleted or moved meanwhile (explorer only)
        if (this.tree) {
            var root = this.tree.getInput();
            if (root instanceof explorerViewModel_1.FileStat) {
                var exists = root.find(globalResourceToCompare);
                if (!exists) {
                    globalResourceToCompare = null;
                    return false;
                }
            }
        }
        // Check if target is identical to source
        if (this.resource.toString() === globalResourceToCompare.toString()) {
            return false;
        }
        return true;
    };
    CompareResourcesAction.prototype.run = function () {
        // Remove highlight
        if (this.tree) {
            this.tree.clearHighlight();
        }
        return this.editorService.openEditor({
            leftResource: globalResourceToCompare,
            rightResource: this.resource
        });
    };
    return CompareResourcesAction;
}(actions_1.Action));
CompareResourcesAction = __decorate([
    __param(2, editorService_1.IWorkbenchEditorService)
], CompareResourcesAction);
exports.CompareResourcesAction = CompareResourcesAction;
// Refresh Explorer Viewer
var RefreshViewExplorerAction = (function (_super) {
    __extends(RefreshViewExplorerAction, _super);
    function RefreshViewExplorerAction(explorerView, clazz) {
        return _super.call(this, 'workbench.files.action.refreshFilesExplorer', nls.localize('refresh', "Refresh"), clazz, true, function (context) { return explorerView.refresh(); }) || this;
    }
    return RefreshViewExplorerAction;
}(actions_1.Action));
exports.RefreshViewExplorerAction = RefreshViewExplorerAction;
var BaseActionWithErrorReporting = (function (_super) {
    __extends(BaseActionWithErrorReporting, _super);
    function BaseActionWithErrorReporting(id, label, messageService) {
        var _this = _super.call(this, id, label) || this;
        _this.messageService = messageService;
        return _this;
    }
    BaseActionWithErrorReporting.prototype.run = function (context) {
        var _this = this;
        return this.doRun(context).then(function () { return true; }, function (error) {
            _this.messageService.show(message_1.Severity.Error, errorMessage_1.toErrorMessage(error, false));
        });
    };
    return BaseActionWithErrorReporting;
}(actions_1.Action));
exports.BaseActionWithErrorReporting = BaseActionWithErrorReporting;
var BaseSaveFileAction = (function (_super) {
    __extends(BaseSaveFileAction, _super);
    function BaseSaveFileAction(id, label, editorService, textFileService, editorGroupService, untitledEditorService, messageService) {
        var _this = _super.call(this, id, label, messageService) || this;
        _this.editorService = editorService;
        _this.textFileService = textFileService;
        _this.editorGroupService = editorGroupService;
        _this.untitledEditorService = untitledEditorService;
        _this.enabled = true;
        return _this;
    }
    BaseSaveFileAction.prototype.setResource = function (resource) {
        this.resource = resource;
    };
    BaseSaveFileAction.prototype.doRun = function (context) {
        var _this = this;
        var source;
        if (this.resource) {
            source = this.resource;
        }
        else {
            source = editor_1.toResource(this.editorService.getActiveEditorInput(), { supportSideBySide: true, filter: ['file', 'untitled'] });
        }
        if (source) {
            // Save As (or Save untitled with associated path)
            if (this.isSaveAs() || source.scheme === 'untitled') {
                var encodingOfSource_1;
                if (source.scheme === 'untitled') {
                    encodingOfSource_1 = this.untitledEditorService.get(source).getEncoding();
                }
                else if (source.scheme === 'file') {
                    var textModel = this.textFileService.models.get(source);
                    encodingOfSource_1 = textModel && textModel.getEncoding(); // text model can be null e.g. if this is a binary file!
                }
                var viewStateOfSource_1;
                var activeEditor = this.editorService.getActiveEditor();
                var editor = codeEditorService_1.getCodeEditor(activeEditor);
                if (editor) {
                    var activeResource = editor_1.toResource(activeEditor.input, { supportSideBySide: true, filter: ['file', 'untitled'] });
                    if (activeResource && activeResource.toString() === source.toString()) {
                        viewStateOfSource_1 = editor.saveViewState();
                    }
                }
                // Special case: an untitled file with associated path gets saved directly unless "saveAs" is true
                var savePromise = void 0;
                if (!this.isSaveAs() && source.scheme === 'untitled' && this.untitledEditorService.hasAssociatedFilePath(source)) {
                    savePromise = this.textFileService.save(source).then(function (result) {
                        if (result) {
                            return uri_1.default.file(source.fsPath);
                        }
                        return null;
                    });
                }
                else {
                    savePromise = this.textFileService.saveAs(source);
                }
                return savePromise.then(function (target) {
                    if (!target || target.toString() === source.toString()) {
                        return undefined; // save canceled or same resource used
                    }
                    var replaceWith = {
                        resource: target,
                        encoding: encodingOfSource_1,
                        options: {
                            pinned: true,
                            viewState: viewStateOfSource_1
                        }
                    };
                    return _this.editorService.replaceEditors([{
                            toReplace: { resource: source },
                            replaceWith: replaceWith
                        }]).then(function () { return true; });
                });
            }
            // Pin the active editor if we are saving it
            if (!this.resource) {
                var editor = this.editorService.getActiveEditor();
                if (editor) {
                    this.editorGroupService.pinEditor(editor.position, editor.input);
                }
            }
            // Just save
            return this.textFileService.save(source, { force: true /* force a change to the file to trigger external watchers if any */ });
        }
        return winjs_base_1.TPromise.as(false);
    };
    return BaseSaveFileAction;
}(BaseActionWithErrorReporting));
BaseSaveFileAction = __decorate([
    __param(2, editorService_1.IWorkbenchEditorService),
    __param(3, textfiles_1.ITextFileService),
    __param(4, groupService_1.IEditorGroupService),
    __param(5, untitledEditorService_1.IUntitledEditorService),
    __param(6, message_1.IMessageService)
], BaseSaveFileAction);
exports.BaseSaveFileAction = BaseSaveFileAction;
var SaveFileAction = (function (_super) {
    __extends(SaveFileAction, _super);
    function SaveFileAction() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SaveFileAction.prototype.isSaveAs = function () {
        return false;
    };
    return SaveFileAction;
}(BaseSaveFileAction));
SaveFileAction.ID = 'workbench.action.files.save';
SaveFileAction.LABEL = nls.localize('save', "Save");
exports.SaveFileAction = SaveFileAction;
var SaveFileAsAction = (function (_super) {
    __extends(SaveFileAsAction, _super);
    function SaveFileAsAction() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SaveFileAsAction.prototype.isSaveAs = function () {
        return true;
    };
    return SaveFileAsAction;
}(BaseSaveFileAction));
SaveFileAsAction.ID = 'workbench.action.files.saveAs';
SaveFileAsAction.LABEL = nls.localize('saveAs', "Save As...");
exports.SaveFileAsAction = SaveFileAsAction;
var BaseSaveAllAction = (function (_super) {
    __extends(BaseSaveAllAction, _super);
    function BaseSaveAllAction(id, label, editorService, editorGroupService, textFileService, untitledEditorService, messageService) {
        var _this = _super.call(this, id, label, messageService) || this;
        _this.editorService = editorService;
        _this.editorGroupService = editorGroupService;
        _this.textFileService = textFileService;
        _this.untitledEditorService = untitledEditorService;
        _this.toDispose = [];
        _this.lastIsDirty = _this.textFileService.isDirty();
        _this.enabled = _this.lastIsDirty;
        _this.registerListeners();
        return _this;
    }
    BaseSaveAllAction.prototype.registerListeners = function () {
        var _this = this;
        // listen to files being changed locally
        this.toDispose.push(this.textFileService.models.onModelsDirty(function (e) { return _this.updateEnablement(true); }));
        this.toDispose.push(this.textFileService.models.onModelsSaved(function (e) { return _this.updateEnablement(false); }));
        this.toDispose.push(this.textFileService.models.onModelsReverted(function (e) { return _this.updateEnablement(false); }));
        this.toDispose.push(this.textFileService.models.onModelsSaveError(function (e) { return _this.updateEnablement(true); }));
        if (this.includeUntitled()) {
            this.toDispose.push(this.untitledEditorService.onDidChangeDirty(function (resource) { return _this.updateEnablement(_this.untitledEditorService.isDirty(resource)); }));
        }
    };
    BaseSaveAllAction.prototype.updateEnablement = function (isDirty) {
        if (this.lastIsDirty !== isDirty) {
            this.enabled = this.textFileService.isDirty();
            this.lastIsDirty = this.enabled;
        }
    };
    BaseSaveAllAction.prototype.doRun = function (context) {
        var _this = this;
        var stacks = this.editorGroupService.getStacksModel();
        // Store some properties per untitled file to restore later after save is completed
        var mapUntitledToProperties = Object.create(null);
        this.textFileService.getDirty()
            .filter(function (r) { return r.scheme === 'untitled'; }) // All untitled resources
            .map(function (r) { return _this.untitledEditorService.get(r); }) // Mapped to their inputs
            .filter(function (input) { return !!input; }) // If possible :)
            .forEach(function (input) {
            mapUntitledToProperties[input.getResource().toString()] = {
                encoding: input.getEncoding(),
                indexInGroups: stacks.groups.map(function (g) { return g.indexOf(input); }),
                activeInGroups: stacks.groups.map(function (g) { return g.isActive(input); })
            };
        });
        // Save all
        return this.textFileService.saveAll(this.getSaveAllArguments(context)).then(function (results) {
            // Reopen saved untitled editors
            var untitledToReopen = [];
            results.results.forEach(function (result) {
                if (!result.success || result.source.scheme !== 'untitled') {
                    return;
                }
                var untitledProps = mapUntitledToProperties[result.source.toString()];
                if (!untitledProps) {
                    return;
                }
                // For each position where the untitled file was opened
                untitledProps.indexInGroups.forEach(function (indexInGroup, index) {
                    if (indexInGroup >= 0) {
                        untitledToReopen.push({
                            input: {
                                resource: result.target,
                                encoding: untitledProps.encoding,
                                options: {
                                    pinned: true,
                                    index: indexInGroup,
                                    preserveFocus: true,
                                    inactive: !untitledProps.activeInGroups[index]
                                }
                            },
                            position: index
                        });
                    }
                });
            });
            if (untitledToReopen.length) {
                return _this.editorService.openEditors(untitledToReopen).then(function () { return true; });
            }
            return undefined;
        });
    };
    BaseSaveAllAction.prototype.dispose = function () {
        this.toDispose = lifecycle_1.dispose(this.toDispose);
        _super.prototype.dispose.call(this);
    };
    return BaseSaveAllAction;
}(BaseActionWithErrorReporting));
BaseSaveAllAction = __decorate([
    __param(2, editorService_1.IWorkbenchEditorService),
    __param(3, groupService_1.IEditorGroupService),
    __param(4, textfiles_1.ITextFileService),
    __param(5, untitledEditorService_1.IUntitledEditorService),
    __param(6, message_1.IMessageService)
], BaseSaveAllAction);
exports.BaseSaveAllAction = BaseSaveAllAction;
var SaveAllAction = (function (_super) {
    __extends(SaveAllAction, _super);
    function SaveAllAction() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(SaveAllAction.prototype, "class", {
        get: function () {
            return 'explorer-action save-all';
        },
        enumerable: true,
        configurable: true
    });
    SaveAllAction.prototype.getSaveAllArguments = function () {
        return this.includeUntitled();
    };
    SaveAllAction.prototype.includeUntitled = function () {
        return true;
    };
    return SaveAllAction;
}(BaseSaveAllAction));
SaveAllAction.ID = 'workbench.action.files.saveAll';
SaveAllAction.LABEL = nls.localize('saveAll', "Save All");
exports.SaveAllAction = SaveAllAction;
var SaveAllInGroupAction = (function (_super) {
    __extends(SaveAllInGroupAction, _super);
    function SaveAllInGroupAction() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(SaveAllInGroupAction.prototype, "class", {
        get: function () {
            return 'explorer-action save-all';
        },
        enumerable: true,
        configurable: true
    });
    SaveAllInGroupAction.prototype.getSaveAllArguments = function (editorIdentifier) {
        if (!editorIdentifier) {
            return this.includeUntitled();
        }
        var editorGroup = editorIdentifier.group;
        var resourcesToSave = [];
        editorGroup.getEditors().forEach(function (editor) {
            var resource = editor_1.toResource(editor, { supportSideBySide: true, filter: ['file', 'untitled'] });
            if (resource) {
                resourcesToSave.push(resource);
            }
        });
        return resourcesToSave;
    };
    SaveAllInGroupAction.prototype.includeUntitled = function () {
        return true;
    };
    return SaveAllInGroupAction;
}(BaseSaveAllAction));
SaveAllInGroupAction.ID = 'workbench.files.action.saveAllInGroup';
SaveAllInGroupAction.LABEL = nls.localize('saveAllInGroup', "Save All in Group");
exports.SaveAllInGroupAction = SaveAllInGroupAction;
var SaveFilesAction = (function (_super) {
    __extends(SaveFilesAction, _super);
    function SaveFilesAction() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SaveFilesAction.prototype.getSaveAllArguments = function () {
        return this.includeUntitled();
    };
    SaveFilesAction.prototype.includeUntitled = function () {
        return false;
    };
    return SaveFilesAction;
}(BaseSaveAllAction));
SaveFilesAction.ID = 'workbench.action.files.saveFiles';
SaveFilesAction.LABEL = nls.localize('saveFiles', "Save Dirty Files");
exports.SaveFilesAction = SaveFilesAction;
var RevertFileAction = (function (_super) {
    __extends(RevertFileAction, _super);
    function RevertFileAction(id, label, editorService, textFileService) {
        var _this = _super.call(this, id, label) || this;
        _this.editorService = editorService;
        _this.textFileService = textFileService;
        _this.enabled = true;
        return _this;
    }
    RevertFileAction.prototype.setResource = function (resource) {
        this.resource = resource;
    };
    RevertFileAction.prototype.run = function () {
        var resource;
        if (this.resource) {
            resource = this.resource;
        }
        else {
            resource = editor_1.toResource(this.editorService.getActiveEditorInput(), { supportSideBySide: true, filter: 'file' });
        }
        if (resource && resource.scheme !== 'untitled') {
            return this.textFileService.revert(resource, true /* force */);
        }
        return winjs_base_1.TPromise.as(true);
    };
    return RevertFileAction;
}(actions_1.Action));
RevertFileAction.ID = 'workbench.action.files.revert';
RevertFileAction.LABEL = nls.localize('revert', "Revert File");
RevertFileAction = __decorate([
    __param(2, editorService_1.IWorkbenchEditorService),
    __param(3, textfiles_1.ITextFileService)
], RevertFileAction);
exports.RevertFileAction = RevertFileAction;
var FocusOpenEditorsView = (function (_super) {
    __extends(FocusOpenEditorsView, _super);
    function FocusOpenEditorsView(id, label, viewletService) {
        var _this = _super.call(this, id, label) || this;
        _this.viewletService = viewletService;
        return _this;
    }
    FocusOpenEditorsView.prototype.run = function () {
        return this.viewletService.openViewlet(files_1.VIEWLET_ID, true).then(function (viewlet) {
            var openEditorsView = viewlet.getOpenEditorsView();
            if (openEditorsView) {
                openEditorsView.expand();
                openEditorsView.getViewer().DOMFocus();
            }
        });
    };
    return FocusOpenEditorsView;
}(actions_1.Action));
FocusOpenEditorsView.ID = 'workbench.files.action.focusOpenEditorsView';
FocusOpenEditorsView.LABEL = nls.localize({ key: 'focusOpenEditors', comment: ['Open is an adjective'] }, "Focus on Open Editors View");
FocusOpenEditorsView = __decorate([
    __param(2, viewlet_2.IViewletService)
], FocusOpenEditorsView);
exports.FocusOpenEditorsView = FocusOpenEditorsView;
var FocusFilesExplorer = (function (_super) {
    __extends(FocusFilesExplorer, _super);
    function FocusFilesExplorer(id, label, viewletService) {
        var _this = _super.call(this, id, label) || this;
        _this.viewletService = viewletService;
        return _this;
    }
    FocusFilesExplorer.prototype.run = function () {
        return this.viewletService.openViewlet(files_1.VIEWLET_ID, true).then(function (viewlet) {
            var view = viewlet.getExplorerView();
            if (view) {
                view.expand();
                view.getViewer().DOMFocus();
            }
        });
    };
    return FocusFilesExplorer;
}(actions_1.Action));
FocusFilesExplorer.ID = 'workbench.files.action.focusFilesExplorer';
FocusFilesExplorer.LABEL = nls.localize('focusFilesExplorer', "Focus on Files Explorer");
FocusFilesExplorer = __decorate([
    __param(2, viewlet_2.IViewletService)
], FocusFilesExplorer);
exports.FocusFilesExplorer = FocusFilesExplorer;
var ShowActiveFileInExplorer = (function (_super) {
    __extends(ShowActiveFileInExplorer, _super);
    function ShowActiveFileInExplorer(id, label, editorService, instantiationService, messageService) {
        var _this = _super.call(this, id, label) || this;
        _this.editorService = editorService;
        _this.instantiationService = instantiationService;
        _this.messageService = messageService;
        return _this;
    }
    ShowActiveFileInExplorer.prototype.run = function () {
        var fileResource = editor_1.toResource(this.editorService.getActiveEditorInput(), { supportSideBySide: true, filter: 'file' });
        if (fileResource) {
            this.instantiationService.invokeFunction.apply(this.instantiationService, [fileCommands_1.revealInExplorerCommand, fileResource]);
        }
        else {
            this.messageService.show(severity_1.default.Info, nls.localize('openFileToShow', "Open a file first to show it in the explorer"));
        }
        return winjs_base_1.TPromise.as(true);
    };
    return ShowActiveFileInExplorer;
}(actions_1.Action));
ShowActiveFileInExplorer.ID = 'workbench.files.action.showActiveFileInExplorer';
ShowActiveFileInExplorer.LABEL = nls.localize('showInExplorer', "Reveal Active File in Side Bar");
ShowActiveFileInExplorer = __decorate([
    __param(2, editorService_1.IWorkbenchEditorService),
    __param(3, instantiation_1.IInstantiationService),
    __param(4, message_1.IMessageService)
], ShowActiveFileInExplorer);
exports.ShowActiveFileInExplorer = ShowActiveFileInExplorer;
var CollapseExplorerView = (function (_super) {
    __extends(CollapseExplorerView, _super);
    function CollapseExplorerView(id, label, viewletService) {
        var _this = _super.call(this, id, label) || this;
        _this.viewletService = viewletService;
        return _this;
    }
    CollapseExplorerView.prototype.run = function () {
        return this.viewletService.openViewlet(files_1.VIEWLET_ID, true).then(function (viewlet) {
            var explorerView = viewlet.getExplorerView();
            if (explorerView) {
                var viewer = explorerView.getViewer();
                if (viewer) {
                    var action = new viewlet_1.CollapseAction(viewer, true, null);
                    action.run().done();
                    action.dispose();
                }
            }
        });
    };
    return CollapseExplorerView;
}(actions_1.Action));
CollapseExplorerView.ID = 'workbench.files.action.collapseExplorerFolders';
CollapseExplorerView.LABEL = nls.localize('collapseExplorerFolders', "Collapse Folders in Explorer");
CollapseExplorerView = __decorate([
    __param(2, viewlet_2.IViewletService)
], CollapseExplorerView);
exports.CollapseExplorerView = CollapseExplorerView;
var RefreshExplorerView = (function (_super) {
    __extends(RefreshExplorerView, _super);
    function RefreshExplorerView(id, label, viewletService) {
        var _this = _super.call(this, id, label) || this;
        _this.viewletService = viewletService;
        return _this;
    }
    RefreshExplorerView.prototype.run = function () {
        return this.viewletService.openViewlet(files_1.VIEWLET_ID, true).then(function (viewlet) {
            var explorerView = viewlet.getExplorerView();
            if (explorerView) {
                explorerView.refresh();
            }
        });
    };
    return RefreshExplorerView;
}(actions_1.Action));
RefreshExplorerView.ID = 'workbench.files.action.refreshFilesExplorer';
RefreshExplorerView.LABEL = nls.localize('refreshExplorer', "Refresh Explorer");
RefreshExplorerView = __decorate([
    __param(2, viewlet_2.IViewletService)
], RefreshExplorerView);
exports.RefreshExplorerView = RefreshExplorerView;
var OpenFileAction = (function (_super) {
    __extends(OpenFileAction, _super);
    function OpenFileAction(id, label, editorService, windowService) {
        var _this = _super.call(this, id, label) || this;
        _this.editorService = editorService;
        _this.windowService = windowService;
        return _this;
    }
    OpenFileAction.prototype.run = function (event, data) {
        var fileResource = editor_1.toResource(this.editorService.getActiveEditorInput(), { supportSideBySide: true, filter: 'file' });
        return this.windowService.openFilePicker(false, fileResource ? paths.dirname(fileResource.fsPath) : void 0, data);
    };
    return OpenFileAction;
}(actions_1.Action));
OpenFileAction.ID = 'workbench.action.files.openFile';
OpenFileAction.LABEL = nls.localize('openFile', "Open File...");
OpenFileAction = __decorate([
    __param(2, editorService_1.IWorkbenchEditorService),
    __param(3, windows_1.IWindowService)
], OpenFileAction);
exports.OpenFileAction = OpenFileAction;
var ShowOpenedFileInNewWindow = (function (_super) {
    __extends(ShowOpenedFileInNewWindow, _super);
    function ShowOpenedFileInNewWindow(id, label, windowsService, editorService, messageService) {
        var _this = _super.call(this, id, label) || this;
        _this.windowsService = windowsService;
        _this.editorService = editorService;
        _this.messageService = messageService;
        return _this;
    }
    ShowOpenedFileInNewWindow.prototype.run = function () {
        var fileResource = editor_1.toResource(this.editorService.getActiveEditorInput(), { supportSideBySide: true, filter: 'file' });
        if (fileResource) {
            this.windowsService.openWindow([fileResource.fsPath], { forceNewWindow: true });
        }
        else {
            this.messageService.show(severity_1.default.Info, nls.localize('openFileToShowInNewWindow', "Open a file first to open in new window"));
        }
        return winjs_base_1.TPromise.as(true);
    };
    return ShowOpenedFileInNewWindow;
}(actions_1.Action));
ShowOpenedFileInNewWindow.ID = 'workbench.action.files.showOpenedFileInNewWindow';
ShowOpenedFileInNewWindow.LABEL = nls.localize('openFileInNewWindow', "Open Active File in New Window");
ShowOpenedFileInNewWindow = __decorate([
    __param(2, windows_1.IWindowsService),
    __param(3, editorService_1.IWorkbenchEditorService),
    __param(4, message_1.IMessageService)
], ShowOpenedFileInNewWindow);
exports.ShowOpenedFileInNewWindow = ShowOpenedFileInNewWindow;
var RevealInOSAction = (function (_super) {
    __extends(RevealInOSAction, _super);
    function RevealInOSAction(resource, instantiationService) {
        var _this = _super.call(this, 'revealFileInOS', RevealInOSAction.LABEL) || this;
        _this.resource = resource;
        _this.instantiationService = instantiationService;
        _this.order = 45;
        return _this;
    }
    RevealInOSAction.prototype.run = function () {
        this.instantiationService.invokeFunction.apply(this.instantiationService, [fileCommands_1.revealInOSCommand, this.resource]);
        return winjs_base_1.TPromise.as(true);
    };
    return RevealInOSAction;
}(actions_1.Action));
RevealInOSAction.LABEL = platform_1.isWindows ? nls.localize('revealInWindows', "Reveal in Explorer") : platform_1.isMacintosh ? nls.localize('revealInMac', "Reveal in Finder") : nls.localize('openContainer', "Open Containing Folder");
RevealInOSAction = __decorate([
    __param(1, instantiation_1.IInstantiationService)
], RevealInOSAction);
exports.RevealInOSAction = RevealInOSAction;
var GlobalRevealInOSAction = (function (_super) {
    __extends(GlobalRevealInOSAction, _super);
    function GlobalRevealInOSAction(id, label, editorService, instantiationService, messageService) {
        var _this = _super.call(this, id, label) || this;
        _this.editorService = editorService;
        _this.instantiationService = instantiationService;
        _this.messageService = messageService;
        return _this;
    }
    GlobalRevealInOSAction.prototype.run = function () {
        this.instantiationService.invokeFunction.apply(this.instantiationService, [fileCommands_1.revealInOSCommand]);
        return winjs_base_1.TPromise.as(true);
    };
    return GlobalRevealInOSAction;
}(actions_1.Action));
GlobalRevealInOSAction.ID = 'workbench.action.files.revealActiveFileInWindows';
GlobalRevealInOSAction.LABEL = platform_1.isWindows ? nls.localize('revealActiveFileInWindows', "Reveal Active File in Windows Explorer") : (platform_1.isMacintosh ? nls.localize('revealActiveFileInMac', "Reveal Active File in Finder") : nls.localize('openActiveFileContainer', "Open Containing Folder of Active File"));
GlobalRevealInOSAction = __decorate([
    __param(2, editorService_1.IWorkbenchEditorService),
    __param(3, instantiation_1.IInstantiationService),
    __param(4, message_1.IMessageService)
], GlobalRevealInOSAction);
exports.GlobalRevealInOSAction = GlobalRevealInOSAction;
var CopyPathAction = (function (_super) {
    __extends(CopyPathAction, _super);
    function CopyPathAction(resource, instantiationService) {
        var _this = _super.call(this, 'copyFilePath', CopyPathAction.LABEL) || this;
        _this.resource = resource;
        _this.instantiationService = instantiationService;
        _this.order = 140;
        return _this;
    }
    CopyPathAction.prototype.run = function () {
        this.instantiationService.invokeFunction.apply(this.instantiationService, [fileCommands_1.copyPathCommand, this.resource]);
        return winjs_base_1.TPromise.as(true);
    };
    return CopyPathAction;
}(actions_1.Action));
CopyPathAction.LABEL = nls.localize('copyPath', "Copy Path");
CopyPathAction = __decorate([
    __param(1, instantiation_1.IInstantiationService)
], CopyPathAction);
exports.CopyPathAction = CopyPathAction;
var GlobalCopyPathAction = (function (_super) {
    __extends(GlobalCopyPathAction, _super);
    function GlobalCopyPathAction(id, label, editorService, editorGroupService, messageService, instantiationService) {
        var _this = _super.call(this, id, label) || this;
        _this.editorService = editorService;
        _this.editorGroupService = editorGroupService;
        _this.messageService = messageService;
        _this.instantiationService = instantiationService;
        return _this;
    }
    GlobalCopyPathAction.prototype.run = function () {
        this.instantiationService.invokeFunction.apply(this.instantiationService, [fileCommands_1.copyPathCommand]);
        return winjs_base_1.TPromise.as(true);
    };
    return GlobalCopyPathAction;
}(actions_1.Action));
GlobalCopyPathAction.ID = 'workbench.action.files.copyPathOfActiveFile';
GlobalCopyPathAction.LABEL = nls.localize('copyPathOfActive', "Copy Path of Active File");
GlobalCopyPathAction = __decorate([
    __param(2, editorService_1.IWorkbenchEditorService),
    __param(3, groupService_1.IEditorGroupService),
    __param(4, message_1.IMessageService),
    __param(5, instantiation_1.IInstantiationService)
], GlobalCopyPathAction);
exports.GlobalCopyPathAction = GlobalCopyPathAction;
function keybindingForAction(id, keybindingService) {
    return keybindingService.lookupKeybinding(id);
}
exports.keybindingForAction = keybindingForAction;
function validateFileName(parent, name, allowOverwriting) {
    if (allowOverwriting === void 0) { allowOverwriting = false; }
    // Produce a well formed file name
    name = getWellFormedFileName(name);
    // Name not provided
    if (!name || name.length === 0 || /^\s+$/.test(name)) {
        return nls.localize('emptyFileNameError', "A file or folder name must be provided.");
    }
    // Do not allow to overwrite existing file
    if (!allowOverwriting) {
        if (parent.children && parent.children.some(function (c) {
            if (platform_1.isLinux) {
                return c.name === name;
            }
            return c.name.toLowerCase() === name.toLowerCase();
        })) {
            return nls.localize('fileNameExistsError', "A file or folder **{0}** already exists at this location. Please choose a different name.", name);
        }
    }
    // Invalid File name
    if (!paths.isValidBasename(name)) {
        return nls.localize('invalidFileNameError', "The name **{0}** is not valid as a file or folder name. Please choose a different name.", name);
    }
    // Max length restriction (on Windows)
    if (platform_1.isWindows) {
        var fullPathLength = name.length + parent.resource.fsPath.length + 1 /* path segment */;
        if (fullPathLength > 255) {
            return nls.localize('filePathTooLongError', "The name **{0}** results in a path that is too long. Please choose a shorter name.", name);
        }
    }
    return null;
}
exports.validateFileName = validateFileName;
function getWellFormedFileName(filename) {
    if (!filename) {
        return filename;
    }
    // Trim whitespaces
    filename = strings.trim(strings.trim(filename, ' '), '\t');
    // Remove trailing dots
    filename = strings.rtrim(filename, '.');
    return filename;
}
exports.getWellFormedFileName = getWellFormedFileName;
// Diagnostics support
var diag;
if (!diag) {
    diag = diagnostics.register('FileActionsDiagnostics', function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        console.log(args[1] + ' - ' + args[0] + ' (time: ' + args[2].getTime() + ' [' + args[2].toUTCString() + '])');
    });
}
