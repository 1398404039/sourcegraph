/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var winjs_base_1 = require("vs/base/common/winjs.base");
var nls = require("vs/nls");
var builder_1 = require("vs/base/browser/builder");
var types = require("vs/base/common/types");
var platform_1 = require("vs/platform/platform");
var quickOpen_1 = require("vs/base/parts/quickopen/common/quickOpen");
var quickOpenModel_1 = require("vs/base/parts/quickopen/browser/quickOpenModel");
var quickopen_1 = require("vs/workbench/browser/quickopen");
var quickOpenService_1 = require("vs/workbench/services/quickopen/common/quickOpenService");
exports.HELP_PREFIX = '?';
var HelpEntry = (function (_super) {
    __extends(HelpEntry, _super);
    function HelpEntry(prefix, description, quickOpenService, openOnPreview) {
        var _this = _super.call(this) || this;
        _this.prefix = prefix;
        _this.description = description;
        _this.quickOpenService = quickOpenService;
        _this.openOnPreview = openOnPreview;
        return _this;
    }
    HelpEntry.prototype.getLabel = function () {
        return this.prefix;
    };
    HelpEntry.prototype.getAriaLabel = function () {
        return nls.localize('entryAriaLabel', "{0}, picker help", this.getLabel());
    };
    HelpEntry.prototype.getDescription = function () {
        return this.description;
    };
    HelpEntry.prototype.getHeight = function () {
        return 40;
    };
    HelpEntry.prototype.getGroupLabel = function () {
        return this.groupLabel;
    };
    HelpEntry.prototype.setGroupLabel = function (groupLabel) {
        this.groupLabel = groupLabel;
    };
    HelpEntry.prototype.showBorder = function () {
        return this.useBorder;
    };
    HelpEntry.prototype.setShowBorder = function (showBorder) {
        this.useBorder = showBorder;
    };
    HelpEntry.prototype.render = function (tree, container, previousCleanupFn) {
        var _this = this;
        var builder = builder_1.$(container);
        builder.addClass('quick-open-entry');
        // Support border
        if (this.showBorder()) {
            builder_1.$(container).addClass('results-group-separator');
        }
        else {
            builder_1.$(container).removeClass('results-group-separator');
        }
        // Add a container for the group
        if (this.getGroupLabel()) {
            builder_1.$(container).div(function (div) {
                div.addClass('results-group');
                div.attr({
                    text: _this.getGroupLabel()
                });
            });
        }
        // Prefix
        var label = builder.clone().div({
            text: this.prefix,
            'class': 'quick-open-help-entry-label'
        });
        if (!this.prefix) {
            label.text('\u2026');
        }
        // Description
        builder.span({
            text: this.description,
            'class': 'quick-open-entry-description'
        });
        return null;
    };
    HelpEntry.prototype.run = function (mode, context) {
        if (mode === quickOpen_1.Mode.OPEN || this.openOnPreview) {
            this.quickOpenService.show(this.prefix);
        }
        return false;
    };
    return HelpEntry;
}(quickOpenModel_1.QuickOpenEntryItem));
var HelpHandler = (function (_super) {
    __extends(HelpHandler, _super);
    function HelpHandler(quickOpenService) {
        var _this = _super.call(this) || this;
        _this.quickOpenService = quickOpenService;
        return _this;
    }
    HelpHandler.prototype.getResults = function (searchValue) {
        var _this = this;
        searchValue = searchValue.trim();
        var registry = platform_1.Registry.as(quickopen_1.Extensions.Quickopen);
        var handlerDescriptors = registry.getQuickOpenHandlers();
        var defaultHandler = registry.getDefaultQuickOpenHandler();
        if (defaultHandler) {
            handlerDescriptors.push(defaultHandler);
        }
        var workbenchScoped = [];
        var editorScoped = [];
        var entry;
        handlerDescriptors.sort(function (h1, h2) { return h1.prefix.localeCompare(h2.prefix); }).forEach(function (handlerDescriptor) {
            if (handlerDescriptor.prefix !== exports.HELP_PREFIX) {
                // Descriptor has multiple help entries
                if (types.isArray(handlerDescriptor.helpEntries)) {
                    for (var j = 0; j < handlerDescriptor.helpEntries.length; j++) {
                        var helpEntry = handlerDescriptor.helpEntries[j];
                        if (helpEntry.prefix.indexOf(searchValue) === 0) {
                            entry = new HelpEntry(helpEntry.prefix, helpEntry.description, _this.quickOpenService, searchValue.length > 0);
                            if (helpEntry.needsEditor) {
                                editorScoped.push(entry);
                            }
                            else {
                                workbenchScoped.push(entry);
                            }
                        }
                    }
                }
                else if (handlerDescriptor.prefix.indexOf(searchValue) === 0) {
                    entry = new HelpEntry(handlerDescriptor.prefix, handlerDescriptor.description, _this.quickOpenService, searchValue.length > 0);
                    workbenchScoped.push(entry);
                }
            }
        });
        // Add separator for workbench scoped handlers
        if (workbenchScoped.length > 0) {
            workbenchScoped[0].setGroupLabel(nls.localize('globalCommands', "global commands"));
        }
        // Add separator for editor scoped handlers
        if (editorScoped.length > 0) {
            editorScoped[0].setGroupLabel(nls.localize('editorCommands', "editor commands"));
            if (workbenchScoped.length > 0) {
                editorScoped[0].setShowBorder(true);
            }
        }
        return winjs_base_1.TPromise.as(new quickOpenModel_1.QuickOpenModel(workbenchScoped.concat(editorScoped)));
    };
    HelpHandler.prototype.getAutoFocus = function (searchValue) {
        searchValue = searchValue.trim();
        return {
            autoFocusFirstEntry: searchValue.length > 0,
            autoFocusPrefixMatch: searchValue
        };
    };
    return HelpHandler;
}(quickopen_1.QuickOpenHandler));
HelpHandler = __decorate([
    __param(0, quickOpenService_1.IQuickOpenService)
], HelpHandler);
exports.HelpHandler = HelpHandler;
