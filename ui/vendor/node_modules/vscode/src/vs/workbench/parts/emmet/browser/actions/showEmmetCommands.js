/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var nls = require("vs/nls");
var actions_1 = require("vs/platform/actions/common/actions");
var platform_1 = require("vs/platform/platform");
var quickopen_1 = require("vs/workbench/browser/quickopen");
var actionRegistry_1 = require("vs/workbench/common/actionRegistry");
var quickOpenService_1 = require("vs/workbench/services/quickopen/common/quickOpenService");
var EMMET_COMMANDS_PREFIX = '>Emmet: ';
var ShowEmmetCommandsAction = (function (_super) {
    __extends(ShowEmmetCommandsAction, _super);
    function ShowEmmetCommandsAction(actionId, actionLabel, quickOpenService) {
        return _super.call(this, actionId, actionLabel, EMMET_COMMANDS_PREFIX, quickOpenService) || this;
    }
    return ShowEmmetCommandsAction;
}(quickopen_1.QuickOpenAction));
ShowEmmetCommandsAction.ID = 'workbench.action.showEmmetCommands';
ShowEmmetCommandsAction.LABEL = nls.localize('showEmmetCommands', "Show Emmet Commands");
ShowEmmetCommandsAction = __decorate([
    __param(2, quickOpenService_1.IQuickOpenService)
], ShowEmmetCommandsAction);
var registry = platform_1.Registry.as(actionRegistry_1.Extensions.WorkbenchActions);
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(ShowEmmetCommandsAction, ShowEmmetCommandsAction.ID, ShowEmmetCommandsAction.LABEL), 'Show Emmet Commands');
