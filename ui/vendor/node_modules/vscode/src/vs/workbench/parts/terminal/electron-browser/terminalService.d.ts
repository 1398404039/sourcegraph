import { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import { ILifecycleService } from 'vs/platform/lifecycle/common/lifecycle';
import { IPanelService } from 'vs/workbench/services/panel/common/panelService';
import { IPartService } from 'vs/workbench/services/part/common/partService';
import { IWindowIPCService } from 'vs/workbench/services/window/electron-browser/windowService';
import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
import { ITerminalInstance, ITerminalService, IShellLaunchConfig, ITerminalConfigHelper } from 'vs/workbench/parts/terminal/common/terminal';
import { TerminalService as AbstractTerminalService } from 'vs/workbench/parts/terminal/common/terminalService';
export declare class TerminalService extends AbstractTerminalService implements ITerminalService {
    private _instantiationService;
    private _windowService;
    private _configHelper;
    private _linkHandler;
    readonly configHelper: ITerminalConfigHelper;
    constructor(_contextKeyService: IContextKeyService, _configurationService: IConfigurationService, _panelService: IPanelService, _partService: IPartService, _lifecycleService: ILifecycleService, _instantiationService: IInstantiationService, _windowService: IWindowIPCService);
    createInstance(shell?: IShellLaunchConfig): ITerminalInstance;
    protected _showTerminalCloseConfirmation(): boolean;
    setContainers(panelContainer: HTMLElement, terminalContainer: HTMLElement): void;
}
