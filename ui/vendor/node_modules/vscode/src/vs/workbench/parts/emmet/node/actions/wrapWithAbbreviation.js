/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var nls = require("vs/nls");
var emmetActions_1 = require("vs/workbench/parts/emmet/node/emmetActions");
var editorCommonExtensions_1 = require("vs/editor/common/editorCommonExtensions");
var editorCommon_1 = require("vs/editor/common/editorCommon");
var quickOpen_1 = require("vs/platform/quickOpen/common/quickOpen");
var WrapWithAbbreviationAction = (function (_super) {
    __extends(WrapWithAbbreviationAction, _super);
    function WrapWithAbbreviationAction() {
        return _super.call(this, {
            id: 'editor.emmet.action.wrapWithAbbreviation',
            label: nls.localize('wrapWithAbbreviationAction', "Emmet: Wrap with Abbreviation"),
            alias: 'Emmet: Wrap with Abbreviation',
            precondition: editorCommon_1.EditorContextKeys.Writable
        }) || this;
    }
    WrapWithAbbreviationAction.prototype.runEmmetAction = function (accessor, ctx) {
        var _this = this;
        var quickOpenService = accessor.get(quickOpen_1.IQuickOpenService);
        var options = {
            prompt: nls.localize('enterAbbreviation', "Enter Abbreviation"),
            placeHolder: nls.localize('abbreviation', "Abbreviation")
        };
        quickOpenService.input(options).then(function (abbreviation) {
            _this.wrapAbbreviation(ctx, abbreviation);
        });
    };
    WrapWithAbbreviationAction.prototype.wrapAbbreviation = function (ctx, abbreviation) {
        if (abbreviation && !ctx.emmet.run('wrap_with_abbreviation', ctx.editorAccessor, abbreviation)) {
            this.noExpansionOccurred(ctx.editor);
        }
    };
    return WrapWithAbbreviationAction;
}(emmetActions_1.EmmetEditorAction));
WrapWithAbbreviationAction = __decorate([
    editorCommonExtensions_1.editorAction
], WrapWithAbbreviationAction);
