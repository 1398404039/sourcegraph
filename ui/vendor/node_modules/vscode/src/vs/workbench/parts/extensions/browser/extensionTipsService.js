/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var nls_1 = require("vs/nls");
var paths = require("vs/base/common/paths");
var winjs_base_1 = require("vs/base/common/winjs.base");
var collections_1 = require("vs/base/common/collections");
var lifecycle_1 = require("vs/base/common/lifecycle");
var glob_1 = require("vs/base/common/glob");
var json = require("vs/base/common/json");
var extensionManagement_1 = require("vs/platform/extensionManagement/common/extensionManagement");
var modelService_1 = require("vs/editor/common/services/modelService");
var storage_1 = require("vs/platform/storage/common/storage");
var product_1 = require("vs/platform/product");
var message_1 = require("vs/platform/message/common/message");
var instantiation_1 = require("vs/platform/instantiation/common/instantiation");
var extensionsActions_1 = require("vs/workbench/parts/extensions/browser/extensionsActions");
var severity_1 = require("vs/base/common/severity");
var workspace_1 = require("vs/platform/workspace/common/workspace");
var network_1 = require("vs/base/common/network");
var files_1 = require("vs/platform/files/common/files");
var ExtensionTipsService = (function () {
    function ExtensionTipsService(_galleryService, _modelService, storageService, choiceService, extensionsService, instantiationService, fileService, contextService) {
        this._galleryService = _galleryService;
        this._modelService = _modelService;
        this.storageService = storageService;
        this.choiceService = choiceService;
        this.extensionsService = extensionsService;
        this.instantiationService = instantiationService;
        this.fileService = fileService;
        this.contextService = contextService;
        this._recommendations = Object.create(null);
        this._availableRecommendations = Object.create(null);
        this._disposables = [];
        if (!this._galleryService.isEnabled()) {
            return;
        }
        this._suggestTips();
        this._suggestWorkspaceRecommendations();
    }
    ExtensionTipsService.prototype.getWorkspaceRecommendations = function () {
        if (!this.contextService.getWorkspace()) {
            return winjs_base_1.TPromise.as([]);
        }
        return this.fileService.resolveContent(this.contextService.toResource(paths.join('.vscode', 'extensions.json'))).then(function (content) {
            var extensionsContent = json.parse(content.value, []);
            if (extensionsContent.recommendations) {
                var regEx_1 = new RegExp(extensionManagement_1.EXTENSION_IDENTIFIER_PATTERN);
                return extensionsContent.recommendations.filter(function (element, position) {
                    return extensionsContent.recommendations.indexOf(element) === position && regEx_1.test(element);
                });
            }
            return [];
        }, function (err) { return []; });
    };
    ExtensionTipsService.prototype.getRecommendations = function () {
        return Object.keys(this._recommendations);
    };
    ExtensionTipsService.prototype.getKeymapRecommendations = function () {
        return product_1.default.keymapExtensionTips || [];
    };
    ExtensionTipsService.prototype._suggestTips = function () {
        var _this = this;
        var extensionTips = product_1.default.extensionTips;
        if (!extensionTips) {
            return;
        }
        this.importantRecommendations = product_1.default.extensionImportantTips || Object.create(null);
        this.importantRecommendationsIgnoreList = JSON.parse(this.storageService.get('extensionsAssistant/importantRecommendationsIgnore', storage_1.StorageScope.GLOBAL, '[]'));
        // retrieve ids of previous recommendations
        var storedRecommendations = JSON.parse(this.storageService.get('extensionsAssistant/recommendations', storage_1.StorageScope.GLOBAL, '[]'));
        for (var _i = 0, storedRecommendations_1 = storedRecommendations; _i < storedRecommendations_1.length; _i++) {
            var id = storedRecommendations_1[_i];
            this._recommendations[id] = true;
        }
        // group ids by pattern, like {**/*.md} -> [ext.foo1, ext.bar2]
        this._availableRecommendations = Object.create(null);
        collections_1.forEach(extensionTips, function (entry) {
            var id = entry.key, pattern = entry.value;
            var ids = _this._availableRecommendations[pattern];
            if (!ids) {
                _this._availableRecommendations[pattern] = [id];
            }
            else {
                ids.push(id);
            }
        });
        this._modelService.onModelAdded(this._suggest, this, this._disposables);
        this._modelService.getModels().forEach(function (model) { return _this._suggest(model); });
    };
    ExtensionTipsService.prototype._suggest = function (model) {
        var _this = this;
        var uri = model.uri;
        if (!uri) {
            return;
        }
        if (uri.scheme === network_1.Schemas.inMemory || uri.scheme === network_1.Schemas.internal || uri.scheme === network_1.Schemas.vscode) {
            return;
        }
        // re-schedule this bit of the operation to be off
        // the critical path - in case glob-match is slow
        setImmediate(function () {
            collections_1.forEach(_this._availableRecommendations, function (entry) {
                var pattern = entry.key, ids = entry.value;
                if (glob_1.match(pattern, uri.fsPath)) {
                    for (var _i = 0, ids_1 = ids; _i < ids_1.length; _i++) {
                        var id = ids_1[_i];
                        _this._recommendations[id] = true;
                    }
                }
            });
            _this.storageService.store('extensionsAssistant/recommendations', JSON.stringify(Object.keys(_this._recommendations)), storage_1.StorageScope.GLOBAL);
            _this.extensionsService.getInstalled(extensionManagement_1.LocalExtensionType.User).done(function (local) {
                Object.keys(_this.importantRecommendations)
                    .filter(function (id) { return _this.importantRecommendationsIgnoreList.indexOf(id) === -1; })
                    .filter(function (id) { return local.every(function (local) { return local.manifest.publisher + "." + local.manifest.name !== id; }); })
                    .forEach(function (id) {
                    var _a = _this.importantRecommendations[id], pattern = _a.pattern, name = _a.name;
                    if (!glob_1.match(pattern, uri.fsPath)) {
                        return;
                    }
                    var message = nls_1.localize('reallyRecommended', "It is recommended to install the '{0}' extension.", name);
                    var recommendationsAction = _this.instantiationService.createInstance(extensionsActions_1.ShowRecommendedExtensionsAction, extensionsActions_1.ShowRecommendedExtensionsAction.ID, nls_1.localize('showRecommendations', "Show Recommendations"));
                    var options = [
                        recommendationsAction.label,
                        nls_1.localize('neverShowAgain', "Don't show again"),
                        nls_1.localize('close', "Close")
                    ];
                    _this.choiceService.choose(severity_1.default.Info, message, options).done(function (choice) {
                        switch (choice) {
                            case 0: return recommendationsAction.run();
                            case 1:
                                _this.importantRecommendationsIgnoreList.push(id);
                                return _this.storageService.store('extensionsAssistant/importantRecommendationsIgnore', JSON.stringify(_this.importantRecommendationsIgnoreList), storage_1.StorageScope.GLOBAL);
                        }
                    });
                });
            });
        });
    };
    ExtensionTipsService.prototype._suggestWorkspaceRecommendations = function () {
        var _this = this;
        var storageKey = 'extensionsAssistant/workspaceRecommendationsIgnore';
        if (this.storageService.getBoolean(storageKey, storage_1.StorageScope.WORKSPACE, false)) {
            return;
        }
        this.getWorkspaceRecommendations().done(function (allRecommendations) {
            if (!allRecommendations.length) {
                return;
            }
            _this.extensionsService.getInstalled(extensionManagement_1.LocalExtensionType.User).done(function (local) {
                var recommendations = allRecommendations
                    .filter(function (id) { return local.every(function (local) { return local.manifest.publisher + "." + local.manifest.name !== id; }); });
                if (!recommendations.length) {
                    return;
                }
                var message = nls_1.localize('workspaceRecommended', "This workspace has extension recommendations.");
                var action = _this.instantiationService.createInstance(extensionsActions_1.ShowWorkspaceRecommendedExtensionsAction, extensionsActions_1.ShowWorkspaceRecommendedExtensionsAction.ID, nls_1.localize('showRecommendations', "Show Recommendations"));
                var options = [
                    action.label,
                    nls_1.localize('neverShowAgain', "Don't show again"),
                    nls_1.localize('close', "Close")
                ];
                _this.choiceService.choose(severity_1.default.Info, message, options).done(function (choice) {
                    switch (choice) {
                        case 0: return action.run();
                        case 1: return _this.storageService.store(storageKey, true, storage_1.StorageScope.WORKSPACE);
                    }
                });
            });
        });
    };
    ExtensionTipsService.prototype.dispose = function () {
        this._disposables = lifecycle_1.dispose(this._disposables);
    };
    return ExtensionTipsService;
}());
ExtensionTipsService = __decorate([
    __param(0, extensionManagement_1.IExtensionGalleryService),
    __param(1, modelService_1.IModelService),
    __param(2, storage_1.IStorageService),
    __param(3, message_1.IChoiceService),
    __param(4, extensionManagement_1.IExtensionManagementService),
    __param(5, instantiation_1.IInstantiationService),
    __param(6, files_1.IFileService),
    __param(7, workspace_1.IWorkspaceContextService)
], ExtensionTipsService);
exports.ExtensionTipsService = ExtensionTipsService;
