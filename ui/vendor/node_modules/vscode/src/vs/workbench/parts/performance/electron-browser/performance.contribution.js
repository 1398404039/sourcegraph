/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var nls_1 = require("vs/nls");
var objects_1 = require("vs/base/common/objects");
var path_1 = require("path");
var uuid_1 = require("vs/base/common/uuid");
var id_1 = require("vs/base/node/id");
var winjs_base_1 = require("vs/base/common/winjs.base");
var platform_1 = require("vs/platform/platform");
var pfs_1 = require("vs/base/node/pfs");
var windows_1 = require("vs/platform/windows/common/windows");
var environment_1 = require("vs/platform/environment/common/environment");
var storage_1 = require("vs/platform/storage/common/storage");
var extensions_1 = require("vs/platform/extensions/common/extensions");
var message_1 = require("vs/platform/message/common/message");
var timerService_1 = require("vs/workbench/services/timer/common/timerService");
var contributions_1 = require("vs/workbench/common/contributions");
var product_1 = require("vs/platform/node/product");
var PerformanceContribution = (function () {
    function PerformanceContribution(_windowsService, _timerService, _messageService, _envService, _storageService, extensionService) {
        var _this = this;
        this._windowsService = _windowsService;
        this._timerService = _timerService;
        this._messageService = _messageService;
        this._envService = _envService;
        this._storageService = _storageService;
        var dumpFile = _envService.args['prof-startup-timers'];
        if (dumpFile) {
            // wait for extensions being loaded
            extensionService.onReady()
                .then(function () { return winjs_base_1.TPromise.timeout(15000); }) // time service isn't ready yet because it listens on the same event...
                .then(function () { return _this._dumpTimersAndQuit(dumpFile); })
                .done(undefined, function (err) { return console.error(err); });
        }
        else if (!_envService.args['prof-startup']) {
            // notify user of slow start
            setTimeout(function () {
                _this._checkTimersAndSuggestToProfile();
            }, 5000);
        }
    }
    PerformanceContribution.prototype.getId = function () {
        return 'performance';
    };
    PerformanceContribution.prototype._dumpTimersAndQuit = function (folder) {
        var _this = this;
        var metrics = this._timerService.startupMetrics;
        var id = uuid_1.generateUuid();
        var all = objects_1.assign({ id: id, commit: product_1.default.commit }, metrics);
        var raw = JSON.stringify(all);
        return pfs_1.writeFile(path_1.join(folder, "timers-" + id + ".json"), raw).then(function () { return _this._windowsService.quit(); });
    };
    PerformanceContribution.prototype._checkTimersAndSuggestToProfile = function () {
        var disabled = true;
        if (disabled) {
            return;
        }
        //TODO(joh) use better heuristics (70th percentile, not vm, etc)
        var value = this._storageService.get(this.getId(), storage_1.StorageScope.GLOBAL, undefined);
        if (value !== undefined) {
            return;
        }
        if (id_1.virtualMachineHint.value() >= .5) {
            //
            return;
        }
        var ellapsed = this._timerService.startupMetrics.ellapsed;
        if (ellapsed > 5000 && Math.ceil(Math.random() * 10) % 3 === 0) {
            var profile = this._messageService.confirm({
                type: 'info',
                message: nls_1.localize('slow', "Slow startup detected"),
                detail: nls_1.localize('slow.detail', "Sorry that you just had a slow startup. Please restart '{0}' with profiling enabled, share the profiles with us, and we will work hard to make startup great again.", this._envService.appNameLong),
                primaryButton: 'Restart and profile'
            });
            if (profile) {
                this._storageService.store(this.getId(), 'didProfile', storage_1.StorageScope.GLOBAL);
                this._windowsService.relaunch({ addArgs: ['--prof-startup'] });
            }
            else {
                this._storageService.store(this.getId(), 'didReject', storage_1.StorageScope.GLOBAL);
            }
        }
    };
    return PerformanceContribution;
}());
PerformanceContribution = __decorate([
    __param(0, windows_1.IWindowsService),
    __param(1, timerService_1.ITimerService),
    __param(2, message_1.IMessageService),
    __param(3, environment_1.IEnvironmentService),
    __param(4, storage_1.IStorageService),
    __param(5, extensions_1.IExtensionService)
], PerformanceContribution);
var registry = platform_1.Registry.as(contributions_1.Extensions.Workbench);
registry.registerWorkbenchContribution(PerformanceContribution);
