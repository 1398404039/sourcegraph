/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var nls = require("vs/nls");
var winjs_base_1 = require("vs/base/common/winjs.base");
var DOM = require("vs/base/browser/dom");
var builder_1 = require("vs/base/browser/builder");
var workspace_1 = require("vs/platform/workspace/common/workspace");
var viewlet_1 = require("vs/workbench/browser/viewlet");
var message_1 = require("vs/platform/message/common/message");
var keybinding_1 = require("vs/platform/keybinding/common/keybinding");
var contextView_1 = require("vs/platform/contextview/browser/contextView");
var instantiation_1 = require("vs/platform/instantiation/common/instantiation");
var listService_1 = require("vs/platform/list/browser/listService");
var treeExplorerService_1 = require("vs/workbench/parts/explorers/common/treeExplorerService");
var treeImpl_1 = require("vs/base/parts/tree/browser/treeImpl");
var treeExplorerViewer_1 = require("vs/workbench/parts/explorers/browser/views/treeExplorerViewer");
var treeExplorerActions_1 = require("vs/workbench/parts/explorers/browser/treeExplorerActions");
var TreeExplorerView = (function (_super) {
    __extends(TreeExplorerView, _super);
    function TreeExplorerView(viewletState, treeNodeProviderId, actionRunner, headerSize, messageService, keybindingService, contextMenuService, contextService, instantiationService, treeExplorerService, listService) {
        var _this = _super.call(this, actionRunner, false, nls.localize('treeExplorerViewlet.tree', "Tree Explorer Section"), messageService, keybindingService, contextMenuService, headerSize) || this;
        _this.viewletState = viewletState;
        _this.treeNodeProviderId = treeNodeProviderId;
        _this.instantiationService = instantiationService;
        _this.treeExplorerService = treeExplorerService;
        _this.listService = listService;
        _this.create();
        return _this;
    }
    TreeExplorerView.prototype.renderBody = function (container) {
        this.treeContainer = _super.prototype.renderViewTree.call(this, container);
        DOM.addClass(this.treeContainer, 'tree-explorer-viewlet-tree-view');
        this.tree = this.createViewer(builder_1.$(this.treeContainer));
    };
    TreeExplorerView.prototype.createViewer = function (container) {
        var dataSource = this.instantiationService.createInstance(treeExplorerViewer_1.TreeDataSource, this.treeNodeProviderId);
        var renderer = this.instantiationService.createInstance(treeExplorerViewer_1.TreeRenderer, this.viewletState, this.actionRunner, container.getHTMLElement());
        var controller = this.instantiationService.createInstance(treeExplorerViewer_1.TreeController, this.treeNodeProviderId);
        var tree = new treeImpl_1.Tree(container.getHTMLElement(), {
            dataSource: dataSource,
            renderer: renderer,
            controller: controller
        }, {
            keyboardSupport: false
        });
        this.toDispose.push(this.listService.register(tree));
        return tree;
    };
    TreeExplorerView.prototype.getActions = function () {
        var refresh = this.instantiationService.createInstance(treeExplorerActions_1.RefreshViewExplorerAction, this);
        return [refresh];
    };
    TreeExplorerView.prototype.create = function () {
        return this.updateInput();
    };
    TreeExplorerView.prototype.setVisible = function (visible) {
        return _super.prototype.setVisible.call(this, visible);
    };
    TreeExplorerView.prototype.updateInput = function () {
        var _this = this;
        if (this.treeExplorerService.hasProvider(this.treeNodeProviderId)) {
            return this.treeExplorerService.provideRootNode(this.treeNodeProviderId).then(function (tree) {
                _this.tree.setInput(tree);
            });
        }
        else {
            this.treeExplorerService.onTreeExplorerNodeProviderRegistered(function (providerId) {
                if (_this.treeNodeProviderId === providerId) {
                    return _this.treeExplorerService.provideRootNode(_this.treeNodeProviderId).then(function (tree) {
                        _this.tree.setInput(tree);
                    });
                }
                return undefined;
            });
            return winjs_base_1.TPromise.as(null);
        }
    };
    TreeExplorerView.prototype.getOptimalWidth = function () {
        var parentNode = this.tree.getHTMLElement();
        var childNodes = [].slice.call(parentNode.querySelectorAll('.outline-item-label > a'));
        return DOM.getLargestChildWidth(parentNode, childNodes);
    };
    return TreeExplorerView;
}(viewlet_1.CollapsibleViewletView));
TreeExplorerView = __decorate([
    __param(4, message_1.IMessageService),
    __param(5, keybinding_1.IKeybindingService),
    __param(6, contextView_1.IContextMenuService),
    __param(7, workspace_1.IWorkspaceContextService),
    __param(8, instantiation_1.IInstantiationService),
    __param(9, treeExplorerService_1.ITreeExplorerService),
    __param(10, listService_1.IListService)
], TreeExplorerView);
exports.TreeExplorerView = TreeExplorerView;
