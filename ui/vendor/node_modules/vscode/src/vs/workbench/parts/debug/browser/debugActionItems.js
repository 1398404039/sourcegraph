/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var lifecycle = require("vs/base/common/lifecycle");
var errors = require("vs/base/common/errors");
var dom = require("vs/base/browser/dom");
var keyboardEvent_1 = require("vs/base/browser/keyboardEvent");
var selectBox_1 = require("vs/base/browser/ui/selectBox/selectBox");
var actionbar_1 = require("vs/base/browser/ui/actionbar/actionbar");
var eventEmitter_1 = require("vs/base/common/eventEmitter");
var configuration_1 = require("vs/platform/configuration/common/configuration");
var debug_1 = require("vs/workbench/parts/debug/common/debug");
var $ = dom.$;
var StartDebugActionItem = (function (_super) {
    __extends(StartDebugActionItem, _super);
    function StartDebugActionItem(context, action, debugService, configurationService) {
        var _this = _super.call(this) || this;
        _this.context = context;
        _this.action = action;
        _this.debugService = debugService;
        _this.configurationService = configurationService;
        _this.toDispose = [];
        _this.selectBox = new selectBox_1.SelectBox([], -1);
        _this.registerListeners();
        return _this;
    }
    StartDebugActionItem.prototype.registerListeners = function () {
        var _this = this;
        this.toDispose.push(this.configurationService.onDidUpdateConfiguration(function (e) {
            _this.updateOptions();
        }));
        this.toDispose.push(this.selectBox.onDidSelect(function (configurationName) {
            _this.debugService.getViewModel().setSelectedConfigurationName(configurationName);
        }));
    };
    StartDebugActionItem.prototype.render = function (container) {
        var _this = this;
        this.container = container;
        dom.addClass(container, 'start-debug-action-item');
        var icon = dom.append(container, $('.icon'));
        icon.title = this.action.label;
        icon.tabIndex = 0;
        this.toDispose.push(dom.addDisposableListener(icon, 'click', function () {
            icon.blur();
            _this.actionRunner.run(_this.action, _this.context).done(null, errors.onUnexpectedError);
        }));
        this.toDispose.push(dom.addDisposableListener(icon, 'keyup', function (e) {
            var event = new keyboardEvent_1.StandardKeyboardEvent(e);
            if (event.equals(3 /* Enter */)) {
                _this.actionRunner.run(_this.action, _this.context).done(null, errors.onUnexpectedError);
            }
        }));
        this.selectBox.render(dom.append(container, $('.configuration')));
        this.updateOptions();
    };
    StartDebugActionItem.prototype.setActionContext = function (context) {
        this.context = context;
    };
    StartDebugActionItem.prototype.isEnabled = function () {
        return this.debugService.state !== debug_1.State.Inactive;
    };
    StartDebugActionItem.prototype.focus = function () {
        this.container.focus();
    };
    StartDebugActionItem.prototype.blur = function () {
        this.container.blur();
    };
    StartDebugActionItem.prototype.dispose = function () {
        this.toDispose = lifecycle.dispose(this.toDispose);
    };
    StartDebugActionItem.prototype.updateOptions = function () {
        var config = this.configurationService.getConfiguration('launch');
        if (!config || !config.configurations || config.configurations.length === 0) {
            this.selectBox.setOptions([debug_1.NO_CONFIGURATIONS_LABEL], 0);
            this.selectBox.enabled = false;
        }
        else {
            var options = config.configurations.filter(function (cfg) { return typeof cfg.name === 'string'; }).map(function (cfg) { return cfg.name; });
            if (config.compounds) {
                options.push.apply(options, config.compounds.filter(function (compound) { return typeof compound.name === 'string' && compound.configurations && compound.configurations.length; })
                    .map(function (compound) { return compound.name; }));
            }
            var selected = options.indexOf(this.debugService.getViewModel().selectedConfigurationName);
            this.selectBox.setOptions(options, selected);
            this.selectBox.enabled = true;
        }
        this.debugService.getViewModel().setSelectedConfigurationName(this.selectBox.getSelected());
    };
    return StartDebugActionItem;
}(eventEmitter_1.EventEmitter));
StartDebugActionItem = __decorate([
    __param(2, debug_1.IDebugService),
    __param(3, configuration_1.IConfigurationService)
], StartDebugActionItem);
exports.StartDebugActionItem = StartDebugActionItem;
var FocusProcessActionItem = (function (_super) {
    __extends(FocusProcessActionItem, _super);
    function FocusProcessActionItem(action, debugService) {
        var _this = _super.call(this, null, action, [], -1) || this;
        _this.debugService = debugService;
        _this.debugService.getViewModel().onDidFocusProcess(function (p) {
            var names = _this.debugService.getModel().getProcesses().map(function (p) { return p.name; });
            _this.setOptions(names, p ? names.indexOf(p.name) : 0);
        });
        return _this;
    }
    return FocusProcessActionItem;
}(actionbar_1.SelectActionItem));
FocusProcessActionItem = __decorate([
    __param(1, debug_1.IDebugService)
], FocusProcessActionItem);
exports.FocusProcessActionItem = FocusProcessActionItem;
