/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var uri_1 = require("vs/base/common/uri");
var nls_1 = require("vs/nls");
var commands_1 = require("vs/platform/commands/common/commands");
var instantiation_1 = require("vs/platform/instantiation/common/instantiation");
var editorService_1 = require("vs/workbench/services/editor/common/editorService");
var htmlInput_1 = require("../common/htmlInput");
var htmlPreviewPart_1 = require("vs/workbench/parts/html/browser/htmlPreviewPart");
var platform_1 = require("vs/platform/platform");
var baseEditor_1 = require("vs/workbench/browser/parts/editor/baseEditor");
var editor_1 = require("vs/workbench/common/editor");
var descriptors_1 = require("vs/platform/instantiation/common/descriptors");
var groupService_1 = require("vs/workbench/services/group/common/groupService");
var editorCommon_1 = require("vs/editor/common/editorCommon");
var htmlEditorZone_1 = require("./htmlEditorZone");
var resolverService_1 = require("vs/editor/common/services/resolverService");
// --- Register Editor
platform_1.Registry.as(editor_1.Extensions.Editors).registerEditor(new baseEditor_1.EditorDescriptor(htmlPreviewPart_1.HtmlPreviewPart.ID, nls_1.localize('html.editor.label', "Html Preview"), 'vs/workbench/parts/html/browser/htmlPreviewPart', 'HtmlPreviewPart'), [new descriptors_1.SyncDescriptor(htmlInput_1.HtmlInput)]);
var warn = true;
commands_1.CommandsRegistry.registerCommand('_workbench.htmlZone', function (accessor, params) {
    if (warn) {
        console.warn("'_workbench.htmlZone' is an EXPERIMENTAL feature and therefore subject to CHANGE and REMOVAL without notice.");
        warn = false;
    }
    var codeEditor;
    for (var _i = 0, _a = accessor.get(editorService_1.IWorkbenchEditorService).getVisibleEditors(); _i < _a.length; _i++) {
        var editor = _a[_i];
        if (editor.position === params.editorPosition) {
            var control = editor.getControl();
            if (editorCommon_1.isCommonCodeEditor(control)) {
                codeEditor = control;
            }
        }
    }
    if (!codeEditor) {
        console.warn('NO matching editor found');
        return undefined;
    }
    var textModelResolverService = accessor.get(resolverService_1.ITextModelResolverService);
    return textModelResolverService.createModelReference(params.resource).then(function (ref) {
        var model = ref.object;
        var contents = model.textEditorModel.getValue();
        ref.dispose();
        htmlEditorZone_1.HtmlZoneController.getInstance(codeEditor).addZone(params.lineNumber, contents);
    });
});
commands_1.CommandsRegistry.registerCommand('_workbench.previewHtml', function (accessor, resource, position, label) {
    var uri = resource instanceof uri_1.default ? resource : uri_1.default.parse(resource);
    label = label || uri.fsPath;
    var input;
    // Find already opened HTML input if any
    var stacks = accessor.get(groupService_1.IEditorGroupService).getStacksModel();
    var targetGroup = stacks.groupAt(position) || stacks.activeGroup;
    if (targetGroup) {
        var existingInput = targetGroup.getEditor(uri);
        if (existingInput instanceof htmlInput_1.HtmlInput) {
            input = existingInput;
        }
    }
    // Otherwise, create new input and open it
    if (!input) {
        input = accessor.get(instantiation_1.IInstantiationService).createInstance(htmlInput_1.HtmlInput, label, '', uri);
    }
    else {
        input.setName(label); // make sure to use passed in label
    }
    return accessor.get(editorService_1.IWorkbenchEditorService)
        .openEditor(input, { pinned: true }, position)
        .then(function (editor) { return true; });
});
commands_1.CommandsRegistry.registerCommand('_workbench.htmlPreview.postMessage', function (accessor, resource, message) {
    var uri = resource instanceof uri_1.default ? resource : uri_1.default.parse(resource);
    var activePreviews = accessor.get(editorService_1.IWorkbenchEditorService).getVisibleEditors()
        .filter(function (c) { return c instanceof htmlPreviewPart_1.HtmlPreviewPart; })
        .map(function (e) { return e; })
        .filter(function (e) { return e.model.uri.scheme === uri.scheme && e.model.uri.fsPath === uri.fsPath; });
    for (var _i = 0, activePreviews_1 = activePreviews; _i < activePreviews_1.length; _i++) {
        var preview = activePreviews_1[_i];
        preview.sendMessage(message);
    }
    return activePreviews.length > 0;
});
