/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var nls_1 = require("vs/nls");
var actions_1 = require("vs/base/common/actions");
var platform_1 = require("vs/platform/platform");
var contributions_1 = require("vs/workbench/common/contributions");
var dirtydiffDecorator_1 = require("./dirtydiffDecorator");
var quickOpen_1 = require("vs/platform/quickOpen/common/quickOpen");
var viewlet_1 = require("vs/workbench/browser/viewlet");
var scm_1 = require("vs/workbench/parts/scm/common/scm");
var actionRegistry_1 = require("vs/workbench/common/actionRegistry");
var actions_2 = require("vs/platform/actions/common/actions");
var scm_2 = require("vs/workbench/services/scm/common/scm");
var viewlet_2 = require("vs/workbench/services/viewlet/browser/viewlet");
var editorService_1 = require("vs/workbench/services/editor/common/editorService");
var scmActivity_1 = require("./scmActivity");
var scmPreview_1 = require("../browser/scmPreview");
var OpenSCMViewletAction = (function (_super) {
    __extends(OpenSCMViewletAction, _super);
    function OpenSCMViewletAction(id, label, viewletService, editorService) {
        return _super.call(this, id, label, scm_1.VIEWLET_ID, viewletService, editorService) || this;
    }
    return OpenSCMViewletAction;
}(viewlet_1.ToggleViewletAction));
OpenSCMViewletAction.ID = scm_1.VIEWLET_ID;
OpenSCMViewletAction.LABEL = nls_1.localize('toggleGitViewlet', "Show Git");
OpenSCMViewletAction = __decorate([
    __param(2, viewlet_2.IViewletService), __param(3, editorService_1.IWorkbenchEditorService)
], OpenSCMViewletAction);
// TODO@Joao
var SwitchProvider = (function (_super) {
    __extends(SwitchProvider, _super);
    function SwitchProvider(id, label, scmService, quickOpenService) {
        if (id === void 0) { id = SwitchProvider.ID; }
        if (label === void 0) { label = SwitchProvider.LABEL; }
        var _this = _super.call(this, 'scm.switchprovider', 'Switch SCM Provider', '', true) || this;
        _this.scmService = scmService;
        _this.quickOpenService = quickOpenService;
        return _this;
    }
    SwitchProvider.prototype.run = function () {
        var _this = this;
        var picks = this.scmService.providers.map(function (provider) { return ({
            id: provider.id,
            label: provider.label,
            run: function () { return _this.scmService.activeProvider = provider; }
        }); });
        return this.quickOpenService.pick(picks);
    };
    return SwitchProvider;
}(actions_1.Action));
SwitchProvider.ID = 'scm.switch';
SwitchProvider.LABEL = 'Switch SCM Provider';
SwitchProvider = __decorate([
    __param(2, scm_2.ISCMService),
    __param(3, quickOpen_1.IQuickOpenService)
], SwitchProvider);
exports.SwitchProvider = SwitchProvider;
platform_1.Registry.as(contributions_1.Extensions.Workbench)
    .registerWorkbenchContribution(dirtydiffDecorator_1.DirtyDiffDecorator);
if (scmPreview_1.default.enabled) {
    var viewletDescriptor = new viewlet_1.ViewletDescriptor('vs/workbench/parts/scm/electron-browser/scmViewlet', 'SCMViewlet', scm_1.VIEWLET_ID, nls_1.localize('source control', "Source Control"), 'scm', 36);
    platform_1.Registry.as(viewlet_1.Extensions.Viewlets)
        .registerViewlet(viewletDescriptor);
    platform_1.Registry.as(contributions_1.Extensions.Workbench)
        .registerWorkbenchContribution(scmActivity_1.StatusUpdater);
    // Register Action to Open Viewlet
    platform_1.Registry.as(actionRegistry_1.Extensions.WorkbenchActions).registerWorkbenchAction(new actions_2.SyncActionDescriptor(OpenSCMViewletAction, scm_1.VIEWLET_ID, nls_1.localize('toggleSCMViewlet', "Show SCM"), {
        primary: null,
        win: { primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 37 /* KEY_G */ },
        linux: { primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 37 /* KEY_G */ },
        mac: { primary: 256 /* WinCtrl */ | 1024 /* Shift */ | 37 /* KEY_G */ }
    }), 'View: Show SCM', nls_1.localize('view', "View"));
    platform_1.Registry.as(actionRegistry_1.Extensions.WorkbenchActions)
        .registerWorkbenchAction(new actions_2.SyncActionDescriptor(SwitchProvider, SwitchProvider.ID, SwitchProvider.LABEL), 'SCM: Switch Provider', 'SCM');
    platform_1.Registry.as(actionRegistry_1.Extensions.WorkbenchActions)
        .registerWorkbenchAction(new actions_2.SyncActionDescriptor(scmPreview_1.DisableSCMPreviewAction, scmPreview_1.DisableSCMPreviewAction.ID, scmPreview_1.DisableSCMPreviewAction.LABEL), 'SCM: Disable Preview SCM', 'SCM');
}
else {
    platform_1.Registry.as(actionRegistry_1.Extensions.WorkbenchActions)
        .registerWorkbenchAction(new actions_2.SyncActionDescriptor(scmPreview_1.EnableSCMPreviewAction, scmPreview_1.EnableSCMPreviewAction.ID, scmPreview_1.EnableSCMPreviewAction.LABEL), 'SCM: Enable Preview SCM', 'SCM');
}
