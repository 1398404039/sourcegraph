/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var nls = require("vs/nls");
var emmetActions_1 = require("vs/workbench/parts/emmet/node/emmetActions");
var editorCommonExtensions_1 = require("vs/editor/common/editorCommonExtensions");
var PreviousEditPointAction = (function (_super) {
    __extends(PreviousEditPointAction, _super);
    function PreviousEditPointAction() {
        return _super.call(this, 'editor.emmet.action.previousEditPoint', nls.localize('previousEditPoint', "Emmet: Previous Edit Point"), 'Emmet: Previous Edit Point', 'prev_edit_point') || this;
    }
    return PreviousEditPointAction;
}(emmetActions_1.BasicEmmetEditorAction));
PreviousEditPointAction = __decorate([
    editorCommonExtensions_1.editorAction
], PreviousEditPointAction);
var NextEditPointAction = (function (_super) {
    __extends(NextEditPointAction, _super);
    function NextEditPointAction() {
        return _super.call(this, 'editor.emmet.action.nextEditPoint', nls.localize('nextEditPoint', "Emmet: Next Edit Point"), 'Emmet: Next Edit Point', 'next_edit_point') || this;
    }
    return NextEditPointAction;
}(emmetActions_1.BasicEmmetEditorAction));
NextEditPointAction = __decorate([
    editorCommonExtensions_1.editorAction
], NextEditPointAction);
