/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var winjs_base_1 = require("vs/base/common/winjs.base");
var strings = require("vs/base/common/strings");
var event_1 = require("vs/base/common/event");
var uri_1 = require("vs/base/common/uri");
var lifecycle_1 = require("vs/base/common/lifecycle");
var instantiation_1 = require("vs/platform/instantiation/common/instantiation");
var storage_1 = require("vs/platform/storage/common/storage");
var platform_1 = require("vs/platform/platform");
var editor_1 = require("vs/workbench/common/editor");
var output_1 = require("vs/workbench/parts/output/common/output");
var panelService_1 = require("vs/workbench/services/panel/common/panelService");
var modelService_1 = require("vs/editor/common/services/modelService");
var workspace_1 = require("vs/platform/workspace/common/workspace");
var outputLinkProvider_1 = require("vs/workbench/parts/output/common/outputLinkProvider");
var resolverService_1 = require("vs/editor/common/services/resolverService");
var modeService_1 = require("vs/editor/common/services/modeService");
var async_1 = require("vs/base/common/async");
var editOperation_1 = require("vs/editor/common/core/editOperation");
var position_1 = require("vs/editor/common/core/position");
var OUTPUT_ACTIVE_CHANNEL_KEY = 'output.activechannel';
var OutputService = (function () {
    function OutputService(storageService, instantiationService, panelService, contextService, modelService, textModelResolverService) {
        this.storageService = storageService;
        this.instantiationService = instantiationService;
        this.panelService = panelService;
        this._onOutput = new event_1.Emitter();
        this._onOutputChannel = new event_1.Emitter();
        this._onActiveOutputChannel = new event_1.Emitter();
        this.receivedOutput = new Map();
        var channels = this.getChannels();
        this.activeChannelId = this.storageService.get(OUTPUT_ACTIVE_CHANNEL_KEY, storage_1.StorageScope.WORKSPACE, channels && channels.length > 0 ? channels[0].id : null);
        this._outputLinkDetector = new outputLinkProvider_1.OutputLinkProvider(contextService, modelService);
        this._outputContentProvider = instantiationService.createInstance(OutputContentProvider, this);
        // Register as text model content provider for output
        textModelResolverService.registerTextModelContentProvider(output_1.OUTPUT_SCHEME, this._outputContentProvider);
    }
    Object.defineProperty(OutputService.prototype, "onOutput", {
        get: function () {
            return this._onOutput.event;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OutputService.prototype, "onOutputChannel", {
        get: function () {
            return this._onOutputChannel.event;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OutputService.prototype, "onActiveOutputChannel", {
        get: function () {
            return this._onActiveOutputChannel.event;
        },
        enumerable: true,
        configurable: true
    });
    OutputService.prototype.getChannel = function (id) {
        var _this = this;
        var channelData = this.getChannels().filter(function (channelData) { return channelData.id === id; }).pop();
        var self = this;
        return {
            id: id,
            label: channelData ? channelData.label : id,
            get output() {
                return self.getOutput(id);
            },
            get scrollLock() {
                return self._outputContentProvider.scrollLock(id);
            },
            set scrollLock(value) {
                self._outputContentProvider.setScrollLock(id, value);
            },
            append: function (output) { return _this.append(id, output); },
            show: function (preserveFocus) { return _this.showOutput(id, preserveFocus); },
            clear: function () { return _this.clearOutput(id); },
            dispose: function () { return _this.removeOutput(id); }
        };
    };
    OutputService.prototype.getChannels = function () {
        return platform_1.Registry.as(output_1.Extensions.OutputChannels).getChannels();
    };
    OutputService.prototype.append = function (channelId, output) {
        // Initialize
        if (!this.receivedOutput.has(channelId)) {
            this.receivedOutput.set(channelId, '');
            this._onOutputChannel.fire(channelId); // emit event that we have a new channel
        }
        // Sanitize
        output = strings.removeAnsiEscapeCodes(output);
        // Store
        if (output) {
            this.receivedOutput.set(channelId, strings.appendWithLimit(this.receivedOutput.get(channelId), output, output_1.MAX_OUTPUT_LENGTH));
        }
        this._onOutput.fire({ output: output, channelId: channelId });
    };
    OutputService.prototype.getActiveChannel = function () {
        return this.getChannel(this.activeChannelId);
    };
    OutputService.prototype.getOutput = function (channelId) {
        return this.receivedOutput.get(channelId) || '';
    };
    OutputService.prototype.clearOutput = function (channelId) {
        this.receivedOutput.set(channelId, '');
        this._onOutput.fire({ channelId: channelId, output: null /* indicator to clear output */ });
    };
    OutputService.prototype.removeOutput = function (channelId) {
        this.receivedOutput.delete(channelId);
        platform_1.Registry.as(output_1.Extensions.OutputChannels).removeChannel(channelId);
        if (this.activeChannelId === channelId) {
            var channels = this.getChannels();
            this.activeChannelId = channels.length ? channels[0].id : undefined;
            if (this._outputPanel && this.activeChannelId) {
                this._outputPanel.setInput(output_1.OutputEditors.getInstance(this.instantiationService, this.getChannel(this.activeChannelId)), editor_1.EditorOptions.create({ preserveFocus: true }));
            }
            this._onActiveOutputChannel.fire(this.activeChannelId);
        }
        this._onOutputChannel.fire(channelId);
    };
    OutputService.prototype.showOutput = function (channelId, preserveFocus) {
        var _this = this;
        var panel = this.panelService.getActivePanel();
        if (this.activeChannelId === channelId && panel && panel.getId() === output_1.OUTPUT_PANEL_ID) {
            return winjs_base_1.TPromise.as(panel);
        }
        this.activeChannelId = channelId;
        this.storageService.store(OUTPUT_ACTIVE_CHANNEL_KEY, this.activeChannelId, storage_1.StorageScope.WORKSPACE);
        this._onActiveOutputChannel.fire(channelId); // emit event that a new channel is active
        return this.panelService.openPanel(output_1.OUTPUT_PANEL_ID, !preserveFocus).then(function (outputPanel) {
            _this._outputPanel = outputPanel;
            return outputPanel && outputPanel.setInput(output_1.OutputEditors.getInstance(_this.instantiationService, _this.getChannel(_this.activeChannelId)), editor_1.EditorOptions.create({ preserveFocus: preserveFocus })).
                then(function () { return outputPanel; });
        });
    };
    return OutputService;
}());
OutputService = __decorate([
    __param(0, storage_1.IStorageService),
    __param(1, instantiation_1.IInstantiationService),
    __param(2, panelService_1.IPanelService),
    __param(3, workspace_1.IWorkspaceContextService),
    __param(4, modelService_1.IModelService),
    __param(5, resolverService_1.ITextModelResolverService)
], OutputService);
exports.OutputService = OutputService;
var OutputContentProvider = (function () {
    function OutputContentProvider(outputService, modelService, modeService, panelService) {
        this.outputService = outputService;
        this.modelService = modelService;
        this.modeService = modeService;
        this.panelService = panelService;
        this.channelIdsWithScrollLock = new Set();
        this.bufferedOutput = Object.create(null);
        this.appendOutputScheduler = Object.create(null);
        this.toDispose = [];
        this.registerListeners();
    }
    OutputContentProvider.prototype.registerListeners = function () {
        var _this = this;
        this.toDispose.push(this.outputService.onOutput(function (e) { return _this.onOutputReceived(e); }));
        this.toDispose.push(this.outputService.onActiveOutputChannel(function (channel) { return _this.scheduleOutputAppend(channel); }));
        this.toDispose.push(this.panelService.onDidPanelOpen(function (panel) {
            if (panel.getId() === output_1.OUTPUT_PANEL_ID) {
                _this.appendOutput();
            }
        }));
    };
    OutputContentProvider.prototype.onOutputReceived = function (e) {
        var model = this.getModel(e.channelId);
        if (!model) {
            return; // only react if we have a known model
        }
        // Append to model
        if (e.output) {
            this.bufferedOutput[e.channelId] = strings.appendWithLimit(this.bufferedOutput[e.channelId] || '', e.output, output_1.MAX_OUTPUT_LENGTH);
            this.scheduleOutputAppend(e.channelId);
        }
        else if (e.output === null) {
            this.bufferedOutput[e.channelId] = '';
            model.setValue('');
        }
    };
    OutputContentProvider.prototype.getModel = function (channel) {
        return this.modelService.getModel(uri_1.default.from({ scheme: output_1.OUTPUT_SCHEME, path: channel }));
    };
    OutputContentProvider.prototype.scheduleOutputAppend = function (channel) {
        var _this = this;
        if (!this.isVisible(channel)) {
            return; // only if the output channel is visible
        }
        if (!this.bufferedOutput[channel]) {
            return; // only if we have any output to show
        }
        var scheduler = this.appendOutputScheduler[channel];
        if (!scheduler) {
            scheduler = new async_1.RunOnceScheduler(function () {
                if (_this.isVisible(channel)) {
                    _this.appendOutput(channel);
                }
            }, OutputContentProvider.OUTPUT_DELAY);
            this.appendOutputScheduler[channel] = scheduler;
            this.toDispose.push(scheduler);
        }
        if (scheduler.isScheduled()) {
            return; // only if not already scheduled
        }
        scheduler.schedule();
    };
    OutputContentProvider.prototype.appendOutput = function (channel) {
        if (!channel) {
            var activeChannel = this.outputService.getActiveChannel();
            channel = activeChannel && activeChannel.id;
        }
        if (!channel) {
            return; // return if we do not have a valid channel to append to
        }
        var model = this.getModel(channel);
        if (!model) {
            return; // only react if we have a known model
        }
        var bufferedOutput = this.bufferedOutput[channel];
        this.bufferedOutput[channel] = '';
        if (!bufferedOutput) {
            return; // return if nothing to append
        }
        // just fill in the full (trimmed) output if we exceed max length
        if (model.getValueLength() + bufferedOutput.length > output_1.MAX_OUTPUT_LENGTH) {
            model.setValue(this.outputService.getChannel(channel).output);
        }
        else {
            var lastLine = model.getLineCount();
            var lastLineMaxColumn = model.getLineMaxColumn(lastLine);
            model.applyEdits([editOperation_1.EditOperation.insert(new position_1.Position(lastLine, lastLineMaxColumn), bufferedOutput)]);
        }
        if (!this.channelIdsWithScrollLock.has(channel)) {
            // reveal last line
            var panel = this.panelService.getActivePanel();
            panel.revealLastLine();
        }
    };
    OutputContentProvider.prototype.isVisible = function (channel) {
        var panel = this.panelService.getActivePanel();
        return panel && panel.getId() === output_1.OUTPUT_PANEL_ID && this.outputService.getActiveChannel().id === channel;
    };
    OutputContentProvider.prototype.scrollLock = function (channelId) {
        return this.channelIdsWithScrollLock.has(channelId);
    };
    OutputContentProvider.prototype.setScrollLock = function (channelId, value) {
        if (value) {
            this.channelIdsWithScrollLock.add(channelId);
        }
        else {
            this.channelIdsWithScrollLock.delete(channelId);
        }
    };
    OutputContentProvider.prototype.provideTextContent = function (resource) {
        var content = this.outputService.getChannel(resource.fsPath).output;
        var codeEditorModel = this.modelService.getModel(resource);
        if (!codeEditorModel) {
            codeEditorModel = this.modelService.createModel(content, this.modeService.getOrCreateMode(output_1.OUTPUT_MIME), resource);
        }
        return winjs_base_1.TPromise.as(codeEditorModel);
    };
    OutputContentProvider.prototype.dispose = function () {
        this.toDispose = lifecycle_1.dispose(this.toDispose);
    };
    return OutputContentProvider;
}());
OutputContentProvider.OUTPUT_DELAY = 300;
OutputContentProvider = __decorate([
    __param(1, modelService_1.IModelService),
    __param(2, modeService_1.IModeService),
    __param(3, panelService_1.IPanelService)
], OutputContentProvider);
