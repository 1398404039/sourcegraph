/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var nls = require("vs/nls");
var platform = require("vs/base/common/platform");
var product_1 = require("vs/platform/node/product");
var contextkey_1 = require("vs/platform/contextkey/common/contextkey");
var instantiation_1 = require("vs/platform/instantiation/common/instantiation");
var lifecycle_1 = require("vs/platform/lifecycle/common/lifecycle");
var panelService_1 = require("vs/workbench/services/panel/common/panelService");
var partService_1 = require("vs/workbench/services/part/common/partService");
var windowService_1 = require("vs/workbench/services/window/electron-browser/windowService");
var configuration_1 = require("vs/platform/configuration/common/configuration");
var terminalService_1 = require("vs/workbench/parts/terminal/common/terminalService");
var terminalConfigHelper_1 = require("vs/workbench/parts/terminal/electron-browser/terminalConfigHelper");
var terminalInstance_1 = require("vs/workbench/parts/terminal/electron-browser/terminalInstance");
var terminalLinkHandler_1 = require("vs/workbench/parts/terminal/electron-browser/terminalLinkHandler");
var TerminalService = (function (_super) {
    __extends(TerminalService, _super);
    function TerminalService(_contextKeyService, _configurationService, _panelService, _partService, _lifecycleService, _instantiationService, _windowService) {
        var _this = _super.call(this, _contextKeyService, _configurationService, _panelService, _partService, _lifecycleService) || this;
        _this._instantiationService = _instantiationService;
        _this._windowService = _windowService;
        _this._configHelper = _this._instantiationService.createInstance(terminalConfigHelper_1.TerminalConfigHelper, platform.platform);
        _this._linkHandler = _this._instantiationService.createInstance(terminalLinkHandler_1.TerminalLinkHandler, platform.platform);
        return _this;
    }
    Object.defineProperty(TerminalService.prototype, "configHelper", {
        get: function () { return this._configHelper; },
        enumerable: true,
        configurable: true
    });
    ;
    TerminalService.prototype.createInstance = function (shell) {
        if (shell === void 0) { shell = {}; }
        var terminalInstance = this._instantiationService.createInstance(terminalInstance_1.TerminalInstance, this._terminalFocusContextKey, this._configHelper, this._linkHandler, this._terminalContainer, shell);
        terminalInstance.addDisposable(terminalInstance.onTitleChanged(this._onInstanceTitleChanged.fire, this._onInstanceTitleChanged));
        terminalInstance.addDisposable(terminalInstance.onDisposed(this._onInstanceDisposed.fire, this._onInstanceDisposed));
        terminalInstance.addDisposable(terminalInstance.onProcessIdReady(this._onInstanceProcessIdReady.fire, this._onInstanceProcessIdReady));
        this.terminalInstances.push(terminalInstance);
        if (this.terminalInstances.length === 1) {
            // It's the first instance so it should be made active automatically
            this.setActiveInstanceByIndex(0);
        }
        this._onInstancesChanged.fire();
        return terminalInstance;
    };
    TerminalService.prototype._showTerminalCloseConfirmation = function () {
        var cancelId = 1;
        var message;
        if (this.terminalInstances.length === 1) {
            message = nls.localize('terminalService.terminalCloseConfirmationSingular', "There is an active terminal session, do you want to kill it?");
        }
        else {
            message = nls.localize('terminalService.terminalCloseConfirmationPlural', "There are {0} active terminal sessions, do you want to kill them?", this.terminalInstances.length);
        }
        var opts = {
            title: product_1.default.nameLong,
            message: message,
            type: 'warning',
            buttons: [nls.localize('yes', "Yes"), nls.localize('cancel', "Cancel")],
            noLink: true,
            cancelId: cancelId
        };
        return this._windowService.getWindow().showMessageBox(opts) === cancelId;
    };
    TerminalService.prototype.setContainers = function (panelContainer, terminalContainer) {
        var _this = this;
        this._configHelper.panelContainer = panelContainer;
        this._terminalContainer = terminalContainer;
        this._terminalInstances.forEach(function (terminalInstance) {
            terminalInstance.attachToElement(_this._terminalContainer);
        });
    };
    return TerminalService;
}(terminalService_1.TerminalService));
TerminalService = __decorate([
    __param(0, contextkey_1.IContextKeyService),
    __param(1, configuration_1.IConfigurationService),
    __param(2, panelService_1.IPanelService),
    __param(3, partService_1.IPartService),
    __param(4, lifecycle_1.ILifecycleService),
    __param(5, instantiation_1.IInstantiationService),
    __param(6, windowService_1.IWindowIPCService)
], TerminalService);
exports.TerminalService = TerminalService;
