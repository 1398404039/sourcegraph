/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var winjs_base_1 = require("vs/base/common/winjs.base");
var uri_1 = require("vs/base/common/uri");
var resolverService_1 = require("vs/editor/common/services/resolverService");
var modelService_1 = require("vs/editor/common/services/modelService");
var textfiles_1 = require("vs/workbench/services/textfile/common/textfiles");
var modeService_1 = require("vs/editor/common/services/modeService");
var marked_1 = require("vs/base/common/marked/marked");
var network_1 = require("vs/base/common/network");
var DynamicContentContentProvider = (function () {
    function DynamicContentContentProvider(textModelResolverService, textFileService, modeService, modelService) {
        this.textModelResolverService = textModelResolverService;
        this.textFileService = textFileService;
        this.modeService = modeService;
        this.modelService = modelService;
        this.textModelResolverService.registerTextModelContentProvider(network_1.Schemas.dynamicContent, this);
    }
    DynamicContentContentProvider.prototype.provideTextContent = function (resource) {
        var _this = this;
        var query = resource.query ? JSON.parse(resource.query) : {};
        var content = (query.moduleId ? new winjs_base_1.TPromise(function (resolve, reject) {
            require([query.moduleId], function (content) {
                try {
                    resolve(content.default());
                }
                catch (err) {
                    reject(err);
                }
            });
        }) : this.textFileService.resolveTextContent(uri_1.default.file(resource.fsPath)).then(function (content) { return content.value; }));
        return content.then(function (content) {
            var codeEditorModel = _this.modelService.getModel(resource);
            if (!codeEditorModel) {
                codeEditorModel = _this.modelService.createModel(content, _this.modeService.getOrCreateModeByFilenameOrFirstLine(resource.fsPath), resource);
            }
            else {
                _this.modelService.updateModel(codeEditorModel, content);
            }
            return codeEditorModel;
        });
    };
    DynamicContentContentProvider.prototype.getId = function () {
        return 'vs.dynamicContentContentProvider';
    };
    return DynamicContentContentProvider;
}());
DynamicContentContentProvider = __decorate([
    __param(0, resolverService_1.ITextModelResolverService),
    __param(1, textfiles_1.ITextFileService),
    __param(2, modeService_1.IModeService),
    __param(3, modelService_1.IModelService)
], DynamicContentContentProvider);
exports.DynamicContentContentProvider = DynamicContentContentProvider;
var DynamicContentSnippetContentProvider = (function () {
    function DynamicContentSnippetContentProvider(textModelResolverService, textFileService, modeService, modelService) {
        this.textModelResolverService = textModelResolverService;
        this.textFileService = textFileService;
        this.modeService = modeService;
        this.modelService = modelService;
        this.textModelResolverService.registerTextModelContentProvider(network_1.Schemas.dynamicContentSnippet, this);
    }
    DynamicContentSnippetContentProvider.prototype.provideTextContent = function (resource) {
        var _this = this;
        return this.textFileService.resolveTextContent(uri_1.default.file(resource.fsPath)).then(function (content) {
            var codeEditorModel = _this.modelService.getModel(resource);
            if (!codeEditorModel) {
                var j_1 = parseInt(resource.fragment);
                var codeSnippet_1 = '';
                var languageName_1 = '';
                var i_1 = 0;
                var renderer = new marked_1.marked.Renderer();
                renderer.code = function (code, lang) {
                    if (i_1++ === j_1) {
                        codeSnippet_1 = code;
                        languageName_1 = lang;
                    }
                    return '';
                };
                var markdown = content.value.lines.join('\n');
                marked_1.marked(markdown, { renderer: renderer });
                var modeId = _this.modeService.getModeIdForLanguageName(languageName_1);
                var mode = _this.modeService.getOrCreateMode(modeId);
                codeEditorModel = _this.modelService.createModel(codeSnippet_1, mode, resource);
            }
            else {
                _this.modelService.updateModel(codeEditorModel, content.value);
            }
            return codeEditorModel;
        });
    };
    DynamicContentSnippetContentProvider.prototype.getId = function () {
        return 'vs.walkThroughSnippetContentProvider';
    };
    return DynamicContentSnippetContentProvider;
}());
DynamicContentSnippetContentProvider = __decorate([
    __param(0, resolverService_1.ITextModelResolverService),
    __param(1, textfiles_1.ITextFileService),
    __param(2, modeService_1.IModeService),
    __param(3, modelService_1.IModelService)
], DynamicContentSnippetContentProvider);
exports.DynamicContentSnippetContentProvider = DynamicContentSnippetContentProvider;
