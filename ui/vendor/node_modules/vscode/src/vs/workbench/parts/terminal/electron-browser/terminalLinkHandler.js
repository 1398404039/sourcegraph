/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var path = require("path");
var pfs = require("vs/base/node/pfs");
var uri_1 = require("vs/base/common/uri");
var editorService_1 = require("vs/workbench/services/editor/common/editorService");
var workspace_1 = require("vs/platform/workspace/common/workspace");
var platform_1 = require("vs/base/common/platform");
var winjs_base_1 = require("vs/base/common/winjs.base");
var pathPrefix = '(\\.\\.?|\\~)';
var pathSeparatorClause = '\\/';
var excludedPathCharactersClause = '[^\\0\\s!$`&*()\\[\\]+\'":;]'; // '":; are allowed in paths but they are often separators so ignore them
var escapedExcludedPathCharactersClause = '(\\\\s|\\\\!|\\\\$|\\\\`|\\\\&|\\\\*|(|)|\\+)';
/** A regex that matches paths in the form /path, ~/path, ./path, ../path */
var UNIX_LIKE_LOCAL_LINK_REGEX = new RegExp('(' + pathPrefix + '?(' + pathSeparatorClause + '(' + excludedPathCharactersClause + '|' + escapedExcludedPathCharactersClause + ')+)+)');
var winPathPrefix = '([a-zA-Z]:|\\.\\.?|\\~)';
var winPathSeparatorClause = '(\\\\|\\/)';
var winExcludedPathCharactersClause = '[^\\0<>\\?\\|\\/\\s!$`&*()\\[\\]+\'":;]';
/** A regex that matches paths in the form c:\path, ~\path, .\path */
var WINDOWS_LOCAL_LINK_REGEX = new RegExp('(' + winPathPrefix + '?(' + winPathSeparatorClause + '(' + winExcludedPathCharactersClause + ')+)+)');
/** Higher than local link, lower than hypertext */
var CUSTOM_LINK_PRIORITY = -1;
/** Lowest */
var LOCAL_LINK_PRIORITY = -2;
var TerminalLinkHandler = (function () {
    function TerminalLinkHandler(_platform, _editorService, _contextService) {
        this._platform = _platform;
        this._editorService = _editorService;
        this._contextService = _contextService;
    }
    TerminalLinkHandler.prototype.initialize = function (xterm) {
        xterm.attachHypertextLinkHandler(this._wrapLinkHandler(function () { return true; }));
    };
    TerminalLinkHandler.prototype.registerCustomLinkHandler = function (xterm, regex, handler, matchIndex, validationCallback) {
        return xterm.registerLinkMatcher(regex, this._wrapLinkHandler(handler), {
            matchIndex: matchIndex,
            validationCallback: validationCallback,
            priority: CUSTOM_LINK_PRIORITY
        });
    };
    TerminalLinkHandler.prototype.registerLocalLinkHandler = function (xterm) {
        var _this = this;
        var wrappedHandler = this._wrapLinkHandler(function (url) {
            _this._handleLocalLink(url);
            return;
        });
        return xterm.registerLinkMatcher(this._localLinkRegex, wrappedHandler, {
            matchIndex: 1,
            validationCallback: function (link, callback) { return _this._validateLocalLink(link, callback); },
            priority: LOCAL_LINK_PRIORITY
        });
    };
    TerminalLinkHandler.prototype._wrapLinkHandler = function (handler) {
        var _this = this;
        return function (event, uri) {
            // Require ctrl/cmd on click
            if (_this._platform === platform_1.Platform.Mac ? !event.metaKey : !event.ctrlKey) {
                // TODO: Show hint on fail
                event.preventDefault();
                return false;
            }
            return handler(uri);
        };
    };
    Object.defineProperty(TerminalLinkHandler.prototype, "_localLinkRegex", {
        get: function () {
            if (this._platform === platform_1.Platform.Windows) {
                return WINDOWS_LOCAL_LINK_REGEX;
            }
            return UNIX_LIKE_LOCAL_LINK_REGEX;
        },
        enumerable: true,
        configurable: true
    });
    TerminalLinkHandler.prototype._handleLocalLink = function (link) {
        var _this = this;
        return this._resolvePath(link).then(function (resolvedLink) {
            if (!resolvedLink) {
                return void 0;
            }
            var resource = uri_1.default.file(path.normalize(path.resolve(resolvedLink)));
            return _this._editorService.openEditor({ resource: resource }).then(function () { return void 0; });
        });
    };
    TerminalLinkHandler.prototype._validateLocalLink = function (link, callback) {
        this._resolvePath(link).then(function (resolvedLink) {
            callback(!!resolvedLink);
        });
    };
    TerminalLinkHandler.prototype._resolvePath = function (link) {
        if (this._platform === platform_1.Platform.Windows) {
            // Resolve ~ -> %HOMEDRIVE%\%HOMEPATH%
            if (link.charAt(0) === '~') {
                if (!process.env.HOMEDRIVE || !process.env.HOMEPATH) {
                    return winjs_base_1.TPromise.as(void 0);
                }
                link = process.env.HOMEDRIVE + "\\" + (process.env.HOMEPATH + link.substring(1));
            }
        }
        else {
            // Resolve workspace path . / .. -> <path>/. / <path/..
            if (link.charAt(0) === '.') {
                if (!this._contextService.hasWorkspace) {
                    // Abort if no workspace is open
                    return winjs_base_1.TPromise.as(void 0);
                }
                link = path.join(this._contextService.getWorkspace().resource.fsPath, link);
            }
        }
        // Resolve workspace path . / .. -> <path>/. / <path/..
        if (link.charAt(0) === '.') {
            if (!this._contextService.hasWorkspace) {
                // Abort if no workspace is open
                return winjs_base_1.TPromise.as(void 0);
            }
            link = path.join(this._contextService.getWorkspace().resource.fsPath, link);
        }
        // Open an editor if the path exists
        return pfs.fileExists(link).then(function (isFile) {
            if (!isFile) {
                return null;
            }
            return link;
        });
    };
    return TerminalLinkHandler;
}());
TerminalLinkHandler = __decorate([
    __param(1, editorService_1.IWorkbenchEditorService),
    __param(2, workspace_1.IWorkspaceContextService)
], TerminalLinkHandler);
exports.TerminalLinkHandler = TerminalLinkHandler;
