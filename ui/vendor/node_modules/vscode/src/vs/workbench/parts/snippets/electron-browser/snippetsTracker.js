/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var nls_1 = require("vs/nls");
var paths = require("vs/base/common/paths");
var async = require("vs/base/common/async");
var winjs = require("vs/base/common/winjs.base");
var pfs_1 = require("vs/base/node/pfs");
var errors_1 = require("vs/base/common/errors");
var lifecycle = require("vs/base/common/lifecycle");
var TMSnippets_1 = require("vs/editor/node/textMate/TMSnippets");
var files_1 = require("vs/platform/files/common/files");
var lifecycle_1 = require("vs/platform/lifecycle/common/lifecycle");
var environment_1 = require("vs/platform/environment/common/environment");
var fs_1 = require("fs");
var SnippetsTracker = (function () {
    function SnippetsTracker(fileService, lifecycleService, environmentService) {
        var _this = this;
        this.fileService = fileService;
        this.lifecycleService = lifecycleService;
        this.snippetFolder = paths.join(environmentService.appSettingsHome, 'snippets');
        this.toDispose = [];
        this.fileWatchDelayer = new async.ThrottledDelayer(SnippetsTracker.FILE_WATCH_DELAY);
        pfs_1.mkdirp(this.snippetFolder)
            .then(function () { return _this.scanUserSnippets(); })
            .then(function () { return _this.registerListeners(); })
            .done(undefined, errors_1.onUnexpectedError);
    }
    SnippetsTracker.prototype.registerListeners = function () {
        var _this = this;
        var scheduler = new async.RunOnceScheduler(function () {
            _this.scanUserSnippets();
        }, 500);
        this.toDispose.push(scheduler);
        try {
            this.watcher = fs_1.watch(this.snippetFolder); // will be persistent but not recursive
            this.watcher.on('change', function (eventType) {
                if (eventType === 'delete') {
                    _this.unregisterListener();
                    return;
                }
                scheduler.schedule();
            });
        }
        catch (error) {
        }
        this.lifecycleService.onShutdown(this.dispose, this);
    };
    SnippetsTracker.prototype.scanUserSnippets = function () {
        var _this = this;
        return readFilesInDir(this.snippetFolder, /\.json$/).then(function (snippetFiles) {
            return winjs.TPromise.join(snippetFiles.map(function (snippetFile) {
                var modeId = snippetFile.replace(/\.json$/, '').toLowerCase();
                var snippetPath = paths.join(_this.snippetFolder, snippetFile);
                return TMSnippets_1.readAndRegisterSnippets(modeId, snippetPath, nls_1.localize('userSnippet', "User Snippet"));
            }));
        });
    };
    SnippetsTracker.prototype.unregisterListener = function () {
        if (this.watcher) {
            this.watcher.close();
            this.watcher = null;
        }
    };
    SnippetsTracker.prototype.getId = function () {
        return 'vs.snippets.snippetsTracker';
    };
    SnippetsTracker.prototype.dispose = function () {
        this.unregisterListener();
        this.toDispose = lifecycle.dispose(this.toDispose);
    };
    return SnippetsTracker;
}());
SnippetsTracker.FILE_WATCH_DELAY = 200;
SnippetsTracker = __decorate([
    __param(0, files_1.IFileService),
    __param(1, lifecycle_1.ILifecycleService),
    __param(2, environment_1.IEnvironmentService)
], SnippetsTracker);
exports.SnippetsTracker = SnippetsTracker;
function readFilesInDir(dirPath, namePattern) {
    if (namePattern === void 0) { namePattern = null; }
    return pfs_1.readdir(dirPath).then(function (children) {
        return winjs.TPromise.join(children.map(function (child) {
            if (namePattern && !namePattern.test(child)) {
                return winjs.TPromise.as(null);
            }
            return pfs_1.fileExists(paths.join(dirPath, child)).then(function (isFile) {
                return isFile ? child : null;
            });
        })).then(function (subdirs) {
            return subdirs.filter(function (subdir) { return (subdir !== null); });
        });
    });
}
