/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
require("./watermark.css");
var builder_1 = require("vs/base/browser/builder");
var lifecycle_1 = require("vs/base/common/lifecycle");
var objects_1 = require("vs/base/common/objects");
var platform_1 = require("vs/base/common/platform");
var keybinding_1 = require("vs/platform/keybinding/common/keybinding");
var nls = require("vs/nls");
var platform_2 = require("vs/platform/platform");
var telemetry_1 = require("vs/platform/telemetry/common/telemetry");
var workspace_1 = require("vs/platform/workspace/common/workspace");
var contributions_1 = require("vs/workbench/common/contributions");
var lifecycle_2 = require("vs/platform/lifecycle/common/lifecycle");
var quickopen_contribution_1 = require("vs/workbench/browser/parts/quickopen/quickopen.contribution");
var actions_1 = require("vs/workbench/electron-browser/actions");
var extensionsActions_1 = require("vs/workbench/parts/extensions/browser/extensionsActions");
var fileActions_1 = require("vs/workbench/parts/files/browser/fileActions");
var electronFileActions_1 = require("vs/workbench/parts/files/electron-browser/electronFileActions");
var commandsHandler_1 = require("vs/workbench/parts/quickopen/browser/commandsHandler");
var partService_1 = require("vs/workbench/services/part/common/partService");
var debugActions_1 = require("vs/workbench/parts/debug/browser/debugActions");
var constants_1 = require("vs/workbench/parts/search/common/constants");
var preferencesActions_1 = require("vs/workbench/parts/preferences/browser/preferencesActions");
var terminalActions_1 = require("vs/workbench/parts/terminal/electron-browser/terminalActions");
var themes_contribution_1 = require("vs/workbench/parts/themes/electron-browser/themes.contribution");
var showCommands = {
    text: nls.localize('watermark.showCommands', "Show All Commands"),
    ids: [commandsHandler_1.ShowAllCommandsAction.ID]
};
var quickOpen = {
    text: nls.localize('watermark.quickOpen', "Go to File"),
    ids: [quickopen_contribution_1.GlobalQuickOpenAction.ID]
};
var openFileNonMacOnly = {
    text: nls.localize('watermark.openFile', "Open File"),
    ids: [electronFileActions_1.OpenFileAction.ID],
    mac: false
};
var openFolderNonMacOnly = {
    text: nls.localize('watermark.openFolder', "Open Folder"),
    ids: [electronFileActions_1.OpenFolderAction.ID],
    mac: false
};
var openFileOrFolderMacOnly = {
    text: nls.localize('watermark.openFileFolder', "Open File or Folder"),
    ids: [electronFileActions_1.OpenFileFolderAction.ID],
    mac: true
};
var openRecent = {
    text: nls.localize('watermark.openRecent', "Open Recent"),
    ids: [actions_1.OpenRecentAction.ID]
};
var newUntitledFile = {
    text: nls.localize('watermark.newUntitledFile', "New Untitled File"),
    ids: [fileActions_1.GlobalNewUntitledFileAction.ID]
};
var newUntitledFileMacOnly = objects_1.assign({ mac: true }, newUntitledFile);
var toggleTerminal = {
    text: nls.localize({ key: 'watermark.toggleTerminal', comment: ['toggle is a verb here'] }, "Toggle Terminal"),
    ids: [terminalActions_1.ToggleTerminalAction.ID]
};
var findInFiles = {
    text: nls.localize('watermark.findInFiles', "Find in Files"),
    ids: [constants_1.FindInFilesActionId]
};
var startDebugging = {
    text: nls.localize('watermark.startDebugging', "Start Debugging"),
    ids: [debugActions_1.StartAction.ID]
};
var selectTheme = {
    text: nls.localize('watermark.selectTheme', "Change Theme"),
    ids: [themes_contribution_1.SelectColorThemeAction.ID]
};
var selectKeymap = {
    text: nls.localize('watermark.selectKeymap', "Change Keymap"),
    ids: [extensionsActions_1.ShowRecommendedKeymapExtensionsAction.ID]
};
var keybindingsReference = {
    text: nls.localize('watermark.keybindingsReference', "Keyboard Reference"),
    ids: [actions_1.KeybindingsReferenceAction.ID]
};
var openGlobalKeybindings = {
    text: nls.localize('watermark.openGlobalKeybindings', "Keyboard Shortcuts"),
    ids: [preferencesActions_1.OpenGlobalKeybindingsAction.ID]
};
var newUserEntries = [
    showCommands,
    selectTheme,
    selectKeymap,
    openFolderNonMacOnly,
    openFileOrFolderMacOnly,
    actions_1.KeybindingsReferenceAction.AVAILABLE ? keybindingsReference : openGlobalKeybindings
];
var noFolderEntries = [
    showCommands,
    openFileNonMacOnly,
    openFolderNonMacOnly,
    openFileOrFolderMacOnly,
    openRecent,
    newUntitledFileMacOnly,
    toggleTerminal
];
var folderEntries = [
    showCommands,
    quickOpen,
    findInFiles,
    startDebugging,
    toggleTerminal
];
var UNBOUND = nls.localize('watermark.unboundCommand', "unbound");
var WatermarkContribution = (function () {
    function WatermarkContribution(lifecycleService, partService, keybindingService, contextService, telemetryService) {
        var _this = this;
        this.partService = partService;
        this.keybindingService = keybindingService;
        this.contextService = contextService;
        this.telemetryService = telemetryService;
        this.toDispose = [];
        lifecycleService.onShutdown(this.dispose, this);
        this.partService.joinCreation().then(function () {
            _this.create();
        });
    }
    WatermarkContribution.prototype.getId = function () {
        return 'vs.watermark';
    };
    WatermarkContribution.prototype.create = function () {
        var _this = this;
        var container = this.partService.getContainer(partService_1.Parts.EDITOR_PART);
        var watermark = builder_1.$()
            .div({ 'class': 'watermark' });
        var box = builder_1.$(watermark)
            .div({ 'class': 'watermark-box' });
        var folder = !!this.contextService.getWorkspace();
        var newUser = this.telemetryService.getExperiments().showNewUserWatermark;
        var selected = (newUser ? newUserEntries : (folder ? folderEntries : noFolderEntries))
            .filter(function (entry) { return !('mac' in entry) || entry.mac === platform_1.isMacintosh; });
        var update = function () {
            var builder = builder_1.$(box);
            builder.clearChildren();
            selected.map(function (entry) {
                builder.element('dl', {}, function (dl) {
                    dl.element('dt', {}, function (dt) { return dt.text(entry.text); });
                    dl.element('dd', {}, function (dd) { return dd.innerHtml(entry.ids
                        .map(function (id) { return _this.keybindingService.lookupKeybindings(id).slice(0, 1)
                        .map(function (k) { return "<span class=\"shortcuts\">" + _this.keybindingService.getLabelFor(k) + "</span>"; })
                        .join('') || "<span class=\"unbound\">" + UNBOUND + "</span>"; })
                        .join(' / ')); });
                });
            });
        };
        update();
        watermark.build(container.firstChild, 0);
        this.toDispose.push(this.keybindingService.onDidUpdateKeybindings(update));
    };
    WatermarkContribution.prototype.dispose = function () {
        this.toDispose = lifecycle_1.dispose(this.toDispose);
    };
    return WatermarkContribution;
}());
WatermarkContribution = __decorate([
    __param(0, lifecycle_2.ILifecycleService),
    __param(1, partService_1.IPartService),
    __param(2, keybinding_1.IKeybindingService),
    __param(3, workspace_1.IWorkspaceContextService),
    __param(4, telemetry_1.ITelemetryService)
], WatermarkContribution);
exports.WatermarkContribution = WatermarkContribution;
platform_2.Registry.as(contributions_1.Extensions.Workbench)
    .registerWorkbenchContribution(WatermarkContribution);
