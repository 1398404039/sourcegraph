/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var nls = require("vs/nls");
var uri_1 = require("vs/base/common/uri");
var platform_1 = require("vs/platform/platform");
var actionRegistry_1 = require("vs/workbench/common/actionRegistry");
var editor_1 = require("vs/workbench/common/editor");
var baseEditor_1 = require("vs/workbench/browser/parts/editor/baseEditor");
var actions_1 = require("vs/platform/actions/common/actions");
var extensions_1 = require("vs/platform/instantiation/common/extensions");
var keyCodes_1 = require("vs/base/common/keyCodes");
var descriptors_1 = require("vs/platform/instantiation/common/descriptors");
var preferencesEditor_1 = require("vs/workbench/parts/preferences/browser/preferencesEditor");
var preferencesActions_1 = require("vs/workbench/parts/preferences/browser/preferencesActions");
var preferences_1 = require("vs/workbench/parts/preferences/common/preferences");
var preferencesService_1 = require("vs/workbench/parts/preferences/browser/preferencesService");
var contributions_1 = require("vs/workbench/common/contributions");
var preferencesContentProvider_1 = require("vs/workbench/parts/preferences/common/preferencesContentProvider");
extensions_1.registerSingleton(preferences_1.IPreferencesService, preferencesService_1.PreferencesService);
platform_1.Registry.as(editor_1.Extensions.Editors).registerEditor(new baseEditor_1.EditorDescriptor(preferencesEditor_1.PreferencesEditor.ID, nls.localize('defaultPreferencesEditor', "Default Preferences Editor"), 'vs/workbench/parts/preferences/browser/preferencesEditor', 'PreferencesEditor'), [
    new descriptors_1.SyncDescriptor(preferencesEditor_1.PreferencesEditorInput)
]);
// Register Preferences Editor Input Factory
var PreferencesEditorInputFactory = (function () {
    function PreferencesEditorInputFactory() {
    }
    PreferencesEditorInputFactory.prototype.serialize = function (editorInput) {
        var input = editorInput;
        if (input.details && input.master) {
            var registry_1 = platform_1.Registry.as(editor_1.Extensions.Editors);
            var detailsInputFactory = registry_1.getEditorInputFactory(input.details.getTypeId());
            var masterInputFactory = registry_1.getEditorInputFactory(input.master.getTypeId());
            if (detailsInputFactory && masterInputFactory) {
                var detailsSerialized = detailsInputFactory.serialize(input.details);
                var masterSerialized = masterInputFactory.serialize(input.master);
                if (detailsSerialized && masterSerialized) {
                    return JSON.stringify({
                        name: input.getName(),
                        description: input.getDescription(),
                        detailsSerialized: detailsSerialized,
                        masterSerialized: masterSerialized,
                        detailsTypeId: input.details.getTypeId(),
                        masterTypeId: input.master.getTypeId()
                    });
                }
            }
        }
        return null;
    };
    PreferencesEditorInputFactory.prototype.deserialize = function (instantiationService, serializedEditorInput) {
        var deserialized = JSON.parse(serializedEditorInput);
        var registry = platform_1.Registry.as(editor_1.Extensions.Editors);
        var detailsInputFactory = registry.getEditorInputFactory(deserialized.detailsTypeId);
        var masterInputFactory = registry.getEditorInputFactory(deserialized.masterTypeId);
        if (detailsInputFactory && masterInputFactory) {
            var detailsInput = detailsInputFactory.deserialize(instantiationService, deserialized.detailsSerialized);
            var masterInput = masterInputFactory.deserialize(instantiationService, deserialized.masterSerialized);
            if (detailsInput && masterInput) {
                return new preferencesEditor_1.PreferencesEditorInput(deserialized.name, deserialized.description, detailsInput, masterInput);
            }
        }
        return null;
    };
    return PreferencesEditorInputFactory;
}());
// Register Default Preferences Editor Input Factory
var DefaultPreferencesEditorInputFactory = (function () {
    function DefaultPreferencesEditorInputFactory() {
    }
    DefaultPreferencesEditorInputFactory.prototype.serialize = function (editorInput) {
        var input = editorInput;
        var serialized = { resource: input.getResource().toString() };
        return JSON.stringify(serialized);
    };
    DefaultPreferencesEditorInputFactory.prototype.deserialize = function (instantiationService, serializedEditorInput) {
        var deserialized = JSON.parse(serializedEditorInput);
        return instantiationService.createInstance(preferencesEditor_1.DefaultPreferencesEditorInput, uri_1.default.parse(deserialized.resource));
    };
    return DefaultPreferencesEditorInputFactory;
}());
platform_1.Registry.as(editor_1.Extensions.Editors).registerEditorInputFactory(preferencesEditor_1.PreferencesEditorInput.ID, PreferencesEditorInputFactory);
platform_1.Registry.as(editor_1.Extensions.Editors).registerEditorInputFactory(preferencesEditor_1.DefaultPreferencesEditorInput.ID, DefaultPreferencesEditorInputFactory);
// Contribute Global Actions
var category = nls.localize('preferences', "Preferences");
var registry = platform_1.Registry.as(actionRegistry_1.Extensions.WorkbenchActions);
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(preferencesActions_1.OpenGlobalSettingsAction, preferencesActions_1.OpenGlobalSettingsAction.ID, preferencesActions_1.OpenGlobalSettingsAction.LABEL, {
    primary: null,
    mac: { primary: 2048 /* CtrlCmd */ | 82 /* US_COMMA */ }
}), 'Preferences: Open User Settings', category);
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(preferencesActions_1.OpenWorkspaceSettingsAction, preferencesActions_1.OpenWorkspaceSettingsAction.ID, preferencesActions_1.OpenWorkspaceSettingsAction.LABEL), 'Preferences: Open Workspace Settings', category);
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(preferencesActions_1.OpenGlobalKeybindingsAction, preferencesActions_1.OpenGlobalKeybindingsAction.ID, preferencesActions_1.OpenGlobalKeybindingsAction.LABEL, { primary: keyCodes_1.KeyChord(2048 /* CtrlCmd */ | 41 /* KEY_K */, 2048 /* CtrlCmd */ | 49 /* KEY_S */) }), 'Preferences: Open Keyboard Shortcuts', category);
registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(preferencesActions_1.ConfigureLanguageBasedSettingsAction, preferencesActions_1.ConfigureLanguageBasedSettingsAction.ID, preferencesActions_1.ConfigureLanguageBasedSettingsAction.LABEL), 'Preferences: Configure Language Specific Settings', category);
platform_1.Registry.as(contributions_1.Extensions.Workbench).registerWorkbenchContribution(preferencesContentProvider_1.PreferencesContentProvider);
