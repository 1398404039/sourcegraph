import { IMouseEvent } from 'vs/base/browser/mouseEvent';
import { Promise } from 'vs/base/common/winjs.base';
import { IDataSource, ITree, IRenderer, ContextMenuEvent } from 'vs/base/parts/tree/browser/tree';
import { DefaultController } from 'vs/base/parts/tree/browser/treeDefaults';
import { IExtensionDependencies, IExtensionsWorkbenchService } from './extensions';
import { IContextMenuService } from 'vs/platform/contextview/browser/contextView';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import { IKeyboardEvent } from 'vs/base/browser/keyboardEvent';
export declare class DataSource implements IDataSource {
    getId(tree: ITree, element: IExtensionDependencies): string;
    hasChildren(tree: ITree, element: IExtensionDependencies): boolean;
    getChildren(tree: ITree, element: IExtensionDependencies): Promise;
    getParent(tree: ITree, element: IExtensionDependencies): Promise;
}
export declare class Renderer implements IRenderer {
    private static EXTENSION_TEMPLATE_ID;
    getHeight(tree: ITree, element: IExtensionDependencies): number;
    getTemplateId(tree: ITree, element: IExtensionDependencies): string;
    renderTemplate(tree: ITree, templateId: string, container: HTMLElement): any;
    renderElement(tree: ITree, element: IExtensionDependencies, templateId: string, templateData: any): void;
    disposeTemplate(tree: ITree, templateId: string, templateData: any): void;
}
export declare class Controller extends DefaultController {
    private contextMenuService;
    private extensionWorkbenchService;
    private instantiationService;
    constructor(contextMenuService: IContextMenuService, extensionWorkbenchService: IExtensionsWorkbenchService, instantiationService: IInstantiationService);
    protected onLeftClick(tree: ITree, element: IExtensionDependencies, event: IMouseEvent): boolean;
    onContextMenu(tree: ITree, element: any, event: ContextMenuEvent): boolean;
    protected onEnter(tree: ITree, event: IKeyboardEvent): boolean;
    private openExtension(element, sideByside?);
    private keybindingForAction(id);
}
