/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var nls = require("vs/nls");
var paths = require("vs/base/common/paths");
var severity_1 = require("vs/base/common/severity");
var winjs_base_1 = require("vs/base/common/winjs.base");
var editorService_1 = require("vs/workbench/services/editor/common/editorService");
var editor_1 = require("vs/workbench/common/editor");
var windows_1 = require("vs/platform/windows/common/windows");
var viewlet_1 = require("vs/workbench/services/viewlet/browser/viewlet");
var workspace_1 = require("vs/platform/workspace/common/workspace");
var files_1 = require("vs/workbench/parts/files/common/files");
var explorerViewModel_1 = require("vs/workbench/parts/files/common/explorerViewModel");
var errors = require("vs/base/common/errors");
var clipboardService_1 = require("vs/platform/clipboard/common/clipboardService");
var labels = require("vs/base/common/labels");
var groupService_1 = require("vs/workbench/services/group/common/groupService");
var message_1 = require("vs/platform/message/common/message");
// Commands
exports.copyPathCommand = function (accessor, resource) {
    // Without resource, try to look at the active editor
    if (!resource) {
        var editorGroupService = accessor.get(groupService_1.IEditorGroupService);
        var editorService = accessor.get(editorService_1.IWorkbenchEditorService);
        var activeEditor = editorService.getActiveEditor();
        resource = activeEditor ? editor_1.toResource(activeEditor.input, { supportSideBySide: true, filter: 'file' }) : void 0;
        if (activeEditor) {
            editorGroupService.focusGroup(activeEditor.position); // focus back to active editor group
        }
    }
    if (resource) {
        var clipboardService = accessor.get(clipboardService_1.IClipboardService);
        clipboardService.writeText(labels.getPathLabel(resource));
    }
    else {
        var messageService = accessor.get(message_1.IMessageService);
        messageService.show(severity_1.default.Info, nls.localize('openFileToCopy', "Open a file first to copy its path"));
    }
};
exports.openFolderPickerCommand = function (accessor, forceNewWindow) {
    var windowService = accessor.get(windows_1.IWindowService);
    windowService.openFolderPicker(forceNewWindow);
};
exports.openWindowCommand = function (accessor, paths, forceNewWindow) {
    var windowsService = accessor.get(windows_1.IWindowsService);
    windowsService.openWindow(paths, { forceNewWindow: forceNewWindow });
};
exports.openFileInNewWindowCommand = function (accessor) {
    var windowService = accessor.get(windows_1.IWindowService);
    var editorService = accessor.get(editorService_1.IWorkbenchEditorService);
    var fileResource = editor_1.toResource(editorService.getActiveEditorInput(), { supportSideBySide: true, filter: 'file' });
    windowService.openFilePicker(true, fileResource ? paths.dirname(fileResource.fsPath) : void 0);
};
exports.revealInOSCommand = function (accessor, resource) {
    // Without resource, try to look at the active editor
    if (!resource) {
        var editorService = accessor.get(editorService_1.IWorkbenchEditorService);
        resource = editor_1.toResource(editorService.getActiveEditorInput(), { supportSideBySide: true, filter: 'file' });
    }
    if (resource) {
        var windowsService = accessor.get(windows_1.IWindowsService);
        windowsService.showItemInFolder(paths.normalize(resource.fsPath, true));
    }
    else {
        var messageService = accessor.get(message_1.IMessageService);
        messageService.show(severity_1.default.Info, nls.localize('openFileToReveal', "Open a file first to reveal"));
    }
};
exports.revealInExplorerCommand = function (accessor, resource) {
    var viewletService = accessor.get(viewlet_1.IViewletService);
    var contextService = accessor.get(workspace_1.IWorkspaceContextService);
    viewletService.openViewlet(files_1.VIEWLET_ID, false).then(function (viewlet) {
        var isInsideWorkspace = contextService.isInsideWorkspace(resource);
        if (isInsideWorkspace) {
            var explorerView = viewlet.getExplorerView();
            if (explorerView) {
                explorerView.expand();
                explorerView.select(resource, true);
            }
        }
        else {
            var openEditorsView = viewlet.getOpenEditorsView();
            if (openEditorsView) {
                openEditorsView.expand();
            }
        }
    });
};
function openFocusedFilesExplorerViewItem(accessor, sideBySide) {
    withFocussedFilesExplorerViewItem(accessor).then(function (res) {
        if (res) {
            // Directory: Toggle expansion
            if (res.item.isDirectory) {
                res.tree.toggleExpansion(res.item);
            }
            else {
                var editorService = accessor.get(editorService_1.IWorkbenchEditorService);
                editorService.openEditor({ resource: res.item.resource }, sideBySide).done(null, errors.onUnexpectedError);
            }
        }
    });
}
function openFocussedOpenedEditorsViewItem(accessor, sideBySide) {
    withFocussedOpenEditorsViewItem(accessor).then(function (res) {
        if (res) {
            var editorService = accessor.get(editorService_1.IWorkbenchEditorService);
            editorService.openEditor(res.item.editorInput, null, sideBySide);
        }
    });
}
function runActionOnFocusedFilesExplorerViewItem(accessor, id, context) {
    withFocussedFilesExplorerViewItem(accessor).then(function (res) {
        if (res) {
            res.explorer.getViewletState().actionProvider.runAction(res.tree, res.item, id, context).done(null, errors.onUnexpectedError);
        }
    });
}
function withVisibleExplorer(accessor) {
    var viewletService = accessor.get(viewlet_1.IViewletService);
    var activeViewlet = viewletService.getActiveViewlet();
    if (!activeViewlet || activeViewlet.getId() !== files_1.VIEWLET_ID) {
        return winjs_base_1.TPromise.as(void 0); // Return early if the active viewlet is not the explorer
    }
    return viewletService.openViewlet(files_1.VIEWLET_ID, false);
}
;
function withFocussedFilesExplorerViewItem(accessor) {
    return withFocussedFilesExplorer(accessor).then(function (res) {
        if (!res) {
            return void 0;
        }
        var tree = res.tree, explorer = res.explorer;
        if (!tree || !tree.getFocus()) {
            return void 0;
        }
        return { explorer: explorer, tree: tree, item: tree.getFocus() };
    });
}
exports.withFocussedFilesExplorerViewItem = withFocussedFilesExplorerViewItem;
;
function withFocussedFilesExplorer(accessor) {
    return withVisibleExplorer(accessor).then(function (explorer) {
        if (!explorer || !explorer.getExplorerView()) {
            return void 0; // empty folder or hidden explorer
        }
        var tree = explorer.getExplorerView().getViewer();
        // Ignore if in highlight mode or not focussed
        if (tree.getHighlight() || !tree.isDOMFocused()) {
            return void 0;
        }
        return { explorer: explorer, tree: tree };
    });
}
exports.withFocussedFilesExplorer = withFocussedFilesExplorer;
;
function withFocussedOpenEditorsViewItem(accessor) {
    return withVisibleExplorer(accessor).then(function (explorer) {
        if (!explorer || !explorer.getOpenEditorsView()) {
            return void 0; // empty folder or hidden explorer
        }
        var tree = explorer.getOpenEditorsView().getViewer();
        // Ignore if in highlight mode or not focussed
        var focus = tree.getFocus();
        if (tree.getHighlight() || !tree.isDOMFocused() || !(focus instanceof explorerViewModel_1.OpenEditor)) {
            return void 0;
        }
        return { explorer: explorer, tree: tree, item: focus };
    });
}
;
function withFocusedExplorerItem(accessor) {
    return withFocussedFilesExplorerViewItem(accessor).then(function (res) {
        if (res) {
            return res.item;
        }
        return withFocussedOpenEditorsViewItem(accessor).then(function (res) {
            if (res) {
                return res.item;
            }
            return void 0;
        });
    }); // TypeScript fail
}
;
exports.renameFocusedFilesExplorerViewItemCommand = function (accessor) {
    runActionOnFocusedFilesExplorerViewItem(accessor, 'renameFile');
};
exports.deleteFocusedFilesExplorerViewItemCommand = function (accessor) {
    runActionOnFocusedFilesExplorerViewItem(accessor, 'moveFileToTrash', { useTrash: false });
};
exports.moveFocusedFilesExplorerViewItemToTrashCommand = function (accessor) {
    runActionOnFocusedFilesExplorerViewItem(accessor, 'moveFileToTrash', { useTrash: true });
};
exports.copyFocusedFilesExplorerViewItem = function (accessor) {
    runActionOnFocusedFilesExplorerViewItem(accessor, 'filesExplorer.copy');
};
exports.copyPathOfFocusedExplorerItem = function (accessor) {
    withFocusedExplorerItem(accessor).then(function (item) {
        var file = files_1.explorerItemToFileResource(item);
        if (file) {
            exports.copyPathCommand(accessor, file.resource);
        }
    });
};
exports.openFocusedExplorerItemSideBySideCommand = function (accessor) {
    withFocusedExplorerItem(accessor).then(function (item) {
        if (item instanceof explorerViewModel_1.FileStat) {
            openFocusedFilesExplorerViewItem(accessor, true);
        }
        else {
            openFocussedOpenedEditorsViewItem(accessor, true);
        }
    });
};
exports.revealInOSFocusedFilesExplorerItem = function (accessor) {
    withFocusedExplorerItem(accessor).then(function (item) {
        var file = files_1.explorerItemToFileResource(item);
        if (file) {
            exports.revealInOSCommand(accessor, file.resource);
        }
    });
};
