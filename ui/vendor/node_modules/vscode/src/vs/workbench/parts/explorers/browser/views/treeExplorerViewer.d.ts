import { TPromise } from 'vs/base/common/winjs.base';
import { ITree, IDataSource, IRenderer, IElementCallback } from 'vs/base/parts/tree/browser/tree';
import { InternalTreeExplorerNode } from 'vs/workbench/parts/explorers/common/treeExplorerViewModel';
import { DefaultController } from 'vs/base/parts/tree/browser/treeDefaults';
import { IMouseEvent } from 'vs/base/browser/mouseEvent';
import { IActionRunner } from 'vs/base/common/actions';
import { IActionProvider, ActionsRenderer } from 'vs/base/parts/tree/browser/actionsRenderer';
import { ContributableActionProvider } from 'vs/workbench/browser/actionBarRegistry';
import { ITreeExplorerService } from 'vs/workbench/parts/explorers/common/treeExplorerService';
import { IProgressService } from 'vs/platform/progress/common/progress';
export declare class TreeDataSource implements IDataSource {
    private treeNodeProviderId;
    private treeExplorerService;
    private progressService;
    constructor(treeNodeProviderId: string, treeExplorerService: ITreeExplorerService, progressService: IProgressService);
    getId(tree: ITree, node: InternalTreeExplorerNode): string;
    hasChildren(tree: ITree, node: InternalTreeExplorerNode): boolean;
    getChildren(tree: ITree, node: InternalTreeExplorerNode): TPromise<InternalTreeExplorerNode[]>;
    getParent(tree: ITree, node: InternalTreeExplorerNode): TPromise<InternalTreeExplorerNode>;
}
export declare class TreeRenderer extends ActionsRenderer implements IRenderer {
    constructor(state: TreeExplorerViewletState, actionRunner: IActionRunner);
    getContentHeight(tree: ITree, element: any): number;
    renderContents(tree: ITree, node: InternalTreeExplorerNode, domElement: HTMLElement, previousCleanupFn: IElementCallback): IElementCallback;
    private renderFileFolderLabel(container, node);
}
export declare class TreeController extends DefaultController {
    private treeNodeProviderId;
    private treeExplorerService;
    constructor(treeNodeProviderId: string, treeExplorerService: ITreeExplorerService);
    onLeftClick(tree: ITree, node: InternalTreeExplorerNode, event: IMouseEvent, origin?: string): boolean;
}
export interface ITreeExplorerViewletState {
    actionProvider: IActionProvider;
}
export declare class TreeExplorerActionProvider extends ContributableActionProvider {
    private state;
    constructor(state: TreeExplorerViewletState);
}
export declare class TreeExplorerViewletState implements ITreeExplorerViewletState {
    private _actionProvider;
    constructor();
    readonly actionProvider: TreeExplorerActionProvider;
}
