import { TPromise } from 'vs/base/common/winjs.base';
import URI from 'vs/base/common/uri';
import { Dimension, Builder } from 'vs/base/browser/builder';
import { Disposable } from 'vs/base/common/lifecycle';
import { SideBySideEditorInput, EditorOptions } from 'vs/workbench/common/editor';
import { BaseEditor } from 'vs/workbench/browser/parts/editor/baseEditor';
import { IEditorControl, Position, Verbosity } from 'vs/platform/editor/common/editor';
import { ResourceEditorInput } from 'vs/workbench/common/editor/resourceEditorInput';
import * as editorCommon from 'vs/editor/common/editorCommon';
import { BaseTextEditor } from 'vs/workbench/browser/parts/editor/textEditor';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import { IPreferencesService, ISetting } from 'vs/workbench/parts/preferences/common/preferences';
import { ICodeEditor } from 'vs/editor/browser/editorBrowser';
import { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';
import { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';
import { IWorkbenchThemeService } from 'vs/workbench/services/themes/common/themeService';
import { IModelService } from 'vs/editor/common/services/modelService';
import { IModeService } from 'vs/editor/common/services/modeService';
import { IStorageService } from 'vs/platform/storage/common/storage';
import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
import { IWorkbenchEditorService } from 'vs/workbench/services/editor/common/editorService';
import { IUntitledEditorService } from 'vs/workbench/services/untitled/common/untitledEditorService';
import { ITextModelResolverService } from 'vs/editor/common/services/resolverService';
import { IEnvironmentService } from 'vs/platform/environment/common/environment';
import { IPreferencesRenderer } from 'vs/workbench/parts/preferences/browser/preferencesRenderers';
import { ITextFileService } from 'vs/workbench/services/textfile/common/textfiles';
import { IEditorGroupService } from 'vs/workbench/services/group/common/groupService';
export declare class PreferencesEditorInput extends SideBySideEditorInput {
    static ID: string;
    getTypeId(): string;
    getTitle(verbosity: Verbosity): string;
}
export declare class DefaultPreferencesEditorInput extends ResourceEditorInput {
    static ID: string;
    constructor(defaultSettingsResource: URI, textModelResolverService: ITextModelResolverService);
    getTypeId(): string;
    matches(other: any): boolean;
}
export declare class PreferencesEditor extends BaseEditor {
    private preferencesService;
    private environmentService;
    private editorService;
    private contextKeyService;
    private instantiationService;
    static ID: string;
    private defaultSettingsEditorContextKey;
    private headerContainer;
    private searchWidget;
    private settingsTabsWidget;
    private sideBySidePreferencesWidget;
    private preferencesRenderers;
    private delayedFilterLogging;
    private latestEmptyFilters;
    constructor(preferencesService: IPreferencesService, environmentService: IEnvironmentService, telemetryService: ITelemetryService, editorService: IWorkbenchEditorService, contextKeyService: IContextKeyService, instantiationService: IInstantiationService);
    createEditor(parent: Builder): void;
    setInput(newInput: PreferencesEditorInput, options?: EditorOptions): TPromise<void>;
    layout(dimension: Dimension): void;
    getControl(): IEditorControl;
    focus(): void;
    focusSearch(): void;
    clearInput(): void;
    protected setEditorVisible(visible: boolean, position: Position): void;
    changePosition(position: Position): void;
    private updateInput(oldInput, newInput, options?);
    private switchSettings();
    private filterPreferences(filter);
    private showSearchResultsMessage(count);
    private reportFilteringUsed(filter);
    /**
     * Put a rough limit on the size of the telemetry data, since otherwise it could be an unbounded large amount
     * of data. 8192 is the max size of a property value. This is rough since that probably includes ""s, etc.
     */
    private getLatestEmptyFiltersForTelemetry();
}
export declare class DefaultPreferencesEditor extends BaseTextEditor {
    private editorService;
    private untitledEditorService;
    private preferencesService;
    private modelService;
    static ID: string;
    constructor(telemetryService: ITelemetryService, editorService: IWorkbenchEditorService, instantiationService: IInstantiationService, storageService: IStorageService, configurationService: IConfigurationService, themeService: IWorkbenchThemeService, untitledEditorService: IUntitledEditorService, preferencesService: IPreferencesService, modelService: IModelService, modeService: IModeService, textFileService: ITextFileService, editorGroupService: IEditorGroupService);
    createEditorControl(parent: Builder, configuration: editorCommon.IEditorOptions): editorCommon.IEditor;
    protected getConfigurationOverrides(): editorCommon.IEditorOptions;
    updateInput(input: DefaultPreferencesEditorInput, options: EditorOptions, editablePreferencesUri: URI): TPromise<void>;
    layout(dimension: Dimension): void;
    clearInput(): void;
    protected getAriaLabel(): string;
}
export declare abstract class PreferencesEditorContribution<T> extends Disposable implements editorCommon.IEditorContribution {
    protected editor: ICodeEditor;
    protected instantiationService: IInstantiationService;
    protected preferencesService: IPreferencesService;
    private preferencesRenderer;
    constructor(editor: ICodeEditor, instantiationService: IInstantiationService, preferencesService: IPreferencesService);
    private onModelChanged();
    getPreferencesRenderer(): IPreferencesRenderer<T>;
    protected abstract createPreferencesRenderer(): TPromise<IPreferencesRenderer<T>>;
    abstract getId(): string;
    private disposePreferencesRenderer();
    dispose(): void;
}
export declare class DefaultSettingsEditorContribution extends PreferencesEditorContribution<ISetting> implements editorCommon.IEditorContribution {
    static ID: string;
    protected createPreferencesRenderer(): TPromise<IPreferencesRenderer<ISetting>>;
    getId(): string;
}
export declare class SettingsEditorContribution extends PreferencesEditorContribution<ISetting> implements editorCommon.IEditorContribution {
    static ID: string;
    getId(): string;
    protected createPreferencesRenderer(): TPromise<IPreferencesRenderer<ISetting>>;
}
