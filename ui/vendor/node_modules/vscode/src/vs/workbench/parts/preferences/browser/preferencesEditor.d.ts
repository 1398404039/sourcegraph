import { TPromise } from 'vs/base/common/winjs.base';
import URI from 'vs/base/common/uri';
import { Dimension, Builder } from 'vs/base/browser/builder';
import { Disposable } from 'vs/base/common/lifecycle';
import Event from 'vs/base/common/event';
import { EditorOptions, EditorInput } from 'vs/workbench/common/editor';
import { ResourceEditorInput } from 'vs/workbench/common/editor/resourceEditorInput';
import * as editorCommon from 'vs/editor/common/editorCommon';
import { BaseTextEditor } from 'vs/workbench/browser/parts/editor/textEditor';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import { IPreferencesService, ISettingsGroup, ISetting, IPreferencesEditorModel, IFilterResult } from 'vs/workbench/parts/preferences/common/preferences';
import { SettingsEditorModel, DefaultSettingsEditorModel } from 'vs/workbench/parts/preferences/common/preferencesModels';
import { ICodeEditor } from 'vs/editor/browser/editorBrowser';
import { IContextMenuService } from 'vs/platform/contextview/browser/contextView';
import { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';
import { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';
import { IThemeService } from 'vs/workbench/services/themes/common/themeService';
import { IModelService } from 'vs/editor/common/services/modelService';
import { IModeService } from 'vs/editor/common/services/modeService';
import { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';
import { IStorageService } from 'vs/platform/storage/common/storage';
import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
import { IEventService } from 'vs/platform/event/common/event';
import { IMessageService } from 'vs/platform/message/common/message';
import { IWorkbenchEditorService } from 'vs/workbench/services/editor/common/editorService';
import { IUntitledEditorService } from 'vs/workbench/services/untitled/common/untitledEditorService';
import { ITextModelResolverService } from 'vs/editor/common/services/resolverService';
export declare class DefaultPreferencesEditorInput extends ResourceEditorInput {
    static ID: string;
    private _willDispose;
    willDispose: Event<void>;
    constructor(resource: URI, textModelResolverService: ITextModelResolverService);
    getResource(): URI;
    getTypeId(): string;
    supportsSplitEditor(): boolean;
    matches(other: any): boolean;
    dispose(): void;
}
export declare class DefaultPreferencesEditor extends BaseTextEditor {
    private untitledEditorService;
    private preferencesService;
    private modelService;
    private modeService;
    static ID: string;
    private static VIEW_STATE;
    private inputDisposeListener;
    private defaultSettingHeaderWidget;
    private delayedFilterLogging;
    constructor(telemetryService: ITelemetryService, instantiationService: IInstantiationService, contextService: IWorkspaceContextService, storageService: IStorageService, messageService: IMessageService, configurationService: IConfigurationService, eventService: IEventService, editorService: IWorkbenchEditorService, themeService: IThemeService, untitledEditorService: IUntitledEditorService, preferencesService: IPreferencesService, modelService: IModelService, modeService: IModeService);
    createEditorControl(parent: Builder): editorCommon.IEditor;
    protected getCodeEditorOptions(): editorCommon.IEditorOptions;
    setInput(input: DefaultPreferencesEditorInput, options: EditorOptions): TPromise<void>;
    layout(dimension: Dimension): void;
    focus(): void;
    private updateInput();
    private filterPreferences(filter);
    private focusNextPreference();
    clearInput(): void;
    private getDefaultPreferencesContribution();
    protected restoreViewState(input: EditorInput): void;
    private saveState(input);
    private listenToInput(input);
    private reportFilteringUsed(filter);
}
export interface IPreferencesRenderer {
    render(): any;
    dispose(): any;
}
export declare abstract class PreferencesEditorContribution extends Disposable implements editorCommon.IEditorContribution {
    protected editor: ICodeEditor;
    protected instantiationService: IInstantiationService;
    protected preferencesService: IPreferencesService;
    static ID: string;
    private preferencesRenderer;
    constructor(editor: ICodeEditor, instantiationService: IInstantiationService, preferencesService: IPreferencesService);
    private onModelChanged();
    getId(): string;
    getPreferencesRenderer(): IPreferencesRenderer;
    protected abstract createPreferencesRenderer(editorModel: IPreferencesEditorModel): IPreferencesRenderer;
    private disposePreferencesRenderer();
    dispose(): void;
}
export declare class DefaultSettingsEditorContribution extends PreferencesEditorContribution implements editorCommon.IEditorContribution {
    protected createPreferencesRenderer(editorModel: IPreferencesEditorModel): IPreferencesRenderer;
}
export declare class SettingsEditorContribution extends PreferencesEditorContribution implements editorCommon.IEditorContribution {
    protected createPreferencesRenderer(editorModel: IPreferencesEditorModel): IPreferencesRenderer;
}
export declare class SettingsRenderer extends Disposable implements IPreferencesRenderer {
    protected editor: ICodeEditor;
    protected settingsEditorModel: SettingsEditorModel;
    protected preferencesService: IPreferencesService;
    protected instantiationService: IInstantiationService;
    private copySettingActionRenderer;
    private modelChangeDelayer;
    constructor(editor: ICodeEditor, settingsEditorModel: SettingsEditorModel, preferencesService: IPreferencesService, instantiationService: IInstantiationService);
    render(): void;
    private onModelChanged();
}
export declare class DefaultSettingsRenderer extends Disposable implements IPreferencesRenderer {
    protected editor: ICodeEditor;
    protected settingsEditorModel: DefaultSettingsEditorModel;
    protected preferencesService: IPreferencesService;
    protected instantiationService: IInstantiationService;
    private defaultSettingsEditorContextKey;
    private settingsGroupTitleRenderer;
    private filteredMatchesRenderer;
    private focusNextSettingRenderer;
    private hiddenAreasRenderer;
    private copySettingActionRenderer;
    private settingsCountWidget;
    constructor(editor: ICodeEditor, settingsEditorModel: DefaultSettingsEditorModel, preferencesService: IPreferencesService, contextKeyService: IContextKeyService, instantiationService: IInstantiationService);
    render(): void;
    filterPreferences(filter: string): void;
    focusNextSetting(): void;
    collapseAll(): void;
    private getCount(settingsGroups);
    dispose(): void;
}
export interface HiddenAreasProvider {
    onHiddenAreasChanged: Event<void>;
    hiddenAreas: editorCommon.IRange[];
}
export declare class ParanthesisHidingRenderer extends Disposable implements HiddenAreasProvider {
    private editor;
    private _onHiddenAreasChanged;
    readonly onHiddenAreasChanged: Event<void>;
    constructor(editor: ICodeEditor);
    readonly hiddenAreas: editorCommon.IRange[];
}
export declare class SettingsGroupTitleRenderer extends Disposable implements HiddenAreasProvider {
    private editor;
    private instantiationService;
    private _onHiddenAreasChanged;
    readonly onHiddenAreasChanged: Event<void>;
    private settingsGroups;
    private hiddenGroups;
    private settingsGroupTitleWidgets;
    private disposables;
    constructor(editor: ICodeEditor, instantiationService: IInstantiationService);
    readonly hiddenAreas: editorCommon.IRange[];
    render(settingsGroups: ISettingsGroup[]): void;
    showGroup(group: number): void;
    showSetting(setting: ISetting): void;
    collapseAll(): void;
    private onToggled(collapsed, group);
    private disposeWidgets();
    dispose(): void;
}
export declare class HiddenAreasRenderer extends Disposable {
    private editor;
    private hiddenAreasProviders;
    private instantiationService;
    constructor(editor: ICodeEditor, hiddenAreasProviders: HiddenAreasProvider[], instantiationService: IInstantiationService);
    render(): void;
    dispose(): void;
}
export declare class FilteredMatchesRenderer extends Disposable implements HiddenAreasProvider {
    private editor;
    private instantiationService;
    private decorationIds;
    hiddenAreas: editorCommon.IRange[];
    private _onHiddenAreasChanged;
    readonly onHiddenAreasChanged: Event<void>;
    constructor(editor: ICodeEditor, instantiationService: IInstantiationService);
    render(result: IFilterResult): void;
    private createDecoration(range, model);
    private computeHiddenRanges(filteredGroups, allSettingsGroups, model);
    private containsLine(lineNumber, settingsGroup);
    private createCompleteRange(range, model);
    dispose(): void;
}
export declare class FocusNextSettingRenderer extends Disposable {
    private editor;
    private iterator;
    private decorationIds;
    constructor(editor: ICodeEditor);
    focusNext(): ISetting;
    render(filteredGroups: ISettingsGroup[]): void;
    private clear();
    dispose(): void;
}
export declare class CopySettingActionRenderer extends Disposable {
    private editor;
    private isDefaultSettings;
    private settingsService;
    private contextMenuService;
    private decorationIds;
    private settingsGroups;
    private model;
    constructor(editor: ICodeEditor, isDefaultSettings: boolean, settingsService: IPreferencesService, contextMenuService: IContextMenuService);
    render(settingsGroups: ISettingsGroup[]): void;
    private createDecorations(model);
    private createSettingDecoration(setting, model);
    private onEditorMouseUp(e);
    private getConfigurationsMap();
    private onClick(e);
    private getSetting(lineNumber);
    private getActions(setting, jsonSchema);
    dispose(): void;
}
