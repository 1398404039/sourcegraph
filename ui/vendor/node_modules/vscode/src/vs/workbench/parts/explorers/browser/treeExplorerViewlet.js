/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var winjs_base_1 = require("vs/base/common/winjs.base");
var splitview_1 = require("vs/base/browser/ui/splitview/splitview");
var viewlet_1 = require("vs/workbench/browser/viewlet");
var telemetry_1 = require("vs/platform/telemetry/common/telemetry");
var instantiation_1 = require("vs/platform/instantiation/common/instantiation");
var treeExplorerView_1 = require("vs/workbench/parts/explorers/browser/views/treeExplorerView");
var treeExplorerViewer_1 = require("vs/workbench/parts/explorers/browser/views/treeExplorerViewer");
var TreeExplorerViewlet = (function (_super) {
    __extends(TreeExplorerViewlet, _super);
    function TreeExplorerViewlet(viewletId, telemetryService, instantiationService) {
        var _this = _super.call(this, viewletId, telemetryService) || this;
        _this.instantiationService = instantiationService;
        _this.viewletState = new treeExplorerViewer_1.TreeExplorerViewletState();
        _this.viewletId = viewletId;
        var tokens = viewletId.split('.');
        _this.treeNodeProviderId = tokens[tokens.length - 1];
        return _this;
    }
    TreeExplorerViewlet.prototype.getId = function () {
        return this.viewletId;
    };
    TreeExplorerViewlet.prototype.create = function (parent) {
        _super.prototype.create.call(this, parent);
        this.viewletContainer = parent.div();
        this.addTreeView();
        return winjs_base_1.TPromise.as(null);
    };
    TreeExplorerViewlet.prototype.layout = function (dimension) {
        this.view.layout(dimension.height, splitview_1.Orientation.VERTICAL);
    };
    TreeExplorerViewlet.prototype.setVisible = function (visible) {
        var _this = this;
        return _super.prototype.setVisible.call(this, visible).then(function () {
            _this.view.setVisible(visible).done();
        });
    };
    TreeExplorerViewlet.prototype.getActions = function () {
        return this.view.getActions();
    };
    TreeExplorerViewlet.prototype.addTreeView = function () {
        var headerSize = 0; // Hide header (root node) by default
        this.view = this.instantiationService.createInstance(treeExplorerView_1.TreeExplorerView, this.viewletState, this.treeNodeProviderId, this.getActionRunner(), headerSize);
        this.view.render(this.viewletContainer.getHTMLElement(), splitview_1.Orientation.VERTICAL);
    };
    TreeExplorerViewlet.prototype.focus = function () {
        _super.prototype.focus.call(this);
        if (this.view) {
            this.view.focusBody();
        }
    };
    TreeExplorerViewlet.prototype.shutdown = function () {
        if (this.view) {
            this.view.shutdown();
        }
        _super.prototype.shutdown.call(this);
    };
    TreeExplorerViewlet.prototype.dispose = function () {
        if (this.view) {
            this.view = null;
            this.view.dispose();
        }
        _super.prototype.dispose.call(this);
    };
    return TreeExplorerViewlet;
}(viewlet_1.Viewlet));
TreeExplorerViewlet = __decorate([
    __param(1, telemetry_1.ITelemetryService),
    __param(2, instantiation_1.IInstantiationService)
], TreeExplorerViewlet);
exports.TreeExplorerViewlet = TreeExplorerViewlet;
