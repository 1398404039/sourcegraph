/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var nls = require("vs/nls");
var os = require("os");
var actions_1 = require("vs/base/common/actions");
var editorCommon_1 = require("vs/editor/common/editorCommon");
var codeEditorService_1 = require("vs/editor/common/services/codeEditorService");
var terminal_1 = require("vs/workbench/parts/terminal/common/terminal");
var actionbar_1 = require("vs/base/browser/ui/actionbar/actionbar");
var winjs_base_1 = require("vs/base/common/winjs.base");
var panel_1 = require("vs/workbench/browser/panel");
var partService_1 = require("vs/workbench/services/part/common/partService");
var panelService_1 = require("vs/workbench/services/panel/common/panelService");
var ToggleTerminalAction = (function (_super) {
    __extends(ToggleTerminalAction, _super);
    function ToggleTerminalAction(id, label, panelService, partService) {
        return _super.call(this, id, label, terminal_1.TERMINAL_PANEL_ID, panelService, partService) || this;
    }
    return ToggleTerminalAction;
}(panel_1.TogglePanelAction));
ToggleTerminalAction.ID = 'workbench.action.terminal.toggleTerminal';
ToggleTerminalAction.LABEL = nls.localize('workbench.action.terminal.toggleTerminal', "Toggle Integrated Terminal");
ToggleTerminalAction = __decorate([
    __param(2, panelService_1.IPanelService),
    __param(3, partService_1.IPartService)
], ToggleTerminalAction);
exports.ToggleTerminalAction = ToggleTerminalAction;
var KillTerminalAction = (function (_super) {
    __extends(KillTerminalAction, _super);
    function KillTerminalAction(id, label, terminalService) {
        var _this = _super.call(this, id, label) || this;
        _this.terminalService = terminalService;
        _this.class = 'terminal-action kill';
        return _this;
    }
    KillTerminalAction.prototype.run = function (event) {
        var terminalInstance = this.terminalService.getActiveInstance();
        if (terminalInstance) {
            this.terminalService.getActiveInstance().dispose();
            if (this.terminalService.terminalInstances.length > 0) {
                this.terminalService.showPanel(true);
            }
        }
        return winjs_base_1.TPromise.as(void 0);
    };
    return KillTerminalAction;
}(actions_1.Action));
KillTerminalAction.ID = 'workbench.action.terminal.kill';
KillTerminalAction.LABEL = nls.localize('workbench.action.terminal.kill', "Kill the Active Terminal Instance");
KillTerminalAction.PANEL_LABEL = nls.localize('workbench.action.terminal.kill.short', "Kill Terminal");
KillTerminalAction = __decorate([
    __param(2, terminal_1.ITerminalService)
], KillTerminalAction);
exports.KillTerminalAction = KillTerminalAction;
/**
 * Copies the terminal selection. Note that since the command palette takes focus from the terminal,
 * this can only be triggered via a keybinding.
 */
var CopyTerminalSelectionAction = (function (_super) {
    __extends(CopyTerminalSelectionAction, _super);
    function CopyTerminalSelectionAction(id, label, terminalService) {
        var _this = _super.call(this, id, label) || this;
        _this.terminalService = terminalService;
        return _this;
    }
    CopyTerminalSelectionAction.prototype.run = function (event) {
        var terminalInstance = this.terminalService.getActiveInstance();
        if (terminalInstance) {
            terminalInstance.copySelection();
        }
        return winjs_base_1.TPromise.as(void 0);
    };
    return CopyTerminalSelectionAction;
}(actions_1.Action));
CopyTerminalSelectionAction.ID = 'workbench.action.terminal.copySelection';
CopyTerminalSelectionAction.LABEL = nls.localize('workbench.action.terminal.copySelection', "Copy Selection");
CopyTerminalSelectionAction = __decorate([
    __param(2, terminal_1.ITerminalService)
], CopyTerminalSelectionAction);
exports.CopyTerminalSelectionAction = CopyTerminalSelectionAction;
var CreateNewTerminalAction = (function (_super) {
    __extends(CreateNewTerminalAction, _super);
    function CreateNewTerminalAction(id, label, terminalService) {
        var _this = _super.call(this, id, label) || this;
        _this.terminalService = terminalService;
        _this.class = 'terminal-action new';
        return _this;
    }
    CreateNewTerminalAction.prototype.run = function (event) {
        this.terminalService.setActiveInstance(this.terminalService.createInstance());
        return this.terminalService.showPanel(true);
    };
    return CreateNewTerminalAction;
}(actions_1.Action));
CreateNewTerminalAction.ID = 'workbench.action.terminal.new';
CreateNewTerminalAction.LABEL = nls.localize('workbench.action.terminal.new', "Create New Integrated Terminal");
CreateNewTerminalAction.PANEL_LABEL = nls.localize('workbench.action.terminal.new.short', "New Terminal");
CreateNewTerminalAction = __decorate([
    __param(2, terminal_1.ITerminalService)
], CreateNewTerminalAction);
exports.CreateNewTerminalAction = CreateNewTerminalAction;
var FocusTerminalAction = (function (_super) {
    __extends(FocusTerminalAction, _super);
    function FocusTerminalAction(id, label, terminalService) {
        var _this = _super.call(this, id, label) || this;
        _this.terminalService = terminalService;
        return _this;
    }
    FocusTerminalAction.prototype.run = function (event) {
        var terminalInstance = this.terminalService.getActiveInstance();
        if (!terminalInstance) {
            terminalInstance = this.terminalService.createInstance();
        }
        this.terminalService.setActiveInstance(terminalInstance);
        return this.terminalService.showPanel(true);
    };
    return FocusTerminalAction;
}(actions_1.Action));
FocusTerminalAction.ID = 'workbench.action.terminal.focus';
FocusTerminalAction.LABEL = nls.localize('workbench.action.terminal.focus', "Focus Terminal");
FocusTerminalAction = __decorate([
    __param(2, terminal_1.ITerminalService)
], FocusTerminalAction);
exports.FocusTerminalAction = FocusTerminalAction;
var FocusNextTerminalAction = (function (_super) {
    __extends(FocusNextTerminalAction, _super);
    function FocusNextTerminalAction(id, label, terminalService) {
        var _this = _super.call(this, id, label) || this;
        _this.terminalService = terminalService;
        return _this;
    }
    FocusNextTerminalAction.prototype.run = function (event) {
        this.terminalService.setActiveInstanceToNext();
        return this.terminalService.showPanel(true);
    };
    return FocusNextTerminalAction;
}(actions_1.Action));
FocusNextTerminalAction.ID = 'workbench.action.terminal.focusNext';
FocusNextTerminalAction.LABEL = nls.localize('workbench.action.terminal.focusNext', "Focus Next Terminal");
FocusNextTerminalAction = __decorate([
    __param(2, terminal_1.ITerminalService)
], FocusNextTerminalAction);
exports.FocusNextTerminalAction = FocusNextTerminalAction;
var FocusPreviousTerminalAction = (function (_super) {
    __extends(FocusPreviousTerminalAction, _super);
    function FocusPreviousTerminalAction(id, label, terminalService) {
        var _this = _super.call(this, id, label) || this;
        _this.terminalService = terminalService;
        return _this;
    }
    FocusPreviousTerminalAction.prototype.run = function (event) {
        this.terminalService.setActiveInstanceToPrevious();
        return this.terminalService.showPanel(true);
    };
    return FocusPreviousTerminalAction;
}(actions_1.Action));
FocusPreviousTerminalAction.ID = 'workbench.action.terminal.focusPrevious';
FocusPreviousTerminalAction.LABEL = nls.localize('workbench.action.terminal.focusPrevious', "Focus Previous Terminal");
FocusPreviousTerminalAction = __decorate([
    __param(2, terminal_1.ITerminalService)
], FocusPreviousTerminalAction);
exports.FocusPreviousTerminalAction = FocusPreviousTerminalAction;
var TerminalPasteAction = (function (_super) {
    __extends(TerminalPasteAction, _super);
    function TerminalPasteAction(id, label, terminalService) {
        var _this = _super.call(this, id, label) || this;
        _this.terminalService = terminalService;
        return _this;
    }
    TerminalPasteAction.prototype.run = function (event) {
        var terminalInstance = this.terminalService.getActiveInstance();
        if (!terminalInstance) {
            terminalInstance = this.terminalService.createInstance();
        }
        terminalInstance.paste();
        return winjs_base_1.TPromise.as(void 0);
    };
    return TerminalPasteAction;
}(actions_1.Action));
TerminalPasteAction.ID = 'workbench.action.terminal.paste';
TerminalPasteAction.LABEL = nls.localize('workbench.action.terminal.paste', "Paste into Active Terminal");
TerminalPasteAction = __decorate([
    __param(2, terminal_1.ITerminalService)
], TerminalPasteAction);
exports.TerminalPasteAction = TerminalPasteAction;
var RunSelectedTextInTerminalAction = (function (_super) {
    __extends(RunSelectedTextInTerminalAction, _super);
    function RunSelectedTextInTerminalAction(id, label, codeEditorService, terminalService) {
        var _this = _super.call(this, id, label) || this;
        _this.codeEditorService = codeEditorService;
        _this.terminalService = terminalService;
        return _this;
    }
    RunSelectedTextInTerminalAction.prototype.run = function (event) {
        var terminalInstance = this.terminalService.getActiveInstance();
        if (!terminalInstance) {
            terminalInstance = this.terminalService.createInstance();
        }
        var editor = this.codeEditorService.getFocusedCodeEditor();
        if (editor) {
            var selection = editor.getSelection();
            var text = void 0;
            if (selection.isEmpty()) {
                text = editor.getValue();
            }
            else {
                var endOfLinePreference = os.EOL === '\n' ? editorCommon_1.EndOfLinePreference.LF : editorCommon_1.EndOfLinePreference.CRLF;
                text = editor.getModel().getValueInRange(selection, endOfLinePreference);
            }
            terminalInstance.sendText(text, true);
        }
        return winjs_base_1.TPromise.as(void 0);
    };
    return RunSelectedTextInTerminalAction;
}(actions_1.Action));
RunSelectedTextInTerminalAction.ID = 'workbench.action.terminal.runSelectedText';
RunSelectedTextInTerminalAction.LABEL = nls.localize('workbench.action.terminal.runSelectedText', "Run Selected Text In Active Terminal");
RunSelectedTextInTerminalAction = __decorate([
    __param(2, codeEditorService_1.ICodeEditorService),
    __param(3, terminal_1.ITerminalService)
], RunSelectedTextInTerminalAction);
exports.RunSelectedTextInTerminalAction = RunSelectedTextInTerminalAction;
var SwitchTerminalInstanceAction = (function (_super) {
    __extends(SwitchTerminalInstanceAction, _super);
    function SwitchTerminalInstanceAction(id, label, terminalService) {
        var _this = _super.call(this, SwitchTerminalInstanceAction.ID, SwitchTerminalInstanceAction.LABEL) || this;
        _this.terminalService = terminalService;
        _this.class = 'terminal-action switch-terminal-instance';
        return _this;
    }
    SwitchTerminalInstanceAction.prototype.run = function (item) {
        if (!item) {
            return winjs_base_1.TPromise.as(null);
        }
        var selectedTerminalIndex = parseInt(item.split(':')[0], 10) - 1;
        this.terminalService.setActiveInstanceByIndex(selectedTerminalIndex);
        return this.terminalService.showPanel(true);
    };
    return SwitchTerminalInstanceAction;
}(actions_1.Action));
SwitchTerminalInstanceAction.ID = 'workbench.action.terminal.switchTerminalInstance';
SwitchTerminalInstanceAction.LABEL = nls.localize('workbench.action.terminal.switchTerminalInstance', "Switch Terminal Instance");
SwitchTerminalInstanceAction = __decorate([
    __param(2, terminal_1.ITerminalService)
], SwitchTerminalInstanceAction);
exports.SwitchTerminalInstanceAction = SwitchTerminalInstanceAction;
var SwitchTerminalInstanceActionItem = (function (_super) {
    __extends(SwitchTerminalInstanceActionItem, _super);
    function SwitchTerminalInstanceActionItem(action, terminalService) {
        var _this = _super.call(this, null, action, terminalService.getInstanceLabels(), terminalService.activeTerminalInstanceIndex) || this;
        _this.terminalService = terminalService;
        _this.toDispose.push(terminalService.onInstancesChanged(_this._updateItems, _this));
        _this.toDispose.push(terminalService.onActiveInstanceChanged(_this._updateItems, _this));
        _this.toDispose.push(terminalService.onInstanceTitleChanged(_this._updateItems, _this));
        return _this;
    }
    SwitchTerminalInstanceActionItem.prototype._updateItems = function () {
        this.setOptions(this.terminalService.getInstanceLabels(), this.terminalService.activeTerminalInstanceIndex);
    };
    return SwitchTerminalInstanceActionItem;
}(actionbar_1.SelectActionItem));
SwitchTerminalInstanceActionItem = __decorate([
    __param(1, terminal_1.ITerminalService)
], SwitchTerminalInstanceActionItem);
exports.SwitchTerminalInstanceActionItem = SwitchTerminalInstanceActionItem;
var ScrollDownTerminalAction = (function (_super) {
    __extends(ScrollDownTerminalAction, _super);
    function ScrollDownTerminalAction(id, label, terminalService) {
        var _this = _super.call(this, id, label) || this;
        _this.terminalService = terminalService;
        return _this;
    }
    ScrollDownTerminalAction.prototype.run = function (event) {
        var terminalInstance = this.terminalService.getActiveInstance();
        if (terminalInstance) {
            terminalInstance.scrollDownLine();
        }
        return winjs_base_1.TPromise.as(void 0);
    };
    return ScrollDownTerminalAction;
}(actions_1.Action));
ScrollDownTerminalAction.ID = 'workbench.action.terminal.scrollDown';
ScrollDownTerminalAction.LABEL = nls.localize('workbench.action.terminal.scrollDown', "Scroll Down (Line)");
ScrollDownTerminalAction = __decorate([
    __param(2, terminal_1.ITerminalService)
], ScrollDownTerminalAction);
exports.ScrollDownTerminalAction = ScrollDownTerminalAction;
var ScrollDownPageTerminalAction = (function (_super) {
    __extends(ScrollDownPageTerminalAction, _super);
    function ScrollDownPageTerminalAction(id, label, terminalService) {
        var _this = _super.call(this, id, label) || this;
        _this.terminalService = terminalService;
        return _this;
    }
    ScrollDownPageTerminalAction.prototype.run = function (event) {
        var terminalInstance = this.terminalService.getActiveInstance();
        if (terminalInstance) {
            terminalInstance.scrollDownPage();
        }
        return winjs_base_1.TPromise.as(void 0);
    };
    return ScrollDownPageTerminalAction;
}(actions_1.Action));
ScrollDownPageTerminalAction.ID = 'workbench.action.terminal.scrollDownPage';
ScrollDownPageTerminalAction.LABEL = nls.localize('workbench.action.terminal.scrollDownPage', "Scroll Down (Page)");
ScrollDownPageTerminalAction = __decorate([
    __param(2, terminal_1.ITerminalService)
], ScrollDownPageTerminalAction);
exports.ScrollDownPageTerminalAction = ScrollDownPageTerminalAction;
var ScrollToBottomTerminalAction = (function (_super) {
    __extends(ScrollToBottomTerminalAction, _super);
    function ScrollToBottomTerminalAction(id, label, terminalService) {
        var _this = _super.call(this, id, label) || this;
        _this.terminalService = terminalService;
        return _this;
    }
    ScrollToBottomTerminalAction.prototype.run = function (event) {
        var terminalInstance = this.terminalService.getActiveInstance();
        if (terminalInstance) {
            terminalInstance.scrollToBottom();
        }
        return winjs_base_1.TPromise.as(void 0);
    };
    return ScrollToBottomTerminalAction;
}(actions_1.Action));
ScrollToBottomTerminalAction.ID = 'workbench.action.terminal.scrollToBottom';
ScrollToBottomTerminalAction.LABEL = nls.localize('workbench.action.terminal.scrollToBottom', "Scroll to Bottom");
ScrollToBottomTerminalAction = __decorate([
    __param(2, terminal_1.ITerminalService)
], ScrollToBottomTerminalAction);
exports.ScrollToBottomTerminalAction = ScrollToBottomTerminalAction;
var ScrollUpTerminalAction = (function (_super) {
    __extends(ScrollUpTerminalAction, _super);
    function ScrollUpTerminalAction(id, label, terminalService) {
        var _this = _super.call(this, id, label) || this;
        _this.terminalService = terminalService;
        return _this;
    }
    ScrollUpTerminalAction.prototype.run = function (event) {
        var terminalInstance = this.terminalService.getActiveInstance();
        if (terminalInstance) {
            terminalInstance.scrollUpLine();
        }
        return winjs_base_1.TPromise.as(void 0);
    };
    return ScrollUpTerminalAction;
}(actions_1.Action));
ScrollUpTerminalAction.ID = 'workbench.action.terminal.scrollUp';
ScrollUpTerminalAction.LABEL = nls.localize('workbench.action.terminal.scrollUp', "Scroll Up (Line)");
ScrollUpTerminalAction = __decorate([
    __param(2, terminal_1.ITerminalService)
], ScrollUpTerminalAction);
exports.ScrollUpTerminalAction = ScrollUpTerminalAction;
var ScrollUpPageTerminalAction = (function (_super) {
    __extends(ScrollUpPageTerminalAction, _super);
    function ScrollUpPageTerminalAction(id, label, terminalService) {
        var _this = _super.call(this, id, label) || this;
        _this.terminalService = terminalService;
        return _this;
    }
    ScrollUpPageTerminalAction.prototype.run = function (event) {
        var terminalInstance = this.terminalService.getActiveInstance();
        if (terminalInstance) {
            terminalInstance.scrollUpPage();
        }
        return winjs_base_1.TPromise.as(void 0);
    };
    return ScrollUpPageTerminalAction;
}(actions_1.Action));
ScrollUpPageTerminalAction.ID = 'workbench.action.terminal.scrollUpPage';
ScrollUpPageTerminalAction.LABEL = nls.localize('workbench.action.terminal.scrollUpPage', "Scroll Up (Page)");
ScrollUpPageTerminalAction = __decorate([
    __param(2, terminal_1.ITerminalService)
], ScrollUpPageTerminalAction);
exports.ScrollUpPageTerminalAction = ScrollUpPageTerminalAction;
var ScrollToTopTerminalAction = (function (_super) {
    __extends(ScrollToTopTerminalAction, _super);
    function ScrollToTopTerminalAction(id, label, terminalService) {
        var _this = _super.call(this, id, label) || this;
        _this.terminalService = terminalService;
        return _this;
    }
    ScrollToTopTerminalAction.prototype.run = function (event) {
        var terminalInstance = this.terminalService.getActiveInstance();
        if (terminalInstance) {
            terminalInstance.scrollToTop();
        }
        return winjs_base_1.TPromise.as(void 0);
    };
    return ScrollToTopTerminalAction;
}(actions_1.Action));
ScrollToTopTerminalAction.ID = 'workbench.action.terminal.scrollToTop';
ScrollToTopTerminalAction.LABEL = nls.localize('workbench.action.terminal.scrollToTop', "Scroll to Top");
ScrollToTopTerminalAction = __decorate([
    __param(2, terminal_1.ITerminalService)
], ScrollToTopTerminalAction);
exports.ScrollToTopTerminalAction = ScrollToTopTerminalAction;
var ClearTerminalAction = (function (_super) {
    __extends(ClearTerminalAction, _super);
    function ClearTerminalAction(id, label, terminalService) {
        var _this = _super.call(this, id, label) || this;
        _this.terminalService = terminalService;
        return _this;
    }
    ClearTerminalAction.prototype.run = function (event) {
        var terminalInstance = this.terminalService.getActiveInstance();
        if (terminalInstance) {
            terminalInstance.clear();
        }
        return winjs_base_1.TPromise.as(void 0);
    };
    return ClearTerminalAction;
}(actions_1.Action));
ClearTerminalAction.ID = 'workbench.action.terminal.clear';
ClearTerminalAction.LABEL = nls.localize('workbench.action.terminal.clear', "Clear");
ClearTerminalAction = __decorate([
    __param(2, terminal_1.ITerminalService)
], ClearTerminalAction);
exports.ClearTerminalAction = ClearTerminalAction;
