/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
require("./media/scmViewlet.css");
var event_1 = require("vs/base/common/event");
var lifecycle_1 = require("vs/base/common/lifecycle");
var contextkey_1 = require("vs/platform/contextkey/common/contextkey");
var actions_1 = require("vs/platform/actions/common/actions");
var uri_1 = require("vs/base/common/uri");
var menuItemActionItem_1 = require("vs/platform/actions/browser/menuItemActionItem");
var scm_1 = require("vs/workbench/services/scm/common/scm");
var SCMMenus = (function () {
    function SCMMenus(contextKeyService, scmService, menuService) {
        this.contextKeyService = contextKeyService;
        this.scmService = scmService;
        this.menuService = menuService;
        this.disposables = [];
        this.titleDisposable = lifecycle_1.empty;
        this.titleActions = [];
        this.titleSecondaryActions = [];
        this._onDidChangeTitle = new event_1.Emitter();
        this.setActiveProvider(this.scmService.activeProvider);
        this.scmService.onDidChangeProvider(this.setActiveProvider, this, this.disposables);
    }
    Object.defineProperty(SCMMenus.prototype, "onDidChangeTitle", {
        get: function () { return this._onDidChangeTitle.event; },
        enumerable: true,
        configurable: true
    });
    SCMMenus.prototype.setActiveProvider = function (activeProvider) {
        var _this = this;
        if (this.titleDisposable) {
            this.titleDisposable.dispose();
            this.titleDisposable = lifecycle_1.empty;
        }
        if (!activeProvider) {
            return;
        }
        this.activeProviderId = activeProvider.id;
        var titleMenu = this.menuService.createMenu(actions_1.MenuId.SCMTitle, this.contextKeyService);
        var updateActions = function () {
            _this.titleActions = [];
            _this.titleSecondaryActions = [];
            menuItemActionItem_1.fillInActions(titleMenu, null, { primary: _this.titleActions, secondary: _this.titleSecondaryActions });
            _this._onDidChangeTitle.fire();
        };
        var listener = titleMenu.onDidChange(updateActions);
        updateActions();
        this.titleDisposable = lifecycle_1.toDisposable(function () {
            listener.dispose();
            titleMenu.dispose();
            _this.titleActions = [];
            _this.titleSecondaryActions = [];
        });
    };
    SCMMenus.prototype.getTitleActions = function () {
        return this.titleActions;
    };
    SCMMenus.prototype.getTitleSecondaryActions = function () {
        return this.titleSecondaryActions;
    };
    SCMMenus.prototype.getResourceGroupActions = function (group) {
        return this.getActions(actions_1.MenuId.SCMResourceGroupContext, this.getSCMResourceGroupURI(group), group.id).primary;
    };
    SCMMenus.prototype.getResourceGroupContextActions = function (group) {
        return this.getActions(actions_1.MenuId.SCMResourceGroupContext, this.getSCMResourceGroupURI(group), group.id).secondary;
    };
    SCMMenus.prototype.getResourceActions = function (resource) {
        return this.getActions(actions_1.MenuId.SCMResourceContext, this.getSCMResourceURI(resource), resource.resourceGroupId).primary;
    };
    SCMMenus.prototype.getResourceContextActions = function (resource) {
        return this.getActions(actions_1.MenuId.SCMResourceContext, this.getSCMResourceURI(resource), resource.resourceGroupId).secondary;
    };
    SCMMenus.prototype.getSCMResourceGroupURI = function (resourceGroup) {
        return uri_1.default.from({
            scheme: 'scm',
            authority: this.activeProviderId,
            path: "/" + resourceGroup.id
        });
    };
    SCMMenus.prototype.getSCMResourceURI = function (resource) {
        return uri_1.default.from({
            scheme: 'scm',
            authority: this.activeProviderId,
            path: "/" + resource.resourceGroupId + "/" + JSON.stringify(resource.uri)
        });
    };
    SCMMenus.prototype.getActions = function (menuId, context, resourceGroupId) {
        if (!this.scmService.activeProvider) {
            return SCMMenus.NoActions;
        }
        var contextKeyService = this.contextKeyService.createScoped();
        contextKeyService.createKey('scmResourceGroup', resourceGroupId);
        var menu = this.menuService.createMenu(menuId, contextKeyService);
        var primary = [];
        var secondary = [];
        var result = { primary: primary, secondary: secondary };
        menuItemActionItem_1.fillInActions(menu, context, result, function (g) { return g === 'inline'; });
        menu.dispose();
        contextKeyService.dispose();
        return result;
    };
    SCMMenus.prototype.dispose = function () {
        this.disposables = lifecycle_1.dispose(this.disposables);
    };
    return SCMMenus;
}());
SCMMenus.NoActions = { primary: [], secondary: [] };
SCMMenus = __decorate([
    __param(0, contextkey_1.IContextKeyService),
    __param(1, scm_1.ISCMService),
    __param(2, actions_1.IMenuService)
], SCMMenus);
exports.SCMMenus = SCMMenus;
