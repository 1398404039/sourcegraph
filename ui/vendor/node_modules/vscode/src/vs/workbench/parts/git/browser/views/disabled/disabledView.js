/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
require("./disabledView.css");
var nls = require("vs/nls");
var winjs = require("vs/base/common/winjs.base");
var ee = require("vs/base/common/eventEmitter");
var builder = require("vs/base/browser/builder");
var $ = builder.$;
var DisabledView = (function (_super) {
    __extends(DisabledView, _super);
    function DisabledView() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.ID = 'disabled';
        return _this;
    }
    Object.defineProperty(DisabledView.prototype, "element", {
        get: function () {
            if (!this._element) {
                this.render();
            }
            return this._element;
        },
        enumerable: true,
        configurable: true
    });
    DisabledView.prototype.render = function () {
        this._element = $([
            '<div class="disabled-view">',
            '<p>', nls.localize('disabled', "Git is disabled in the settings."), '</p>',
            '</div>'
        ].join('')).getHTMLElement();
    };
    DisabledView.prototype.focus = function () {
        return;
    };
    DisabledView.prototype.layout = function (dimension) {
        return;
    };
    DisabledView.prototype.setVisible = function (visible) {
        return winjs.TPromise.as(null);
    };
    DisabledView.prototype.getControl = function () {
        return null;
    };
    DisabledView.prototype.getActions = function () {
        return [];
    };
    DisabledView.prototype.getSecondaryActions = function () {
        return [];
    };
    return DisabledView;
}(ee.EventEmitter));
exports.DisabledView = DisabledView;
