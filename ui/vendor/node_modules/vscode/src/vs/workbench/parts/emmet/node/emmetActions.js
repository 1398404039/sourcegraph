/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
/// <reference path="emmet.d.ts" />
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var winjs_base_1 = require("vs/base/common/winjs.base");
var editorCommon_1 = require("vs/editor/common/editorCommon");
var editorCommonExtensions_1 = require("vs/editor/common/editorCommonExtensions");
var instantiation_1 = require("vs/platform/instantiation/common/instantiation");
var TMSyntax_1 = require("vs/editor/node/textMate/TMSyntax");
var editorAccessor_1 = require("vs/workbench/parts/emmet/node/editorAccessor");
var configuration_1 = require("vs/platform/configuration/common/configuration");
var extensions_1 = require("vs/platform/extensions/common/extensions");
var GrammarContributions = (function () {
    function GrammarContributions(contributions) {
        if (GrammarContributions._grammars === null) {
            this.fillModeScopeMap(contributions);
        }
    }
    GrammarContributions.prototype.fillModeScopeMap = function (contributions) {
        GrammarContributions._grammars = {};
        contributions.forEach(function (contribution) {
            contribution.value.forEach(function (grammar) {
                if (grammar.language && grammar.scopeName) {
                    GrammarContributions._grammars[grammar.language] = grammar.scopeName;
                }
            });
        });
    };
    GrammarContributions.prototype.getGrammar = function (mode) {
        return GrammarContributions._grammars[mode];
    };
    return GrammarContributions;
}());
GrammarContributions._grammars = null;
var LazyEmmet = (function () {
    function LazyEmmet() {
        this._emmetPromise = null;
    }
    LazyEmmet.withConfiguredEmmet = function (configurationService, callback) {
        return LazyEmmet._INSTANCE.withEmmetPreferences(configurationService, callback);
    };
    LazyEmmet.prototype.withEmmetPreferences = function (configurationService, callback) {
        var _this = this;
        return this._loadEmmet().then(function (_emmet) {
            _this._withEmmetPreferences(configurationService, _emmet, callback);
        });
    };
    LazyEmmet.prototype._loadEmmet = function () {
        if (!this._emmetPromise) {
            this._emmetPromise = new winjs_base_1.TPromise(function (c, e) {
                require(['emmet'], c, e);
            });
        }
        return this._emmetPromise;
    };
    LazyEmmet.prototype.updateEmmetPreferences = function (configurationService, _emmet) {
        var emmetPreferences = configurationService.getConfiguration().emmet;
        try {
            _emmet.loadPreferences(emmetPreferences.preferences);
            _emmet.loadProfiles(emmetPreferences.syntaxProfiles);
        }
        catch (err) {
        }
    };
    LazyEmmet.prototype.resetEmmetPreferences = function (configurationService, _emmet) {
        _emmet.preferences.reset();
        _emmet.profile.reset();
    };
    LazyEmmet.prototype._withEmmetPreferences = function (configurationService, _emmet, callback) {
        try {
            this.updateEmmetPreferences(configurationService, _emmet);
            callback(_emmet);
        }
        finally {
            this.resetEmmetPreferences(configurationService, _emmet);
        }
    };
    return LazyEmmet;
}());
LazyEmmet._INSTANCE = new LazyEmmet();
var EmmetActionContext = (function () {
    function EmmetActionContext(editor, _emmet, editorAccessor) {
        this.editor = editor;
        this.emmet = _emmet;
        this.editorAccessor = editorAccessor;
    }
    return EmmetActionContext;
}());
exports.EmmetActionContext = EmmetActionContext;
var EmmetEditorAction = (function (_super) {
    __extends(EmmetEditorAction, _super);
    function EmmetEditorAction() {
        var _this = _super.apply(this, arguments) || this;
        _this._lastGrammarContributions = null;
        _this._lastExtensionService = null;
        return _this;
    }
    EmmetEditorAction.prototype.noExpansionOccurred = function (editor) {
        // default do nothing
    };
    EmmetEditorAction.prototype._withGrammarContributions = function (extensionService) {
        if (this._lastExtensionService !== extensionService) {
            this._lastExtensionService = extensionService;
            this._lastGrammarContributions = extensionService.readExtensionPointContributions(TMSyntax_1.grammarsExtPoint).then(function (contributions) {
                return new GrammarContributions(contributions);
            });
        }
        return this._lastGrammarContributions;
    };
    EmmetEditorAction.prototype.run = function (accessor, editor) {
        var _this = this;
        var configurationService = accessor.get(configuration_1.IConfigurationService);
        var instantiationService = accessor.get(instantiation_1.IInstantiationService);
        var extensionService = accessor.get(extensions_1.IExtensionService);
        return this._withGrammarContributions(extensionService).then(function (grammarContributions) {
            var editorAccessor = new editorAccessor_1.EditorAccessor(editor, configurationService.getConfiguration().emmet.syntaxProfiles, configurationService.getConfiguration().emmet.excludeLanguages, grammarContributions);
            if (!editorAccessor.isEmmetEnabledMode()) {
                _this.noExpansionOccurred(editor);
                return;
            }
            return LazyEmmet.withConfiguredEmmet(configurationService, function (_emmet) {
                editorAccessor.onBeforeEmmetAction();
                instantiationService.invokeFunction(function (accessor) {
                    _this.runEmmetAction(accessor, new EmmetActionContext(editor, _emmet, editorAccessor));
                });
                editorAccessor.onAfterEmmetAction();
            });
        });
    };
    return EmmetEditorAction;
}(editorCommonExtensions_1.EditorAction));
exports.EmmetEditorAction = EmmetEditorAction;
var BasicEmmetEditorAction = (function (_super) {
    __extends(BasicEmmetEditorAction, _super);
    function BasicEmmetEditorAction(id, label, alias, actionName, kbOpts) {
        var _this = _super.call(this, {
            id: id,
            label: label,
            alias: alias,
            precondition: editorCommon_1.EditorContextKeys.Writable,
            kbOpts: kbOpts
        }) || this;
        _this.emmetActionName = actionName;
        return _this;
    }
    BasicEmmetEditorAction.prototype.runEmmetAction = function (accessor, ctx) {
        if (!ctx.emmet.run(this.emmetActionName, ctx.editorAccessor)) {
            this.noExpansionOccurred(ctx.editor);
        }
    };
    return BasicEmmetEditorAction;
}(EmmetEditorAction));
exports.BasicEmmetEditorAction = BasicEmmetEditorAction;
