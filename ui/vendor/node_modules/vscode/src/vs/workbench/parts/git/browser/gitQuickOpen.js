/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var nls_1 = require("vs/nls");
var filters_1 = require("vs/base/common/filters");
var winjs_base_1 = require("vs/base/common/winjs.base");
var severity_1 = require("vs/base/common/severity");
var git_1 = require("vs/workbench/parts/git/common/git");
var quickopen_1 = require("vs/workbench/browser/quickopen");
var quickOpen_1 = require("vs/base/parts/quickopen/common/quickOpen");
var quickOpenModel_1 = require("vs/base/parts/quickopen/browser/quickOpenModel");
var quickOpenService_1 = require("vs/workbench/services/quickopen/common/quickOpenService");
var message_1 = require("vs/platform/message/common/message");
var AbstractRefEntry = (function (_super) {
    __extends(AbstractRefEntry, _super);
    function AbstractRefEntry(gitService, messageService, ref, highlights) {
        var _this = _super.call(this, highlights) || this;
        _this.gitService = gitService;
        _this.messageService = messageService;
        _this.ref = ref;
        return _this;
    }
    AbstractRefEntry.prototype.getIcon = function () { return 'git'; };
    AbstractRefEntry.prototype.getLabel = function () { return this.ref.name; };
    AbstractRefEntry.prototype.getDescription = function () { return ''; };
    AbstractRefEntry.prototype.getAriaLabel = function () { return nls_1.localize('refAriaLabel', "{0}, git", this.getLabel()); };
    AbstractRefEntry.prototype.run = function (mode, context) {
        if (mode === quickOpen_1.Mode.PREVIEW) {
            return false;
        }
        return true;
    };
    return AbstractRefEntry;
}(quickOpenModel_1.QuickOpenEntry));
var CheckoutHeadEntry = (function (_super) {
    __extends(CheckoutHeadEntry, _super);
    function CheckoutHeadEntry() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CheckoutHeadEntry.prototype.getDescription = function () { return nls_1.localize('checkoutBranch', "Branch at {0}", this.ref.commit.substr(0, 8)); };
    CheckoutHeadEntry.prototype.run = function (mode, context) {
        var _this = this;
        if (mode === quickOpen_1.Mode.PREVIEW) {
            return false;
        }
        this.gitService.checkout(this.ref.name).done(null, function (e) { return _this.messageService.show(severity_1.default.Error, e); });
        return true;
    };
    return CheckoutHeadEntry;
}(AbstractRefEntry));
var CheckoutRemoteHeadEntry = (function (_super) {
    __extends(CheckoutRemoteHeadEntry, _super);
    function CheckoutRemoteHeadEntry() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CheckoutRemoteHeadEntry.prototype.getDescription = function () { return nls_1.localize('checkoutRemoteBranch', "Remote branch at {0}", this.ref.commit.substr(0, 8)); };
    CheckoutRemoteHeadEntry.prototype.run = function (mode, context) {
        var _this = this;
        if (mode === quickOpen_1.Mode.PREVIEW) {
            return false;
        }
        var match = /^[^/]+\/(.*)$/.exec(this.ref.name);
        var name = match ? match[1] : this.ref.name;
        this.gitService.checkout(name).done(null, function (e) { return _this.messageService.show(severity_1.default.Error, e); });
        return true;
    };
    return CheckoutRemoteHeadEntry;
}(AbstractRefEntry));
var CheckoutTagEntry = (function (_super) {
    __extends(CheckoutTagEntry, _super);
    function CheckoutTagEntry() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CheckoutTagEntry.prototype.getDescription = function () { return nls_1.localize('checkoutTag', "Tag at {0}", this.ref.commit.substr(0, 8)); };
    CheckoutTagEntry.prototype.run = function (mode, context) {
        var _this = this;
        if (mode === quickOpen_1.Mode.PREVIEW) {
            return false;
        }
        this.gitService.checkout(this.ref.name).done(null, function (e) { return _this.messageService.show(severity_1.default.Error, e); });
        return true;
    };
    return CheckoutTagEntry;
}(AbstractRefEntry));
var CurrentHeadEntry = (function (_super) {
    __extends(CurrentHeadEntry, _super);
    function CurrentHeadEntry() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CurrentHeadEntry.prototype.getDescription = function () { return nls_1.localize('alreadyCheckedOut', "Branch {0} is already the current branch", this.ref.name); };
    return CurrentHeadEntry;
}(AbstractRefEntry));
var BranchEntry = (function (_super) {
    __extends(BranchEntry, _super);
    function BranchEntry(gitService, messageService, name) {
        var _this = _super.call(this, [{ start: 0, end: name.length }]) || this;
        _this.gitService = gitService;
        _this.messageService = messageService;
        // sanitize name
        _this.name = name.replace(/^\.|\/\.|\.\.|~|\^|:|\/$|\.lock$|\.lock\/|\\|\*|\s|^\s*$|\.$/g, '-');
        return _this;
    }
    BranchEntry.prototype.getIcon = function () { return 'git'; };
    BranchEntry.prototype.getLabel = function () { return this.name; };
    BranchEntry.prototype.getAriaLabel = function () { return nls_1.localize({ key: 'branchAriaLabel', comment: ['the branch name'] }, "{0}, git branch", this.getLabel()); };
    BranchEntry.prototype.getDescription = function () { return nls_1.localize('createBranch', "Create branch {0}", this.name); };
    BranchEntry.prototype.run = function (mode, context) {
        var _this = this;
        if (mode === quickOpen_1.Mode.PREVIEW) {
            return false;
        }
        this.gitService.branch(this.name, true).done(null, function (e) { return _this.messageService.show(severity_1.default.Error, e); });
        return true;
    };
    return BranchEntry;
}(quickOpenModel_1.QuickOpenEntry));
// Commands
var CheckoutCommand = (function () {
    function CheckoutCommand(gitService, messageService) {
        this.gitService = gitService;
        this.messageService = messageService;
        this.aliases = ['checkout', 'co'];
        this.icon = 'git';
        // noop
    }
    CheckoutCommand.prototype.getResults = function (input) {
        var _this = this;
        input = input.trim();
        var gitModel = this.gitService.getModel();
        var currentHead = gitModel.getHEAD();
        var refs = gitModel.getRefs();
        var heads = refs.filter(function (ref) { return ref.type === git_1.RefType.Head; });
        var tags = refs.filter(function (ref) { return ref.type === git_1.RefType.Tag; });
        var remoteHeads = refs.filter(function (ref) { return ref.type === git_1.RefType.RemoteHead; });
        var headMatches = heads
            .map(function (head) { return ({ head: head, highlights: filters_1.matchesContiguousSubString(input, head.name) }); })
            .filter(function (_a) {
            var highlights = _a.highlights;
            return !!highlights;
        });
        var headEntries = headMatches
            .filter(function (_a) {
            var head = _a.head;
            return head.name !== currentHead.name;
        })
            .map(function (_a) {
            var head = _a.head, highlights = _a.highlights;
            return new CheckoutHeadEntry(_this.gitService, _this.messageService, head, highlights);
        });
        var tagMatches = tags
            .map(function (head) { return ({ head: head, highlights: filters_1.matchesContiguousSubString(input, head.name) }); })
            .filter(function (_a) {
            var highlights = _a.highlights;
            return !!highlights;
        });
        var tagEntries = tagMatches
            .filter(function (_a) {
            var head = _a.head;
            return head.name !== currentHead.name;
        })
            .map(function (_a) {
            var head = _a.head, highlights = _a.highlights;
            return new CheckoutTagEntry(_this.gitService, _this.messageService, head, highlights);
        });
        var checkoutEntries = headEntries
            .concat(tagEntries)
            .sort(function (a, b) { return a.getLabel().localeCompare(b.getLabel()); });
        var remoteHeadMatches = remoteHeads
            .map(function (head) { return ({ head: head, highlights: filters_1.matchesContiguousSubString(input, head.name) }); })
            .filter(function (_a) {
            var highlights = _a.highlights;
            return !!highlights;
        });
        var remoteHeadEntries = remoteHeadMatches
            .filter(function (_a) {
            var head = _a.head;
            return head.name !== currentHead.name;
        })
            .map(function (_a) {
            var head = _a.head, highlights = _a.highlights;
            return new CheckoutRemoteHeadEntry(_this.gitService, _this.messageService, head, highlights);
        })
            .sort(function (a, b) { return a.getLabel().localeCompare(b.getLabel()); });
        if (checkoutEntries.length > 0) {
            checkoutEntries[0] = new quickOpenModel_1.QuickOpenEntryGroup(checkoutEntries[0], 'checkout', false);
        }
        if (remoteHeadEntries.length > 0) {
            remoteHeadEntries[0] = new quickOpenModel_1.QuickOpenEntryGroup(remoteHeadEntries[0], 'checkout remote', checkoutEntries.length > 0);
        }
        var entries = checkoutEntries
            .sort(function (a, b) { return a.getLabel().localeCompare(b.getLabel()); })
            .concat(remoteHeadEntries);
        var allMatches = headMatches.concat(tagMatches).concat(remoteHeadMatches);
        var exactMatches = allMatches.filter(function (_a) {
            var head = _a.head;
            return head.name === input;
        });
        var currentHeadMatches = exactMatches.filter(function (_a) {
            var head = _a.head;
            return head.name === currentHead.name;
        });
        if (currentHeadMatches.length > 0) {
            entries.unshift(new CurrentHeadEntry(this.gitService, this.messageService, currentHeadMatches[0].head, currentHeadMatches[0].highlights));
        }
        else if (exactMatches.length === 0 && input) {
            var branchEntry = new BranchEntry(this.gitService, this.messageService, input);
            entries.push(new quickOpenModel_1.QuickOpenEntryGroup(branchEntry, 'branch', checkoutEntries.length > 0 || remoteHeadEntries.length > 0));
        }
        return winjs_base_1.TPromise.as(entries);
    };
    CheckoutCommand.prototype.getEmptyLabel = function (input) {
        return nls_1.localize('noBranches', "No other branches");
    };
    return CheckoutCommand;
}());
var BranchCommand = (function () {
    function BranchCommand(gitService, messageService) {
        this.gitService = gitService;
        this.messageService = messageService;
        this.aliases = ['branch'];
        this.icon = 'git';
        // noop
    }
    BranchCommand.prototype.getResults = function (input) {
        input = input.trim();
        if (!input) {
            return winjs_base_1.TPromise.as([]);
        }
        var gitModel = this.gitService.getModel();
        var currentHead = gitModel.getHEAD();
        var matches = gitModel.getRefs()
            .map(function (head) { return ({ head: head, highlights: filters_1.matchesContiguousSubString(input, head.name) }); })
            .filter(function (_a) {
            var highlights = _a.highlights;
            return !!highlights;
        });
        var exactMatches = matches.filter(function (_a) {
            var head = _a.head;
            return head.name === input;
        });
        var headMatches = exactMatches.filter(function (_a) {
            var head = _a.head;
            return head.name === currentHead.name;
        });
        if (headMatches.length > 0) {
            return winjs_base_1.TPromise.as([new CurrentHeadEntry(this.gitService, this.messageService, headMatches[0].head, headMatches[0].highlights)]);
        }
        else if (exactMatches.length > 0) {
            return winjs_base_1.TPromise.as([new CheckoutHeadEntry(this.gitService, this.messageService, exactMatches[0].head, exactMatches[0].highlights)]);
        }
        var branchEntry = new BranchEntry(this.gitService, this.messageService, input);
        return winjs_base_1.TPromise.as([new quickOpenModel_1.QuickOpenEntryGroup(branchEntry, 'branch', false)]);
    };
    BranchCommand.prototype.getEmptyLabel = function (input) {
        return nls_1.localize('notValidBranchName', "Please provide a valid branch name");
    };
    return BranchCommand;
}());
var GitCommandQuickOpenHandler = (function (_super) {
    __extends(GitCommandQuickOpenHandler, _super);
    function GitCommandQuickOpenHandler(quickOpenService, gitService, messageService) {
        return _super.call(this, quickOpenService, {
            prefix: 'git',
            commands: [
                new CheckoutCommand(gitService, messageService),
                new BranchCommand(gitService, messageService)
            ]
        }) || this;
    }
    return GitCommandQuickOpenHandler;
}(quickopen_1.CommandQuickOpenHandler));
GitCommandQuickOpenHandler = __decorate([
    __param(0, quickOpenService_1.IQuickOpenService), __param(1, git_1.IGitService), __param(2, message_1.IMessageService)
], GitCommandQuickOpenHandler);
exports.GitCommandQuickOpenHandler = GitCommandQuickOpenHandler;
