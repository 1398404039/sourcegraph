/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var platform_1 = require("vs/platform/platform");
var instantiation_1 = require("vs/platform/instantiation/common/instantiation");
var contextkey_1 = require("vs/platform/contextkey/common/contextkey");
var resourceEditorInput_1 = require("vs/workbench/common/editor/resourceEditorInput");
var nls = require("vs/nls");
var uri_1 = require("vs/base/common/uri");
/**
 * Mime type used by the output editor.
 */
exports.OUTPUT_MIME = 'text/x-code-output';
/**
 * Output resource scheme.
 */
exports.OUTPUT_SCHEME = 'output';
/**
 * Id used by the output editor.
 */
exports.OUTPUT_MODE_ID = 'Log';
/**
 * Output panel id
 */
exports.OUTPUT_PANEL_ID = 'workbench.panel.output';
exports.Extensions = {
    OutputChannels: 'workbench.contributions.outputChannels'
};
exports.OUTPUT_SERVICE_ID = 'outputService';
exports.MAX_OUTPUT_LENGTH = 10000 /* Max. number of output lines to show in output */ * 100 /* Guestimated chars per line */;
exports.CONTEXT_IN_OUTPUT = new contextkey_1.RawContextKey('inOutput', false);
exports.IOutputService = instantiation_1.createDecorator(exports.OUTPUT_SERVICE_ID);
var OutputChannelRegistry = (function () {
    function OutputChannelRegistry() {
        this.channels = [];
    }
    OutputChannelRegistry.prototype.registerChannel = function (id, label) {
        if (this.channels.every(function (channel) { return channel.id !== id; })) {
            this.channels.push({ id: id, label: label });
        }
    };
    OutputChannelRegistry.prototype.getChannels = function () {
        return this.channels;
    };
    OutputChannelRegistry.prototype.removeChannel = function (id) {
        this.channels = this.channels.filter(function (channel) { return channel.id !== id; });
    };
    return OutputChannelRegistry;
}());
platform_1.Registry.add(exports.Extensions.OutputChannels, new OutputChannelRegistry());
var OutputEditors = (function () {
    function OutputEditors() {
    }
    OutputEditors.getInstance = function (instantiationService, channel) {
        if (OutputEditors.instances[channel.id]) {
            return OutputEditors.instances[channel.id];
        }
        var resource = uri_1.default.from({ scheme: exports.OUTPUT_SCHEME, path: channel.id });
        OutputEditors.instances[channel.id] = instantiationService.createInstance(resourceEditorInput_1.ResourceEditorInput, nls.localize('output', "Output"), channel ? nls.localize('channel', "for '{0}'", channel.label) : '', resource);
        return OutputEditors.instances[channel.id];
    };
    return OutputEditors;
}());
OutputEditors.instances = Object.create(null);
exports.OutputEditors = OutputEditors;
