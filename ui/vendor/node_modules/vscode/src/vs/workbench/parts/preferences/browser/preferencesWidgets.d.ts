import { Dimension } from 'vs/base/browser/builder';
import { Widget } from 'vs/base/browser/ui/widget';
import Event from 'vs/base/common/event';
import { ICodeEditor, IOverlayWidget, IOverlayWidgetPosition, IViewZone } from 'vs/editor/browser/editorBrowser';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import { IContextViewService, IContextMenuService } from 'vs/platform/contextview/browser/contextView';
import { ISettingsGroup } from 'vs/workbench/parts/preferences/common/preferences';
import { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';
import { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';
import { ConfigurationTarget } from 'vs/workbench/services/configuration/common/configurationEditing';
export declare class SettingsGroupTitleWidget extends Widget implements IViewZone {
    private editor;
    settingsGroup: ISettingsGroup;
    private id;
    private _afterLineNumber;
    private _domNode;
    private titleContainer;
    private icon;
    private title;
    private _onToggled;
    onToggled: Event<boolean>;
    private previousPosition;
    constructor(editor: ICodeEditor, settingsGroup: ISettingsGroup);
    readonly domNode: HTMLElement;
    readonly heightInLines: number;
    readonly afterLineNumber: number;
    private create();
    render(): void;
    toggleCollapse(collapse: boolean): void;
    toggleFocus(focus: boolean): void;
    isCollapsed(): boolean;
    private layout();
    private getIconSize();
    private onKeyDown(keyboardEvent);
    private toggle();
    private collapse(collapse);
    private onCursorChange(e);
    private focusTitle(currentPosition);
    dispose(): void;
}
export declare class SettingsTabsWidget extends Widget {
    private contextService;
    private settingsSwitcherBar;
    private userSettings;
    private workspaceSettings;
    private _onSwitch;
    readonly onSwitch: Event<void>;
    constructor(parent: HTMLElement, contextService: IWorkspaceContextService);
    private create(parent);
    show(configurationTarget: ConfigurationTarget): void;
    private onClick(action);
}
export declare class SearchWidget extends Widget {
    private contextViewService;
    private contextMenuService;
    private instantiationService;
    domNode: HTMLElement;
    private countElement;
    private searchContainer;
    private inputBox;
    private _onDidChange;
    onDidChange: Event<string>;
    private _onEnter;
    onEnter: Event<void>;
    constructor(parent: HTMLElement, contextViewService: IContextViewService, contextMenuService: IContextMenuService, instantiationService: IInstantiationService);
    private create(parent);
    private createSearchContainer(searchContainer);
    showMessage(message: string, count: number): void;
    layout(dimension: Dimension): void;
    focus(): void;
    clear(): void;
    value(): string;
    private _onKeyUp(keyboardEvent);
}
export declare class FloatingClickWidget extends Widget implements IOverlayWidget {
    private editor;
    private label;
    private keyBindingAction;
    private _domNode;
    private _onClick;
    onClick: Event<void>;
    constructor(editor: ICodeEditor, label: string, keyBindingAction: string, keybindingService: IKeybindingService);
    render(): void;
    dispose(): void;
    getId(): string;
    getDomNode(): HTMLElement;
    getPosition(): IOverlayWidgetPosition;
}
export declare class EditPreferenceWidget<T> extends Widget implements IOverlayWidget {
    private editor;
    private static counter;
    private _domNode;
    private _visible;
    private _line;
    private _id;
    private _preferences;
    private _onClick;
    readonly onClick: Event<void>;
    private _onMouseOver;
    readonly onMouseOver: Event<void>;
    constructor(editor: ICodeEditor, contextMenuService: IContextMenuService);
    dispose(): void;
    getId(): string;
    getDomNode(): HTMLElement;
    getPosition(): IOverlayWidgetPosition;
    getLine(): number;
    show(line: number, preferences: T[]): void;
    readonly preferences: T[];
    hide(): void;
    private _layout();
}
