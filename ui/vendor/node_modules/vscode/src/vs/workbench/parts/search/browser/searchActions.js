/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var nls = require("vs/nls");
var DOM = require("vs/base/browser/dom");
var errors = require("vs/base/common/errors");
var winjs_base_1 = require("vs/base/common/winjs.base");
var actions_1 = require("vs/base/common/actions");
var viewlet_1 = require("vs/workbench/browser/viewlet");
var viewlet_2 = require("vs/workbench/services/viewlet/browser/viewlet");
var searchModel_1 = require("vs/workbench/parts/search/common/searchModel");
var replace_1 = require("vs/workbench/parts/search/common/replace");
var Constants = require("vs/workbench/parts/search/common/constants");
var treeDefaults_1 = require("vs/base/parts/tree/browser/treeDefaults");
var preferences_1 = require("vs/workbench/parts/preferences/common/preferences");
var editorService_1 = require("vs/workbench/services/editor/common/editorService");
var telemetry_1 = require("vs/platform/telemetry/common/telemetry");
var keybinding_1 = require("vs/base/common/keybinding");
var keybinding_2 = require("vs/platform/keybinding/common/keybinding");
var editor_1 = require("vs/workbench/common/editor");
function isSearchViewletFocussed(viewletService) {
    var activeViewlet = viewletService.getActiveViewlet();
    var activeElement = document.activeElement;
    return activeViewlet && activeViewlet.getId() === Constants.VIEWLET_ID && activeElement && DOM.isAncestor(activeElement, activeViewlet.getContainer().getHTMLElement());
}
exports.isSearchViewletFocussed = isSearchViewletFocussed;
function appendKeyBindingLabel(label, keyBinding, keyBindingService2) {
    keyBinding = typeof keyBinding === 'number' ? new keybinding_1.Keybinding(keyBinding) : keyBinding;
    return keyBinding ? label + ' (' + keyBindingService2.getLabelFor(keyBinding) + ')' : label;
}
exports.appendKeyBindingLabel = appendKeyBindingLabel;
var ToggleCaseSensitiveAction = (function (_super) {
    __extends(ToggleCaseSensitiveAction, _super);
    function ToggleCaseSensitiveAction(id, label, viewletService) {
        var _this = _super.call(this, id, label) || this;
        _this.viewletService = viewletService;
        return _this;
    }
    ToggleCaseSensitiveAction.prototype.run = function () {
        var searchViewlet = this.viewletService.getActiveViewlet();
        searchViewlet.toggleCaseSensitive();
        return winjs_base_1.TPromise.as(null);
    };
    return ToggleCaseSensitiveAction;
}(actions_1.Action));
ToggleCaseSensitiveAction = __decorate([
    __param(2, viewlet_2.IViewletService)
], ToggleCaseSensitiveAction);
exports.ToggleCaseSensitiveAction = ToggleCaseSensitiveAction;
var ToggleWholeWordAction = (function (_super) {
    __extends(ToggleWholeWordAction, _super);
    function ToggleWholeWordAction(id, label, viewletService) {
        var _this = _super.call(this, id, label) || this;
        _this.viewletService = viewletService;
        return _this;
    }
    ToggleWholeWordAction.prototype.run = function () {
        var searchViewlet = this.viewletService.getActiveViewlet();
        searchViewlet.toggleWholeWords();
        return winjs_base_1.TPromise.as(null);
    };
    return ToggleWholeWordAction;
}(actions_1.Action));
ToggleWholeWordAction = __decorate([
    __param(2, viewlet_2.IViewletService)
], ToggleWholeWordAction);
exports.ToggleWholeWordAction = ToggleWholeWordAction;
var ToggleRegexAction = (function (_super) {
    __extends(ToggleRegexAction, _super);
    function ToggleRegexAction(id, label, viewletService) {
        var _this = _super.call(this, id, label) || this;
        _this.viewletService = viewletService;
        return _this;
    }
    ToggleRegexAction.prototype.run = function () {
        var searchViewlet = this.viewletService.getActiveViewlet();
        searchViewlet.toggleRegex();
        return winjs_base_1.TPromise.as(null);
    };
    return ToggleRegexAction;
}(actions_1.Action));
ToggleRegexAction = __decorate([
    __param(2, viewlet_2.IViewletService)
], ToggleRegexAction);
exports.ToggleRegexAction = ToggleRegexAction;
var ShowNextSearchTermAction = (function (_super) {
    __extends(ShowNextSearchTermAction, _super);
    function ShowNextSearchTermAction(id, label, viewletService) {
        var _this = _super.call(this, id, label) || this;
        _this.viewletService = viewletService;
        return _this;
    }
    ShowNextSearchTermAction.prototype.run = function () {
        var searchAndReplaceWidget = this.viewletService.getActiveViewlet().searchAndReplaceWidget;
        searchAndReplaceWidget.showNextSearchTerm();
        return winjs_base_1.TPromise.as(null);
    };
    return ShowNextSearchTermAction;
}(actions_1.Action));
ShowNextSearchTermAction.ID = 'search.history.showNext';
ShowNextSearchTermAction.LABEL = nls.localize('nextSearchTerm', "Show next search term");
ShowNextSearchTermAction = __decorate([
    __param(2, viewlet_2.IViewletService)
], ShowNextSearchTermAction);
exports.ShowNextSearchTermAction = ShowNextSearchTermAction;
var ShowPreviousSearchTermAction = (function (_super) {
    __extends(ShowPreviousSearchTermAction, _super);
    function ShowPreviousSearchTermAction(id, label, viewletService) {
        var _this = _super.call(this, id, label) || this;
        _this.viewletService = viewletService;
        return _this;
    }
    ShowPreviousSearchTermAction.prototype.run = function () {
        var searchAndReplaceWidget = this.viewletService.getActiveViewlet().searchAndReplaceWidget;
        searchAndReplaceWidget.showPreviousSearchTerm();
        return winjs_base_1.TPromise.as(null);
    };
    return ShowPreviousSearchTermAction;
}(actions_1.Action));
ShowPreviousSearchTermAction.ID = 'search.history.showPrevious';
ShowPreviousSearchTermAction.LABEL = nls.localize('previousSearchTerm', "Show previous search term");
ShowPreviousSearchTermAction = __decorate([
    __param(2, viewlet_2.IViewletService)
], ShowPreviousSearchTermAction);
exports.ShowPreviousSearchTermAction = ShowPreviousSearchTermAction;
var FocusNextInputAction = (function (_super) {
    __extends(FocusNextInputAction, _super);
    function FocusNextInputAction(id, label, viewletService) {
        var _this = _super.call(this, id, label) || this;
        _this.viewletService = viewletService;
        return _this;
    }
    FocusNextInputAction.prototype.run = function () {
        this.viewletService.getActiveViewlet().focusNextInputBox();
        return winjs_base_1.TPromise.as(null);
    };
    return FocusNextInputAction;
}(actions_1.Action));
FocusNextInputAction.ID = 'search.focus.nextInputBox';
FocusNextInputAction.LABEL = nls.localize('focusNextInputBox', "Focus next input box");
FocusNextInputAction = __decorate([
    __param(2, viewlet_2.IViewletService)
], FocusNextInputAction);
exports.FocusNextInputAction = FocusNextInputAction;
var FocusPreviousInputAction = (function (_super) {
    __extends(FocusPreviousInputAction, _super);
    function FocusPreviousInputAction(id, label, viewletService) {
        var _this = _super.call(this, id, label) || this;
        _this.viewletService = viewletService;
        return _this;
    }
    FocusPreviousInputAction.prototype.run = function () {
        this.viewletService.getActiveViewlet().focusPreviousInputBox();
        return winjs_base_1.TPromise.as(null);
    };
    return FocusPreviousInputAction;
}(actions_1.Action));
FocusPreviousInputAction.ID = 'search.focus.previousInputBox';
FocusPreviousInputAction.LABEL = nls.localize('focusPreviousInputBox', "Focus previous input box");
FocusPreviousInputAction = __decorate([
    __param(2, viewlet_2.IViewletService)
], FocusPreviousInputAction);
exports.FocusPreviousInputAction = FocusPreviousInputAction;
var OpenSearchViewletAction = (function (_super) {
    __extends(OpenSearchViewletAction, _super);
    function OpenSearchViewletAction(id, label, viewletService, editorService) {
        return _super.call(this, id, label, Constants.VIEWLET_ID, viewletService, editorService) || this;
    }
    return OpenSearchViewletAction;
}(viewlet_1.ToggleViewletAction));
OpenSearchViewletAction = __decorate([
    __param(2, viewlet_2.IViewletService), __param(3, editorService_1.IWorkbenchEditorService)
], OpenSearchViewletAction);
exports.OpenSearchViewletAction = OpenSearchViewletAction;
var FocusActiveEditorAction = (function (_super) {
    __extends(FocusActiveEditorAction, _super);
    function FocusActiveEditorAction(id, label, editorService) {
        var _this = _super.call(this, id, label) || this;
        _this.editorService = editorService;
        return _this;
    }
    FocusActiveEditorAction.prototype.run = function () {
        var editor = this.editorService.getActiveEditor();
        if (editor) {
            editor.focus();
        }
        return winjs_base_1.TPromise.as(true);
    };
    return FocusActiveEditorAction;
}(actions_1.Action));
FocusActiveEditorAction = __decorate([
    __param(2, editorService_1.IWorkbenchEditorService)
], FocusActiveEditorAction);
exports.FocusActiveEditorAction = FocusActiveEditorAction;
var FindInFilesAction = (function (_super) {
    __extends(FindInFilesAction, _super);
    function FindInFilesAction(id, label, viewletService) {
        var _this = _super.call(this, id, label) || this;
        _this.viewletService = viewletService;
        return _this;
    }
    FindInFilesAction.prototype.run = function () {
        return this.viewletService.openViewlet(Constants.VIEWLET_ID, true);
    };
    return FindInFilesAction;
}(actions_1.Action));
FindInFilesAction = __decorate([
    __param(2, viewlet_2.IViewletService)
], FindInFilesAction);
exports.FindInFilesAction = FindInFilesAction;
var ReplaceInFilesAction = (function (_super) {
    __extends(ReplaceInFilesAction, _super);
    function ReplaceInFilesAction(id, label, viewletService) {
        var _this = _super.call(this, id, label) || this;
        _this.viewletService = viewletService;
        return _this;
    }
    ReplaceInFilesAction.prototype.run = function () {
        return this.viewletService.openViewlet(Constants.VIEWLET_ID, true).then(function (viewlet) {
            var searchAndReplaceWidget = viewlet.searchAndReplaceWidget;
            searchAndReplaceWidget.toggleReplace(true);
            searchAndReplaceWidget.focus(false, true);
        });
    };
    return ReplaceInFilesAction;
}(actions_1.Action));
ReplaceInFilesAction.ID = 'workbench.action.replaceInFiles';
ReplaceInFilesAction.LABEL = nls.localize('replaceInFiles', "Replace in Files");
ReplaceInFilesAction = __decorate([
    __param(2, viewlet_2.IViewletService)
], ReplaceInFilesAction);
exports.ReplaceInFilesAction = ReplaceInFilesAction;
var CloseReplaceAction = (function (_super) {
    __extends(CloseReplaceAction, _super);
    function CloseReplaceAction(id, label, viewletService) {
        var _this = _super.call(this, id, label) || this;
        _this.viewletService = viewletService;
        return _this;
    }
    CloseReplaceAction.prototype.run = function () {
        var searchAndReplaceWidget = this.viewletService.getActiveViewlet().searchAndReplaceWidget;
        searchAndReplaceWidget.toggleReplace(false);
        searchAndReplaceWidget.focus();
        return winjs_base_1.TPromise.as(null);
    };
    return CloseReplaceAction;
}(actions_1.Action));
CloseReplaceAction = __decorate([
    __param(2, viewlet_2.IViewletService)
], CloseReplaceAction);
exports.CloseReplaceAction = CloseReplaceAction;
var FindInFolderAction = (function (_super) {
    __extends(FindInFolderAction, _super);
    function FindInFolderAction(resource, viewletService) {
        var _this = _super.call(this, 'workbench.search.action.findInFolder', nls.localize('findInFolder', "Find in Folder")) || this;
        _this.viewletService = viewletService;
        _this.resource = resource;
        return _this;
    }
    FindInFolderAction.prototype.run = function (event) {
        var _this = this;
        return this.viewletService.openViewlet(Constants.VIEWLET_ID, true).then(function (viewlet) {
            viewlet.searchInFolder(_this.resource);
        });
    };
    return FindInFolderAction;
}(actions_1.Action));
FindInFolderAction = __decorate([
    __param(1, viewlet_2.IViewletService)
], FindInFolderAction);
exports.FindInFolderAction = FindInFolderAction;
var RefreshAction = (function (_super) {
    __extends(RefreshAction, _super);
    function RefreshAction(viewlet) {
        var _this = _super.call(this, 'refresh') || this;
        _this.viewlet = viewlet;
        _this.label = nls.localize('RefreshAction.label', "Refresh");
        _this.enabled = false;
        _this.class = 'search-action refresh';
        return _this;
    }
    RefreshAction.prototype.run = function () {
        this.viewlet.onQueryChanged(true);
        return winjs_base_1.TPromise.as(null);
    };
    return RefreshAction;
}(actions_1.Action));
exports.RefreshAction = RefreshAction;
var CollapseAllAction = (function (_super) {
    __extends(CollapseAllAction, _super);
    function CollapseAllAction(viewlet) {
        var _this = _super.call(this, viewlet.getControl(), false) || this;
        _this.class = 'search-action collapse';
        return _this;
    }
    return CollapseAllAction;
}(treeDefaults_1.CollapseAllAction));
exports.CollapseAllAction = CollapseAllAction;
var ClearSearchResultsAction = (function (_super) {
    __extends(ClearSearchResultsAction, _super);
    function ClearSearchResultsAction(viewlet) {
        var _this = _super.call(this, 'clearSearchResults') || this;
        _this.viewlet = viewlet;
        _this.label = nls.localize('ClearSearchResultsAction.label', "Clear Search Results");
        _this.enabled = false;
        _this.class = 'search-action clear-search-results';
        return _this;
    }
    ClearSearchResultsAction.prototype.run = function () {
        this.viewlet.clearSearchResults();
        return winjs_base_1.TPromise.as(null);
    };
    return ClearSearchResultsAction;
}(actions_1.Action));
exports.ClearSearchResultsAction = ClearSearchResultsAction;
var AbstractSearchAndReplaceAction = (function (_super) {
    __extends(AbstractSearchAndReplaceAction, _super);
    function AbstractSearchAndReplaceAction() {
        return _super.apply(this, arguments) || this;
    }
    /**
     * Returns element to focus after removing the given element
     */
    AbstractSearchAndReplaceAction.prototype.getElementToFocusAfterRemoved = function (viewer, elementToBeRemoved) {
        var elementToFocus = this.getNextElementAfterRemoved(viewer, elementToBeRemoved);
        if (!elementToFocus) {
            elementToFocus = this.getPreviousElementAfterRemoved(viewer, elementToBeRemoved);
        }
        return elementToFocus;
    };
    AbstractSearchAndReplaceAction.prototype.getNextElementAfterRemoved = function (viewer, element) {
        var navigator = this.getNavigatorAt(element, viewer);
        if (element instanceof searchModel_1.FileMatch) {
            // If file match is removed then next element is the next file match
            while (!!navigator.next() && !(navigator.current() instanceof searchModel_1.FileMatch)) { }
            ;
        }
        else {
            navigator.next();
        }
        return navigator.current();
    };
    AbstractSearchAndReplaceAction.prototype.getPreviousElementAfterRemoved = function (viewer, element) {
        var navigator = this.getNavigatorAt(element, viewer);
        var previousElement = navigator.previous();
        if (element instanceof searchModel_1.Match && element.parent().matches().length === 1) {
            // If this is the only match, then the file match is also removed
            // Hence take the previous element to file match
            previousElement = navigator.previous();
        }
        return previousElement;
    };
    AbstractSearchAndReplaceAction.prototype.getNavigatorAt = function (element, viewer) {
        var navigator = viewer.getNavigator();
        while (navigator.current() !== element && !!navigator.next()) { }
        return navigator;
    };
    return AbstractSearchAndReplaceAction;
}(actions_1.Action));
exports.AbstractSearchAndReplaceAction = AbstractSearchAndReplaceAction;
var RemoveAction = (function (_super) {
    __extends(RemoveAction, _super);
    function RemoveAction(viewer, element) {
        var _this = _super.call(this, 'remove', nls.localize('RemoveAction.label', "Remove"), 'action-remove') || this;
        _this.viewer = viewer;
        _this.element = element;
        return _this;
    }
    RemoveAction.prototype.run = function () {
        var nextFocusElement = this.getElementToFocusAfterRemoved(this.viewer, this.element);
        if (nextFocusElement) {
            this.viewer.setFocus(nextFocusElement);
        }
        var elementToRefresh;
        if (this.element instanceof searchModel_1.FileMatch) {
            var parent_1 = this.element.parent();
            parent_1.remove(this.element);
            elementToRefresh = parent_1;
        }
        else {
            var parent_2 = this.element.parent();
            parent_2.remove(this.element);
            elementToRefresh = parent_2.count() === 0 ? parent_2.parent() : parent_2;
        }
        this.viewer.DOMFocus();
        return this.viewer.refresh(elementToRefresh);
    };
    return RemoveAction;
}(AbstractSearchAndReplaceAction));
exports.RemoveAction = RemoveAction;
var ReplaceAllAction = (function (_super) {
    __extends(ReplaceAllAction, _super);
    function ReplaceAllAction(viewer, fileMatch, viewlet, replaceService, keyBindingService2, telemetryService) {
        var _this = _super.call(this, 'file-action-replace-all', appendKeyBindingLabel(nls.localize('file.replaceAll.label', "Replace All"), ReplaceAllAction.KEY_BINDING, keyBindingService2), 'action-replace-all') || this;
        _this.viewer = viewer;
        _this.fileMatch = fileMatch;
        _this.viewlet = viewlet;
        _this.replaceService = replaceService;
        _this.telemetryService = telemetryService;
        return _this;
    }
    Object.defineProperty(ReplaceAllAction, "KEY_BINDING", {
        get: function () {
            return 32768 /* CtrlCmd */ | 16384 /* Shift */ | 3 /* Enter */;
        },
        enumerable: true,
        configurable: true
    });
    ReplaceAllAction.prototype.run = function () {
        var _this = this;
        this.telemetryService.publicLog('replaceAll.action.selected');
        var nextFocusElement = this.getElementToFocusAfterRemoved(this.viewer, this.fileMatch);
        return this.fileMatch.parent().replace(this.fileMatch).then(function () {
            if (nextFocusElement) {
                _this.viewer.setFocus(nextFocusElement);
            }
            _this.viewer.DOMFocus();
            _this.viewlet.open(_this.fileMatch, true);
        });
    };
    return ReplaceAllAction;
}(AbstractSearchAndReplaceAction));
ReplaceAllAction = __decorate([
    __param(3, replace_1.IReplaceService),
    __param(4, keybinding_2.IKeybindingService),
    __param(5, telemetry_1.ITelemetryService)
], ReplaceAllAction);
exports.ReplaceAllAction = ReplaceAllAction;
var ReplaceAction = (function (_super) {
    __extends(ReplaceAction, _super);
    function ReplaceAction(viewer, element, viewlet, replaceService, keyBindingService2, editorService, telemetryService) {
        var _this = _super.call(this, 'action-replace', appendKeyBindingLabel(nls.localize('match.replace.label', "Replace"), ReplaceAction.KEY_BINDING, keyBindingService2), 'action-replace') || this;
        _this.viewer = viewer;
        _this.element = element;
        _this.viewlet = viewlet;
        _this.replaceService = replaceService;
        _this.editorService = editorService;
        _this.telemetryService = telemetryService;
        return _this;
    }
    Object.defineProperty(ReplaceAction, "KEY_BINDING", {
        get: function () {
            return 16384 /* Shift */ | 32768 /* CtrlCmd */ | 22 /* KEY_1 */;
        },
        enumerable: true,
        configurable: true
    });
    ReplaceAction.prototype.run = function () {
        var _this = this;
        this.enabled = false;
        this.telemetryService.publicLog('replace.action.selected');
        return this.element.parent().replace(this.element).then(function () {
            var elementToFocus = _this.getElementToFocusAfterReplace();
            if (elementToFocus) {
                _this.viewer.setFocus(elementToFocus);
            }
            var elementToShowReplacePreview = _this.getElementToShowReplacePreview(elementToFocus);
            _this.viewer.DOMFocus();
            if (!elementToShowReplacePreview || _this.hasToOpenFile()) {
                _this.viewlet.open(_this.element, true);
            }
            else {
                _this.replaceService.openReplacePreviewEditor(elementToShowReplacePreview, true);
            }
        });
    };
    ReplaceAction.prototype.getElementToFocusAfterReplace = function () {
        var navigator = this.viewer.getNavigator();
        var fileMatched = false;
        var elementToFocus = null;
        do {
            elementToFocus = navigator.current();
            if (elementToFocus instanceof searchModel_1.Match) {
                if (elementToFocus.parent().id() === this.element.parent().id()) {
                    fileMatched = true;
                    if (this.element.range().getStartPosition().isBeforeOrEqual(elementToFocus.range().getStartPosition())) {
                        // Closest next match in the same file
                        break;
                    }
                }
                else if (fileMatched) {
                    // First match in the next file (if expanded)
                    break;
                }
            }
            else if (fileMatched) {
                if (!this.viewer.isExpanded(elementToFocus)) {
                    // Next file match (if collapsed)
                    break;
                }
            }
        } while (!!navigator.next());
        return elementToFocus;
    };
    ReplaceAction.prototype.getElementToShowReplacePreview = function (elementToFocus) {
        if (this.hasSameParent(elementToFocus)) {
            return elementToFocus;
        }
        var previousElement = this.getPreviousElementAfterRemoved(this.viewer, this.element);
        if (this.hasSameParent(previousElement)) {
            return previousElement;
        }
        return null;
    };
    ReplaceAction.prototype.hasSameParent = function (element) {
        return element && element instanceof searchModel_1.Match && element.parent().resource() === this.element.parent().resource();
    };
    ReplaceAction.prototype.hasToOpenFile = function () {
        var editorInput = editor_1.asFileEditorInput(this.editorService.getActiveEditorInput());
        if (editorInput) {
            return editorInput.getResource().fsPath === this.element.parent().resource().fsPath;
        }
        return false;
    };
    return ReplaceAction;
}(AbstractSearchAndReplaceAction));
ReplaceAction = __decorate([
    __param(3, replace_1.IReplaceService),
    __param(4, keybinding_2.IKeybindingService),
    __param(5, editorService_1.IWorkbenchEditorService),
    __param(6, telemetry_1.ITelemetryService)
], ReplaceAction);
exports.ReplaceAction = ReplaceAction;
var ConfigureGlobalExclusionsAction = (function (_super) {
    __extends(ConfigureGlobalExclusionsAction, _super);
    function ConfigureGlobalExclusionsAction(preferencesService) {
        var _this = _super.call(this, 'configureGlobalExclusionsAction') || this;
        _this.preferencesService = preferencesService;
        _this.label = nls.localize('ConfigureGlobalExclusionsAction.label', "Open Settings");
        _this.enabled = true;
        _this.class = 'search-configure-exclusions';
        return _this;
    }
    ConfigureGlobalExclusionsAction.prototype.run = function () {
        return this.preferencesService.openGlobalSettings().then(null, errors.onUnexpectedError);
    };
    return ConfigureGlobalExclusionsAction;
}(actions_1.Action));
ConfigureGlobalExclusionsAction = __decorate([
    __param(0, preferences_1.IPreferencesService)
], ConfigureGlobalExclusionsAction);
exports.ConfigureGlobalExclusionsAction = ConfigureGlobalExclusionsAction;
