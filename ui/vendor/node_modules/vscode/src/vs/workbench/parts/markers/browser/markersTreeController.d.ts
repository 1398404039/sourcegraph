import * as mouse from 'vs/base/browser/mouseEvent';
import keyboard = require('vs/base/browser/keyboardEvent');
import tree = require('vs/base/parts/tree/browser/tree');
import treedefaults = require('vs/base/parts/tree/browser/treeDefaults');
import { RangeHighlightDecorations } from 'vs/workbench/common/editor/rangeDecorations';
import { IWorkbenchEditorService } from 'vs/workbench/services/editor/common/editorService';
import { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';
import { IContextMenuService } from 'vs/platform/contextview/browser/contextView';
import { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';
import { IMenuService } from 'vs/platform/actions/common/actions';
import { IActionProvider } from 'vs/base/parts/tree/browser/actionsRenderer';
import { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';
export declare class Controller extends treedefaults.DefaultController {
    private rangeHighlightDecorations;
    private actionProvider;
    private editorService;
    private contextMenuService;
    private _keybindingService;
    private telemetryService;
    private contextMenu;
    constructor(rangeHighlightDecorations: RangeHighlightDecorations, actionProvider: IActionProvider, editorService: IWorkbenchEditorService, contextMenuService: IContextMenuService, menuService: IMenuService, contextKeyService: IContextKeyService, _keybindingService: IKeybindingService, telemetryService: ITelemetryService);
    protected onLeftClick(tree: tree.ITree, element: any, event: mouse.IMouseEvent): boolean;
    protected onEnter(tree: tree.ITree, event: keyboard.IKeyboardEvent): boolean;
    protected onSpace(tree: tree.ITree, event: keyboard.IKeyboardEvent): boolean;
    onContextMenu(tree: tree.ITree, element: any, event: tree.ContextMenuEvent): boolean;
    private openFileAtElement(element, preserveFocus, sideByside, pinned);
    private _getMenuActions();
    private _keybindingFor(action);
}
