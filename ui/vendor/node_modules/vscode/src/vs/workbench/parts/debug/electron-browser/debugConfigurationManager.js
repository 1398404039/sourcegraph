/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var nls = require("vs/nls");
var winjs_base_1 = require("vs/base/common/winjs.base");
var strings = require("vs/base/common/strings");
var platform_1 = require("vs/base/common/platform");
var objects = require("vs/base/common/objects");
var uri_1 = require("vs/base/common/uri");
var network_1 = require("vs/base/common/network");
var paths = require("vs/base/common/paths");
var extensionsRegistry = require("vs/platform/extensions/common/extensionsRegistry");
var platform_2 = require("vs/platform/platform");
var jsonContributionRegistry_1 = require("vs/platform/jsonschemas/common/jsonContributionRegistry");
var configuration_1 = require("vs/platform/configuration/common/configuration");
var files_1 = require("vs/platform/files/common/files");
var telemetry_1 = require("vs/platform/telemetry/common/telemetry");
var workspace_1 = require("vs/platform/workspace/common/workspace");
var instantiation_1 = require("vs/platform/instantiation/common/instantiation");
var commands_1 = require("vs/platform/commands/common/commands");
var debug = require("vs/workbench/parts/debug/common/debug");
var debugAdapter_1 = require("vs/workbench/parts/debug/node/debugAdapter");
var editorService_1 = require("vs/workbench/services/editor/common/editorService");
var quickOpen_1 = require("vs/platform/quickOpen/common/quickOpen");
var configurationResolver_1 = require("vs/workbench/services/configurationResolver/common/configurationResolver");
// debuggers extension point
exports.debuggersExtPoint = extensionsRegistry.ExtensionsRegistry.registerExtensionPoint('debuggers', [], {
    description: nls.localize('vscode.extension.contributes.debuggers', 'Contributes debug adapters.'),
    type: 'array',
    defaultSnippets: [{ body: [{ type: '', extensions: [] }] }],
    items: {
        type: 'object',
        defaultSnippets: [{ body: { type: '', program: '', runtime: '', enableBreakpointsFor: { languageIds: [''] } } }],
        properties: {
            type: {
                description: nls.localize('vscode.extension.contributes.debuggers.type', "Unique identifier for this debug adapter."),
                type: 'string'
            },
            label: {
                description: nls.localize('vscode.extension.contributes.debuggers.label', "Display name for this debug adapter."),
                type: 'string'
            },
            program: {
                description: nls.localize('vscode.extension.contributes.debuggers.program', "Path to the debug adapter program. Path is either absolute or relative to the extension folder."),
                type: 'string'
            },
            args: {
                description: nls.localize('vscode.extension.contributes.debuggers.args', "Optional arguments to pass to the adapter."),
                type: 'array'
            },
            runtime: {
                description: nls.localize('vscode.extension.contributes.debuggers.runtime', "Optional runtime in case the program attribute is not an executable but requires a runtime."),
                type: 'string'
            },
            runtimeArgs: {
                description: nls.localize('vscode.extension.contributes.debuggers.runtimeArgs', "Optional runtime arguments."),
                type: 'array'
            },
            variables: {
                description: nls.localize('vscode.extension.contributes.debuggers.variables', "Mapping from interactive variables (e.g ${action.pickProcess}) in `launch.json` to a command."),
                type: 'object'
            },
            initialConfigurations: {
                description: nls.localize('vscode.extension.contributes.debuggers.initialConfigurations', "Configurations for generating the initial \'launch.json\'."),
                type: ['array', 'string'],
            },
            languages: {
                description: nls.localize('vscode.extension.contributes.debuggers.languages', "List of languages for which the debug extension could be considered the \"default debugger\"."),
                type: 'array'
            },
            adapterExecutableCommand: {
                description: nls.localize('vscode.extension.contributes.debuggers.adapterExecutableCommand', "If specified VS Code will call this command to determine the executable path of the debug adapter and the arguments to pass."),
                type: 'string'
            },
            startSessionCommand: {
                description: nls.localize('vscode.extension.contributes.debuggers.startSessionCommand', "If specified VS Code will call this command for the \"debug\" or \"run\" actions targeted for this extension."),
                type: 'string'
            },
            configurationSnippets: {
                description: nls.localize('vscode.extension.contributes.debuggers.configurationSnippets', "Snippets for adding new configurations in \'launch.json\'."),
                type: 'array'
            },
            configurationAttributes: {
                description: nls.localize('vscode.extension.contributes.debuggers.configurationAttributes', "JSON schema configurations for validating \'launch.json\'."),
                type: 'object'
            },
            windows: {
                description: nls.localize('vscode.extension.contributes.debuggers.windows', "Windows specific settings."),
                type: 'object',
                properties: {
                    runtime: {
                        description: nls.localize('vscode.extension.contributes.debuggers.windows.runtime', "Runtime used for Windows."),
                        type: 'string'
                    }
                }
            },
            osx: {
                description: nls.localize('vscode.extension.contributes.debuggers.osx', "OS X specific settings."),
                type: 'object',
                properties: {
                    runtime: {
                        description: nls.localize('vscode.extension.contributes.debuggers.osx.runtime', "Runtime used for OSX."),
                        type: 'string'
                    }
                }
            },
            linux: {
                description: nls.localize('vscode.extension.contributes.debuggers.linux', "Linux specific settings."),
                type: 'object',
                properties: {
                    runtime: {
                        description: nls.localize('vscode.extension.contributes.debuggers.linux.runtime', "Runtime used for Linux."),
                        type: 'string'
                    }
                }
            }
        }
    }
});
// breakpoints extension point #9037
var breakpointsExtPoint = extensionsRegistry.ExtensionsRegistry.registerExtensionPoint('breakpoints', [], {
    description: nls.localize('vscode.extension.contributes.breakpoints', 'Contributes breakpoints.'),
    type: 'array',
    defaultSnippets: [{ body: [{ language: '' }] }],
    items: {
        type: 'object',
        defaultSnippets: [{ body: { language: '' } }],
        properties: {
            language: {
                description: nls.localize('vscode.extension.contributes.breakpoints.language', "Allow breakpoints for this language."),
                type: 'string'
            },
        }
    }
});
// debug general schema
exports.schemaId = 'vscode://schemas/launch';
var defaultCompound = { name: 'Compound', configurations: [] };
var schema = {
    id: exports.schemaId,
    type: 'object',
    title: nls.localize('app.launch.json.title', "Launch"),
    required: ['version', 'configurations'],
    default: { version: '0.2.0', configurations: [], compounds: [] },
    properties: {
        version: {
            type: 'string',
            description: nls.localize('app.launch.json.version', "Version of this file format."),
            default: '0.2.0'
        },
        configurations: {
            type: 'array',
            description: nls.localize('app.launch.json.configurations', "List of configurations. Add new configurations or edit existing ones by using IntelliSense."),
            items: {
                defaultSnippets: [],
                'type': 'object',
                oneOf: []
            }
        },
        compounds: {
            type: 'array',
            description: nls.localize('app.launch.json.compounds', "List of compounds. Each compound references multiple configurations which will get launched together."),
            items: {
                type: 'object',
                required: ['name', 'configurations'],
                properties: {
                    name: {
                        type: 'string',
                        description: nls.localize('app.launch.json.compound.name', "Name of compound. Appears in the launch configuration drop down menu.")
                    },
                    configurations: {
                        type: 'array',
                        default: [],
                        items: {
                            type: 'string'
                        },
                        description: nls.localize('app.launch.json.compounds.configurations', "Names of configurations that will be started as part of this compound.")
                    }
                },
                default: defaultCompound
            },
            default: [
                defaultCompound
            ]
        }
    }
};
var jsonRegistry = platform_2.Registry.as(jsonContributionRegistry_1.Extensions.JSONContribution);
jsonRegistry.registerSchema(exports.schemaId, schema);
var ConfigurationManager = (function () {
    function ConfigurationManager(contextService, fileService, telemetryService, editorService, configurationService, quickOpenService, configurationResolverService, instantiationService, commandService) {
        this.contextService = contextService;
        this.fileService = fileService;
        this.telemetryService = telemetryService;
        this.editorService = editorService;
        this.configurationService = configurationService;
        this.quickOpenService = quickOpenService;
        this.configurationResolverService = configurationResolverService;
        this.instantiationService = instantiationService;
        this.commandService = commandService;
        this.adapters = [];
        this.registerListeners();
        this.breakpointModeIdsSet = new Set();
    }
    ConfigurationManager.prototype.registerListeners = function () {
        var _this = this;
        exports.debuggersExtPoint.setHandler(function (extensions) {
            extensions.forEach(function (extension) {
                extension.value.forEach(function (rawAdapter) {
                    if (!rawAdapter.type || (typeof rawAdapter.type !== 'string')) {
                        extension.collector.error(nls.localize('debugNoType', "Debug adapter 'type' can not be omitted and must be of type 'string'."));
                    }
                    if (rawAdapter.enableBreakpointsFor) {
                        rawAdapter.enableBreakpointsFor.languageIds.forEach(function (modeId) {
                            _this.breakpointModeIdsSet.add(modeId);
                        });
                    }
                    var duplicate = _this.adapters.filter(function (a) { return a.type === rawAdapter.type; }).pop();
                    if (duplicate) {
                        duplicate.merge(rawAdapter, extension.description);
                    }
                    else {
                        _this.adapters.push(_this.instantiationService.createInstance(debugAdapter_1.Adapter, rawAdapter, extension.description));
                    }
                });
            });
            // update the schema to include all attributes, snippets and types from extensions.
            _this.adapters.forEach(function (adapter) {
                var items = schema.properties['configurations'].items;
                var schemaAttributes = adapter.getSchemaAttributes();
                if (schemaAttributes) {
                    (_a = items.oneOf).push.apply(_a, schemaAttributes);
                }
                var configurationSnippets = adapter.configurationSnippets;
                if (configurationSnippets) {
                    (_b = items.defaultSnippets).push.apply(_b, configurationSnippets);
                }
                var _a, _b;
            });
        });
        breakpointsExtPoint.setHandler(function (extensions) {
            extensions.forEach(function (ext) {
                ext.value.forEach(function (breakpoints) {
                    _this.breakpointModeIdsSet.add(breakpoints.language);
                });
            });
        });
    };
    ConfigurationManager.prototype.getAdapter = function (type) {
        return this.adapters.filter(function (adapter) { return strings.equalsIgnoreCase(adapter.type, type); }).pop();
    };
    ConfigurationManager.prototype.getCompound = function (name) {
        if (!this.contextService.getWorkspace()) {
            return null;
        }
        var config = this.configurationService.getConfiguration('launch');
        if (!config || !config.compounds) {
            return null;
        }
        return config.compounds.filter(function (compound) { return compound.name === name; }).pop();
    };
    ConfigurationManager.prototype.getConfigurationNames = function () {
        var config = this.configurationService.getConfiguration('launch');
        if (!config || !config.configurations) {
            return [];
        }
        else {
            var names = config.configurations.filter(function (cfg) { return cfg && typeof cfg.name === 'string'; }).map(function (cfg) { return cfg.name; });
            if (names.length > 0 && config.compounds) {
                if (config.compounds) {
                    names.push.apply(names, config.compounds.filter(function (compound) { return typeof compound.name === 'string' && compound.configurations && compound.configurations.length; })
                        .map(function (compound) { return compound.name; }));
                }
            }
            return names;
        }
    };
    ConfigurationManager.prototype.getConfiguration = function (name) {
        if (!this.contextService.getWorkspace()) {
            return null;
        }
        var config = this.configurationService.getConfiguration('launch');
        if (!config || !config.configurations) {
            return null;
        }
        return config.configurations.filter(function (config) { return config && config.name === name; }).pop();
    };
    ConfigurationManager.prototype.resloveConfiguration = function (config) {
        var _this = this;
        if (!this.contextService.getWorkspace()) {
            return winjs_base_1.TPromise.as(config);
        }
        var result = objects.deepClone(config);
        // Set operating system specific properties #1873
        var setOSProperties = function (flag, osConfig) {
            if (flag && osConfig) {
                Object.keys(osConfig).forEach(function (key) {
                    result[key] = osConfig[key];
                });
            }
        };
        setOSProperties(platform_1.isWindows, result.windows);
        setOSProperties(platform_1.isMacintosh, result.osx);
        setOSProperties(platform_1.isLinux, result.linux);
        // massage configuration attributes - append workspace path to relatvie paths, substitute variables in paths.
        Object.keys(result).forEach(function (key) {
            result[key] = _this.configurationResolverService.resolveAny(result[key]);
        });
        var adapter = this.getAdapter(result.type);
        return this.configurationResolverService.resolveInteractiveVariables(result, adapter ? adapter.variables : null);
    };
    Object.defineProperty(ConfigurationManager.prototype, "configFileUri", {
        get: function () {
            return uri_1.default.file(paths.join(this.contextService.getWorkspace().resource.fsPath, '/.vscode/launch.json'));
        },
        enumerable: true,
        configurable: true
    });
    ConfigurationManager.prototype.openConfigFile = function (sideBySide, type) {
        var _this = this;
        var resource = this.configFileUri;
        var configFileCreated = false;
        return this.fileService.resolveContent(resource).then(function (content) { return true; }, function (err) {
            return _this.guessAdapter(type).then(function (adapter) { return adapter ? adapter.getInitialConfigurationContent() : undefined; })
                .then(function (content) {
                if (!content) {
                    return false;
                }
                configFileCreated = true;
                return _this.fileService.updateContent(resource, content).then(function () { return true; });
            });
        })
            .then(function (errorFree) {
            if (!errorFree) {
                return undefined;
            }
            _this.telemetryService.publicLog('debugConfigure');
            return _this.editorService.openEditor({
                resource: resource,
                options: {
                    forceOpen: true,
                    pinned: configFileCreated,
                    revealIfVisible: true
                },
            }, sideBySide);
        }, function (error) {
            throw new Error(nls.localize('DebugConfig.failed', "Unable to create 'launch.json' file inside the '.vscode' folder ({0}).", error));
        });
    };
    ConfigurationManager.prototype.getStartSessionCommand = function (type) {
        return this.guessAdapter(type).then(function (adapter) {
            if (adapter) {
                return {
                    command: adapter.startSessionCommand,
                    type: adapter.type
                };
            }
            return undefined;
        });
    };
    ConfigurationManager.prototype.guessAdapter = function (type) {
        var _this = this;
        if (type) {
            var adapter = this.getAdapter(type);
            return winjs_base_1.TPromise.as(adapter);
        }
        var editor = this.editorService.getActiveEditor();
        if (editor) {
            var codeEditor = editor.getControl();
            var model = codeEditor ? codeEditor.getModel() : undefined;
            var language_1 = model ? model.getLanguageIdentifier().language : undefined;
            var adapters = this.adapters.filter(function (a) { return a.languages && a.languages.indexOf(language_1) >= 0; });
            if (adapters.length === 1) {
                return winjs_base_1.TPromise.as(adapters[0]);
            }
        }
        return this.quickOpenService.pick(this.adapters.filter(function (a) { return a.hasInitialConfiguration(); }).concat([{ label: 'More...' }]), { placeHolder: nls.localize('selectDebug', "Select Environment") })
            .then(function (picked) {
            if (picked instanceof debugAdapter_1.Adapter) {
                return picked;
            }
            if (picked) {
                _this.commandService.executeCommand('debug.installMoreDebuggers');
            }
            return undefined;
        });
    };
    ConfigurationManager.prototype.canSetBreakpointsIn = function (model) {
        if (model.uri.scheme !== network_1.Schemas.file && model.uri.scheme !== debug.DEBUG_SCHEME) {
            return false;
        }
        if (this.configurationService.getConfiguration('debug').allowBreakpointsEverywhere) {
            return true;
        }
        var modeId = model ? model.getLanguageIdentifier().language : null;
        return this.breakpointModeIdsSet.has(modeId);
    };
    return ConfigurationManager;
}());
ConfigurationManager = __decorate([
    __param(0, workspace_1.IWorkspaceContextService),
    __param(1, files_1.IFileService),
    __param(2, telemetry_1.ITelemetryService),
    __param(3, editorService_1.IWorkbenchEditorService),
    __param(4, configuration_1.IConfigurationService),
    __param(5, quickOpen_1.IQuickOpenService),
    __param(6, configurationResolver_1.IConfigurationResolverService),
    __param(7, instantiation_1.IInstantiationService),
    __param(8, commands_1.ICommandService)
], ConfigurationManager);
exports.ConfigurationManager = ConfigurationManager;
