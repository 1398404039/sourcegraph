/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var nls = require("vs/nls");
var pfs_1 = require("vs/base/node/pfs");
var fs = require("fs");
var paths_1 = require("vs/base/common/paths");
var emmetActions_1 = require("vs/workbench/parts/emmet/node/emmetActions");
var actions_1 = require("vs/base/common/actions");
var editorCommonExtensions_1 = require("vs/editor/common/editorCommonExtensions");
var editorCommon_1 = require("vs/editor/common/editorCommon");
var message_1 = require("vs/platform/message/common/message");
var quickOpenService_1 = require("vs/workbench/services/quickopen/common/quickOpenService");
var workspace_1 = require("vs/platform/workspace/common/workspace");
var EncodeDecodeDataUrlAction = (function (_super) {
    __extends(EncodeDecodeDataUrlAction, _super);
    function EncodeDecodeDataUrlAction() {
        var _this = _super.call(this, {
            id: 'editor.emmet.action.encodeDecodeDataUrl',
            label: nls.localize('encodeDecodeDataUrl', "Emmet: Encode\\Decode data:URL image"),
            alias: 'Emmet: Encode\\Decode data:URL image',
            precondition: editorCommon_1.EditorContextKeys.Writable
        }) || this;
        _this.imageFilePath = null;
        return _this;
    }
    EncodeDecodeDataUrlAction.prototype.createPath = function (parent, fileName) {
        // TO DO replace with IFileService
        var stat = fs.statSync(parent);
        if (stat && !stat.isDirectory()) {
            parent = paths_1.dirname(parent);
        }
        return paths_1.join(parent, fileName);
    };
    EncodeDecodeDataUrlAction.prototype.runEmmetAction = function (accessor, ctx) {
        var _this = this;
        var workspaceContext = accessor.get(workspace_1.IWorkspaceContextService);
        var messageService = accessor.get(message_1.IMessageService);
        var quickOpenService = accessor.get(quickOpenService_1.IQuickOpenService);
        var currentLine = ctx.editorAccessor.getCurrentLine();
        if (!this.isDataURI(currentLine)) {
            this.encodeDecode(ctx);
            return;
        }
        if (!workspaceContext.getWorkspace()) {
            var message = nls.localize('noWorkspace', "Decoding a data:URL image is only available inside a workspace folder.");
            messageService.show(message_1.Severity.Info, message);
            return;
        }
        var options = {
            prompt: nls.localize('enterImagePath', "Enter file path (absolute or relative)"),
            placeHolder: nls.localize('path', "File path")
        };
        var quickPromise = quickOpenService.input(options)
            .then(function (path) {
            if (!_this.isValidInput(messageService, path)) {
                quickPromise.cancel();
            }
            _this.imageFilePath = path;
            var fullpath = _this.createPath(ctx.editorAccessor.getFilePath(), path);
            return pfs_1.fileExists(fullpath);
        })
            .then(function (status) {
            if (!status) {
                _this.encodeDecode(ctx, _this.imageFilePath);
                return;
            }
            var message = nls.localize('warnEscalation', "File **{0}** already exists.  Do you want to overwrite the existing file?", _this.imageFilePath);
            var actions = [
                new actions_1.Action('ok', nls.localize('ok', "OK"), '', true, function () {
                    _this.encodeDecode(ctx, _this.imageFilePath);
                    return null;
                }),
                new actions_1.Action('cancel', nls.localize('cancel', "Cancel"), '', true)
            ];
            messageService.show(message_1.Severity.Warning, { message: message, actions: actions });
        });
    };
    EncodeDecodeDataUrlAction.prototype.encodeDecode = function (ctx, filepath) {
        ctx.editorAccessor.prompt = function () {
            return filepath;
        };
        if (!ctx.emmet.run('encode_decode_data_url', ctx.editorAccessor)) {
            this.noExpansionOccurred(ctx.editor);
        }
    };
    EncodeDecodeDataUrlAction.prototype.isValidInput = function (messageService, input) {
        if (input === undefined) {
            return false;
        }
        // Validate all segments of path without absolute and empty segments
        // Valid: `images/test.png`, `./test.png`, `../images/test.png`, `\images\test.png`
        var isValidFilePath = true;
        var filePathSegments = paths_1.normalize(input).split('/').filter(function (segment) {
            return segment.length !== 0 && segment !== '..';
        });
        for (var i = 0; i < filePathSegments.length; i++) {
            if (!paths_1.isValidBasename(filePathSegments[i])) {
                isValidFilePath = false;
                break;
            }
        }
        if (!isValidFilePath) {
            var message = nls.localize('invalidFileNameError', "The name **{0}** is not valid as a file or folder name. Please choose a different name.", input);
            messageService.show(message_1.Severity.Error, message);
            return false;
        }
        return true;
    };
    EncodeDecodeDataUrlAction.prototype.isDataURI = function (data) {
        return /(?:src=|url\()['"]?data:/.test(data);
    };
    return EncodeDecodeDataUrlAction;
}(emmetActions_1.EmmetEditorAction));
EncodeDecodeDataUrlAction = __decorate([
    editorCommonExtensions_1.editorAction
], EncodeDecodeDataUrlAction);
