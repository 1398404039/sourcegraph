/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
require("./media/dirtydiffDecorator.css");
var async_1 = require("vs/base/common/async");
var lifecycle_1 = require("vs/base/common/lifecycle");
var winjs = require("vs/base/common/winjs.base");
var common = require("vs/editor/common/editorCommon");
var widget = require("vs/editor/browser/codeEditor");
var instantiation_1 = require("vs/platform/instantiation/common/instantiation");
var message_1 = require("vs/platform/message/common/message");
var workspace_1 = require("vs/platform/workspace/common/workspace");
var resolverService_1 = require("vs/editor/common/services/resolverService");
var editorService_1 = require("vs/workbench/services/editor/common/editorService");
var modelService_1 = require("vs/editor/common/services/modelService");
var editorWorkerService_1 = require("vs/editor/common/services/editorWorkerService");
var groupService_1 = require("vs/workbench/services/group/common/groupService");
var scm_1 = require("vs/workbench/services/scm/common/scm");
var DirtyDiffModelDecorator = (function () {
    function DirtyDiffModelDecorator(model, uri, scmService, modelService, editorWorkerService, editorService, contextService, textModelResolverService) {
        var _this = this;
        this.model = model;
        this.uri = uri;
        this.scmService = scmService;
        this.modelService = modelService;
        this.editorWorkerService = editorWorkerService;
        this.editorService = editorService;
        this.contextService = contextService;
        this.textModelResolverService = textModelResolverService;
        this.decorations = [];
        this.diffDelayer = new async_1.ThrottledDelayer(200);
        this.toDispose = [];
        this.triggerDiff();
        this.toDispose.push(model.onDidChangeContent(function () { return _this.triggerDiff(); }));
        this.toDispose.push(scmService.onDidChangeProvider(function () { return _this.triggerDiff(); }));
    }
    DirtyDiffModelDecorator.prototype.triggerDiff = function () {
        var _this = this;
        if (!this.diffDelayer) {
            return winjs.TPromise.as(null);
        }
        return this.diffDelayer
            .trigger(function () { return _this.diff(); })
            .then(function (diff) {
            if (!_this.model || _this.model.isDisposed() || !_this.baselineModel || _this.baselineModel.isDisposed()) {
                return undefined; // disposed
            }
            if (_this.baselineModel.getValueLength() === 0) {
                diff = [];
            }
            return _this.decorations = _this.model.deltaDecorations(_this.decorations, DirtyDiffModelDecorator.changesToDecorations(diff || []));
        });
    };
    DirtyDiffModelDecorator.prototype.diff = function () {
        var _this = this;
        return this.getOriginalURIPromise().then(function (originalURI) {
            if (!_this.model || _this.model.isDisposed() || !originalURI) {
                return winjs.TPromise.as([]); // disposed
            }
            return _this.editorWorkerService.computeDirtyDiff(originalURI, _this.model.uri, true);
        });
    };
    DirtyDiffModelDecorator.prototype.getOriginalURIPromise = function () {
        var _this = this;
        if (this._originalURIPromise) {
            return this._originalURIPromise;
        }
        var provider = this.scmService.activeProvider;
        if (!provider) {
            return winjs.TPromise.as(null);
        }
        this._originalURIPromise = provider.getOriginalResource(this.uri)
            .then(function (originalUri) {
            if (!originalUri) {
                return null;
            }
            return _this.textModelResolverService.createModelReference(originalUri)
                .then(function (ref) {
                _this.baselineModel = ref.object.textEditorModel;
                _this.toDispose.push(ref);
                _this.toDispose.push(ref.object.textEditorModel.onDidChangeContent(function () { return _this.triggerDiff(); }));
                return originalUri;
            });
        });
        return async_1.always(this._originalURIPromise, function () {
            _this._originalURIPromise = null;
        });
    };
    DirtyDiffModelDecorator.changesToDecorations = function (diff) {
        return diff.map(function (change) {
            var startLineNumber = change.modifiedStartLineNumber;
            var endLineNumber = change.modifiedEndLineNumber || startLineNumber;
            // Added
            if (change.originalEndLineNumber === 0) {
                return {
                    range: {
                        startLineNumber: startLineNumber, startColumn: 1,
                        endLineNumber: endLineNumber, endColumn: 1
                    },
                    options: DirtyDiffModelDecorator.ADDED_DECORATION_OPTIONS
                };
            }
            // Removed
            if (change.modifiedEndLineNumber === 0) {
                return {
                    range: {
                        startLineNumber: startLineNumber, startColumn: 1,
                        endLineNumber: startLineNumber, endColumn: 1
                    },
                    options: DirtyDiffModelDecorator.DELETED_DECORATION_OPTIONS
                };
            }
            // Modified
            return {
                range: {
                    startLineNumber: startLineNumber, startColumn: 1,
                    endLineNumber: endLineNumber, endColumn: 1
                },
                options: DirtyDiffModelDecorator.MODIFIED_DECORATION_OPTIONS
            };
        });
    };
    DirtyDiffModelDecorator.prototype.dispose = function () {
        this.toDispose = lifecycle_1.dispose(this.toDispose);
        if (this.model && !this.model.isDisposed()) {
            this.model.deltaDecorations(this.decorations, []);
        }
        this.model = null;
        this.baselineModel = null;
        this.decorations = null;
        if (this.diffDelayer) {
            this.diffDelayer.cancel();
            this.diffDelayer = null;
        }
    };
    return DirtyDiffModelDecorator;
}());
DirtyDiffModelDecorator.MODIFIED_DECORATION_OPTIONS = {
    linesDecorationsClassName: 'dirty-diff-modified-glyph',
    isWholeLine: true,
    overviewRuler: {
        color: 'rgba(0, 122, 204, 0.6)',
        darkColor: 'rgba(0, 122, 204, 0.6)',
        position: common.OverviewRulerLane.Left
    }
};
DirtyDiffModelDecorator.ADDED_DECORATION_OPTIONS = {
    linesDecorationsClassName: 'dirty-diff-added-glyph',
    isWholeLine: true,
    overviewRuler: {
        color: 'rgba(0, 122, 204, 0.6)',
        darkColor: 'rgba(0, 122, 204, 0.6)',
        position: common.OverviewRulerLane.Left
    }
};
DirtyDiffModelDecorator.DELETED_DECORATION_OPTIONS = {
    linesDecorationsClassName: 'dirty-diff-deleted-glyph',
    isWholeLine: true,
    overviewRuler: {
        color: 'rgba(0, 122, 204, 0.6)',
        darkColor: 'rgba(0, 122, 204, 0.6)',
        position: common.OverviewRulerLane.Left
    }
};
DirtyDiffModelDecorator = __decorate([
    __param(2, scm_1.ISCMService),
    __param(3, modelService_1.IModelService),
    __param(4, editorWorkerService_1.IEditorWorkerService),
    __param(5, editorService_1.IWorkbenchEditorService),
    __param(6, workspace_1.IWorkspaceContextService),
    __param(7, resolverService_1.ITextModelResolverService)
], DirtyDiffModelDecorator);
var DirtyDiffDecorator = (function () {
    function DirtyDiffDecorator(messageService, editorService, editorGroupService, contextService, instantiationService) {
        var _this = this;
        this.messageService = messageService;
        this.editorService = editorService;
        this.contextService = contextService;
        this.instantiationService = instantiationService;
        this.models = [];
        this.decorators = Object.create(null);
        this.toDispose = [];
        this.toDispose.push(editorGroupService.onEditorsChanged(function () { return _this.onEditorsChanged(); }));
    }
    DirtyDiffDecorator.prototype.getId = function () {
        return 'git.DirtyDiffModelDecorator';
    };
    DirtyDiffDecorator.prototype.onEditorsChanged = function () {
        // HACK: This is the best current way of figuring out whether to draw these decorations
        // or not. Needs context from the editor, to know whether it is a diff editor, in place editor
        // etc.
        var _this = this;
        var models = this.editorService.getVisibleEditors()
            .map(function (e) { return e.getControl(); })
            .filter(function (c) { return c instanceof widget.CodeEditor; })
            .map(function (e) { return e.getModel(); })
            .filter(function (m, i, a) { return !!m && !!m.uri && a.indexOf(m, i + 1) === -1; })
            .map(function (m) { return ({ model: m, uri: m.uri }); });
        var newModels = models.filter(function (p) { return _this.models.every(function (m) { return p.model !== m; }); });
        var oldModels = this.models.filter(function (m) { return models.every(function (p) { return p.model !== m; }); });
        newModels.forEach(function (_a) {
            var model = _a.model, uri = _a.uri;
            return _this.onModelVisible(model, uri);
        });
        oldModels.forEach(function (m) { return _this.onModelInvisible(m); });
        this.models = models.map(function (p) { return p.model; });
    };
    DirtyDiffDecorator.prototype.onModelVisible = function (model, uri) {
        this.decorators[model.id] = this.instantiationService.createInstance(DirtyDiffModelDecorator, model, uri);
    };
    DirtyDiffDecorator.prototype.onModelInvisible = function (model) {
        this.decorators[model.id].dispose();
        delete this.decorators[model.id];
    };
    DirtyDiffDecorator.prototype.dispose = function () {
        var _this = this;
        this.toDispose = lifecycle_1.dispose(this.toDispose);
        this.models.forEach(function (m) { return _this.decorators[m.id].dispose(); });
        this.models = null;
        this.decorators = null;
    };
    return DirtyDiffDecorator;
}());
DirtyDiffDecorator = __decorate([
    __param(0, message_1.IMessageService),
    __param(1, editorService_1.IWorkbenchEditorService),
    __param(2, groupService_1.IEditorGroupService),
    __param(3, workspace_1.IWorkspaceContextService),
    __param(4, instantiation_1.IInstantiationService)
], DirtyDiffDecorator);
exports.DirtyDiffDecorator = DirtyDiffDecorator;
