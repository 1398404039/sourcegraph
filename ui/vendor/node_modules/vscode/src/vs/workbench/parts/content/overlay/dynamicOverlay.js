/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var builder_1 = require("vs/base/browser/builder");
var partService_1 = require("vs/workbench/services/part/common/partService");
var contextkey_1 = require("vs/platform/contextkey/common/contextkey");
var OVERLAY_VISIBLE = new contextkey_1.RawContextKey('dynamicOverlayVisible', false);
var DynamicOverlay = (function () {
    function DynamicOverlay(partService, _contextKeyService) {
        this.partService = partService;
        this._contextKeyService = _contextKeyService;
        this._overlayVisible = OVERLAY_VISIBLE.bindTo(this._contextKeyService);
    }
    /**
     * Creates a customizable component to be rendered anywhere inside of the editor.
     * @param  {Builder} content A full builder object to be appended to the Overlay.
     * @param  {any} overlayStyles? Custom styling for the Overlay component otherwise default styles are used.
     * @param  {HTMLElement} parentContainer? The container to be wrapped around to provid a way for the element to manipulate it and add more child elements. Default value EDITOR_PART container.
     * @returns void
     */
    DynamicOverlay.prototype.create = function (content, overlayStyles, parentContainer) {
        var container = parentContainer ? parentContainer : this.partService.getContainer(partService_1.Parts.EDITOR_PART);
        this._overlay = builder_1.$(container.parentElement)
            .div({ 'class': 'dynamic-view-overlay' })
            .style(overlayStyles ? overlayStyles : this.getDefaultOverlayStyles())
            .display('none');
        builder_1.$(this._overlay).append(content);
    };
    /**
     * Default overlay styles to be used.
     * @returns any
     */
    DynamicOverlay.prototype.getDefaultOverlayStyles = function () {
        var offset = this.partService.getTitleBarOffset();
        return { position: 'relative', height: "calc(100% - " + offset + "px)", width: '100%', zIndex: '1999', backgroundColor: 'white' };
    };
    /**
     * Sets the overlyVisible state to true and updates the overlay display value
     * @param  {string} display? CSS display value to be used when the overlay is shown. Default is block.
     */
    DynamicOverlay.prototype.show = function (display) {
        if (!this._overlay) {
            console.error('Create must be called before calling show() dynamicOverlay');
            return;
        }
        if (this._overlay.style('display') === 'none') {
            this._overlay.display(display || 'block');
            this._overlayVisible.set(true);
        }
    };
    /**
     * Sets the overlayVisible state to false and updates the overlay's display value to 'none'.
     * @returns void
     */
    DynamicOverlay.prototype.hide = function () {
        if (this._overlay && this._overlay.style('display') !== 'none') {
            this._overlay.display('none');
            this._overlayVisible.reset();
        }
    };
    /**
     * Removes the current HTML element and all its children from its parent and unbinds
     * all listeners and properties set to the data slots.
     * @returns void
     */
    DynamicOverlay.prototype.destroy = function () {
        this.hide();
        this._overlay.destroy();
    };
    return DynamicOverlay;
}());
DynamicOverlay = __decorate([
    __param(0, partService_1.IPartService),
    __param(1, contextkey_1.IContextKeyService)
], DynamicOverlay);
exports.DynamicOverlay = DynamicOverlay;
