/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
require("./media/scmViewlet.css");
var winjs_base_1 = require("vs/base/common/winjs.base");
var event_1 = require("vs/base/common/event");
var event_2 = require("vs/base/browser/event");
var lifecycle_1 = require("vs/base/common/lifecycle");
var viewlet_1 = require("vs/workbench/browser/viewlet");
var dom_1 = require("vs/base/browser/dom");
var keyboardEvent_1 = require("vs/base/browser/keyboardEvent");
var telemetry_1 = require("vs/platform/telemetry/common/telemetry");
var listWidget_1 = require("vs/base/browser/ui/list/listWidget");
var scm_1 = require("vs/workbench/parts/scm/common/scm");
var labels_1 = require("vs/workbench/browser/labels");
var countBadge_1 = require("vs/base/browser/ui/countBadge/countBadge");
var scm_2 = require("vs/workbench/services/scm/common/scm");
var instantiation_1 = require("vs/platform/instantiation/common/instantiation");
var contextView_1 = require("vs/platform/contextview/browser/contextView");
var contextkey_1 = require("vs/platform/contextkey/common/contextkey");
var keybinding_1 = require("vs/platform/keybinding/common/keybinding");
var message_1 = require("vs/platform/message/common/message");
var listService_1 = require("vs/platform/list/browser/listService");
var actions_1 = require("vs/platform/actions/common/actions");
var menuItemActionItem_1 = require("vs/platform/actions/browser/menuItemActionItem");
var scmMenus_1 = require("./scmMenus");
var actionbar_1 = require("vs/base/browser/ui/actionbar/actionbar");
var themeService_1 = require("vs/workbench/services/themes/common/themeService");
var inputBox_1 = require("vs/base/browser/ui/inputbox/inputBox");
var modelService_1 = require("vs/editor/common/services/modelService");
function isSCMResource(element) {
    return !!element.uri;
}
function getElementId(element) {
    if (isSCMResource(element)) {
        return element.resourceGroupId + ":" + element.uri.toString();
    }
    else {
        return "" + element.id;
    }
}
var ResourceGroupRenderer = (function () {
    function ResourceGroupRenderer(scmMenus, actionItemProvider) {
        this.scmMenus = scmMenus;
        this.actionItemProvider = actionItemProvider;
    }
    Object.defineProperty(ResourceGroupRenderer.prototype, "templateId", {
        get: function () { return ResourceGroupRenderer.TEMPLATE_ID; },
        enumerable: true,
        configurable: true
    });
    ResourceGroupRenderer.prototype.renderTemplate = function (container) {
        var element = dom_1.append(container, dom_1.$('.resource-group'));
        var name = dom_1.append(element, dom_1.$('.name'));
        var actionsContainer = dom_1.append(element, dom_1.$('.actions'));
        var actionBar = new actionbar_1.ActionBar(actionsContainer, { actionItemProvider: this.actionItemProvider });
        var countContainer = dom_1.append(element, dom_1.$('.count'));
        var count = new countBadge_1.CountBadge(countContainer);
        return { name: name, count: count, actionBar: actionBar };
    };
    ResourceGroupRenderer.prototype.renderElement = function (group, index, template) {
        template.name.textContent = group.label;
        template.count.setCount(group.resources.length);
        template.actionBar.clear();
        template.actionBar.push(this.scmMenus.getResourceGroupActions(group));
    };
    ResourceGroupRenderer.prototype.disposeTemplate = function (template) {
    };
    return ResourceGroupRenderer;
}());
ResourceGroupRenderer.TEMPLATE_ID = 'resource group';
var ResourceRenderer = (function () {
    function ResourceRenderer(scmMenus, actionItemProvider, themeService, instantiationService) {
        this.scmMenus = scmMenus;
        this.actionItemProvider = actionItemProvider;
        this.themeService = themeService;
        this.instantiationService = instantiationService;
    }
    Object.defineProperty(ResourceRenderer.prototype, "templateId", {
        get: function () { return ResourceRenderer.TEMPLATE_ID; },
        enumerable: true,
        configurable: true
    });
    ResourceRenderer.prototype.renderTemplate = function (container) {
        var element = dom_1.append(container, dom_1.$('.resource'));
        var name = dom_1.append(element, dom_1.$('.name'));
        var fileLabel = this.instantiationService.createInstance(labels_1.FileLabel, name, void 0);
        var actionsContainer = dom_1.append(element, dom_1.$('.actions'));
        var actionBar = new actionbar_1.ActionBar(actionsContainer, { actionItemProvider: this.actionItemProvider });
        var decorationIcon = dom_1.append(element, dom_1.$('.decoration-icon'));
        return { name: name, fileLabel: fileLabel, decorationIcon: decorationIcon, actionBar: actionBar };
    };
    ResourceRenderer.prototype.renderElement = function (resource, index, template) {
        template.fileLabel.setFile(resource.uri);
        template.actionBar.clear();
        template.actionBar.push(this.scmMenus.getResourceActions(resource));
        dom_1.toggleClass(template.name, 'strike-through', resource.decorations.strikeThrough);
        var theme = this.themeService.getColorTheme();
        var icon = theme.isDarkTheme() ? resource.decorations.iconDark : resource.decorations.icon;
        if (icon) {
            template.decorationIcon.style.backgroundImage = "url('" + icon + "')";
        }
        else {
            template.decorationIcon.style.backgroundImage = '';
        }
    };
    ResourceRenderer.prototype.disposeTemplate = function (template) {
        // noop
    };
    return ResourceRenderer;
}());
ResourceRenderer.TEMPLATE_ID = 'resource';
ResourceRenderer = __decorate([
    __param(2, themeService_1.IWorkbenchThemeService),
    __param(3, instantiation_1.IInstantiationService)
], ResourceRenderer);
var Delegate = (function () {
    function Delegate() {
    }
    Delegate.prototype.getHeight = function () { return 22; };
    Delegate.prototype.getTemplateId = function (element) {
        return isSCMResource(element) ? ResourceRenderer.TEMPLATE_ID : ResourceGroupRenderer.TEMPLATE_ID;
    };
    return Delegate;
}());
var SCMViewlet = (function (_super) {
    __extends(SCMViewlet, _super);
    function SCMViewlet(telemetryService, scmService, instantiationService, contextViewService, contextKeyService, keybindingService, messageService, listService, contextMenuService, themeService, menuService, modelService) {
        var _this = _super.call(this, scm_1.VIEWLET_ID, telemetryService) || this;
        _this.scmService = scmService;
        _this.instantiationService = instantiationService;
        _this.contextViewService = contextViewService;
        _this.contextKeyService = contextKeyService;
        _this.keybindingService = keybindingService;
        _this.messageService = messageService;
        _this.listService = listService;
        _this.contextMenuService = contextMenuService;
        _this.themeService = themeService;
        _this.menuService = menuService;
        _this.modelService = modelService;
        _this.providerChangeDisposable = lifecycle_1.empty;
        _this.disposables = [];
        _this.menus = _this.instantiationService.createInstance(scmMenus_1.SCMMenus);
        _this.menus.onDidChangeTitle(_this.updateTitleArea, _this, _this.disposables);
        _this.disposables.push(_this.menus);
        return _this;
    }
    SCMViewlet.prototype.setActiveProvider = function (activeProvider) {
        this.providerChangeDisposable.dispose();
        if (activeProvider) {
            this.providerChangeDisposable = activeProvider.onDidChange(this.update, this);
        }
        else {
            this.providerChangeDisposable = lifecycle_1.empty;
        }
        this.updateTitleArea();
        this.update();
    };
    SCMViewlet.prototype.create = function (parent) {
        var _this = this;
        _super.prototype.create.call(this, parent);
        parent.addClass('scm-viewlet');
        var root = parent.getHTMLElement();
        this.inputBoxContainer = dom_1.append(root, dom_1.$('.scm-editor'));
        this.inputBox = new inputBox_1.InputBox(this.inputBoxContainer, this.contextViewService, { flexibleHeight: true });
        this.disposables.push(this.inputBox);
        this.inputBox.value = this.scmService.input.value;
        this.inputBox.onDidChange(function (value) { return _this.scmService.input.value = value; }, null, this.disposables);
        this.scmService.input.onDidChange(function (value) { return _this.inputBox.value = value; }, null, this.disposables);
        this.disposables.push(this.inputBox.onDidHeightChange(function () { return _this.layout(); }));
        event_1.chain(event_2.domEvent(this.inputBox.inputElement, 'keydown'))
            .map(function (e) { return new keyboardEvent_1.StandardKeyboardEvent(e); })
            .filter(function (e) { return e.equals(2048 /* CtrlCmd */ | 3 /* Enter */) || e.equals(2048 /* CtrlCmd */ | 49 /* KEY_S */); })
            .on(this.acceptChanges, this, this.disposables);
        this.listContainer = dom_1.append(root, dom_1.$('.scm-status.show-file-icons'));
        var delegate = new Delegate();
        var actionItemProvider = function (action) { return _this.getActionItem(action); };
        var renderers = [
            new ResourceGroupRenderer(this.menus, actionItemProvider),
            this.instantiationService.createInstance(ResourceRenderer, this.menus, actionItemProvider),
        ];
        this.list = new listWidget_1.List(this.listContainer, delegate, renderers, {
            identityProvider: function (e) { return getElementId(e); },
            keyboardSupport: false
        });
        this.disposables.push(this.listService.register(this.list));
        event_1.chain(this.list.onOpen)
            .map(function (e) { return e.elements[0]; })
            .filter(function (e) { return !!e && isSCMResource(e); })
            .on(this.open, this, this.disposables);
        this.list.onContextMenu(this.onListContextMenu, this, this.disposables);
        this.disposables.push(this.list);
        this.setActiveProvider(this.scmService.activeProvider);
        this.scmService.onDidChangeProvider(this.setActiveProvider, this, this.disposables);
        this.themeService.onDidColorThemeChange(this.update, this, this.disposables);
        return winjs_base_1.TPromise.as(null);
    };
    SCMViewlet.prototype.update = function () {
        var provider = this.scmService.activeProvider;
        if (!provider) {
            this.list.splice(0, this.list.length);
            return;
        }
        var elements = provider.resources
            .reduce(function (r, g) { return r.concat([g], g.resources); }, []);
        this.list.splice(0, this.list.length, elements);
    };
    SCMViewlet.prototype.layout = function (dimension) {
        if (dimension === void 0) { dimension = this.cachedDimension; }
        if (!dimension) {
            return;
        }
        this.cachedDimension = dimension;
        this.inputBox.layout();
        var editorHeight = this.inputBox.height;
        var listHeight = dimension.height - (editorHeight + 12 /* margin */);
        this.listContainer.style.height = listHeight + "px";
        this.list.layout(listHeight);
        dom_1.toggleClass(this.inputBoxContainer, 'scroll', editorHeight >= 134);
    };
    SCMViewlet.prototype.getOptimalWidth = function () {
        return 400;
    };
    SCMViewlet.prototype.focus = function () {
        _super.prototype.focus.call(this);
        this.inputBox.focus();
    };
    SCMViewlet.prototype.open = function (e) {
        this.scmService.activeProvider.open(e);
    };
    SCMViewlet.prototype.acceptChanges = function () {
        this.scmService.activeProvider.acceptChanges();
    };
    SCMViewlet.prototype.getActions = function () {
        return this.menus.getTitleActions();
    };
    SCMViewlet.prototype.getSecondaryActions = function () {
        return this.menus.getTitleSecondaryActions();
    };
    SCMViewlet.prototype.getActionItem = function (action) {
        return menuItemActionItem_1.createActionItem(action, this.keybindingService, this.messageService);
    };
    SCMViewlet.prototype.onListContextMenu = function (e) {
        var element = e.element;
        var actions;
        if (isSCMResource(element)) {
            actions = this.menus.getResourceContextActions(element);
        }
        else {
            actions = this.menus.getResourceGroupContextActions(element);
        }
        this.contextMenuService.showContextMenu({
            getAnchor: function () { return ({ x: e.clientX + 1, y: e.clientY }); },
            getActions: function () { return winjs_base_1.TPromise.as(actions); }
        });
    };
    SCMViewlet.prototype.dispose = function () {
        this.disposables = lifecycle_1.dispose(this.disposables);
        _super.prototype.dispose.call(this);
    };
    return SCMViewlet;
}(viewlet_1.Viewlet));
SCMViewlet = __decorate([
    __param(0, telemetry_1.ITelemetryService),
    __param(1, scm_2.ISCMService),
    __param(2, instantiation_1.IInstantiationService),
    __param(3, contextView_1.IContextViewService),
    __param(4, contextkey_1.IContextKeyService),
    __param(5, keybinding_1.IKeybindingService),
    __param(6, message_1.IMessageService),
    __param(7, listService_1.IListService),
    __param(8, contextView_1.IContextMenuService),
    __param(9, themeService_1.IWorkbenchThemeService),
    __param(10, actions_1.IMenuService),
    __param(11, modelService_1.IModelService)
], SCMViewlet);
exports.SCMViewlet = SCMViewlet;
