import './media/preferences.css';
import { TPromise } from 'vs/base/common/winjs.base';
import URI from 'vs/base/common/uri';
import { Disposable } from 'vs/base/common/lifecycle';
import { IWorkbenchEditorService } from 'vs/workbench/services/editor/common/editorService';
import { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';
import { IWorkspaceConfigurationService } from 'vs/workbench/services/configuration/common/configuration';
import { IEditorGroupService } from 'vs/workbench/services/group/common/groupService';
import { IStorageService } from 'vs/platform/storage/common/storage';
import { IFileService } from 'vs/platform/files/common/files';
import { IMessageService, IChoiceService } from 'vs/platform/message/common/message';
import { IExtensionService } from 'vs/platform/extensions/common/extensions';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import { IEnvironmentService } from 'vs/platform/environment/common/environment';
import { IConfigurationEditingService, IConfigurationValue } from 'vs/workbench/services/configuration/common/configurationEditing';
import { IPreferencesService, IPreferencesEditorModel } from 'vs/workbench/parts/preferences/common/preferences';
import { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';
import { ITextModelResolverService } from 'vs/editor/common/services/resolverService';
export declare class PreferencesService extends Disposable implements IPreferencesService {
    private editorService;
    private editorGroupService;
    private fileService;
    private configurationService;
    private messageService;
    private choiceService;
    private contextService;
    private instantiationService;
    private storageService;
    private environmentService;
    private telemetryService;
    private textModelResolverService;
    private configurationEditingService;
    private extensionService;
    static DEFAULT_SETTINGS_URI: URI;
    static DEFAULT_KEY_BINDINGS_URI: URI;
    _serviceBrand: any;
    private defaultPreferencesEditorModels;
    private defaultSettingsEditorInputForUser;
    private defaultSettingsEditorInputForWorkspace;
    constructor(editorService: IWorkbenchEditorService, editorGroupService: IEditorGroupService, fileService: IFileService, configurationService: IWorkspaceConfigurationService, messageService: IMessageService, choiceService: IChoiceService, contextService: IWorkspaceContextService, instantiationService: IInstantiationService, storageService: IStorageService, environmentService: IEnvironmentService, telemetryService: ITelemetryService, textModelResolverService: ITextModelResolverService, configurationEditingService: IConfigurationEditingService, extensionService: IExtensionService);
    createDefaultPreferencesEditorModel(uri: URI): TPromise<IPreferencesEditorModel>;
    resolvePreferencesEditorModel(uri: URI): TPromise<IPreferencesEditorModel>;
    openGlobalSettings(): TPromise<void>;
    openWorkspaceSettings(): TPromise<void>;
    openGlobalKeybindingSettings(): TPromise<void>;
    private openEditableSettings(configurationTarget);
    copyConfiguration(configurationValue: IConfigurationValue): void;
    private resolveSettingsEditorModel(configurationTarget);
    private getEmptyEditableSettingsContent(configurationTarget);
    private getEditableSettingsURI(configurationTarget);
    private promptToOpenWorkspaceSettings();
    private openSettings(configurationTarget);
    private getDefaultSettingsEditorInput(configurationTarget);
    private openTwoEditors(leftHandDefaultInput, editableResource, defaultEditableContents);
    private createIfNotExists(resource, contents);
    private getConfigurationTargetForCurrentActiveEditor();
    private getConfigurationTarget(resource);
    private getSelectionRange(setting, model);
    private fetchMostCommonlyUsedSettings();
    dispose(): void;
}
