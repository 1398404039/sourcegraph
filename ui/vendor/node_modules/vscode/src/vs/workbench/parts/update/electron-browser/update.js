/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var nls = require("vs/nls");
var severity_1 = require("vs/base/common/severity");
var winjs_base_1 = require("vs/base/common/winjs.base");
var actions_1 = require("vs/base/common/actions");
var message_1 = require("vs/platform/message/common/message");
var package_1 = require("vs/platform/package");
var product_1 = require("vs/platform/product");
var uri_1 = require("vs/base/common/uri");
var editorService_1 = require("vs/workbench/services/editor/common/editorService");
var instantiation_1 = require("vs/platform/instantiation/common/instantiation");
var releaseNotesInput_1 = require("vs/workbench/parts/update/electron-browser/releaseNotesInput");
var request_1 = require("vs/platform/request/node/request");
var request_2 = require("vs/base/node/request");
var keybinding_1 = require("vs/platform/keybinding/common/keybinding");
var keybinding_2 = require("vs/base/common/keybinding");
var opener_1 = require("vs/platform/opener/common/opener");
var storage_1 = require("vs/platform/storage/common/storage");
var update_1 = require("vs/platform/update/common/update");
var semver = require("semver");
var ApplyUpdateAction = (function (_super) {
    __extends(ApplyUpdateAction, _super);
    function ApplyUpdateAction(updateService) {
        var _this = _super.call(this, 'update.applyUpdate', nls.localize('updateNow', "Update Now"), null, true) || this;
        _this.updateService = updateService;
        return _this;
    }
    ApplyUpdateAction.prototype.run = function () {
        return this.updateService.quitAndInstall();
    };
    return ApplyUpdateAction;
}(actions_1.Action));
ApplyUpdateAction = __decorate([
    __param(0, update_1.IUpdateService)
], ApplyUpdateAction);
var NotNowAction = new actions_1.Action('update.later', nls.localize('later', "Later"), null, true, function () { return winjs_base_1.TPromise.as(true); });
function loadReleaseNotes(accessor, version) {
    var requestService = accessor.get(request_1.IRequestService);
    var keybindingService = accessor.get(keybinding_1.IKeybindingService);
    var match = /^(\d+\.\d)\./.exec(version);
    if (!match) {
        return winjs_base_1.TPromise.as(null);
    }
    var versionLabel = match[1].replace(/\./g, '_');
    var baseUrl = 'https://code.visualstudio.com/raw';
    var url = baseUrl + "/v" + versionLabel + ".md";
    var patchKeybindings = function (text) {
        var kb = function (match, kb) {
            var keybinding = keybindingService.lookupKeybindings(kb)[0];
            if (!keybinding) {
                return match;
            }
            return keybindingService.getLabelFor(keybinding);
        };
        var kbstyle = function (match, kb) {
            var code = keybinding_2.Keybinding.fromUserSettingsLabel(kb);
            if (!code) {
                return match;
            }
            var keybinding = new keybinding_2.Keybinding(code);
            if (!keybinding) {
                return match;
            }
            return keybindingService.getLabelFor(keybinding);
        };
        return text
            .replace(/kb\(([a-z.\d\-]+)\)/gi, kb)
            .replace(/kbstyle\(([^\)]+)\)/gi, kbstyle);
    };
    return requestService.request({ url: url })
        .then(request_2.asText)
        .then(function (text) { return patchKeybindings(text); });
}
exports.loadReleaseNotes = loadReleaseNotes;
var OpenLatestReleaseNotesInBrowserAction = (function (_super) {
    __extends(OpenLatestReleaseNotesInBrowserAction, _super);
    function OpenLatestReleaseNotesInBrowserAction(openerService) {
        var _this = _super.call(this, 'update.openLatestReleaseNotes', nls.localize('releaseNotes', "Release Notes"), null, true) || this;
        _this.openerService = openerService;
        return _this;
    }
    OpenLatestReleaseNotesInBrowserAction.prototype.run = function () {
        var uri = uri_1.default.parse(product_1.default.releaseNotesUrl);
        return this.openerService.open(uri);
    };
    return OpenLatestReleaseNotesInBrowserAction;
}(actions_1.Action));
OpenLatestReleaseNotesInBrowserAction = __decorate([
    __param(0, opener_1.IOpenerService)
], OpenLatestReleaseNotesInBrowserAction);
exports.OpenLatestReleaseNotesInBrowserAction = OpenLatestReleaseNotesInBrowserAction;
var AbstractShowReleaseNotesAction = (function (_super) {
    __extends(AbstractShowReleaseNotesAction, _super);
    function AbstractShowReleaseNotesAction(id, label, returnValue, version, editorService, instantiationService, openerService) {
        var _this = _super.call(this, id, label, null, true) || this;
        _this.returnValue = returnValue;
        _this.version = version;
        _this.editorService = editorService;
        _this.instantiationService = instantiationService;
        _this.openerService = openerService;
        return _this;
    }
    AbstractShowReleaseNotesAction.prototype.run = function () {
        var _this = this;
        if (!this.enabled) {
            return winjs_base_1.TPromise.as(false);
        }
        this.enabled = false;
        return this.instantiationService.invokeFunction(loadReleaseNotes, this.version)
            .then(function (text) { return _this.editorService.openEditor(_this.instantiationService.createInstance(releaseNotesInput_1.ReleaseNotesInput, _this.version, text)); })
            .then(function () { return true; })
            .then(null, function () {
            var action = _this.instantiationService.createInstance(OpenLatestReleaseNotesInBrowserAction);
            return action.run().then(function () { return false; });
        });
    };
    return AbstractShowReleaseNotesAction;
}(actions_1.Action));
AbstractShowReleaseNotesAction = __decorate([
    __param(4, editorService_1.IWorkbenchEditorService),
    __param(5, instantiation_1.IInstantiationService),
    __param(6, opener_1.IOpenerService)
], AbstractShowReleaseNotesAction);
exports.AbstractShowReleaseNotesAction = AbstractShowReleaseNotesAction;
var ShowReleaseNotesAction = (function (_super) {
    __extends(ShowReleaseNotesAction, _super);
    function ShowReleaseNotesAction(returnValue, version, editorService, instantiationService, openerService) {
        return _super.call(this, 'update.showReleaseNotes', nls.localize('releaseNotes', "Release Notes"), returnValue, version, editorService, instantiationService, openerService) || this;
    }
    return ShowReleaseNotesAction;
}(AbstractShowReleaseNotesAction));
ShowReleaseNotesAction = __decorate([
    __param(2, editorService_1.IWorkbenchEditorService),
    __param(3, instantiation_1.IInstantiationService),
    __param(4, opener_1.IOpenerService)
], ShowReleaseNotesAction);
exports.ShowReleaseNotesAction = ShowReleaseNotesAction;
var ShowCurrentReleaseNotesAction = (function (_super) {
    __extends(ShowCurrentReleaseNotesAction, _super);
    function ShowCurrentReleaseNotesAction(id, label, editorService, instantiationService, openerService) {
        if (id === void 0) { id = ShowCurrentReleaseNotesAction.ID; }
        if (label === void 0) { label = ShowCurrentReleaseNotesAction.LABEL; }
        return _super.call(this, id, label, true, package_1.default.version, editorService, instantiationService, openerService) || this;
    }
    return ShowCurrentReleaseNotesAction;
}(AbstractShowReleaseNotesAction));
ShowCurrentReleaseNotesAction.ID = 'update.showCurrentReleaseNotes';
ShowCurrentReleaseNotesAction.LABEL = nls.localize('showReleaseNotes', "Show Release Notes");
ShowCurrentReleaseNotesAction = __decorate([
    __param(2, editorService_1.IWorkbenchEditorService),
    __param(3, instantiation_1.IInstantiationService),
    __param(4, opener_1.IOpenerService)
], ShowCurrentReleaseNotesAction);
exports.ShowCurrentReleaseNotesAction = ShowCurrentReleaseNotesAction;
var DownloadAction = (function (_super) {
    __extends(DownloadAction, _super);
    function DownloadAction(url, updateService) {
        var _this = _super.call(this, 'update.download', nls.localize('downloadNow', "Download Now"), null, true) || this;
        _this.url = url;
        _this.updateService = updateService;
        return _this;
    }
    DownloadAction.prototype.run = function () {
        return this.updateService.quitAndInstall();
    };
    return DownloadAction;
}(actions_1.Action));
DownloadAction = __decorate([
    __param(1, update_1.IUpdateService)
], DownloadAction);
exports.DownloadAction = DownloadAction;
var LinkAction = function (id, message, licenseUrl) { return new actions_1.Action(id, message, null, true, function () { window.open(licenseUrl); return winjs_base_1.TPromise.as(null); }); };
var UpdateContribution = (function () {
    function UpdateContribution(storageService, instantiationService, messageService, updateService, editorService) {
        var lastVersion = storageService.get(UpdateContribution.KEY, storage_1.StorageScope.GLOBAL, '');
        // was there an update?
        if (product_1.default.releaseNotesUrl && lastVersion && package_1.default.version !== lastVersion) {
            instantiationService.invokeFunction(loadReleaseNotes, package_1.default.version)
                .then(function (text) { return editorService.openEditor(instantiationService.createInstance(releaseNotesInput_1.ReleaseNotesInput, package_1.default.version, text)); }, function () {
                messageService.show(message_1.Severity.Info, {
                    message: nls.localize('read the release notes', "Welcome to {0} v{1}! Would you like to read the Release Notes?", product_1.default.nameLong, package_1.default.version),
                    actions: [
                        instantiationService.createInstance(OpenLatestReleaseNotesInBrowserAction),
                        message_1.CloseAction
                    ]
                });
            });
        }
        // should we show the new license?
        if (product_1.default.licenseUrl && lastVersion && semver.satisfies(lastVersion, '<1.0.0') && semver.satisfies(package_1.default.version, '>=1.0.0')) {
            messageService.show(message_1.Severity.Info, {
                message: nls.localize('licenseChanged', "Our license terms have changed, please go through them.", product_1.default.nameLong, package_1.default.version),
                actions: [
                    LinkAction('update.showLicense', nls.localize('license', "Read License"), product_1.default.licenseUrl),
                    message_1.CloseAction
                ]
            });
        }
        var shouldShowInsiderDisclaimer = storageService.getBoolean(UpdateContribution.INSIDER_KEY, storage_1.StorageScope.GLOBAL, true);
        // is this a build which releases often?
        if (shouldShowInsiderDisclaimer && /-alpha$|-insider$/.test(package_1.default.version)) {
            messageService.show(message_1.Severity.Info, {
                message: nls.localize('insiderBuilds', "Insider builds and releases everyday!", product_1.default.nameLong, package_1.default.version),
                actions: [
                    new actions_1.Action('update.insiderBuilds', nls.localize('readmore', "Read More"), '', true, function () {
                        window.open('http://go.microsoft.com/fwlink/?LinkID=798816');
                        storageService.store(UpdateContribution.INSIDER_KEY, false, storage_1.StorageScope.GLOBAL);
                        return winjs_base_1.TPromise.as(null);
                    }),
                    new actions_1.Action('update.neverAgain', nls.localize('neverShowAgain', "Don't Show Again"), '', true, function () {
                        storageService.store(UpdateContribution.INSIDER_KEY, false, storage_1.StorageScope.GLOBAL);
                        return winjs_base_1.TPromise.as(null);
                    }),
                    message_1.CloseAction
                ]
            });
        }
        storageService.store(UpdateContribution.KEY, package_1.default.version, storage_1.StorageScope.GLOBAL);
        updateService.onUpdateReady(function (update) {
            var applyUpdateAction = instantiationService.createInstance(ApplyUpdateAction);
            var releaseNotesAction = instantiationService.createInstance(ShowReleaseNotesAction, false, update.version);
            messageService.show(severity_1.default.Info, {
                message: nls.localize('updateAvailable', "{0} will be updated after it restarts.", product_1.default.nameLong),
                actions: [applyUpdateAction, NotNowAction, releaseNotesAction]
            });
        });
        updateService.onUpdateAvailable(function (update) {
            var downloadAction = instantiationService.createInstance(DownloadAction, update.version);
            var releaseNotesAction = instantiationService.createInstance(ShowReleaseNotesAction, false, update.version);
            messageService.show(severity_1.default.Info, {
                message: nls.localize('thereIsUpdateAvailable', "There is an available update."),
                actions: [downloadAction, NotNowAction, releaseNotesAction]
            });
        });
        updateService.onUpdateNotAvailable(function (explicit) {
            if (!explicit) {
                return;
            }
            messageService.show(severity_1.default.Info, nls.localize('noUpdatesAvailable', "There are no updates currently available."));
        });
        updateService.onError(function (err) { return messageService.show(severity_1.default.Error, err); });
    }
    UpdateContribution.prototype.getId = function () { return 'vs.update'; };
    return UpdateContribution;
}());
UpdateContribution.KEY = 'releaseNotes/lastVersion';
UpdateContribution.INSIDER_KEY = 'releaseNotes/shouldShowInsiderDisclaimer';
UpdateContribution = __decorate([
    __param(0, storage_1.IStorageService),
    __param(1, instantiation_1.IInstantiationService),
    __param(2, message_1.IMessageService),
    __param(3, update_1.IUpdateService),
    __param(4, editorService_1.IWorkbenchEditorService)
], UpdateContribution);
exports.UpdateContribution = UpdateContribution;
