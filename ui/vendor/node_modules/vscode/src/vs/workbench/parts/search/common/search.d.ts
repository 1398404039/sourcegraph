import { TPromise } from 'vs/base/common/winjs.base';
import { IDisposable } from 'vs/base/common/lifecycle';
import { IRange } from 'vs/editor/common/editorCommon';
import URI from 'vs/base/common/uri';
import { ISearchConfiguration } from 'vs/platform/search/common/search';
import glob = require('vs/base/common/glob');
/**
 * Interface used to navigate to types by value.
 */
export interface IWorkspaceSymbol {
    name: string;
    type: string;
    containerName: string;
    range: IRange;
    resource: URI;
}
export interface IWorkspaceSymbolProvider {
    provideWorkspaceSymbols(search: string): TPromise<IWorkspaceSymbol[]>;
    resolveWorkspaceSymbol?: (item: IWorkspaceSymbol) => TPromise<IWorkspaceSymbol>;
}
export declare namespace WorkspaceSymbolProviderRegistry {
    function register(support: IWorkspaceSymbolProvider): IDisposable;
    function all(): IWorkspaceSymbolProvider[];
}
export declare function getWorkspaceSymbols(query: string): TPromise<[IWorkspaceSymbolProvider, IWorkspaceSymbol[]][]>;
export interface IWorkbenchSearchConfiguration extends ISearchConfiguration {
    search: {
        quickOpen: {
            includeSymbols: boolean;
        };
        exclude: glob.IExpression;
    };
}
