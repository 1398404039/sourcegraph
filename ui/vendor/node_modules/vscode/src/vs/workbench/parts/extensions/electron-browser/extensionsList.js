/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var dom_1 = require('vs/base/browser/dom');
var lifecycle_1 = require('vs/base/common/lifecycle');
var actionbar_1 = require('vs/base/browser/ui/actionbar/actionbar');
var instantiation_1 = require('vs/platform/instantiation/common/instantiation');
var message_1 = require('vs/platform/message/common/message');
var event_1 = require('vs/base/common/event');
var event_2 = require('vs/base/browser/event');
var extensionsActions_1 = require('./extensionsActions');
var extensionsWidgets_1 = require('./extensionsWidgets');
var events_1 = require('vs/base/common/events');
var Delegate = (function () {
    function Delegate() {
    }
    Delegate.prototype.getHeight = function () { return 62; };
    Delegate.prototype.getTemplateId = function () { return 'extension'; };
    return Delegate;
}());
exports.Delegate = Delegate;
var actionOptions = { icon: true, label: true };
var Renderer = (function () {
    function Renderer(instantiationService, messageService) {
        this.instantiationService = instantiationService;
        this.messageService = messageService;
    }
    Object.defineProperty(Renderer.prototype, "templateId", {
        get: function () { return 'extension'; },
        enumerable: true,
        configurable: true
    });
    Renderer.prototype.renderTemplate = function (root) {
        var _this = this;
        var element = dom_1.append(root, dom_1.$('.extension'));
        var icon = dom_1.append(element, dom_1.$('img.icon'));
        var details = dom_1.append(element, dom_1.$('.details'));
        var header = dom_1.append(details, dom_1.$('.header'));
        var name = dom_1.append(header, dom_1.$('span.name'));
        var version = dom_1.append(header, dom_1.$('span.version'));
        var installCount = dom_1.append(header, dom_1.$('span.install-count'));
        var ratings = dom_1.append(header, dom_1.$('span.ratings'));
        var description = dom_1.append(details, dom_1.$('.description.ellipsis'));
        var footer = dom_1.append(details, dom_1.$('.footer'));
        var author = dom_1.append(footer, dom_1.$('.author.ellipsis'));
        var actionbar = new actionbar_1.ActionBar(footer, { animated: false });
        actionbar.addListener2(events_1.EventType.RUN, function (_a) {
            var error = _a.error;
            return error && _this.messageService.show(message_1.Severity.Error, error);
        });
        var versionWidget = this.instantiationService.createInstance(extensionsWidgets_1.Label, version, function (e) { return e.version; });
        var installCountWidget = this.instantiationService.createInstance(extensionsWidgets_1.InstallWidget, installCount, { small: true });
        var ratingsWidget = this.instantiationService.createInstance(extensionsWidgets_1.RatingsWidget, ratings, { small: true });
        var builtinStatusAction = this.instantiationService.createInstance(extensionsActions_1.BuiltinStatusLabelAction);
        var installAction = this.instantiationService.createInstance(extensionsActions_1.CombinedInstallAction);
        var updateAction = this.instantiationService.createInstance(extensionsActions_1.UpdateAction);
        var restartAction = this.instantiationService.createInstance(extensionsActions_1.EnableAction);
        actionbar.push([restartAction, updateAction, installAction, builtinStatusAction], actionOptions);
        var disposables = [versionWidget, installCountWidget, ratingsWidget, installAction, builtinStatusAction, updateAction, restartAction, actionbar];
        return {
            element: element, icon: icon, name: name, installCount: installCount, ratings: ratings, author: author, description: description, disposables: disposables,
            extensionDisposables: [],
            set extension(extension) {
                versionWidget.extension = extension;
                installCountWidget.extension = extension;
                ratingsWidget.extension = extension;
                builtinStatusAction.extension = extension;
                installAction.extension = extension;
                updateAction.extension = extension;
                restartAction.extension = extension;
            }
        };
    };
    Renderer.prototype.renderPlaceholder = function (index, data) {
        dom_1.addClass(data.element, 'loading');
        data.extensionDisposables = lifecycle_1.dispose(data.extensionDisposables);
        data.icon.src = '';
        data.name.textContent = '';
        data.author.textContent = '';
        data.description.textContent = '';
        data.installCount.style.display = 'none';
        data.ratings.style.display = 'none';
        data.extension = null;
    };
    Renderer.prototype.renderElement = function (extension, index, data) {
        dom_1.removeClass(data.element, 'loading');
        data.extensionDisposables = lifecycle_1.dispose(data.extensionDisposables);
        var onError = event_1.once(event_2.domEvent(data.icon, 'error'));
        onError(function () { return data.icon.src = extension.iconUrlFallback; }, null, data.extensionDisposables);
        data.icon.src = extension.iconUrl;
        if (!data.icon.complete) {
            data.icon.style.visibility = 'hidden';
            data.icon.onload = function () { return data.icon.style.visibility = 'inherit'; };
        }
        else {
            data.icon.style.visibility = 'inherit';
        }
        data.name.textContent = extension.displayName;
        data.author.textContent = extension.publisherDisplayName;
        data.description.textContent = extension.description;
        data.installCount.style.display = '';
        data.ratings.style.display = '';
        data.extension = extension;
    };
    Renderer.prototype.disposeTemplate = function (data) {
        data.disposables = lifecycle_1.dispose(data.disposables);
    };
    Renderer = __decorate([
        __param(0, instantiation_1.IInstantiationService),
        __param(1, message_1.IMessageService)
    ], Renderer);
    return Renderer;
}());
exports.Renderer = Renderer;
