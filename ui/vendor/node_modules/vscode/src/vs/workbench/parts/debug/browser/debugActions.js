/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var nls = require("vs/nls");
var actions_1 = require("vs/base/common/actions");
var lifecycle = require("vs/base/common/lifecycle");
var winjs_base_1 = require("vs/base/common/winjs.base");
var keybinding_1 = require("vs/platform/keybinding/common/keybinding");
var commands_1 = require("vs/platform/commands/common/commands");
var debug_1 = require("vs/workbench/parts/debug/common/debug");
var debugModel_1 = require("vs/workbench/parts/debug/common/debugModel");
var partService_1 = require("vs/workbench/services/part/common/partService");
var panelService_1 = require("vs/workbench/services/panel/common/panelService");
var panel_1 = require("vs/workbench/browser/panel");
var AbstractDebugAction = (function (_super) {
    __extends(AbstractDebugAction, _super);
    function AbstractDebugAction(id, label, cssClass, debugService, keybindingService, weight) {
        var _this = _super.call(this, id, label, cssClass, false) || this;
        _this.debugService = debugService;
        _this.keybindingService = keybindingService;
        _this.weight = weight;
        _this.toDispose = [];
        _this.toDispose.push(_this.debugService.onDidChangeState(function () { return _this.updateEnablement(); }));
        _this.updateLabel(label);
        _this.updateEnablement();
        return _this;
    }
    AbstractDebugAction.prototype.run = function (e) {
        throw new Error('implement me');
    };
    Object.defineProperty(AbstractDebugAction.prototype, "tooltip", {
        get: function () {
            var keybinding = this.keybindingService.lookupKeybindings(this.id)[0];
            var keybindingLabel = keybinding && this.keybindingService.getLabelFor(keybinding);
            return keybindingLabel ? this.label + " (" + keybindingLabel + ")" : this.label;
        },
        enumerable: true,
        configurable: true
    });
    AbstractDebugAction.prototype.updateLabel = function (newLabel) {
        this.label = newLabel;
    };
    AbstractDebugAction.prototype.updateEnablement = function () {
        this.enabled = this.isEnabled(this.debugService.state);
    };
    AbstractDebugAction.prototype.isEnabled = function (state) {
        return state !== debug_1.State.Disabled;
    };
    AbstractDebugAction.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.toDispose = lifecycle.dispose(this.toDispose);
    };
    return AbstractDebugAction;
}(actions_1.Action));
AbstractDebugAction = __decorate([
    __param(3, debug_1.IDebugService),
    __param(4, keybinding_1.IKeybindingService)
], AbstractDebugAction);
exports.AbstractDebugAction = AbstractDebugAction;
var ConfigureAction = (function (_super) {
    __extends(ConfigureAction, _super);
    function ConfigureAction(id, label, debugService, keybindingService) {
        var _this = _super.call(this, id, label, 'debug-action configure', debugService, keybindingService) || this;
        _this.toDispose.push(debugService.getViewModel().onDidSelectConfiguration(function (configurationName) { return _this.updateClass(); }));
        _this.updateClass();
        return _this;
    }
    Object.defineProperty(ConfigureAction.prototype, "tooltip", {
        get: function () {
            if (this.debugService.getViewModel().selectedConfigurationName) {
                return ConfigureAction.LABEL;
            }
            return nls.localize('launchJsonNeedsConfigurtion', "Configure or Fix 'launch.json'");
        },
        enumerable: true,
        configurable: true
    });
    ConfigureAction.prototype.updateClass = function () {
        this.class = this.debugService.getViewModel().selectedConfigurationName ? 'debug-action configure' : 'debug-action configure notification';
    };
    ConfigureAction.prototype.run = function (event) {
        var sideBySide = !!(event && (event.ctrlKey || event.metaKey));
        return this.debugService.getConfigurationManager().openConfigFile(sideBySide);
    };
    return ConfigureAction;
}(AbstractDebugAction));
ConfigureAction.ID = 'workbench.action.debug.configure';
ConfigureAction.LABEL = nls.localize('openLaunchJson', "Open {0}", 'launch.json');
ConfigureAction = __decorate([
    __param(2, debug_1.IDebugService), __param(3, keybinding_1.IKeybindingService)
], ConfigureAction);
exports.ConfigureAction = ConfigureAction;
var StartAction = (function (_super) {
    __extends(StartAction, _super);
    function StartAction(id, label, debugService, keybindingService, commandService) {
        var _this = _super.call(this, id, label, 'debug-action start', debugService, keybindingService) || this;
        _this.commandService = commandService;
        _this.debugService.getViewModel().onDidSelectConfiguration(function () {
            _this.updateEnablement();
        });
        return _this;
    }
    StartAction.prototype.run = function () {
        return this.commandService.executeCommand('_workbench.startDebug', this.debugService.getViewModel().selectedConfigurationName);
    };
    // Disabled if the launch drop down shows the launch config that is already running.
    StartAction.prototype.isEnabled = function (state) {
        var _this = this;
        var process = this.debugService.getModel().getProcesses();
        return _super.prototype.isEnabled.call(this, state) && process.every(function (p) { return p.name !== _this.debugService.getViewModel().selectedConfigurationName; });
    };
    return StartAction;
}(AbstractDebugAction));
StartAction.ID = 'workbench.action.debug.start';
StartAction.LABEL = nls.localize('startDebug', "Start Debugging");
StartAction = __decorate([
    __param(2, debug_1.IDebugService), __param(3, keybinding_1.IKeybindingService), __param(4, commands_1.ICommandService)
], StartAction);
exports.StartAction = StartAction;
var RestartAction = (function (_super) {
    __extends(RestartAction, _super);
    function RestartAction(id, label, debugService, keybindingService) {
        var _this = _super.call(this, id, label, 'debug-action restart', debugService, keybindingService, 70) || this;
        _this.setLabel(_this.debugService.getViewModel().focusedProcess);
        _this.toDispose.push(_this.debugService.getViewModel().onDidFocusStackFrame(function () { return _this.setLabel(_this.debugService.getViewModel().focusedProcess); }));
        return _this;
    }
    RestartAction.prototype.setLabel = function (process) {
        this.updateLabel(process && process.session.requestType === debug_1.SessionRequestType.ATTACH ? RestartAction.RECONNECT_LABEL : RestartAction.LABEL);
    };
    RestartAction.prototype.run = function () {
        var process = this.debugService.getViewModel().focusedProcess;
        return this.debugService.restartProcess(process);
    };
    RestartAction.prototype.isEnabled = function (state) {
        return _super.prototype.isEnabled.call(this, state) && state !== debug_1.State.Inactive;
    };
    return RestartAction;
}(AbstractDebugAction));
RestartAction.ID = 'workbench.action.debug.restart';
RestartAction.LABEL = nls.localize('restartDebug', "Restart");
RestartAction.RECONNECT_LABEL = nls.localize('reconnectDebug', "Reconnect");
RestartAction = __decorate([
    __param(2, debug_1.IDebugService), __param(3, keybinding_1.IKeybindingService)
], RestartAction);
exports.RestartAction = RestartAction;
var StepOverAction = (function (_super) {
    __extends(StepOverAction, _super);
    function StepOverAction(id, label, debugService, keybindingService) {
        return _super.call(this, id, label, 'debug-action step-over', debugService, keybindingService, 20) || this;
    }
    StepOverAction.prototype.run = function (thread) {
        if (!(thread instanceof debugModel_1.Thread)) {
            thread = this.debugService.getViewModel().focusedThread;
        }
        return thread ? thread.next() : winjs_base_1.TPromise.as(null);
    };
    StepOverAction.prototype.isEnabled = function (state) {
        return _super.prototype.isEnabled.call(this, state) && state === debug_1.State.Stopped;
    };
    return StepOverAction;
}(AbstractDebugAction));
StepOverAction.ID = 'workbench.action.debug.stepOver';
StepOverAction.LABEL = nls.localize('stepOverDebug', "Step Over");
StepOverAction = __decorate([
    __param(2, debug_1.IDebugService), __param(3, keybinding_1.IKeybindingService)
], StepOverAction);
exports.StepOverAction = StepOverAction;
var StepIntoAction = (function (_super) {
    __extends(StepIntoAction, _super);
    function StepIntoAction(id, label, debugService, keybindingService) {
        return _super.call(this, id, label, 'debug-action step-into', debugService, keybindingService, 30) || this;
    }
    StepIntoAction.prototype.run = function (thread) {
        if (!(thread instanceof debugModel_1.Thread)) {
            thread = this.debugService.getViewModel().focusedThread;
        }
        return thread ? thread.stepIn() : winjs_base_1.TPromise.as(null);
    };
    StepIntoAction.prototype.isEnabled = function (state) {
        return _super.prototype.isEnabled.call(this, state) && state === debug_1.State.Stopped;
    };
    return StepIntoAction;
}(AbstractDebugAction));
StepIntoAction.ID = 'workbench.action.debug.stepInto';
StepIntoAction.LABEL = nls.localize('stepIntoDebug', "Step Into");
StepIntoAction = __decorate([
    __param(2, debug_1.IDebugService), __param(3, keybinding_1.IKeybindingService)
], StepIntoAction);
exports.StepIntoAction = StepIntoAction;
var StepOutAction = (function (_super) {
    __extends(StepOutAction, _super);
    function StepOutAction(id, label, debugService, keybindingService) {
        return _super.call(this, id, label, 'debug-action step-out', debugService, keybindingService, 40) || this;
    }
    StepOutAction.prototype.run = function (thread) {
        if (!(thread instanceof debugModel_1.Thread)) {
            thread = this.debugService.getViewModel().focusedThread;
        }
        return thread ? thread.stepOut() : winjs_base_1.TPromise.as(null);
    };
    StepOutAction.prototype.isEnabled = function (state) {
        return _super.prototype.isEnabled.call(this, state) && state === debug_1.State.Stopped;
    };
    return StepOutAction;
}(AbstractDebugAction));
StepOutAction.ID = 'workbench.action.debug.stepOut';
StepOutAction.LABEL = nls.localize('stepOutDebug', "Step Out");
StepOutAction = __decorate([
    __param(2, debug_1.IDebugService), __param(3, keybinding_1.IKeybindingService)
], StepOutAction);
exports.StepOutAction = StepOutAction;
var StopAction = (function (_super) {
    __extends(StopAction, _super);
    function StopAction(id, label, debugService, keybindingService) {
        return _super.call(this, id, label, 'debug-action stop', debugService, keybindingService, 80) || this;
    }
    StopAction.prototype.run = function () {
        var process = this.debugService.getViewModel().focusedProcess;
        return process ? process.session.disconnect(false, true) : winjs_base_1.TPromise.as(null);
    };
    StopAction.prototype.isEnabled = function (state) {
        return _super.prototype.isEnabled.call(this, state) && state !== debug_1.State.Inactive;
    };
    return StopAction;
}(AbstractDebugAction));
StopAction.ID = 'workbench.action.debug.stop';
StopAction.LABEL = nls.localize('stopDebug', "Stop");
StopAction = __decorate([
    __param(2, debug_1.IDebugService), __param(3, keybinding_1.IKeybindingService)
], StopAction);
exports.StopAction = StopAction;
var DisconnectAction = (function (_super) {
    __extends(DisconnectAction, _super);
    function DisconnectAction(id, label, debugService, keybindingService) {
        return _super.call(this, id, label, 'debug-action disconnect', debugService, keybindingService, 80) || this;
    }
    DisconnectAction.prototype.run = function () {
        var process = this.debugService.getViewModel().focusedProcess;
        return process ? process.session.disconnect(false, true) : winjs_base_1.TPromise.as(null);
    };
    DisconnectAction.prototype.isEnabled = function (state) {
        return _super.prototype.isEnabled.call(this, state) && state !== debug_1.State.Inactive;
    };
    return DisconnectAction;
}(AbstractDebugAction));
DisconnectAction.ID = 'workbench.action.debug.disconnect';
DisconnectAction.LABEL = nls.localize('disconnectDebug', "Disconnect");
DisconnectAction = __decorate([
    __param(2, debug_1.IDebugService), __param(3, keybinding_1.IKeybindingService)
], DisconnectAction);
exports.DisconnectAction = DisconnectAction;
var ContinueAction = (function (_super) {
    __extends(ContinueAction, _super);
    function ContinueAction(id, label, debugService, keybindingService) {
        return _super.call(this, id, label, 'debug-action continue', debugService, keybindingService, 10) || this;
    }
    ContinueAction.prototype.run = function (thread) {
        if (!(thread instanceof debugModel_1.Thread)) {
            thread = this.debugService.getViewModel().focusedThread;
        }
        return thread ? thread.continue() : winjs_base_1.TPromise.as(null);
    };
    ContinueAction.prototype.isEnabled = function (state) {
        return _super.prototype.isEnabled.call(this, state) && state === debug_1.State.Stopped;
    };
    return ContinueAction;
}(AbstractDebugAction));
ContinueAction.ID = 'workbench.action.debug.continue';
ContinueAction.LABEL = nls.localize('continueDebug', "Continue");
ContinueAction = __decorate([
    __param(2, debug_1.IDebugService), __param(3, keybinding_1.IKeybindingService)
], ContinueAction);
exports.ContinueAction = ContinueAction;
var PauseAction = (function (_super) {
    __extends(PauseAction, _super);
    function PauseAction(id, label, debugService, keybindingService) {
        return _super.call(this, id, label, 'debug-action pause', debugService, keybindingService, 10) || this;
    }
    PauseAction.prototype.run = function (thread) {
        if (!(thread instanceof debugModel_1.Thread)) {
            thread = this.debugService.getViewModel().focusedThread;
        }
        return thread ? thread.pause() : winjs_base_1.TPromise.as(null);
    };
    PauseAction.prototype.isEnabled = function (state) {
        return _super.prototype.isEnabled.call(this, state) && state === debug_1.State.Running;
    };
    return PauseAction;
}(AbstractDebugAction));
PauseAction.ID = 'workbench.action.debug.pause';
PauseAction.LABEL = nls.localize('pauseDebug', "Pause");
PauseAction = __decorate([
    __param(2, debug_1.IDebugService), __param(3, keybinding_1.IKeybindingService)
], PauseAction);
exports.PauseAction = PauseAction;
var RestartFrameAction = (function (_super) {
    __extends(RestartFrameAction, _super);
    function RestartFrameAction(id, label, debugService, keybindingService) {
        return _super.call(this, id, label, 'debug-action restart-frame', debugService, keybindingService) || this;
    }
    RestartFrameAction.prototype.run = function (frame) {
        if (!frame) {
            frame = this.debugService.getViewModel().focusedStackFrame;
        }
        return frame.restart();
    };
    return RestartFrameAction;
}(AbstractDebugAction));
RestartFrameAction.ID = 'workbench.action.debug.restartFrame';
RestartFrameAction.LABEL = nls.localize('restartFrame', "Restart Frame");
RestartFrameAction = __decorate([
    __param(2, debug_1.IDebugService), __param(3, keybinding_1.IKeybindingService)
], RestartFrameAction);
exports.RestartFrameAction = RestartFrameAction;
var RemoveBreakpointAction = (function (_super) {
    __extends(RemoveBreakpointAction, _super);
    function RemoveBreakpointAction(id, label, debugService, keybindingService) {
        return _super.call(this, id, label, 'debug-action remove', debugService, keybindingService) || this;
    }
    RemoveBreakpointAction.prototype.run = function (breakpoint) {
        return breakpoint instanceof debugModel_1.Breakpoint ? this.debugService.removeBreakpoints(breakpoint.getId())
            : this.debugService.removeFunctionBreakpoints(breakpoint.getId());
    };
    return RemoveBreakpointAction;
}(AbstractDebugAction));
RemoveBreakpointAction.ID = 'workbench.debug.viewlet.action.removeBreakpoint';
RemoveBreakpointAction.LABEL = nls.localize('removeBreakpoint', "Remove Breakpoint");
RemoveBreakpointAction = __decorate([
    __param(2, debug_1.IDebugService), __param(3, keybinding_1.IKeybindingService)
], RemoveBreakpointAction);
exports.RemoveBreakpointAction = RemoveBreakpointAction;
var RemoveAllBreakpointsAction = (function (_super) {
    __extends(RemoveAllBreakpointsAction, _super);
    function RemoveAllBreakpointsAction(id, label, debugService, keybindingService) {
        var _this = _super.call(this, id, label, 'debug-action remove-all', debugService, keybindingService) || this;
        _this.toDispose.push(_this.debugService.getModel().onDidChangeBreakpoints(function () { return _this.updateEnablement(); }));
        return _this;
    }
    RemoveAllBreakpointsAction.prototype.run = function () {
        return winjs_base_1.TPromise.join([this.debugService.removeBreakpoints(), this.debugService.removeFunctionBreakpoints()]);
    };
    RemoveAllBreakpointsAction.prototype.isEnabled = function (state) {
        var model = this.debugService.getModel();
        return _super.prototype.isEnabled.call(this, state) && (model.getBreakpoints().length > 0 || model.getFunctionBreakpoints().length > 0);
    };
    return RemoveAllBreakpointsAction;
}(AbstractDebugAction));
RemoveAllBreakpointsAction.ID = 'workbench.debug.viewlet.action.removeAllBreakpoints';
RemoveAllBreakpointsAction.LABEL = nls.localize('removeAllBreakpoints', "Remove All Breakpoints");
RemoveAllBreakpointsAction = __decorate([
    __param(2, debug_1.IDebugService), __param(3, keybinding_1.IKeybindingService)
], RemoveAllBreakpointsAction);
exports.RemoveAllBreakpointsAction = RemoveAllBreakpointsAction;
var ToggleEnablementAction = (function (_super) {
    __extends(ToggleEnablementAction, _super);
    function ToggleEnablementAction(id, label, debugService, keybindingService) {
        return _super.call(this, id, label, 'debug-action toggle-enablement', debugService, keybindingService) || this;
    }
    ToggleEnablementAction.prototype.run = function (element) {
        return this.debugService.enableOrDisableBreakpoints(!element.enabled, element);
    };
    return ToggleEnablementAction;
}(AbstractDebugAction));
ToggleEnablementAction.ID = 'workbench.debug.viewlet.action.toggleBreakpointEnablement';
ToggleEnablementAction.LABEL = nls.localize('toggleEnablement', "Enable/Disable Breakpoint");
ToggleEnablementAction = __decorate([
    __param(2, debug_1.IDebugService), __param(3, keybinding_1.IKeybindingService)
], ToggleEnablementAction);
exports.ToggleEnablementAction = ToggleEnablementAction;
var EnableAllBreakpointsAction = (function (_super) {
    __extends(EnableAllBreakpointsAction, _super);
    function EnableAllBreakpointsAction(id, label, debugService, keybindingService) {
        var _this = _super.call(this, id, label, 'debug-action enable-all-breakpoints', debugService, keybindingService) || this;
        _this.toDispose.push(_this.debugService.getModel().onDidChangeBreakpoints(function () { return _this.updateEnablement(); }));
        return _this;
    }
    EnableAllBreakpointsAction.prototype.run = function () {
        return this.debugService.enableOrDisableBreakpoints(true);
    };
    EnableAllBreakpointsAction.prototype.isEnabled = function (state) {
        var model = this.debugService.getModel();
        return _super.prototype.isEnabled.call(this, state) && model.getBreakpoints().concat(model.getFunctionBreakpoints()).concat(model.getExceptionBreakpoints()).some(function (bp) { return !bp.enabled; });
    };
    return EnableAllBreakpointsAction;
}(AbstractDebugAction));
EnableAllBreakpointsAction.ID = 'workbench.debug.viewlet.action.enableAllBreakpoints';
EnableAllBreakpointsAction.LABEL = nls.localize('enableAllBreakpoints', "Enable All Breakpoints");
EnableAllBreakpointsAction = __decorate([
    __param(2, debug_1.IDebugService), __param(3, keybinding_1.IKeybindingService)
], EnableAllBreakpointsAction);
exports.EnableAllBreakpointsAction = EnableAllBreakpointsAction;
var DisableAllBreakpointsAction = (function (_super) {
    __extends(DisableAllBreakpointsAction, _super);
    function DisableAllBreakpointsAction(id, label, debugService, keybindingService) {
        var _this = _super.call(this, id, label, 'debug-action disable-all-breakpoints', debugService, keybindingService) || this;
        _this.toDispose.push(_this.debugService.getModel().onDidChangeBreakpoints(function () { return _this.updateEnablement(); }));
        return _this;
    }
    DisableAllBreakpointsAction.prototype.run = function () {
        return this.debugService.enableOrDisableBreakpoints(false);
    };
    DisableAllBreakpointsAction.prototype.isEnabled = function (state) {
        var model = this.debugService.getModel();
        return _super.prototype.isEnabled.call(this, state) && model.getBreakpoints().concat(model.getFunctionBreakpoints()).concat(model.getExceptionBreakpoints()).some(function (bp) { return bp.enabled; });
    };
    return DisableAllBreakpointsAction;
}(AbstractDebugAction));
DisableAllBreakpointsAction.ID = 'workbench.debug.viewlet.action.disableAllBreakpoints';
DisableAllBreakpointsAction.LABEL = nls.localize('disableAllBreakpoints', "Disable All Breakpoints");
DisableAllBreakpointsAction = __decorate([
    __param(2, debug_1.IDebugService), __param(3, keybinding_1.IKeybindingService)
], DisableAllBreakpointsAction);
exports.DisableAllBreakpointsAction = DisableAllBreakpointsAction;
var ToggleBreakpointsActivatedAction = (function (_super) {
    __extends(ToggleBreakpointsActivatedAction, _super);
    function ToggleBreakpointsActivatedAction(id, label, debugService, keybindingService) {
        var _this = _super.call(this, id, label, 'debug-action breakpoints-activate', debugService, keybindingService) || this;
        _this.updateLabel(_this.debugService.getModel().areBreakpointsActivated() ? ToggleBreakpointsActivatedAction.DEACTIVATE_LABEL : ToggleBreakpointsActivatedAction.ACTIVATE_LABEL);
        _this.toDispose.push(_this.debugService.getModel().onDidChangeBreakpoints(function () {
            _this.updateLabel(_this.debugService.getModel().areBreakpointsActivated() ? ToggleBreakpointsActivatedAction.DEACTIVATE_LABEL : ToggleBreakpointsActivatedAction.ACTIVATE_LABEL);
            _this.updateEnablement();
        }));
        return _this;
    }
    ToggleBreakpointsActivatedAction.prototype.run = function () {
        return this.debugService.setBreakpointsActivated(!this.debugService.getModel().areBreakpointsActivated());
    };
    ToggleBreakpointsActivatedAction.prototype.isEnabled = function (state) {
        return (this.debugService.getModel().getFunctionBreakpoints().length + this.debugService.getModel().getBreakpoints().length) > 0;
    };
    return ToggleBreakpointsActivatedAction;
}(AbstractDebugAction));
ToggleBreakpointsActivatedAction.ID = 'workbench.debug.viewlet.action.toggleBreakpointsActivatedAction';
ToggleBreakpointsActivatedAction.ACTIVATE_LABEL = nls.localize('activateBreakpoints', "Activate Breakpoints");
ToggleBreakpointsActivatedAction.DEACTIVATE_LABEL = nls.localize('deactivateBreakpoints', "Deactivate Breakpoints");
ToggleBreakpointsActivatedAction = __decorate([
    __param(2, debug_1.IDebugService), __param(3, keybinding_1.IKeybindingService)
], ToggleBreakpointsActivatedAction);
exports.ToggleBreakpointsActivatedAction = ToggleBreakpointsActivatedAction;
var ReapplyBreakpointsAction = (function (_super) {
    __extends(ReapplyBreakpointsAction, _super);
    function ReapplyBreakpointsAction(id, label, debugService, keybindingService) {
        var _this = _super.call(this, id, label, null, debugService, keybindingService) || this;
        _this.toDispose.push(_this.debugService.getModel().onDidChangeBreakpoints(function () { return _this.updateEnablement(); }));
        return _this;
    }
    ReapplyBreakpointsAction.prototype.run = function () {
        return this.debugService.setBreakpointsActivated(true);
    };
    ReapplyBreakpointsAction.prototype.isEnabled = function (state) {
        var model = this.debugService.getModel();
        return _super.prototype.isEnabled.call(this, state) && state !== debug_1.State.Disabled && state !== debug_1.State.Inactive &&
            (model.getFunctionBreakpoints().length + model.getBreakpoints().length + model.getExceptionBreakpoints().length > 0);
    };
    return ReapplyBreakpointsAction;
}(AbstractDebugAction));
ReapplyBreakpointsAction.ID = 'workbench.debug.viewlet.action.reapplyBreakpointsAction';
ReapplyBreakpointsAction.LABEL = nls.localize('reapplyAllBreakpoints', "Reapply All Breakpoints");
ReapplyBreakpointsAction = __decorate([
    __param(2, debug_1.IDebugService), __param(3, keybinding_1.IKeybindingService)
], ReapplyBreakpointsAction);
exports.ReapplyBreakpointsAction = ReapplyBreakpointsAction;
var AddFunctionBreakpointAction = (function (_super) {
    __extends(AddFunctionBreakpointAction, _super);
    function AddFunctionBreakpointAction(id, label, debugService, keybindingService) {
        return _super.call(this, id, label, 'debug-action add-function-breakpoint', debugService, keybindingService) || this;
    }
    AddFunctionBreakpointAction.prototype.run = function () {
        this.debugService.addFunctionBreakpoint();
        return winjs_base_1.TPromise.as(null);
    };
    return AddFunctionBreakpointAction;
}(AbstractDebugAction));
AddFunctionBreakpointAction.ID = 'workbench.debug.viewlet.action.addFunctionBreakpointAction';
AddFunctionBreakpointAction.LABEL = nls.localize('addFunctionBreakpoint', "Add Function Breakpoint");
AddFunctionBreakpointAction = __decorate([
    __param(2, debug_1.IDebugService), __param(3, keybinding_1.IKeybindingService)
], AddFunctionBreakpointAction);
exports.AddFunctionBreakpointAction = AddFunctionBreakpointAction;
var RenameFunctionBreakpointAction = (function (_super) {
    __extends(RenameFunctionBreakpointAction, _super);
    function RenameFunctionBreakpointAction(id, label, debugService, keybindingService) {
        return _super.call(this, id, label, null, debugService, keybindingService) || this;
    }
    RenameFunctionBreakpointAction.prototype.run = function (fbp) {
        this.debugService.getViewModel().setSelectedFunctionBreakpoint(fbp);
        return winjs_base_1.TPromise.as(null);
    };
    return RenameFunctionBreakpointAction;
}(AbstractDebugAction));
RenameFunctionBreakpointAction.ID = 'workbench.debug.viewlet.action.renameFunctionBreakpointAction';
RenameFunctionBreakpointAction.LABEL = nls.localize('renameFunctionBreakpoint', "Rename Function Breakpoint");
RenameFunctionBreakpointAction = __decorate([
    __param(2, debug_1.IDebugService), __param(3, keybinding_1.IKeybindingService)
], RenameFunctionBreakpointAction);
exports.RenameFunctionBreakpointAction = RenameFunctionBreakpointAction;
var AddConditionalBreakpointAction = (function (_super) {
    __extends(AddConditionalBreakpointAction, _super);
    function AddConditionalBreakpointAction(id, label, editor, lineNumber, debugService, keybindingService) {
        var _this = _super.call(this, id, label, null, debugService, keybindingService) || this;
        _this.editor = editor;
        _this.lineNumber = lineNumber;
        return _this;
    }
    AddConditionalBreakpointAction.prototype.run = function () {
        this.editor.getContribution(debug_1.EDITOR_CONTRIBUTION_ID).showBreakpointWidget(this.lineNumber);
        return winjs_base_1.TPromise.as(null);
    };
    return AddConditionalBreakpointAction;
}(AbstractDebugAction));
AddConditionalBreakpointAction.ID = 'workbench.debug.viewlet.action.addConditionalBreakpointAction';
AddConditionalBreakpointAction.LABEL = nls.localize('addConditionalBreakpoint', "Add Conditional Breakpoint...");
AddConditionalBreakpointAction = __decorate([
    __param(4, debug_1.IDebugService),
    __param(5, keybinding_1.IKeybindingService)
], AddConditionalBreakpointAction);
exports.AddConditionalBreakpointAction = AddConditionalBreakpointAction;
var EditConditionalBreakpointAction = (function (_super) {
    __extends(EditConditionalBreakpointAction, _super);
    function EditConditionalBreakpointAction(id, label, editor, lineNumber, debugService, keybindingService) {
        var _this = _super.call(this, id, label, null, debugService, keybindingService) || this;
        _this.editor = editor;
        _this.lineNumber = lineNumber;
        return _this;
    }
    EditConditionalBreakpointAction.prototype.run = function (breakpoint) {
        this.editor.getContribution(debug_1.EDITOR_CONTRIBUTION_ID).showBreakpointWidget(this.lineNumber);
        return winjs_base_1.TPromise.as(null);
    };
    return EditConditionalBreakpointAction;
}(AbstractDebugAction));
EditConditionalBreakpointAction.ID = 'workbench.debug.viewlet.action.editConditionalBreakpointAction';
EditConditionalBreakpointAction.LABEL = nls.localize('editConditionalBreakpoint', "Edit Breakpoint...");
EditConditionalBreakpointAction = __decorate([
    __param(4, debug_1.IDebugService),
    __param(5, keybinding_1.IKeybindingService)
], EditConditionalBreakpointAction);
exports.EditConditionalBreakpointAction = EditConditionalBreakpointAction;
var SetValueAction = (function (_super) {
    __extends(SetValueAction, _super);
    function SetValueAction(id, label, variable, debugService, keybindingService) {
        var _this = _super.call(this, id, label, null, debugService, keybindingService) || this;
        _this.variable = variable;
        return _this;
    }
    SetValueAction.prototype.run = function () {
        if (this.variable instanceof debugModel_1.Variable) {
            this.debugService.getViewModel().setSelectedExpression(this.variable);
        }
        return winjs_base_1.TPromise.as(null);
    };
    SetValueAction.prototype.isEnabled = function (state) {
        var process = this.debugService.getViewModel().focusedProcess;
        return _super.prototype.isEnabled.call(this, state) && state === debug_1.State.Stopped && process && process.session.configuration.capabilities.supportsSetVariable;
    };
    return SetValueAction;
}(AbstractDebugAction));
SetValueAction.ID = 'workbench.debug.viewlet.action.setValue';
SetValueAction.LABEL = nls.localize('setValue', "Set Value");
SetValueAction = __decorate([
    __param(3, debug_1.IDebugService), __param(4, keybinding_1.IKeybindingService)
], SetValueAction);
exports.SetValueAction = SetValueAction;
var AddWatchExpressionAction = (function (_super) {
    __extends(AddWatchExpressionAction, _super);
    function AddWatchExpressionAction(id, label, debugService, keybindingService) {
        var _this = _super.call(this, id, label, 'debug-action add-watch-expression', debugService, keybindingService) || this;
        _this.toDispose.push(_this.debugService.getModel().onDidChangeWatchExpressions(function () { return _this.updateEnablement(); }));
        return _this;
    }
    AddWatchExpressionAction.prototype.run = function () {
        return this.debugService.addWatchExpression();
    };
    AddWatchExpressionAction.prototype.isEnabled = function (state) {
        return _super.prototype.isEnabled.call(this, state) && this.debugService.getModel().getWatchExpressions().every(function (we) { return !!we.name; });
    };
    return AddWatchExpressionAction;
}(AbstractDebugAction));
AddWatchExpressionAction.ID = 'workbench.debug.viewlet.action.addWatchExpression';
AddWatchExpressionAction.LABEL = nls.localize('addWatchExpression', "Add Expression");
AddWatchExpressionAction = __decorate([
    __param(2, debug_1.IDebugService), __param(3, keybinding_1.IKeybindingService)
], AddWatchExpressionAction);
exports.AddWatchExpressionAction = AddWatchExpressionAction;
var AddToWatchExpressionsAction = (function (_super) {
    __extends(AddToWatchExpressionsAction, _super);
    function AddToWatchExpressionsAction(id, label, expression, debugService, keybindingService) {
        var _this = _super.call(this, id, label, 'debug-action add-to-watch', debugService, keybindingService) || this;
        _this.expression = expression;
        return _this;
    }
    AddToWatchExpressionsAction.prototype.run = function () {
        var name = this.expression instanceof debugModel_1.Variable ? this.expression.evaluateName : this.expression.name;
        return this.debugService.addWatchExpression(name);
    };
    return AddToWatchExpressionsAction;
}(AbstractDebugAction));
AddToWatchExpressionsAction.ID = 'workbench.debug.viewlet.action.addToWatchExpressions';
AddToWatchExpressionsAction.LABEL = nls.localize('addToWatchExpressions', "Add to Watch");
AddToWatchExpressionsAction = __decorate([
    __param(3, debug_1.IDebugService), __param(4, keybinding_1.IKeybindingService)
], AddToWatchExpressionsAction);
exports.AddToWatchExpressionsAction = AddToWatchExpressionsAction;
var EditWatchExpressionAction = (function (_super) {
    __extends(EditWatchExpressionAction, _super);
    function EditWatchExpressionAction(id, label, expression, debugService, keybindingService) {
        var _this = _super.call(this, id, label, 'debug-action editWatchExpression', debugService, keybindingService) || this;
        _this.expression = expression;
        return _this;
    }
    EditWatchExpressionAction.prototype.run = function () {
        this.debugService.getViewModel().setSelectedExpression(this.expression);
        return winjs_base_1.TPromise.as(null);
    };
    return EditWatchExpressionAction;
}(AbstractDebugAction));
EditWatchExpressionAction.ID = 'workbench.debug.viewlet.action.editWatchExpression';
EditWatchExpressionAction.LABEL = nls.localize('editWatchExpression', "Edit Expression");
EditWatchExpressionAction = __decorate([
    __param(3, debug_1.IDebugService), __param(4, keybinding_1.IKeybindingService)
], EditWatchExpressionAction);
exports.EditWatchExpressionAction = EditWatchExpressionAction;
var RemoveWatchExpressionAction = (function (_super) {
    __extends(RemoveWatchExpressionAction, _super);
    function RemoveWatchExpressionAction(id, label, debugService, keybindingService) {
        return _super.call(this, id, label, 'debug-action remove', debugService, keybindingService) || this;
    }
    RemoveWatchExpressionAction.prototype.run = function (expression) {
        this.debugService.removeWatchExpressions(expression.getId());
        return winjs_base_1.TPromise.as(null);
    };
    return RemoveWatchExpressionAction;
}(AbstractDebugAction));
RemoveWatchExpressionAction.ID = 'workbench.debug.viewlet.action.removeWatchExpression';
RemoveWatchExpressionAction.LABEL = nls.localize('removeWatchExpression', "Remove Expression");
RemoveWatchExpressionAction = __decorate([
    __param(2, debug_1.IDebugService), __param(3, keybinding_1.IKeybindingService)
], RemoveWatchExpressionAction);
exports.RemoveWatchExpressionAction = RemoveWatchExpressionAction;
var RemoveAllWatchExpressionsAction = (function (_super) {
    __extends(RemoveAllWatchExpressionsAction, _super);
    function RemoveAllWatchExpressionsAction(id, label, debugService, keybindingService) {
        var _this = _super.call(this, id, label, 'debug-action remove-all', debugService, keybindingService) || this;
        _this.toDispose.push(_this.debugService.getModel().onDidChangeWatchExpressions(function () { return _this.updateEnablement(); }));
        return _this;
    }
    RemoveAllWatchExpressionsAction.prototype.run = function () {
        this.debugService.removeWatchExpressions();
        return winjs_base_1.TPromise.as(null);
    };
    RemoveAllWatchExpressionsAction.prototype.isEnabled = function (state) {
        return _super.prototype.isEnabled.call(this, state) && this.debugService.getModel().getWatchExpressions().length > 0;
    };
    return RemoveAllWatchExpressionsAction;
}(AbstractDebugAction));
RemoveAllWatchExpressionsAction.ID = 'workbench.debug.viewlet.action.removeAllWatchExpressions';
RemoveAllWatchExpressionsAction.LABEL = nls.localize('removeAllWatchExpressions', "Remove All Expressions");
RemoveAllWatchExpressionsAction = __decorate([
    __param(2, debug_1.IDebugService), __param(3, keybinding_1.IKeybindingService)
], RemoveAllWatchExpressionsAction);
exports.RemoveAllWatchExpressionsAction = RemoveAllWatchExpressionsAction;
var ClearReplAction = (function (_super) {
    __extends(ClearReplAction, _super);
    function ClearReplAction(id, label, debugService, keybindingService, panelService) {
        var _this = _super.call(this, id, label, 'debug-action clear-repl', debugService, keybindingService) || this;
        _this.panelService = panelService;
        return _this;
    }
    ClearReplAction.prototype.run = function () {
        this.debugService.removeReplExpressions();
        // focus back to repl
        return this.panelService.openPanel(debug_1.REPL_ID, true);
    };
    return ClearReplAction;
}(AbstractDebugAction));
ClearReplAction.ID = 'workbench.debug.panel.action.clearReplAction';
ClearReplAction.LABEL = nls.localize('clearRepl', "Clear Console");
ClearReplAction = __decorate([
    __param(2, debug_1.IDebugService),
    __param(3, keybinding_1.IKeybindingService),
    __param(4, panelService_1.IPanelService)
], ClearReplAction);
exports.ClearReplAction = ClearReplAction;
var ToggleReplAction = (function (_super) {
    __extends(ToggleReplAction, _super);
    function ToggleReplAction(id, label, debugService, partService, panelService) {
        var _this = _super.call(this, id, label, debug_1.REPL_ID, panelService, partService, 'debug-action toggle-repl') || this;
        _this.debugService = debugService;
        _this.toDispose = [];
        _this.registerListeners();
        return _this;
    }
    ToggleReplAction.prototype.registerListeners = function () {
        var _this = this;
        this.toDispose.push(this.debugService.getModel().onDidChangeReplElements(function () {
            if (!_this.isReplVisible()) {
                _this.class = 'debug-action toggle-repl notification';
                _this.tooltip = nls.localize('unreadOutput', "New Output in Debug Console");
            }
        }));
        this.toDispose.push(this.panelService.onDidPanelOpen(function (panel) {
            if (panel.getId() === debug_1.REPL_ID) {
                _this.class = 'debug-action toggle-repl';
                _this.tooltip = ToggleReplAction.LABEL;
            }
        }));
    };
    ToggleReplAction.prototype.isReplVisible = function () {
        var panel = this.panelService.getActivePanel();
        return panel && panel.getId() === debug_1.REPL_ID;
    };
    ToggleReplAction.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.toDispose = lifecycle.dispose(this.toDispose);
    };
    return ToggleReplAction;
}(panel_1.TogglePanelAction));
ToggleReplAction.ID = 'workbench.debug.action.toggleRepl';
ToggleReplAction.LABEL = nls.localize({ comment: ['Debug is a noun in this context, not a verb.'], key: 'debugConsoleAction' }, 'Debug Console');
ToggleReplAction = __decorate([
    __param(2, debug_1.IDebugService),
    __param(3, partService_1.IPartService),
    __param(4, panelService_1.IPanelService)
], ToggleReplAction);
exports.ToggleReplAction = ToggleReplAction;
var FocusReplAction = (function (_super) {
    __extends(FocusReplAction, _super);
    function FocusReplAction(id, label, panelService) {
        var _this = _super.call(this, id, label) || this;
        _this.panelService = panelService;
        return _this;
    }
    FocusReplAction.prototype.run = function () {
        return this.panelService.openPanel(debug_1.REPL_ID, true);
    };
    return FocusReplAction;
}(actions_1.Action));
FocusReplAction.ID = 'workbench.debug.action.focusRepl';
FocusReplAction.LABEL = nls.localize({ comment: ['Debug is a noun in this context, not a verb.'], key: 'debugFocusConsole' }, 'Focus Debug Console');
FocusReplAction = __decorate([
    __param(2, panelService_1.IPanelService)
], FocusReplAction);
exports.FocusReplAction = FocusReplAction;
var RunAction = (function (_super) {
    __extends(RunAction, _super);
    function RunAction(id, label, debugService, keybindingService) {
        return _super.call(this, id, label, null, debugService, keybindingService) || this;
    }
    RunAction.prototype.run = function () {
        var _this = this;
        return this.debugService.getConfigurationManager().getConfiguration(this.debugService.getViewModel().selectedConfigurationName).then(function (configuration) {
            if (configuration) {
                configuration.noDebug = true;
                return _this.debugService.createProcess(configuration);
            }
        });
    };
    RunAction.prototype.isEnabled = function (state) {
        return _super.prototype.isEnabled.call(this, state) && state === debug_1.State.Inactive;
    };
    return RunAction;
}(AbstractDebugAction));
RunAction.ID = 'workbench.action.debug.run';
RunAction.LABEL = nls.localize('startWithoutDebugging', "Start Without Debugging");
RunAction = __decorate([
    __param(2, debug_1.IDebugService), __param(3, keybinding_1.IKeybindingService)
], RunAction);
exports.RunAction = RunAction;
var FocusProcessAction = (function (_super) {
    __extends(FocusProcessAction, _super);
    function FocusProcessAction(id, label, debugService, keybindingService) {
        return _super.call(this, id, label, null, debugService, keybindingService, 100) || this;
    }
    FocusProcessAction.prototype.run = function (processName) {
        var _this = this;
        var process = this.debugService.getModel().getProcesses().filter(function (p) { return p.name === processName; }).pop();
        return this.debugService.focusStackFrameAndEvaluate(null, process).then(function () {
            var stackFrame = _this.debugService.getViewModel().focusedStackFrame;
            if (stackFrame) {
                return _this.debugService.openOrRevealSource(stackFrame.source, stackFrame.lineNumber, true, false);
            }
        });
    };
    return FocusProcessAction;
}(AbstractDebugAction));
FocusProcessAction.ID = 'workbench.action.debug.focusProcess';
FocusProcessAction.LABEL = nls.localize('focusProcess', "Focus Process");
FocusProcessAction = __decorate([
    __param(2, debug_1.IDebugService), __param(3, keybinding_1.IKeybindingService)
], FocusProcessAction);
exports.FocusProcessAction = FocusProcessAction;
// Actions used by the chakra debugger
var StepBackAction = (function (_super) {
    __extends(StepBackAction, _super);
    function StepBackAction(id, label, debugService, keybindingService) {
        return _super.call(this, id, label, 'debug-action step-back', debugService, keybindingService, 50) || this;
    }
    StepBackAction.prototype.run = function (thread) {
        if (!(thread instanceof debugModel_1.Thread)) {
            thread = this.debugService.getViewModel().focusedThread;
        }
        return thread ? thread.stepBack() : winjs_base_1.TPromise.as(null);
    };
    StepBackAction.prototype.isEnabled = function (state) {
        var process = this.debugService.getViewModel().focusedProcess;
        return _super.prototype.isEnabled.call(this, state) && state === debug_1.State.Stopped &&
            process && process.session.configuration.capabilities.supportsStepBack;
    };
    return StepBackAction;
}(AbstractDebugAction));
StepBackAction.ID = 'workbench.action.debug.stepBack';
StepBackAction.LABEL = nls.localize('stepBackDebug', "Step Back");
StepBackAction = __decorate([
    __param(2, debug_1.IDebugService), __param(3, keybinding_1.IKeybindingService)
], StepBackAction);
exports.StepBackAction = StepBackAction;
var ReverseContinueAction = (function (_super) {
    __extends(ReverseContinueAction, _super);
    function ReverseContinueAction(id, label, debugService, keybindingService) {
        return _super.call(this, id, label, 'debug-action reverse-continue', debugService, keybindingService, 60) || this;
    }
    ReverseContinueAction.prototype.run = function (thread) {
        if (!(thread instanceof debugModel_1.Thread)) {
            thread = this.debugService.getViewModel().focusedThread;
        }
        return thread ? thread.reverseContinue() : winjs_base_1.TPromise.as(null);
    };
    ReverseContinueAction.prototype.isEnabled = function (state) {
        var process = this.debugService.getViewModel().focusedProcess;
        return _super.prototype.isEnabled.call(this, state) && state === debug_1.State.Stopped &&
            process && process.session.configuration.capabilities.supportsStepBack;
    };
    return ReverseContinueAction;
}(AbstractDebugAction));
ReverseContinueAction.ID = 'workbench.action.debug.reverseContinue';
ReverseContinueAction.LABEL = nls.localize('reverseContinue', "Reverse");
ReverseContinueAction = __decorate([
    __param(2, debug_1.IDebugService), __param(3, keybinding_1.IKeybindingService)
], ReverseContinueAction);
exports.ReverseContinueAction = ReverseContinueAction;
