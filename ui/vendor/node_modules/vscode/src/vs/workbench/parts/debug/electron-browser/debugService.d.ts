import Event from 'vs/base/common/event';
import uri from 'vs/base/common/uri';
import { TPromise } from 'vs/base/common/winjs.base';
import { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';
import { IMarkerService } from 'vs/platform/markers/common/markers';
import { ILifecycleService } from 'vs/platform/lifecycle/common/lifecycle';
import { IExtensionService } from 'vs/platform/extensions/common/extensions';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import { IFileService } from 'vs/platform/files/common/files';
import { IEventService } from 'vs/platform/event/common/event';
import { IMessageService } from 'vs/platform/message/common/message';
import { IWindowsService } from 'vs/platform/windows/common/windows';
import { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';
import { IStorageService } from 'vs/platform/storage/common/storage';
import { IEditorGroupService } from 'vs/workbench/services/group/common/groupService';
import * as debug from 'vs/workbench/parts/debug/common/debug';
import { Source } from 'vs/workbench/parts/debug/common/debugSource';
import { ITaskService } from 'vs/workbench/parts/tasks/common/taskService';
import { IViewletService } from 'vs/workbench/services/viewlet/browser/viewlet';
import { IPanelService } from 'vs/workbench/services/panel/common/panelService';
import { IPartService } from 'vs/workbench/services/part/common/partService';
import { ITextFileService } from 'vs/workbench/services/textfile/common/textfiles';
import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
import { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';
import { IWorkbenchEditorService } from 'vs/workbench/services/editor/common/editorService';
import { IWindowIPCService } from 'vs/workbench/services/window/electron-browser/windowService';
export declare class DebugService implements debug.IDebugService {
    private storageService;
    private editorService;
    private textFileService;
    private viewletService;
    private panelService;
    private fileService;
    private messageService;
    private partService;
    private windowsService;
    private windowService;
    private telemetryService;
    private contextService;
    private editorGroupService;
    private instantiationService;
    private extensionService;
    private markerService;
    private taskService;
    private configurationService;
    _serviceBrand: any;
    private sessionStates;
    private _onDidChangeState;
    private model;
    private viewModel;
    private configurationManager;
    private customTelemetryService;
    private lastTaskEvent;
    private toDispose;
    private toDisposeOnSessionEnd;
    private inDebugMode;
    private breakpointsToSendOnResourceSaved;
    constructor(storageService: IStorageService, editorService: IWorkbenchEditorService, textFileService: ITextFileService, viewletService: IViewletService, panelService: IPanelService, fileService: IFileService, messageService: IMessageService, partService: IPartService, windowsService: IWindowsService, windowService: IWindowIPCService, telemetryService: ITelemetryService, contextService: IWorkspaceContextService, contextKeyService: IContextKeyService, editorGroupService: IEditorGroupService, eventService: IEventService, lifecycleService: ILifecycleService, instantiationService: IInstantiationService, extensionService: IExtensionService, markerService: IMarkerService, taskService: ITaskService, configurationService: IConfigurationService);
    private registerListeners(eventService, lifecycleService);
    private onBroadcast(broadcast);
    private registerSessionListeners(process, session);
    private fetchThreads(session);
    private loadBreakpoints();
    private loadFunctionBreakpoints();
    private loadExceptionBreakpoints();
    private loadWatchExpressions();
    readonly state: debug.State;
    readonly onDidChangeState: Event<void>;
    private setStateAndEmit(sessionId, newState);
    readonly enabled: boolean;
    focusStackFrameAndEvaluate(focusedStackFrame: debug.IStackFrame, process?: debug.IProcess): TPromise<void>;
    enableOrDisableBreakpoints(enable: boolean, breakpoint?: debug.IEnablement): TPromise<void>;
    addBreakpoints(uri: uri, rawBreakpoints: debug.IRawBreakpoint[]): TPromise<void>;
    removeBreakpoints(id?: string): TPromise<any>;
    setBreakpointsActivated(activated: boolean): TPromise<void>;
    addFunctionBreakpoint(): void;
    renameFunctionBreakpoint(id: string, newFunctionName: string): TPromise<void>;
    removeFunctionBreakpoints(id?: string): TPromise<void>;
    addReplExpression(name: string): TPromise<void>;
    removeReplExpressions(): void;
    addWatchExpression(name: string): TPromise<void>;
    renameWatchExpression(id: string, newName: string): TPromise<void>;
    moveWatchExpression(id: string, position: number): void;
    removeWatchExpressions(id?: string): void;
    createProcess(configurationOrName: debug.IConfig | string): TPromise<any>;
    private doCreateProcess(sessionId, configuration);
    private runPreLaunchTask(taskName);
    private rawAttach(session, port);
    restartProcess(process: debug.IProcess): TPromise<any>;
    private onSessionEnd(session);
    getModel(): debug.IModel;
    getViewModel(): debug.IViewModel;
    openOrRevealSource(sourceOrUri: Source | uri, lineNumber: number, preserveFocus: boolean, sideBySide: boolean): TPromise<any>;
    private sourceIsUnavailable(process, source, sideBySide);
    getConfigurationManager(): debug.IConfigurationManager;
    private transitionToRunningState(session, threadId?);
    private getDebugStringEditorInput(process, source, value, mtype);
    private getDebugErrorEditorInput(process, source, value);
    private sendAllBreakpoints(process?);
    private sendBreakpoints(modelUri, sourceModified?, targetProcess?);
    private sendFunctionBreakpoints(targetProcess?);
    private sendExceptionBreakpoints(targetProcess?);
    private sendToOneOrAllProcesses(process, send);
    private onFileChanges(fileChangesEvent);
    private store();
    dispose(): void;
}
