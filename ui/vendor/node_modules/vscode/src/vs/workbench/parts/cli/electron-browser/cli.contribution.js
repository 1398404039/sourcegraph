/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var nls = require("vs/nls");
var path = require("path");
var os = require("os");
var cp = require("child_process");
var pfs = require("vs/base/node/pfs");
var async_1 = require("vs/base/common/async");
var winjs_base_1 = require("vs/base/common/winjs.base");
var uri_1 = require("vs/base/common/uri");
var actions_1 = require("vs/base/common/actions");
var actionRegistry_1 = require("vs/workbench/common/actionRegistry");
var contributions_1 = require("vs/workbench/common/contributions");
var platform_1 = require("vs/platform/platform");
var actions_2 = require("vs/platform/actions/common/actions");
var message_1 = require("vs/platform/message/common/message");
var editor_1 = require("vs/platform/editor/common/editor");
var instantiation_1 = require("vs/platform/instantiation/common/instantiation");
var product_1 = require("vs/platform/node/product");
function ignore(code, value) {
    if (value === void 0) { value = null; }
    return function (err) { return err.code === code ? winjs_base_1.TPromise.as(value) : winjs_base_1.TPromise.wrapError(err); };
}
function readOrEmpty(name) {
    return pfs.readFile(name, 'utf8').then(null, ignore('ENOENT', ''));
}
var root = uri_1.default.parse(require.toUrl('')).fsPath;
var source = path.resolve(root, '..', 'bin', 'code');
function isAvailable() {
    return pfs.exists(source);
}
var InstallAction = (function (_super) {
    __extends(InstallAction, _super);
    function InstallAction(id, label, messageService, editorService) {
        var _this = _super.call(this, id, label) || this;
        _this.messageService = messageService;
        _this.editorService = editorService;
        return _this;
    }
    Object.defineProperty(InstallAction.prototype, "target", {
        get: function () {
            return "/usr/local/bin/" + product_1.default.applicationName;
        },
        enumerable: true,
        configurable: true
    });
    InstallAction.prototype.run = function () {
        var _this = this;
        return isAvailable().then(function (isAvailable) {
            if (!isAvailable) {
                var message = nls.localize('not available', "This command is not available");
                _this.messageService.show(message_1.Severity.Info, message);
                return undefined;
            }
            return _this.checkLegacy()
                .then(function (uses) {
                if (uses.length > 0) {
                    var _a = uses[0], file_1 = _a.file, lineNumber = _a.lineNumber;
                    var message = nls.localize('exists', "Please remove the alias referencing '{0}' in '{1}' (line {2}) and retry this action.", product_1.default.darwinBundleIdentifier, file_1, lineNumber);
                    var resource = uri_1.default.file(file_1);
                    var input_1 = { resource: resource };
                    var actions = [
                        new actions_1.Action('inlineEdit', nls.localize('editFile', "Edit '{0}'", file_1), '', true, function () {
                            return _this.editorService.openEditor(input_1).then(function () {
                                var message = nls.localize('again', "Please remove the '{0}' alias from '{1}' before continuing.", product_1.default.applicationName, file_1);
                                var actions = [
                                    new actions_1.Action('continue', nls.localize('continue', "Continue"), '', true, function () { return _this.run(); }),
                                    new actions_1.Action('cancel', nls.localize('cancel', "Cancel"))
                                ];
                                _this.messageService.show(message_1.Severity.Info, { message: message, actions: actions });
                            });
                        })
                    ];
                    _this.messageService.show(message_1.Severity.Warning, { message: message, actions: actions });
                    return winjs_base_1.TPromise.as(null);
                }
                return _this.isInstalled()
                    .then(function (isInstalled) {
                    if (!isAvailable || isInstalled) {
                        return winjs_base_1.TPromise.as(null);
                    }
                    else {
                        var createSymlink_1 = function () {
                            return pfs.unlink(_this.target)
                                .then(null, ignore('ENOENT'))
                                .then(function () { return pfs.symlink(source, _this.target); });
                        };
                        return createSymlink_1().then(null, function (err) {
                            if (err.code === 'EACCES' || err.code === 'ENOENT') {
                                return _this.createBinFolder()
                                    .then(function () { return createSymlink_1(); });
                            }
                            return winjs_base_1.TPromise.wrapError(err);
                        });
                    }
                })
                    .then(function () { return _this.messageService.show(message_1.Severity.Info, nls.localize('successIn', "Shell command '{0}' successfully installed in PATH.", product_1.default.applicationName)); });
            });
        });
    };
    InstallAction.prototype.isInstalled = function () {
        var _this = this;
        return pfs.lstat(this.target)
            .then(function (stat) { return stat.isSymbolicLink(); })
            .then(function () { return pfs.readlink(_this.target); })
            .then(function (link) { return link === source; })
            .then(null, ignore('ENOENT', false));
    };
    InstallAction.prototype.createBinFolder = function () {
        var _this = this;
        return new winjs_base_1.TPromise(function (c, e) {
            var message = nls.localize('warnEscalation', "Code will now prompt with 'osascript' for Administrator privileges to install the shell command.");
            var actions = [
                new actions_1.Action('ok', nls.localize('ok', "OK"), '', true, function () {
                    var command = 'osascript -e "do shell script \\"mkdir -p /usr/local/bin && chown \\" & (do shell script (\\"whoami\\")) & \\" /usr/local/bin\\" with administrator privileges"';
                    async_1.nfcall(cp.exec, command, {})
                        .then(null, function (_) { return winjs_base_1.TPromise.wrapError(new Error(nls.localize('cantCreateBinFolder', "Unable to create '/usr/local/bin'."))); })
                        .done(c, e);
                    return null;
                }),
                new actions_1.Action('cancel2', nls.localize('cancel2', "Cancel"), '', true, function () { e(new Error(nls.localize('aborted', "Aborted"))); return null; })
            ];
            _this.messageService.show(message_1.Severity.Info, { message: message, actions: actions });
        });
    };
    InstallAction.prototype.checkLegacy = function () {
        var files = [
            path.join(os.homedir(), '.bash_profile'),
            path.join(os.homedir(), '.bashrc'),
            path.join(os.homedir(), '.zshrc')
        ];
        return winjs_base_1.TPromise.join(files.map(function (f) { return readOrEmpty(f); })).then(function (result) {
            return result.reduce(function (result, contents, index) {
                var file = files[index];
                var lines = contents.split(/\r?\n/);
                lines.some(function (line, index) {
                    if (line.indexOf(product_1.default.darwinBundleIdentifier) > -1 && !/^\s*#/.test(line)) {
                        result.push({ file: file, lineNumber: index + 1 });
                        return true;
                    }
                    return false;
                });
                return result;
            }, []);
        });
    };
    return InstallAction;
}(actions_1.Action));
InstallAction.ID = 'workbench.action.installCommandLine';
InstallAction.LABEL = nls.localize('install', "Install '{0}' command in PATH", product_1.default.applicationName);
InstallAction = __decorate([
    __param(2, message_1.IMessageService),
    __param(3, editor_1.IEditorService)
], InstallAction);
var UninstallAction = (function (_super) {
    __extends(UninstallAction, _super);
    function UninstallAction(id, label, messageService) {
        var _this = _super.call(this, id, label) || this;
        _this.messageService = messageService;
        return _this;
    }
    Object.defineProperty(UninstallAction.prototype, "target", {
        get: function () {
            return "/usr/local/bin/" + product_1.default.applicationName;
        },
        enumerable: true,
        configurable: true
    });
    UninstallAction.prototype.run = function () {
        var _this = this;
        return isAvailable().then(function (isAvailable) {
            if (!isAvailable) {
                var message = nls.localize('not available', "This command is not available");
                _this.messageService.show(message_1.Severity.Info, message);
                return undefined;
            }
            return pfs.unlink(_this.target)
                .then(null, ignore('ENOENT'))
                .then(function () { return _this.messageService.show(message_1.Severity.Info, nls.localize('successFrom', "Shell command '{0}' successfully uninstalled from PATH.", product_1.default.applicationName)); });
        });
    };
    return UninstallAction;
}(actions_1.Action));
UninstallAction.ID = 'workbench.action.uninstallCommandLine';
UninstallAction.LABEL = nls.localize('uninstall', "Uninstall '{0}' command from PATH", product_1.default.applicationName);
UninstallAction = __decorate([
    __param(2, message_1.IMessageService)
], UninstallAction);
var DarwinCLIHelper = (function () {
    function DarwinCLIHelper(instantiationService, messageService) {
        var installAction = instantiationService.createInstance(InstallAction, InstallAction.ID, InstallAction.LABEL);
        isAvailable().done(function (isAvailable) {
            if (!isAvailable) {
                return;
            }
            return installAction.checkLegacy().done(function (files) {
                if (files.length > 0) {
                    var message = nls.localize('update', "Code needs to change the '{0}' shell command. Would you like to do this now?", product_1.default.applicationName);
                    var now = new actions_1.Action('changeNow', nls.localize('changeNow', "Change Now"), '', true, function () { return installAction.run(); });
                    var later = new actions_1.Action('later', nls.localize('later', "Later"), '', true, function () {
                        messageService.show(message_1.Severity.Info, nls.localize('laterInfo', "Remember you can always run the '{0}' action from the Command Palette.", installAction.label));
                        return null;
                    });
                    var actions = [now, later];
                    messageService.show(message_1.Severity.Info, { message: message, actions: actions });
                }
            });
        });
    }
    DarwinCLIHelper.prototype.getId = function () {
        return 'darwin.cli';
    };
    return DarwinCLIHelper;
}());
DarwinCLIHelper = __decorate([
    __param(0, instantiation_1.IInstantiationService),
    __param(1, message_1.IMessageService)
], DarwinCLIHelper);
if (process.platform === 'darwin') {
    var category = nls.localize('shellCommand', "Shell Command");
    var workbenchActionsRegistry = platform_1.Registry.as(actionRegistry_1.Extensions.WorkbenchActions);
    workbenchActionsRegistry.registerWorkbenchAction(new actions_2.SyncActionDescriptor(InstallAction, InstallAction.ID, InstallAction.LABEL), 'Shell Command: Install \'code\' command in PATH', category);
    workbenchActionsRegistry.registerWorkbenchAction(new actions_2.SyncActionDescriptor(UninstallAction, UninstallAction.ID, UninstallAction.LABEL), 'Shell Command: Uninstall \'code\' command from PATH', category);
    var workbenchRegistry = platform_1.Registry.as(contributions_1.Extensions.Workbench);
    workbenchRegistry.registerWorkbenchContribution(DarwinCLIHelper);
}
