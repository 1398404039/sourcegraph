/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var winjs_base_1 = require("vs/base/common/winjs.base");
var event_1 = require("vs/base/common/event");
var lifecycle_1 = require("vs/base/common/lifecycle");
var scm_1 = require("vs/workbench/services/scm/common/scm");
var resolverService_1 = require("vs/editor/common/services/resolverService");
var modelService_1 = require("vs/editor/common/services/modelService");
var async_1 = require("vs/base/common/async");
var paths = require("vs/base/common/paths");
var git_1 = require("vs/workbench/parts/git/common/git");
// TODO@Joao: remove
var GitSCMProvider = (function () {
    function GitSCMProvider(textModelResolverService, modelService, gitService, scmService) {
        this.modelService = modelService;
        this.gitService = gitService;
        this._onDidChange = new event_1.Emitter();
        scmService.registerSCMProvider(this);
        textModelResolverService.registerTextModelContentProvider('git', this);
    }
    Object.defineProperty(GitSCMProvider.prototype, "id", {
        get: function () { return 'git-internal'; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GitSCMProvider.prototype, "label", {
        get: function () { return 'Git'; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GitSCMProvider.prototype, "resources", {
        get: function () { return []; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GitSCMProvider.prototype, "onDidChange", {
        get: function () {
            return this._onDidChange.event;
        },
        enumerable: true,
        configurable: true
    });
    GitSCMProvider.prototype.getId = function () {
        return 'git.contentprovider';
    };
    GitSCMProvider.prototype.open = function (uri) {
        return winjs_base_1.TPromise.wrapError('not implemented');
    };
    GitSCMProvider.prototype.acceptChanges = function () {
        return winjs_base_1.TPromise.wrapError('not implemented');
    };
    GitSCMProvider.prototype.drag = function (from, to) {
        return winjs_base_1.TPromise.wrapError('not implemented');
    };
    GitSCMProvider.prototype.getOriginalResource = function (uri) {
        if (uri.scheme !== 'file') {
            return winjs_base_1.TPromise.as(null);
        }
        return winjs_base_1.TPromise.as(uri.with({ scheme: 'git' }));
    };
    GitSCMProvider.prototype.provideTextContent = function (uri) {
        var _this = this;
        var model = this.modelService.createModel('', null, uri);
        var throttler = new async_1.Throttler();
        var setModelContents = function (contents) {
            if (model.isDisposed()) {
                return;
            }
            model.setValue(contents || '');
        };
        var updateModel = function () {
            var gitModel = _this.gitService.getModel();
            var root = gitModel.getRepositoryRoot();
            if (!root) {
                return winjs_base_1.TPromise.as(null);
            }
            var path = uri.fsPath;
            var relativePath = paths.relative(root, path).replace(/\\/g, '/');
            if (/^\.\./.test(relativePath)) {
                return winjs_base_1.TPromise.as(null);
            }
            var treeish = gitModel.getStatus().find(relativePath, git_1.StatusType.INDEX) ? '~' : 'HEAD';
            return _this.gitService.buffer(path, treeish).then(setModelContents);
        };
        var triggerModelUpdate = function () {
            if (_this.gitService.getState() !== git_1.ServiceState.OK) {
                return;
            }
            throttler.queue(updateModel);
        };
        var disposables = [
            this.gitService.addListener2(git_1.ServiceEvents.STATE_CHANGED, triggerModelUpdate),
            this.gitService.addListener2(git_1.ServiceEvents.OPERATION_END, function (e) {
                if (e.operation.id !== git_1.ServiceOperations.BACKGROUND_FETCH) {
                    triggerModelUpdate();
                }
            })
        ];
        model.onWillDispose(function () { return lifecycle_1.dispose(disposables); });
        triggerModelUpdate();
        return winjs_base_1.TPromise.as(model);
    };
    GitSCMProvider.prototype.dispose = function () {
    };
    return GitSCMProvider;
}());
GitSCMProvider = __decorate([
    __param(0, resolverService_1.ITextModelResolverService),
    __param(1, modelService_1.IModelService),
    __param(2, git_1.IGitService),
    __param(3, scm_1.ISCMService)
], GitSCMProvider);
exports.GitSCMProvider = GitSCMProvider;
