import './media/debugViewlet.css';
import { Builder, Dimension } from 'vs/base/browser/builder';
import { TPromise } from 'vs/base/common/winjs.base';
import { IAction } from 'vs/base/common/actions';
import { IActionItem } from 'vs/base/browser/ui/actionbar/actionbar';
import { ILifecycleService } from 'vs/platform/lifecycle/common/lifecycle';
import { Viewlet } from 'vs/workbench/browser/viewlet';
import { IDebugService } from 'vs/workbench/parts/debug/common/debug';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import { IProgressService } from 'vs/platform/progress/common/progress';
import { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';
import { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';
import { IStorageService } from 'vs/platform/storage/common/storage';
export declare class DebugViewlet extends Viewlet {
    private progressService;
    private debugService;
    private instantiationService;
    private contextService;
    private storageService;
    private toDispose;
    private actions;
    private startDebugActionItem;
    private progressRunner;
    private viewletSettings;
    private $el;
    private splitView;
    private views;
    constructor(telemetryService: ITelemetryService, progressService: IProgressService, debugService: IDebugService, instantiationService: IInstantiationService, contextService: IWorkspaceContextService, storageService: IStorageService, lifecycleService: ILifecycleService);
    create(parent: Builder): TPromise<void>;
    setVisible(visible: boolean): TPromise<any>;
    layout(dimension: Dimension): void;
    focus(): void;
    getActions(): IAction[];
    getActionItem(action: IAction): IActionItem;
    private onDebugServiceStateChange();
    private store();
    dispose(): void;
    shutdown(): void;
}
