/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
require("./media/searchviewlet.css");
var nls = require("vs/nls");
var winjs_base_1 = require("vs/base/common/winjs.base");
var event_1 = require("vs/base/common/event");
var editorCommon_1 = require("vs/editor/common/editorCommon");
var lifecycle = require("vs/base/common/lifecycle");
var errors = require("vs/base/common/errors");
var aria = require("vs/base/browser/ui/aria/aria");
var env = require("vs/base/common/platform");
var types_1 = require("vs/base/common/types");
var async_1 = require("vs/base/common/async");
var strings = require("vs/base/common/strings");
var dom = require("vs/base/browser/dom");
var keyboardEvent_1 = require("vs/base/browser/keyboardEvent");
var builder_1 = require("vs/base/browser/builder");
var findInput_1 = require("vs/base/browser/ui/findinput/findInput");
var treeImpl_1 = require("vs/base/parts/tree/browser/treeImpl");
var memento_1 = require("vs/workbench/common/memento");
var preferences_1 = require("vs/workbench/parts/preferences/common/preferences");
var groupService_1 = require("vs/workbench/services/group/common/groupService");
var editor_1 = require("vs/workbench/common/editor");
var files_1 = require("vs/platform/files/common/files");
var viewlet_1 = require("vs/workbench/browser/viewlet");
var searchModel_1 = require("vs/workbench/parts/search/common/searchModel");
var searchQuery_1 = require("vs/workbench/parts/search/common/searchQuery");
var inputBox_1 = require("vs/base/browser/ui/inputbox/inputBox");
var search_1 = require("vs/platform/search/common/search");
var editorService_1 = require("vs/workbench/services/editor/common/editorService");
var storage_1 = require("vs/platform/storage/common/storage");
var configuration_1 = require("vs/platform/configuration/common/configuration");
var contextView_1 = require("vs/platform/contextview/browser/contextView");
var instantiation_1 = require("vs/platform/instantiation/common/instantiation");
var message_1 = require("vs/platform/message/common/message");
var progress_1 = require("vs/platform/progress/common/progress");
var workspace_1 = require("vs/platform/workspace/common/workspace");
var keybinding_1 = require("vs/platform/keybinding/common/keybinding");
var contextkey_1 = require("vs/platform/contextkey/common/contextkey");
var telemetry_1 = require("vs/platform/telemetry/common/telemetry");
var patternInputWidget_1 = require("vs/workbench/parts/search/browser/patternInputWidget");
var searchResultsView_1 = require("vs/workbench/parts/search/browser/searchResultsView");
var searchWidget_1 = require("vs/workbench/parts/search/browser/searchWidget");
var searchActions_1 = require("vs/workbench/parts/search/browser/searchActions");
var replace_1 = require("vs/workbench/parts/search/common/replace");
var severity_1 = require("vs/base/common/severity");
var untitledEditorService_1 = require("vs/workbench/services/untitled/common/untitledEditorService");
var fileActions_1 = require("vs/workbench/browser/actions/fileActions");
var Constants = require("vs/workbench/parts/search/common/constants");
var listService_1 = require("vs/platform/list/browser/listService");
var SearchViewlet = (function (_super) {
    __extends(SearchViewlet, _super);
    function SearchViewlet(telemetryService, fileService, editorService, editorGroupService, progressService, messageService, storageService, contextViewService, instantiationService, configurationService, contextService, searchWorkbenchService, contextKeyService, keybindingService, replaceService, untitledEditorService, preferencesService, listService) {
        var _this = _super.call(this, Constants.VIEWLET_ID, telemetryService) || this;
        _this.fileService = fileService;
        _this.editorService = editorService;
        _this.editorGroupService = editorGroupService;
        _this.progressService = progressService;
        _this.messageService = messageService;
        _this.storageService = storageService;
        _this.contextViewService = contextViewService;
        _this.instantiationService = instantiationService;
        _this.configurationService = configurationService;
        _this.contextService = contextService;
        _this.searchWorkbenchService = searchWorkbenchService;
        _this.contextKeyService = contextKeyService;
        _this.keybindingService = keybindingService;
        _this.replaceService = replaceService;
        _this.untitledEditorService = untitledEditorService;
        _this.preferencesService = preferencesService;
        _this.listService = listService;
        _this.toDispose = [];
        _this.viewletVisible = Constants.SearchViewletVisibleKey.bindTo(contextKeyService);
        _this.inputBoxFocussed = Constants.InputBoxFocussedKey.bindTo(_this.contextKeyService);
        _this.callOnModelChange = [];
        _this.queryBuilder = _this.instantiationService.createInstance(searchQuery_1.QueryBuilder);
        _this.viewletSettings = _this.getMemento(storageService, memento_1.Scope.WORKSPACE);
        _this.toUnbind.push(_this.fileService.onFileChanges(function (e) { return _this.onFilesChanged(e); }));
        _this.toUnbind.push(_this.untitledEditorService.onDidChangeDirty(function (e) { return _this.onUntitledDidChangeDirty(e); }));
        _this.toUnbind.push(_this.configurationService.onDidUpdateConfiguration(function (e) { return _this.onConfigurationUpdated(e.config); }));
        _this.selectCurrentMatchEmitter = new event_1.Emitter();
        event_1.debounceEvent(_this.selectCurrentMatchEmitter.event, function (l, e) { return e; }, 100, /*leading=*/ true)(function () { return _this.selectCurrentMatch(); });
        _this.delayedRefresh = new async_1.Delayer(250);
        return _this;
    }
    SearchViewlet.prototype.onConfigurationUpdated = function (configuration) {
        this.updateGlobalPatternExclusions(configuration);
    };
    SearchViewlet.prototype.create = function (parent) {
        var _this = this;
        _super.prototype.create.call(this, parent);
        this.viewModel = this.searchWorkbenchService.searchModel;
        var builder;
        this.domNode = parent.div({
            'class': 'search-viewlet'
        }, function (div) {
            builder = div;
        });
        builder.div({ 'class': ['search-widgets-container'] }, function (div) {
            _this.searchWidgetsContainer = div;
        });
        this.createSearchWidget(this.searchWidgetsContainer);
        var filePatterns = this.viewletSettings['query.filePatterns'] || '';
        var patternExclusions = this.viewletSettings['query.folderExclusions'] || '';
        var exclusionsUsePattern = this.viewletSettings['query.exclusionsUsePattern'];
        var includesUsePattern = this.viewletSettings['query.includesUsePattern'];
        var patternIncludes = this.viewletSettings['query.folderIncludes'] || '';
        this.queryDetails = this.searchWidgetsContainer.div({ 'class': ['query-details'] }, function (builder) {
            builder.div({ 'class': 'more', 'tabindex': 0, 'role': 'button', 'title': nls.localize('moreSearch', "Toggle Search Details") })
                .on(dom.EventType.CLICK, function (e) {
                dom.EventHelper.stop(e);
                _this.toggleFileTypes(true);
            }).on(dom.EventType.KEY_UP, function (e) {
                var event = new keyboardEvent_1.StandardKeyboardEvent(e);
                if (event.equals(3 /* Enter */) || event.equals(10 /* Space */)) {
                    dom.EventHelper.stop(e);
                    _this.toggleFileTypes();
                }
            });
            //folder includes list
            builder.div({ 'class': 'file-types' }, function (builder) {
                var title = nls.localize('searchScope.includes', "files to include");
                builder.element('h4', { text: title });
                _this.inputPatternIncludes = new patternInputWidget_1.PatternInputWidget(builder.getContainer(), _this.contextViewService, {
                    ariaLabel: nls.localize('label.includes', 'Search Include Patterns')
                });
                _this.inputPatternIncludes.setIsGlobPattern(includesUsePattern);
                _this.inputPatternIncludes.setValue(patternIncludes);
                _this.inputPatternIncludes
                    .on(findInput_1.FindInput.OPTION_CHANGE, function (e) {
                    _this.onQueryChanged(false);
                });
                _this.inputPatternIncludes.onSubmit(function () { return _this.onQueryChanged(true); });
                _this.trackInputBox(_this.inputPatternIncludes.inputFocusTracker);
            });
            //pattern exclusion list
            builder.div({ 'class': 'file-types' }, function (builder) {
                var title = nls.localize('searchScope.excludes', "files to exclude");
                builder.element('h4', { text: title });
                _this.inputPatternExclusions = new patternInputWidget_1.PatternInputWidget(builder.getContainer(), _this.contextViewService, {
                    ariaLabel: nls.localize('label.excludes', 'Search Exclude Patterns')
                });
                _this.inputPatternExclusions.setIsGlobPattern(exclusionsUsePattern);
                _this.inputPatternExclusions.setValue(patternExclusions);
                _this.inputPatternExclusions
                    .on(findInput_1.FindInput.OPTION_CHANGE, function (e) {
                    _this.onQueryChanged(false);
                });
                _this.inputPatternExclusions.onSubmit(function () { return _this.onQueryChanged(true); });
                _this.trackInputBox(_this.inputPatternExclusions.inputFocusTracker);
            });
            // add hint if we have global exclusion
            _this.inputPatternGlobalExclusionsContainer = builder.div({ 'class': 'file-types global-exclude disabled' }, function (builder) {
                var title = nls.localize('global.searchScope.folders', "files excluded through settings");
                builder.element('h4', { text: title });
                _this.inputPatternGlobalExclusions = new inputBox_1.InputBox(builder.getContainer(), _this.contextViewService, {
                    actions: [_this.instantiationService.createInstance(searchActions_1.ConfigureGlobalExclusionsAction)],
                    ariaLabel: nls.localize('label.global.excludes', 'Configured Search Exclude Patterns')
                });
                _this.inputPatternGlobalExclusions.inputElement.readOnly = true;
                builder_1.$(_this.inputPatternGlobalExclusions.inputElement).attr('aria-readonly', 'true');
                builder_1.$(_this.inputPatternGlobalExclusions.inputElement).addClass('disabled');
            }).hide();
        }).getHTMLElement();
        this.messages = builder.div({ 'class': 'messages' }).hide().clone();
        if (!this.contextService.hasWorkspace()) {
            this.searchWithoutFolderMessage(this.clearMessage());
        }
        this.createSearchResultsView(builder);
        this.actionRegistry = {};
        var actions = [new searchActions_1.CollapseAllAction(this), new searchActions_1.RefreshAction(this), new searchActions_1.ClearSearchResultsAction(this)];
        actions.forEach(function (action) {
            _this.actionRegistry[action.id] = action;
        });
        if (filePatterns !== '' || patternExclusions !== '' || patternIncludes !== '') {
            this.toggleFileTypes(true, true, true);
        }
        this.updateGlobalPatternExclusions(this.configurationService.getConfiguration());
        this.toUnbind.push(this.viewModel.searchResult.onChange(function (event) { return _this.onSearchResultsChanged(event); }));
        return winjs_base_1.TPromise.as(null);
    };
    Object.defineProperty(SearchViewlet.prototype, "searchAndReplaceWidget", {
        get: function () {
            return this.searchWidget;
        },
        enumerable: true,
        configurable: true
    });
    SearchViewlet.prototype.createSearchWidget = function (builder) {
        var _this = this;
        var contentPattern = this.viewletSettings['query.contentPattern'] || '';
        var isRegex = this.viewletSettings['query.regex'] === true;
        var isWholeWords = this.viewletSettings['query.wholeWords'] === true;
        var isCaseSensitive = this.viewletSettings['query.caseSensitive'] === true;
        this.searchWidget = new searchWidget_1.SearchWidget(builder, this.contextViewService, {
            value: contentPattern,
            isRegex: isRegex,
            isCaseSensitive: isCaseSensitive,
            isWholeWords: isWholeWords
        }, this.contextKeyService, this.keybindingService, this.instantiationService);
        if (this.storageService.getBoolean(SearchViewlet.SHOW_REPLACE_STORAGE_KEY, storage_1.StorageScope.WORKSPACE, true)) {
            this.searchWidget.toggleReplace(true);
        }
        this.toUnbind.push(this.searchWidget);
        this.toUnbind.push(this.searchWidget.onSearchSubmit(function (refresh) { return _this.onQueryChanged(refresh); }));
        this.toUnbind.push(this.searchWidget.onSearchCancel(function () { return _this.cancelSearch(); }));
        this.toUnbind.push(this.searchWidget.searchInput.onDidOptionChange(function (viaKeyboard) { return _this.onQueryChanged(true, viaKeyboard); }));
        this.toUnbind.push(this.searchWidget.onReplaceToggled(function () { return _this.onReplaceToggled(); }));
        this.toUnbind.push(this.searchWidget.onReplaceStateChange(function (state) {
            _this.viewModel.replaceActive = state;
            _this.tree.refresh();
        }));
        this.toUnbind.push(this.searchWidget.onReplaceValueChanged(function (value) {
            _this.viewModel.replaceString = _this.searchWidget.getReplaceValue();
            _this.delayedRefresh.trigger(function () { return _this.tree.refresh(); });
        }));
        this.toUnbind.push(this.searchWidget.onReplaceAll(function () { return _this.replaceAll(); }));
        this.trackInputBox(this.searchWidget.searchInputFocusTracker);
        this.trackInputBox(this.searchWidget.replaceInputFocusTracker);
    };
    SearchViewlet.prototype.trackInputBox = function (inputFocusTracker) {
        var _this = this;
        this.toUnbind.push(inputFocusTracker.addFocusListener(function () {
            _this.inputBoxFocussed.set(true);
        }));
        this.toUnbind.push(inputFocusTracker.addBlurListener(function () {
            _this.inputBoxFocussed.set(_this.searchWidget.searchInputHasFocus()
                || _this.searchWidget.replaceInputHasFocus()
                || _this.inputPatternIncludes.inputHasFocus()
                || _this.inputPatternExclusions.inputHasFocus());
        }));
    };
    SearchViewlet.prototype.onReplaceToggled = function () {
        this.layout(this.size);
        this.storageService.store(SearchViewlet.SHOW_REPLACE_STORAGE_KEY, this.searchAndReplaceWidget.isReplaceShown(), storage_1.StorageScope.WORKSPACE);
    };
    SearchViewlet.prototype.onSearchResultsChanged = function (event) {
        var _this = this;
        return this.refreshTree(event).then(function () {
            _this.searchWidget.setReplaceAllActionState(!_this.viewModel.searchResult.isEmpty());
            _this.updateSearchResultCount();
        });
    };
    SearchViewlet.prototype.refreshTree = function (event) {
        var _this = this;
        if (!event) {
            return this.tree.refresh(this.viewModel.searchResult);
        }
        if (event.added || event.removed) {
            return this.tree.refresh(this.viewModel.searchResult).then(function () {
                if (event.added) {
                    event.elements.forEach(function (element) {
                        _this.autoExpandFileMatch(element, true);
                    });
                }
            });
        }
        else {
            if (event.elements.length === 1) {
                return this.tree.refresh(event.elements[0]);
            }
            else {
                return this.tree.refresh(event.elements);
            }
        }
    };
    SearchViewlet.prototype.replaceAll = function () {
        var _this = this;
        if (this.viewModel.searchResult.count() === 0) {
            return;
        }
        var progressRunner = this.progressService.show(100);
        var occurrences = this.viewModel.searchResult.count();
        var fileCount = this.viewModel.searchResult.fileCount();
        var replaceValue = this.searchWidget.getReplaceValue() || '';
        var afterReplaceAllMessage = this.buildAfterReplaceAllMessage(occurrences, fileCount, replaceValue);
        var confirmation = {
            title: nls.localize('replaceAll.confirmation.title', "Replace All"),
            message: this.buildReplaceAllConfirmationMessage(occurrences, fileCount, replaceValue),
            primaryButton: nls.localize('replaceAll.confirm.button', "Replace")
        };
        if (this.messageService.confirm(confirmation)) {
            this.searchWidget.setReplaceAllActionState(false);
            this.viewModel.searchResult.replaceAll(progressRunner).then(function () {
                progressRunner.done();
                _this.clearMessage()
                    .p({ text: afterReplaceAllMessage });
            }, function (error) {
                progressRunner.done();
                errors.isPromiseCanceledError(error);
                _this.messageService.show(severity_1.default.Error, error);
            });
        }
    };
    SearchViewlet.prototype.buildAfterReplaceAllMessage = function (occurrences, fileCount, replaceValue) {
        if (occurrences === 1) {
            if (fileCount === 1) {
                if (replaceValue) {
                    return nls.localize('replaceAll.occurrence.file.message', "Replaced {0} occurrence across {1} file with '{2}'.", occurrences, fileCount, replaceValue);
                }
                return nls.localize('removeAll.occurrence.file.message', "Replaced {0} occurrence across {1} file'.", occurrences, fileCount);
            }
            if (replaceValue) {
                return nls.localize('replaceAll.occurrence.files.message', "Replaced {0} occurrence across {1} files with '{2}'.", occurrences, fileCount, replaceValue);
            }
            return nls.localize('removeAll.occurrence.files.message', "Replaced {0} occurrence across {1} files.", occurrences, fileCount);
        }
        if (fileCount === 1) {
            if (replaceValue) {
                return nls.localize('replaceAll.occurrences.file.message', "Replaced {0} occurrences across {1} file with '{2}'.", occurrences, fileCount, replaceValue);
            }
            return nls.localize('removeAll.occurrences.file.message', "Replaced {0} occurrences across {1} file'.", occurrences, fileCount);
        }
        if (replaceValue) {
            return nls.localize('replaceAll.occurrences.files.message', "Replaced {0} occurrences across {1} files with '{2}'.", occurrences, fileCount, replaceValue);
        }
        return nls.localize('removeAll.occurrences.files.message', "Replaced {0} occurrences across {1} files.", occurrences, fileCount);
    };
    SearchViewlet.prototype.buildReplaceAllConfirmationMessage = function (occurrences, fileCount, replaceValue) {
        if (occurrences === 1) {
            if (fileCount === 1) {
                if (replaceValue) {
                    return nls.localize('removeAll.occurrence.file.confirmation.message', "Replace {0} occurrence across {1} file with '{2}'?", occurrences, fileCount, replaceValue);
                }
                return nls.localize('replaceAll.occurrence.file.confirmation.message', "Replace {0} occurrence across {1} file'?", occurrences, fileCount);
            }
            if (replaceValue) {
                return nls.localize('removeAll.occurrence.files.confirmation.message', "Replace {0} occurrence across {1} files with '{2}'?", occurrences, fileCount, replaceValue);
            }
            return nls.localize('replaceAll.occurrence.files.confirmation.message', "Replace {0} occurrence across {1} files?", occurrences, fileCount);
        }
        if (fileCount === 1) {
            if (replaceValue) {
                return nls.localize('removeAll.occurrences.file.confirmation.message', "Replace {0} occurrences across {1} file with '{2}'?", occurrences, fileCount, replaceValue);
            }
            return nls.localize('replaceAll.occurrences.file.confirmation.message', "Replace {0} occurrences across {1} file'?", occurrences, fileCount);
        }
        if (replaceValue) {
            return nls.localize('removeAll.occurrences.files.confirmation.message', "Replace {0} occurrences across {1} files with '{2}'?", occurrences, fileCount, replaceValue);
        }
        return nls.localize('replaceAll.occurrences.files.confirmation.message', "Replace {0} occurrences across {1} files?", occurrences, fileCount);
    };
    SearchViewlet.prototype.clearMessage = function () {
        return this.messages.empty().show()
            .asContainer().div({ 'class': 'message' })
            .asContainer();
    };
    SearchViewlet.prototype.createSearchResultsView = function (builder) {
        var _this = this;
        builder.div({ 'class': 'results' }, function (div) {
            _this.results = div;
            _this.results.addClass('show-file-icons');
            var dataSource = new searchResultsView_1.SearchDataSource();
            var renderer = _this.instantiationService.createInstance(searchResultsView_1.SearchRenderer, _this.getActionRunner(), _this);
            _this.tree = new treeImpl_1.Tree(div.getHTMLElement(), {
                dataSource: dataSource,
                renderer: renderer,
                sorter: new searchResultsView_1.SearchSorter(),
                filter: new searchResultsView_1.SearchFilter(),
                controller: new searchResultsView_1.SearchController(_this, _this.instantiationService),
                accessibilityProvider: _this.instantiationService.createInstance(searchResultsView_1.SearchAccessibilityProvider)
            }, {
                ariaLabel: nls.localize('treeAriaLabel', "Search Results"),
                keyboardSupport: false
            });
            _this.tree.setInput(_this.viewModel.searchResult);
            _this.toUnbind.push(renderer);
            _this.toUnbind.push(_this.listService.register(_this.tree));
            var focusToSelectionDelayHandle;
            var lastFocusToSelection;
            var focusToSelection = function (originalEvent) {
                lastFocusToSelection = Date.now();
                var focus = _this.tree.getFocus();
                var payload;
                if (focus instanceof searchModel_1.Match) {
                    payload = { origin: 'keyboard', originalEvent: originalEvent, preserveFocus: true };
                }
                _this.tree.setSelection([focus], payload);
                focusToSelectionDelayHandle = void 0;
            };
            _this.toUnbind.push(_this.tree.addListener2('focus', function (event) {
                var keyboard = event.payload && event.payload.origin === 'keyboard';
                if (keyboard) {
                    var originalEvent_1 = event.payload && event.payload.originalEvent;
                    // debounce setting selection so that we are not too quickly opening
                    // when the user is pressing and holding the key to move focus
                    if (focusToSelectionDelayHandle || (Date.now() - lastFocusToSelection <= 75)) {
                        window.clearTimeout(focusToSelectionDelayHandle);
                        focusToSelectionDelayHandle = window.setTimeout(function () { return focusToSelection(originalEvent_1); }, 300);
                    }
                    else {
                        focusToSelection(originalEvent_1);
                    }
                }
            }));
            _this.toUnbind.push(_this.tree.addListener2('selection', function (event) {
                var element;
                var keyboard = event.payload && event.payload.origin === 'keyboard';
                if (keyboard) {
                    element = _this.tree.getFocus();
                }
                else {
                    element = event.selection[0];
                }
                var originalEvent = event.payload && event.payload.originalEvent;
                var doubleClick = (event.payload && event.payload.origin === 'mouse' && originalEvent && originalEvent.detail === 2);
                if (doubleClick && originalEvent) {
                    originalEvent.preventDefault(); // focus moves to editor, we need to prevent default
                }
                var sideBySide = (originalEvent && (originalEvent.ctrlKey || originalEvent.metaKey));
                var focusEditor = (keyboard && (!event.payload || !event.payload.preserveFocus)) || doubleClick;
                if (element instanceof searchModel_1.Match) {
                    var selectedMatch = element;
                    if (_this.currentSelectedFileMatch) {
                        _this.currentSelectedFileMatch.setSelectedMatch(null);
                    }
                    _this.currentSelectedFileMatch = selectedMatch.parent();
                    _this.currentSelectedFileMatch.setSelectedMatch(selectedMatch);
                    if (!event.payload.preventEditorOpen) {
                        _this.onFocus(selectedMatch, !focusEditor, sideBySide, doubleClick);
                    }
                }
            }));
        });
    };
    SearchViewlet.prototype.updateGlobalPatternExclusions = function (configuration) {
        if (this.inputPatternGlobalExclusionsContainer) {
            var excludes_1 = search_1.getExcludes(configuration);
            if (excludes_1) {
                var exclusions = Object.getOwnPropertyNames(excludes_1).filter(function (exclude) { return excludes_1[exclude] === true || typeof excludes_1[exclude].when === 'string'; }).map(function (exclude) {
                    if (excludes_1[exclude] === true) {
                        return exclude;
                    }
                    return nls.localize('globLabel', "{0} when {1}", exclude, excludes_1[exclude].when);
                });
                if (exclusions.length) {
                    var values = exclusions.join(', ');
                    this.inputPatternGlobalExclusions.value = values;
                    this.inputPatternGlobalExclusions.inputElement.title = values;
                    this.inputPatternGlobalExclusionsContainer.show();
                }
                else {
                    this.inputPatternGlobalExclusionsContainer.hide();
                }
            }
        }
    };
    SearchViewlet.prototype.selectCurrentMatch = function () {
        var focused = this.tree.getFocus();
        var eventPayload = { focusEditor: true };
        this.tree.setSelection([focused], eventPayload);
    };
    SearchViewlet.prototype.selectNextMatch = function () {
        var selected = this.tree.getSelection()[0];
        // Expand the initial selected node, if needed
        if (selected instanceof searchModel_1.FileMatch) {
            if (!this.tree.isExpanded(selected)) {
                this.tree.expand(selected);
            }
        }
        var navigator = this.tree.getNavigator(selected, /*subTreeOnly=*/ false);
        var next = navigator.next();
        if (!next) {
            // Reached the end - get a new navigator from the root.
            // .first and .last only work when subTreeOnly = true. Maybe there's a simpler way.
            navigator = this.tree.getNavigator(this.tree.getInput(), /*subTreeOnly*/ true);
            next = navigator.first();
        }
        // Expand and go past FileMatch nodes
        if (!(next instanceof searchModel_1.Match)) {
            if (!this.tree.isExpanded(next)) {
                this.tree.expand(next);
            }
            // Select the FileMatch's first child
            next = navigator.next();
        }
        // Reveal the newly selected element
        var eventPayload = { preventEditorOpen: true };
        this.tree.setFocus(next, eventPayload);
        this.tree.setSelection([next], eventPayload);
        this.tree.reveal(next);
        this.selectCurrentMatchEmitter.fire();
    };
    SearchViewlet.prototype.selectPreviousMatch = function () {
        var selected = this.tree.getSelection()[0];
        var navigator = this.tree.getNavigator(selected, /*subTreeOnly=*/ false);
        var prev = navigator.previous();
        // Expand and go past FileMatch nodes
        if (!(prev instanceof searchModel_1.Match)) {
            prev = navigator.previous();
            if (!prev) {
                // Wrap around. Get a new tree starting from the root
                navigator = this.tree.getNavigator(this.tree.getInput(), /*subTreeOnly*/ true);
                prev = navigator.last();
                // This is complicated because .last will set the navigator to the last FileMatch,
                // so expand it and FF to its last child
                this.tree.expand(prev);
                var tmp = void 0;
                while (tmp = navigator.next()) {
                    prev = tmp;
                }
            }
            if (!(prev instanceof searchModel_1.Match)) {
                // There is a second non-Match result, which must be a collapsed FileMatch.
                // Expand it then select its last child.
                navigator.next();
                this.tree.expand(prev);
                prev = navigator.previous();
            }
        }
        // Reveal the newly selected element
        if (prev) {
            var eventPayload = { preventEditorOpen: true };
            this.tree.setFocus(prev, eventPayload);
            this.tree.setSelection([prev], eventPayload);
            this.tree.reveal(prev);
            this.selectCurrentMatchEmitter.fire();
        }
    };
    SearchViewlet.prototype.setVisible = function (visible) {
        var promise;
        this.viewletVisible.set(visible);
        if (visible) {
            promise = _super.prototype.setVisible.call(this, visible);
            this.tree.onVisible();
        }
        else {
            this.tree.onHidden();
            promise = _super.prototype.setVisible.call(this, visible);
        }
        // Enable highlights if there are searchresults
        if (this.viewModel) {
            this.viewModel.searchResult.toggleHighlights(visible);
        }
        // Open focused element from results in case the editor area is otherwise empty
        if (visible && !this.editorService.getActiveEditor()) {
            var focus_1 = this.tree.getFocus();
            if (focus_1) {
                this.onFocus(focus_1, true);
            }
        }
        return promise;
    };
    SearchViewlet.prototype.focus = function () {
        _super.prototype.focus.call(this);
        var selectedText = this.getSearchTextFromEditor();
        if (selectedText) {
            this.searchWidget.searchInput.setValue(selectedText);
        }
        this.searchWidget.focus();
    };
    SearchViewlet.prototype.focusNextInputBox = function () {
        if (this.searchWidget.searchInputHasFocus()) {
            if (this.searchWidget.isReplaceShown()) {
                this.searchWidget.focus(true, true);
            }
            else {
                this.moveFocusFromSearchOrReplace();
            }
            return;
        }
        if (this.searchWidget.replaceInputHasFocus()) {
            this.moveFocusFromSearchOrReplace();
            return;
        }
        if (this.inputPatternIncludes.inputHasFocus()) {
            this.inputPatternExclusions.focus();
            this.inputPatternExclusions.select();
            return;
        }
        if (this.inputPatternExclusions.inputHasFocus()) {
            this.selectTreeIfNotSelected();
            return;
        }
    };
    SearchViewlet.prototype.moveFocusFromSearchOrReplace = function () {
        if (this.showsFileTypes()) {
            this.toggleFileTypes(true, this.showsFileTypes());
        }
        else {
            this.selectTreeIfNotSelected();
        }
    };
    SearchViewlet.prototype.focusPreviousInputBox = function () {
        if (this.searchWidget.searchInputHasFocus()) {
            return;
        }
        if (this.searchWidget.replaceInputHasFocus()) {
            this.searchWidget.focus(true);
            return;
        }
        if (this.inputPatternIncludes.inputHasFocus()) {
            this.searchWidget.focus(true, true);
            return;
        }
        if (this.inputPatternExclusions.inputHasFocus()) {
            this.inputPatternIncludes.focus();
            this.inputPatternIncludes.select();
            return;
        }
    };
    SearchViewlet.prototype.moveFocusFromResults = function () {
        if (this.showsFileTypes()) {
            this.toggleFileTypes(true, true, false, true);
        }
        else {
            this.searchWidget.focus(true, true);
        }
    };
    SearchViewlet.prototype.reLayout = function () {
        if (this.isDisposed) {
            return;
        }
        this.searchWidget.setWidth(this.size.width - 25 /* container margin */);
        this.inputPatternExclusions.setWidth(this.size.width - 28 /* container margin */);
        this.inputPatternIncludes.setWidth(this.size.width - 28 /* container margin */);
        this.inputPatternGlobalExclusions.width = this.size.width - 28 /* container margin */ - 24 /* actions */;
        var messagesSize = this.messages.isHidden() ? 0 : dom.getTotalHeight(this.messages.getHTMLElement());
        var searchResultContainerSize = this.size.height -
            messagesSize -
            dom.getTotalHeight(this.searchWidgetsContainer.getContainer());
        this.results.style({ height: searchResultContainerSize + 'px' });
        this.tree.layout(searchResultContainerSize);
    };
    SearchViewlet.prototype.layout = function (dimension) {
        this.size = dimension;
        this.reLayout();
    };
    SearchViewlet.prototype.getControl = function () {
        return this.tree;
    };
    SearchViewlet.prototype.clearSearchResults = function () {
        this.viewModel.searchResult.clear();
        this.showEmptyStage();
        if (!this.contextService.hasWorkspace()) {
            this.searchWithoutFolderMessage(this.clearMessage());
        }
        this.searchWidget.clear();
        this.viewModel.cancelSearch();
    };
    SearchViewlet.prototype.cancelSearch = function () {
        if (this.viewModel.cancelSearch()) {
            this.searchWidget.focus();
            return true;
        }
        return false;
    };
    SearchViewlet.prototype.selectTreeIfNotSelected = function () {
        if (this.tree.getInput()) {
            this.tree.DOMFocus();
            var selection = this.tree.getSelection();
            if (selection.length === 0) {
                this.tree.focusNext();
            }
        }
    };
    SearchViewlet.prototype.getSearchTextFromEditor = function () {
        if (!this.editorService.getActiveEditor()) {
            return null;
        }
        var editorControl = this.editorService.getActiveEditor().getControl();
        if (!editorControl || !types_1.isFunction(editorControl.getEditorType) || editorControl.getEditorType() !== editorCommon_1.EditorType.ICodeEditor) {
            return null;
        }
        var range = editorControl.getSelection();
        if (range && !range.isEmpty() && range.startLineNumber === range.endLineNumber) {
            var searchText = editorControl.getModel().getLineContent(range.startLineNumber);
            searchText = searchText.substring(range.startColumn - 1, range.endColumn - 1);
            return searchText;
        }
        return null;
    };
    SearchViewlet.prototype.showsFileTypes = function () {
        return dom.hasClass(this.queryDetails, 'more');
    };
    SearchViewlet.prototype.toggleCaseSensitive = function () {
        this.searchWidget.searchInput.setCaseSensitive(!this.searchWidget.searchInput.getCaseSensitive());
        this.onQueryChanged(true, true);
    };
    SearchViewlet.prototype.toggleWholeWords = function () {
        this.searchWidget.searchInput.setWholeWords(!this.searchWidget.searchInput.getWholeWords());
        this.onQueryChanged(true, true);
    };
    SearchViewlet.prototype.toggleRegex = function () {
        this.searchWidget.searchInput.setRegex(!this.searchWidget.searchInput.getRegex());
        this.onQueryChanged(true, true);
    };
    SearchViewlet.prototype.toggleFileTypes = function (moveFocus, show, skipLayout, reverse) {
        var cls = 'more';
        show = typeof show === 'undefined' ? !dom.hasClass(this.queryDetails, cls) : Boolean(show);
        skipLayout = Boolean(skipLayout);
        if (show) {
            dom.addClass(this.queryDetails, cls);
            if (moveFocus) {
                if (reverse) {
                    this.inputPatternExclusions.focus();
                    this.inputPatternExclusions.select();
                }
                else {
                    this.inputPatternIncludes.focus();
                    this.inputPatternIncludes.select();
                }
            }
        }
        else {
            dom.removeClass(this.queryDetails, cls);
            if (moveFocus) {
                this.searchWidget.focus();
            }
        }
        if (!skipLayout && this.size) {
            this.layout(this.size);
        }
    };
    SearchViewlet.prototype.searchInFolder = function (resource) {
        var workspace = this.contextService.getWorkspace();
        if (!workspace) {
            return;
        }
        if (workspace.resource.toString() === resource.toString()) {
            this.inputPatternIncludes.setValue('');
            this.searchWidget.focus();
            return;
        }
        if (!this.showsFileTypes()) {
            this.toggleFileTypes(true, true);
        }
        var workspaceRelativePath = this.contextService.toWorkspaceRelativePath(resource);
        if (workspaceRelativePath) {
            this.inputPatternIncludes.setIsGlobPattern(false);
            this.inputPatternIncludes.setValue(workspaceRelativePath);
            this.searchWidget.focus(false);
        }
    };
    SearchViewlet.prototype.onQueryChanged = function (rerunQuery, preserveFocus) {
        var isRegex = this.searchWidget.searchInput.getRegex();
        var isWholeWords = this.searchWidget.searchInput.getWholeWords();
        var isCaseSensitive = this.searchWidget.searchInput.getCaseSensitive();
        var contentPattern = this.searchWidget.searchInput.getValue();
        var patternExcludes = this.inputPatternExclusions.getValue().trim();
        var exclusionsUsePattern = this.inputPatternExclusions.isGlobPattern();
        var patternIncludes = this.inputPatternIncludes.getValue().trim();
        var includesUsePattern = this.inputPatternIncludes.isGlobPattern();
        // store memento
        this.viewletSettings['query.contentPattern'] = contentPattern;
        this.viewletSettings['query.regex'] = isRegex;
        this.viewletSettings['query.wholeWords'] = isWholeWords;
        this.viewletSettings['query.caseSensitive'] = isCaseSensitive;
        this.viewletSettings['query.folderExclusions'] = patternExcludes;
        this.viewletSettings['query.exclusionsUsePattern'] = exclusionsUsePattern;
        this.viewletSettings['query.folderIncludes'] = patternIncludes;
        this.viewletSettings['query.includesUsePattern'] = includesUsePattern;
        if (!rerunQuery) {
            return;
        }
        if (contentPattern.length === 0) {
            return;
        }
        // Validate regex is OK
        if (isRegex) {
            var regExp = void 0;
            try {
                regExp = new RegExp(contentPattern);
            }
            catch (e) {
                return; // malformed regex
            }
            if (strings.regExpLeadsToEndlessLoop(regExp)) {
                return; // endless regex
            }
        }
        var content = {
            pattern: contentPattern,
            isRegExp: isRegex,
            isCaseSensitive: isCaseSensitive,
            isWordMatch: isWholeWords
        };
        var excludes = this.inputPatternExclusions.getGlob();
        var includes = this.inputPatternIncludes.getGlob();
        var options = {
            folderResources: this.contextService.hasWorkspace() ? [this.contextService.getWorkspace().resource] : [],
            extraFileResources: editor_1.getOutOfWorkspaceEditorResources(this.editorGroupService, this.contextService),
            excludePattern: excludes,
            maxResults: SearchViewlet.MAX_TEXT_RESULTS,
            includePattern: includes
        };
        this.onQueryTriggered(this.queryBuilder.text(content, options), patternExcludes, patternIncludes);
        if (!preserveFocus) {
            this.searchWidget.focus(false); // focus back to input field
        }
    };
    SearchViewlet.prototype.autoExpandFileMatch = function (fileMatch, alwaysExpandIfOneResult) {
        var length = fileMatch.matches().length;
        if (length < 10 || (alwaysExpandIfOneResult && this.viewModel.searchResult.count() === 1 && length < 50)) {
            this.tree.expand(fileMatch).done(null, errors.onUnexpectedError);
        }
        else {
            this.tree.collapse(fileMatch).done(null, errors.onUnexpectedError);
        }
    };
    SearchViewlet.prototype.onQueryTriggered = function (query, excludePattern, includePattern) {
        var _this = this;
        this.viewModel.cancelSearch();
        // Progress total is 100.0% for more progress bar granularity
        var progressTotal = 1000;
        var progressRunner = this.progressService.show(progressTotal);
        var progressWorked = 0;
        this.loading = true;
        this.searchWidget.searchInput.clearMessage();
        this.showEmptyStage();
        var handledMatches = Object.create(null);
        var autoExpand = function (alwaysExpandIfOneResult) {
            // Auto-expand / collapse based on number of matches:
            // - alwaysExpandIfOneResult: expand file results if we have just one file result and less than 50 matches on a file
            // - expand file results if we have more than one file result and less than 10 matches on a file
            var matches = _this.viewModel.searchResult.matches();
            matches.forEach(function (match) {
                if (handledMatches[match.id()]) {
                    return; // if we once handled a result, do not do it again to keep results stable (the user might have expanded/collapsed meanwhile)
                }
                handledMatches[match.id()] = true;
                _this.autoExpandFileMatch(match, alwaysExpandIfOneResult);
            });
        };
        var isDone = false;
        var onComplete = function (completed) {
            isDone = true;
            // Complete up to 100% as needed
            if (completed) {
                progressRunner.worked(progressTotal - progressWorked);
                setTimeout(function () { return progressRunner.done(); }, 200);
            }
            else {
                progressRunner.done();
            }
            _this.onSearchResultsChanged().then(function () { return autoExpand(true); });
            _this.viewModel.replaceString = _this.searchWidget.getReplaceValue();
            var hasResults = !_this.viewModel.searchResult.isEmpty();
            _this.loading = false;
            _this.actionRegistry['refresh'].enabled = true;
            _this.actionRegistry['vs.tree.collapse'].enabled = hasResults;
            _this.actionRegistry['clearSearchResults'].enabled = hasResults;
            if (completed && completed.limitHit) {
                _this.searchWidget.searchInput.showMessage({
                    content: nls.localize('searchMaxResultsWarning', "The result set only contains a subset of all matches. Please be more specific in your search to narrow down the results."),
                    type: inputBox_1.MessageType.WARNING
                });
            }
            if (!hasResults) {
                var hasExcludes = !!excludePattern;
                var hasIncludes = !!includePattern;
                var message = void 0;
                if (!completed) {
                    message = nls.localize('searchCanceled', "Search was canceled before any results could be found - ");
                }
                else if (hasIncludes && hasExcludes) {
                    message = nls.localize('noResultsIncludesExcludes', "No results found in '{0}' excluding '{1}' - ", includePattern, excludePattern);
                }
                else if (hasIncludes) {
                    message = nls.localize('noResultsIncludes', "No results found in '{0}' - ", includePattern);
                }
                else if (hasExcludes) {
                    message = nls.localize('noResultsExcludes', "No results found excluding '{0}' - ", excludePattern);
                }
                else {
                    message = nls.localize('noResultsFound', "No results found. Review your settings for configured exclusions - ");
                }
                // Indicate as status to ARIA
                aria.status(message);
                _this.tree.onHidden();
                _this.results.hide();
                var div = _this.clearMessage();
                var p = builder_1.$(div).p({ text: message });
                if (!completed) {
                    builder_1.$(p).a({
                        'class': ['pointer', 'prominent'],
                        text: nls.localize('rerunSearch.message', "Search again")
                    }).on(dom.EventType.CLICK, function (e) {
                        dom.EventHelper.stop(e, false);
                        _this.onQueryChanged(true);
                    });
                }
                else if (hasIncludes || hasExcludes) {
                    builder_1.$(p).a({
                        'class': ['pointer', 'prominent'],
                        'tabindex': '0',
                        text: nls.localize('rerunSearchInAll.message', "Search again in all files")
                    }).on(dom.EventType.CLICK, function (e) {
                        dom.EventHelper.stop(e, false);
                        _this.inputPatternExclusions.setValue('');
                        _this.inputPatternIncludes.setValue('');
                        _this.onQueryChanged(true);
                    });
                }
                else {
                    builder_1.$(p).a({
                        'class': ['pointer', 'prominent'],
                        'tabindex': '0',
                        text: nls.localize('openSettings.message', "Open Settings")
                    }).on(dom.EventType.CLICK, function (e) {
                        dom.EventHelper.stop(e, false);
                        if (_this.contextService.hasWorkspace()) {
                            _this.preferencesService.openWorkspaceSettings().done(function () { return null; }, errors.onUnexpectedError);
                        }
                        else {
                            _this.preferencesService.openGlobalSettings().done(function () { return null; }, errors.onUnexpectedError);
                        }
                    });
                }
                if (!_this.contextService.hasWorkspace()) {
                    _this.searchWithoutFolderMessage(div);
                }
            }
            else {
                _this.viewModel.searchResult.toggleHighlights(true); // show highlights
                // Indicate final search result count for ARIA
                aria.status(nls.localize('ariaSearchResultsStatus', "Search returned {0} results in {1} files", _this.viewModel.searchResult.count(), _this.viewModel.searchResult.fileCount()));
            }
        };
        var onError = function (e) {
            if (errors.isPromiseCanceledError(e)) {
                onComplete(null);
            }
            else {
                _this.loading = false;
                isDone = true;
                progressRunner.done();
                _this.messageService.show(2 /* ERROR */, e);
            }
        };
        var total = 0;
        var worked = 0;
        var visibleMatches = 0;
        var onProgress = function (p) {
            // Progress
            if (p.total) {
                total = p.total;
            }
            if (p.worked) {
                worked = p.worked;
            }
        };
        // Handle UI updates in an interval to show frequent progress and results
        var uiRefreshHandle = setInterval(function () {
            if (isDone) {
                window.clearInterval(uiRefreshHandle);
                return;
            }
            // Progress bar update
            var fakeProgress = true;
            if (total > 0 && worked > 0) {
                var ratio = Math.round((worked / total) * progressTotal);
                if (ratio > progressWorked) {
                    progressRunner.worked(ratio - progressWorked);
                    progressWorked = ratio;
                    fakeProgress = false;
                }
            }
            // Fake progress up to 90%, or when actual progress beats it
            var fakeMax = 900;
            var fakeMultiplier = 12;
            if (fakeProgress && progressWorked < fakeMax) {
                // Linearly decrease the rate of fake progress.
                // 1 is the smallest allowed amount of progress.
                var fakeAmt = Math.round((fakeMax - progressWorked) / fakeMax * fakeMultiplier) || 1;
                progressWorked += fakeAmt;
                progressRunner.worked(fakeAmt);
            }
            // Search result tree update
            var fileCount = _this.viewModel.searchResult.fileCount();
            if (visibleMatches !== fileCount) {
                visibleMatches = fileCount;
                _this.tree.refresh().then(function () {
                    autoExpand(false);
                }).done(null, errors.onUnexpectedError);
                _this.updateSearchResultCount();
            }
            if (fileCount > 0) {
                // since we have results now, enable some actions
                if (!_this.actionRegistry['vs.tree.collapse'].enabled) {
                    _this.actionRegistry['vs.tree.collapse'].enabled = true;
                }
            }
        }, 100);
        this.searchWidget.setReplaceAllActionState(false);
        // this.replaceService.disposeAllReplacePreviews();
        this.viewModel.search(query).done(onComplete, onError, onProgress);
    };
    SearchViewlet.prototype.updateSearchResultCount = function () {
        var fileCount = this.viewModel.searchResult.fileCount();
        var msgWasHidden = this.messages.isHidden();
        if (fileCount > 0) {
            var div = this.clearMessage();
            builder_1.$(div).p({ text: this.buildResultCountMessage(this.viewModel.searchResult.count(), fileCount) });
            if (msgWasHidden) {
                this.reLayout();
            }
        }
        else if (!msgWasHidden) {
            this.messages.hide();
        }
    };
    SearchViewlet.prototype.buildResultCountMessage = function (resultCount, fileCount) {
        if (resultCount === 1 && fileCount === 1) {
            return nls.localize('search.file.result', "{0} result in {1} file", resultCount, fileCount);
        }
        else if (resultCount === 1) {
            return nls.localize('search.files.result', "{0} result in {1} files", resultCount, fileCount);
        }
        else if (fileCount === 1) {
            return nls.localize('search.file.results', "{0} results in {1} file", resultCount, fileCount);
        }
        else {
            return nls.localize('search.files.results', "{0} results in {1} files", resultCount, fileCount);
        }
    };
    SearchViewlet.prototype.searchWithoutFolderMessage = function (div) {
        var _this = this;
        builder_1.$(div).p({ text: nls.localize('searchWithoutFolder', "You have not yet opened a folder. Only open files are currently searched - ") })
            .asContainer().a({
            'class': ['pointer', 'prominent'],
            'tabindex': '0',
            text: nls.localize('openFolder', "Open Folder")
        }).on(dom.EventType.CLICK, function (e) {
            dom.EventHelper.stop(e, false);
            var actionClass = env.isMacintosh ? fileActions_1.OpenFileFolderAction : fileActions_1.OpenFolderAction;
            var action = _this.instantiationService.createInstance(actionClass, actionClass.ID, actionClass.LABEL);
            _this.actionRunner.run(action).done(function () {
                action.dispose();
            }, function (err) {
                action.dispose();
                errors.onUnexpectedError(err);
            });
        });
    };
    SearchViewlet.prototype.showEmptyStage = function () {
        // disable 'result'-actions
        this.actionRegistry['refresh'].enabled = false;
        this.actionRegistry['vs.tree.collapse'].enabled = false;
        this.actionRegistry['clearSearchResults'].enabled = false;
        // clean up ui
        // this.replaceService.disposeAllReplacePreviews();
        this.messages.hide();
        this.results.show();
        this.tree.onVisible();
        this.currentSelectedFileMatch = null;
    };
    SearchViewlet.prototype.onFocus = function (lineMatch, preserveFocus, sideBySide, pinned) {
        if (!(lineMatch instanceof searchModel_1.Match)) {
            this.viewModel.searchResult.rangeHighlightDecorations.removeHighlightRange();
            return winjs_base_1.TPromise.as(true);
        }
        this.telemetryService.publicLog('searchResultChosen');
        return (this.viewModel.isReplaceActive() && !!this.viewModel.replaceString) ?
            this.replaceService.openReplacePreview(lineMatch, preserveFocus, sideBySide, pinned) :
            this.open(lineMatch, preserveFocus, sideBySide, pinned);
    };
    SearchViewlet.prototype.open = function (element, preserveFocus, sideBySide, pinned) {
        var _this = this;
        var selection = this.getSelectionFrom(element);
        var resource = element instanceof searchModel_1.Match ? element.parent().resource() : element.resource();
        return this.editorService.openEditor({
            resource: resource,
            options: {
                preserveFocus: preserveFocus,
                pinned: pinned,
                selection: selection,
                revealIfVisible: !sideBySide
            }
        }, sideBySide).then(function (editor) {
            if (editor && element instanceof searchModel_1.Match && preserveFocus) {
                _this.viewModel.searchResult.rangeHighlightDecorations.highlightRange({
                    resource: resource,
                    range: element.range()
                }, editor.getControl());
            }
            else {
                _this.viewModel.searchResult.rangeHighlightDecorations.removeHighlightRange();
            }
        }, errors.onUnexpectedError);
    };
    SearchViewlet.prototype.getSelectionFrom = function (element) {
        var match = null;
        if (element instanceof searchModel_1.Match) {
            match = element;
        }
        if (element instanceof searchModel_1.FileMatch && element.count() > 0) {
            match = element.matches()[element.matches().length - 1];
        }
        if (match) {
            var range = match.range();
            if (this.viewModel.isReplaceActive() && !!this.viewModel.replaceString) {
                var replaceString = match.replaceString;
                return {
                    startLineNumber: range.startLineNumber,
                    startColumn: range.startColumn,
                    endLineNumber: range.startLineNumber,
                    endColumn: range.startColumn + replaceString.length
                };
            }
            return range;
        }
        return void 0;
    };
    SearchViewlet.prototype.onUntitledDidChangeDirty = function (resource) {
        if (!this.viewModel) {
            return;
        }
        // remove search results from this resource as it got disposed
        if (!this.untitledEditorService.isDirty(resource)) {
            var matches = this.viewModel.searchResult.matches();
            for (var i = 0, len = matches.length; i < len; i++) {
                if (resource.toString() === matches[i].resource().toString()) {
                    this.viewModel.searchResult.remove(matches[i]);
                }
            }
        }
    };
    SearchViewlet.prototype.onFilesChanged = function (e) {
        if (!this.viewModel) {
            return;
        }
        var matches = this.viewModel.searchResult.matches();
        for (var i = 0, len = matches.length; i < len; i++) {
            if (e.contains(matches[i].resource(), files_1.FileChangeType.DELETED)) {
                this.viewModel.searchResult.remove(matches[i]);
            }
        }
    };
    SearchViewlet.prototype.getActions = function () {
        return [
            this.actionRegistry['refresh'],
            this.actionRegistry['vs.tree.collapse'],
            this.actionRegistry['clearSearchResults']
        ];
    };
    SearchViewlet.prototype.dispose = function () {
        this.isDisposed = true;
        this.toDispose = lifecycle.dispose(this.toDispose);
        if (this.tree) {
            this.tree.dispose();
        }
        this.searchWidget.dispose();
        this.inputPatternIncludes.dispose();
        this.inputPatternExclusions.dispose();
        this.viewModel.dispose();
        _super.prototype.dispose.call(this);
    };
    return SearchViewlet;
}(viewlet_1.Viewlet));
SearchViewlet.MAX_TEXT_RESULTS = 2048;
SearchViewlet.SHOW_REPLACE_STORAGE_KEY = 'vs.search.show.replace';
SearchViewlet = __decorate([
    __param(0, telemetry_1.ITelemetryService),
    __param(1, files_1.IFileService),
    __param(2, editorService_1.IWorkbenchEditorService),
    __param(3, groupService_1.IEditorGroupService),
    __param(4, progress_1.IProgressService),
    __param(5, message_1.IMessageService),
    __param(6, storage_1.IStorageService),
    __param(7, contextView_1.IContextViewService),
    __param(8, instantiation_1.IInstantiationService),
    __param(9, configuration_1.IConfigurationService),
    __param(10, workspace_1.IWorkspaceContextService),
    __param(11, searchModel_1.ISearchWorkbenchService),
    __param(12, contextkey_1.IContextKeyService),
    __param(13, keybinding_1.IKeybindingService),
    __param(14, replace_1.IReplaceService),
    __param(15, untitledEditorService_1.IUntitledEditorService),
    __param(16, preferences_1.IPreferencesService),
    __param(17, listService_1.IListService)
], SearchViewlet);
exports.SearchViewlet = SearchViewlet;
