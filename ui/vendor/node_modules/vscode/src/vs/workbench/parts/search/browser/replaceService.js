/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var nls = require("vs/nls");
var errors = require("vs/base/common/errors");
var winjs_base_1 = require("vs/base/common/winjs.base");
var network = require("vs/base/common/network");
var lifecycle_1 = require("vs/base/common/lifecycle");
var replace_1 = require("vs/workbench/parts/search/common/replace");
var editor_1 = require("vs/platform/editor/common/editor");
var modelService_1 = require("vs/editor/common/services/modelService");
var modeService_1 = require("vs/editor/common/services/modeService");
var searchModel_1 = require("vs/workbench/parts/search/common/searchModel");
var bulkEdit_1 = require("vs/editor/common/services/bulkEdit");
var telemetry_1 = require("vs/platform/telemetry/common/telemetry");
var resolverService_1 = require("vs/editor/common/services/resolverService");
var instantiation_1 = require("vs/platform/instantiation/common/instantiation");
var files_1 = require("vs/platform/files/common/files");
var REPLACE_PREVIEW = 'replacePreview';
var toReplaceResource = function (fileResource) {
    return fileResource.with({ scheme: network.Schemas.internal, fragment: REPLACE_PREVIEW, query: JSON.stringify({ scheme: fileResource.scheme }) });
};
var toFileResource = function (replaceResource) {
    return replaceResource.with({ scheme: JSON.parse(replaceResource.query)['scheme'], fragment: '', query: '' });
};
var ReplacePreviewContentProvider = (function () {
    function ReplacePreviewContentProvider(instantiationService, textModelResolverService) {
        this.instantiationService = instantiationService;
        this.textModelResolverService = textModelResolverService;
        this.textModelResolverService.registerTextModelContentProvider(network.Schemas.internal, this);
    }
    ReplacePreviewContentProvider.prototype.getId = function () {
        return 'replace.preview.contentprovider';
    };
    ReplacePreviewContentProvider.prototype.provideTextContent = function (uri) {
        if (uri.fragment === REPLACE_PREVIEW) {
            return this.instantiationService.createInstance(ReplacePreviewModel).resolve(uri);
        }
        return null;
    };
    return ReplacePreviewContentProvider;
}());
ReplacePreviewContentProvider = __decorate([
    __param(0, instantiation_1.IInstantiationService),
    __param(1, resolverService_1.ITextModelResolverService)
], ReplacePreviewContentProvider);
exports.ReplacePreviewContentProvider = ReplacePreviewContentProvider;
var ReplacePreviewModel = (function (_super) {
    __extends(ReplacePreviewModel, _super);
    function ReplacePreviewModel(modelService, modeService, textModelResolverService, replaceService, searchWorkbenchService) {
        var _this = _super.call(this) || this;
        _this.modelService = modelService;
        _this.modeService = modeService;
        _this.textModelResolverService = textModelResolverService;
        _this.replaceService = replaceService;
        _this.searchWorkbenchService = searchWorkbenchService;
        return _this;
    }
    ReplacePreviewModel.prototype.resolve = function (replacePreviewUri) {
        var _this = this;
        var fileResource = toFileResource(replacePreviewUri);
        var fileMatch = this.searchWorkbenchService.searchModel.searchResult.matches().filter(function (match) { return match.resource().toString() === fileResource.toString(); })[0];
        return this.textModelResolverService.createModelReference(fileResource).then(function (ref) {
            ref = _this._register(ref);
            var sourceModel = ref.object.textEditorModel;
            var sourceModelModeId = sourceModel.getLanguageIdentifier().language;
            var replacePreviewModel = _this.modelService.createModel(sourceModel.getValue(), _this.modeService.getOrCreateMode(sourceModelModeId), replacePreviewUri);
            _this._register(fileMatch.onChange(function (modelChange) { return _this.update(sourceModel, replacePreviewModel, fileMatch, modelChange); }));
            _this._register(_this.searchWorkbenchService.searchModel.onReplaceTermChanged(function () { return _this.update(sourceModel, replacePreviewModel, fileMatch); }));
            _this._register(fileMatch.onDispose(function () { return replacePreviewModel.dispose(); })); // TODO@Sandeep we should not dispose a model directly but rather the reference (depends on https://github.com/Microsoft/vscode/issues/17073)
            _this._register(replacePreviewModel.onWillDispose(function () { return _this.dispose(); }));
            _this._register(sourceModel.onWillDispose(function () { return _this.dispose(); }));
            return replacePreviewModel;
        });
    };
    ReplacePreviewModel.prototype.update = function (sourceModel, replacePreviewModel, fileMatch, override) {
        if (override === void 0) { override = false; }
        if (!sourceModel.isDisposed() && !replacePreviewModel.isDisposed()) {
            this.replaceService.updateReplacePreview(fileMatch, override);
        }
    };
    return ReplacePreviewModel;
}(lifecycle_1.Disposable));
ReplacePreviewModel = __decorate([
    __param(0, modelService_1.IModelService),
    __param(1, modeService_1.IModeService),
    __param(2, resolverService_1.ITextModelResolverService),
    __param(3, replace_1.IReplaceService),
    __param(4, searchModel_1.ISearchWorkbenchService)
], ReplacePreviewModel);
var ReplaceService = (function () {
    function ReplaceService(telemetryService, fileService, editorService, instantiationService, textModelResolverService, searchWorkbenchService) {
        this.telemetryService = telemetryService;
        this.fileService = fileService;
        this.editorService = editorService;
        this.instantiationService = instantiationService;
        this.textModelResolverService = textModelResolverService;
        this.searchWorkbenchService = searchWorkbenchService;
    }
    ReplaceService.prototype.replace = function (arg, progress, resource) {
        var _this = this;
        if (progress === void 0) { progress = null; }
        if (resource === void 0) { resource = null; }
        var bulkEdit = bulkEdit_1.createBulkEdit(this.textModelResolverService, null, this.fileService);
        bulkEdit.progress(progress);
        if (arg instanceof searchModel_1.Match) {
            var match = arg;
            bulkEdit.add([this.createEdit(match, match.replaceString, resource)]);
        }
        if (arg instanceof searchModel_1.FileMatch) {
            arg = [arg];
        }
        if (arg instanceof Array) {
            arg.forEach(function (element) {
                var fileMatch = element;
                if (fileMatch.count() > 0) {
                    fileMatch.matches().forEach(function (match) {
                        bulkEdit.add([_this.createEdit(match, match.replaceString, resource)]);
                    });
                }
            });
        }
        return bulkEdit.finish();
    };
    ReplaceService.prototype.openReplacePreview = function (element, preserveFocus, sideBySide, pinned) {
        var _this = this;
        this.telemetryService.publicLog('replace.open.previewEditor');
        var fileMatch = element instanceof searchModel_1.Match ? element.parent() : element;
        return this.editorService.openEditor({
            leftResource: fileMatch.resource(),
            rightResource: toReplaceResource(fileMatch.resource()),
            label: nls.localize('fileReplaceChanges', "{0} â†” {1} (Replace Preview)", fileMatch.name(), fileMatch.name()),
            options: {
                preserveFocus: preserveFocus,
                pinned: pinned,
                revealIfVisible: true
            }
        }).then(function (editor) {
            _this.updateReplacePreview(fileMatch).then(function () {
                var editorControl = editor.getControl();
                if (element instanceof searchModel_1.Match) {
                    editorControl.revealLineInCenter(element.range().startLineNumber);
                }
            });
        }, errors.onUnexpectedError);
    };
    ReplaceService.prototype.updateReplacePreview = function (fileMatch, override) {
        var _this = this;
        if (override === void 0) { override = false; }
        var replacePreviewUri = toReplaceResource(fileMatch.resource());
        return winjs_base_1.TPromise.join([this.textModelResolverService.createModelReference(fileMatch.resource()), this.textModelResolverService.createModelReference(replacePreviewUri)])
            .then(function (_a) {
            var sourceModelRef = _a[0], replaceModelRef = _a[1];
            var sourceModel = sourceModelRef.object.textEditorModel;
            var replaceModel = replaceModelRef.object.textEditorModel;
            var returnValue = winjs_base_1.TPromise.wrap(null);
            // If model is disposed do not update
            if (sourceModel && replaceModel) {
                if (override) {
                    replaceModel.setValue(sourceModel.getValue());
                }
                else {
                    replaceModel.undo();
                }
                returnValue = _this.replace(fileMatch, null, replacePreviewUri);
            }
            return returnValue.then(function () {
                sourceModelRef.dispose();
                replaceModelRef.dispose();
            });
        });
    };
    ReplaceService.prototype.createEdit = function (match, text, resource) {
        if (resource === void 0) { resource = null; }
        var fileMatch = match.parent();
        var resourceEdit = {
            resource: resource !== null ? resource : fileMatch.resource(),
            range: match.range(),
            newText: text
        };
        return resourceEdit;
    };
    return ReplaceService;
}());
ReplaceService = __decorate([
    __param(0, telemetry_1.ITelemetryService),
    __param(1, files_1.IFileService),
    __param(2, editor_1.IEditorService),
    __param(3, instantiation_1.IInstantiationService),
    __param(4, resolverService_1.ITextModelResolverService),
    __param(5, searchModel_1.ISearchWorkbenchService)
], ReplaceService);
exports.ReplaceService = ReplaceService;
