/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var nls = require("vs/nls");
var platform_1 = require("vs/platform/platform");
var contributions_1 = require("vs/workbench/common/contributions");
var update_1 = require("vs/workbench/parts/update/electron-browser/update");
var releaseNotesEditor_1 = require("vs/workbench/parts/update/electron-browser/releaseNotesEditor");
var releaseNotesInput_1 = require("vs/workbench/parts/update/electron-browser/releaseNotesInput");
var baseEditor_1 = require("vs/workbench/browser/parts/editor/baseEditor");
var editor_1 = require("vs/workbench/common/editor");
var descriptors_1 = require("vs/platform/instantiation/common/descriptors");
var actionRegistry_1 = require("vs/workbench/common/actionRegistry");
var actions_1 = require("vs/platform/actions/common/actions");
var configurationRegistry_1 = require("vs/platform/configuration/common/configurationRegistry");
platform_1.Registry.as(contributions_1.Extensions.Workbench)
    .registerWorkbenchContribution(update_1.UpdateContribution);
// Editor
var editorDescriptor = new baseEditor_1.EditorDescriptor(releaseNotesEditor_1.ReleaseNotesEditor.ID, nls.localize('release notes', "Release notes"), 'vs/workbench/parts/update/electron-browser/releaseNotesEditor', 'ReleaseNotesEditor');
platform_1.Registry.as(editor_1.Extensions.Editors)
    .registerEditor(editorDescriptor, [new descriptors_1.SyncDescriptor(releaseNotesInput_1.ReleaseNotesInput)]);
platform_1.Registry.as(actionRegistry_1.Extensions.WorkbenchActions)
    .registerWorkbenchAction(new actions_1.SyncActionDescriptor(update_1.ShowCurrentReleaseNotesAction, update_1.ShowCurrentReleaseNotesAction.ID, update_1.ShowCurrentReleaseNotesAction.LABEL), 'Open Release Notes');
// Configuration: Update
var configurationRegistry = platform_1.Registry.as(configurationRegistry_1.Extensions.Configuration);
configurationRegistry.registerConfiguration({
    'id': 'update',
    'order': 15,
    'title': nls.localize('updateConfigurationTitle', "Update"),
    'type': 'object',
    'properties': {
        'update.channel': {
            'type': 'string',
            'enum': ['none', 'default'],
            'default': 'default',
            'description': nls.localize('updateChannel', "Configure whether you receive automatic updates from an update channel. Requires a restart after change.")
        }
    }
});
