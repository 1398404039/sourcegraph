/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var nls = require("vs/nls");
var winjs = require("vs/base/common/winjs.base");
var paths = require("vs/base/common/paths");
var actions = require("vs/base/common/actions");
var actions_1 = require("vs/platform/actions/common/actions");
var platform = require("vs/platform/platform");
var workbenchActionRegistry = require("vs/workbench/common/actionRegistry");
var workbenchContributions = require("vs/workbench/common/contributions");
var snippetsTracker = require("./snippetsTracker");
var pfs = require("vs/base/node/pfs");
var errors = require("vs/base/common/errors");
var quickOpenService_1 = require("vs/workbench/services/quickopen/common/quickOpenService");
var environment_1 = require("vs/platform/environment/common/environment");
var JSONContributionRegistry = require("vs/platform/jsonschemas/common/jsonContributionRegistry");
var modeService_1 = require("vs/editor/common/services/modeService");
var windows_1 = require("vs/platform/windows/common/windows");
var fs = require("fs");
var OpenSnippetsAction = (function (_super) {
    __extends(OpenSnippetsAction, _super);
    function OpenSnippetsAction(id, label, environmentService, quickOpenService, modeService, windowsService) {
        var _this = _super.call(this, id, label) || this;
        _this.environmentService = environmentService;
        _this.quickOpenService = quickOpenService;
        _this.modeService = modeService;
        _this.windowsService = windowsService;
        return _this;
    }
    OpenSnippetsAction.prototype.openFile = function (filePath) {
        return this.windowsService.windowOpen([filePath]);
    };
    OpenSnippetsAction.prototype.run = function () {
        var _this = this;
        var modeIds = this.modeService.getRegisteredModes();
        var picks = [];
        modeIds.forEach(function (modeId) {
            var name = _this.modeService.getLanguageName(modeId);
            if (name) {
                picks.push({ label: name, id: modeId });
            }
        });
        picks = picks.sort(function (e1, e2) {
            return e1.label.localeCompare(e2.label);
        });
        return this.quickOpenService.pick(picks, { placeHolder: nls.localize('openSnippet.pickLanguage', "Select Language for Snippet") }).then(function (language) {
            if (language) {
                var snippetPath = paths.join(_this.environmentService.appSettingsHome, 'snippets', language.id + '.json');
                return fileExists(snippetPath).then(function (success) {
                    if (success) {
                        return _this.openFile(snippetPath);
                    }
                    var defaultContent = [
                        '{',
                        '/*',
                        '\t // Place your snippets for ' + language.label + ' here. Each snippet is defined under a snippet name and has a prefix, body and ',
                        '\t // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:',
                        '\t // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the ',
                        '\t // same ids are connected.',
                        '\t // Example:',
                        '\t "Print to console": {',
                        '\t\t"prefix": "log",',
                        '\t\t"body": [',
                        '\t\t\t"console.log(\'$1\');",',
                        '\t\t\t"$2"',
                        '\t\t],',
                        '\t\t"description": "Log output to console"',
                        '\t}',
                        '*/',
                        '}'
                    ].join('\n');
                    return pfs.writeFile(snippetPath, defaultContent).then(function () {
                        return _this.openFile(snippetPath);
                    }, function (err) {
                        errors.onUnexpectedError(nls.localize('openSnippet.errorOnCreate', 'Unable to create {0}', snippetPath));
                    });
                });
            }
            return winjs.TPromise.as(null);
        });
    };
    return OpenSnippetsAction;
}(actions.Action));
OpenSnippetsAction.ID = 'workbench.action.openSnippets';
OpenSnippetsAction.LABEL = nls.localize('openSnippet.label', "Open User Snippets");
OpenSnippetsAction = __decorate([
    __param(2, environment_1.IEnvironmentService),
    __param(3, quickOpenService_1.IQuickOpenService),
    __param(4, modeService_1.IModeService),
    __param(5, windows_1.IWindowsService)
], OpenSnippetsAction);
function fileExists(path) {
    return new winjs.TPromise(function (c, e, p) {
        fs.stat(path, function (err, stats) {
            if (err) {
                return c(false);
            }
            if (stats.isFile()) {
                return c(true);
            }
            c(false);
        });
    });
}
var preferencesCategory = nls.localize('preferences', "Preferences");
var workbenchActionsRegistry = platform.Registry.as(workbenchActionRegistry.Extensions.WorkbenchActions);
workbenchActionsRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(OpenSnippetsAction, OpenSnippetsAction.ID, OpenSnippetsAction.LABEL), 'Preferences: Snippets', preferencesCategory);
platform.Registry.as(workbenchContributions.Extensions.Workbench).registerWorkbenchContribution(snippetsTracker.SnippetsTracker);
var schemaId = 'vscode://schemas/snippets';
var schema = {
    'id': schemaId,
    'defaultSnippets': [{
            'label': nls.localize('snippetSchema.json.default', "Empty snippet"),
            'body': { '${1:snippetName}': { 'prefix': '${2:prefix}', 'body': '${3:snippet}', 'description': '${4:description}' } }
        }],
    'type': 'object',
    'description': nls.localize('snippetSchema.json', 'User snippet configuration'),
    'additionalProperties': {
        'type': 'object',
        'required': ['prefix', 'body'],
        'properties': {
            'prefix': {
                'description': nls.localize('snippetSchema.json.prefix', 'The prefix to used when selecting the snippet in intellisense'),
                'type': 'string'
            },
            'body': {
                'description': nls.localize('snippetSchema.json.body', 'The snippet content. Use \'${id}\', \'${id:label}\', \'${1:label}\' for variables and \'$0\', \'$1\' for the cursor positions'),
                'type': ['string', 'array'],
                'items': {
                    'type': 'string'
                }
            },
            'description': {
                'description': nls.localize('snippetSchema.json.description', 'The snippet description.'),
                'type': 'string'
            }
        },
        'additionalProperties': false
    }
};
var schemaRegistry = platform.Registry.as(JSONContributionRegistry.Extensions.JSONContribution);
schemaRegistry.registerSchema(schemaId, schema);
