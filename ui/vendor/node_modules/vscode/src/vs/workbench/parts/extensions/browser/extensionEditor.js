/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
require("./media/extensionEditor.css");
var nls_1 = require("vs/nls");
var winjs_base_1 = require("vs/base/common/winjs.base");
var marked_1 = require("vs/base/common/marked/marked");
var async_1 = require("vs/base/common/async");
var arrays = require("vs/base/common/arrays");
var event_1 = require("vs/base/common/event");
var cache_1 = require("vs/base/common/cache");
var actions_1 = require("vs/base/common/actions");
var errors_1 = require("vs/base/common/errors");
var severity_1 = require("vs/base/common/severity");
var lifecycle_1 = require("vs/base/common/lifecycle");
var event_2 = require("vs/base/browser/event");
var dom_1 = require("vs/base/browser/dom");
var baseEditor_1 = require("vs/workbench/browser/parts/editor/baseEditor");
var viewlet_1 = require("vs/workbench/services/viewlet/browser/viewlet");
var telemetry_1 = require("vs/platform/telemetry/common/telemetry");
var instantiation_1 = require("vs/platform/instantiation/common/instantiation");
var extensionManagement_1 = require("vs/platform/extensionManagement/common/extensionManagement");
var themeService_1 = require("vs/workbench/services/themes/common/themeService");
var extensions_1 = require("vs/workbench/parts/extensions/common/extensions");
var dependenciesViewer_1 = require("vs/workbench/parts/extensions/browser/dependenciesViewer");
var configuration_1 = require("vs/platform/configuration/common/configuration");
var extensionsWidgets_1 = require("vs/workbench/parts/extensions/browser/extensionsWidgets");
var product_1 = require("vs/platform/product");
var actionbar_1 = require("vs/base/browser/ui/actionbar/actionbar");
var extensionsActions_1 = require("vs/workbench/parts/extensions/browser/extensionsActions");
var webview_1 = require("vs/workbench/parts/html/browser/webview");
var keybinding_1 = require("vs/base/common/keybinding");
var keybinding_2 = require("vs/platform/keybinding/common/keybinding");
var scrollableElement_1 = require("vs/base/browser/ui/scrollbar/scrollableElement");
var message_1 = require("vs/platform/message/common/message");
var opener_1 = require("vs/platform/opener/common/opener");
var treeImpl_1 = require("vs/base/parts/tree/browser/treeImpl");
function renderBody(body) {
    return "<!DOCTYPE html>\n\t\t<html>\n\t\t\t<head>\n\t\t\t\t<meta http-equiv=\"Content-type\" content=\"text/html;charset=UTF-8\">\n\t\t\t\t<link rel=\"stylesheet\" type=\"text/css\" href=\"" + require.toUrl('./media/markdown.css') + "\" >\n\t\t\t</head>\n\t\t\t<body>" + body + "</body>\n\t\t</html>";
}
var NavBar = (function () {
    function NavBar(container) {
        this._onChange = new event_1.Emitter();
        this.currentId = null;
        var element = dom_1.append(container, dom_1.$('.navbar'));
        this.actions = [];
        this.actionbar = new actionbar_1.ActionBar(element, { animated: false });
    }
    Object.defineProperty(NavBar.prototype, "onChange", {
        get: function () { return this._onChange.event; },
        enumerable: true,
        configurable: true
    });
    NavBar.prototype.push = function (id, label) {
        var _this = this;
        var run = function () { return _this._update(id); };
        var action = new actions_1.Action(id, label, null, true, run);
        this.actions.push(action);
        this.actionbar.push(action);
        if (this.actions.length === 1) {
            run();
        }
    };
    NavBar.prototype.clear = function () {
        this.actions = lifecycle_1.dispose(this.actions);
        this.actionbar.clear();
    };
    NavBar.prototype.update = function () {
        this._update(this.currentId);
    };
    NavBar.prototype._update = function (id) {
        if (id === void 0) { id = this.currentId; }
        this.currentId = id;
        this._onChange.fire(id);
        this.actions.forEach(function (a) { return a.enabled = a.id !== id; });
        return winjs_base_1.TPromise.as(null);
    };
    NavBar.prototype.dispose = function () {
        this.actionbar = lifecycle_1.dispose(this.actionbar);
    };
    return NavBar;
}());
var NavbarSection = {
    Readme: 'readme',
    Contributions: 'contributions',
    Changelog: 'changelog',
    Dependencies: 'dependencies'
};
var ExtensionEditor = (function (_super) {
    __extends(ExtensionEditor, _super);
    function ExtensionEditor(telemetryService, galleryService, configurationService, instantiationService, viewletService, extensionsWorkbenchService, themeService, keybindingService, messageService, openerService) {
        var _this = _super.call(this, ExtensionEditor.ID, telemetryService) || this;
        _this.galleryService = galleryService;
        _this.configurationService = configurationService;
        _this.instantiationService = instantiationService;
        _this.viewletService = viewletService;
        _this.extensionsWorkbenchService = extensionsWorkbenchService;
        _this.themeService = themeService;
        _this.keybindingService = keybindingService;
        _this.messageService = messageService;
        _this.openerService = openerService;
        _this.layoutParticipants = [];
        _this.contentDisposables = [];
        _this.transientDisposables = [];
        _this._highlight = null;
        _this.highlightDisposable = lifecycle_1.empty;
        _this.disposables = [];
        _this.extensionReadme = null;
        _this.extensionChangelog = null;
        _this.extensionManifest = null;
        _this.extensionDependencies = null;
        return _this;
    }
    ExtensionEditor.prototype.createEditor = function (parent) {
        var container = parent.getHTMLElement();
        var root = dom_1.append(container, dom_1.$('.extension-editor'));
        var header = dom_1.append(root, dom_1.$('.header'));
        this.icon = dom_1.append(header, dom_1.$('img.icon', { draggable: false }));
        var details = dom_1.append(header, dom_1.$('.details'));
        var title = dom_1.append(details, dom_1.$('.title'));
        this.name = dom_1.append(title, dom_1.$('span.name.clickable', { title: nls_1.localize('name', "Extension name") }));
        this.identifier = dom_1.append(title, dom_1.$('span.identifier', { title: nls_1.localize('extension id', "Extension identifier") }));
        var subtitle = dom_1.append(details, dom_1.$('.subtitle'));
        this.publisher = dom_1.append(subtitle, dom_1.$('span.publisher.clickable', { title: nls_1.localize('publisher', "Publisher name") }));
        this.installCount = dom_1.append(subtitle, dom_1.$('span.install', { title: nls_1.localize('install count', "Install count") }));
        this.rating = dom_1.append(subtitle, dom_1.$('span.rating.clickable', { title: nls_1.localize('rating', "Rating") }));
        this.license = dom_1.append(subtitle, dom_1.$('span.license.clickable'));
        this.license.textContent = nls_1.localize('license', 'License');
        this.license.style.display = 'none';
        this.description = dom_1.append(details, dom_1.$('.description'));
        var extensionActions = dom_1.append(details, dom_1.$('.actions'));
        this.extensionActionBar = new actionbar_1.ActionBar(extensionActions, {
            animated: false,
            actionItemProvider: function (action) {
                if (action.id === extensionsActions_1.EnableAction.ID) {
                    return action.actionItem;
                }
                if (action.id === extensionsActions_1.DisableAction.ID) {
                    return action.actionItem;
                }
                return null;
            }
        });
        this.disposables.push(this.extensionActionBar);
        event_1.chain(event_1.fromEventEmitter(this.extensionActionBar, 'run'))
            .map(function (_a) {
            var error = _a.error;
            return error;
        })
            .filter(function (error) { return !!error; })
            .on(this.onError, this, this.disposables);
        var body = dom_1.append(root, dom_1.$('.body'));
        this.navbar = new NavBar(body);
        this.content = dom_1.append(body, dom_1.$('.content'));
    };
    ExtensionEditor.prototype.setInput = function (input, options) {
        var _this = this;
        var extension = input.extension;
        this.transientDisposables = lifecycle_1.dispose(this.transientDisposables);
        this.telemetryService.publicLog('extensionGallery:openExtension', extension.telemetryData);
        this.extensionReadme = new cache_1.default(function () { return extension.getReadme(); });
        this.extensionChangelog = new cache_1.default(function () { return extension.getChangelog(); });
        this.extensionManifest = new cache_1.default(function () { return extension.getManifest(); });
        this.extensionDependencies = new cache_1.default(function () { return _this.extensionsWorkbenchService.loadDependencies(extension); });
        var onError = event_1.once(event_2.domEvent(this.icon, 'error'));
        onError(function () { return _this.icon.src = extension.iconUrlFallback; }, null, this.transientDisposables);
        this.icon.src = extension.iconUrl;
        this.name.textContent = extension.displayName;
        this.identifier.textContent = extension.publisher + "." + extension.name;
        this.publisher.textContent = extension.publisherDisplayName;
        this.description.textContent = extension.description;
        if (product_1.default.extensionsGallery) {
            var extensionUrl_1 = product_1.default.extensionsGallery.itemUrl + "?itemName=" + extension.publisher + "." + extension.name;
            this.name.onclick = dom_1.finalHandler(function () { return window.open(extensionUrl_1); });
            this.rating.onclick = dom_1.finalHandler(function () { return window.open(extensionUrl_1 + "#review-details"); });
            this.publisher.onclick = dom_1.finalHandler(function () {
                _this.viewletService.openViewlet(extensions_1.VIEWLET_ID, true)
                    .then(function (viewlet) { return viewlet; })
                    .done(function (viewlet) { return viewlet.search("publisher:\"" + extension.publisherDisplayName + "\""); });
            });
            if (extension.licenseUrl) {
                this.license.onclick = dom_1.finalHandler(function () { return window.open(extension.licenseUrl); });
                this.license.style.display = 'initial';
            }
            else {
                this.license.onclick = null;
                this.license.style.display = 'none';
            }
        }
        var install = this.instantiationService.createInstance(extensionsWidgets_1.InstallWidget, this.installCount, { extension: extension });
        this.transientDisposables.push(install);
        var ratings = this.instantiationService.createInstance(extensionsWidgets_1.RatingsWidget, this.rating, { extension: extension });
        this.transientDisposables.push(ratings);
        var builtinStatusAction = this.instantiationService.createInstance(extensionsActions_1.BuiltinStatusLabelAction);
        var installAction = this.instantiationService.createInstance(extensionsActions_1.CombinedInstallAction);
        var updateAction = this.instantiationService.createInstance(extensionsActions_1.UpdateAction);
        var enableAction = this.instantiationService.createInstance(extensionsActions_1.EnableAction);
        var disableAction = this.instantiationService.createInstance(extensionsActions_1.DisableAction);
        var reloadAction = this.instantiationService.createInstance(extensionsActions_1.ReloadAction);
        installAction.extension = extension;
        builtinStatusAction.extension = extension;
        updateAction.extension = extension;
        enableAction.extension = extension;
        disableAction.extension = extension;
        reloadAction.extension = extension;
        this.extensionActionBar.clear();
        this.extensionActionBar.push([reloadAction, updateAction, enableAction, disableAction, installAction, builtinStatusAction], { icon: true, label: true });
        this.transientDisposables.push(enableAction, updateAction, reloadAction, disableAction, installAction, builtinStatusAction);
        this.navbar.clear();
        this.navbar.onChange(this.onNavbarChange.bind(this, extension), this, this.transientDisposables);
        this.navbar.push(NavbarSection.Readme, nls_1.localize('details', "Details"));
        this.navbar.push(NavbarSection.Contributions, nls_1.localize('contributions', "Contributions"));
        this.navbar.push(NavbarSection.Changelog, nls_1.localize('changelog', "Changelog"));
        this.navbar.push(NavbarSection.Dependencies, nls_1.localize('dependencies', "Dependencies"));
        this.content.innerHTML = '';
        return _super.prototype.setInput.call(this, input, options);
    };
    ExtensionEditor.prototype.changePosition = function (position) {
        this.navbar.update();
        _super.prototype.changePosition.call(this, position);
    };
    ExtensionEditor.prototype.onNavbarChange = function (extension, id) {
        this.contentDisposables = lifecycle_1.dispose(this.contentDisposables);
        this.content.innerHTML = '';
        switch (id) {
            case NavbarSection.Readme: return this.openReadme();
            case NavbarSection.Contributions: return this.openContributions();
            case NavbarSection.Changelog: return this.openChangelog();
            case NavbarSection.Dependencies: return this.openDependencies(extension);
        }
    };
    ExtensionEditor.prototype.openMarkdown = function (content, noContentCopy) {
        var _this = this;
        return this.loadContents(function () { return content
            .then(marked_1.marked.parse)
            .then(renderBody)
            .then(function (body) {
            var webview = new webview_1.default(_this.content, document.querySelector('.monaco-editor-background'), { nodeintegration: false });
            webview.style(_this.themeService.getColorTheme());
            webview.contents = [body];
            webview.onDidClickLink(function (link) { return _this.openerService.open(link); }, null, _this.contentDisposables);
            _this.themeService.onDidColorThemeChange(function (themeId) { return webview.style(themeId); }, null, _this.contentDisposables);
            _this.contentDisposables.push(webview);
        })
            .then(null, function () {
            var p = dom_1.append(_this.content, dom_1.$('p.nocontent'));
            p.textContent = noContentCopy;
        }); });
    };
    ExtensionEditor.prototype.openReadme = function () {
        return this.openMarkdown(this.extensionReadme.get(), nls_1.localize('noReadme', "No README available."));
    };
    ExtensionEditor.prototype.openChangelog = function () {
        return this.openMarkdown(this.extensionChangelog.get(), nls_1.localize('noChangelog', "No Changelog available."));
    };
    ExtensionEditor.prototype.openContributions = function () {
        var _this = this;
        return this.loadContents(function () { return _this.extensionManifest.get()
            .then(function (manifest) {
            var content = dom_1.$('div', { class: 'subcontent' });
            var scrollableContent = new scrollableElement_1.DomScrollableElement(content, { canUseTranslate3d: false });
            var layout = function () { return scrollableContent.scanDomNode(); };
            var removeLayoutParticipant = arrays.insert(_this.layoutParticipants, { layout: layout });
            _this.contentDisposables.push(lifecycle_1.toDisposable(removeLayoutParticipant));
            var renders = [
                ExtensionEditor.renderSettings(content, manifest, layout),
                _this.renderCommands(content, manifest, layout),
                ExtensionEditor.renderLanguages(content, manifest, layout),
                ExtensionEditor.renderThemes(content, manifest, layout),
                ExtensionEditor.renderJSONValidation(content, manifest, layout),
                ExtensionEditor.renderDebuggers(content, manifest, layout)
            ];
            var isEmpty = !renders.reduce(function (v, r) { return r || v; }, false);
            scrollableContent.scanDomNode();
            if (isEmpty) {
                dom_1.append(_this.content, dom_1.$('p.nocontent')).textContent = nls_1.localize('noContributions', "No Contributions");
                return;
            }
            else {
                dom_1.append(_this.content, scrollableContent.getDomNode());
                _this.contentDisposables.push(scrollableContent);
            }
        }); });
    };
    ExtensionEditor.prototype.openDependencies = function (extension) {
        var _this = this;
        if (extension.dependencies.length === 0) {
            dom_1.append(this.content, dom_1.$('p.nocontent')).textContent = nls_1.localize('noDependencies', "No Dependencies");
            return;
        }
        dom_1.addClass(this.content, 'loading');
        this.extensionDependencies.get().then(function (extensionDependencies) {
            dom_1.removeClass(_this.content, 'loading');
            var content = dom_1.$('div', { class: 'subcontent' });
            var scrollableContent = new scrollableElement_1.DomScrollableElement(content, { canUseTranslate3d: false });
            dom_1.append(_this.content, scrollableContent.getDomNode());
            _this.contentDisposables.push(scrollableContent);
            var tree = ExtensionEditor.renderDependencies(content, extensionDependencies, _this.instantiationService);
            var layout = function () {
                scrollableContent.scanDomNode();
                tree.layout(scrollableContent.getHeight());
            };
            var removeLayoutParticipant = arrays.insert(_this.layoutParticipants, { layout: layout });
            _this.contentDisposables.push(lifecycle_1.toDisposable(removeLayoutParticipant));
            _this.contentDisposables.push(tree);
            scrollableContent.scanDomNode();
        }, function (error) {
            dom_1.removeClass(_this.content, 'loading');
            dom_1.append(_this.content, dom_1.$('p.nocontent')).textContent = error;
            _this.messageService.show(severity_1.default.Error, error);
            return;
        });
    };
    ExtensionEditor.renderDependencies = function (container, extensionDependencies, instantiationService) {
        var renderer = instantiationService.createInstance(dependenciesViewer_1.Renderer);
        var controller = instantiationService.createInstance(dependenciesViewer_1.Controller);
        var tree = new treeImpl_1.Tree(container, {
            dataSource: new dependenciesViewer_1.DataSource(),
            renderer: renderer,
            controller: controller
        }, {
            indentPixels: 40,
            twistiePixels: 20
        });
        tree.setInput(extensionDependencies);
        return tree;
    };
    ExtensionEditor.renderSettings = function (container, manifest, onDetailsToggle) {
        var contributes = manifest.contributes;
        var configuration = contributes && contributes.configuration;
        var properties = configuration && configuration.properties;
        var contrib = properties ? Object.keys(properties) : [];
        if (!contrib.length) {
            return false;
        }
        var details = dom_1.$('details', { open: true, ontoggle: onDetailsToggle }, dom_1.$('summary', null, nls_1.localize('settings', "Settings ({0})", contrib.length)), dom_1.$.apply(void 0, ['table', null,
            dom_1.$('tr', null, dom_1.$('th', null, nls_1.localize('setting name', "Name")), dom_1.$('th', null, nls_1.localize('description', "Description")), dom_1.$('th', null, nls_1.localize('default', "Default")))].concat(contrib.map(function (key) { return dom_1.$('tr', null, dom_1.$('td', null, dom_1.$('code', null, key)), dom_1.$('td', null, properties[key].description), dom_1.$('td', null, dom_1.$('code', null, properties[key].default))); }))));
        dom_1.append(container, details);
        return true;
    };
    ExtensionEditor.renderDebuggers = function (container, manifest, onDetailsToggle) {
        var contributes = manifest.contributes;
        var contrib = contributes && contributes.debuggers || [];
        if (!contrib.length) {
            return false;
        }
        var details = dom_1.$('details', { open: true, ontoggle: onDetailsToggle }, dom_1.$('summary', null, nls_1.localize('debuggers', "Debuggers ({0})", contrib.length)), dom_1.$.apply(void 0, ['table', null,
            dom_1.$('tr', null, dom_1.$('th', null, nls_1.localize('debugger name', "Name")))].concat(contrib.map(function (d) { return dom_1.$('tr', null, dom_1.$('td', null, d.label || d.type)); }))));
        dom_1.append(container, details);
        return true;
    };
    ExtensionEditor.renderThemes = function (container, manifest, onDetailsToggle) {
        var contributes = manifest.contributes;
        var contrib = contributes && contributes.themes || [];
        if (!contrib.length) {
            return false;
        }
        var details = dom_1.$('details', { open: true, ontoggle: onDetailsToggle }, dom_1.$('summary', null, nls_1.localize('themes', "Themes ({0})", contrib.length)), dom_1.$.apply(void 0, ['ul', null].concat(contrib.map(function (theme) { return dom_1.$('li', null, theme.label); }))));
        dom_1.append(container, details);
        return true;
    };
    ExtensionEditor.renderJSONValidation = function (container, manifest, onDetailsToggle) {
        var contributes = manifest.contributes;
        var contrib = contributes && contributes.jsonValidation || [];
        if (!contrib.length) {
            return false;
        }
        var details = dom_1.$('details', { open: true, ontoggle: onDetailsToggle }, dom_1.$('summary', null, nls_1.localize('JSON Validation', "JSON Validation ({0})", contrib.length)), dom_1.$.apply(void 0, ['ul', null].concat(contrib.map(function (v) { return dom_1.$('li', null, v.fileMatch); }))));
        dom_1.append(container, details);
        return true;
    };
    ExtensionEditor.prototype.renderCommands = function (container, manifest, onDetailsToggle) {
        var _this = this;
        var contributes = manifest.contributes;
        var rawCommands = contributes && contributes.commands || [];
        var commands = rawCommands.map(function (c) { return ({
            id: c.command,
            title: c.title,
            keybindings: [],
            menus: []
        }); });
        var byId = arrays.index(commands, function (c) { return c.id; });
        var menus = contributes && contributes.menus || {};
        Object.keys(menus).forEach(function (context) {
            menus[context].forEach(function (menu) {
                var command = byId[menu.command];
                if (!command) {
                    command = { id: menu.command, title: '', keybindings: [], menus: [context] };
                    byId[command.id] = command;
                    commands.push(command);
                }
                else {
                    command.menus.push(context);
                }
            });
        });
        var rawKeybindings = contributes && contributes.keybindings || [];
        rawKeybindings.forEach(function (rawKeybinding) {
            var keyLabel = _this.keybindingToLabel(rawKeybinding);
            if (!keyLabel) {
                return;
            }
            var command = byId[rawKeybinding.command];
            if (!command) {
                command = { id: rawKeybinding.command, title: '', keybindings: [keyLabel], menus: [] };
                byId[command.id] = command;
                commands.push(command);
            }
            else {
                command.keybindings.push(keyLabel);
            }
        });
        if (!commands.length) {
            return false;
        }
        var details = dom_1.$('details', { open: true, ontoggle: onDetailsToggle }, dom_1.$('summary', null, nls_1.localize('commands', "Commands ({0})", commands.length)), dom_1.$.apply(void 0, ['table', null,
            dom_1.$('tr', null, dom_1.$('th', null, nls_1.localize('command name', "Name")), dom_1.$('th', null, nls_1.localize('description', "Description")), dom_1.$('th', null, nls_1.localize('keyboard shortcuts', "Keyboard Shortcuts")), dom_1.$('th', null, nls_1.localize('menuContexts', "Menu Contexts")))].concat(commands.map(function (c) { return dom_1.$('tr', null, dom_1.$('td', null, dom_1.$('code', null, c.id)), dom_1.$('td', null, c.title), dom_1.$.apply(void 0, ['td', null].concat(dom_1.join(c.keybindings.map(function (keybinding) { return dom_1.$('code', null, keybinding); }), ' '))), dom_1.$.apply(void 0, ['td', null].concat(c.menus.map(function (context) { return dom_1.$('code', null, context); })))); }))));
        dom_1.append(container, details);
        return true;
    };
    ExtensionEditor.renderLanguages = function (container, manifest, onDetailsToggle) {
        var contributes = manifest.contributes;
        var rawLanguages = contributes && contributes.languages || [];
        var languages = rawLanguages.map(function (l) { return ({
            id: l.id,
            name: (l.aliases || [])[0] || l.id,
            extensions: l.extensions || [],
            hasGrammar: false,
            hasSnippets: false
        }); });
        var byId = arrays.index(languages, function (l) { return l.id; });
        var grammars = contributes && contributes.grammars || [];
        grammars.forEach(function (grammar) {
            var language = byId[grammar.language];
            if (!language) {
                language = { id: grammar.language, name: grammar.language, extensions: [], hasGrammar: true, hasSnippets: false };
                byId[language.id] = language;
                languages.push(language);
            }
            else {
                language.hasGrammar = true;
            }
        });
        var snippets = contributes && contributes.snippets || [];
        snippets.forEach(function (snippet) {
            var language = byId[snippet.language];
            if (!language) {
                language = { id: snippet.language, name: snippet.language, extensions: [], hasGrammar: false, hasSnippets: true };
                byId[language.id] = language;
                languages.push(language);
            }
            else {
                language.hasSnippets = true;
            }
        });
        if (!languages.length) {
            return false;
        }
        var details = dom_1.$('details', { open: true, ontoggle: onDetailsToggle }, dom_1.$('summary', null, nls_1.localize('languages', "Languages ({0})", languages.length)), dom_1.$.apply(void 0, ['table', null,
            dom_1.$('tr', null, dom_1.$('th', null, nls_1.localize('language id', "ID")), dom_1.$('th', null, nls_1.localize('language name', "Name")), dom_1.$('th', null, nls_1.localize('file extensions', "File Extensions")), dom_1.$('th', null, nls_1.localize('grammar', "Grammar")), dom_1.$('th', null, nls_1.localize('snippets', "Snippets")))].concat(languages.map(function (l) { return dom_1.$('tr', null, dom_1.$('td', null, l.id), dom_1.$('td', null, l.name), dom_1.$.apply(void 0, ['td', null].concat(dom_1.join(l.extensions.map(function (ext) { return dom_1.$('code', null, ext); }), ' '))), dom_1.$('td', null, document.createTextNode(l.hasGrammar ? '✔︎' : '—')), dom_1.$('td', null, document.createTextNode(l.hasSnippets ? '✔︎' : '—'))); }))));
        dom_1.append(container, details);
        return true;
    };
    ExtensionEditor.prototype.keybindingToLabel = function (rawKeyBinding) {
        var key;
        switch (process.platform) {
            case 'win32':
                key = rawKeyBinding.win;
                break;
            case 'linux':
                key = rawKeyBinding.linux;
                break;
            case 'darwin':
                key = rawKeyBinding.mac;
                break;
        }
        var keyBinding = new keybinding_1.Keybinding(keybinding_1.Keybinding.fromUserSettingsLabel(key || rawKeyBinding.key));
        var result = this.keybindingService.getLabelFor(keyBinding);
        return result === 'unknown' ? null : result;
    };
    ExtensionEditor.prototype.loadContents = function (loadingTask) {
        var _this = this;
        dom_1.addClass(this.content, 'loading');
        var promise = loadingTask();
        promise = async_1.always(promise, function () { return dom_1.removeClass(_this.content, 'loading'); });
        this.contentDisposables.push(lifecycle_1.toDisposable(function () { return promise.cancel(); }));
    };
    ExtensionEditor.prototype.layout = function () {
        this.layoutParticipants.forEach(function (p) { return p.layout(); });
    };
    ExtensionEditor.prototype.onError = function (err) {
        if (errors_1.isPromiseCanceledError(err)) {
            return;
        }
        this.messageService.show(severity_1.default.Error, err);
    };
    ExtensionEditor.prototype.dispose = function () {
        this._highlight = null;
        this.transientDisposables = lifecycle_1.dispose(this.transientDisposables);
        this.disposables = lifecycle_1.dispose(this.disposables);
        _super.prototype.dispose.call(this);
    };
    return ExtensionEditor;
}(baseEditor_1.BaseEditor));
ExtensionEditor.ID = 'workbench.editor.extension';
ExtensionEditor = __decorate([
    __param(0, telemetry_1.ITelemetryService),
    __param(1, extensionManagement_1.IExtensionGalleryService),
    __param(2, configuration_1.IConfigurationService),
    __param(3, instantiation_1.IInstantiationService),
    __param(4, viewlet_1.IViewletService),
    __param(5, extensions_1.IExtensionsWorkbenchService),
    __param(6, themeService_1.IThemeService),
    __param(7, keybinding_2.IKeybindingService),
    __param(8, message_1.IMessageService),
    __param(9, opener_1.IOpenerService)
], ExtensionEditor);
exports.ExtensionEditor = ExtensionEditor;
