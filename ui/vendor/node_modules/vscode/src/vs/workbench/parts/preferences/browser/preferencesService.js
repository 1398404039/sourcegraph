/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
require("./media/preferences.css");
var network = require("vs/base/common/network");
var winjs_base_1 = require("vs/base/common/winjs.base");
var nls = require("vs/nls");
var uri_1 = require("vs/base/common/uri");
var map_1 = require("vs/base/common/map");
var labels = require("vs/base/common/labels");
var strings = require("vs/base/common/strings");
var lifecycle_1 = require("vs/base/common/lifecycle");
var editor_1 = require("vs/workbench/common/editor");
var editorService_1 = require("vs/workbench/services/editor/common/editorService");
var workspace_1 = require("vs/platform/workspace/common/workspace");
var configuration_1 = require("vs/workbench/services/configuration/common/configuration");
var editor_2 = require("vs/platform/editor/common/editor");
var groupService_1 = require("vs/workbench/services/group/common/groupService");
var storage_1 = require("vs/platform/storage/common/storage");
var files_1 = require("vs/platform/files/common/files");
var message_1 = require("vs/platform/message/common/message");
var extensions_1 = require("vs/platform/extensions/common/extensions");
var instantiation_1 = require("vs/platform/instantiation/common/instantiation");
var environment_1 = require("vs/platform/environment/common/environment");
var configurationEditing_1 = require("vs/workbench/services/configuration/common/configurationEditing");
var preferencesModels_1 = require("vs/workbench/parts/preferences/common/preferencesModels");
var telemetry_1 = require("vs/platform/telemetry/common/telemetry");
var preferencesEditor_1 = require("vs/workbench/parts/preferences/browser/preferencesEditor");
var resolverService_1 = require("vs/editor/common/services/resolverService");
var codeEditorService_1 = require("vs/editor/common/services/codeEditorService");
var editOperation_1 = require("vs/editor/common/core/editOperation");
var position_1 = require("vs/editor/common/core/position");
var PreferencesService = (function (_super) {
    __extends(PreferencesService, _super);
    function PreferencesService(editorService, editorGroupService, fileService, configurationService, messageService, choiceService, contextService, instantiationService, storageService, environmentService, telemetryService, textModelResolverService, configurationEditingService, extensionService) {
        var _this = _super.call(this) || this;
        _this.editorService = editorService;
        _this.editorGroupService = editorGroupService;
        _this.fileService = fileService;
        _this.configurationService = configurationService;
        _this.messageService = messageService;
        _this.choiceService = choiceService;
        _this.contextService = contextService;
        _this.instantiationService = instantiationService;
        _this.storageService = storageService;
        _this.environmentService = environmentService;
        _this.telemetryService = telemetryService;
        _this.textModelResolverService = textModelResolverService;
        _this.configurationEditingService = configurationEditingService;
        _this.extensionService = extensionService;
        _this.lastOpenedSettingsInput = null;
        _this.defaultSettingsResource = uri_1.default.from({ scheme: network.Schemas.vscode, authority: 'defaultsettings', path: '/settings.json' });
        _this.defaultKeybindingsResource = uri_1.default.from({ scheme: network.Schemas.vscode, authority: 'defaultsettings', path: '/keybindings.json' });
        _this.defaultPreferencesEditorModels = new map_1.LinkedMap();
        _this.editorGroupService.onEditorsChanged(function () {
            var activeEditorInput = _this.editorService.getActiveEditorInput();
            if (activeEditorInput instanceof preferencesEditor_1.PreferencesEditorInput) {
                _this.lastOpenedSettingsInput = activeEditorInput;
            }
        });
        return _this;
    }
    Object.defineProperty(PreferencesService.prototype, "userSettingsResource", {
        get: function () {
            return this.getEditableSettingsURI(configurationEditing_1.ConfigurationTarget.USER);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PreferencesService.prototype, "workspaceSettingsResource", {
        get: function () {
            return this.getEditableSettingsURI(configurationEditing_1.ConfigurationTarget.WORKSPACE);
        },
        enumerable: true,
        configurable: true
    });
    PreferencesService.prototype.createPreferencesEditorModel = function (uri) {
        var _this = this;
        var promise = this.defaultPreferencesEditorModels.get(uri);
        if (promise) {
            return promise;
        }
        if (this.defaultSettingsResource.fsPath === uri.fsPath) {
            promise = winjs_base_1.TPromise.join([this.extensionService.onReady(), this.fetchMostCommonlyUsedSettings()])
                .then(function (result) {
                var mostCommonSettings = result[1];
                var model = _this.instantiationService.createInstance(preferencesModels_1.DefaultSettingsEditorModel, uri, mostCommonSettings);
                return model;
            });
            this.defaultPreferencesEditorModels.set(uri, promise);
            return promise;
        }
        if (this.defaultKeybindingsResource.fsPath === uri.fsPath) {
            var model = this.instantiationService.createInstance(preferencesModels_1.DefaultKeybindingsEditorModel, uri);
            promise = winjs_base_1.TPromise.wrap(model);
            this.defaultPreferencesEditorModels.set(uri, promise);
            return promise;
        }
        if (this.getEditableSettingsURI(configurationEditing_1.ConfigurationTarget.USER).fsPath === uri.fsPath) {
            return this.createEditableSettingsEditorModel(configurationEditing_1.ConfigurationTarget.USER);
        }
        var workspaceSettingsUri = this.getEditableSettingsURI(configurationEditing_1.ConfigurationTarget.WORKSPACE);
        if (workspaceSettingsUri && workspaceSettingsUri.fsPath === uri.fsPath) {
            return this.createEditableSettingsEditorModel(configurationEditing_1.ConfigurationTarget.WORKSPACE);
        }
        return winjs_base_1.TPromise.wrap(null);
    };
    PreferencesService.prototype.openSettings = function () {
        return this.doOpenSettings(configurationEditing_1.ConfigurationTarget.USER, false);
    };
    PreferencesService.prototype.openGlobalSettings = function () {
        return this.doOpenSettings(configurationEditing_1.ConfigurationTarget.USER);
    };
    PreferencesService.prototype.openWorkspaceSettings = function () {
        if (!this.contextService.hasWorkspace()) {
            this.messageService.show(message_1.Severity.Info, nls.localize('openFolderFirst', "Open a folder first to create workspace settings"));
            return winjs_base_1.TPromise.as(null);
        }
        return this.doOpenSettings(configurationEditing_1.ConfigurationTarget.WORKSPACE);
    };
    PreferencesService.prototype.switchSettings = function () {
        var _this = this;
        var activeEditor = this.editorService.getActiveEditor();
        var activeEditorInput = activeEditor.input;
        if (activeEditorInput instanceof preferencesEditor_1.PreferencesEditorInput) {
            var fromTarget = this.getSettingsConfigurationTarget(activeEditorInput);
            var toTarget = configurationEditing_1.ConfigurationTarget.USER === fromTarget ? configurationEditing_1.ConfigurationTarget.WORKSPACE : configurationEditing_1.ConfigurationTarget.USER;
            return this.getOrCreateEditableSettingsEditorInput(toTarget)
                .then(function (toInput) {
                var replaceWith = new preferencesEditor_1.PreferencesEditorInput(toInput.getName(), toInput.getDescription(), _this.instantiationService.createInstance(preferencesEditor_1.DefaultPreferencesEditorInput, _this.defaultSettingsResource), toInput);
                return _this.editorService.replaceEditors([{
                        toReplace: _this.lastOpenedSettingsInput,
                        replaceWith: replaceWith
                    }], activeEditor.position).then(function () {
                    _this.lastOpenedSettingsInput = replaceWith;
                });
            });
        }
        else {
            this.openSettings();
            return undefined;
        }
    };
    PreferencesService.prototype.openGlobalKeybindingSettings = function () {
        var _this = this;
        var emptyContents = '// ' + nls.localize('emptyKeybindingsHeader', "Place your key bindings in this file to overwrite the defaults") + '\n[\n]';
        var editableKeybindings = uri_1.default.file(this.environmentService.appKeybindingsPath);
        // Create as needed and open in editor
        return this.createIfNotExists(editableKeybindings, emptyContents).then(function () {
            return _this.editorService.openEditors([
                { input: { resource: _this.defaultKeybindingsResource, options: { pinned: true }, label: nls.localize('defaultKeybindings', "Default Keybindings"), description: '' }, position: editor_2.Position.ONE },
                { input: { resource: editableKeybindings, options: { pinned: true } }, position: editor_2.Position.TWO },
            ]).then(function () {
                _this.editorGroupService.focusGroup(editor_2.Position.TWO);
            });
        });
    };
    PreferencesService.prototype.configureSettingsForLanguage = function (language) {
        var _this = this;
        this.openGlobalSettings()
            .then(function (editor) {
            var codeEditor = codeEditorService_1.getCodeEditor(editor);
            _this.getPosition(language, codeEditor)
                .then(function (position) {
                codeEditor.setPosition(position);
                codeEditor.focus();
            });
        });
    };
    PreferencesService.prototype.doOpenSettings = function (configurationTarget, checkToOpenDefaultSettings) {
        var _this = this;
        if (checkToOpenDefaultSettings === void 0) { checkToOpenDefaultSettings = true; }
        var openDefaultSettings = !checkToOpenDefaultSettings || !!this.configurationService.getConfiguration().workbench.settings.openDefaultSettings;
        return this.getOrCreateEditableSettingsEditorInput(configurationTarget)
            .then(function (editableSettingsEditorInput) {
            if (openDefaultSettings) {
                var defaultPreferencesEditorInput = _this.instantiationService.createInstance(preferencesEditor_1.DefaultPreferencesEditorInput, _this.defaultSettingsResource);
                var preferencesEditorInput = new preferencesEditor_1.PreferencesEditorInput(editableSettingsEditorInput.getName(), editableSettingsEditorInput.getDescription(), defaultPreferencesEditorInput, editableSettingsEditorInput);
                _this.lastOpenedSettingsInput = preferencesEditorInput;
                return _this.editorService.openEditor(preferencesEditorInput, { pinned: true });
            }
            return _this.editorService.openEditor(editableSettingsEditorInput, { pinned: true });
        });
    };
    PreferencesService.prototype.getOrCreateEditableSettingsEditorInput = function (configurationTarget) {
        var _this = this;
        var resource = this.getEditableSettingsURI(configurationTarget);
        var editableSettingsEmptyContent = this.getEmptyEditableSettingsContent(configurationTarget);
        return this.createIfNotExists(resource, editableSettingsEmptyContent)
            .then(function () { return _this.editorService.createInput({ resource: resource }); });
    };
    PreferencesService.prototype.createEditableSettingsEditorModel = function (configurationTarget) {
        var _this = this;
        var settingsUri = this.getEditableSettingsURI(configurationTarget);
        if (settingsUri) {
            return this.textModelResolverService.createModelReference(settingsUri)
                .then(function (reference) { return _this.instantiationService.createInstance(preferencesModels_1.SettingsEditorModel, reference, configurationTarget); });
        }
        return winjs_base_1.TPromise.wrap(null);
    };
    PreferencesService.prototype.getEmptyEditableSettingsContent = function (configurationTarget) {
        switch (configurationTarget) {
            case configurationEditing_1.ConfigurationTarget.USER:
                var emptySettingsHeader = nls.localize('emptySettingsHeader', "Place your settings in this file to overwrite the default settings");
                return '// ' + emptySettingsHeader + '\n{\n}';
            case configurationEditing_1.ConfigurationTarget.WORKSPACE:
                return [
                    '// ' + nls.localize('emptySettingsHeader1', "Place your settings in this file to overwrite default and user settings."),
                    '{',
                    '}'
                ].join('\n');
        }
    };
    PreferencesService.prototype.getEditableSettingsURI = function (configurationTarget) {
        switch (configurationTarget) {
            case configurationEditing_1.ConfigurationTarget.USER:
                return uri_1.default.file(this.environmentService.appSettingsPath);
            case configurationEditing_1.ConfigurationTarget.WORKSPACE:
                if (this.contextService.hasWorkspace()) {
                    return this.contextService.toResource('.vscode/settings.json');
                }
        }
        return null;
    };
    PreferencesService.prototype.createIfNotExists = function (resource, contents) {
        var _this = this;
        return this.fileService.resolveContent(resource, { acceptTextOnly: true }).then(null, function (error) {
            if (error.fileOperationResult === files_1.FileOperationResult.FILE_NOT_FOUND) {
                return _this.fileService.updateContent(resource, contents).then(null, function (error) {
                    return winjs_base_1.TPromise.wrapError(new Error(nls.localize('fail.createSettings', "Unable to create '{0}' ({1}).", labels.getPathLabel(resource, _this.contextService), error)));
                });
            }
            return winjs_base_1.TPromise.wrapError(error);
        });
    };
    PreferencesService.prototype.getSettingsConfigurationTarget = function (preferencesEditorInput) {
        if (preferencesEditorInput) {
            var resource = editor_1.toResource(preferencesEditorInput.master);
            return resource.toString() === this.userSettingsResource.toString() ? configurationEditing_1.ConfigurationTarget.USER : configurationEditing_1.ConfigurationTarget.WORKSPACE;
        }
        return configurationEditing_1.ConfigurationTarget.USER;
    };
    PreferencesService.prototype.fetchMostCommonlyUsedSettings = function () {
        return winjs_base_1.TPromise.wrap([
            'editor.fontSize',
            'files.autoSave',
            'editor.fontFamily',
            'editor.tabSize',
            'editor.renderWhitespace',
            'files.exclude',
            'editor.cursorStyle',
            'editor.insertSpaces',
            'editor.wordWrap',
            'files.associations'
        ]);
    };
    PreferencesService.prototype.getPosition = function (language, codeEditor) {
        var _this = this;
        return this.createPreferencesEditorModel(this.userSettingsResource)
            .then(function (settingsModel) {
            var languageKey = "[" + language + "]";
            var setting = settingsModel.getPreference(languageKey);
            var model = codeEditor.getModel();
            var configuration = _this.configurationService.getConfiguration('editor');
            var eol = _this.configurationService.getConfiguration('files').eol;
            if (setting) {
                if (setting.overrides.length) {
                    var lastSetting = setting.overrides[setting.overrides.length - 1];
                    var content = void 0;
                    if (lastSetting.valueRange.endLineNumber === setting.range.endLineNumber) {
                        content = ',' + eol + _this.spaces(2, configuration) + eol + _this.spaces(1, configuration);
                    }
                    else {
                        content = ',' + eol + _this.spaces(2, configuration);
                    }
                    var editOperation = editOperation_1.EditOperation.insert(new position_1.Position(lastSetting.valueRange.endLineNumber, lastSetting.valueRange.endColumn), content);
                    model.pushEditOperations([], [editOperation], function () { return []; });
                    return { lineNumber: lastSetting.valueRange.endLineNumber + 1, column: model.getLineMaxColumn(lastSetting.valueRange.endLineNumber + 1) };
                }
                return { lineNumber: setting.valueRange.startLineNumber, column: setting.valueRange.startColumn + 1 };
            }
            return _this.configurationEditingService.writeConfiguration(configurationEditing_1.ConfigurationTarget.USER, { key: languageKey, value: {} }, false)
                .then(function () {
                setting = settingsModel.getPreference(languageKey);
                var content = eol + _this.spaces(2, configuration) + eol + _this.spaces(1, configuration);
                var editOperation = editOperation_1.EditOperation.insert(new position_1.Position(setting.valueRange.endLineNumber, setting.valueRange.endColumn - 1), content);
                model.pushEditOperations([], [editOperation], function () { return []; });
                var lineNumber = setting.valueRange.endLineNumber + 1;
                settingsModel.dispose();
                return { lineNumber: lineNumber, column: model.getLineMaxColumn(lineNumber) };
            });
        });
    };
    PreferencesService.prototype.spaces = function (count, _a) {
        var tabSize = _a.tabSize, insertSpaces = _a.insertSpaces;
        return insertSpaces ? strings.repeat(' ', tabSize * count) : strings.repeat('\t', count);
    };
    PreferencesService.prototype.dispose = function () {
        this.defaultPreferencesEditorModels.clear();
        _super.prototype.dispose.call(this);
    };
    return PreferencesService;
}(lifecycle_1.Disposable));
PreferencesService = __decorate([
    __param(0, editorService_1.IWorkbenchEditorService),
    __param(1, groupService_1.IEditorGroupService),
    __param(2, files_1.IFileService),
    __param(3, configuration_1.IWorkspaceConfigurationService),
    __param(4, message_1.IMessageService),
    __param(5, message_1.IChoiceService),
    __param(6, workspace_1.IWorkspaceContextService),
    __param(7, instantiation_1.IInstantiationService),
    __param(8, storage_1.IStorageService),
    __param(9, environment_1.IEnvironmentService),
    __param(10, telemetry_1.ITelemetryService),
    __param(11, resolverService_1.ITextModelResolverService),
    __param(12, configurationEditing_1.IConfigurationEditingService),
    __param(13, extensions_1.IExtensionService)
], PreferencesService);
exports.PreferencesService = PreferencesService;
