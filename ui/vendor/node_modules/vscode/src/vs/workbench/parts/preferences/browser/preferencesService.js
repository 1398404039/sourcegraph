"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
require("./media/preferences.css");
var network = require("vs/base/common/network");
var winjs_base_1 = require("vs/base/common/winjs.base");
var nls = require("vs/nls");
var uri_1 = require("vs/base/common/uri");
var map_1 = require("vs/base/common/map");
var labels = require("vs/base/common/labels");
var lifecycle_1 = require("vs/base/common/lifecycle");
var json_1 = require("vs/base/common/json");
var editor_1 = require("vs/workbench/common/editor");
var stringEditorInput_1 = require("vs/workbench/common/editor/stringEditorInput");
var editorService_1 = require("vs/workbench/services/editor/common/editorService");
var workspace_1 = require("vs/platform/workspace/common/workspace");
var configuration_1 = require("vs/workbench/services/configuration/common/configuration");
var editor_2 = require("vs/platform/editor/common/editor");
var groupService_1 = require("vs/workbench/services/group/common/groupService");
var storage_1 = require("vs/platform/storage/common/storage");
var files_1 = require("vs/platform/files/common/files");
var message_1 = require("vs/platform/message/common/message");
var extensions_1 = require("vs/platform/extensions/common/extensions");
var instantiation_1 = require("vs/platform/instantiation/common/instantiation");
var environment_1 = require("vs/platform/environment/common/environment");
var configurationEditing_1 = require("vs/workbench/services/configuration/common/configurationEditing");
var preferencesModels_1 = require("vs/workbench/parts/preferences/common/preferencesModels");
var telemetry_1 = require("vs/platform/telemetry/common/telemetry");
var preferencesEditor_1 = require("vs/workbench/parts/preferences/browser/preferencesEditor");
var resolverService_1 = require("vs/editor/common/services/resolverService");
var SETTINGS_INFO_IGNORE_KEY = 'settings.workspace.info.ignore';
var PreferencesService = (function (_super) {
    __extends(PreferencesService, _super);
    function PreferencesService(editorService, editorGroupService, fileService, configurationService, messageService, choiceService, contextService, instantiationService, storageService, environmentService, telemetryService, textModelResolverService, configurationEditingService, extensionService) {
        var _this = _super.call(this) || this;
        _this.editorService = editorService;
        _this.editorGroupService = editorGroupService;
        _this.fileService = fileService;
        _this.configurationService = configurationService;
        _this.messageService = messageService;
        _this.choiceService = choiceService;
        _this.contextService = contextService;
        _this.instantiationService = instantiationService;
        _this.storageService = storageService;
        _this.environmentService = environmentService;
        _this.telemetryService = telemetryService;
        _this.textModelResolverService = textModelResolverService;
        _this.configurationEditingService = configurationEditingService;
        _this.extensionService = extensionService;
        _this.defaultPreferencesEditorModels = new map_1.LinkedMap();
        return _this;
    }
    PreferencesService.prototype.createDefaultPreferencesEditorModel = function (uri) {
        var _this = this;
        var editorModel = this.defaultPreferencesEditorModels.get(uri);
        if (editorModel) {
            return winjs_base_1.TPromise.as(editorModel);
        }
        if (PreferencesService.DEFAULT_SETTINGS_URI.fsPath === uri.fsPath) {
            return winjs_base_1.TPromise.join([this.extensionService.onReady(), this.fetchMostCommonlyUsedSettings()])
                .then(function (result) {
                var mostCommonSettings = result[1];
                var model = _this.instantiationService.createInstance(preferencesModels_1.DefaultSettingsEditorModel, uri, mostCommonSettings);
                _this.defaultPreferencesEditorModels.set(uri, model);
                return model;
            });
        }
        if (PreferencesService.DEFAULT_KEY_BINDINGS_URI.fsPath === uri.fsPath) {
            var model = this.instantiationService.createInstance(preferencesModels_1.DefaultKeybindingsEditorModel, uri);
            this.defaultPreferencesEditorModels.set(uri, model);
            return winjs_base_1.TPromise.wrap(model);
        }
        return null;
    };
    PreferencesService.prototype.resolvePreferencesEditorModel = function (uri) {
        var model = this.defaultPreferencesEditorModels.get(uri);
        if (model) {
            return winjs_base_1.TPromise.wrap(model);
        }
        if (this.getEditableSettingsURI(configurationEditing_1.ConfigurationTarget.USER).fsPath === uri.fsPath) {
            return this.resolveSettingsEditorModel(configurationEditing_1.ConfigurationTarget.USER);
        }
        var workspaceSettingsUri = this.getEditableSettingsURI(configurationEditing_1.ConfigurationTarget.WORKSPACE);
        if (workspaceSettingsUri && workspaceSettingsUri.fsPath === uri.fsPath) {
            return this.resolveSettingsEditorModel(configurationEditing_1.ConfigurationTarget.WORKSPACE);
        }
        return winjs_base_1.TPromise.wrap(null);
    };
    PreferencesService.prototype.openGlobalSettings = function () {
        if (this.configurationService.hasWorkspaceConfiguration() && !this.storageService.getBoolean(SETTINGS_INFO_IGNORE_KEY, storage_1.StorageScope.WORKSPACE)) {
            this.promptToOpenWorkspaceSettings();
        }
        // Open settings
        return this.openSettings(configurationEditing_1.ConfigurationTarget.USER);
    };
    PreferencesService.prototype.openWorkspaceSettings = function () {
        if (!this.contextService.getWorkspace()) {
            this.messageService.show(message_1.Severity.Info, nls.localize('openFolderFirst', "Open a folder first to create workspace settings"));
            return;
        }
        return this.openSettings(configurationEditing_1.ConfigurationTarget.WORKSPACE);
    };
    PreferencesService.prototype.openGlobalKeybindingSettings = function () {
        var _this = this;
        var emptyContents = '// ' + nls.localize('emptyKeybindingsHeader', "Place your key bindings in this file to overwrite the defaults") + '\n[\n]';
        return this.createDefaultPreferencesEditorModel(PreferencesService.DEFAULT_KEY_BINDINGS_URI)
            .then(function (editorModel) {
            var defaultKeybindingsInput = _this.instantiationService.createInstance(stringEditorInput_1.StringEditorInput, nls.localize('keybindingsEditorName', "Default Keyboard Shortcuts"), '', editorModel.content, 'json', true);
            _this.openTwoEditors(defaultKeybindingsInput, uri_1.default.file(_this.environmentService.appKeybindingsPath), emptyContents);
        });
    };
    PreferencesService.prototype.openEditableSettings = function (configurationTarget) {
        var _this = this;
        var emptySettingsContents = this.getEmptyEditableSettingsContent(configurationTarget);
        var settingsResource = this.getEditableSettingsURI(configurationTarget);
        return this.createIfNotExists(settingsResource, emptySettingsContents).then(function () { return _this.editorService.openEditor({
            resource: settingsResource,
            options: { pinned: true }
        }); });
    };
    PreferencesService.prototype.copyConfiguration = function (configurationValue) {
        var _this = this;
        var configurationTarget = this.getConfigurationTargetForCurrentActiveEditor();
        if (configurationTarget !== null) {
            this.telemetryService.publicLog('defaultSettingsActions.copySetting', { userConfigurationKeys: [configurationValue.key] });
            var editorControl_1 = this.editorService.getActiveEditor().getControl();
            this.configurationEditingService.writeConfiguration(configurationTarget, configurationValue, { writeToBuffer: true, autoSave: true })
                .then(function () {
                editorControl_1.focus();
                editorControl_1.setSelection(_this.getSelectionRange(configurationValue.key, editorControl_1.getModel()));
            }, function (error) { return _this.messageService.show(message_1.Severity.Error, error); });
        }
    };
    PreferencesService.prototype.resolveSettingsEditorModel = function (configurationTarget) {
        var _this = this;
        var settingsUri = this.getEditableSettingsURI(configurationTarget);
        if (settingsUri) {
            return this.textModelResolverService.createModelReference(settingsUri)
                .then(function (reference) { return _this.instantiationService.createInstance(preferencesModels_1.SettingsEditorModel, reference.object.textEditorModel, configurationTarget); });
        }
        return winjs_base_1.TPromise.wrap(null);
    };
    PreferencesService.prototype.getEmptyEditableSettingsContent = function (configurationTarget) {
        switch (configurationTarget) {
            case configurationEditing_1.ConfigurationTarget.USER:
                var emptySettingsHeader = nls.localize('emptySettingsHeader', "Place your settings in this file to overwrite the default settings");
                return '// ' + emptySettingsHeader + '\n{\n}';
            case configurationEditing_1.ConfigurationTarget.WORKSPACE:
                return [
                    '// ' + nls.localize('emptySettingsHeader1', "Place your settings in this file to overwrite default and user settings."),
                    '{',
                    '}'
                ].join('\n');
        }
    };
    PreferencesService.prototype.getEditableSettingsURI = function (configurationTarget) {
        switch (configurationTarget) {
            case configurationEditing_1.ConfigurationTarget.USER:
                return uri_1.default.file(this.environmentService.appSettingsPath);
            case configurationEditing_1.ConfigurationTarget.WORKSPACE:
                if (this.contextService.getWorkspace()) {
                    return this.contextService.toResource('.vscode/settings.json');
                }
        }
        return null;
    };
    PreferencesService.prototype.promptToOpenWorkspaceSettings = function () {
        var _this = this;
        this.choiceService.choose(message_1.Severity.Info, nls.localize('workspaceHasSettings', "The currently opened folder contains workspace settings that may override user settings"), [nls.localize('openWorkspaceSettings', "Open Workspace Settings"), nls.localize('neverShowAgain', "Don't show again"), nls.localize('close', "Close")]).then(function (choice) {
            switch (choice) {
                case 0:
                    var editorCount_1 = _this.editorService.getVisibleEditors().length;
                    return _this.editorService.createInput({ resource: _this.contextService.toResource(configuration_1.WORKSPACE_CONFIG_DEFAULT_PATH) }).then(function (typedInput) {
                        return _this.editorService.openEditor(typedInput, { pinned: true }, editorCount_1 === 2 ? editor_2.Position.THREE : editorCount_1 === 1 ? editor_2.Position.TWO : void 0);
                    });
                case 1:
                    _this.storageService.store(SETTINGS_INFO_IGNORE_KEY, true, storage_1.StorageScope.WORKSPACE);
                default:
                    return winjs_base_1.TPromise.as(true);
            }
        });
    };
    PreferencesService.prototype.openSettings = function (configurationTarget) {
        var openDefaultSettings = !!this.configurationService.getConfiguration().workbench.settings.openDefaultSettings;
        if (openDefaultSettings) {
            var emptySettingsContents = this.getEmptyEditableSettingsContent(configurationTarget);
            var settingsResource = this.getEditableSettingsURI(configurationTarget);
            return this.openTwoEditors(this.getDefaultSettingsEditorInput(configurationTarget), settingsResource, emptySettingsContents).then(function () { return null; });
        }
        return this.openEditableSettings(configurationTarget).then(function () { return null; });
    };
    PreferencesService.prototype.getDefaultSettingsEditorInput = function (configurationTarget) {
        switch (configurationTarget) {
            case configurationEditing_1.ConfigurationTarget.USER:
                if (!this.defaultSettingsEditorInputForUser) {
                    this.defaultSettingsEditorInputForUser = this._register(this.instantiationService.createInstance(preferencesEditor_1.DefaultPreferencesEditorInput, PreferencesService.DEFAULT_SETTINGS_URI));
                }
                return this.defaultSettingsEditorInputForUser;
            case configurationEditing_1.ConfigurationTarget.WORKSPACE:
                if (!this.defaultSettingsEditorInputForWorkspace) {
                    this.defaultSettingsEditorInputForWorkspace = this._register(this.instantiationService.createInstance(preferencesEditor_1.DefaultPreferencesEditorInput, PreferencesService.DEFAULT_SETTINGS_URI));
                }
                return this.defaultSettingsEditorInputForWorkspace;
        }
    };
    PreferencesService.prototype.openTwoEditors = function (leftHandDefaultInput, editableResource, defaultEditableContents) {
        var _this = this;
        // Create as needed and open in editor
        return this.createIfNotExists(editableResource, defaultEditableContents).then(function () {
            return _this.editorService.createInput({ resource: editableResource }).then(function (typedRightHandEditableInput) {
                var sideBySideInput = new editor_1.SideBySideEditorInput(typedRightHandEditableInput.getName(), typedRightHandEditableInput.getDescription(), leftHandDefaultInput, typedRightHandEditableInput);
                return _this.editorService.openEditor(sideBySideInput);
            });
        });
    };
    PreferencesService.prototype.createIfNotExists = function (resource, contents) {
        var _this = this;
        return this.fileService.resolveContent(resource, { acceptTextOnly: true }).then(null, function (error) {
            if (error.fileOperationResult === files_1.FileOperationResult.FILE_NOT_FOUND) {
                return _this.fileService.updateContent(resource, contents).then(null, function (error) {
                    return winjs_base_1.TPromise.wrapError(new Error(nls.localize('fail.createSettings', "Unable to create '{0}' ({1}).", labels.getPathLabel(resource, _this.contextService), error)));
                });
            }
            return winjs_base_1.TPromise.wrapError(error);
        });
    };
    PreferencesService.prototype.getConfigurationTargetForCurrentActiveEditor = function () {
        var activeEditor = this.editorService.getActiveEditor();
        if (activeEditor) {
            var editorInput = editor_1.asFileEditorInput(activeEditor.input, true);
            if (editorInput) {
                return this.getConfigurationTarget(editorInput.getResource());
            }
        }
        return null;
    };
    PreferencesService.prototype.getConfigurationTarget = function (resource) {
        if (this.getEditableSettingsURI(configurationEditing_1.ConfigurationTarget.USER).fsPath === resource.fsPath) {
            return configurationEditing_1.ConfigurationTarget.USER;
        }
        var workspaceSettingsUri = this.getEditableSettingsURI(configurationEditing_1.ConfigurationTarget.WORKSPACE);
        if (workspaceSettingsUri && workspaceSettingsUri.fsPath === resource.fsPath) {
            return configurationEditing_1.ConfigurationTarget.WORKSPACE;
        }
        return null;
    };
    PreferencesService.prototype.getSelectionRange = function (setting, model) {
        var tree = json_1.parseTree(model.getValue());
        var node = json_1.findNodeAtLocation(tree, [setting]);
        var position = model.getPositionAt(node.offset);
        return {
            startLineNumber: position.lineNumber,
            startColumn: position.column,
            endLineNumber: position.lineNumber,
            endColumn: position.column + node.length
        };
    };
    PreferencesService.prototype.fetchMostCommonlyUsedSettings = function () {
        return winjs_base_1.TPromise.wrap([
            'editor.fontSize',
            'files.autoSave',
            'editor.fontFamily',
            'editor.tabSize',
            'editor.renderWhitespace',
            'files.exclude',
            'editor.cursorStyle',
            'editor.insertSpaces',
            'editor.wrappingColumn',
            'files.associations'
        ]);
    };
    PreferencesService.prototype.dispose = function () {
        this.defaultPreferencesEditorModels.clear();
        _super.prototype.dispose.call(this);
    };
    return PreferencesService;
}(lifecycle_1.Disposable));
PreferencesService.DEFAULT_SETTINGS_URI = uri_1.default.from({ scheme: network.Schemas.vscode, authority: 'defaultsettings', path: '/settings.json' });
PreferencesService.DEFAULT_KEY_BINDINGS_URI = uri_1.default.from({ scheme: network.Schemas.vscode, authority: 'defaultsettings', path: '/keybindings.json' });
PreferencesService = __decorate([
    __param(0, editorService_1.IWorkbenchEditorService),
    __param(1, groupService_1.IEditorGroupService),
    __param(2, files_1.IFileService),
    __param(3, configuration_1.IWorkspaceConfigurationService),
    __param(4, message_1.IMessageService),
    __param(5, message_1.IChoiceService),
    __param(6, workspace_1.IWorkspaceContextService),
    __param(7, instantiation_1.IInstantiationService),
    __param(8, storage_1.IStorageService),
    __param(9, environment_1.IEnvironmentService),
    __param(10, telemetry_1.ITelemetryService),
    __param(11, resolverService_1.ITextModelResolverService),
    __param(12, configurationEditing_1.IConfigurationEditingService),
    __param(13, extensions_1.IExtensionService)
], PreferencesService);
exports.PreferencesService = PreferencesService;
