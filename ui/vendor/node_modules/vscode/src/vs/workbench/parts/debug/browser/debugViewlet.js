/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
require("./media/debugViewlet.css");
var winjs_base_1 = require("vs/base/common/winjs.base");
var lifecycle = require("vs/base/common/lifecycle");
var splitview_1 = require("vs/base/browser/ui/splitview/splitview");
var lifecycle_1 = require("vs/platform/lifecycle/common/lifecycle");
var memento_1 = require("vs/workbench/common/memento");
var viewlet_1 = require("vs/workbench/browser/viewlet");
var debug_1 = require("vs/workbench/parts/debug/common/debug");
var debugViewRegistry_1 = require("vs/workbench/parts/debug/browser/debugViewRegistry");
var debugActions_1 = require("vs/workbench/parts/debug/browser/debugActions");
var debugActionItems_1 = require("vs/workbench/parts/debug/browser/debugActionItems");
var instantiation_1 = require("vs/platform/instantiation/common/instantiation");
var progress_1 = require("vs/platform/progress/common/progress");
var workspace_1 = require("vs/platform/workspace/common/workspace");
var telemetry_1 = require("vs/platform/telemetry/common/telemetry");
var storage_1 = require("vs/platform/storage/common/storage");
var DEBUG_VIEWS_WEIGHTS = 'debug.viewsweights';
var DebugViewlet = (function (_super) {
    __extends(DebugViewlet, _super);
    function DebugViewlet(telemetryService, progressService, debugService, instantiationService, contextService, storageService, lifecycleService) {
        var _this = _super.call(this, debug_1.VIEWLET_ID, telemetryService) || this;
        _this.progressService = progressService;
        _this.debugService = debugService;
        _this.instantiationService = instantiationService;
        _this.contextService = contextService;
        _this.storageService = storageService;
        _this.progressRunner = null;
        _this.viewletSettings = _this.getMemento(storageService, memento_1.Scope.WORKSPACE);
        _this.toDispose = [];
        _this.views = [];
        _this.toDispose.push(_this.debugService.onDidChangeState(function () {
            _this.onDebugServiceStateChange();
        }));
        lifecycleService.onShutdown(_this.store, _this);
        return _this;
    }
    // viewlet
    DebugViewlet.prototype.create = function (parent) {
        var _this = this;
        _super.prototype.create.call(this, parent);
        this.$el = parent.div().addClass('debug-viewlet');
        var actionRunner = this.getActionRunner();
        var registeredViews = debugViewRegistry_1.DebugViewRegistry.getDebugViews();
        this.views = registeredViews.map(function (viewConstructor) { return _this.instantiationService.createInstance(viewConstructor.view, actionRunner, _this.viewletSettings); });
        this.splitView = new splitview_1.SplitView(this.$el.getHTMLElement());
        this.toDispose.push(this.splitView);
        var weights = JSON.parse(this.storageService.get(DEBUG_VIEWS_WEIGHTS, storage_1.StorageScope.WORKSPACE, '[]'));
        if (!weights.length) {
            weights = registeredViews.map(function (v) { return v.weight; });
        }
        for (var i = 0; i < this.views.length; i++) {
            this.splitView.addView(this.views[i], Math.max(weights[i], 1));
        }
        return winjs_base_1.TPromise.as(null);
    };
    DebugViewlet.prototype.setVisible = function (visible) {
        var _this = this;
        return _super.prototype.setVisible.call(this, visible).then(function () {
            return winjs_base_1.TPromise.join(_this.views.map(function (view) { return view.setVisible(visible); }));
        });
    };
    DebugViewlet.prototype.layout = function (dimension) {
        if (this.splitView) {
            this.splitView.layout(dimension.height);
        }
    };
    DebugViewlet.prototype.focus = function () {
        _super.prototype.focus.call(this);
        if (!this.contextService.getWorkspace()) {
            this.views[0].focusBody();
        }
        if (this.startDebugActionItem) {
            this.startDebugActionItem.focus();
        }
    };
    DebugViewlet.prototype.getActions = function () {
        var _this = this;
        if (!this.actions) {
            this.actions = [];
            this.actions.push(this.instantiationService.createInstance(debugActions_1.StartAction, debugActions_1.StartAction.ID, debugActions_1.StartAction.LABEL));
            if (this.contextService.getWorkspace()) {
                this.actions.push(this.instantiationService.createInstance(debugActions_1.ConfigureAction, debugActions_1.ConfigureAction.ID, debugActions_1.ConfigureAction.LABEL));
            }
            this.actions.push(this.instantiationService.createInstance(debugActions_1.ToggleReplAction, debugActions_1.ToggleReplAction.ID, debugActions_1.ToggleReplAction.LABEL));
            this.actions.forEach(function (a) {
                _this.toDispose.push(a);
            });
        }
        return this.actions;
    };
    DebugViewlet.prototype.getActionItem = function (action) {
        if (action.id === debugActions_1.StartAction.ID && this.contextService.getWorkspace()) {
            if (!this.startDebugActionItem) {
                this.startDebugActionItem = this.instantiationService.createInstance(debugActionItems_1.StartDebugActionItem, null, action);
            }
            return this.startDebugActionItem;
        }
        return null;
    };
    DebugViewlet.prototype.onDebugServiceStateChange = function () {
        if (this.progressRunner) {
            this.progressRunner.done();
        }
        if (this.debugService.state === debug_1.State.Initializing) {
            this.progressRunner = this.progressService.show(true);
        }
        else {
            this.progressRunner = null;
        }
    };
    DebugViewlet.prototype.store = function () {
        this.storageService.store(DEBUG_VIEWS_WEIGHTS, JSON.stringify(this.views.map(function (view) { return view.size; })), storage_1.StorageScope.WORKSPACE);
    };
    DebugViewlet.prototype.dispose = function () {
        this.toDispose = lifecycle.dispose(this.toDispose);
        _super.prototype.dispose.call(this);
    };
    DebugViewlet.prototype.shutdown = function () {
        this.views.forEach(function (v) { return v.shutdown(); });
        _super.prototype.shutdown.call(this);
    };
    return DebugViewlet;
}(viewlet_1.Viewlet));
DebugViewlet = __decorate([
    __param(0, telemetry_1.ITelemetryService),
    __param(1, progress_1.IProgressService),
    __param(2, debug_1.IDebugService),
    __param(3, instantiation_1.IInstantiationService),
    __param(4, workspace_1.IWorkspaceContextService),
    __param(5, storage_1.IStorageService),
    __param(6, lifecycle_1.ILifecycleService)
], DebugViewlet);
exports.DebugViewlet = DebugViewlet;
