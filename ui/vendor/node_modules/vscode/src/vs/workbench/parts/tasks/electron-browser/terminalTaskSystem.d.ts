import { TPromise } from 'vs/base/common/winjs.base';
import { EventEmitter } from 'vs/base/common/eventEmitter';
import { TerminateResponse } from 'vs/base/common/processes';
import { IMarkerService } from 'vs/platform/markers/common/markers';
import { IModelService } from 'vs/editor/common/services/modelService';
import { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';
import { IConfigurationResolverService } from 'vs/workbench/services/configurationResolver/common/configurationResolver';
import { ITerminalService } from 'vs/workbench/parts/terminal/common/terminal';
import { IOutputService } from 'vs/workbench/parts/output/common/output';
import { ITaskSystem, ITaskExecuteResult, TaskRunnerConfiguration, TaskDescription } from 'vs/workbench/parts/tasks/common/taskSystem';
export declare class TerminalTaskSystem extends EventEmitter implements ITaskSystem {
    private terminalService;
    private outputService;
    private markerService;
    private modelService;
    private configurationResolverService;
    private telemetryService;
    static TelemetryEventName: string;
    private configuration;
    private identifier2Task;
    private outputChannel;
    private activeTasks;
    private primaryTerminal;
    private terminals;
    private idleTaskTerminals;
    constructor(configuration: TaskRunnerConfiguration, terminalService: ITerminalService, outputService: IOutputService, markerService: IMarkerService, modelService: IModelService, configurationResolverService: IConfigurationResolverService, telemetryService: ITelemetryService, outputChannelId: string);
    setConfiguration(configuration: TaskRunnerConfiguration): void;
    log(value: string): void;
    protected showOutput(): void;
    build(): ITaskExecuteResult;
    rebuild(): ITaskExecuteResult;
    clean(): ITaskExecuteResult;
    runTest(): ITaskExecuteResult;
    run(taskIdentifier: string, trigger?: string): ITaskExecuteResult;
    isActive(): TPromise<boolean>;
    isActiveSync(): boolean;
    canAutoTerminate(): boolean;
    terminate(): TPromise<TerminateResponse>;
    tasks(): TPromise<TaskDescription[]>;
    private executeTask(startedTasks, task, trigger);
    private executeCommand(task, trigger);
    private createTerminal(task);
    private resolveCommandAndArgs(task);
    private findExecutable(command, cwd);
    private resolveVariables(value);
    private resolveMatchers<T>(values);
    private resolveVariable(value);
    private resolveOptions(options);
    private static doubleQuotes;
    protected ensureDoubleQuotes(value: string): {
        value: string;
        quoted: boolean;
    };
    private static WellKnowCommands;
    getSanitizedCommand(cmd: string): string;
}
