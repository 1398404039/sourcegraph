/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var errors = require("vs/base/common/errors");
var winjs_base_1 = require("vs/base/common/winjs.base");
var treedefaults = require("vs/base/parts/tree/browser/treeDefaults");
var markersModel_1 = require("vs/workbench/parts/markers/common/markersModel");
var editorService_1 = require("vs/workbench/services/editor/common/editorService");
var telemetry_1 = require("vs/platform/telemetry/common/telemetry");
var contextView_1 = require("vs/platform/contextview/browser/contextView");
var contextkey_1 = require("vs/platform/contextkey/common/contextkey");
var actions_1 = require("vs/platform/actions/common/actions");
var actionbar_1 = require("vs/base/browser/ui/actionbar/actionbar");
var keybinding_1 = require("vs/platform/keybinding/common/keybinding");
var Controller = (function (_super) {
    __extends(Controller, _super);
    function Controller(rangeHighlightDecorations, actionProvider, editorService, contextMenuService, menuService, contextKeyService, _keybindingService, telemetryService) {
        var _this = _super.call(this) || this;
        _this.rangeHighlightDecorations = rangeHighlightDecorations;
        _this.actionProvider = actionProvider;
        _this.editorService = editorService;
        _this.contextMenuService = contextMenuService;
        _this._keybindingService = _keybindingService;
        _this.telemetryService = telemetryService;
        _this.contextMenu = menuService.createMenu(actions_1.MenuId.ProblemsPanelContext, contextKeyService);
        return _this;
    }
    Controller.prototype.onLeftClick = function (tree, element, event) {
        var currentFoucssed = tree.getFocus();
        if (_super.prototype.onLeftClick.call(this, tree, element, event)) {
            if (this.openFileAtElement(element, event.detail !== 2, event.ctrlKey || event.metaKey, event.detail === 2)) {
                return true;
            }
            if (element instanceof markersModel_1.MarkersModel) {
                if (currentFoucssed) {
                    tree.setFocus(currentFoucssed);
                }
                else {
                    tree.focusFirst();
                }
                return true;
            }
        }
        return false;
    };
    Controller.prototype.onEnter = function (tree, event) {
        if (_super.prototype.onEnter.call(this, tree, event)) {
            return this.openFileAtElement(tree.getFocus(), false, event.ctrlKey || event.metaKey, true);
        }
        return false;
    };
    Controller.prototype.onSpace = function (tree, event) {
        var element = tree.getFocus();
        if (element instanceof markersModel_1.Marker) {
            tree.setSelection([element]);
            return this.openFileAtElement(tree.getFocus(), true, false, false);
        }
        else {
            this.rangeHighlightDecorations.removeHighlightRange();
        }
        return _super.prototype.onSpace.call(this, tree, event);
    };
    Controller.prototype.onContextMenu = function (tree, element, event) {
        var _this = this;
        tree.setFocus(element);
        var actions = this._getMenuActions();
        if (!actions.length) {
            return true;
        }
        var anchor = { x: event.posx + 1, y: event.posy };
        this.contextMenuService.showContextMenu({
            getAnchor: function () { return anchor; },
            getActions: function () {
                return winjs_base_1.TPromise.as(actions);
            },
            getActionItem: function (action) {
                var keybinding = _this._keybindingFor(action);
                if (keybinding) {
                    return new actionbar_1.ActionItem(action, action, { label: true, keybinding: _this._keybindingService.getLabelFor(keybinding) });
                }
                return null;
            },
            getKeyBinding: function (action) {
                return _this._keybindingFor(action);
            },
            onHide: function (wasCancelled) {
                if (wasCancelled) {
                    tree.DOMFocus();
                }
            }
        });
        return true;
    };
    Controller.prototype.openFileAtElement = function (element, preserveFocus, sideByside, pinned) {
        var _this = this;
        if (element instanceof markersModel_1.Marker) {
            var marker_1 = element;
            this.telemetryService.publicLog('problems.marker.opened', { source: marker_1.marker.source });
            this.editorService.openEditor({
                resource: marker_1.resource,
                options: {
                    selection: marker_1.range,
                    preserveFocus: preserveFocus,
                    pinned: pinned,
                    revealIfVisible: true
                },
            }, sideByside).done(function (editor) {
                if (preserveFocus) {
                    _this.rangeHighlightDecorations.highlightRange(marker_1, editor);
                }
                else {
                    _this.rangeHighlightDecorations.removeHighlightRange();
                }
            }, errors.onUnexpectedError);
            return true;
        }
        else {
            this.rangeHighlightDecorations.removeHighlightRange();
        }
        return false;
    };
    Controller.prototype._getMenuActions = function () {
        var result = [];
        var groups = this.contextMenu.getActions();
        for (var _i = 0, groups_1 = groups; _i < groups_1.length; _i++) {
            var group = groups_1[_i];
            var actions = group[1];
            result.push.apply(result, actions);
            result.push(new actionbar_1.Separator());
        }
        result.pop(); // remove last separator
        return result;
    };
    Controller.prototype._keybindingFor = function (action) {
        var opts = this._keybindingService.lookupKeybindings(action.id);
        if (opts.length > 0) {
            return opts[0]; // only take the first one
        }
        return null;
    };
    return Controller;
}(treedefaults.DefaultController));
Controller = __decorate([
    __param(2, editorService_1.IWorkbenchEditorService),
    __param(3, contextView_1.IContextMenuService),
    __param(4, actions_1.IMenuService),
    __param(5, contextkey_1.IContextKeyService),
    __param(6, keybinding_1.IKeybindingService),
    __param(7, telemetry_1.ITelemetryService)
], Controller);
exports.Controller = Controller;
