/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var strings = require("vs/base/common/strings");
var winjs_base_1 = require("vs/base/common/winjs.base");
var editor_1 = require("vs/workbench/common/editor");
var lifecycle_1 = require("vs/base/common/lifecycle");
var telemetryUtils_1 = require("vs/platform/telemetry/common/telemetryUtils");
var resolverService_1 = require("vs/editor/common/services/resolverService");
var marked_1 = require("vs/base/common/marked/marked");
var network_1 = require("vs/base/common/network");
var telemetry_1 = require("vs/platform/telemetry/common/telemetry");
var lifecycle_2 = require("vs/platform/lifecycle/common/lifecycle");
var WalkThroughModel = (function (_super) {
    __extends(WalkThroughModel, _super);
    function WalkThroughModel(mainRef, snippetRefs) {
        var _this = _super.call(this) || this;
        _this.mainRef = mainRef;
        _this.snippetRefs = snippetRefs;
        return _this;
    }
    Object.defineProperty(WalkThroughModel.prototype, "main", {
        get: function () {
            return this.mainRef.object;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WalkThroughModel.prototype, "snippets", {
        get: function () {
            return this.snippetRefs.map(function (snippet) { return snippet.object; });
        },
        enumerable: true,
        configurable: true
    });
    WalkThroughModel.prototype.dispose = function () {
        this.snippetRefs.forEach(function (ref) { return ref.dispose(); });
        this.mainRef.dispose();
        _super.prototype.dispose.call(this);
    };
    return WalkThroughModel;
}(editor_1.EditorModel));
exports.WalkThroughModel = WalkThroughModel;
var WalkThroughInput = (function (_super) {
    __extends(WalkThroughInput, _super);
    function WalkThroughInput(name, description, resource, telemetryFrom, onReady, telemetryService, lifecycleService, textModelResolverService) {
        var _this = _super.call(this) || this;
        _this.name = name;
        _this.description = description;
        _this.resource = resource;
        _this.telemetryFrom = telemetryFrom;
        _this.onReady = onReady;
        _this.telemetryService = telemetryService;
        _this.textModelResolverService = textModelResolverService;
        _this.disposables = [];
        _this.maxTopScroll = 0;
        _this.maxBottomScroll = 0;
        _this.disposables.push(lifecycleService.onShutdown(function (e) { return _this.disposeTelemetry(e); }));
        return _this;
    }
    WalkThroughInput.prototype.getResource = function () {
        return this.resource;
    };
    WalkThroughInput.prototype.getTypeId = function () {
        return WalkThroughInput.ID;
    };
    WalkThroughInput.prototype.getName = function () {
        return this.name;
    };
    WalkThroughInput.prototype.getDescription = function () {
        return this.description;
    };
    WalkThroughInput.prototype.getTelemetryFrom = function () {
        return this.telemetryFrom || 'walkThrough';
    };
    WalkThroughInput.prototype.getTelemetryDescriptor = function () {
        var descriptor = _super.prototype.getTelemetryDescriptor.call(this);
        descriptor['target'] = this.getTelemetryFrom();
        descriptor['resource'] = telemetryUtils_1.telemetryURIDescriptor(this.resource);
        return descriptor;
    };
    WalkThroughInput.prototype.resolve = function (refresh) {
        var _this = this;
        if (!this.promise) {
            this.resolveTelemetry();
            this.promise = this.textModelResolverService.createModelReference(this.resource)
                .then(function (ref) {
                if (strings.endsWith(_this.getResource().path, '.html')) {
                    return new WalkThroughModel(ref, []);
                }
                var snippets = [];
                var i = 0;
                var renderer = new marked_1.marked.Renderer();
                renderer.code = function (code, lang) {
                    var resource = _this.resource.with({ scheme: network_1.Schemas.walkThroughSnippet, fragment: i++ + "." + lang });
                    snippets.push(_this.textModelResolverService.createModelReference(resource));
                    return '';
                };
                var markdown = ref.object.textEditorModel.getLinesContent().join('\n');
                marked_1.marked(markdown, { renderer: renderer });
                return winjs_base_1.TPromise.join(snippets)
                    .then(function (refs) { return new WalkThroughModel(ref, refs); });
            });
        }
        return this.promise;
        // TODO: replicate above?
        // return this.promise.then(ref => {
        // 	const model = ref.object;
        // 	if (!(model instanceof ResourceEditorModel)) {
        // 		ref.dispose();
        // 		this.promise = null;
        // 		return TPromise.wrapError(`Unexpected model for ResourceInput: ${this.resource}`); // TODO@Ben eventually also files should be supported, but we guard due to the dangerous dispose of the model in dispose()
        // 	}
        // 	// TODO@Joao this should never happen
        // 	model.onDispose(() => this.dispose());
        // 	return model;
        // });
    };
    WalkThroughInput.prototype.matches = function (otherInput) {
        if (_super.prototype.matches.call(this, otherInput) === true) {
            return true;
        }
        if (otherInput instanceof WalkThroughInput) {
            var otherResourceEditorInput = otherInput;
            // Compare by properties
            return otherResourceEditorInput.resource.toString() === this.resource.toString();
        }
        return false;
    };
    WalkThroughInput.prototype.dispose = function () {
        this.disposables = lifecycle_1.dispose(this.disposables);
        if (this.promise) {
            this.promise.then(function (model) { return model.dispose(); });
            this.promise = null;
        }
        this.disposeTelemetry();
        _super.prototype.dispose.call(this);
    };
    WalkThroughInput.prototype.relativeScrollPosition = function (topScroll, bottomScroll) {
        this.maxTopScroll = Math.max(this.maxTopScroll, topScroll);
        this.maxBottomScroll = Math.max(this.maxBottomScroll, bottomScroll);
    };
    WalkThroughInput.prototype.resolveTelemetry = function () {
        if (!this.resolveTime) {
            this.resolveTime = Date.now();
            this.telemetryService.publicLog('resolvingInput', {
                target: this.getTelemetryFrom(),
            });
        }
    };
    WalkThroughInput.prototype.disposeTelemetry = function (reason) {
        if (this.resolveTime) {
            this.telemetryService.publicLog('disposingInput', {
                target: this.getTelemetryFrom(),
                timeSpent: (Date.now() - this.resolveTime) / 60,
                reason: reason ? lifecycle_2.ShutdownReason[reason] : 'DISPOSE',
                maxTopScroll: this.maxTopScroll,
                maxBottomScroll: this.maxBottomScroll,
            });
            this.resolveTime = null;
        }
    };
    return WalkThroughInput;
}(editor_1.EditorInput));
WalkThroughInput.ID = 'workbench.editors.walkThroughInput';
WalkThroughInput = __decorate([
    __param(5, telemetry_1.ITelemetryService),
    __param(6, lifecycle_2.ILifecycleService),
    __param(7, resolverService_1.ITextModelResolverService)
], WalkThroughInput);
exports.WalkThroughInput = WalkThroughInput;
