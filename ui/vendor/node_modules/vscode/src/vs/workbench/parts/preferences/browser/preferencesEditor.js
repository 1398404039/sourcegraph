/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var winjs_base_1 = require("vs/base/common/winjs.base");
var nls = require("vs/nls");
var DOM = require("vs/base/browser/dom");
var async_1 = require("vs/base/common/async");
var builder_1 = require("vs/base/browser/builder");
var lifecycle_1 = require("vs/base/common/lifecycle");
var platform_1 = require("vs/platform/platform");
var editor_1 = require("vs/workbench/common/editor");
var baseEditor_1 = require("vs/workbench/browser/parts/editor/baseEditor");
var resourceEditorInput_1 = require("vs/workbench/common/editor/resourceEditorInput");
var textEditor_1 = require("vs/workbench/browser/parts/editor/textEditor");
var codeEditor_1 = require("vs/editor/browser/codeEditor");
var instantiation_1 = require("vs/platform/instantiation/common/instantiation");
var preferences_1 = require("vs/workbench/parts/preferences/common/preferences");
var preferencesModels_1 = require("vs/workbench/parts/preferences/common/preferencesModels");
var editorBrowserExtensions_1 = require("vs/editor/browser/editorBrowserExtensions");
var preferencesWidgets_1 = require("vs/workbench/parts/preferences/browser/preferencesWidgets");
var contextkey_1 = require("vs/platform/contextkey/common/contextkey");
var editorCommonExtensions_1 = require("vs/editor/common/editorCommonExtensions");
var telemetry_1 = require("vs/platform/telemetry/common/telemetry");
var themeService_1 = require("vs/workbench/services/themes/common/themeService");
var modelService_1 = require("vs/editor/common/services/modelService");
var modeService_1 = require("vs/editor/common/services/modeService");
var storage_1 = require("vs/platform/storage/common/storage");
var configuration_1 = require("vs/platform/configuration/common/configuration");
var editorService_1 = require("vs/workbench/services/editor/common/editorService");
var untitledEditorService_1 = require("vs/workbench/services/untitled/common/untitledEditorService");
var resolverService_1 = require("vs/editor/common/services/resolverService");
var configurationEditing_1 = require("vs/workbench/services/configuration/common/configurationEditing");
var environment_1 = require("vs/platform/environment/common/environment");
var sash_1 = require("vs/base/browser/ui/sash/sash");
var widget_1 = require("vs/base/browser/ui/widget");
var preferencesRenderers_1 = require("vs/workbench/parts/preferences/browser/preferencesRenderers");
var textfiles_1 = require("vs/workbench/services/textfile/common/textfiles");
var groupService_1 = require("vs/workbench/services/group/common/groupService");
// Ignore following contributions
var folding_1 = require("vs/editor/contrib/folding/browser/folding");
var find_1 = require("vs/editor/contrib/find/browser/find");
var findController_1 = require("vs/editor/contrib/find/common/findController");
var PreferencesEditorInput = (function (_super) {
    __extends(PreferencesEditorInput, _super);
    function PreferencesEditorInput() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PreferencesEditorInput.prototype.getTypeId = function () {
        return PreferencesEditorInput.ID;
    };
    PreferencesEditorInput.prototype.getTitle = function (verbosity) {
        return this.master.getTitle(verbosity);
    };
    return PreferencesEditorInput;
}(editor_1.SideBySideEditorInput));
PreferencesEditorInput.ID = 'workbench.editorinputs.preferencesEditorInput';
exports.PreferencesEditorInput = PreferencesEditorInput;
var DefaultPreferencesEditorInput = (function (_super) {
    __extends(DefaultPreferencesEditorInput, _super);
    function DefaultPreferencesEditorInput(defaultSettingsResource, textModelResolverService) {
        return _super.call(this, nls.localize('settingsEditorName', "Default Settings"), '', defaultSettingsResource, textModelResolverService) || this;
    }
    DefaultPreferencesEditorInput.prototype.getTypeId = function () {
        return DefaultPreferencesEditorInput.ID;
    };
    DefaultPreferencesEditorInput.prototype.matches = function (other) {
        if (!_super.prototype.matches.call(this, other)) {
            return false;
        }
        if (!(other instanceof DefaultPreferencesEditorInput)) {
            return false;
        }
        return true;
    };
    return DefaultPreferencesEditorInput;
}(resourceEditorInput_1.ResourceEditorInput));
DefaultPreferencesEditorInput.ID = 'workbench.editorinputs.defaultpreferences';
DefaultPreferencesEditorInput = __decorate([
    __param(1, resolverService_1.ITextModelResolverService)
], DefaultPreferencesEditorInput);
exports.DefaultPreferencesEditorInput = DefaultPreferencesEditorInput;
var PreferencesEditor = (function (_super) {
    __extends(PreferencesEditor, _super);
    function PreferencesEditor(preferencesService, environmentService, telemetryService, editorService, contextKeyService, instantiationService) {
        var _this = _super.call(this, PreferencesEditor.ID, telemetryService) || this;
        _this.preferencesService = preferencesService;
        _this.environmentService = environmentService;
        _this.editorService = editorService;
        _this.contextKeyService = contextKeyService;
        _this.instantiationService = instantiationService;
        _this.latestEmptyFilters = [];
        _this.defaultSettingsEditorContextKey = preferences_1.CONTEXT_SETTINGS_EDITOR.bindTo(_this.contextKeyService);
        _this.delayedFilterLogging = new async_1.Delayer(1000);
        return _this;
    }
    PreferencesEditor.prototype.createEditor = function (parent) {
        var _this = this;
        var parentElement = parent.getHTMLElement();
        DOM.addClass(parentElement, 'preferences-editor');
        this.headerContainer = DOM.append(parentElement, DOM.$('.preferences-header'));
        this.searchWidget = this._register(this.instantiationService.createInstance(preferencesWidgets_1.SearchWidget, this.headerContainer));
        this._register(this.searchWidget.onDidChange(function (value) { return _this.filterPreferences(value.trim()); }));
        this._register(this.searchWidget.onEnter(function (value) { return _this.preferencesRenderers.focusNextPreference(); }));
        this.settingsTabsWidget = this._register(this.instantiationService.createInstance(preferencesWidgets_1.SettingsTabsWidget, this.headerContainer));
        this._register(this.settingsTabsWidget.onSwitch(function () { return _this.switchSettings(); }));
        var editorsContainer = DOM.append(parentElement, DOM.$('.preferences-editors-container'));
        this.sideBySidePreferencesWidget = this._register(this.instantiationService.createInstance(SideBySidePreferencesWidget, editorsContainer));
        this.preferencesRenderers = this._register(new PreferencesRenderers());
    };
    PreferencesEditor.prototype.setInput = function (newInput, options) {
        var _this = this;
        this.defaultSettingsEditorContextKey.set(true);
        var oldInput = this.input;
        return _super.prototype.setInput.call(this, newInput, options).then(function () { return _this.updateInput(oldInput, newInput, options); });
    };
    PreferencesEditor.prototype.layout = function (dimension) {
        DOM.toggleClass(this.headerContainer, 'vertical-layout', dimension.width < 700);
        this.searchWidget.layout(dimension);
        var headerHeight = DOM.getTotalHeight(this.headerContainer);
        this.sideBySidePreferencesWidget.layout(new builder_1.Dimension(dimension.width, dimension.height - headerHeight));
    };
    PreferencesEditor.prototype.getControl = function () {
        return this.sideBySidePreferencesWidget.getControl();
    };
    PreferencesEditor.prototype.focus = function () {
        this.sideBySidePreferencesWidget.focus();
    };
    PreferencesEditor.prototype.focusSearch = function () {
        this.searchWidget.focus();
    };
    PreferencesEditor.prototype.clearInput = function () {
        this.defaultSettingsEditorContextKey.set(false);
        this.sideBySidePreferencesWidget.clearInput();
        _super.prototype.clearInput.call(this);
    };
    PreferencesEditor.prototype.setEditorVisible = function (visible, position) {
        this.sideBySidePreferencesWidget.setEditorVisible(visible, position);
        _super.prototype.setEditorVisible.call(this, visible, position);
    };
    PreferencesEditor.prototype.changePosition = function (position) {
        this.sideBySidePreferencesWidget.changePosition(position);
        _super.prototype.changePosition.call(this, position);
    };
    PreferencesEditor.prototype.updateInput = function (oldInput, newInput, options) {
        var _this = this;
        var editablePreferencesUri = editor_1.toResource(newInput.master);
        this.settingsTabsWidget.show(editablePreferencesUri.toString() === this.preferencesService.userSettingsResource.toString() ? configurationEditing_1.ConfigurationTarget.USER : configurationEditing_1.ConfigurationTarget.WORKSPACE);
        return this.sideBySidePreferencesWidget.setInput(newInput.details, newInput.master, options).then(function (_a) {
            var defaultPreferencesRenderer = _a.defaultPreferencesRenderer, editablePreferencesRenderer = _a.editablePreferencesRenderer;
            _this.preferencesRenderers.defaultPreferencesRenderer = defaultPreferencesRenderer;
            _this.preferencesRenderers.editablePreferencesRenderer = editablePreferencesRenderer;
            _this.filterPreferences(_this.searchWidget.value());
        });
    };
    PreferencesEditor.prototype.switchSettings = function () {
        var _this = this;
        // Focus the editor if this editor is not active editor
        if (this.editorService.getActiveEditor() !== this) {
            this.focus();
        }
        var promise = this.input.isDirty() ? this.input.save() : winjs_base_1.TPromise.as(true);
        promise.done(function (value) { return _this.preferencesService.switchSettings(); });
    };
    PreferencesEditor.prototype.filterPreferences = function (filter) {
        var _this = this;
        var count = this.preferencesRenderers.filterPreferences(filter);
        var message = filter ? this.showSearchResultsMessage(count) : nls.localize('totalSettingsMessage', "Total {0} Settings", count);
        this.searchWidget.showMessage(message, count);
        if (count === 0) {
            this.latestEmptyFilters.push(filter);
        }
        this.delayedFilterLogging.trigger(function () { return _this.reportFilteringUsed(filter); });
    };
    PreferencesEditor.prototype.showSearchResultsMessage = function (count) {
        return count === 0 ? nls.localize('noSettingsFound', "No Results") :
            count === 1 ? nls.localize('oneSettingFound', "1 Setting matched") :
                nls.localize('settingsFound', "{0} Settings matched", count);
    };
    PreferencesEditor.prototype.reportFilteringUsed = function (filter) {
        if (filter) {
            var data = {
                filter: filter,
                emptyFilters: this.getLatestEmptyFiltersForTelemetry()
            };
            this.latestEmptyFilters = [];
            this.telemetryService.publicLog('defaultSettings.filter', data);
        }
    };
    /**
     * Put a rough limit on the size of the telemetry data, since otherwise it could be an unbounded large amount
     * of data. 8192 is the max size of a property value. This is rough since that probably includes ""s, etc.
     */
    PreferencesEditor.prototype.getLatestEmptyFiltersForTelemetry = function () {
        var cumulativeSize = 0;
        return this.latestEmptyFilters.filter(function (filterText) { return (cumulativeSize += filterText.length) <= 8192; });
    };
    return PreferencesEditor;
}(baseEditor_1.BaseEditor));
PreferencesEditor.ID = 'workbench.editor.preferencesEditor';
PreferencesEditor = __decorate([
    __param(0, preferences_1.IPreferencesService),
    __param(1, environment_1.IEnvironmentService),
    __param(2, telemetry_1.ITelemetryService),
    __param(3, editorService_1.IWorkbenchEditorService),
    __param(4, contextkey_1.IContextKeyService),
    __param(5, instantiation_1.IInstantiationService)
], PreferencesEditor);
exports.PreferencesEditor = PreferencesEditor;
var PreferencesRenderers = (function (_super) {
    __extends(PreferencesRenderers, _super);
    function PreferencesRenderers() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._disposables = [];
        return _this;
    }
    Object.defineProperty(PreferencesRenderers.prototype, "defaultPreferencesRenderer", {
        get: function () {
            return this._defaultPreferencesRenderer;
        },
        set: function (defaultPreferencesRenderer) {
            var _this = this;
            if (this._defaultPreferencesRenderer !== defaultPreferencesRenderer) {
                this._defaultPreferencesRenderer = defaultPreferencesRenderer;
                this._disposables = lifecycle_1.dispose(this._disposables);
                this._defaultPreferencesRenderer.onUpdatePreference(function (_a) {
                    var key = _a.key, value = _a.value, source = _a.source;
                    return _this._updatePreference(key, value, source, _this._editablePreferencesRenderer);
                }, this, this._disposables);
                this._defaultPreferencesRenderer.onFocusPreference(function (preference) { return _this._focusPreference(preference, _this._editablePreferencesRenderer); }, this, this._disposables);
                this._defaultPreferencesRenderer.onClearFocusPreference(function (preference) { return _this._clearFocus(preference, _this._editablePreferencesRenderer); }, this, this._disposables);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PreferencesRenderers.prototype, "editablePreferencesRenderer", {
        set: function (editableSettingsRenderer) {
            this._editablePreferencesRenderer = editableSettingsRenderer;
        },
        enumerable: true,
        configurable: true
    });
    PreferencesRenderers.prototype.filterPreferences = function (filter) {
        var filterResult = filter ? this._defaultPreferencesRenderer.preferencesModel.filterSettings(filter) : null;
        this._filterPreferences(filterResult, this._defaultPreferencesRenderer);
        this._filterPreferences(filterResult, this._editablePreferencesRenderer);
        return this._getCount(filterResult ? filterResult.filteredGroups : (this._defaultPreferencesRenderer ? this._defaultPreferencesRenderer.preferencesModel.settingsGroups : []));
    };
    PreferencesRenderers.prototype.focusNextPreference = function () {
        var setting = this._defaultPreferencesRenderer.iterator.next();
        this._focusPreference(setting, this._defaultPreferencesRenderer);
        this._focusPreference(setting, this._editablePreferencesRenderer);
    };
    PreferencesRenderers.prototype._filterPreferences = function (filterResult, preferencesRenderer) {
        if (preferencesRenderer) {
            preferencesRenderer.filterPreferences(filterResult);
        }
    };
    PreferencesRenderers.prototype._focusPreference = function (preference, preferencesRenderer) {
        if (preference && preferencesRenderer) {
            preferencesRenderer.focusPreference(preference);
        }
    };
    PreferencesRenderers.prototype._clearFocus = function (preference, preferencesRenderer) {
        if (preference && preferencesRenderer) {
            preferencesRenderer.clearFocus(preference);
        }
    };
    PreferencesRenderers.prototype._updatePreference = function (key, value, source, preferencesRenderer) {
        if (preferencesRenderer) {
            preferencesRenderer.updatePreference(key, value, source);
        }
    };
    PreferencesRenderers.prototype._getCount = function (settingsGroups) {
        var count = 0;
        for (var _i = 0, settingsGroups_1 = settingsGroups; _i < settingsGroups_1.length; _i++) {
            var group = settingsGroups_1[_i];
            for (var _a = 0, _b = group.sections; _a < _b.length; _a++) {
                var section = _b[_a];
                count += section.settings.length;
            }
        }
        return count;
    };
    PreferencesRenderers.prototype.dispose = function () {
        lifecycle_1.dispose(this._disposables);
        _super.prototype.dispose.call(this);
    };
    return PreferencesRenderers;
}(lifecycle_1.Disposable));
var SideBySidePreferencesWidget = (function (_super) {
    __extends(SideBySidePreferencesWidget, _super);
    function SideBySidePreferencesWidget(parent, instantiationService) {
        var _this = _super.call(this) || this;
        _this.instantiationService = instantiationService;
        _this.create(parent);
        return _this;
    }
    SideBySidePreferencesWidget.prototype.create = function (parentElement) {
        DOM.addClass(parentElement, 'side-by-side-preferences-editor');
        this.createSash(parentElement);
        this.defaultPreferencesEditorContainer = DOM.append(parentElement, DOM.$('.default-preferences-editor-container'));
        this.defaultPreferencesEditorContainer.style.position = 'absolute';
        this.defaultPreferencesEditor = this.instantiationService.createInstance(DefaultPreferencesEditor);
        this.defaultPreferencesEditor.create(new builder_1.Builder(this.defaultPreferencesEditorContainer));
        this.defaultPreferencesEditor.setVisible(true);
        this.editablePreferencesEditorContainer = DOM.append(parentElement, DOM.$('.editable-preferences-editor-container'));
        this.editablePreferencesEditorContainer.style.position = 'absolute';
    };
    SideBySidePreferencesWidget.prototype.setInput = function (defaultPreferencesEditorInput, editablePreferencesEditorInput, options) {
        var _this = this;
        return this.getOrCreateEditablePreferencesEditor(editablePreferencesEditorInput)
            .then(function () {
            _this.dolayout(_this.sash.getVerticalSashLeft());
            return winjs_base_1.TPromise.join([_this.defaultPreferencesEditor.updateInput(defaultPreferencesEditorInput, options, editor_1.toResource(editablePreferencesEditorInput)),
                _this.editablePreferencesEditor.setInput(editablePreferencesEditorInput, options)])
                .then(function () {
                return {
                    defaultPreferencesRenderer: _this.defaultPreferencesEditor.getControl().getContribution(DefaultSettingsEditorContribution.ID).getPreferencesRenderer(),
                    editablePreferencesRenderer: _this.editablePreferencesEditor.getControl().getContribution(SettingsEditorContribution.ID).getPreferencesRenderer()
                };
            });
        });
    };
    SideBySidePreferencesWidget.prototype.layout = function (dimension) {
        this.dimension = dimension;
        this.sash.setDimenesion(this.dimension);
    };
    SideBySidePreferencesWidget.prototype.focus = function () {
        if (this.editablePreferencesEditor) {
            this.editablePreferencesEditor.focus();
        }
    };
    SideBySidePreferencesWidget.prototype.getControl = function () {
        return this.editablePreferencesEditor ? this.editablePreferencesEditor.getControl() : null;
    };
    SideBySidePreferencesWidget.prototype.clearInput = function () {
        if (this.editablePreferencesEditor) {
            this.editablePreferencesEditor.clearInput();
        }
    };
    SideBySidePreferencesWidget.prototype.setEditorVisible = function (visible, position) {
        if (this.editablePreferencesEditor) {
            this.editablePreferencesEditor.setVisible(visible, position);
        }
    };
    SideBySidePreferencesWidget.prototype.changePosition = function (position) {
        if (this.editablePreferencesEditor) {
            this.editablePreferencesEditor.changePosition(position);
        }
    };
    SideBySidePreferencesWidget.prototype.getOrCreateEditablePreferencesEditor = function (editorInput) {
        var _this = this;
        if (this.editablePreferencesEditor) {
            return winjs_base_1.TPromise.as(this.editablePreferencesEditor);
        }
        var descriptor = platform_1.Registry.as(editor_1.Extensions.Editors).getEditor(editorInput);
        return this.instantiationService.createInstance(descriptor)
            .then(function (editor) {
            _this.editablePreferencesEditor = editor;
            _this.editablePreferencesEditor.create(new builder_1.Builder(_this.editablePreferencesEditorContainer));
            _this.editablePreferencesEditor.setVisible(true);
            return editor;
        });
    };
    SideBySidePreferencesWidget.prototype.createSash = function (parentElement) {
        var _this = this;
        this.sash = this._register(new sash_1.VSash(parentElement, 220));
        this._register(this.sash.onPositionChange(function (position) { return _this.dolayout(position); }));
    };
    SideBySidePreferencesWidget.prototype.dolayout = function (splitPoint) {
        if (!this.editablePreferencesEditor || !this.dimension) {
            return;
        }
        var masterEditorWidth = this.dimension.width - splitPoint;
        var detailsEditorWidth = this.dimension.width - masterEditorWidth;
        this.defaultPreferencesEditorContainer.style.width = detailsEditorWidth + "px";
        this.defaultPreferencesEditorContainer.style.height = this.dimension.height + "px";
        this.defaultPreferencesEditorContainer.style.left = '0px';
        this.editablePreferencesEditorContainer.style.width = masterEditorWidth + "px";
        this.editablePreferencesEditorContainer.style.height = this.dimension.height + "px";
        this.editablePreferencesEditorContainer.style.left = splitPoint + "px";
        this.defaultPreferencesEditor.layout(new builder_1.Dimension(detailsEditorWidth, this.dimension.height));
        this.editablePreferencesEditor.layout(new builder_1.Dimension(masterEditorWidth, this.dimension.height));
    };
    SideBySidePreferencesWidget.prototype.disposeEditors = function () {
        if (this.defaultPreferencesEditor) {
            this.defaultPreferencesEditor.dispose();
            this.defaultPreferencesEditor = null;
        }
        if (this.editablePreferencesEditor) {
            this.editablePreferencesEditor.dispose();
            this.editablePreferencesEditor = null;
        }
    };
    SideBySidePreferencesWidget.prototype.dispose = function () {
        this.disposeEditors();
        _super.prototype.dispose.call(this);
    };
    return SideBySidePreferencesWidget;
}(widget_1.Widget));
SideBySidePreferencesWidget = __decorate([
    __param(1, instantiation_1.IInstantiationService)
], SideBySidePreferencesWidget);
var DefaultPreferencesEditor = (function (_super) {
    __extends(DefaultPreferencesEditor, _super);
    function DefaultPreferencesEditor(telemetryService, editorService, instantiationService, storageService, configurationService, themeService, untitledEditorService, preferencesService, modelService, modeService, textFileService, editorGroupService) {
        var _this = _super.call(this, DefaultPreferencesEditor.ID, telemetryService, instantiationService, storageService, configurationService, themeService, modeService, textFileService, editorGroupService) || this;
        _this.editorService = editorService;
        _this.untitledEditorService = untitledEditorService;
        _this.preferencesService = preferencesService;
        _this.modelService = modelService;
        return _this;
    }
    DefaultPreferencesEditor.prototype.createEditorControl = function (parent, configuration) {
        return this.instantiationService.createInstance(DefaultPreferencesCodeEditor, parent.getHTMLElement(), configuration);
    };
    DefaultPreferencesEditor.prototype.getConfigurationOverrides = function () {
        var options = _super.prototype.getConfigurationOverrides.call(this);
        options.readOnly = true;
        if (this.input) {
            options.lineNumbers = 'off';
            options.renderLineHighlight = 'none';
            options.scrollBeyondLastLine = false;
            options.folding = false;
            options.renderWhitespace = 'none';
            options.wordWrap = 'on';
            options.renderIndentGuides = false;
            options.rulers = [];
            options.glyphMargin = true;
            options.minimap = {
                enabled: false
            };
        }
        return options;
    };
    DefaultPreferencesEditor.prototype.updateInput = function (input, options, editablePreferencesUri) {
        var _this = this;
        return this.setInput(input, options)
            .then(function () { return _this.input.resolve()
            .then(function (editorModel) { return winjs_base_1.TPromise.join([
            editorModel.load(),
            _this.preferencesService.createPreferencesEditorModel(editablePreferencesUri)
        ]); })
            .then(function (_a) {
            var editorModel = _a[0], preferencesModel = _a[1];
            return _this.getControl().setModels(editorModel.textEditorModel, preferencesModel);
        }); });
    };
    DefaultPreferencesEditor.prototype.layout = function (dimension) {
        this.getControl().layout(dimension);
    };
    DefaultPreferencesEditor.prototype.clearInput = function () {
        this.getControl().clearModels();
        _super.prototype.clearInput.call(this);
    };
    DefaultPreferencesEditor.prototype.getAriaLabel = function () {
        return nls.localize('preferencesAriaLabel', "Default preferences. Readonly text editor.");
    };
    return DefaultPreferencesEditor;
}(textEditor_1.BaseTextEditor));
DefaultPreferencesEditor.ID = 'workbench.editor.defaultPreferences';
DefaultPreferencesEditor = __decorate([
    __param(0, telemetry_1.ITelemetryService),
    __param(1, editorService_1.IWorkbenchEditorService),
    __param(2, instantiation_1.IInstantiationService),
    __param(3, storage_1.IStorageService),
    __param(4, configuration_1.IConfigurationService),
    __param(5, themeService_1.IWorkbenchThemeService),
    __param(6, untitledEditorService_1.IUntitledEditorService),
    __param(7, preferences_1.IPreferencesService),
    __param(8, modelService_1.IModelService),
    __param(9, modeService_1.IModeService),
    __param(10, textfiles_1.ITextFileService),
    __param(11, groupService_1.IEditorGroupService)
], DefaultPreferencesEditor);
exports.DefaultPreferencesEditor = DefaultPreferencesEditor;
var DefaultPreferencesCodeEditor = (function (_super) {
    __extends(DefaultPreferencesCodeEditor, _super);
    function DefaultPreferencesCodeEditor() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DefaultPreferencesCodeEditor.prototype._getContributions = function () {
        var contributions = _super.prototype._getContributions.call(this);
        var skipContributions = [folding_1.FoldingController.prototype, findController_1.SelectionHighlighter.prototype, find_1.FindController.prototype];
        contributions = contributions.filter(function (c) { return skipContributions.indexOf(c.prototype) === -1; });
        contributions.push(DefaultSettingsEditorContribution);
        return contributions;
    };
    DefaultPreferencesCodeEditor.prototype.setModels = function (model, settingsModel) {
        this.settingsModel = settingsModel;
        _super.prototype.setModel.call(this, model);
        var renderer = this.getContribution(DefaultSettingsEditorContribution.ID).getPreferencesRenderer();
        if (renderer) {
            renderer.associatedPreferencesModel = this.settingsModel;
        }
    };
    DefaultPreferencesCodeEditor.prototype.clearModels = function () {
        if (this.settingsModel) {
            this.settingsModel.dispose();
            this.settingsModel = null;
        }
        _super.prototype.setModel.call(this, null);
    };
    return DefaultPreferencesCodeEditor;
}(codeEditor_1.CodeEditor));
var PreferencesEditorContribution = (function (_super) {
    __extends(PreferencesEditorContribution, _super);
    function PreferencesEditorContribution(editor, instantiationService, preferencesService) {
        var _this = _super.call(this) || this;
        _this.editor = editor;
        _this.instantiationService = instantiationService;
        _this.preferencesService = preferencesService;
        _this._register(editor.onDidChangeModel(function () { return _this.onModelChanged(); }));
        return _this;
    }
    PreferencesEditorContribution.prototype.onModelChanged = function () {
        var _this = this;
        var model = this.editor.getModel();
        this.disposePreferencesRenderer();
        if (model) {
            this.createPreferencesRenderer()
                .then(function (preferencesRenderer) {
                _this.preferencesRenderer = preferencesRenderer;
                if (_this.preferencesRenderer) {
                    _this.preferencesRenderer.render();
                }
            });
        }
    };
    PreferencesEditorContribution.prototype.getPreferencesRenderer = function () {
        return this.preferencesRenderer;
    };
    PreferencesEditorContribution.prototype.disposePreferencesRenderer = function () {
        if (this.preferencesRenderer) {
            this.preferencesRenderer.dispose();
            this.preferencesRenderer = null;
        }
    };
    PreferencesEditorContribution.prototype.dispose = function () {
        this.disposePreferencesRenderer();
        _super.prototype.dispose.call(this);
    };
    return PreferencesEditorContribution;
}(lifecycle_1.Disposable));
PreferencesEditorContribution = __decorate([
    __param(1, instantiation_1.IInstantiationService),
    __param(2, preferences_1.IPreferencesService)
], PreferencesEditorContribution);
exports.PreferencesEditorContribution = PreferencesEditorContribution;
var DefaultSettingsEditorContribution = (function (_super) {
    __extends(DefaultSettingsEditorContribution, _super);
    function DefaultSettingsEditorContribution() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DefaultSettingsEditorContribution.prototype.createPreferencesRenderer = function () {
        var _this = this;
        return this.preferencesService.createPreferencesEditorModel(this.editor.getModel().uri)
            .then(function (editorModel) {
            if (editorModel instanceof preferencesModels_1.DefaultSettingsEditorModel) {
                return _this.instantiationService.createInstance(preferencesRenderers_1.DefaultSettingsRenderer, _this.editor, editorModel, _this.editor.settingsModel);
            }
            return null;
        });
    };
    DefaultSettingsEditorContribution.prototype.getId = function () {
        return DefaultSettingsEditorContribution.ID;
    };
    return DefaultSettingsEditorContribution;
}(PreferencesEditorContribution));
DefaultSettingsEditorContribution.ID = 'editor.contrib.defaultsettings';
exports.DefaultSettingsEditorContribution = DefaultSettingsEditorContribution;
var SettingsEditorContribution = SettingsEditorContribution_1 = (function (_super) {
    __extends(SettingsEditorContribution, _super);
    function SettingsEditorContribution() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SettingsEditorContribution.prototype.getId = function () {
        return SettingsEditorContribution_1.ID;
    };
    SettingsEditorContribution.prototype.createPreferencesRenderer = function () {
        var _this = this;
        return winjs_base_1.TPromise.join([this.preferencesService.createPreferencesEditorModel(this.preferencesService.defaultSettingsResource), this.preferencesService.createPreferencesEditorModel(this.editor.getModel().uri)])
            .then(function (_a) {
            var defaultSettingsModel = _a[0], settingsModel = _a[1];
            if (settingsModel instanceof preferencesModels_1.SettingsEditorModel) {
                if (configurationEditing_1.ConfigurationTarget.USER === settingsModel.configurationTarget) {
                    return _this.instantiationService.createInstance(preferencesRenderers_1.UserSettingsRenderer, _this.editor, settingsModel, defaultSettingsModel);
                }
                return _this.instantiationService.createInstance(preferencesRenderers_1.WorkspaceSettingsRenderer, _this.editor, settingsModel, defaultSettingsModel);
            }
            return null;
        });
    };
    return SettingsEditorContribution;
}(PreferencesEditorContribution));
SettingsEditorContribution.ID = 'editor.contrib.settings';
SettingsEditorContribution = SettingsEditorContribution_1 = __decorate([
    editorBrowserExtensions_1.editorContribution
], SettingsEditorContribution);
exports.SettingsEditorContribution = SettingsEditorContribution;
var StartSearchDefaultSettingsCommand = (function (_super) {
    __extends(StartSearchDefaultSettingsCommand, _super);
    function StartSearchDefaultSettingsCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    StartSearchDefaultSettingsCommand.prototype.runCommand = function (accessor, args) {
        var preferencesEditor = this.getPreferencesEditor(accessor);
        if (preferencesEditor) {
            preferencesEditor.focusSearch();
        }
    };
    StartSearchDefaultSettingsCommand.prototype.getPreferencesEditor = function (accessor) {
        var activeEditor = accessor.get(editorService_1.IWorkbenchEditorService).getActiveEditor();
        if (activeEditor instanceof PreferencesEditor) {
            return activeEditor;
        }
        return null;
    };
    return StartSearchDefaultSettingsCommand;
}(editorCommonExtensions_1.Command));
editorCommonExtensions_1.CommonEditorRegistry.registerEditorCommand(new StartSearchDefaultSettingsCommand({
    id: preferences_1.SETTINGS_EDITOR_COMMAND_SEARCH,
    precondition: contextkey_1.ContextKeyExpr.and(preferences_1.CONTEXT_SETTINGS_EDITOR),
    kbOpts: { primary: 2048 /* CtrlCmd */ | 36 /* KEY_F */ }
}));
var SettingsEditorContribution_1;
