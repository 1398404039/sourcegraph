/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var winjs_base_1 = require("vs/base/common/winjs.base");
var nls = require("vs/nls");
var DOM = require("vs/base/browser/dom");
var async_1 = require("vs/base/common/async");
var lifecycle_1 = require("vs/base/common/lifecycle");
var arrays_1 = require("vs/base/common/arrays");
var iterator_1 = require("vs/base/common/iterator");
var event_1 = require("vs/base/common/event");
var map_1 = require("vs/base/common/map");
var platform_1 = require("vs/platform/platform");
var resourceEditorInput_1 = require("vs/workbench/common/editor/resourceEditorInput");
var configurationRegistry_1 = require("vs/platform/configuration/common/configurationRegistry");
var editorCommon = require("vs/editor/common/editorCommon");
var textEditor_1 = require("vs/workbench/browser/parts/editor/textEditor");
var codeEditor_1 = require("vs/editor/browser/codeEditor");
var range_1 = require("vs/editor/common/core/range");
var instantiation_1 = require("vs/platform/instantiation/common/instantiation");
var preferences_1 = require("vs/workbench/parts/preferences/common/preferences");
var preferencesModels_1 = require("vs/workbench/parts/preferences/common/preferencesModels");
var editorBrowserExtensions_1 = require("vs/editor/browser/editorBrowserExtensions");
var contextView_1 = require("vs/platform/contextview/browser/contextView");
var preferencesWidgets_1 = require("vs/workbench/parts/preferences/browser/preferencesWidgets");
var contextkey_1 = require("vs/platform/contextkey/common/contextkey");
var editorCommonExtensions_1 = require("vs/editor/common/editorCommonExtensions");
var telemetry_1 = require("vs/platform/telemetry/common/telemetry");
var themeService_1 = require("vs/workbench/services/themes/common/themeService");
var modelService_1 = require("vs/editor/common/services/modelService");
var modeService_1 = require("vs/editor/common/services/modeService");
var workspace_1 = require("vs/platform/workspace/common/workspace");
var storage_1 = require("vs/platform/storage/common/storage");
var configuration_1 = require("vs/platform/configuration/common/configuration");
var event_2 = require("vs/platform/event/common/event");
var message_1 = require("vs/platform/message/common/message");
var editorService_1 = require("vs/workbench/services/editor/common/editorService");
var untitledEditorService_1 = require("vs/workbench/services/untitled/common/untitledEditorService");
var resolverService_1 = require("vs/editor/common/services/resolverService");
// Ignore following contributions
var folding_1 = require("vs/editor/contrib/folding/browser/folding");
var find_1 = require("vs/editor/contrib/find/browser/find");
var findController_1 = require("vs/editor/contrib/find/common/findController");
var DefaultPreferencesEditorInput = (function (_super) {
    __extends(DefaultPreferencesEditorInput, _super);
    function DefaultPreferencesEditorInput(resource, textModelResolverService) {
        var _this = _super.call(this, nls.localize('settingsEditorName', "Default Settings"), '', resource, textModelResolverService) || this;
        _this._willDispose = new event_1.Emitter();
        _this.willDispose = _this._willDispose.event;
        return _this;
    }
    DefaultPreferencesEditorInput.prototype.getResource = function () {
        return this.resource;
    };
    DefaultPreferencesEditorInput.prototype.getTypeId = function () {
        return DefaultPreferencesEditorInput.ID;
    };
    DefaultPreferencesEditorInput.prototype.supportsSplitEditor = function () {
        return false;
    };
    DefaultPreferencesEditorInput.prototype.matches = function (other) {
        if (!_super.prototype.matches.call(this, other)) {
            return false;
        }
        if (!(other instanceof DefaultPreferencesEditorInput)) {
            return false;
        }
        return true;
    };
    DefaultPreferencesEditorInput.prototype.dispose = function () {
        this._willDispose.fire();
        this._willDispose.dispose();
        _super.prototype.dispose.call(this);
    };
    return DefaultPreferencesEditorInput;
}(resourceEditorInput_1.ResourceEditorInput));
DefaultPreferencesEditorInput.ID = 'workbench.editorinputs.defaultpreferences';
DefaultPreferencesEditorInput = __decorate([
    __param(1, resolverService_1.ITextModelResolverService)
], DefaultPreferencesEditorInput);
exports.DefaultPreferencesEditorInput = DefaultPreferencesEditorInput;
var DefaultPreferencesEditor = (function (_super) {
    __extends(DefaultPreferencesEditor, _super);
    function DefaultPreferencesEditor(telemetryService, instantiationService, contextService, storageService, messageService, configurationService, eventService, editorService, themeService, untitledEditorService, preferencesService, modelService, modeService) {
        var _this = _super.call(this, DefaultPreferencesEditor.ID, telemetryService, instantiationService, contextService, storageService, messageService, configurationService, eventService, editorService, themeService) || this;
        _this.untitledEditorService = untitledEditorService;
        _this.preferencesService = preferencesService;
        _this.modelService = modelService;
        _this.modeService = modeService;
        _this.delayedFilterLogging = new async_1.Delayer(1000);
        return _this;
    }
    DefaultPreferencesEditor.prototype.createEditorControl = function (parent) {
        var _this = this;
        var parentContainer = parent.getHTMLElement();
        this.defaultSettingHeaderWidget = this._register(this.instantiationService.createInstance(preferencesWidgets_1.DefaultSettingsHeaderWidget, parentContainer));
        this._register(this.defaultSettingHeaderWidget.onDidChange(function (value) { return _this.filterPreferences(value); }));
        this._register(this.defaultSettingHeaderWidget.onEnter(function (value) { return _this.focusNextPreference(); }));
        var defaultPreferencesEditor = this.instantiationService.createInstance(DefaultPreferencesCodeEditor, parentContainer, this.getCodeEditorOptions());
        return defaultPreferencesEditor;
    };
    DefaultPreferencesEditor.prototype.getCodeEditorOptions = function () {
        var options = _super.prototype.getCodeEditorOptions.call(this);
        options.readOnly = true;
        if (this.input) {
            options.lineNumbers = 'off';
            options.renderLineHighlight = 'none';
            options.scrollBeyondLastLine = false;
            options.folding = false;
            options.renderWhitespace = 'none';
            options.wrappingColumn = 0;
            options.overviewRulerLanes = 0;
            options.renderIndentGuides = false;
            options.rulers = [];
        }
        return options;
    };
    DefaultPreferencesEditor.prototype.setInput = function (input, options) {
        var _this = this;
        this.listenToInput(input);
        return _super.prototype.setInput.call(this, input, options)
            .then(function () { return _this.updateInput(); });
    };
    DefaultPreferencesEditor.prototype.layout = function (dimension) {
        this.defaultSettingHeaderWidget.layout(dimension);
        var headerWidgetPosition = DOM.getDomNodePagePosition(this.defaultSettingHeaderWidget.domNode);
        this.getControl().layout({
            height: dimension.height - headerWidgetPosition.height,
            width: dimension.width
        });
    };
    DefaultPreferencesEditor.prototype.focus = function () {
        if (this.input) {
            this.defaultSettingHeaderWidget.focus();
        }
        else {
            _super.prototype.focus.call(this);
        }
    };
    DefaultPreferencesEditor.prototype.updateInput = function () {
        var _this = this;
        return this.input.resolve()
            .then(function (editorModel) { return editorModel.load(); })
            .then(function (editorModel) { return _this.getControl().setModel(editorModel.textEditorModel); });
    };
    DefaultPreferencesEditor.prototype.filterPreferences = function (filter) {
        var _this = this;
        this.delayedFilterLogging.trigger(function () { return _this.reportFilteringUsed(filter); });
        this.getDefaultPreferencesContribution().getPreferencesRenderer().filterPreferences(filter);
    };
    DefaultPreferencesEditor.prototype.focusNextPreference = function () {
        this.getDefaultPreferencesContribution().getPreferencesRenderer().focusNextSetting();
    };
    DefaultPreferencesEditor.prototype.clearInput = function () {
        this.getControl().setModel(null);
        this.saveState(this.input);
        if (this.inputDisposeListener) {
            this.inputDisposeListener.dispose();
        }
        _super.prototype.clearInput.call(this);
    };
    DefaultPreferencesEditor.prototype.getDefaultPreferencesContribution = function () {
        return this.getControl().getContribution(PreferencesEditorContribution.ID);
    };
    DefaultPreferencesEditor.prototype.restoreViewState = function (input) {
        var viewState = DefaultPreferencesEditor.VIEW_STATE.get(input.getResource());
        if (viewState) {
            this.getControl().restoreViewState(viewState);
        }
    };
    DefaultPreferencesEditor.prototype.saveState = function (input) {
        var state = this.getControl().saveViewState();
        if (state) {
            var resource = input.getResource();
            if (DefaultPreferencesEditor.VIEW_STATE.has(resource)) {
                DefaultPreferencesEditor.VIEW_STATE.delete(resource);
            }
            DefaultPreferencesEditor.VIEW_STATE.set(resource, state);
        }
    };
    DefaultPreferencesEditor.prototype.listenToInput = function (input) {
        var _this = this;
        if (this.inputDisposeListener) {
            this.inputDisposeListener.dispose();
        }
        if (input instanceof DefaultPreferencesEditorInput) {
            this.inputDisposeListener = input.willDispose(function () { return _this.saveState(input); });
        }
    };
    DefaultPreferencesEditor.prototype.reportFilteringUsed = function (filter) {
        var data = {};
        data['filter'] = filter;
        this.telemetryService.publicLog('defaultSettings.filter', data);
    };
    return DefaultPreferencesEditor;
}(textEditor_1.BaseTextEditor));
DefaultPreferencesEditor.ID = 'workbench.editor.defaultPreferences';
DefaultPreferencesEditor.VIEW_STATE = new map_1.LinkedMap();
DefaultPreferencesEditor = __decorate([
    __param(0, telemetry_1.ITelemetryService),
    __param(1, instantiation_1.IInstantiationService),
    __param(2, workspace_1.IWorkspaceContextService),
    __param(3, storage_1.IStorageService),
    __param(4, message_1.IMessageService),
    __param(5, configuration_1.IConfigurationService),
    __param(6, event_2.IEventService),
    __param(7, editorService_1.IWorkbenchEditorService),
    __param(8, themeService_1.IThemeService),
    __param(9, untitledEditorService_1.IUntitledEditorService),
    __param(10, preferences_1.IPreferencesService),
    __param(11, modelService_1.IModelService),
    __param(12, modeService_1.IModeService)
], DefaultPreferencesEditor);
exports.DefaultPreferencesEditor = DefaultPreferencesEditor;
var DefaultPreferencesCodeEditor = (function (_super) {
    __extends(DefaultPreferencesCodeEditor, _super);
    function DefaultPreferencesCodeEditor() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DefaultPreferencesCodeEditor.prototype._getContributions = function () {
        var contributions = _super.prototype._getContributions.call(this);
        var skipContributions = [folding_1.FoldingController.prototype, findController_1.SelectionHighlighter.prototype, find_1.FindController.prototype];
        contributions.filter(function (c) { return skipContributions.indexOf(c.prototype) === -1; });
        contributions.push(DefaultSettingsEditorContribution);
        return contributions;
    };
    return DefaultPreferencesCodeEditor;
}(codeEditor_1.CodeEditor));
var PreferencesEditorContribution = (function (_super) {
    __extends(PreferencesEditorContribution, _super);
    function PreferencesEditorContribution(editor, instantiationService, preferencesService) {
        var _this = _super.call(this) || this;
        _this.editor = editor;
        _this.instantiationService = instantiationService;
        _this.preferencesService = preferencesService;
        _this._register(editor.onDidChangeModel(function () { return _this.onModelChanged(); }));
        return _this;
    }
    PreferencesEditorContribution.prototype.onModelChanged = function () {
        var _this = this;
        var model = this.editor.getModel();
        this.disposePreferencesRenderer();
        if (model) {
            this.preferencesService.resolvePreferencesEditorModel(model.uri)
                .then(function (editorModel) {
                if (editorModel) {
                    _this.preferencesRenderer = _this.createPreferencesRenderer(editorModel);
                    if (_this.preferencesRenderer) {
                        _this.preferencesRenderer.render();
                    }
                }
            });
        }
    };
    PreferencesEditorContribution.prototype.getId = function () {
        return PreferencesEditorContribution.ID;
    };
    PreferencesEditorContribution.prototype.getPreferencesRenderer = function () {
        return this.preferencesRenderer;
    };
    PreferencesEditorContribution.prototype.disposePreferencesRenderer = function () {
        if (this.preferencesRenderer) {
            this.preferencesRenderer.dispose();
            this.preferencesRenderer = null;
        }
    };
    PreferencesEditorContribution.prototype.dispose = function () {
        this.disposePreferencesRenderer();
        _super.prototype.dispose.call(this);
    };
    return PreferencesEditorContribution;
}(lifecycle_1.Disposable));
PreferencesEditorContribution.ID = 'editor.contrib.preferences';
PreferencesEditorContribution = __decorate([
    __param(1, instantiation_1.IInstantiationService),
    __param(2, preferences_1.IPreferencesService)
], PreferencesEditorContribution);
exports.PreferencesEditorContribution = PreferencesEditorContribution;
var DefaultSettingsEditorContribution = (function (_super) {
    __extends(DefaultSettingsEditorContribution, _super);
    function DefaultSettingsEditorContribution() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DefaultSettingsEditorContribution.prototype.createPreferencesRenderer = function (editorModel) {
        if (editorModel instanceof preferencesModels_1.DefaultSettingsEditorModel) {
            return this.instantiationService.createInstance(DefaultSettingsRenderer, this.editor, editorModel);
        }
        return null;
    };
    return DefaultSettingsEditorContribution;
}(PreferencesEditorContribution));
exports.DefaultSettingsEditorContribution = DefaultSettingsEditorContribution;
var SettingsEditorContribution = (function (_super) {
    __extends(SettingsEditorContribution, _super);
    function SettingsEditorContribution() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SettingsEditorContribution.prototype.createPreferencesRenderer = function (editorModel) {
        if (editorModel instanceof preferencesModels_1.SettingsEditorModel) {
            return this.instantiationService.createInstance(SettingsRenderer, this.editor, editorModel);
        }
        return null;
    };
    return SettingsEditorContribution;
}(PreferencesEditorContribution));
SettingsEditorContribution = __decorate([
    editorBrowserExtensions_1.editorContribution
], SettingsEditorContribution);
exports.SettingsEditorContribution = SettingsEditorContribution;
var SettingsRenderer = (function (_super) {
    __extends(SettingsRenderer, _super);
    function SettingsRenderer(editor, settingsEditorModel, preferencesService, instantiationService) {
        var _this = _super.call(this) || this;
        _this.editor = editor;
        _this.settingsEditorModel = settingsEditorModel;
        _this.preferencesService = preferencesService;
        _this.instantiationService = instantiationService;
        _this.modelChangeDelayer = new async_1.Delayer(200);
        _this.copySettingActionRenderer = _this._register(instantiationService.createInstance(CopySettingActionRenderer, editor, false));
        _this._register(editor.getModel().onDidChangeContent(function () { return _this.modelChangeDelayer.trigger(function () { return _this.onModelChanged(); }); }));
        return _this;
    }
    SettingsRenderer.prototype.render = function () {
        this.copySettingActionRenderer.render(this.settingsEditorModel.settingsGroups);
    };
    SettingsRenderer.prototype.onModelChanged = function () {
        if (!this.editor.getModel()) {
            // model could have been disposed during the delay
            return;
        }
        this.render();
    };
    return SettingsRenderer;
}(lifecycle_1.Disposable));
SettingsRenderer = __decorate([
    __param(2, preferences_1.IPreferencesService),
    __param(3, instantiation_1.IInstantiationService)
], SettingsRenderer);
exports.SettingsRenderer = SettingsRenderer;
var DefaultSettingsRenderer = (function (_super) {
    __extends(DefaultSettingsRenderer, _super);
    function DefaultSettingsRenderer(editor, settingsEditorModel, preferencesService, contextKeyService, instantiationService) {
        var _this = _super.call(this) || this;
        _this.editor = editor;
        _this.settingsEditorModel = settingsEditorModel;
        _this.preferencesService = preferencesService;
        _this.instantiationService = instantiationService;
        _this.defaultSettingsEditorContextKey = preferences_1.CONTEXT_DEFAULT_SETTINGS_EDITOR.bindTo(contextKeyService);
        _this.settingsGroupTitleRenderer = _this._register(instantiationService.createInstance(SettingsGroupTitleRenderer, editor));
        _this.filteredMatchesRenderer = _this._register(instantiationService.createInstance(FilteredMatchesRenderer, editor));
        _this.focusNextSettingRenderer = _this._register(instantiationService.createInstance(FocusNextSettingRenderer, editor));
        _this.copySettingActionRenderer = _this._register(instantiationService.createInstance(CopySettingActionRenderer, editor, true));
        _this.settingsCountWidget = _this._register(instantiationService.createInstance(preferencesWidgets_1.SettingsCountWidget, editor, _this.getCount(settingsEditorModel.settingsGroups)));
        var paranthesisHidingRenderer = _this._register(instantiationService.createInstance(ParanthesisHidingRenderer, editor));
        _this.hiddenAreasRenderer = _this._register(instantiationService.createInstance(HiddenAreasRenderer, editor, [_this.settingsGroupTitleRenderer, _this.filteredMatchesRenderer, paranthesisHidingRenderer]));
        return _this;
    }
    DefaultSettingsRenderer.prototype.render = function () {
        this.defaultSettingsEditorContextKey.set(true);
        this.settingsGroupTitleRenderer.render(this.settingsEditorModel.settingsGroups);
        this.copySettingActionRenderer.render(this.settingsEditorModel.settingsGroups);
        this.settingsCountWidget.render();
        this.hiddenAreasRenderer.render();
        this.focusNextSettingRenderer.render([]);
        this.settingsGroupTitleRenderer.showGroup(1);
    };
    DefaultSettingsRenderer.prototype.filterPreferences = function (filter) {
        var filterResult = this.settingsEditorModel.filterSettings(filter);
        this.filteredMatchesRenderer.render(filterResult);
        this.settingsGroupTitleRenderer.render(filterResult.filteredGroups);
        this.settingsCountWidget.show(this.getCount(filterResult.filteredGroups));
        if (!filter) {
            this.focusNextSettingRenderer.render([]);
            this.settingsGroupTitleRenderer.showGroup(1);
        }
        else {
            this.focusNextSettingRenderer.render(filterResult.filteredGroups);
        }
    };
    DefaultSettingsRenderer.prototype.focusNextSetting = function () {
        var setting = this.focusNextSettingRenderer.focusNext();
        if (setting) {
            this.settingsGroupTitleRenderer.showSetting(setting);
        }
    };
    DefaultSettingsRenderer.prototype.collapseAll = function () {
        this.settingsGroupTitleRenderer.collapseAll();
    };
    DefaultSettingsRenderer.prototype.getCount = function (settingsGroups) {
        var count = 0;
        for (var _i = 0, settingsGroups_1 = settingsGroups; _i < settingsGroups_1.length; _i++) {
            var group = settingsGroups_1[_i];
            for (var _a = 0, _b = group.sections; _a < _b.length; _a++) {
                var section = _b[_a];
                count += section.settings.length;
            }
        }
        return count;
    };
    DefaultSettingsRenderer.prototype.dispose = function () {
        this.defaultSettingsEditorContextKey.set(false);
        _super.prototype.dispose.call(this);
    };
    return DefaultSettingsRenderer;
}(lifecycle_1.Disposable));
DefaultSettingsRenderer = __decorate([
    __param(2, preferences_1.IPreferencesService),
    __param(3, contextkey_1.IContextKeyService),
    __param(4, instantiation_1.IInstantiationService)
], DefaultSettingsRenderer);
exports.DefaultSettingsRenderer = DefaultSettingsRenderer;
var ParanthesisHidingRenderer = (function (_super) {
    __extends(ParanthesisHidingRenderer, _super);
    function ParanthesisHidingRenderer(editor) {
        var _this = _super.call(this) || this;
        _this.editor = editor;
        _this._onHiddenAreasChanged = new event_1.Emitter();
        return _this;
    }
    Object.defineProperty(ParanthesisHidingRenderer.prototype, "onHiddenAreasChanged", {
        get: function () { return this._onHiddenAreasChanged.event; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(ParanthesisHidingRenderer.prototype, "hiddenAreas", {
        get: function () {
            var model = this.editor.getModel();
            return [
                {
                    startLineNumber: 1,
                    startColumn: model.getLineMinColumn(1),
                    endLineNumber: 1,
                    endColumn: model.getLineMaxColumn(1)
                },
                {
                    startLineNumber: model.getLineCount(),
                    startColumn: model.getLineMinColumn(model.getLineCount()),
                    endLineNumber: model.getLineCount(),
                    endColumn: model.getLineMaxColumn(model.getLineCount())
                }
            ];
        },
        enumerable: true,
        configurable: true
    });
    return ParanthesisHidingRenderer;
}(lifecycle_1.Disposable));
exports.ParanthesisHidingRenderer = ParanthesisHidingRenderer;
var SettingsGroupTitleRenderer = (function (_super) {
    __extends(SettingsGroupTitleRenderer, _super);
    function SettingsGroupTitleRenderer(editor, instantiationService) {
        var _this = _super.call(this) || this;
        _this.editor = editor;
        _this.instantiationService = instantiationService;
        _this._onHiddenAreasChanged = new event_1.Emitter();
        _this.hiddenGroups = [];
        _this.disposables = [];
        return _this;
    }
    Object.defineProperty(SettingsGroupTitleRenderer.prototype, "onHiddenAreasChanged", {
        get: function () { return this._onHiddenAreasChanged.event; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(SettingsGroupTitleRenderer.prototype, "hiddenAreas", {
        get: function () {
            var hiddenAreas = [];
            for (var _i = 0, _a = this.hiddenGroups; _i < _a.length; _i++) {
                var group = _a[_i];
                hiddenAreas.push(group.range);
            }
            return hiddenAreas;
        },
        enumerable: true,
        configurable: true
    });
    SettingsGroupTitleRenderer.prototype.render = function (settingsGroups) {
        var _this = this;
        this.disposeWidgets();
        this.settingsGroups = settingsGroups.slice();
        this.settingsGroupTitleWidgets = [];
        var _loop_1 = function (group) {
            var settingsGroupTitleWidget = this_1.instantiationService.createInstance(preferencesWidgets_1.SettingsGroupTitleWidget, this_1.editor, group);
            settingsGroupTitleWidget.render();
            this_1.settingsGroupTitleWidgets.push(settingsGroupTitleWidget);
            this_1.disposables.push(settingsGroupTitleWidget);
            this_1.disposables.push(settingsGroupTitleWidget.onToggled(function (collapsed) { return _this.onToggled(collapsed, settingsGroupTitleWidget.settingsGroup); }));
        };
        var this_1 = this;
        for (var _i = 0, _a = this.settingsGroups.slice().reverse(); _i < _a.length; _i++) {
            var group = _a[_i];
            _loop_1(group);
        }
        this.settingsGroupTitleWidgets.reverse();
    };
    SettingsGroupTitleRenderer.prototype.showGroup = function (group) {
        this.hiddenGroups = this.settingsGroups.filter(function (g, i) { return i !== group - 1; });
        for (var _i = 0, _a = this.settingsGroupTitleWidgets.filter(function (g, i) { return i !== group - 1; }); _i < _a.length; _i++) {
            var groupTitleWidget = _a[_i];
            groupTitleWidget.toggleCollapse(true);
        }
        this._onHiddenAreasChanged.fire();
    };
    SettingsGroupTitleRenderer.prototype.showSetting = function (setting) {
        var settingsGroupTitleWidget = this.settingsGroupTitleWidgets.filter(function (widget) { return range_1.Range.containsRange(widget.settingsGroup.range, setting.range); })[0];
        if (settingsGroupTitleWidget && settingsGroupTitleWidget.isCollapsed()) {
            settingsGroupTitleWidget.toggleCollapse(false);
            this.hiddenGroups.splice(this.hiddenGroups.indexOf(settingsGroupTitleWidget.settingsGroup), 1);
            this._onHiddenAreasChanged.fire();
        }
    };
    SettingsGroupTitleRenderer.prototype.collapseAll = function () {
        this.editor.setPosition({ lineNumber: 1, column: 1 });
        this.hiddenGroups = this.settingsGroups.slice();
        for (var _i = 0, _a = this.settingsGroupTitleWidgets; _i < _a.length; _i++) {
            var groupTitleWidget = _a[_i];
            groupTitleWidget.toggleCollapse(true);
        }
        this._onHiddenAreasChanged.fire();
    };
    SettingsGroupTitleRenderer.prototype.onToggled = function (collapsed, group) {
        var index = this.hiddenGroups.indexOf(group);
        if (collapsed) {
            var currentPosition = this.editor.getPosition();
            if (group.range.startLineNumber <= currentPosition.lineNumber && group.range.endLineNumber >= currentPosition.lineNumber) {
                this.editor.setPosition({ lineNumber: group.range.startLineNumber - 1, column: 1 });
            }
            this.hiddenGroups.push(group);
        }
        else {
            this.hiddenGroups.splice(index, 1);
        }
        this._onHiddenAreasChanged.fire();
    };
    SettingsGroupTitleRenderer.prototype.disposeWidgets = function () {
        this.hiddenGroups = [];
        this.disposables = lifecycle_1.dispose(this.disposables);
    };
    SettingsGroupTitleRenderer.prototype.dispose = function () {
        this.disposeWidgets();
        _super.prototype.dispose.call(this);
    };
    return SettingsGroupTitleRenderer;
}(lifecycle_1.Disposable));
SettingsGroupTitleRenderer = __decorate([
    __param(1, instantiation_1.IInstantiationService)
], SettingsGroupTitleRenderer);
exports.SettingsGroupTitleRenderer = SettingsGroupTitleRenderer;
var HiddenAreasRenderer = (function (_super) {
    __extends(HiddenAreasRenderer, _super);
    function HiddenAreasRenderer(editor, hiddenAreasProviders, instantiationService) {
        var _this = _super.call(this) || this;
        _this.editor = editor;
        _this.hiddenAreasProviders = hiddenAreasProviders;
        _this.instantiationService = instantiationService;
        for (var _i = 0, hiddenAreasProviders_1 = hiddenAreasProviders; _i < hiddenAreasProviders_1.length; _i++) {
            var hiddenAreProvider = hiddenAreasProviders_1[_i];
            _this._register(hiddenAreProvider.onHiddenAreasChanged(function () { return _this.render(); }));
        }
        return _this;
    }
    HiddenAreasRenderer.prototype.render = function () {
        var ranges = [];
        for (var _i = 0, _a = this.hiddenAreasProviders; _i < _a.length; _i++) {
            var hiddenAreaProvider = _a[_i];
            ranges.push.apply(ranges, hiddenAreaProvider.hiddenAreas);
        }
        this.editor.setHiddenAreas(ranges);
    };
    HiddenAreasRenderer.prototype.dispose = function () {
        this.editor.setHiddenAreas([]);
        _super.prototype.dispose.call(this);
    };
    return HiddenAreasRenderer;
}(lifecycle_1.Disposable));
HiddenAreasRenderer = __decorate([
    __param(2, instantiation_1.IInstantiationService)
], HiddenAreasRenderer);
exports.HiddenAreasRenderer = HiddenAreasRenderer;
var FilteredMatchesRenderer = (function (_super) {
    __extends(FilteredMatchesRenderer, _super);
    function FilteredMatchesRenderer(editor, instantiationService) {
        var _this = _super.call(this) || this;
        _this.editor = editor;
        _this.instantiationService = instantiationService;
        _this.decorationIds = [];
        _this.hiddenAreas = [];
        _this._onHiddenAreasChanged = new event_1.Emitter();
        return _this;
    }
    Object.defineProperty(FilteredMatchesRenderer.prototype, "onHiddenAreasChanged", {
        get: function () { return this._onHiddenAreasChanged.event; },
        enumerable: true,
        configurable: true
    });
    ;
    FilteredMatchesRenderer.prototype.render = function (result) {
        var _this = this;
        var model = this.editor.getModel();
        this.hiddenAreas = [];
        this.editor.changeDecorations(function (changeAccessor) {
            _this.decorationIds = changeAccessor.deltaDecorations(_this.decorationIds, []);
        });
        if (result) {
            this.hiddenAreas = this.computeHiddenRanges(result.filteredGroups, result.allGroups, model);
            this.editor.changeDecorations(function (changeAccessor) {
                _this.decorationIds = changeAccessor.deltaDecorations(_this.decorationIds, arrays_1.flatten(result.matches.values()).map(function (match) { return _this.createDecoration(match, model); }));
            });
        }
        this._onHiddenAreasChanged.fire();
    };
    FilteredMatchesRenderer.prototype.createDecoration = function (range, model) {
        return {
            range: range,
            options: {
                stickiness: editorCommon.TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges,
                className: 'findMatch'
            }
        };
    };
    FilteredMatchesRenderer.prototype.computeHiddenRanges = function (filteredGroups, allSettingsGroups, model) {
        var notMatchesRanges = [];
        var _loop_2 = function (group) {
            var filteredGroup = filteredGroups.filter(function (g) { return g.title === group.title; })[0];
            if (!filteredGroup) {
                notMatchesRanges.push({
                    startLineNumber: group.range.startLineNumber - 1,
                    startColumn: model.getLineMinColumn(group.range.startLineNumber - 1),
                    endLineNumber: group.range.endLineNumber,
                    endColumn: model.getLineMaxColumn(group.range.endLineNumber),
                });
            }
            else {
                for (var _i = 0, _a = group.sections; _i < _a.length; _i++) {
                    var section = _a[_i];
                    if (section.descriptionRange) {
                        if (!this_2.containsLine(section.descriptionRange.startLineNumber, filteredGroup)) {
                            notMatchesRanges.push(this_2.createCompleteRange(section.descriptionRange, model));
                        }
                    }
                    for (var _b = 0, _c = section.settings; _b < _c.length; _b++) {
                        var setting = _c[_b];
                        if (!this_2.containsLine(setting.range.startLineNumber, filteredGroup)) {
                            notMatchesRanges.push(this_2.createCompleteRange(setting.range, model));
                        }
                    }
                }
            }
        };
        var this_2 = this;
        for (var _i = 0, allSettingsGroups_1 = allSettingsGroups; _i < allSettingsGroups_1.length; _i++) {
            var group = allSettingsGroups_1[_i];
            _loop_2(group);
        }
        return notMatchesRanges;
    };
    FilteredMatchesRenderer.prototype.containsLine = function (lineNumber, settingsGroup) {
        if (settingsGroup.titleRange && lineNumber >= settingsGroup.titleRange.startLineNumber && lineNumber <= settingsGroup.titleRange.endLineNumber) {
            return true;
        }
        for (var _i = 0, _a = settingsGroup.sections; _i < _a.length; _i++) {
            var section = _a[_i];
            if (section.descriptionRange && lineNumber >= section.descriptionRange.startLineNumber && lineNumber <= section.descriptionRange.endLineNumber) {
                return true;
            }
            for (var _b = 0, _c = section.settings; _b < _c.length; _b++) {
                var setting = _c[_b];
                if (lineNumber >= setting.range.startLineNumber && lineNumber <= setting.range.endLineNumber) {
                    return true;
                }
            }
        }
        return false;
    };
    FilteredMatchesRenderer.prototype.createCompleteRange = function (range, model) {
        return {
            startLineNumber: range.startLineNumber,
            startColumn: model.getLineMinColumn(range.startLineNumber),
            endLineNumber: range.endLineNumber,
            endColumn: model.getLineMaxColumn(range.endLineNumber)
        };
    };
    FilteredMatchesRenderer.prototype.dispose = function () {
        var _this = this;
        if (this.decorationIds) {
            this.decorationIds = this.editor.changeDecorations(function (changeAccessor) {
                return changeAccessor.deltaDecorations(_this.decorationIds, []);
            });
        }
        _super.prototype.dispose.call(this);
    };
    return FilteredMatchesRenderer;
}(lifecycle_1.Disposable));
FilteredMatchesRenderer = __decorate([
    __param(1, instantiation_1.IInstantiationService)
], FilteredMatchesRenderer);
exports.FilteredMatchesRenderer = FilteredMatchesRenderer;
var FocusNextSettingRenderer = (function (_super) {
    __extends(FocusNextSettingRenderer, _super);
    function FocusNextSettingRenderer(editor) {
        var _this = _super.call(this) || this;
        _this.editor = editor;
        _this.decorationIds = [];
        return _this;
    }
    FocusNextSettingRenderer.prototype.focusNext = function () {
        var _this = this;
        this.clear();
        var setting = this.iterator.next() || this.iterator.first();
        if (setting) {
            var model_1 = this.editor.getModel();
            this.editor.changeDecorations(function (changeAccessor) {
                _this.decorationIds = changeAccessor.deltaDecorations(_this.decorationIds, [{
                        range: {
                            startLineNumber: setting.valueRange.startLineNumber,
                            startColumn: model_1.getLineMinColumn(setting.valueRange.startLineNumber),
                            endLineNumber: setting.valueRange.endLineNumber,
                            endColumn: model_1.getLineMaxColumn(setting.valueRange.endLineNumber)
                        },
                        options: {
                            stickiness: editorCommon.TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges,
                            className: 'rangeHighlight',
                            isWholeLine: true
                        }
                    }]);
            });
            this.editor.revealLinesInCenterIfOutsideViewport(setting.valueRange.startLineNumber, setting.valueRange.endLineNumber - 1);
            return setting;
        }
        return null;
    };
    FocusNextSettingRenderer.prototype.render = function (filteredGroups) {
        this.clear();
        var settings = [];
        for (var _i = 0, filteredGroups_1 = filteredGroups; _i < filteredGroups_1.length; _i++) {
            var group = filteredGroups_1[_i];
            for (var _a = 0, _b = group.sections; _a < _b.length; _a++) {
                var section = _b[_a];
                settings.push.apply(settings, section.settings);
            }
        }
        this.iterator = new iterator_1.ArrayIterator(settings);
    };
    FocusNextSettingRenderer.prototype.clear = function () {
        var _this = this;
        this.editor.changeDecorations(function (changeAccessor) {
            _this.decorationIds = changeAccessor.deltaDecorations(_this.decorationIds, []);
        });
    };
    FocusNextSettingRenderer.prototype.dispose = function () {
        this.clear();
        _super.prototype.dispose.call(this);
    };
    return FocusNextSettingRenderer;
}(lifecycle_1.Disposable));
exports.FocusNextSettingRenderer = FocusNextSettingRenderer;
var CopySettingActionRenderer = (function (_super) {
    __extends(CopySettingActionRenderer, _super);
    function CopySettingActionRenderer(editor, isDefaultSettings, settingsService, contextMenuService) {
        var _this = _super.call(this) || this;
        _this.editor = editor;
        _this.isDefaultSettings = isDefaultSettings;
        _this.settingsService = settingsService;
        _this.contextMenuService = contextMenuService;
        _this.decorationIds = [];
        _this._register(editor.onMouseUp(function (e) { return _this.onEditorMouseUp(e); }));
        return _this;
    }
    CopySettingActionRenderer.prototype.render = function (settingsGroups) {
        var _this = this;
        this.model = this.editor.getModel();
        this.settingsGroups = settingsGroups;
        this.model.changeDecorations(function (changeAccessor) {
            _this.decorationIds = changeAccessor.deltaDecorations(_this.decorationIds, []);
        });
        this.model.changeDecorations(function (changeAccessor) {
            _this.decorationIds = changeAccessor.deltaDecorations(_this.decorationIds, _this.createDecorations(_this.model));
        });
    };
    CopySettingActionRenderer.prototype.createDecorations = function (model) {
        var result = [];
        for (var _i = 0, _a = this.settingsGroups; _i < _a.length; _i++) {
            var settingsGroup = _a[_i];
            for (var _b = 0, _c = settingsGroup.sections; _b < _c.length; _b++) {
                var settingsSection = _c[_b];
                for (var _d = 0, _e = settingsSection.settings; _d < _e.length; _d++) {
                    var setting = _e[_d];
                    var decoration = this.createSettingDecoration(setting, model);
                    if (decoration) {
                        result.push(decoration);
                    }
                }
            }
        }
        return result;
    };
    CopySettingActionRenderer.prototype.createSettingDecoration = function (setting, model) {
        var jsonSchema = this.getConfigurationsMap()[setting.key];
        if (jsonSchema) {
            var canChooseValue = jsonSchema.enum || jsonSchema.type === 'boolean';
            if (this.isDefaultSettings || canChooseValue) {
                var lineNumber = setting.keyRange.startLineNumber;
                return {
                    range: {
                        startLineNumber: lineNumber,
                        startColumn: model.getLineMaxColumn(lineNumber),
                        endLineNumber: lineNumber,
                        endColumn: model.getLineMaxColumn(lineNumber),
                    },
                    options: {
                        afterContentClassName: 'copySetting',
                        stickiness: editorCommon.TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges,
                        hoverMessage: canChooseValue ? this.isDefaultSettings ? nls.localize('selectAndCopySetting', "Select a value and copy to Settings")
                            : nls.localize('selectValue', "Select a value") : nls.localize('copy', "Copy to Settings")
                    }
                };
            }
        }
        return null;
    };
    CopySettingActionRenderer.prototype.onEditorMouseUp = function (e) {
        var range = e.target.range;
        if (!range || !range.isEmpty) {
            return;
        }
        if (!e.event.leftButton) {
            return;
        }
        switch (e.target.type) {
            case editorCommon.MouseTargetType.CONTENT_EMPTY:
                if (DOM.hasClass(e.target.element, 'copySetting')) {
                    this.onClick(e);
                }
                return;
            default:
                return;
        }
    };
    CopySettingActionRenderer.prototype.getConfigurationsMap = function () {
        return platform_1.Registry.as(configurationRegistry_1.Extensions.Configuration).getConfigurationProperties();
    };
    CopySettingActionRenderer.prototype.onClick = function (e) {
        var setting = this.getSetting(e.target.range.startLineNumber);
        if (setting) {
            var jsonSchema = this.getConfigurationsMap()[setting.key];
            var actions_1 = this.getActions(setting, jsonSchema);
            var elementPosition = DOM.getDomNodePagePosition(e.target.element);
            var anchor_1 = { x: elementPosition.left, y: elementPosition.top + elementPosition.height + 10 };
            this.contextMenuService.showContextMenu({
                getAnchor: function () { return anchor_1; },
                getActions: function () { return winjs_base_1.TPromise.wrap(actions_1); }
            });
        }
    };
    CopySettingActionRenderer.prototype.getSetting = function (lineNumber) {
        for (var _i = 0, _a = this.settingsGroups; _i < _a.length; _i++) {
            var group = _a[_i];
            if (lineNumber >= group.range.startLineNumber && lineNumber <= group.range.endLineNumber) {
                for (var _b = 0, _c = group.sections; _b < _c.length; _b++) {
                    var section = _c[_b];
                    for (var _d = 0, _e = section.settings; _d < _e.length; _d++) {
                        var setting = _e[_d];
                        if (lineNumber >= setting.keyRange.startLineNumber && lineNumber <= setting.keyRange.endLineNumber) {
                            return setting;
                        }
                    }
                }
            }
        }
        return null;
    };
    CopySettingActionRenderer.prototype.getActions = function (setting, jsonSchema) {
        var _this = this;
        if (jsonSchema.type === 'boolean') {
            return [{
                    id: 'truthyValue',
                    label: 'true',
                    enabled: true,
                    run: function () { return _this.settingsService.copyConfiguration({ key: setting.key, value: true }); }
                }, {
                    id: 'falsyValue',
                    label: 'false',
                    enabled: true,
                    run: function () { return _this.settingsService.copyConfiguration({ key: setting.key, value: false }); }
                }];
        }
        if (jsonSchema.enum) {
            return jsonSchema.enum.map(function (value) {
                return {
                    id: value,
                    label: JSON.stringify(value),
                    enabled: true,
                    run: function () { return _this.settingsService.copyConfiguration({ key: setting.key, value: value }); }
                };
            });
        }
        return [{
                id: 'copyToSettings',
                label: nls.localize('copyToSettings', "Copy to Settings"),
                enabled: true,
                run: function () { return _this.settingsService.copyConfiguration(setting); }
            }];
    };
    CopySettingActionRenderer.prototype.dispose = function () {
        if (this.model) {
            this.model.deltaDecorations(this.decorationIds, []);
        }
        _super.prototype.dispose.call(this);
    };
    return CopySettingActionRenderer;
}(lifecycle_1.Disposable));
CopySettingActionRenderer = __decorate([
    __param(2, preferences_1.IPreferencesService),
    __param(3, contextView_1.IContextMenuService)
], CopySettingActionRenderer);
exports.CopySettingActionRenderer = CopySettingActionRenderer;
var DefaultSettingsEditorCommand = editorCommonExtensions_1.EditorCommand.bindToContribution(function (editor) { return editor.getContribution(PreferencesEditorContribution.ID); });
editorCommonExtensions_1.CommonEditorRegistry.registerEditorCommand(new DefaultSettingsEditorCommand({
    id: preferences_1.DEFAULT_EDITOR_COMMAND_COLLAPSE_ALL,
    precondition: contextkey_1.ContextKeyExpr.and(preferences_1.CONTEXT_DEFAULT_SETTINGS_EDITOR),
    handler: function (x) { return x.getPreferencesRenderer().collapseAll(); }
}));
