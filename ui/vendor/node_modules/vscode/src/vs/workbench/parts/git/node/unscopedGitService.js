/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var path = require("path");
var git_1 = require("vs/workbench/parts/git/common/git");
var winjs_base_1 = require("vs/base/common/winjs.base");
var objects_1 = require("vs/base/common/objects");
var event_1 = require("vs/base/common/event");
var uri_1 = require("vs/base/common/uri");
var git_lib_1 = require("./git.lib");
var UnscopedGitService = (function () {
    function UnscopedGitService(gitPath, version, defaultEncoding, exePath) {
        this._onOutput = new event_1.Emitter();
        var gitRootPath = uri_1.default.parse(require.toUrl('vs/workbench/parts/git/node')).fsPath;
        var bootstrapPath = uri_1.default.parse(require.toUrl('bootstrap')).fsPath + ".js";
        var env = objects_1.assign({}, process.env, {
            GIT_ASKPASS: path.join(gitRootPath, 'askpass.sh'),
            VSCODE_GIT_ASKPASS_BOOTSTRAP: bootstrapPath,
            VSCODE_GIT_ASKPASS_NODE: exePath,
            VSCODE_GIT_ASKPASS_MODULE_ID: 'vs/workbench/parts/git/node/askpass'
        });
        this.git = new git_lib_1.Git({ gitPath: gitPath, version: version, defaultEncoding: defaultEncoding, env: env });
    }
    Object.defineProperty(UnscopedGitService.prototype, "onOutput", {
        get: function () { return this._onOutput.event; },
        enumerable: true,
        configurable: true
    });
    UnscopedGitService.prototype.getVersion = function () {
        return winjs_base_1.TPromise.as(null);
    };
    UnscopedGitService.prototype.serviceState = function () {
        return winjs_base_1.TPromise.as(git_1.RawServiceState.OK);
    };
    UnscopedGitService.prototype.statusCount = function () {
        return winjs_base_1.TPromise.as(0);
    };
    UnscopedGitService.prototype.status = function () {
        return winjs_base_1.TPromise.as(UnscopedGitService.STATUS);
    };
    UnscopedGitService.prototype.init = function () {
        return winjs_base_1.TPromise.as(UnscopedGitService.STATUS);
    };
    UnscopedGitService.prototype.add = function (filesPaths) {
        return winjs_base_1.TPromise.as(UnscopedGitService.STATUS);
    };
    UnscopedGitService.prototype.stage = function (filePath, content) {
        return winjs_base_1.TPromise.as(UnscopedGitService.STATUS);
    };
    UnscopedGitService.prototype.branch = function (name, checkout) {
        return winjs_base_1.TPromise.as(UnscopedGitService.STATUS);
    };
    UnscopedGitService.prototype.checkout = function (treeish, filePaths) {
        return winjs_base_1.TPromise.as(UnscopedGitService.STATUS);
    };
    UnscopedGitService.prototype.clean = function (filePaths) {
        return winjs_base_1.TPromise.as(UnscopedGitService.STATUS);
    };
    UnscopedGitService.prototype.undo = function () {
        return winjs_base_1.TPromise.as(UnscopedGitService.STATUS);
    };
    UnscopedGitService.prototype.reset = function (treeish, hard) {
        return winjs_base_1.TPromise.as(UnscopedGitService.STATUS);
    };
    UnscopedGitService.prototype.revertFiles = function (treeish, filePaths) {
        return winjs_base_1.TPromise.as(UnscopedGitService.STATUS);
    };
    UnscopedGitService.prototype.fetch = function () {
        return winjs_base_1.TPromise.as(UnscopedGitService.STATUS);
    };
    UnscopedGitService.prototype.pull = function (rebase) {
        return winjs_base_1.TPromise.as(UnscopedGitService.STATUS);
    };
    UnscopedGitService.prototype.push = function () {
        return winjs_base_1.TPromise.as(UnscopedGitService.STATUS);
    };
    UnscopedGitService.prototype.sync = function () {
        return winjs_base_1.TPromise.as(UnscopedGitService.STATUS);
    };
    UnscopedGitService.prototype.commit = function (message, amend, stage, signoff) {
        return winjs_base_1.TPromise.as(UnscopedGitService.STATUS);
    };
    UnscopedGitService.prototype.detectMimetypes = function (path, treeish) {
        return winjs_base_1.TPromise.as([]);
    };
    UnscopedGitService.prototype.show = function (path, treeish) {
        return winjs_base_1.TPromise.as(null);
    };
    UnscopedGitService.prototype.clone = function (url, parentPath) {
        return this.git.clone(url, parentPath);
    };
    UnscopedGitService.prototype.getCommitTemplate = function () {
        return winjs_base_1.TPromise.as(null);
    };
    UnscopedGitService.prototype.getCommit = function (ref) {
        return winjs_base_1.TPromise.as(null);
    };
    return UnscopedGitService;
}());
UnscopedGitService.STATUS = {
    repositoryRoot: null,
    state: git_1.ServiceState.NotAWorkspace,
    status: [],
    HEAD: null,
    refs: [],
    remotes: []
};
exports.UnscopedGitService = UnscopedGitService;
