/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var nls_1 = require("vs/nls");
var lifecycle_1 = require("vs/base/common/lifecycle");
var scm_1 = require("vs/workbench/parts/scm/common/scm");
var scm_2 = require("vs/workbench/services/scm/common/scm");
var activityBarService_1 = require("vs/workbench/services/activity/common/activityBarService");
var StatusUpdater = (function () {
    function StatusUpdater(scmService, activityBarService) {
        this.scmService = scmService;
        this.activityBarService = activityBarService;
        this.providerChangeDisposable = lifecycle_1.empty;
        this.badgeHandle = new lifecycle_1.OneDisposable();
        this.disposables = [];
        this.scmService.onDidChangeProvider(this.setActiveProvider, this, this.disposables);
        this.setActiveProvider(this.scmService.activeProvider);
        this.disposables.push(this.badgeHandle);
    }
    StatusUpdater.prototype.getId = function () {
        return StatusUpdater.ID;
    };
    StatusUpdater.prototype.setActiveProvider = function (activeProvider) {
        this.providerChangeDisposable.dispose();
        this.providerChangeDisposable = activeProvider ? activeProvider.onDidChange(this.update, this) : lifecycle_1.empty;
        this.update();
    };
    StatusUpdater.prototype.update = function () {
        var provider = this.scmService.activeProvider;
        var count = 0;
        if (provider) {
            if (typeof provider.count === 'number') {
                count = provider.count;
            }
            else {
                count = provider.resources.reduce(function (r, g) { return r + g.resources.length; }, 0);
            }
        }
        if (count > 0) {
            var badge = new activityBarService_1.NumberBadge(count, function (num) { return nls_1.localize('scmPendingChangesBadge', '{0} pending changes', num); });
            this.badgeHandle.value = this.activityBarService.showActivity(scm_1.VIEWLET_ID, badge, 'scm-viewlet-label');
        }
        else {
            this.badgeHandle.value = null;
        }
    };
    StatusUpdater.prototype.dispose = function () {
        this.disposables = lifecycle_1.dispose(this.disposables);
    };
    return StatusUpdater;
}());
StatusUpdater.ID = 'vs.scm.statusUpdater';
StatusUpdater = __decorate([
    __param(0, scm_2.ISCMService),
    __param(1, activityBarService_1.IActivityBarService)
], StatusUpdater);
exports.StatusUpdater = StatusUpdater;
