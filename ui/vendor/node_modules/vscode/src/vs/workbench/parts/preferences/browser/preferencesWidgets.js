/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var nls_1 = require("vs/nls");
var DOM = require("vs/base/browser/dom");
var widget_1 = require("vs/base/browser/ui/widget");
var event_1 = require("vs/base/common/event");
var editorBrowser_1 = require("vs/editor/browser/editorBrowser");
var inputBox_1 = require("vs/base/browser/ui/inputbox/inputBox");
var instantiation_1 = require("vs/platform/instantiation/common/instantiation");
var contextView_1 = require("vs/platform/contextview/browser/contextView");
var keybinding_1 = require("vs/platform/keybinding/common/keybinding");
var SettingsGroupTitleWidget = (function (_super) {
    __extends(SettingsGroupTitleWidget, _super);
    function SettingsGroupTitleWidget(editor, settingsGroup) {
        var _this = _super.call(this) || this;
        _this.editor = editor;
        _this.settingsGroup = settingsGroup;
        _this._onToggled = _this._register(new event_1.Emitter());
        _this.onToggled = _this._onToggled.event;
        _this.create();
        _this._register(_this.editor.onDidChangeConfiguration(function () { return _this.layout(); }));
        _this._register(_this.editor.onDidLayoutChange(function () { return _this.layout(); }));
        _this._register(_this.editor.onDidChangeCursorPosition(function (e) { return _this.onCursorChange(e); }));
        return _this;
    }
    Object.defineProperty(SettingsGroupTitleWidget.prototype, "domNode", {
        get: function () {
            return this._domNode;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SettingsGroupTitleWidget.prototype, "heightInLines", {
        get: function () {
            return 1.5;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SettingsGroupTitleWidget.prototype, "afterLineNumber", {
        get: function () {
            return this._afterLineNumber;
        },
        enumerable: true,
        configurable: true
    });
    SettingsGroupTitleWidget.prototype.create = function () {
        var _this = this;
        this._domNode = DOM.$('.settings-group-title-widget');
        this.titleContainer = DOM.append(this._domNode, DOM.$('.title-container'));
        this.titleContainer.tabIndex = 1;
        this.onclick(this.titleContainer, function () { return _this.toggle(); });
        this.onkeydown(this.titleContainer, function (e) { return _this.onKeyDown(e); });
        var focusTracker = this._register(DOM.trackFocus(this.titleContainer));
        focusTracker.addFocusListener(function () { return _this.toggleFocus(true); });
        focusTracker.addBlurListener(function () { return _this.toggleFocus(false); });
        this.icon = DOM.append(this.titleContainer, DOM.$('.expand-collapse-icon'));
        this.title = DOM.append(this.titleContainer, DOM.$('.title'));
        this.title.textContent = this.settingsGroup.title + (" (" + this.settingsGroup.sections.reduce(function (count, section) { return count + section.settings.length; }, 0) + ")");
        this.layout();
    };
    SettingsGroupTitleWidget.prototype.render = function () {
        var _this = this;
        this._afterLineNumber = this.settingsGroup.range.startLineNumber - 2;
        this.editor.changeViewZones(function (accessor) {
            _this.id = accessor.addZone(_this);
        });
    };
    SettingsGroupTitleWidget.prototype.toggleCollapse = function (collapse) {
        DOM.toggleClass(this.titleContainer, 'collapsed', collapse);
    };
    SettingsGroupTitleWidget.prototype.toggleFocus = function (focus) {
        DOM.toggleClass(this.titleContainer, 'focused', focus);
    };
    SettingsGroupTitleWidget.prototype.isCollapsed = function () {
        return DOM.hasClass(this.titleContainer, 'collapsed');
    };
    SettingsGroupTitleWidget.prototype.layout = function () {
        this.titleContainer.style.lineHeight = this.editor.getConfiguration().lineHeight + 3 + 'px';
        this.titleContainer.style.fontSize = this.editor.getConfiguration().fontInfo.fontSize + 'px';
        var iconSize = this.getIconSize();
        this.icon.style.height = iconSize + "px";
        this.icon.style.width = iconSize + "px";
    };
    SettingsGroupTitleWidget.prototype.getIconSize = function () {
        var fontSize = this.editor.getConfiguration().fontInfo.fontSize;
        return fontSize > 8 ? Math.max(fontSize, 16) : 12;
    };
    SettingsGroupTitleWidget.prototype.onKeyDown = function (keyboardEvent) {
        switch (keyboardEvent.keyCode) {
            case 3 /* Enter */:
            case 10 /* Space */:
                this.toggle();
                break;
            case 15 /* LeftArrow */:
                this.collapse(true);
                break;
            case 17 /* RightArrow */:
                this.collapse(false);
                break;
            case 16 /* UpArrow */:
                if (this.settingsGroup.range.startLineNumber - 3 !== 1) {
                    this.editor.focus();
                    var lineNumber_1 = this.settingsGroup.range.startLineNumber - 2;
                    this.editor.setPosition({ lineNumber: lineNumber_1, column: this.editor.getModel().getLineMinColumn(lineNumber_1) });
                }
                break;
            case 18 /* DownArrow */:
                var lineNumber = this.isCollapsed() ? this.settingsGroup.range.startLineNumber : this.settingsGroup.range.startLineNumber - 1;
                this.editor.focus();
                this.editor.setPosition({ lineNumber: lineNumber, column: this.editor.getModel().getLineMinColumn(lineNumber) });
                break;
        }
    };
    SettingsGroupTitleWidget.prototype.toggle = function () {
        this.collapse(!this.isCollapsed());
    };
    SettingsGroupTitleWidget.prototype.collapse = function (collapse) {
        if (collapse !== this.isCollapsed()) {
            DOM.toggleClass(this.titleContainer, 'collapsed', collapse);
            this._onToggled.fire(collapse);
        }
    };
    SettingsGroupTitleWidget.prototype.onCursorChange = function (e) {
        if (e.source !== 'mouse' && this.focusTitle(e.position)) {
            this.titleContainer.focus();
        }
    };
    SettingsGroupTitleWidget.prototype.focusTitle = function (currentPosition) {
        var previousPosition = this.previousPosition;
        this.previousPosition = currentPosition;
        if (!previousPosition) {
            return false;
        }
        if (previousPosition.lineNumber === currentPosition.lineNumber) {
            return false;
        }
        if (currentPosition.lineNumber === this.settingsGroup.range.startLineNumber - 1 || currentPosition.lineNumber === this.settingsGroup.range.startLineNumber - 2) {
            return true;
        }
        if (this.isCollapsed() && currentPosition.lineNumber === this.settingsGroup.range.endLineNumber) {
            return true;
        }
        return false;
    };
    SettingsGroupTitleWidget.prototype.dispose = function () {
        var _this = this;
        this.editor.changeViewZones(function (accessor) {
            accessor.removeZone(_this.id);
        });
        _super.prototype.dispose.call(this);
    };
    return SettingsGroupTitleWidget;
}(widget_1.Widget));
exports.SettingsGroupTitleWidget = SettingsGroupTitleWidget;
var DefaultSettingsHeaderWidget = (function (_super) {
    __extends(DefaultSettingsHeaderWidget, _super);
    function DefaultSettingsHeaderWidget(parent, contextViewService, contextMenuService, instantiationService) {
        var _this = _super.call(this) || this;
        _this.contextViewService = contextViewService;
        _this.contextMenuService = contextMenuService;
        _this.instantiationService = instantiationService;
        _this._onDidChange = _this._register(new event_1.Emitter());
        _this.onDidChange = _this._onDidChange.event;
        _this._onEnter = _this._register(new event_1.Emitter());
        _this.onEnter = _this._onEnter.event;
        _this.create(parent);
        return _this;
    }
    DefaultSettingsHeaderWidget.prototype.create = function (parent) {
        this.domNode = DOM.append(parent, DOM.$('div.settings-header-widget'));
        this.headerContainer = DOM.append(this.domNode, DOM.$('div.settings-header-container'));
        var titleContainer = DOM.append(this.headerContainer, DOM.$('div.settings-title-container'));
        this.createInfoContainer(DOM.append(titleContainer, DOM.$('div.settings-info-container')));
        this.createSearchContainer(DOM.append(this.domNode, DOM.$('div.settings-search-container')));
    };
    DefaultSettingsHeaderWidget.prototype.createInfoContainer = function (infoContainer) {
        DOM.append(infoContainer, DOM.$('span.title-label')).textContent = nls_1.localize('defaultSettingsTitle', "Default Settings");
        DOM.append(infoContainer, DOM.$('span')).textContent = nls_1.localize('defaultSettingsInfo', " - Overwrite these by placing them into your settings file to the right");
    };
    DefaultSettingsHeaderWidget.prototype.createSearchContainer = function (searchContainer) {
        var _this = this;
        this.searchContainer = searchContainer;
        var searchInput = DOM.append(this.searchContainer, DOM.$('div.settings-search-input'));
        this.inputBox = this._register(new inputBox_1.InputBox(searchInput, this.contextViewService, {
            ariaLabel: nls_1.localize('SearchSettingsWidget.AriaLabel', "Search default settings"),
            placeholder: nls_1.localize('SearchSettingsWidget.Placeholder', "Search Default Settings")
        }));
        this.inputBox.onDidChange(function (value) { return _this._onDidChange.fire(value); });
        this.onkeyup(this.inputBox.inputElement, function (e) { return _this._onKeyUp(e); });
    };
    DefaultSettingsHeaderWidget.prototype.focus = function () {
        this.inputBox.focus();
    };
    DefaultSettingsHeaderWidget.prototype.layout = function (dimension) {
        this.inputBox.width = dimension.width - 62;
    };
    DefaultSettingsHeaderWidget.prototype._onKeyUp = function (keyboardEvent) {
        switch (keyboardEvent.keyCode) {
            case 3 /* Enter */:
                this._onEnter.fire();
                keyboardEvent.preventDefault();
                keyboardEvent.stopPropagation();
                return;
        }
    };
    return DefaultSettingsHeaderWidget;
}(widget_1.Widget));
DefaultSettingsHeaderWidget = __decorate([
    __param(1, contextView_1.IContextViewService),
    __param(2, contextView_1.IContextMenuService),
    __param(3, instantiation_1.IInstantiationService)
], DefaultSettingsHeaderWidget);
exports.DefaultSettingsHeaderWidget = DefaultSettingsHeaderWidget;
var FloatingClickWidget = (function (_super) {
    __extends(FloatingClickWidget, _super);
    function FloatingClickWidget(editor, label, keyBindingAction, keybindingService) {
        var _this = _super.call(this) || this;
        _this.editor = editor;
        _this.label = label;
        _this.keyBindingAction = keyBindingAction;
        _this._onClick = _this._register(new event_1.Emitter());
        _this.onClick = _this._onClick.event;
        if (keyBindingAction) {
            var keybinding = keybindingService.lookupKeybindings(keyBindingAction);
            if (keybinding.length > 0) {
                _this.label += ' (' + keybindingService.getLabelFor(keybinding[0]) + ')';
            }
        }
        return _this;
    }
    FloatingClickWidget.prototype.render = function () {
        var _this = this;
        this._domNode = DOM.$('.floating-click-widget');
        DOM.append(this._domNode, DOM.$('')).textContent = this.label;
        this.onclick(this._domNode, function (e) { return _this._onClick.fire(); });
        this.editor.addOverlayWidget(this);
    };
    FloatingClickWidget.prototype.dispose = function () {
        this.editor.removeOverlayWidget(this);
        _super.prototype.dispose.call(this);
    };
    FloatingClickWidget.prototype.getId = function () {
        return 'editor.overlayWidget.floatingClickWidget';
    };
    FloatingClickWidget.prototype.getDomNode = function () {
        return this._domNode;
    };
    FloatingClickWidget.prototype.getPosition = function () {
        return {
            preference: editorBrowser_1.OverlayWidgetPositionPreference.BOTTOM_RIGHT_CORNER
        };
    };
    return FloatingClickWidget;
}(widget_1.Widget));
FloatingClickWidget = __decorate([
    __param(3, keybinding_1.IKeybindingService)
], FloatingClickWidget);
exports.FloatingClickWidget = FloatingClickWidget;
var SettingsCountWidget = (function (_super) {
    __extends(SettingsCountWidget, _super);
    function SettingsCountWidget(editor, total) {
        var _this = _super.call(this) || this;
        _this.editor = editor;
        _this.total = total;
        return _this;
    }
    SettingsCountWidget.prototype.render = function () {
        this._domNode = DOM.$('.settings-count-widget');
        this.editor.addOverlayWidget(this);
    };
    SettingsCountWidget.prototype.show = function (count) {
        if (count === this.total) {
            DOM.removeClass(this._domNode, 'show');
        }
        else {
            if (count === 0) {
                this._domNode.textContent = nls_1.localize('noSettings', "No settings found");
                DOM.addClass(this._domNode, 'no-results');
            }
            else {
                this._domNode.textContent = nls_1.localize('showCount', "Showing {0} of {1} Settings", count, this.total);
                DOM.removeClass(this._domNode, 'no-results');
            }
            DOM.addClass(this._domNode, 'show');
        }
    };
    SettingsCountWidget.prototype.dispose = function () {
        this.editor.removeOverlayWidget(this);
        _super.prototype.dispose.call(this);
    };
    SettingsCountWidget.prototype.getId = function () {
        return 'editor.overlayWidget.settingsCountWidget';
    };
    SettingsCountWidget.prototype.getDomNode = function () {
        return this._domNode;
    };
    SettingsCountWidget.prototype.getPosition = function () {
        return {
            preference: null
        };
    };
    return SettingsCountWidget;
}(widget_1.Widget));
exports.SettingsCountWidget = SettingsCountWidget;
