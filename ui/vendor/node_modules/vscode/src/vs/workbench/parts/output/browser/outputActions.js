/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var winjs_base_1 = require("vs/base/common/winjs.base");
var nls = require("vs/nls");
var platform_1 = require("vs/platform/platform");
var actions_1 = require("vs/base/common/actions");
var output_1 = require("vs/workbench/parts/output/common/output");
var actionbar_1 = require("vs/base/browser/ui/actionbar/actionbar");
var partService_1 = require("vs/workbench/services/part/common/partService");
var panelService_1 = require("vs/workbench/services/panel/common/panelService");
var panel_1 = require("vs/workbench/browser/panel");
var ToggleOutputAction = (function (_super) {
    __extends(ToggleOutputAction, _super);
    function ToggleOutputAction(id, label, partService, panelService) {
        return _super.call(this, id, label, output_1.OUTPUT_PANEL_ID, panelService, partService) || this;
    }
    return ToggleOutputAction;
}(panel_1.TogglePanelAction));
ToggleOutputAction.ID = 'workbench.action.output.toggleOutput';
ToggleOutputAction.LABEL = nls.localize('toggleOutput', "Toggle Output");
ToggleOutputAction = __decorate([
    __param(2, partService_1.IPartService),
    __param(3, panelService_1.IPanelService)
], ToggleOutputAction);
exports.ToggleOutputAction = ToggleOutputAction;
var ClearOutputAction = (function (_super) {
    __extends(ClearOutputAction, _super);
    function ClearOutputAction(id, label, outputService, panelService) {
        var _this = _super.call(this, id, label, 'output-action clear-output') || this;
        _this.outputService = outputService;
        _this.panelService = panelService;
        return _this;
    }
    ClearOutputAction.prototype.run = function () {
        this.outputService.getActiveChannel().clear();
        this.panelService.getActivePanel().focus();
        return winjs_base_1.TPromise.as(true);
    };
    return ClearOutputAction;
}(actions_1.Action));
ClearOutputAction.ID = 'workbench.output.action.clearOutput';
ClearOutputAction.LABEL = nls.localize('clearOutput', "Clear Output");
ClearOutputAction = __decorate([
    __param(2, output_1.IOutputService),
    __param(3, panelService_1.IPanelService)
], ClearOutputAction);
exports.ClearOutputAction = ClearOutputAction;
var SwitchOutputAction = (function (_super) {
    __extends(SwitchOutputAction, _super);
    function SwitchOutputAction(outputService) {
        var _this = _super.call(this, SwitchOutputAction.ID, nls.localize('switchToOutput.label', "Switch to Output")) || this;
        _this.outputService = outputService;
        _this.class = 'output-action switch-to-output';
        return _this;
    }
    SwitchOutputAction.prototype.run = function (channelId) {
        return this.outputService.getChannel(channelId).show();
    };
    return SwitchOutputAction;
}(actions_1.Action));
SwitchOutputAction.ID = 'workbench.output.action.switchBetweenOutputs';
SwitchOutputAction = __decorate([
    __param(0, output_1.IOutputService)
], SwitchOutputAction);
exports.SwitchOutputAction = SwitchOutputAction;
var SwitchOutputActionItem = (function (_super) {
    __extends(SwitchOutputActionItem, _super);
    function SwitchOutputActionItem(action, outputService) {
        var _this = _super.call(this, null, action, SwitchOutputActionItem.getChannelLabels(outputService), Math.max(0, SwitchOutputActionItem.getChannelLabels(outputService).indexOf(outputService.getActiveChannel().label))) || this;
        _this.outputService = outputService;
        _this.toDispose.push(_this.outputService.onOutputChannel(_this.onOutputChannel, _this));
        _this.toDispose.push(_this.outputService.onActiveOutputChannel(_this.onOutputChannel, _this));
        return _this;
    }
    SwitchOutputActionItem.prototype.getActionContext = function (option) {
        var channel = platform_1.Registry.as(output_1.Extensions.OutputChannels).getChannels().filter(function (channelData) { return channelData.label === option; }).pop();
        return channel ? channel.id : option;
    };
    SwitchOutputActionItem.prototype.onOutputChannel = function () {
        var channels = SwitchOutputActionItem.getChannelLabels(this.outputService);
        var selected = Math.max(0, channels.indexOf(this.outputService.getActiveChannel().label));
        this.setOptions(channels, selected);
    };
    SwitchOutputActionItem.getChannelLabels = function (outputService) {
        var contributedChannels = platform_1.Registry.as(output_1.Extensions.OutputChannels).getChannels().map(function (channelData) { return channelData.label; });
        return contributedChannels.sort(); // sort by name
    };
    return SwitchOutputActionItem;
}(actionbar_1.SelectActionItem));
SwitchOutputActionItem = __decorate([
    __param(1, output_1.IOutputService)
], SwitchOutputActionItem);
exports.SwitchOutputActionItem = SwitchOutputActionItem;
