import { TPromise } from 'vs/base/common/winjs.base';
import uri from 'vs/base/common/uri';
import { IModel } from 'vs/editor/common/editorCommon';
import { IEditor } from 'vs/platform/editor/common/editor';
import * as extensionsRegistry from 'vs/platform/extensions/common/extensionsRegistry';
import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
import { IFileService } from 'vs/platform/files/common/files';
import { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';
import { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import { ICommandService } from 'vs/platform/commands/common/commands';
import * as debug from 'vs/workbench/parts/debug/common/debug';
import { Adapter } from 'vs/workbench/parts/debug/node/debugAdapter';
import { IWorkbenchEditorService } from 'vs/workbench/services/editor/common/editorService';
import { IQuickOpenService } from 'vs/platform/quickOpen/common/quickOpen';
import { IConfigurationResolverService } from 'vs/workbench/services/configurationResolver/common/configurationResolver';
export declare const debuggersExtPoint: extensionsRegistry.IExtensionPoint<debug.IRawAdapter[]>;
export declare const schemaId = "vscode://schemas/launch";
export declare class ConfigurationManager implements debug.IConfigurationManager {
    private contextService;
    private fileService;
    private telemetryService;
    private editorService;
    private configurationService;
    private quickOpenService;
    private configurationResolverService;
    private instantiationService;
    private commandService;
    private adapters;
    private breakpointModeIdsSet;
    constructor(contextService: IWorkspaceContextService, fileService: IFileService, telemetryService: ITelemetryService, editorService: IWorkbenchEditorService, configurationService: IConfigurationService, quickOpenService: IQuickOpenService, configurationResolverService: IConfigurationResolverService, instantiationService: IInstantiationService, commandService: ICommandService);
    private registerListeners();
    getAdapter(type: string): Adapter;
    getCompound(name: string): debug.ICompound;
    getConfigurationNames(): string[];
    getConfiguration(name: string): debug.IConfig;
    resloveConfiguration(config: debug.IConfig): TPromise<debug.IConfig>;
    readonly configFileUri: uri;
    openConfigFile(sideBySide: boolean, type?: string): TPromise<IEditor>;
    getStartSessionCommand(type?: string): TPromise<{
        command: string;
        type: string;
    }>;
    private guessAdapter(type?);
    canSetBreakpointsIn(model: IModel): boolean;
}
