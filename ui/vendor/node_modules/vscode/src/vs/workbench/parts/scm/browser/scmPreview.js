/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var actions_1 = require("vs/base/common/actions");
var windows_1 = require("vs/platform/windows/common/windows");
var message_1 = require("vs/platform/message/common/message");
// tslint:disable
var package_1 = require("vs/platform/node/package");
// tslint:enable
// Enable this by default for insiders
function getDefaultValue() {
    var value = window.localStorage.getItem('enablePreviewSCM');
    return /insider$/.test(package_1.default.version) ? value !== 'false' : value === 'true';
}
var SCMPreview = (function () {
    function SCMPreview() {
    }
    Object.defineProperty(SCMPreview, "enabled", {
        get: function () {
            return this._enabled;
        },
        set: function (enabled) {
            window.localStorage.setItem('enablePreviewSCM', enabled ? 'true' : 'false');
        },
        enumerable: true,
        configurable: true
    });
    return SCMPreview;
}());
SCMPreview._enabled = getDefaultValue();
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = SCMPreview;
var EnableSCMPreviewAction = (function (_super) {
    __extends(EnableSCMPreviewAction, _super);
    function EnableSCMPreviewAction(id, label, windowService, messageService) {
        if (id === void 0) { id = EnableSCMPreviewAction.ID; }
        if (label === void 0) { label = EnableSCMPreviewAction.LABEL; }
        var _this = _super.call(this, EnableSCMPreviewAction.ID, EnableSCMPreviewAction.LABEL, '', true) || this;
        _this.windowService = windowService;
        _this.messageService = messageService;
        return _this;
    }
    EnableSCMPreviewAction.prototype.run = function () {
        var message = 'This will reload this window, do you want to continue?';
        var result = this.messageService.confirm({ message: message });
        if (!result) {
            return undefined;
        }
        SCMPreview.enabled = true;
        return this.windowService.reloadWindow();
    };
    return EnableSCMPreviewAction;
}(actions_1.Action));
EnableSCMPreviewAction.ID = 'enablescmpreview';
EnableSCMPreviewAction.LABEL = 'Enable Preview SCM';
EnableSCMPreviewAction = __decorate([
    __param(2, windows_1.IWindowService),
    __param(3, message_1.IMessageService)
], EnableSCMPreviewAction);
exports.EnableSCMPreviewAction = EnableSCMPreviewAction;
var DisableSCMPreviewAction = (function (_super) {
    __extends(DisableSCMPreviewAction, _super);
    function DisableSCMPreviewAction(id, label, windowService, messageService) {
        if (id === void 0) { id = DisableSCMPreviewAction.ID; }
        if (label === void 0) { label = DisableSCMPreviewAction.LABEL; }
        var _this = _super.call(this, DisableSCMPreviewAction.ID, DisableSCMPreviewAction.LABEL, '', true) || this;
        _this.windowService = windowService;
        _this.messageService = messageService;
        return _this;
    }
    DisableSCMPreviewAction.prototype.run = function () {
        var message = 'This will reload this window, do you want to continue?';
        var result = this.messageService.confirm({ message: message });
        if (!result) {
            return undefined;
        }
        SCMPreview.enabled = false;
        return this.windowService.reloadWindow();
    };
    return DisableSCMPreviewAction;
}(actions_1.Action));
DisableSCMPreviewAction.ID = 'disablescmpreview';
DisableSCMPreviewAction.LABEL = 'Disable Preview SCM';
DisableSCMPreviewAction = __decorate([
    __param(2, windows_1.IWindowService),
    __param(3, message_1.IMessageService)
], DisableSCMPreviewAction);
exports.DisableSCMPreviewAction = DisableSCMPreviewAction;
