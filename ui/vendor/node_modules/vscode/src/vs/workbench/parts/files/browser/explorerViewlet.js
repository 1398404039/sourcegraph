/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
require("./media/explorerviewlet.css");
var winjs_base_1 = require("vs/base/common/winjs.base");
var memento_1 = require("vs/workbench/common/memento");
var files_1 = require("vs/workbench/parts/files/common/files");
var viewlet_1 = require("vs/workbench/browser/viewlet");
var splitview_1 = require("vs/base/browser/ui/splitview/splitview");
var configuration_1 = require("vs/platform/configuration/common/configuration");
var explorerViewer_1 = require("vs/workbench/parts/files/browser/views/explorerViewer");
var explorerView_1 = require("vs/workbench/parts/files/browser/views/explorerView");
var emptyView_1 = require("vs/workbench/parts/files/browser/views/emptyView");
var openEditorsView_1 = require("vs/workbench/parts/files/browser/views/openEditorsView");
var storage_1 = require("vs/platform/storage/common/storage");
var instantiation_1 = require("vs/platform/instantiation/common/instantiation");
var workspace_1 = require("vs/platform/workspace/common/workspace");
var telemetry_1 = require("vs/platform/telemetry/common/telemetry");
var editorService_1 = require("vs/workbench/services/editor/browser/editorService");
var serviceCollection_1 = require("vs/platform/instantiation/common/serviceCollection");
var editorService_2 = require("vs/workbench/services/editor/common/editorService");
var groupService_1 = require("vs/workbench/services/group/common/groupService");
var contextkey_1 = require("vs/platform/contextkey/common/contextkey");
var ExplorerViewlet = (function (_super) {
    __extends(ExplorerViewlet, _super);
    function ExplorerViewlet(telemetryService, contextService, storageService, editorGroupService, editorService, configurationService, instantiationService, contextKeyService) {
        var _this = _super.call(this, files_1.VIEWLET_ID, telemetryService) || this;
        _this.contextService = contextService;
        _this.editorGroupService = editorGroupService;
        _this.editorService = editorService;
        _this.configurationService = configurationService;
        _this.instantiationService = instantiationService;
        _this.views = [];
        _this.viewletState = new explorerViewer_1.FileViewletState();
        _this.viewletVisibleContextKey = files_1.ExplorerViewletVisibleContext.bindTo(contextKeyService);
        _this.viewletSettings = _this.getMemento(storageService, memento_1.Scope.WORKSPACE);
        _this.configurationService.onDidUpdateConfiguration(function (e) { return _this.onConfigurationUpdated(e.config); });
        return _this;
    }
    ExplorerViewlet.prototype.create = function (parent) {
        _super.prototype.create.call(this, parent);
        this.viewletContainer = parent.div().addClass('explorer-viewlet');
        var settings = this.configurationService.getConfiguration();
        return this.onConfigurationUpdated(settings);
    };
    ExplorerViewlet.prototype.getActions = function () {
        if (this.openEditorsVisible) {
            return [];
        }
        if (this.explorerView) {
            return this.explorerView.getActions();
        }
        return [];
    };
    ExplorerViewlet.prototype.onConfigurationUpdated = function (config) {
        var _this = this;
        // No need to delay if preview is disabled
        this.delayEditorOpeningInOpenedEditors = !!config.workbench.editor.enablePreview;
        // Open editors view should always be visible in no folder workspace.
        var openEditorsVisible = !this.contextService.hasWorkspace() || config.explorer.openEditors.visible !== 0;
        // Create views on startup and if open editors visibility has changed #6919
        if (this.openEditorsVisible !== openEditorsVisible) {
            this.dispose();
            this.openEditorsVisible = openEditorsVisible;
            this.views = [];
            this.viewletContainer.clearChildren();
            if (this.openEditorsVisible) {
                this.splitView = new splitview_1.SplitView(this.viewletContainer.getHTMLElement());
                // Open editors view
                this.addOpenEditorsView();
                // Track focus
                this.focusListener = this.splitView.onFocus(function (view) {
                    _this.lastFocusedView = view;
                });
            }
            // Explorer view
            this.addExplorerView();
            this.lastFocusedView = this.explorerView;
            return winjs_base_1.TPromise.join(this.views.map(function (view) { return view.create(); })).then(function () { return void 0; }).then(function () {
                if (_this.dimension) {
                    _this.layout(_this.dimension);
                }
                // Update title area since the title actions have changed.
                _this.updateTitleArea();
                return _this.setVisible(_this.isVisible()).then(function () { return _this.focus(); }); // Focus the viewlet since that triggers a rerender.
            });
        }
        return winjs_base_1.TPromise.as(null);
    };
    ExplorerViewlet.prototype.addOpenEditorsView = function () {
        this.openEditorsView = this.instantiationService.createInstance(openEditorsView_1.OpenEditorsView, this.getActionRunner(), this.viewletSettings);
        this.splitView.addView(this.openEditorsView);
        this.views.push(this.openEditorsView);
    };
    ExplorerViewlet.prototype.addExplorerView = function () {
        var _this = this;
        var explorerOrEmptyView;
        // With a Workspace
        if (this.contextService.hasWorkspace()) {
            // Create a delegating editor service for the explorer to be able to delay the refresh in the opened
            // editors view above. This is a workaround for being able to double click on a file to make it pinned
            // without causing the animation in the opened editors view to kick in and change scroll position.
            // We try to be smart and only use the delay if we recognize that the user action is likely to cause
            // a new entry in the opened editors view.
            var delegatingEditorService = this.instantiationService.createInstance(editorService_1.DelegatingWorkbenchEditorService);
            delegatingEditorService.setEditorOpenHandler(function (input, options, arg3) {
                if (_this.openEditorsView) {
                    var delay = 0;
                    if (_this.delayEditorOpeningInOpenedEditors && (arg3 === false /* not side by side */ || typeof arg3 !== 'number' /* no explicit position */)) {
                        var activeGroup = _this.editorGroupService.getStacksModel().activeGroup;
                        if (!activeGroup || !activeGroup.previewEditor) {
                            delay = 250; // a new editor entry is likely because there is either no group or no preview in group
                        }
                    }
                    _this.openEditorsView.setStructuralRefreshDelay(delay);
                }
                var onSuccessOrError = function (editor) {
                    if (_this.openEditorsView) {
                        _this.openEditorsView.setStructuralRefreshDelay(0);
                    }
                    return editor;
                };
                return _this.editorService.openEditor(input, options, arg3).then(onSuccessOrError, onSuccessOrError);
            });
            var explorerInstantiator = this.instantiationService.createChild(new serviceCollection_1.ServiceCollection([editorService_2.IWorkbenchEditorService, delegatingEditorService]));
            var headerSize = this.openEditorsVisible ? undefined : 0; // If open editors are not visible set header size explicitly to 0, otherwise const it be computed by super class.
            this.explorerView = explorerOrEmptyView = explorerInstantiator.createInstance(explorerView_1.ExplorerView, this.viewletState, this.getActionRunner(), this.viewletSettings, headerSize);
        }
        else {
            this.emptyView = explorerOrEmptyView = this.instantiationService.createInstance(emptyView_1.EmptyView, this.getActionRunner());
        }
        if (this.openEditorsVisible) {
            this.splitView.addView(explorerOrEmptyView);
        }
        else {
            explorerOrEmptyView.render(this.viewletContainer.getHTMLElement(), splitview_1.Orientation.VERTICAL);
        }
        this.views.push(explorerOrEmptyView);
    };
    ExplorerViewlet.prototype.getExplorerView = function () {
        return this.explorerView;
    };
    ExplorerViewlet.prototype.getOpenEditorsView = function () {
        return this.openEditorsView;
    };
    ExplorerViewlet.prototype.setVisible = function (visible) {
        var _this = this;
        this.viewletVisibleContextKey.set(visible);
        return _super.prototype.setVisible.call(this, visible).then(function () {
            return winjs_base_1.TPromise.join(_this.views.map(function (view) { return view.setVisible(visible); })).then(function () { return void 0; });
        });
    };
    ExplorerViewlet.prototype.focus = function () {
        _super.prototype.focus.call(this);
        var hasOpenedEditors = !!this.editorGroupService.getStacksModel().activeGroup;
        if (this.lastFocusedView && this.lastFocusedView.isExpanded() && this.hasSelectionOrFocus(this.lastFocusedView)) {
            if (this.lastFocusedView !== this.openEditorsView || hasOpenedEditors) {
                this.lastFocusedView.focusBody();
                return;
            }
        }
        if (this.hasSelectionOrFocus(this.openEditorsView) && hasOpenedEditors) {
            return this.openEditorsView.focusBody();
        }
        if (this.hasSelectionOrFocus(this.explorerView)) {
            return this.explorerView.focusBody();
        }
        if (this.openEditorsView && this.openEditorsView.isExpanded() && hasOpenedEditors) {
            return this.openEditorsView.focusBody(); // we have entries in the opened editors view to focus on
        }
        if (this.explorerView && this.explorerView.isExpanded()) {
            return this.explorerView.focusBody();
        }
        if (this.emptyView && this.emptyView.isExpanded()) {
            return this.emptyView.focusBody();
        }
        return this.openEditorsView.focus();
    };
    ExplorerViewlet.prototype.hasSelectionOrFocus = function (view) {
        if (!view) {
            return false;
        }
        if (!view.isExpanded()) {
            return false;
        }
        if (view instanceof explorerView_1.ExplorerView || view instanceof openEditorsView_1.OpenEditorsView) {
            var viewer = view.getViewer();
            if (!viewer) {
                return false;
            }
            return !!viewer.getFocus() || (viewer.getSelection() && viewer.getSelection().length > 0);
        }
        return false;
    };
    ExplorerViewlet.prototype.layout = function (dimension) {
        this.dimension = dimension;
        if (this.openEditorsVisible) {
            this.splitView.layout(dimension.height);
        }
        else if (this.explorerView) {
            this.explorerView.layout(dimension.height, splitview_1.Orientation.VERTICAL);
        }
    };
    ExplorerViewlet.prototype.getActionRunner = function () {
        if (!this.actionRunner) {
            this.actionRunner = new explorerViewer_1.ActionRunner(this.viewletState);
        }
        return this.actionRunner;
    };
    ExplorerViewlet.prototype.getViewletState = function () {
        return this.viewletState;
    };
    ExplorerViewlet.prototype.getOptimalWidth = function () {
        var additionalMargin = 16;
        var openedEditorsViewWidth = this.openEditorsVisible ? this.openEditorsView.getOptimalWidth() : 0;
        var explorerView = this.getExplorerView();
        var explorerViewWidth = explorerView ? explorerView.getOptimalWidth() : 0;
        var optimalWidth = Math.max(openedEditorsViewWidth, explorerViewWidth);
        return optimalWidth + additionalMargin;
    };
    ExplorerViewlet.prototype.shutdown = function () {
        this.views.forEach(function (view) { return view.shutdown(); });
        _super.prototype.shutdown.call(this);
    };
    ExplorerViewlet.prototype.dispose = function () {
        if (this.splitView) {
            this.splitView.dispose();
            this.splitView = null;
        }
        if (this.explorerView) {
            this.explorerView.dispose();
            this.explorerView = null;
        }
        if (this.openEditorsView) {
            this.openEditorsView.dispose();
            this.openEditorsView = null;
        }
        if (this.emptyView) {
            this.emptyView.dispose();
            this.emptyView = null;
        }
        if (this.focusListener) {
            this.focusListener.dispose();
            this.focusListener = null;
        }
    };
    return ExplorerViewlet;
}(viewlet_1.Viewlet));
ExplorerViewlet = __decorate([
    __param(0, telemetry_1.ITelemetryService),
    __param(1, workspace_1.IWorkspaceContextService),
    __param(2, storage_1.IStorageService),
    __param(3, groupService_1.IEditorGroupService),
    __param(4, editorService_2.IWorkbenchEditorService),
    __param(5, configuration_1.IConfigurationService),
    __param(6, instantiation_1.IInstantiationService),
    __param(7, contextkey_1.IContextKeyService)
], ExplorerViewlet);
exports.ExplorerViewlet = ExplorerViewlet;
