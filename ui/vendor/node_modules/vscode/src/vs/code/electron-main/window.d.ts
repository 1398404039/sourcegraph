import * as platform from 'vs/base/common/platform';
import { IStorageService } from 'vs/code/electron-main/storage';
import { TPromise } from 'vs/base/common/winjs.base';
import { IEnvironmentService, ParsedArgs } from 'vs/platform/environment/common/environment';
import { ILogService } from 'vs/code/electron-main/log';
import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
export interface IWindowState {
    width?: number;
    height?: number;
    x?: number;
    y?: number;
    mode?: WindowMode;
}
export interface IWindowCreationOptions {
    state: IWindowState;
    extensionDevelopmentPath?: string;
    allowFullscreen?: boolean;
    titleBarStyle?: 'native' | 'custom';
}
export declare enum WindowMode {
    Maximized = 0,
    Normal = 1,
    Minimized = 2,
    Fullscreen = 3,
}
export declare const defaultWindowState: (mode?: WindowMode) => IWindowState;
export interface IPath {
    workspacePath?: string;
    filePath?: string;
    lineNumber?: number;
    columnNumber?: number;
    createFilePath?: boolean;
}
export interface IWindowConfiguration extends ParsedArgs {
    appRoot: string;
    execPath: string;
    userEnv: platform.IProcessEnvironment;
    zoomLevel?: number;
    fullscreen?: boolean;
    highContrast?: boolean;
    accessibilitySupport?: boolean;
    isInitialStartup?: boolean;
    perfStartTime?: number;
    perfWindowLoadTime?: number;
    workspacePath?: string;
    filesToOpen?: IPath[];
    filesToCreate?: IPath[];
    filesToDiff?: IPath[];
    nodeCachedDataDir: string;
}
export declare enum ReadyState {
    /**
     * This window has not loaded any HTML yet
     */
    NONE = 0,
    /**
     * This window is loading HTML
     */
    LOADING = 1,
    /**
     * This window is navigating to another HTML
     */
    NAVIGATING = 2,
    /**
     * This window is done loading HTML
     */
    READY = 3,
}
export interface IVSCodeWindow {
    id: number;
    readyState: ReadyState;
    win: Electron.BrowserWindow;
    send(channel: string, ...args: any[]): void;
}
export declare class VSCodeWindow implements IVSCodeWindow {
    private logService;
    private environmentService;
    private configurationService;
    private storageService;
    static menuBarHiddenKey: string;
    static colorThemeStorageKey: string;
    private static MIN_WIDTH;
    private static MIN_HEIGHT;
    private options;
    private hiddenTitleBarStyle;
    private showTimeoutHandle;
    private _id;
    private _win;
    private _lastFocusTime;
    private _readyState;
    private _extensionDevelopmentPath;
    private windowState;
    private currentWindowMode;
    private whenReadyCallbacks;
    private currentConfig;
    private pendingLoadConfig;
    constructor(config: IWindowCreationOptions, logService: ILogService, environmentService: IEnvironmentService, configurationService: IConfigurationService, storageService: IStorageService);
    hasHiddenTitleBarStyle(): boolean;
    readonly isPluginDevelopmentHost: boolean;
    readonly extensionDevelopmentPath: string;
    readonly config: IWindowConfiguration;
    readonly id: number;
    readonly win: Electron.BrowserWindow;
    focus(): void;
    readonly lastFocusTime: number;
    readonly openedWorkspacePath: string;
    readonly openedFilePath: string;
    setReady(): void;
    ready(): TPromise<VSCodeWindow>;
    readonly readyState: ReadyState;
    private registerListeners();
    load(config: IWindowConfiguration): void;
    reload(cli?: ParsedArgs): void;
    private getUrl(windowConfiguration);
    serializeWindowState(): IWindowState;
    private restoreWindowState(state?);
    private validateWindowState(state);
    getBounds(): Electron.Rectangle;
    toggleFullScreen(): void;
    setMenuBarVisibility(visible: boolean): void;
    sendWhenReady(channel: string, ...args: any[]): void;
    send(channel: string, ...args: any[]): void;
    dispose(): void;
}
