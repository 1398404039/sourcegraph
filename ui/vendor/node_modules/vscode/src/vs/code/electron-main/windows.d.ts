import * as platform from 'vs/base/common/platform';
import { IBackupMainService } from 'vs/platform/backup/common/backup';
import { IEnvironmentService, ParsedArgs } from 'vs/platform/environment/common/environment';
import { IStorageService } from 'vs/code/electron-main/storage';
import { IPath, VSCodeWindow } from 'vs/code/electron-main/window';
import { ILifecycleService } from 'vs/code/electron-main/lifecycle';
import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
import { ILogService } from 'vs/code/electron-main/log';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import CommonEvent from 'vs/base/common/event';
export interface IOpenConfiguration {
    cli: ParsedArgs;
    userEnv?: platform.IProcessEnvironment;
    pathsToOpen?: string[];
    preferNewWindow?: boolean;
    forceNewWindow?: boolean;
    forceEmpty?: boolean;
    windowToUse?: VSCodeWindow;
    diffMode?: boolean;
    initialStartup?: boolean;
}
export interface IRecentPathsList {
    folders: string[];
    files: string[];
}
export declare const IWindowsMainService: {
    (...args: any[]): void;
    type: IWindowsMainService;
};
export interface IWindowsMainService {
    _serviceBrand: any;
    onWindowReady: CommonEvent<VSCodeWindow>;
    onWindowClose: CommonEvent<number>;
    onPathsOpen: CommonEvent<IPath[]>;
    onRecentPathsChange: CommonEvent<void>;
    ready(initialUserEnv: platform.IProcessEnvironment): void;
    reload(win: VSCodeWindow, cli?: ParsedArgs): void;
    open(openConfig: IOpenConfiguration): VSCodeWindow[];
    openPluginDevelopmentHostWindow(openConfig: IOpenConfiguration): void;
    openFileFolderPicker(forceNewWindow?: boolean): void;
    openFilePicker(forceNewWindow?: boolean, path?: string, window?: VSCodeWindow): void;
    openFolderPicker(forceNewWindow?: boolean, window?: VSCodeWindow): void;
    openAccessibilityOptions(): void;
    focusLastActive(cli: ParsedArgs): VSCodeWindow;
    getLastActiveWindow(): VSCodeWindow;
    findWindow(workspacePath: string, filePath?: string, extensionDevelopmentPath?: string): VSCodeWindow;
    openNewWindow(): void;
    sendToFocused(channel: string, ...args: any[]): void;
    sendToAll(channel: string, payload: any, windowIdsToIgnore?: number[]): void;
    getFocusedWindow(): VSCodeWindow;
    getWindowById(windowId: number): VSCodeWindow;
    getWindows(): VSCodeWindow[];
    getWindowCount(): number;
    addToRecentPathsList(paths: {
        path: string;
        isFile?: boolean;
    }[]): void;
    getRecentPathsList(workspacePath?: string, filesToOpen?: IPath[]): IRecentPathsList;
    removeFromRecentPathsList(path: string): void;
    removeFromRecentPathsList(paths: string[]): void;
    clearRecentPathsList(): void;
    toggleMenuBar(windowId: number): void;
    quit(): void;
}
export declare class WindowsManager implements IWindowsMainService {
    private instantiationService;
    private logService;
    private storageService;
    private environmentService;
    private lifecycleService;
    private backupService;
    private configurationService;
    _serviceBrand: any;
    private static MAX_TOTAL_RECENT_ENTRIES;
    private static recentPathsListStorageKey;
    private static workingDirPickerStorageKey;
    private static windowsStateStorageKey;
    private static WINDOWS;
    private initialUserEnv;
    private windowsState;
    private _onRecentPathsChange;
    onRecentPathsChange: CommonEvent<void>;
    private _onWindowReady;
    onWindowReady: CommonEvent<VSCodeWindow>;
    private _onWindowClose;
    onWindowClose: CommonEvent<number>;
    private _onPathsOpen;
    onPathsOpen: CommonEvent<IPath>;
    constructor(instantiationService: IInstantiationService, logService: ILogService, storageService: IStorageService, environmentService: IEnvironmentService, lifecycleService: ILifecycleService, backupService: IBackupMainService, configurationService: IConfigurationService);
    ready(initialUserEnv: platform.IProcessEnvironment): void;
    private registerListeners();
    private onBroadcast(event, payload);
    reload(win: VSCodeWindow, cli?: ParsedArgs): void;
    open(openConfig: IOpenConfiguration): VSCodeWindow[];
    addToRecentPathsList(paths: {
        path: string;
        isFile?: boolean;
    }[]): void;
    removeFromRecentPathsList(path: string): void;
    removeFromRecentPathsList(paths: string[]): void;
    clearRecentPathsList(): void;
    getRecentPathsList(workspacePath?: string, filesToOpen?: IPath[]): IRecentPathsList;
    private getWindowUserEnv(openConfig);
    openPluginDevelopmentHostWindow(openConfig: IOpenConfiguration): void;
    private toConfiguration(config, workspacePath?, filesToOpen?, filesToCreate?, filesToDiff?);
    private toIPath(anyPath, ignoreFileNotFound?, gotoLineMode?);
    private cliToPaths(cli, ignoreFileNotFound?);
    private openInBrowserWindow(configuration, forceNewWindow?, windowToUse?, emptyWorkspaceBackupFolder?);
    private getNewWindowState(configuration);
    private ensureNoOverlap(state);
    openFileFolderPicker(forceNewWindow?: boolean): void;
    openFilePicker(forceNewWindow?: boolean, path?: string, window?: VSCodeWindow): void;
    openFolderPicker(forceNewWindow?: boolean, window?: VSCodeWindow): void;
    openAccessibilityOptions(): void;
    private doPickAndOpen(options);
    private getFileOrFolderPaths(options, clb);
    focusLastActive(cli: ParsedArgs): VSCodeWindow;
    getLastActiveWindow(): VSCodeWindow;
    findWindow(workspacePath: string, filePath?: string, extensionDevelopmentPath?: string): VSCodeWindow;
    openNewWindow(): void;
    sendToFocused(channel: string, ...args: any[]): void;
    sendToAll(channel: string, payload: any, windowIdsToIgnore?: number[]): void;
    getFocusedWindow(): VSCodeWindow;
    getWindowById(windowId: number): VSCodeWindow;
    getWindows(): VSCodeWindow[];
    getWindowCount(): number;
    private onWindowError(vscodeWindow, error);
    private onBeforeWindowClose(win);
    private onWindowClosed(win);
    private isPathEqual(pathA, pathB);
    toggleMenuBar(windowId: number): void;
    private updateWindowsJumpList();
    quit(): void;
}
