import { IEnvironmentService } from 'vs/platform/environment/common/environment';
import { IWindowsMainService } from 'vs/code/electron-main/windows';
import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
import { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';
import { IUpdateService } from 'vs/platform/update/common/update';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
export declare class VSCodeMenu {
    private updateService;
    private configurationService;
    private windowsService;
    private environmentService;
    private telemetryService;
    private static MAX_MENU_RECENT_ENTRIES;
    private currentAutoSaveSetting;
    private currentSidebarLocation;
    private currentStatusbarVisible;
    private currentActivityBarVisible;
    private isQuitting;
    private appMenuInstalled;
    private menuUpdater;
    private keybindingsResolver;
    private extensionViewlets;
    constructor(updateService: IUpdateService, instantiationService: IInstantiationService, configurationService: IConfigurationService, windowsService: IWindowsMainService, environmentService: IEnvironmentService, telemetryService: ITelemetryService);
    private registerListeners();
    private onConfigurationUpdated(config, handleMenu?);
    private updateMenu();
    private doUpdateMenu();
    private onClose(remainingWindowCount);
    private install();
    private setMacApplicationMenu(macApplicationMenu);
    private setFileMenu(fileMenu);
    private getPreferencesMenu();
    private setOpenRecentMenu(openRecentMenu);
    private createOpenRecentMenuItem(path, commandId);
    private isOptionClick(event);
    private createRoleMenuItem(label, commandId, role);
    private setEditMenu(winLinuxEditMenu);
    private setSelectionMenu(winLinuxEditMenu);
    private setViewMenu(viewMenu);
    private setGotoMenu(gotoMenu);
    private setDebugMenu(debugMenu);
    private setMacWindowMenu(macWindowMenu);
    private toggleDevTools();
    private setHelpMenu(helpMenu);
    private getUpdateMenuItems();
    private createMenuItem(label, commandId, enabled?, checked?);
    private createMenuItem(label, click, enabled?, checked?);
    private createDevToolsAwareMenuItem(label, commandId, devToolsFocusedFn);
    private withKeybinding(commandId, options);
    private likeAction(commandId, options, setAccelerator?);
    private openAboutDialog();
    private openUrl(url, id);
    private reportMenuActionTelemetry(id);
}
