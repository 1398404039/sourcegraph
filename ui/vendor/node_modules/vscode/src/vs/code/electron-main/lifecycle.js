/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var electron_1 = require("electron");
var winjs_base_1 = require("vs/base/common/winjs.base");
var window_1 = require("vs/code/electron-main/window");
var environment_1 = require("vs/platform/environment/common/environment");
var log_1 = require("vs/code/electron-main/log");
var storage_1 = require("vs/code/electron-main/storage");
var event_1 = require("vs/base/common/event");
var instantiation_1 = require("vs/platform/instantiation/common/instantiation");
exports.ILifecycleService = instantiation_1.createDecorator('lifecycleService');
var UnloadReason;
(function (UnloadReason) {
    UnloadReason[UnloadReason["CLOSE"] = 0] = "CLOSE";
    UnloadReason[UnloadReason["QUIT"] = 1] = "QUIT";
    UnloadReason[UnloadReason["RELOAD"] = 2] = "RELOAD";
    UnloadReason[UnloadReason["LOAD"] = 3] = "LOAD";
})(UnloadReason = exports.UnloadReason || (exports.UnloadReason = {}));
var LifecycleService = (function () {
    function LifecycleService(environmentService, logService, storageService) {
        this.environmentService = environmentService;
        this.logService = logService;
        this.storageService = storageService;
        this._onBeforeQuit = new event_1.Emitter();
        this.onBeforeQuit = this._onBeforeQuit.event;
        this._onBeforeWindowClose = new event_1.Emitter();
        this.onBeforeWindowClose = this._onBeforeWindowClose.event;
        this.windowToCloseRequest = Object.create(null);
        this.quitRequested = false;
        this.oneTimeListenerTokenGenerator = 0;
        this._wasUpdated = false;
        this.handleUpdated();
    }
    LifecycleService.prototype.handleUpdated = function () {
        this._wasUpdated = !!this.storageService.getItem(LifecycleService.QUIT_FROM_UPDATE_MARKER);
        if (this._wasUpdated) {
            this.storageService.removeItem(LifecycleService.QUIT_FROM_UPDATE_MARKER); // remove the marker right after if found
        }
    };
    Object.defineProperty(LifecycleService.prototype, "wasUpdated", {
        get: function () {
            return this._wasUpdated;
        },
        enumerable: true,
        configurable: true
    });
    LifecycleService.prototype.ready = function () {
        this.registerListeners();
    };
    LifecycleService.prototype.registerListeners = function () {
        var _this = this;
        // before-quit
        electron_1.app.on('before-quit', function (e) {
            _this.logService.log('Lifecycle#before-quit');
            if (!_this.quitRequested) {
                _this._onBeforeQuit.fire(); // only send this if this is the first quit request we have
            }
            _this.quitRequested = true;
        });
        // window-all-closed
        electron_1.app.on('window-all-closed', function () {
            _this.logService.log('Lifecycle#window-all-closed');
            // Windows/Linux: we quit when all windows have closed
            // Mac: we only quit when quit was requested
            // --wait: we quit when all windows are closed
            if (_this.quitRequested || process.platform !== 'darwin' || _this.environmentService.wait) {
                electron_1.app.quit();
            }
        });
    };
    LifecycleService.prototype.registerWindow = function (vscodeWindow) {
        var _this = this;
        // Window Before Closing: Main -> Renderer
        vscodeWindow.win.on('close', function (e) {
            var windowId = vscodeWindow.id;
            _this.logService.log('Lifecycle#window-before-close', windowId);
            // The window already acknowledged to be closed
            if (_this.windowToCloseRequest[windowId]) {
                _this.logService.log('Lifecycle#window-close', windowId);
                delete _this.windowToCloseRequest[windowId];
                return;
            }
            // Otherwise prevent unload and handle it from window
            e.preventDefault();
            _this.unload(vscodeWindow, UnloadReason.CLOSE).done(function (veto) {
                if (!veto) {
                    _this.windowToCloseRequest[windowId] = true;
                    _this._onBeforeWindowClose.fire(vscodeWindow);
                    vscodeWindow.win.close();
                }
                else {
                    _this.quitRequested = false;
                    delete _this.windowToCloseRequest[windowId];
                }
            });
        });
    };
    LifecycleService.prototype.unload = function (vscodeWindow, reason) {
        var _this = this;
        // Always allow to unload a window that is not yet ready
        if (vscodeWindow.readyState !== window_1.ReadyState.READY) {
            return winjs_base_1.TPromise.as(false);
        }
        this.logService.log('Lifecycle#unload()', vscodeWindow.id);
        return new winjs_base_1.TPromise(function (c) {
            var oneTimeEventToken = _this.oneTimeListenerTokenGenerator++;
            var okChannel = "vscode:ok" + oneTimeEventToken;
            var cancelChannel = "vscode:cancel" + oneTimeEventToken;
            electron_1.ipcMain.once(okChannel, function () {
                c(false); // no veto
            });
            electron_1.ipcMain.once(cancelChannel, function () {
                // Any cancellation also cancels a pending quit if present
                if (_this.pendingQuitPromiseComplete) {
                    _this.pendingQuitPromiseComplete(true /* veto */);
                    _this.pendingQuitPromiseComplete = null;
                    _this.pendingQuitPromise = null;
                }
                c(true); // veto
            });
            vscodeWindow.send('vscode:beforeUnload', { okChannel: okChannel, cancelChannel: cancelChannel, reason: _this.quitRequested ? UnloadReason.QUIT : reason });
        });
    };
    /**
     * A promise that completes to indicate if the quit request has been veto'd
     * by the user or not.
     */
    LifecycleService.prototype.quit = function (fromUpdate) {
        var _this = this;
        this.logService.log('Lifecycle#quit()');
        if (!this.pendingQuitPromise) {
            this.pendingQuitPromise = new winjs_base_1.TPromise(function (c) {
                // Store as field to access it from a window cancellation
                _this.pendingQuitPromiseComplete = c;
                electron_1.app.once('will-quit', function () {
                    if (_this.pendingQuitPromiseComplete) {
                        if (fromUpdate) {
                            _this.storageService.setItem(LifecycleService.QUIT_FROM_UPDATE_MARKER, true);
                        }
                        _this.pendingQuitPromiseComplete(false /* no veto */);
                        _this.pendingQuitPromiseComplete = null;
                        _this.pendingQuitPromise = null;
                    }
                });
                electron_1.app.quit();
            });
        }
        return this.pendingQuitPromise;
    };
    LifecycleService.prototype.isQuitRequested = function () {
        return !!this.quitRequested;
    };
    return LifecycleService;
}());
LifecycleService.QUIT_FROM_UPDATE_MARKER = 'quit.from.update'; // use a marker to find out if an update was applied in the previous session
LifecycleService = __decorate([
    __param(0, environment_1.IEnvironmentService),
    __param(1, log_1.ILogService),
    __param(2, storage_1.IStorageService)
], LifecycleService);
exports.LifecycleService = LifecycleService;
