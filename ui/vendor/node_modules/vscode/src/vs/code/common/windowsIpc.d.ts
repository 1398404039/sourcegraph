import { TPromise } from 'vs/base/common/winjs.base';
import { IChannel } from 'vs/base/parts/ipc/common/ipc';
import { IWindowEventService } from 'vs/code/common/windows';
import Event from 'vs/base/common/event';
export interface IWindowEventChannel extends IChannel {
    call(command: 'event:onNewWindowOpen'): TPromise<number>;
    call(command: 'event:onWindowFocus'): TPromise<number>;
    call(command: string, arg?: any): any;
}
export declare class WindowEventChannel implements IWindowEventChannel {
    private service;
    onNewWindowOpen: Event<number>;
    onWindowFocus: Event<number>;
    constructor(service: IWindowEventService);
    call(command: string, args?: any): any;
}
export declare class WindowEventChannelClient implements IWindowEventService {
    private channel;
    _serviceBrand: any;
    constructor(channel: IWindowEventChannel);
    private _onNewWindowOpen;
    readonly onNewWindowOpen: Event<number>;
    private _onWindowFocus;
    readonly onWindowFocus: Event<number>;
}
