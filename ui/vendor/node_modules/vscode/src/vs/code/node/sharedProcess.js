/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
var cp = require("child_process");
var uri_1 = require("vs/base/common/uri");
var objects_1 = require("vs/base/common/objects");
var winjs_base_1 = require("vs/base/common/winjs.base");
var boostrapPath = uri_1.default.parse(require.toUrl('bootstrap')).fsPath;
function _spawnSharedProcess(initData, options) {
    var execArgv = [];
    var env = objects_1.assign({}, process.env, {
        AMD_ENTRYPOINT: 'vs/code/node/sharedProcessMain',
        ELECTRON_NO_ASAR: '1'
    });
    if (options.allowOutput) {
        env['VSCODE_ALLOW_IO'] = 'true';
    }
    if (options.debugPort) {
        execArgv.push("--debug=" + options.debugPort);
    }
    var result = cp.fork(boostrapPath, ['--type=SharedProcess'], { env: env, execArgv: execArgv });
    return result;
}
function spawnSharedProcess(initData, options) {
    if (options === void 0) { options = {}; }
    var spawnCount = 0;
    var child;
    var promise;
    var spawn = function () {
        if (++spawnCount > 10) {
            return;
        }
        child = _spawnSharedProcess(initData, options);
        promise = new winjs_base_1.TPromise(function (c, e) {
            // handshake
            child.once('message', function () {
                child.send(initData);
                c({
                    dispose: function () {
                        if (child) {
                            child.removeListener('exit', spawn);
                            child.kill();
                            child = null;
                        }
                    }
                });
            });
        });
        child.on('exit', spawn);
    };
    spawn();
    return promise;
}
exports.spawnSharedProcess = spawnSharedProcess;
