/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
"use strict";
var child_process_1 = require("child_process");
var winjs_base_1 = require("vs/base/common/winjs.base");
var objects_1 = require("vs/base/common/objects");
var argv_1 = require("vs/platform/environment/node/argv");
var product_1 = require("vs/platform/product");
var package_1 = require("vs/platform/package");
function shouldSpawnCliProcess(argv) {
    return argv['list-extensions'] || !!argv['install-extension'] || !!argv['uninstall-extension'];
}
function main(argv) {
    var args;
    try {
        args = argv_1.parseCLIProcessArgv(argv);
    }
    catch (err) {
        console.error(err.message);
        return winjs_base_1.TPromise.as(null);
    }
    if (args.help) {
        console.log(argv_1.buildHelpMessage(product_1.default.nameLong, product_1.default.applicationName, package_1.default.version));
    }
    else if (args.version) {
        console.log(package_1.default.version + "\n" + product_1.default.commit);
    }
    else if (shouldSpawnCliProcess(args)) {
        var mainCli = new winjs_base_1.TPromise(function (c) { return require(['vs/code/node/cliProcessMain'], c); });
        return mainCli.then(function (cli) { return cli.main(args); });
    }
    else {
        var env = objects_1.assign({}, process.env, {
            // this will signal Code that it was spawned from this module
            'VSCODE_CLI': '1',
            'ELECTRON_NO_ATTACH_CONSOLE': '1'
        });
        delete env['ELECTRON_RUN_AS_NODE'];
        if (args.verbose) {
            env['ELECTRON_ENABLE_LOGGING'] = '1';
        }
        var options = {
            detached: true,
            env: env,
        };
        if (!args.verbose) {
            options['stdio'] = 'ignore';
        }
        var child_1 = child_process_1.spawn(process.execPath, argv.slice(2), options);
        if (args.verbose) {
            child_1.stdout.on('data', function (data) { return console.log(data.toString('utf8').trim()); });
            child_1.stderr.on('data', function (data) { return console.log(data.toString('utf8').trim()); });
        }
        if (args.wait || args.verbose) {
            return new winjs_base_1.TPromise(function (c) { return child_1.once('exit', function () { return c(null); }); });
        }
    }
    return winjs_base_1.TPromise.as(null);
}
exports.main = main;
main(process.argv)
    .then(function () { return process.exit(0); })
    .then(null, function (err) {
    console.error(err.stack ? err.stack : err);
    process.exit(1);
});
