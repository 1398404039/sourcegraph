/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var path = require("path");
var fs = require("fs");
var platform = require("vs/base/common/platform");
var paths = require("vs/base/common/paths");
var windows_1 = require("vs/code/common/windows");
function findBestWindowOrFolder(_a) {
    var windows = _a.windows, newWindow = _a.newWindow, reuseWindow = _a.reuseWindow, context = _a.context, filePath = _a.filePath, userHome = _a.userHome, vscodeFolder = _a.vscodeFolder;
    // OpenContext.DOCK implies newWindow unless overwritten by settings.
    var findBest = filePath && (context === windows_1.OpenContext.DESKTOP || context === windows_1.OpenContext.CLI || context === windows_1.OpenContext.DOCK);
    var bestWindow = !newWindow && findBest && findBestWindow(windows, filePath);
    var bestFolder = !newWindow && !reuseWindow && findBest && findBestFolder(filePath, userHome, vscodeFolder);
    if (bestWindow && !(bestFolder && bestFolder.length > bestWindow.openedWorkspacePath.length)) {
        return bestWindow;
    }
    else if (bestFolder) {
        return bestFolder;
    }
    return !newWindow ? getLastActiveWindow(windows) : null;
}
exports.findBestWindowOrFolder = findBestWindowOrFolder;
function findBestWindow(windows, filePath) {
    var containers = windows.filter(function (window) { return typeof window.openedWorkspacePath === 'string' && paths.isEqualOrParent(filePath, window.openedWorkspacePath); });
    if (containers.length) {
        return containers.sort(function (a, b) { return -(a.openedWorkspacePath.length - b.openedWorkspacePath.length); })[0];
    }
    return null;
}
function findBestFolder(filePath, userHome, vscodeFolder) {
    var folder = path.dirname(paths.normalize(filePath, true));
    var homeFolder = userHome && paths.normalize(userHome, true);
    if (!platform.isLinux) {
        homeFolder = homeFolder && homeFolder.toLowerCase();
    }
    var previous = null;
    try {
        while (folder !== previous) {
            if (isProjectFolder(folder, homeFolder, vscodeFolder)) {
                return folder;
            }
            previous = folder;
            folder = path.dirname(folder);
        }
    }
    catch (err) {
    }
    return null;
}
function isProjectFolder(folder, normalizedUserHome, vscodeFolder) {
    if (vscodeFolder === void 0) { vscodeFolder = '.vscode'; }
    try {
        if ((platform.isLinux ? folder : folder.toLowerCase()) === normalizedUserHome) {
            // ~/.vscode/extensions is used for extensions
            return fs.statSync(path.join(folder, vscodeFolder, 'settings.json')).isFile();
        }
        else {
            return fs.statSync(path.join(folder, vscodeFolder)).isDirectory();
        }
    }
    catch (err) {
        if (!(err && err.code === 'ENOENT')) {
            throw err;
        }
    }
    return false;
}
function getLastActiveWindow(windows) {
    if (windows.length) {
        var lastFocussedDate_1 = Math.max.apply(Math, windows.map(function (w) { return w.lastFocusTime; }));
        var res = windows.filter(function (w) { return w.lastFocusTime === lastFocussedDate_1; });
        if (res && res.length) {
            return res[0];
        }
    }
    return null;
}
exports.getLastActiveWindow = getLastActiveWindow;
