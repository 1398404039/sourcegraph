/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var winjs_base_1 = require("vs/base/common/winjs.base");
var mime_1 = require("vs/base/common/mime");
var paths = require("vs/base/common/paths");
var configuration_1 = require("vs/platform/configuration/common/configuration");
var keybinding_1 = require("vs/platform/keybinding/common/keybinding");
var lifecycle_1 = require("vs/platform/lifecycle/common/lifecycle");
var storage_1 = require("vs/platform/storage/common/storage");
var workspace_1 = require("vs/platform/workspace/common/workspace");
var storageService_1 = require("vs/platform/storage/common/storageService");
var objects = require("vs/base/common/objects");
exports.defaultExperiments = {
    showNewUserWatermark: false,
    openUntitledFile: true,
    enableWelcomePage: true,
    reorderQuickLinks: false,
};
exports.NullTelemetryService = {
    _serviceBrand: undefined,
    _experiments: exports.defaultExperiments,
    publicLog: function (eventName, data) {
        return winjs_base_1.TPromise.as(null);
    },
    isOptedIn: true,
    getTelemetryInfo: function () {
        return winjs_base_1.TPromise.as({
            instanceId: 'someValue.instanceId',
            sessionId: 'someValue.sessionId',
            machineId: 'someValue.machineId'
        });
    },
    getExperiments: function () {
        return this._experiments;
    }
};
function loadExperiments(accessor) {
    var contextService = accessor.get(workspace_1.IWorkspaceContextService);
    var storageService = accessor.get(storage_1.IStorageService);
    var configurationService = accessor.get(configuration_1.IConfigurationService);
    updateExperimentsOverrides(configurationService);
    configurationService.onDidUpdateConfiguration(function (e) { return updateExperimentsOverrides(configurationService); });
    var _a = splitExperimentsRandomness(), showNewUserWatermark = _a.showNewUserWatermark, openUntitledFile = _a.openUntitledFile, enableWelcomePage = _a.enableWelcomePage, reorderQuickLinks = _a.reorderQuickLinks;
    var newUserDuration = 24 * 60 * 60 * 1000;
    var firstSessionDate = storageService.get('telemetry.firstSessionDate');
    var isNewUser = !firstSessionDate || Date.now() - Date.parse(firstSessionDate) < newUserDuration;
    if (!isNewUser || contextService.hasWorkspace()) {
        showNewUserWatermark = exports.defaultExperiments.showNewUserWatermark;
        openUntitledFile = exports.defaultExperiments.openUntitledFile;
    }
    return applyOverrides({
        showNewUserWatermark: showNewUserWatermark,
        openUntitledFile: openUntitledFile,
        enableWelcomePage: enableWelcomePage,
        reorderQuickLinks: reorderQuickLinks,
    });
}
exports.loadExperiments = loadExperiments;
function isWelcomePageEnabled() {
    var overrides = getExperimentsOverrides();
    return 'enableWelcomePage' in overrides ? overrides.enableWelcomePage : splitExperimentsRandomness().enableWelcomePage;
}
exports.isWelcomePageEnabled = isWelcomePageEnabled;
function applyOverrides(experiments) {
    var experimentsConfig = getExperimentsOverrides();
    Object.keys(experiments).forEach(function (key) {
        if (key in experimentsConfig) {
            experiments[key] = experimentsConfig[key];
        }
    });
    return experiments;
}
function splitExperimentsRandomness() {
    var random1 = getExperimentsRandomness();
    var _a = splitRandom(random1), random2 = _a[0], showNewUserWatermark = _a[1];
    var _b = splitRandom(random2), random3 = _b[0], openUntitledFile = _b[1];
    var _c = splitRandom(random3), random4 = _c[0], reorderQuickLinks = _c[1];
    var _d = splitRandom(random4), enableWelcomePage = _d[1];
    return {
        showNewUserWatermark: showNewUserWatermark,
        openUntitledFile: openUntitledFile,
        enableWelcomePage: enableWelcomePage,
        reorderQuickLinks: reorderQuickLinks,
    };
}
function getExperimentsRandomness() {
    var key = storageService_1.StorageService.GLOBAL_PREFIX + 'experiments.randomness';
    var valueString = window.localStorage.getItem(key);
    if (!valueString) {
        valueString = Math.random().toString();
        window.localStorage.setItem(key, valueString);
    }
    return parseFloat(valueString);
}
function splitRandom(random) {
    var scaled = random * 2;
    var i = Math.floor(scaled);
    return [scaled - i, i === 1];
}
var experimentsOverridesKey = storageService_1.StorageService.GLOBAL_PREFIX + 'experiments.overrides';
function getExperimentsOverrides() {
    var valueString = window.localStorage.getItem(experimentsOverridesKey);
    return valueString ? JSON.parse(valueString) : {};
}
function updateExperimentsOverrides(configurationService) {
    var storageOverrides = getExperimentsOverrides();
    var config = configurationService.getConfiguration('telemetry');
    var configOverrides = config && config.experiments || {};
    if (!objects.equals(storageOverrides, configOverrides)) {
        window.localStorage.setItem(experimentsOverridesKey, JSON.stringify(configOverrides));
    }
}
function combinedAppender() {
    var appenders = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        appenders[_i] = arguments[_i];
    }
    return { log: function (e, d) { return appenders.forEach(function (a) { return a.log(e, d); }); } };
}
exports.combinedAppender = combinedAppender;
exports.NullAppender = { log: function () { return null; } };
// --- util
function anonymize(input) {
    if (!input) {
        return input;
    }
    var r = '';
    for (var i = 0; i < input.length; i++) {
        var ch = input[i];
        if (ch >= '0' && ch <= '9') {
            r += '0';
            continue;
        }
        if (ch >= 'a' && ch <= 'z') {
            r += 'a';
            continue;
        }
        if (ch >= 'A' && ch <= 'Z') {
            r += 'A';
            continue;
        }
        r += ch;
    }
    return r;
}
exports.anonymize = anonymize;
function telemetryURIDescriptor(uri) {
    var fsPath = uri && uri.fsPath;
    return fsPath ? { mimeType: mime_1.guessMimeTypes(fsPath).join(', '), ext: paths.extname(fsPath), path: anonymize(fsPath) } : {};
}
exports.telemetryURIDescriptor = telemetryURIDescriptor;
/**
 * Only add settings that cannot contain any personal/private information of users (PII).
 */
var configurationValueWhitelist = [
    'window.zoomLevel',
    'editor.fontSize',
    'editor.fontFamily',
    'editor.tabSize',
    'files.autoSave',
    'files.hotExit',
    'typescript.check.tscVersion',
    'editor.renderWhitespace',
    'editor.cursorBlinking',
    'editor.cursorStyle',
    'files.associations',
    'workbench.statusBar.visible',
    'editor.wordWrap',
    'editor.wordWrapColumn',
    'editor.insertSpaces',
    'editor.renderIndentGuides',
    'files.trimTrailingWhitespace',
    'git.confirmSync',
    'editor.rulers',
    'workbench.sideBar.location',
    'editor.fontLigatures',
    'editor.wordWrap',
    'editor.lineHeight',
    'editor.detectIndentation',
    'editor.formatOnType',
    'editor.formatOnSave',
    'editor.formatOnPaste',
    'editor.dragAndDrop',
    'window.openFilesInNewWindow',
    'javascript.validate.enable',
    'editor.mouseWheelZoom',
    'editor.fontWeight',
    'editor.scrollBeyondLastLine',
    'editor.lineNumbers',
    'editor.wrappingIndent',
    'editor.renderControlCharacters',
    'editor.autoClosingBrackets',
    'window.reopenFolders',
    'extensions.autoUpdate',
    'editor.tabCompletion',
    'files.eol',
    'explorer.openEditors.visible',
    'workbench.editor.enablePreview',
    'files.autoSaveDelay',
    'editor.roundedSelection',
    'editor.quickSuggestions',
    'editor.acceptSuggestionOnEnter',
    'editor.acceptSuggestionOnCommitCharacter',
    'workbench.editor.showTabs',
    'files.encoding',
    'editor.quickSuggestionsDelay',
    'editor.snippetSuggestions',
    'editor.selectionHighlight',
    'editor.occurrencesHighlight',
    'editor.glyphMargin',
    'editor.wordSeparators',
    'editor.mouseWheelScrollSensitivity',
    'editor.suggestOnTriggerCharacters',
    'git.enabled',
    'http.proxyStrictSSL',
    'terminal.integrated.fontFamily',
    'editor.overviewRulerLanes',
    'editor.overviewRulerBorder',
    'editor.wordBasedSuggestions',
    'editor.hideCursorInOverviewRuler',
    'editor.trimAutoWhitespace',
    'editor.folding',
    'editor.matchBrackets',
    'workbench.editor.enablePreviewFromQuickOpen',
    'php.builtInCompletions.enable',
    'php.validate.enable',
    'php.validate.run',
    'editor.parameterHints',
    'workbench.welcome.enabled',
];
function configurationTelemetry(telemetryService, configurationService) {
    return configurationService.onDidUpdateConfiguration(function (event) {
        if (event.source !== configuration_1.ConfigurationSource.Default) {
            telemetryService.publicLog('updateConfiguration', {
                configurationSource: configuration_1.ConfigurationSource[event.source],
                configurationKeys: flattenKeys(event.sourceConfig)
            });
            telemetryService.publicLog('updateConfigurationValues', {
                configurationSource: configuration_1.ConfigurationSource[event.source],
                configurationValues: flattenValues(event.sourceConfig, configurationValueWhitelist)
            });
        }
    });
}
exports.configurationTelemetry = configurationTelemetry;
function lifecycleTelemetry(telemetryService, lifecycleService) {
    return lifecycleService.onShutdown(function (event) {
        telemetryService.publicLog('shutdown', { reason: lifecycle_1.ShutdownReason[event] });
    });
}
exports.lifecycleTelemetry = lifecycleTelemetry;
function keybindingsTelemetry(telemetryService, keybindingService) {
    return keybindingService.onDidUpdateKeybindings(function (event) {
        if (event.source === keybinding_1.KeybindingSource.User && event.keybindings) {
            telemetryService.publicLog('updateKeybindings', {
                bindings: event.keybindings.map(function (binding) { return ({
                    key: binding.key,
                    command: binding.command,
                    when: binding.when,
                    args: binding.args ? true : undefined
                }); })
            });
        }
    });
}
exports.keybindingsTelemetry = keybindingsTelemetry;
function flattenKeys(value) {
    if (!value) {
        return [];
    }
    var result = [];
    flatKeys(result, '', value);
    return result;
}
function flatKeys(result, prefix, value) {
    if (value && typeof value === 'object' && !Array.isArray(value)) {
        Object.keys(value)
            .forEach(function (key) { return flatKeys(result, prefix ? prefix + "." + key : key, value[key]); });
    }
    else {
        result.push(prefix);
    }
}
function flattenValues(value, keys) {
    if (!value) {
        return [];
    }
    return keys.reduce(function (array, key) {
        var v = key.split('.')
            .reduce(function (tmp, k) { return tmp && typeof tmp === 'object' ? tmp[k] : undefined; }, value);
        if (typeof v !== 'undefined') {
            array.push((_a = {}, _a[key] = v, _a));
        }
        return array;
        var _a;
    }, []);
}
