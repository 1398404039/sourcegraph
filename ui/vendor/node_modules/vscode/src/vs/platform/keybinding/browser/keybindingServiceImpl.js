/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
require('./keybindings.css');
var nls = require('vs/nls');
var keybinding_1 = require('vs/base/common/keybinding');
var lifecycle_1 = require('vs/base/common/lifecycle');
var severity_1 = require('vs/base/common/severity');
var arrays_1 = require('vs/base/common/arrays');
var dom = require('vs/base/browser/dom');
var keyboardEvent_1 = require('vs/base/browser/keyboardEvent');
var commands_1 = require('vs/platform/commands/common/commands');
var keybindingResolver_1 = require('vs/platform/keybinding/common/keybindingResolver');
var keybindingsRegistry_1 = require('vs/platform/keybinding/common/keybindingsRegistry');
var event_1 = require('vs/base/common/event');
var KeybindingService = (function () {
    function KeybindingService(contextKeyService, commandService, messageService, statusService) {
        this.toDispose = [];
        this._contextKeyService = contextKeyService;
        this._commandService = commandService;
        this._statusService = statusService;
        this._messageService = messageService;
        this._cachedResolver = null;
        this._firstTimeComputingResolver = true;
        this._currentChord = 0;
        this._currentChordStatusMessage = null;
        this._onDidUpdateKeybindings = new event_1.Emitter();
        this.toDispose.push(this._onDidUpdateKeybindings);
    }
    KeybindingService.prototype.dispose = function () {
        this.toDispose = lifecycle_1.dispose(this.toDispose);
    };
    KeybindingService.prototype._beginListening = function (domNode) {
        var _this = this;
        this.toDispose.push(dom.addDisposableListener(domNode, dom.EventType.KEY_DOWN, function (e) {
            var keyEvent = new keyboardEvent_1.StandardKeyboardEvent(e);
            _this._dispatch(keyEvent);
        }));
    };
    KeybindingService.prototype._getResolver = function () {
        if (!this._cachedResolver) {
            this._cachedResolver = new keybindingResolver_1.KeybindingResolver(keybindingsRegistry_1.KeybindingsRegistry.getDefaultKeybindings(), this._getExtraKeybindings(this._firstTimeComputingResolver));
            this._firstTimeComputingResolver = false;
        }
        return this._cachedResolver;
    };
    Object.defineProperty(KeybindingService.prototype, "onDidUpdateKeybindings", {
        get: function () {
            return this._onDidUpdateKeybindings ? this._onDidUpdateKeybindings.event : event_1.default.None; // Sinon stubbing walks properties on prototype
        },
        enumerable: true,
        configurable: true
    });
    KeybindingService.prototype.getLabelFor = function (keybinding) {
        return keybinding._toUSLabel();
    };
    KeybindingService.prototype.getHTMLLabelFor = function (keybinding) {
        return keybinding._toUSHTMLLabel();
    };
    KeybindingService.prototype.getAriaLabelFor = function (keybinding) {
        return keybinding._toUSAriaLabel();
    };
    KeybindingService.prototype.getElectronAcceleratorFor = function (keybinding) {
        return keybinding._toElectronAccelerator();
    };
    KeybindingService.prototype.updateResolver = function () {
        this._cachedResolver = null;
        this._onDidUpdateKeybindings.fire();
    };
    KeybindingService.prototype._getExtraKeybindings = function (isFirstTime) {
        return [];
    };
    KeybindingService.prototype.getDefaultKeybindings = function () {
        return this._getResolver().getDefaultKeybindings() + '\n\n' + this._getAllCommandsAsComment();
    };
    KeybindingService.prototype.customKeybindingsCount = function () {
        return 0;
    };
    KeybindingService.prototype.lookupKeybindings = function (commandId) {
        return this._getResolver().lookupKeybinding(commandId);
    };
    KeybindingService.prototype._getAllCommandsAsComment = function () {
        var commands = commands_1.CommandsRegistry.getCommands();
        var unboundCommands = [];
        var boundCommands = this._getResolver().getDefaultBoundCommands();
        for (var id in commands) {
            if (id[0] === '_' || id.indexOf('vscode.') === 0) {
                continue;
            }
            if (typeof commands[id].description === 'object'
                && !arrays_1.isFalsyOrEmpty(commands[id].description.args)) {
                continue;
            }
            if (boundCommands[id]) {
                continue;
            }
            unboundCommands.push(id);
        }
        var pretty = unboundCommands.sort().join('\n// - ');
        return '// ' + nls.localize('unboundCommands', "Here are other available commands: ") + '\n// - ' + pretty;
    };
    KeybindingService.prototype._dispatch = function (e) {
        var _this = this;
        var isModifierKey = (e.keyCode === 5 /* Ctrl */ || e.keyCode === 4 /* Shift */ || e.keyCode === 6 /* Alt */ || e.keyCode === 57 /* Meta */);
        if (isModifierKey) {
            return;
        }
        var contextValue = this._contextKeyService.getContextValue(e.target);
        // console.log(JSON.stringify(contextValue, null, '\t'));
        var resolveResult = this._getResolver().resolve(contextValue, this._currentChord, e.asKeybinding());
        if (resolveResult && resolveResult.enterChord) {
            e.preventDefault();
            this._currentChord = resolveResult.enterChord;
            if (this._statusService) {
                var firstPartLabel = this.getLabelFor(new keybinding_1.Keybinding(this._currentChord));
                this._currentChordStatusMessage = this._statusService.setStatusMessage(nls.localize('first.chord', "({0}) was pressed. Waiting for second key of chord...", firstPartLabel));
            }
            return;
        }
        if (this._statusService && this._currentChord) {
            if (!resolveResult || !resolveResult.commandId) {
                var firstPartLabel = this.getLabelFor(new keybinding_1.Keybinding(this._currentChord));
                var chordPartLabel = this.getLabelFor(new keybinding_1.Keybinding(e.asKeybinding()));
                this._statusService.setStatusMessage(nls.localize('missing.chord', "The key combination ({0}, {1}) is not a command.", firstPartLabel, chordPartLabel), 10 * 1000 /* 10s */);
                e.preventDefault();
            }
        }
        if (this._currentChordStatusMessage) {
            this._currentChordStatusMessage.dispose();
            this._currentChordStatusMessage = null;
        }
        this._currentChord = 0;
        if (resolveResult && resolveResult.commandId) {
            if (!/^\^/.test(resolveResult.commandId)) {
                e.preventDefault();
            }
            var commandId = resolveResult.commandId.replace(/^\^/, '');
            this._commandService.executeCommand(commandId, {}).done(undefined, function (err) {
                _this._messageService.show(severity_1.default.Warning, err);
            });
        }
    };
    return KeybindingService;
}());
exports.KeybindingService = KeybindingService;
