import { IHTMLContentElement } from 'vs/base/common/htmlContent';
import { Keybinding, KeyCode } from 'vs/base/common/keyCodes';
export interface ISimplifiedPlatform {
    isMacintosh: boolean;
    isWindows: boolean;
}
export declare class KeybindingLabels {
    private static _cachedKeybindingRegex;
    /**
     * @internal
     */
    static getUserSettingsKeybindingRegex(): string;
    /**
     * Format the binding to a format appropiate for the user settings file.
     * @internal
     */
    static toUserSettingsLabel(keybinding: Keybinding, Platform?: ISimplifiedPlatform): string;
    /**
     * @internal
     */
    static fromUserSettingsLabel(input: string, Platform?: ISimplifiedPlatform): number;
    /**
     * Format the binding to a format appropiate for rendering in the UI
     * @internal
     */
    static _toUSLabel(keybinding: Keybinding, Platform?: ISimplifiedPlatform): string;
    /**
     * Format the binding to a format appropiate for placing in an aria-label.
     * @internal
     */
    static _toUSAriaLabel(keybinding: Keybinding, Platform?: ISimplifiedPlatform): string;
    /**
     * Format the binding to a format appropiate for rendering in the UI
     * @internal
     */
    static _toUSHTMLLabel(keybinding: Keybinding, Platform?: ISimplifiedPlatform): IHTMLContentElement[];
    /**
     * Format the binding to a format appropiate for rendering in the UI
     * @internal
     */
    static toCustomLabel(keybinding: Keybinding, labelProvider: IKeyBindingLabelProvider, Platform?: ISimplifiedPlatform): string;
    /**
     * Format the binding to a format appropiate for rendering in the UI
     * @internal
     */
    static toCustomHTMLLabel(keybinding: Keybinding, labelProvider: IKeyBindingLabelProvider, Platform?: ISimplifiedPlatform): IHTMLContentElement[];
    /**
     * This prints the binding in a format suitable for electron's accelerators.
     * See https://github.com/electron/electron/blob/master/docs/api/accelerator.md
     * @internal
     */
    static _toElectronAccelerator(keybinding: Keybinding, Platform?: ISimplifiedPlatform): string;
}
export interface IKeyBindingLabelProvider {
    ctrlKeyLabel: string;
    shiftKeyLabel: string;
    altKeyLabel: string;
    cmdKeyLabel: string;
    windowsKeyLabel: string;
    modifierSeparator: string;
    getLabelForKey(keyCode: KeyCode): string;
}
/**
 * Print for Electron
 */
export declare class ElectronAcceleratorLabelProvider implements IKeyBindingLabelProvider {
    static INSTANCE: ElectronAcceleratorLabelProvider;
    ctrlKeyLabel: string;
    shiftKeyLabel: string;
    altKeyLabel: string;
    cmdKeyLabel: string;
    windowsKeyLabel: string;
    modifierSeparator: string;
    getLabelForKey(keyCode: KeyCode): string;
}
/**
 * Print for Mac UI
 */
export declare class MacUIKeyLabelProvider implements IKeyBindingLabelProvider {
    static INSTANCE: MacUIKeyLabelProvider;
    private static leftArrowUnicodeLabel;
    private static upArrowUnicodeLabel;
    private static rightArrowUnicodeLabel;
    private static downArrowUnicodeLabel;
    ctrlKeyLabel: string;
    shiftKeyLabel: string;
    altKeyLabel: string;
    cmdKeyLabel: string;
    windowsKeyLabel: string;
    modifierSeparator: string;
    getLabelForKey(keyCode: KeyCode): string;
}
/**
 * Aria label provider for Mac.
 */
export declare class AriaKeyLabelProvider implements IKeyBindingLabelProvider {
    static INSTANCE: MacUIKeyLabelProvider;
    ctrlKeyLabel: string;
    shiftKeyLabel: string;
    altKeyLabel: string;
    cmdKeyLabel: string;
    windowsKeyLabel: string;
    modifierSeparator: string;
    getLabelForKey(keyCode: KeyCode): string;
}
/**
 * Print for Windows, Linux UI
 */
export declare class ClassicUIKeyLabelProvider implements IKeyBindingLabelProvider {
    static INSTANCE: ClassicUIKeyLabelProvider;
    ctrlKeyLabel: string;
    shiftKeyLabel: string;
    altKeyLabel: string;
    cmdKeyLabel: string;
    windowsKeyLabel: string;
    modifierSeparator: string;
    getLabelForKey(keyCode: KeyCode): string;
}
