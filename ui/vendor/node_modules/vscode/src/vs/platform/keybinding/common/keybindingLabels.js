/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var nls = require("vs/nls");
var defaultPlatform = require("vs/base/common/platform");
var keyCodes_1 = require("vs/base/common/keyCodes");
var KeybindingLabels = (function () {
    function KeybindingLabels() {
    }
    /**
     * @internal
     */
    KeybindingLabels.getUserSettingsKeybindingRegex = function () {
        if (!this._cachedKeybindingRegex) {
            var numpadKey = 'numpad(0|1|2|3|4|5|6|7|8|9|_multiply|_add|_subtract|_decimal|_divide|_separator)';
            var oemKey = '`|\\-|=|\\[|\\]|\\\\\\\\|;|\'|,|\\.|\\/|oem_8|oem_102';
            var specialKey = 'left|up|right|down|pageup|pagedown|end|home|tab|enter|escape|space|backspace|delete|pausebreak|capslock|insert|contextmenu|numlock|scrolllock';
            var casualKey = '[a-z]|[0-9]|f(1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19)';
            var key = '((' + [numpadKey, oemKey, specialKey, casualKey].join(')|(') + '))';
            var mod = '((ctrl|shift|alt|cmd|win|meta)\\+)*';
            var keybinding = '(' + mod + key + ')';
            this._cachedKeybindingRegex = '"\\s*(' + keybinding + '(\\s+' + keybinding + ')?' + ')\\s*"';
        }
        return this._cachedKeybindingRegex;
    };
    /**
     * Format the binding to a format appropiate for the user settings file.
     * @internal
     */
    KeybindingLabels.toUserSettingsLabel = function (keybinding, Platform) {
        if (Platform === void 0) { Platform = defaultPlatform; }
        var result = _asString(keybinding, UserSettingsKeyLabelProvider.INSTANCE, Platform);
        result = result.toLowerCase();
        if (Platform.isMacintosh) {
            result = result.replace(/meta/g, 'cmd');
        }
        else if (Platform.isWindows) {
            result = result.replace(/meta/g, 'win');
        }
        return result;
    };
    /**
     * @internal
     */
    KeybindingLabels.fromUserSettingsLabel = function (input, Platform) {
        if (Platform === void 0) { Platform = defaultPlatform; }
        if (!input) {
            return null;
        }
        input = input.toLowerCase().trim();
        var ctrlCmd = false, shift = false, alt = false, winCtrl = false, key = '';
        while (/^(ctrl|shift|alt|meta|win|cmd)(\+|\-)/.test(input)) {
            if (/^ctrl(\+|\-)/.test(input)) {
                if (Platform.isMacintosh) {
                    winCtrl = true;
                }
                else {
                    ctrlCmd = true;
                }
                input = input.substr('ctrl-'.length);
            }
            if (/^shift(\+|\-)/.test(input)) {
                shift = true;
                input = input.substr('shift-'.length);
            }
            if (/^alt(\+|\-)/.test(input)) {
                alt = true;
                input = input.substr('alt-'.length);
            }
            if (/^meta(\+|\-)/.test(input)) {
                if (Platform.isMacintosh) {
                    ctrlCmd = true;
                }
                else {
                    winCtrl = true;
                }
                input = input.substr('meta-'.length);
            }
            if (/^win(\+|\-)/.test(input)) {
                if (Platform.isMacintosh) {
                    ctrlCmd = true;
                }
                else {
                    winCtrl = true;
                }
                input = input.substr('win-'.length);
            }
            if (/^cmd(\+|\-)/.test(input)) {
                if (Platform.isMacintosh) {
                    ctrlCmd = true;
                }
                else {
                    winCtrl = true;
                }
                input = input.substr('cmd-'.length);
            }
        }
        var chord = 0;
        var firstSpaceIdx = input.indexOf(' ');
        if (firstSpaceIdx > 0) {
            key = input.substring(0, firstSpaceIdx);
            chord = KeybindingLabels.fromUserSettingsLabel(input.substring(firstSpaceIdx), Platform);
        }
        else {
            key = input;
        }
        var keyCode = keyCodes_1.USER_SETTINGS.toKeyCode(key);
        var result = 0;
        if (ctrlCmd) {
            result |= 2048 /* CtrlCmd */;
        }
        if (shift) {
            result |= 1024 /* Shift */;
        }
        if (alt) {
            result |= 512 /* Alt */;
        }
        if (winCtrl) {
            result |= 256 /* WinCtrl */;
        }
        result |= keyCode;
        return keyCodes_1.KeyChord(result, chord);
    };
    /**
     * Format the binding to a format appropiate for rendering in the UI
     * @internal
     */
    KeybindingLabels._toUSLabel = function (keybinding, Platform) {
        if (Platform === void 0) { Platform = defaultPlatform; }
        return _asString(keybinding, (Platform.isMacintosh ? MacUIKeyLabelProvider.INSTANCE : ClassicUIKeyLabelProvider.INSTANCE), Platform);
    };
    /**
     * Format the binding to a format appropiate for placing in an aria-label.
     * @internal
     */
    KeybindingLabels._toUSAriaLabel = function (keybinding, Platform) {
        if (Platform === void 0) { Platform = defaultPlatform; }
        return _asString(keybinding, AriaKeyLabelProvider.INSTANCE, Platform);
    };
    /**
     * Format the binding to a format appropiate for rendering in the UI
     * @internal
     */
    KeybindingLabels._toUSHTMLLabel = function (keybinding, Platform) {
        if (Platform === void 0) { Platform = defaultPlatform; }
        return _asHTML(keybinding, (Platform.isMacintosh ? MacUIKeyLabelProvider.INSTANCE : ClassicUIKeyLabelProvider.INSTANCE), Platform);
    };
    /**
     * Format the binding to a format appropiate for rendering in the UI
     * @internal
     */
    KeybindingLabels.toCustomLabel = function (keybinding, labelProvider, Platform) {
        if (Platform === void 0) { Platform = defaultPlatform; }
        return _asString(keybinding, labelProvider, Platform);
    };
    /**
     * Format the binding to a format appropiate for rendering in the UI
     * @internal
     */
    KeybindingLabels.toCustomHTMLLabel = function (keybinding, labelProvider, Platform) {
        if (Platform === void 0) { Platform = defaultPlatform; }
        return _asHTML(keybinding, labelProvider, Platform);
    };
    /**
     * This prints the binding in a format suitable for electron's accelerators.
     * See https://github.com/electron/electron/blob/master/docs/api/accelerator.md
     * @internal
     */
    KeybindingLabels._toElectronAccelerator = function (keybinding, Platform) {
        if (Platform === void 0) { Platform = defaultPlatform; }
        if (keybinding.isChord()) {
            // Electron cannot handle chords
            return null;
        }
        var keyCode = keybinding.getKeyCode();
        if (keyCode >= 93 /* NUMPAD_0 */ && keyCode <= 108 /* NUMPAD_DIVIDE */) {
            // Electron cannot handle numpad keys
            return null;
        }
        return _asString(keybinding, ElectronAcceleratorLabelProvider.INSTANCE, Platform);
    };
    return KeybindingLabels;
}());
KeybindingLabels._cachedKeybindingRegex = null;
exports.KeybindingLabels = KeybindingLabels;
/**
 * Print for Electron
 */
var ElectronAcceleratorLabelProvider = (function () {
    function ElectronAcceleratorLabelProvider() {
        this.ctrlKeyLabel = 'Ctrl';
        this.shiftKeyLabel = 'Shift';
        this.altKeyLabel = 'Alt';
        this.cmdKeyLabel = 'Cmd';
        this.windowsKeyLabel = 'Super';
        this.modifierSeparator = '+';
    }
    ElectronAcceleratorLabelProvider.prototype.getLabelForKey = function (keyCode) {
        switch (keyCode) {
            case 16 /* UpArrow */:
                return 'Up';
            case 18 /* DownArrow */:
                return 'Down';
            case 15 /* LeftArrow */:
                return 'Left';
            case 17 /* RightArrow */:
                return 'Right';
        }
        return keyCodes_1.KeyCodeUtils.toString(keyCode);
    };
    return ElectronAcceleratorLabelProvider;
}());
ElectronAcceleratorLabelProvider.INSTANCE = new ElectronAcceleratorLabelProvider();
exports.ElectronAcceleratorLabelProvider = ElectronAcceleratorLabelProvider;
/**
 * Print for Mac UI
 */
var MacUIKeyLabelProvider = (function () {
    function MacUIKeyLabelProvider() {
        this.ctrlKeyLabel = '\u2303';
        this.shiftKeyLabel = '\u21E7';
        this.altKeyLabel = '\u2325';
        this.cmdKeyLabel = '\u2318';
        this.windowsKeyLabel = nls.localize('windowsKey', "Windows");
        this.modifierSeparator = '';
    }
    MacUIKeyLabelProvider.prototype.getLabelForKey = function (keyCode) {
        switch (keyCode) {
            case 15 /* LeftArrow */:
                return MacUIKeyLabelProvider.leftArrowUnicodeLabel;
            case 16 /* UpArrow */:
                return MacUIKeyLabelProvider.upArrowUnicodeLabel;
            case 17 /* RightArrow */:
                return MacUIKeyLabelProvider.rightArrowUnicodeLabel;
            case 18 /* DownArrow */:
                return MacUIKeyLabelProvider.downArrowUnicodeLabel;
        }
        return keyCodes_1.KeyCodeUtils.toString(keyCode);
    };
    return MacUIKeyLabelProvider;
}());
MacUIKeyLabelProvider.INSTANCE = new MacUIKeyLabelProvider();
MacUIKeyLabelProvider.leftArrowUnicodeLabel = String.fromCharCode(8592);
MacUIKeyLabelProvider.upArrowUnicodeLabel = String.fromCharCode(8593);
MacUIKeyLabelProvider.rightArrowUnicodeLabel = String.fromCharCode(8594);
MacUIKeyLabelProvider.downArrowUnicodeLabel = String.fromCharCode(8595);
exports.MacUIKeyLabelProvider = MacUIKeyLabelProvider;
/**
 * Aria label provider for Mac.
 */
var AriaKeyLabelProvider = (function () {
    function AriaKeyLabelProvider() {
        this.ctrlKeyLabel = nls.localize('ctrlKey.long', "Control");
        this.shiftKeyLabel = nls.localize('shiftKey.long', "Shift");
        this.altKeyLabel = nls.localize('altKey.long', "Alt");
        this.cmdKeyLabel = nls.localize('cmdKey.long', "Command");
        this.windowsKeyLabel = nls.localize('windowsKey.long', "Windows");
        this.modifierSeparator = '+';
    }
    AriaKeyLabelProvider.prototype.getLabelForKey = function (keyCode) {
        return keyCodes_1.KeyCodeUtils.toString(keyCode);
    };
    return AriaKeyLabelProvider;
}());
AriaKeyLabelProvider.INSTANCE = new MacUIKeyLabelProvider();
exports.AriaKeyLabelProvider = AriaKeyLabelProvider;
/**
 * Print for Windows, Linux UI
 */
var ClassicUIKeyLabelProvider = (function () {
    function ClassicUIKeyLabelProvider() {
        this.ctrlKeyLabel = nls.localize('ctrlKey', "Ctrl");
        this.shiftKeyLabel = nls.localize('shiftKey', "Shift");
        this.altKeyLabel = nls.localize('altKey', "Alt");
        this.cmdKeyLabel = nls.localize('cmdKey', "Command");
        this.windowsKeyLabel = nls.localize('windowsKey', "Windows");
        this.modifierSeparator = '+';
    }
    ClassicUIKeyLabelProvider.prototype.getLabelForKey = function (keyCode) {
        return keyCodes_1.KeyCodeUtils.toString(keyCode);
    };
    return ClassicUIKeyLabelProvider;
}());
ClassicUIKeyLabelProvider.INSTANCE = new ClassicUIKeyLabelProvider();
exports.ClassicUIKeyLabelProvider = ClassicUIKeyLabelProvider;
/**
 * Print for the user settings file.
 */
var UserSettingsKeyLabelProvider = (function () {
    function UserSettingsKeyLabelProvider() {
        this.ctrlKeyLabel = 'Ctrl';
        this.shiftKeyLabel = 'Shift';
        this.altKeyLabel = 'Alt';
        this.cmdKeyLabel = 'Meta';
        this.windowsKeyLabel = 'Meta';
        this.modifierSeparator = '+';
    }
    UserSettingsKeyLabelProvider.prototype.getLabelForKey = function (keyCode) {
        return keyCodes_1.USER_SETTINGS.fromKeyCode(keyCode);
    };
    return UserSettingsKeyLabelProvider;
}());
UserSettingsKeyLabelProvider.INSTANCE = new UserSettingsKeyLabelProvider();
function _simpleAsString(keybinding, labelProvider, Platform) {
    var result = [];
    var ctrlCmd = keybinding.hasCtrlCmd();
    var shift = keybinding.hasShift();
    var alt = keybinding.hasAlt();
    var winCtrl = keybinding.hasWinCtrl();
    var keyCode = keybinding.getKeyCode();
    var keyLabel = labelProvider.getLabelForKey(keyCode);
    if (!keyLabel) {
        // cannot trigger this key code under this kb layout
        return '';
    }
    // translate modifier keys: Ctrl-Shift-Alt-Meta
    if ((ctrlCmd && !Platform.isMacintosh) || (winCtrl && Platform.isMacintosh)) {
        result.push(labelProvider.ctrlKeyLabel);
    }
    if (shift) {
        result.push(labelProvider.shiftKeyLabel);
    }
    if (alt) {
        result.push(labelProvider.altKeyLabel);
    }
    if (ctrlCmd && Platform.isMacintosh) {
        result.push(labelProvider.cmdKeyLabel);
    }
    if (winCtrl && !Platform.isMacintosh) {
        result.push(labelProvider.windowsKeyLabel);
    }
    // the actual key
    result.push(keyLabel);
    return result.join(labelProvider.modifierSeparator);
}
function _asString(keybinding, labelProvider, Platform) {
    if (keybinding.isChord()) {
        var firstPart = _simpleAsString(keybinding.extractFirstPart(), labelProvider, Platform);
        var secondPart = _simpleAsString(keybinding.extractChordPart(), labelProvider, Platform);
        return firstPart + ' ' + secondPart;
    }
    else {
        return _simpleAsString(keybinding, labelProvider, Platform);
    }
}
function _pushKey(result, str) {
    if (result.length > 0) {
        result.push({
            tagName: 'span',
            text: '+'
        });
    }
    result.push({
        tagName: 'span',
        className: 'monaco-kbkey',
        text: str
    });
}
function _simpleAsHTML(keybinding, labelProvider, Platform, isChord) {
    if (isChord === void 0) { isChord = false; }
    var result = [];
    var ctrlCmd = keybinding.hasCtrlCmd();
    var shift = keybinding.hasShift();
    var alt = keybinding.hasAlt();
    var winCtrl = keybinding.hasWinCtrl();
    var keyCode = keybinding.getKeyCode();
    var keyLabel = labelProvider.getLabelForKey(keyCode);
    if (!keyLabel) {
        // cannot trigger this key code under this kb layout
        return [];
    }
    // translate modifier keys: Ctrl-Shift-Alt-Meta
    if ((ctrlCmd && !Platform.isMacintosh) || (winCtrl && Platform.isMacintosh)) {
        _pushKey(result, labelProvider.ctrlKeyLabel);
    }
    if (shift) {
        _pushKey(result, labelProvider.shiftKeyLabel);
    }
    if (alt) {
        _pushKey(result, labelProvider.altKeyLabel);
    }
    if (ctrlCmd && Platform.isMacintosh) {
        _pushKey(result, labelProvider.cmdKeyLabel);
    }
    if (winCtrl && !Platform.isMacintosh) {
        _pushKey(result, labelProvider.windowsKeyLabel);
    }
    // the actual key
    _pushKey(result, keyLabel);
    return result;
}
function _asHTML(keybinding, labelProvider, Platform) {
    var result = [];
    if (keybinding.isChord()) {
        result = result.concat(_simpleAsHTML(keybinding.extractFirstPart(), labelProvider, Platform));
        result.push({
            tagName: 'span',
            text: ' '
        });
        result = result.concat(_simpleAsHTML(keybinding.extractChordPart(), labelProvider, Platform));
    }
    else {
        result = result.concat(_simpleAsHTML(keybinding, labelProvider, Platform));
    }
    return [{
            tagName: 'span',
            className: 'monaco-kb',
            children: result
        }];
}
