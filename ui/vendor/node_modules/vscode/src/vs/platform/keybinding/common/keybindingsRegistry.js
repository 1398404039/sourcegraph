/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var keyCodes_1 = require("vs/base/common/keyCodes");
var platform = require("vs/base/common/platform");
var commands_1 = require("vs/platform/commands/common/commands");
var platform_1 = require("vs/platform/platform");
var KeybindingsRegistryImpl = (function () {
    function KeybindingsRegistryImpl() {
        this.WEIGHT = {
            editorCore: function (importance) {
                if (importance === void 0) { importance = 0; }
                return 0 + importance;
            },
            editorContrib: function (importance) {
                if (importance === void 0) { importance = 0; }
                return 100 + importance;
            },
            workbenchContrib: function (importance) {
                if (importance === void 0) { importance = 0; }
                return 200 + importance;
            },
            builtinExtension: function (importance) {
                if (importance === void 0) { importance = 0; }
                return 300 + importance;
            },
            externalExtension: function (importance) {
                if (importance === void 0) { importance = 0; }
                return 400 + importance;
            }
        };
        this._keybindings = [];
    }
    /**
     * Take current platform into account and reduce to primary & secondary.
     */
    KeybindingsRegistryImpl.bindToCurrentPlatform = function (kb) {
        if (platform.isWindows) {
            if (kb && kb.win) {
                return kb.win;
            }
        }
        else if (platform.isMacintosh) {
            if (kb && kb.mac) {
                return kb.mac;
            }
        }
        else {
            if (kb && kb.linux) {
                return kb.linux;
            }
        }
        return kb;
    };
    KeybindingsRegistryImpl.prototype.registerKeybindingRule = function (rule) {
        var _this = this;
        var actualKb = KeybindingsRegistryImpl.bindToCurrentPlatform(rule);
        // here
        if (actualKb && actualKb.primary) {
            this.registerDefaultKeybinding(actualKb.primary, rule.id, rule.weight, 0, rule.when);
        }
        // here
        if (actualKb && Array.isArray(actualKb.secondary)) {
            actualKb.secondary.forEach(function (k, i) { return _this.registerDefaultKeybinding(k, rule.id, rule.weight, -i - 1, rule.when); });
        }
    };
    KeybindingsRegistryImpl.prototype.registerCommandAndKeybindingRule = function (desc) {
        this.registerKeybindingRule(desc);
        commands_1.CommandsRegistry.registerCommand(desc.id, desc);
    };
    KeybindingsRegistryImpl.prototype.registerDefaultKeybinding = function (keybinding, commandId, weight1, weight2, when) {
        if (platform.isWindows) {
            var kb = keyCodes_1.createKeybinding(keybinding);
            var simpleKb = kb.isChord() ? kb.extractFirstPart() : kb;
            if (simpleKb.hasCtrlCmd() && !simpleKb.hasShift() && simpleKb.hasAlt() && !simpleKb.hasWinCtrl()) {
                if (/^[A-Z0-9\[\]\|\;\'\,\.\/\`]$/.test(keyCodes_1.KeyCodeUtils.toString(simpleKb.getKeyCode()))) {
                    console.warn('Ctrl+Alt+ keybindings should not be used by default under Windows. Offender: ', keybinding, ' for ', commandId);
                }
            }
        }
        this._keybindings.push({
            keybinding: keybinding,
            command: commandId,
            commandArgs: null,
            when: when,
            weight1: weight1,
            weight2: weight2
        });
    };
    KeybindingsRegistryImpl.prototype.getDefaultKeybindings = function () {
        var result = this._keybindings.slice(0);
        result.sort(sorter);
        return result;
    };
    return KeybindingsRegistryImpl;
}());
exports.KeybindingsRegistry = new KeybindingsRegistryImpl();
// Define extension point ids
exports.Extensions = {
    EditorModes: 'platform.keybindingsRegistry'
};
platform_1.Registry.add(exports.Extensions.EditorModes, exports.KeybindingsRegistry);
function sorter(a, b) {
    if (a.weight1 !== b.weight1) {
        return a.weight1 - b.weight1;
    }
    if (a.command < b.command) {
        return -1;
    }
    if (a.command > b.command) {
        return 1;
    }
    return a.weight2 - b.weight2;
}
