import { IHTMLContentElement } from 'vs/base/common/htmlContent';
import { Keybinding } from 'vs/base/common/keybinding';
import { ContextKeyExpr, IContextKeyServiceTarget } from 'vs/platform/contextkey/common/contextkey';
import { IResolveResult } from 'vs/platform/keybinding/common/keybindingResolver';
import Event from 'vs/base/common/event';
export interface IUserFriendlyKeybinding {
    key: string;
    command: string;
    args?: any;
    when?: string;
}
export interface IKeybindings {
    primary: number;
    secondary?: number[];
    win?: {
        primary: number;
        secondary?: number[];
    };
    linux?: {
        primary: number;
        secondary?: number[];
    };
    mac?: {
        primary: number;
        secondary?: number[];
    };
}
export interface IKeybindingItem {
    keybinding: number;
    command: string;
    commandArgs?: any;
    when: ContextKeyExpr;
    weight1: number;
    weight2: number;
}
export declare enum KeybindingSource {
    Default = 1,
    User = 2,
}
export interface IKeybindingEvent {
    source: KeybindingSource;
    keybindings?: IUserFriendlyKeybinding[];
}
export declare let IKeybindingService: {
    (...args: any[]): void;
    type: IKeybindingService;
};
export interface IKeybindingService {
    _serviceBrand: any;
    onDidUpdateKeybindings: Event<IKeybindingEvent>;
    getLabelFor(keybinding: Keybinding): string;
    getAriaLabelFor(keybinding: Keybinding): string;
    getHTMLLabelFor(keybinding: Keybinding): IHTMLContentElement[];
    getElectronAcceleratorFor(keybinding: Keybinding): string;
    getDefaultKeybindings(): string;
    lookupKeybindings(commandId: string): Keybinding[];
    customKeybindingsCount(): number;
    resolve(keybinding: Keybinding, target: IContextKeyServiceTarget): IResolveResult;
    dispose(): any;
}
