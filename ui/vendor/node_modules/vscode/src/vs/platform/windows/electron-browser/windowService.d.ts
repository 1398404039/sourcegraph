import { TPromise } from 'vs/base/common/winjs.base';
import { IWindowService, IWindowsService } from 'vs/platform/windows/common/windows';
import { ITelemetryData } from 'vs/platform/telemetry/common/telemetry';
export declare class WindowService implements IWindowService {
    private windowId;
    private windowsService;
    _serviceBrand: any;
    constructor(windowId: number, windowsService: IWindowsService);
    getCurrentWindowId(): number;
    openFileFolderPicker(forceNewWindow?: boolean, data?: ITelemetryData): TPromise<void>;
    openFilePicker(forceNewWindow?: boolean, path?: string, data?: ITelemetryData): TPromise<void>;
    openFolderPicker(forceNewWindow?: boolean, data?: ITelemetryData): TPromise<void>;
    reloadWindow(): TPromise<void>;
    openDevTools(): TPromise<void>;
    toggleDevTools(): TPromise<void>;
    closeFolder(): TPromise<void>;
    toggleFullScreen(): TPromise<void>;
    setRepresentedFilename(fileName: string): TPromise<void>;
    addToRecentlyOpen(paths: {
        path: string;
        isFile?: boolean;
    }[]): TPromise<void>;
    removeFromRecentlyOpen(paths: string[]): TPromise<void>;
    getRecentlyOpen(): TPromise<{
        files: string[];
        folders: string[];
    }>;
    focusWindow(): TPromise<void>;
    isMaximized(): TPromise<boolean>;
    maximizeWindow(): TPromise<void>;
    unmaximizeWindow(): TPromise<void>;
    setDocumentEdited(flag: boolean): TPromise<void>;
}
