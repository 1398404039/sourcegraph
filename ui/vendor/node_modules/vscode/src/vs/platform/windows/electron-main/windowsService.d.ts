import { TPromise } from 'vs/base/common/winjs.base';
import { IDisposable } from 'vs/base/common/lifecycle';
import { IWindowsService } from 'vs/platform/windows/common/windows';
import { IEnvironmentService } from 'vs/platform/environment/common/environment';
import Event from 'vs/base/common/event';
import { IURLService } from 'vs/platform/url/common/url';
import { ITelemetryData } from 'vs/platform/telemetry/common/telemetry';
import { IWindowsMainService } from 'vs/code/electron-main/windows';
export interface ISharedProcess {
    whenReady(): TPromise<void>;
    toggle(): void;
}
export declare class WindowsService implements IWindowsService, IDisposable {
    private sharedProcess;
    private windowsMainService;
    private environmentService;
    _serviceBrand: any;
    private disposables;
    onWindowOpen: Event<number>;
    onWindowFocus: Event<number>;
    constructor(sharedProcess: ISharedProcess, windowsMainService: IWindowsMainService, environmentService: IEnvironmentService, urlService: IURLService);
    openFileFolderPicker(windowId: number, forceNewWindow?: boolean, data?: ITelemetryData): TPromise<void>;
    openFilePicker(windowId: number, forceNewWindow?: boolean, path?: string, data?: ITelemetryData): TPromise<void>;
    openFolderPicker(windowId: number, forceNewWindow?: boolean, data?: ITelemetryData): TPromise<void>;
    reloadWindow(windowId: number): TPromise<void>;
    openDevTools(windowId: number): TPromise<void>;
    toggleDevTools(windowId: number): TPromise<void>;
    closeFolder(windowId: number): TPromise<void>;
    toggleFullScreen(windowId: number): TPromise<void>;
    setRepresentedFilename(windowId: number, fileName: string): TPromise<void>;
    addToRecentlyOpen(paths: {
        path: string;
        isFile?: boolean;
    }[]): TPromise<void>;
    removeFromRecentlyOpen(paths: string[]): TPromise<void>;
    getRecentlyOpen(windowId: number): TPromise<{
        files: string[];
        folders: string[];
    }>;
    focusWindow(windowId: number): TPromise<void>;
    isMaximized(windowId: number): TPromise<boolean>;
    maximizeWindow(windowId: number): TPromise<void>;
    unmaximizeWindow(windowId: number): TPromise<void>;
    setDocumentEdited(windowId: number, flag: boolean): TPromise<void>;
    openWindow(paths: string[], options?: {
        forceNewWindow?: boolean;
        forceReuseWindow?: boolean;
    }): TPromise<void>;
    openNewWindow(): TPromise<void>;
    showWindow(windowId: number): TPromise<void>;
    getWindows(): TPromise<{
        id: number;
        path: string;
        title: string;
    }[]>;
    getWindowCount(): TPromise<number>;
    log(severity: string, ...messages: string[]): TPromise<void>;
    closeExtensionHostWindow(extensionDevelopmentPath: string): TPromise<void>;
    showItemInFolder(path: string): TPromise<void>;
    openExternal(url: string): TPromise<void>;
    startCrashReporter(config: Electron.CrashReporterStartOptions): TPromise<void>;
    quit(): TPromise<void>;
    relaunch(options: {
        addArgs?: string[];
        removeArgs?: string[];
    }): TPromise<void>;
    whenSharedProcessReady(): TPromise<void>;
    toggleSharedProcess(): TPromise<void>;
    private openFileForURI(filePath);
    dispose(): void;
}
