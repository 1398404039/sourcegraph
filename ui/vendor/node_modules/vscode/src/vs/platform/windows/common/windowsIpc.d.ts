import { TPromise } from 'vs/base/common/winjs.base';
import Event from 'vs/base/common/event';
import { IChannel } from 'vs/base/parts/ipc/common/ipc';
import { IWindowsService } from './windows';
export interface IWindowsChannel extends IChannel {
    call(command: 'event:onWindowOpen'): TPromise<number>;
    call(command: 'event:onWindowFocus'): TPromise<number>;
    call(command: 'openFileFolderPicker', arg: [number, boolean]): TPromise<void>;
    call(command: 'openFilePicker', arg: [number, boolean, string]): TPromise<void>;
    call(command: 'openFolderPicker', arg: [number, boolean]): TPromise<void>;
    call(command: 'reloadWindow', arg: number): TPromise<void>;
    call(command: 'toggleDevTools', arg: number): TPromise<void>;
    call(command: 'closeFolder', arg: number): TPromise<void>;
    call(command: 'toggleFullScreen', arg: number): TPromise<void>;
    call(command: 'setRepresentedFilename', arg: [number, string]): TPromise<void>;
    call(command: 'addToRecentlyOpen', arg: {
        path: string;
        isFile?: boolean;
    }[]): TPromise<void>;
    call(command: 'removeFromRecentlyOpen', arg: string[]): TPromise<void>;
    call(command: 'getRecentlyOpen', arg: number): TPromise<{
        files: string[];
        folders: string[];
    }>;
    call(command: 'focusWindow', arg: number): TPromise<void>;
    call(command: 'isMaximized', arg: number): TPromise<boolean>;
    call(command: 'maximizeWindow', arg: number): TPromise<void>;
    call(command: 'unmaximizeWindow', arg: number): TPromise<void>;
    call(command: 'setDocumentEdited', arg: [number, boolean]): TPromise<void>;
    call(command: 'toggleMenuBar', arg: number): TPromise<void>;
    call(command: 'quit'): TPromise<void>;
    call(command: 'windowOpen', arg: [string[], boolean]): TPromise<void>;
    call(command: 'openNewWindow'): TPromise<void>;
    call(command: 'showWindow', arg: number): TPromise<void>;
    call(command: 'getWindows'): TPromise<{
        id: number;
        path: string;
        title: string;
    }[]>;
    call(command: 'getWindowCount'): TPromise<number>;
    call(command: 'log', arg: [string, string[]]): TPromise<void>;
    call(command: 'closeExtensionHostWindow', arg: string): TPromise<void>;
    call(command: 'showItemInFolder', arg: string): TPromise<void>;
    call(command: 'openExternal', arg: string): TPromise<void>;
    call(command: 'startCrashReporter', arg: Electron.CrashReporterStartOptions): TPromise<void>;
    call(command: string, arg?: any): TPromise<any>;
}
export declare class WindowsChannel implements IWindowsChannel {
    private service;
    private onWindowOpen;
    private onWindowFocus;
    constructor(service: IWindowsService);
    call(command: string, arg?: any): TPromise<any>;
}
export declare class WindowsChannelClient implements IWindowsService {
    private channel;
    _serviceBrand: any;
    constructor(channel: IWindowsChannel);
    private _onWindowOpen;
    readonly onWindowOpen: Event<number>;
    private _onWindowFocus;
    readonly onWindowFocus: Event<number>;
    openFileFolderPicker(windowId: number, forceNewWindow?: boolean): TPromise<void>;
    openFilePicker(windowId: number, forceNewWindow?: boolean, path?: string): TPromise<void>;
    openFolderPicker(windowId: number, forceNewWindow?: boolean): TPromise<void>;
    reloadWindow(windowId: number): TPromise<void>;
    openDevTools(windowId: number): TPromise<void>;
    toggleDevTools(windowId: number): TPromise<void>;
    closeFolder(windowId: number): TPromise<void>;
    toggleFullScreen(windowId: number): TPromise<void>;
    setRepresentedFilename(windowId: number, fileName: string): TPromise<void>;
    addToRecentlyOpen(paths: {
        path: string;
        isFile?: boolean;
    }[]): TPromise<void>;
    removeFromRecentlyOpen(paths: string[]): TPromise<void>;
    getRecentlyOpen(windowId: number): TPromise<{
        files: string[];
        folders: string[];
    }>;
    focusWindow(windowId: number): TPromise<void>;
    isMaximized(windowId: number): TPromise<boolean>;
    maximizeWindow(windowId: number): TPromise<void>;
    unmaximizeWindow(windowId: number): TPromise<void>;
    setDocumentEdited(windowId: number, flag: boolean): TPromise<void>;
    toggleMenuBar(windowId: number): TPromise<void>;
    quit(): TPromise<void>;
    windowOpen(paths: string[], forceNewWindow?: boolean): TPromise<void>;
    openNewWindow(): TPromise<void>;
    showWindow(windowId: number): TPromise<void>;
    getWindows(): TPromise<{
        id: number;
        path: string;
        title: string;
    }[]>;
    getWindowCount(): TPromise<number>;
    log(severity: string, ...messages: string[]): TPromise<void>;
    closeExtensionHostWindow(extensionDevelopmentPath: string): TPromise<void>;
    showItemInFolder(path: string): TPromise<void>;
    openExternal(url: string): TPromise<void>;
    startCrashReporter(config: Electron.CrashReporterStartOptions): TPromise<void>;
}
