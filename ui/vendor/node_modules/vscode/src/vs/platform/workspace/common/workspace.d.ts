import URI from 'vs/base/common/uri';
export declare const IWorkspaceContextService: {
    (...args: any[]): void;
    type: IWorkspaceContextService;
};
export interface IWorkspaceContextService {
    _serviceBrand: any;
    /**
     * Provides access to the workspace object the platform is running with. This may be null if the workbench was opened
     * without workspace (empty);
     */
    getWorkspace(): IWorkspace;
    /**
     * Returns iff the provided resource is inside the workspace or not.
     */
    isInsideWorkspace(resource: URI): boolean;
    /**
     * Given a resource inside the workspace, returns its relative path from the workspace root
     * without leading or trailing slashes. Returns null if the file is not inside an opened
     * workspace.
     */
    toWorkspaceRelativePath: (resource: URI) => string;
    /**
     * Given a workspace relative path, returns the resource with the absolute path.
     */
    toResource: (workspaceRelativePath: string) => URI;
    /**
     * Sets the workspace object. This may happen to e.g. handle cross-repo j2d.
     */
    setWorkspace(workspace: IWorkspace): void;
    onWorkspaceUpdated(listener: (workspace: IWorkspace) => void): void;
}
export interface IWorkspace {
    /**
     * the full uri of the workspace. this is a file:// URL to the location
     * of the workspace on disk.
     */
    resource: URI;
    /**
     * the unique identifier of the workspace. if the workspace is deleted and recreated
     * the identifier also changes. this makes the uid more unique compared to the id which
     * is just derived from the workspace name.
     */
    uid?: number;
    /**
     * the name of the workspace
     */
    name?: string;
}
export declare class WorkspaceContextService implements IWorkspaceContextService {
    _serviceBrand: any;
    private workspace;
    private listeners;
    constructor(workspace: IWorkspace);
    getWorkspace(): IWorkspace;
    isInsideWorkspace(resource: URI): boolean;
    toWorkspaceRelativePath(resource: URI): string;
    toResource(workspaceRelativePath: string): URI;
    setWorkspace(workspace: IWorkspace): void;
    onWorkspaceUpdated(listener: (workspace: IWorkspace) => void): void;
}
