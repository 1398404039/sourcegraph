/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var event_1 = require("vs/base/common/event");
var uri_1 = require("vs/base/common/uri");
var instantiation_1 = require("vs/platform/instantiation/common/instantiation");
var paths = require("vs/base/common/paths");
var files_1 = require("vs/platform/files/common/files");
exports.IWorkspaceContextService = instantiation_1.createDecorator('contextService');
var WorkspaceContextService = (function () {
    function WorkspaceContextService(workspace) {
        this.workspaceRegistry = {};
        this.workspace = workspace;
        this.workspaceEmitter = new event_1.Emitter();
        var workspaceRegistryKey = workspace.resource.toString();
        this.workspaceRegistry[workspaceRegistryKey] = workspace;
    }
    WorkspaceContextService.prototype.getWorkspace = function () {
        return this.workspace;
    };
    WorkspaceContextService.prototype.hasWorkspace = function () {
        return !!this.workspace;
    };
    WorkspaceContextService.prototype.isInsideWorkspace = function (resource) {
        if (resource && this.workspace) {
            return files_1.isEqual(resource.fsPath, this.workspace.resource.fsPath) || files_1.isParent(resource.fsPath, this.workspace.resource.fsPath);
        }
        return false;
    };
    WorkspaceContextService.prototype.toWorkspaceRelativePath = function (resource, toOSPath) {
        if (this.isInsideWorkspace(resource)) {
            return paths.normalize(paths.relative(this.workspace.resource.fsPath, resource.fsPath), toOSPath);
        }
        return null;
    };
    WorkspaceContextService.prototype.toResource = function (workspaceRelativePath) {
        if (typeof workspaceRelativePath === 'string' && this.workspace) {
            return uri_1.default.file(paths.join(this.workspace.resource.fsPath, workspaceRelativePath));
        }
        return null;
    };
    WorkspaceContextService.prototype.tryGetWorkspaceFromRegistry = function (resource) {
        var resourceString = resource.toString();
        for (var _i = 0, _a = Object.keys(this.workspaceRegistry); _i < _a.length; _i++) {
            var registryKey = _a[_i];
            // The resource must be identical to the workspace or a subpath of workspace.
            // Select the closest match, e.g. for `file://github.com/gorilla/muxy/file`
            // match `file://github.com/gorilla/muxy` not `github.com/gorilla/mux`.
            if (resourceString.indexOf(registryKey) !== -1) {
                if (resourceString === registryKey || resourceString.substr(registryKey.length)[0] === '/') {
                    return this.workspaceRegistry[registryKey];
                }
            }
        }
        return undefined;
    };
    WorkspaceContextService.prototype.setWorkspace = function (workspace) {
        this.workspace = workspace;
        var workspaceRegistryKey = workspace.resource.toString();
        this.workspaceRegistry[workspaceRegistryKey] = workspace;
        this.workspaceEmitter.fire(workspace);
    };
    WorkspaceContextService.prototype.registerWorkspace = function (workspace, overwrite) {
        var workspaceRegistryKey = workspace.resource.toString();
        if (this.workspaceRegistry[workspaceRegistryKey] && !overwrite) {
            return;
        }
        this.workspaceRegistry[workspaceRegistryKey] = workspace;
    };
    Object.defineProperty(WorkspaceContextService.prototype, "onWorkspaceUpdated", {
        get: function () {
            return this.workspaceEmitter.event;
        },
        enumerable: true,
        configurable: true
    });
    return WorkspaceContextService;
}());
exports.WorkspaceContextService = WorkspaceContextService;
