import { IBackupWorkspacesFormat, IBackupMainService } from 'vs/platform/backup/common/backup';
import { IEnvironmentService } from 'vs/platform/environment/common/environment';
import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
import { TPromise } from 'vs/base/common/winjs.base';
export declare class BackupMainService implements IBackupMainService {
    private configurationService;
    _serviceBrand: any;
    protected backupHome: string;
    protected workspacesJsonPath: string;
    private backups;
    private mapWindowToBackupFolder;
    constructor(environmentService: IEnvironmentService, configurationService: IConfigurationService);
    getWorkspaceBackupPaths(): string[];
    getEmptyWorkspaceBackupPaths(): string[];
    getBackupPath(windowId: number): TPromise<string>;
    registerWindowForBackupsSync(windowId: number, isEmptyWorkspace: boolean, backupFolder?: string, workspacePath?: string): void;
    private pushBackupPathsSync(workspaceIdentifier, isEmptyWorkspace);
    protected removeBackupPathSync(workspaceIdentifier: string, isEmptyWorkspace: boolean): void;
    private indexOf(workspaceIdentifier, isEmptyWorkspace);
    protected loadSync(): void;
    protected dedupeFolderWorkspaces(backups: IBackupWorkspacesFormat): IBackupWorkspacesFormat;
    private validateBackupWorkspaces(backups);
    private hasBackupsSync(backupPath);
    private saveSync();
    private getRandomEmptyWorkspaceId();
    private sanitizePath(p);
    protected getWorkspaceHash(workspacePath: string): string;
}
