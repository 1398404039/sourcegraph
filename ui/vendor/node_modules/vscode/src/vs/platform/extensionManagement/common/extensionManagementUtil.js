/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var extensionManagement_1 = require("vs/platform/extensionManagement/common/extensionManagement");
function areSameExtensions(a, b) {
    if (a.id === b.id) {
        return true;
    }
    return adoptToGalleryExtensionId(a.id) === adoptToGalleryExtensionId(b.id);
}
exports.areSameExtensions = areSameExtensions;
function getGalleryExtensionId(publisher, name) {
    return publisher + "." + name.toLocaleLowerCase();
}
exports.getGalleryExtensionId = getGalleryExtensionId;
function getLocalExtensionIdFromGallery(extension, version) {
    return getLocalExtensionId(extension.id, version);
}
exports.getLocalExtensionIdFromGallery = getLocalExtensionIdFromGallery;
function getLocalExtensionIdFromManifest(manifest) {
    return getLocalExtensionId(getGalleryExtensionId(manifest.publisher, manifest.name), manifest.version);
}
exports.getLocalExtensionIdFromManifest = getLocalExtensionIdFromManifest;
function getGalleryExtensionIdFromLocal(local) {
    return getGalleryExtensionId(local.manifest.publisher, local.manifest.name);
}
exports.getGalleryExtensionIdFromLocal = getGalleryExtensionIdFromLocal;
function getIdAndVersionFromLocalExtensionId(localExtensionId) {
    var matches = /^([^.]+\..+)-(\d+\.\d+\.\d+)$/.exec(localExtensionId);
    if (matches && matches[1] && matches[2]) {
        return { id: adoptToGalleryExtensionId(matches[1]), version: matches[2] };
    }
    return {
        id: adoptToGalleryExtensionId(localExtensionId),
        version: null
    };
}
exports.getIdAndVersionFromLocalExtensionId = getIdAndVersionFromLocalExtensionId;
function adoptToGalleryExtensionId(id) {
    return id.replace(extensionManagement_1.EXTENSION_IDENTIFIER_REGEX, function (match, publisher, name) { return getGalleryExtensionId(publisher, name); });
}
exports.adoptToGalleryExtensionId = adoptToGalleryExtensionId;
function getLocalExtensionId(id, version) {
    return id + "-" + version;
}
function getLocalExtensionTelemetryData(extension) {
    return {
        id: getGalleryExtensionIdFromLocal(extension),
        name: extension.manifest.name,
        galleryId: null,
        publisherId: extension.metadata ? extension.metadata.publisherId : null,
        publisherName: extension.manifest.publisher,
        publisherDisplayName: extension.metadata ? extension.metadata.publisherDisplayName : null,
        dependencies: extension.manifest.extensionDependencies && extension.manifest.extensionDependencies.length > 0
    };
}
exports.getLocalExtensionTelemetryData = getLocalExtensionTelemetryData;
function getGalleryExtensionTelemetryData(extension) {
    return {
        id: extension.id,
        name: extension.name,
        galleryId: extension.uuid,
        publisherId: extension.publisherId,
        publisherName: extension.publisher,
        publisherDisplayName: extension.publisherDisplayName,
        dependencies: extension.properties.dependencies.length > 0
    };
}
exports.getGalleryExtensionTelemetryData = getGalleryExtensionTelemetryData;
