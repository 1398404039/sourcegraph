/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var platform = require("vs/platform/platform");
var color_1 = require("vs/base/common/color");
var nls = require("vs/nls");
exports.Extensions = {
    ThemingContribution: 'base.contributions.theming'
};
function darken(colorDesc, factor) {
    return function (theme) {
        var color = resolveDescription(theme, colorDesc);
        if (color) {
            return color.darken(factor);
        }
        return null;
    };
}
exports.darken = darken;
var ThemingRegistry = (function () {
    function ThemingRegistry() {
        this.colorSchema = { type: 'object', description: nls.localize('schema.colors', 'Colors used in the workbench.'), properties: {} };
        this.colorsById = {};
    }
    ThemingRegistry.prototype.registerColor = function (id, description, defaults) {
        var colorContribution = { id: id, description: description, defaults: defaults };
        this.colorsById[id] = colorContribution;
        this.colorSchema.properties[id] = { type: 'string', description: description };
        return colorContribution;
    };
    ThemingRegistry.prototype.getColors = function () {
        var _this = this;
        return Object.keys(this.colorsById).map(function (id) { return _this.colorsById[id]; });
    };
    ThemingRegistry.prototype.getColor = function (id) {
        return this.colorsById[id];
    };
    ThemingRegistry.prototype.getColorSchema = function () {
        return this.colorSchema;
    };
    return ThemingRegistry;
}());
function resolveDescription(theme, colorDesc) {
    if (typeof colorDesc === 'string') {
        return color_1.Color.fromHex(colorDesc);
    }
    else if (typeof colorDesc === 'object' && colorDesc !== null) {
        var defaults = colorDesc.defaults;
        if (!defaults) {
            return null;
        }
        if (theme.isDarkTheme()) {
            return resolveDescription(theme, defaults.dark);
        }
        else if (theme.isLightTheme()) {
            return resolveDescription(theme, defaults.light);
        }
        else {
            return resolveDescription(theme, defaults.hc);
        }
    }
    else if (typeof colorDesc === 'function') {
        return colorDesc(theme);
    }
    else {
        return null;
    }
}
var themingRegistry = new ThemingRegistry();
platform.Registry.add(exports.Extensions.ThemingContribution, themingRegistry);
