/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var winjs_base_1 = require("vs/base/common/winjs.base");
var objects = require("vs/base/common/objects");
var config_1 = require("vs/base/node/config");
var platform_1 = require("vs/platform/platform");
var configurationRegistry_1 = require("vs/platform/configuration/common/configurationRegistry");
var lifecycle_1 = require("vs/base/common/lifecycle");
var configuration_1 = require("vs/platform/configuration/common/configuration");
var model_1 = require("vs/platform/configuration/common/model");
var event_1 = require("vs/base/common/event");
var environment_1 = require("vs/platform/environment/common/environment");
var ConfigurationService = (function (_super) {
    __extends(ConfigurationService, _super);
    function ConfigurationService(environmentService) {
        var _this = _super.call(this) || this;
        _this._onDidUpdateConfiguration = _this._register(new event_1.Emitter());
        _this.onDidUpdateConfiguration = _this._onDidUpdateConfiguration.event;
        _this.userConfigModelWatcher = new config_1.ConfigWatcher(environmentService.appSettingsPath, {
            changeBufferDelay: 300, defaultConfig: new model_1.ConfigModel(null, environmentService.appSettingsPath), parse: function (content, parseErrors) {
                var userConfigModel = new model_1.ConfigModel(content, environmentService.appSettingsPath);
                parseErrors = userConfigModel.errors.slice();
                return userConfigModel;
            }
        });
        _this._register(lifecycle_1.toDisposable(function () { return _this.userConfigModelWatcher.dispose(); }));
        // Listeners
        _this._register(_this.userConfigModelWatcher.onDidUpdateConfiguration(function () { return _this.onConfigurationChange(configuration_1.ConfigurationSource.User); }));
        _this._register(platform_1.Registry.as(configurationRegistry_1.Extensions.Configuration).onDidRegisterConfiguration(function () { return _this.onConfigurationChange(configuration_1.ConfigurationSource.Default); }));
        return _this;
    }
    ConfigurationService.prototype.onConfigurationChange = function (source) {
        this.cache = void 0; // reset our caches
        var cache = this.getCache();
        this._onDidUpdateConfiguration.fire({
            config: this.getConfiguration(),
            source: source,
            sourceConfig: source === configuration_1.ConfigurationSource.Default ? cache.defaults.contents : cache.user.contents
        });
    };
    ConfigurationService.prototype.reloadConfiguration = function (section) {
        var _this = this;
        return new winjs_base_1.TPromise(function (c) {
            _this.userConfigModelWatcher.reload(function () {
                _this.cache = void 0; // reset our caches
                c(_this.getConfiguration(section));
            });
        });
    };
    ConfigurationService.prototype.getConfiguration = function (arg) {
        var options = this.toOptions(arg);
        var cache = this.getCache();
        var configModel = options.overrideIdentifier ? cache.consolidated.configWithOverrides(options.overrideIdentifier) : cache.consolidated;
        return options.section ? configModel.getContentsFor(options.section) : configModel.contents;
    };
    ConfigurationService.prototype.lookup = function (key, overrideIdentifier) {
        var cache = this.getCache();
        // make sure to clone the configuration so that the receiver does not tamper with the values
        return {
            default: objects.clone(configuration_1.getConfigurationValue(overrideIdentifier ? cache.defaults.configWithOverrides(overrideIdentifier).contents : cache.defaults.contents, key)),
            user: objects.clone(configuration_1.getConfigurationValue(overrideIdentifier ? cache.user.configWithOverrides(overrideIdentifier).contents : cache.user.contents, key)),
            value: objects.clone(configuration_1.getConfigurationValue(overrideIdentifier ? cache.consolidated.configWithOverrides(overrideIdentifier).contents : cache.consolidated.contents, key))
        };
    };
    ConfigurationService.prototype.keys = function () {
        var cache = this.getCache();
        return {
            default: cache.defaults.keys,
            user: cache.user.keys
        };
    };
    ConfigurationService.prototype.getCache = function () {
        return this.cache || (this.cache = this.consolidateConfigurations());
    };
    ConfigurationService.prototype.toOptions = function (arg) {
        if (typeof arg === 'string') {
            return { section: arg };
        }
        if (typeof arg === 'object') {
            return arg;
        }
        return {};
    };
    ConfigurationService.prototype.consolidateConfigurations = function () {
        var defaults = new model_1.DefaultConfigModel();
        var user = this.userConfigModelWatcher.getConfig();
        var consolidated = defaults.merge(user);
        return { defaults: defaults, user: user, consolidated: consolidated };
    };
    return ConfigurationService;
}(lifecycle_1.Disposable));
ConfigurationService = __decorate([
    __param(0, environment_1.IEnvironmentService)
], ConfigurationService);
exports.ConfigurationService = ConfigurationService;
