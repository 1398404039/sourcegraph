import { TPromise } from 'vs/base/common/winjs.base';
import Event from 'vs/base/common/event';
export declare const IConfigurationService: {
    (...args: any[]): void;
    type: IConfigurationService;
};
export interface IConfigurationService {
    _serviceBrand: any;
    /**
     * Fetches the appropriate section of the configuration JSON file.
     * This will be an object keyed off the section name.
     */
    getConfiguration<T>(section?: string): T;
    /**
     * Resolves a configuration key to its values in the different scopes
     * the setting is defined.
     */
    lookup<T>(key: string): IConfigurationValue<T>;
    /**
     * Returns the defined keys of configurations in the different scopes
     * the key is defined.
     */
    keys(): IConfigurationKeys;
    /**
     * Similar to #getConfiguration() but ensures that the latest configuration
     * from disk is fetched.
     */
    reloadConfiguration<T>(section?: string): TPromise<T>;
    /**
     * Event that fires when the configuration changes.
     */
    onDidUpdateConfiguration: Event<IConfigurationServiceEvent>;
}
export declare enum ConfigurationSource {
    Default = 1,
    User = 2,
    Workspace = 3,
}
export interface IConfigurationServiceEvent {
    /**
     * The full configuration.
     */
    config: any;
    /**
     * The type of source that triggered this event.
     */
    source: ConfigurationSource;
    /**
     * The part of the configuration contributed by the source of this event.
     */
    sourceConfig: any;
}
export interface IConfigurationValue<T> {
    value: T;
    default: T;
    user: T;
}
export interface IConfigurationKeys {
    default: string[];
    user: string[];
}
/**
 * A helper function to get the configuration value with a specific settings path (e.g. config.some.setting)
 */
export declare function getConfigurationValue<T>(config: any, settingPath: string, defaultValue?: T): T;
