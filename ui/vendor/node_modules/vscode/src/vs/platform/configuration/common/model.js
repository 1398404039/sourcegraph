/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var platform_1 = require("vs/platform/platform");
var types = require("vs/base/common/types");
var json = require("vs/base/common/json");
var objects = require("vs/base/common/objects");
var arrays = require("vs/base/common/arrays");
var configurationRegistry_1 = require("vs/platform/configuration/common/configurationRegistry");
function getDefaultValues() {
    var valueTreeRoot = Object.create(null);
    var properties = platform_1.Registry.as(configurationRegistry_1.Extensions.Configuration).getConfigurationProperties();
    for (var key in properties) {
        var value = properties[key].default;
        addToValueTree(valueTreeRoot, key, value, function (message) { return console.error("Conflict in default settings: " + message); });
    }
    return valueTreeRoot;
}
exports.getDefaultValues = getDefaultValues;
function toValuesTree(properties, conflictReporter) {
    var root = Object.create(null);
    for (var key in properties) {
        addToValueTree(root, key, properties[key], conflictReporter);
    }
    return root;
}
exports.toValuesTree = toValuesTree;
function addToValueTree(settingsTreeRoot, key, value, conflictReporter) {
    var segments = key.split('.');
    var last = segments.pop();
    var curr = settingsTreeRoot;
    for (var i = 0; i < segments.length; i++) {
        var s = segments[i];
        var obj = curr[s];
        switch (typeof obj) {
            case 'undefined':
                obj = curr[s] = Object.create(null);
                break;
            case 'object':
                break;
            default:
                conflictReporter("Ignoring " + key + " as " + segments.slice(0, i + 1).join('.') + " is " + JSON.stringify(obj));
                return;
        }
        curr = obj;
    }
    ;
    if (typeof curr === 'object') {
        curr[last] = value; // workaround https://github.com/Microsoft/vscode/issues/13606
    }
    else {
        conflictReporter("Ignoring " + key + " as " + segments.join('.') + " is " + JSON.stringify(curr));
    }
}
function getConfigurationKeys() {
    var properties = platform_1.Registry.as(configurationRegistry_1.Extensions.Configuration).getConfigurationProperties();
    return Object.keys(properties);
}
exports.getConfigurationKeys = getConfigurationKeys;
function merge(base, add, overwrite) {
    Object.keys(add).forEach(function (key) {
        if (key in base) {
            if (types.isObject(base[key]) && types.isObject(add[key])) {
                merge(base[key], add[key], overwrite);
            }
            else if (overwrite) {
                base[key] = add[key];
            }
        }
        else {
            base[key] = add[key];
        }
    });
}
exports.merge = merge;
var ConfigModel = (function () {
    function ConfigModel(content, name) {
        if (content === void 0) { content = ''; }
        if (name === void 0) { name = ''; }
        this.name = name;
        this._contents = {};
        this._overrides = [];
        this._keys = [];
        this._parseErrors = [];
        if (content) {
            this.update(content);
        }
    }
    Object.defineProperty(ConfigModel.prototype, "contents", {
        get: function () {
            return this._contents;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConfigModel.prototype, "overrides", {
        get: function () {
            return this._overrides;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConfigModel.prototype, "keys", {
        get: function () {
            return this._keys;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConfigModel.prototype, "errors", {
        get: function () {
            return this._parseErrors;
        },
        enumerable: true,
        configurable: true
    });
    ConfigModel.prototype.merge = function (other, overwrite) {
        if (overwrite === void 0) { overwrite = true; }
        var mergedModel = new ConfigModel(null);
        this.doMerge(mergedModel, this, overwrite);
        this.doMerge(mergedModel, other, overwrite);
        return mergedModel;
    };
    ConfigModel.prototype.doMerge = function (source, target, overwrite) {
        if (overwrite === void 0) { overwrite = true; }
        merge(source.contents, objects.clone(target.contents), overwrite);
        var overrides = objects.clone(source.overrides);
        var _loop_1 = function (override) {
            var sourceOverride = overrides.filter(function (o) { return arrays.equals(o.identifiers, override.identifiers); })[0];
            if (sourceOverride) {
                merge(sourceOverride.contents, override.contents, overwrite);
            }
            else {
                overrides.push(override);
            }
        };
        for (var _i = 0, _a = target.overrides; _i < _a.length; _i++) {
            var override = _a[_i];
            _loop_1(override);
        }
        source._overrides = overrides;
    };
    ConfigModel.prototype.getContentsFor = function (section) {
        return objects.clone(this.contents[section]);
    };
    ConfigModel.prototype.configWithOverrides = function (identifier) {
        var result = new ConfigModel(null);
        var contents = objects.clone(this.contents);
        if (this.overrides) {
            for (var _i = 0, _a = this.overrides; _i < _a.length; _i++) {
                var override = _a[_i];
                if (override.identifiers.indexOf(identifier) !== -1) {
                    merge(contents, override.contents, true);
                }
            }
        }
        result._contents = contents;
        return result;
    };
    ConfigModel.prototype.update = function (content) {
        var _this = this;
        var parsed = {};
        var overrides = [];
        var currentProperty = null;
        var currentParent = [];
        var previousParents = [];
        var parseErrors = [];
        function onValue(value) {
            if (Array.isArray(currentParent)) {
                currentParent.push(value);
            }
            else if (currentProperty) {
                currentParent[currentProperty] = value;
            }
            if (configurationRegistry_1.OVERRIDE_PROPERTY_PATTERN.test(currentProperty)) {
                onOverrideSettingsValue(currentProperty, value);
            }
        }
        function onOverrideSettingsValue(property, value) {
            overrides.push({
                identifiers: [overrideIdentifierFromKey(property).trim()],
                raw: value,
                contents: null
            });
        }
        var visitor = {
            onObjectBegin: function () {
                var object = {};
                onValue(object);
                previousParents.push(currentParent);
                currentParent = object;
                currentProperty = null;
            },
            onObjectProperty: function (name) {
                currentProperty = name;
            },
            onObjectEnd: function () {
                currentParent = previousParents.pop();
            },
            onArrayBegin: function () {
                var array = [];
                onValue(array);
                previousParents.push(currentParent);
                currentParent = array;
                currentProperty = null;
            },
            onArrayEnd: function () {
                currentParent = previousParents.pop();
            },
            onLiteralValue: onValue,
            onError: function (error) {
                parseErrors.push({ error: error });
            }
        };
        if (content) {
            try {
                json.visit(content, visitor);
                parsed = currentParent[0] || {};
            }
            catch (e) {
                console.error("Error while parsing settings file " + this.name + ": " + e);
                this._parseErrors = [e];
            }
        }
        this.processRaw(parsed);
        var configurationProperties = platform_1.Registry.as(configurationRegistry_1.Extensions.Configuration).getConfigurationProperties();
        this._overrides = overrides.map(function (override) {
            // Filter unknown and non-overridable properties
            var raw = {};
            for (var key in override.raw) {
                if (configurationProperties[key] && configurationProperties[key].overridable) {
                    raw[key] = override.raw[key];
                }
            }
            return {
                identifiers: override.identifiers,
                contents: toValuesTree(raw, function (message) { return console.error("Conflict in settings file " + _this.name + ": " + message); })
            };
        });
    };
    ConfigModel.prototype.processRaw = function (raw) {
        var _this = this;
        this._contents = toValuesTree(raw, function (message) { return console.error("Conflict in settings file " + _this.name + ": " + message); });
        this._keys = Object.keys(raw);
    };
    return ConfigModel;
}());
exports.ConfigModel = ConfigModel;
var DefaultConfigModel = (function (_super) {
    __extends(DefaultConfigModel, _super);
    function DefaultConfigModel() {
        var _this = _super.call(this, null) || this;
        _this.update();
        return _this;
    }
    Object.defineProperty(DefaultConfigModel.prototype, "keys", {
        get: function () {
            return this._keys;
        },
        enumerable: true,
        configurable: true
    });
    DefaultConfigModel.prototype.update = function () {
        var _this = this;
        this._contents = getDefaultValues(); // defaults coming from contributions to registries
        this._keys = getConfigurationKeys();
        this._overrides = Object.keys(this._contents)
            .filter(function (key) { return configurationRegistry_1.OVERRIDE_PROPERTY_PATTERN.test(key); })
            .map(function (key) {
            return {
                identifiers: [overrideIdentifierFromKey(key).trim()],
                contents: toValuesTree(_this._contents[key], function (message) { return console.error("Conflict in default settings file: " + message); })
            };
        });
    };
    return DefaultConfigModel;
}(ConfigModel));
exports.DefaultConfigModel = DefaultConfigModel;
function overrideIdentifierFromKey(key) {
    return key.substring(1, key.length - 1);
}
exports.overrideIdentifierFromKey = overrideIdentifierFromKey;
function keyFromOverrideIdentifier(overrideIdentifier) {
    return "[" + overrideIdentifier + "]";
}
exports.keyFromOverrideIdentifier = keyFromOverrideIdentifier;
