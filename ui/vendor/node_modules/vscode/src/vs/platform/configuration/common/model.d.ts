import { IConfigModel, IOverrides } from 'vs/platform/configuration/common/configuration';
export declare function getDefaultValues(): any;
export declare function toValuesTree(properties: {
    [qualifiedKey: string]: any;
}, conflictReporter: (message: string) => void): any;
export declare function getConfigurationKeys(): string[];
export declare function merge(base: any, add: any, overwrite: boolean): void;
export declare class ConfigModel<T> implements IConfigModel<T> {
    private name;
    protected _contents: T;
    protected _overrides: IOverrides<T>[];
    protected _keys: string[];
    protected _parseErrors: any[];
    constructor(content?: string, name?: string);
    readonly contents: T;
    readonly overrides: IOverrides<T>[];
    readonly keys: string[];
    readonly errors: any[];
    merge(other: IConfigModel<T>, overwrite?: boolean): ConfigModel<T>;
    protected doMerge(source: ConfigModel<T>, target: IConfigModel<T>, overwrite?: boolean): void;
    getContentsFor<V>(section: string): V;
    configWithOverrides<V>(identifier: string): ConfigModel<V>;
    update(content: string): void;
    protected processRaw(raw: T): void;
}
export declare class DefaultConfigModel<T> extends ConfigModel<T> {
    constructor();
    readonly keys: string[];
    update(): void;
}
export declare function overrideIdentifierFromKey(key: string): string;
export declare function keyFromOverrideIdentifier(overrideIdentifier: string): string;
