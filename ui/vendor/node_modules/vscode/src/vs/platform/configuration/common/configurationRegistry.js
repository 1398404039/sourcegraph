/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var nls = require("vs/nls");
var event_1 = require("vs/base/common/event");
var platform_1 = require("vs/platform/platform");
var objects = require("vs/base/common/objects");
var types = require("vs/base/common/types");
var extensionsRegistry_1 = require("vs/platform/extensions/common/extensionsRegistry");
var jsonContributionRegistry_1 = require("vs/platform/jsonschemas/common/jsonContributionRegistry");
exports.Extensions = {
    Configuration: 'base.contributions.configuration'
};
var schemaId = 'vscode://schemas/settings';
var contributionRegistry = platform_1.Registry.as(jsonContributionRegistry_1.Extensions.JSONContribution);
var ConfigurationRegistry = (function () {
    function ConfigurationRegistry() {
        this.configurationContributors = [];
        this.configurationSchema = { properties: {}, additionalProperties: false, errorMessage: 'Unknown configuration setting' };
        this._onDidRegisterConfiguration = new event_1.Emitter();
        this.configurationProperties = {};
        contributionRegistry.registerSchema(schemaId, this.configurationSchema);
    }
    Object.defineProperty(ConfigurationRegistry.prototype, "onDidRegisterConfiguration", {
        get: function () {
            return this._onDidRegisterConfiguration.event;
        },
        enumerable: true,
        configurable: true
    });
    ConfigurationRegistry.prototype.registerConfiguration = function (configuration) {
        this.registerConfigurations([configuration]);
    };
    ConfigurationRegistry.prototype.registerConfigurations = function (configurations) {
        var _this = this;
        configurations.forEach(function (configuration) {
            _this.registerProperties(configuration); // fills in defaults
            _this.configurationContributors.push(configuration);
            _this.registerJSONConfiguration(configuration);
        });
        this._onDidRegisterConfiguration.fire(this);
    };
    ConfigurationRegistry.prototype.registerProperties = function (configuration) {
        var properties = configuration.properties;
        if (properties) {
            for (var key in properties) {
                // fill in default values
                var property = properties[key];
                var defaultValue = property.default;
                if (types.isUndefined(defaultValue)) {
                    property.default = getDefaultValue(property.type);
                }
                // add to properties map
                this.configurationProperties[key] = properties[key];
            }
        }
        var subNodes = configuration.allOf;
        if (subNodes) {
            for (var _i = 0, subNodes_1 = subNodes; _i < subNodes_1.length; _i++) {
                var node = subNodes_1[_i];
                this.registerProperties(node);
            }
        }
    };
    ConfigurationRegistry.prototype.getConfigurations = function () {
        return this.configurationContributors;
    };
    ConfigurationRegistry.prototype.getConfigurationProperties = function () {
        return this.configurationProperties;
    };
    ConfigurationRegistry.prototype.registerJSONConfiguration = function (configuration) {
        var configurationSchema = this.configurationSchema;
        function register(configuration) {
            var properties = configuration.properties;
            if (properties) {
                for (var key in properties) {
                    configurationSchema.properties[key] = properties[key];
                }
            }
            var subNodes = configuration.allOf;
            if (subNodes) {
                subNodes.forEach(register);
            }
        }
        ;
        register(configuration);
        contributionRegistry.registerSchema(schemaId, configurationSchema);
    };
    return ConfigurationRegistry;
}());
function getDefaultValue(type) {
    var t = Array.isArray(type) ? type[0] : type;
    switch (t) {
        case 'boolean':
            return false;
        case 'integer':
        case 'number':
            return 0;
        case 'string':
            return '';
        case 'array':
            return [];
        case 'object':
            return {};
        default:
            return null;
    }
}
var configurationRegistry = new ConfigurationRegistry();
platform_1.Registry.add(exports.Extensions.Configuration, configurationRegistry);
var configurationExtPoint = extensionsRegistry_1.ExtensionsRegistry.registerExtensionPoint('configuration', [], {
    description: nls.localize('vscode.extension.contributes.configuration', 'Contributes configuration settings.'),
    type: 'object',
    defaultSnippets: [{ body: { title: '', properties: {} } }],
    properties: {
        title: {
            description: nls.localize('vscode.extension.contributes.configuration.title', 'A summary of the settings. This label will be used in the settings file as separating comment.'),
            type: 'string'
        },
        properties: {
            description: nls.localize('vscode.extension.contributes.configuration.properties', 'Description of the configuration properties.'),
            type: 'object',
            additionalProperties: {
                $ref: 'http://json-schema.org/draft-04/schema#'
            }
        }
    }
});
configurationExtPoint.setHandler(function (extensions) {
    var configurations = [];
    for (var i = 0; i < extensions.length; i++) {
        var configuration = extensions[i].value;
        var collector = extensions[i].collector;
        if (configuration.type && configuration.type !== 'object') {
            collector.warn(nls.localize('invalid.type', "if set, 'configuration.type' must be set to 'object"));
        }
        else {
            configuration.type = 'object';
        }
        if (configuration.title && (typeof configuration.title !== 'string')) {
            collector.error(nls.localize('invalid.title', "'configuration.title' must be a string"));
        }
        if (configuration.properties && (typeof configuration.properties !== 'object')) {
            collector.error(nls.localize('invalid.properties', "'configuration.properties' must be an object"));
            return;
        }
        var clonedConfiguration = objects.clone(configuration);
        clonedConfiguration.id = extensions[i].description.id;
        configurations.push(clonedConfiguration);
    }
    configurationRegistry.registerConfigurations(configurations);
});
