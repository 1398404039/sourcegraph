/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var nls = require("vs/nls");
var event_1 = require("vs/base/common/event");
var platform_1 = require("vs/platform/platform");
var objects = require("vs/base/common/objects");
var types = require("vs/base/common/types");
var strings = require("vs/base/common/strings");
var extensionsRegistry_1 = require("vs/platform/extensions/common/extensionsRegistry");
var jsonContributionRegistry_1 = require("vs/platform/jsonschemas/common/jsonContributionRegistry");
exports.Extensions = {
    Configuration: 'base.contributions.configuration'
};
var schemaId = 'vscode://schemas/settings';
var editorConfigurationSchemaId = 'vscode://schemas/settings/editor';
var contributionRegistry = platform_1.Registry.as(jsonContributionRegistry_1.Extensions.JSONContribution);
var ConfigurationRegistry = (function () {
    function ConfigurationRegistry() {
        this.overrideIdentifiers = [];
        this.configurationContributors = [];
        this.configurationSchema = { properties: {}, patternProperties: {}, additionalProperties: false, errorMessage: 'Unknown configuration setting' };
        this.editorConfigurationSchema = { properties: {}, patternProperties: {}, additionalProperties: false, errorMessage: 'Unknown editor configuration setting' };
        this._onDidRegisterConfiguration = new event_1.Emitter();
        this.configurationProperties = {};
        this.computeOverridePropertyPattern();
        contributionRegistry.registerSchema(schemaId, this.configurationSchema);
        contributionRegistry.registerSchema(editorConfigurationSchemaId, this.editorConfigurationSchema);
    }
    Object.defineProperty(ConfigurationRegistry.prototype, "onDidRegisterConfiguration", {
        get: function () {
            return this._onDidRegisterConfiguration.event;
        },
        enumerable: true,
        configurable: true
    });
    ConfigurationRegistry.prototype.registerConfiguration = function (configuration, validate) {
        if (validate === void 0) { validate = true; }
        this.registerConfigurations([configuration], validate);
    };
    ConfigurationRegistry.prototype.registerConfigurations = function (configurations, validate) {
        var _this = this;
        if (validate === void 0) { validate = true; }
        configurations.forEach(function (configuration) {
            _this.validateAndRegisterProperties(configuration, validate); // fills in defaults
            _this.configurationContributors.push(configuration);
            _this.registerJSONConfiguration(configuration);
            _this.updateSchemaForOverrideSettingsConfiguration(configuration);
        });
        this._onDidRegisterConfiguration.fire(this);
    };
    ConfigurationRegistry.prototype.registerOverrideIdentifiers = function (overrideIdentifiers) {
        (_a = this.overrideIdentifiers).push.apply(_a, overrideIdentifiers);
        this.updateOverridePropertyPatternKey();
        var _a;
    };
    ConfigurationRegistry.prototype.registerDefaultConfigurations = function (defaultConfigurations) {
        var configurationNode = {
            id: 'defaultOverrides',
            title: nls.localize('defaultConfigurations.title', "Default Configuration Overrides"),
            properties: {}
        };
        for (var _i = 0, defaultConfigurations_1 = defaultConfigurations; _i < defaultConfigurations_1.length; _i++) {
            var defaultConfiguration = defaultConfigurations_1[_i];
            for (var key in defaultConfiguration.defaults) {
                var defaultValue = defaultConfiguration.defaults[key];
                if (exports.OVERRIDE_PROPERTY_PATTERN.test(key) && typeof defaultValue === 'object') {
                    configurationNode.properties[key] = {
                        type: 'object',
                        default: defaultValue,
                        description: nls.localize('overrideSettings.description', "Configure editor settings to be overridden for {0} language.", key),
                        $ref: editorConfigurationSchemaId
                    };
                }
            }
        }
        if (Object.keys(configurationNode.properties).length) {
            this.registerConfiguration(configurationNode, false);
        }
    };
    ConfigurationRegistry.prototype.validateAndRegisterProperties = function (configuration, validate, overridable) {
        if (validate === void 0) { validate = true; }
        if (overridable === void 0) { overridable = false; }
        overridable = configuration.overridable || overridable;
        var properties = configuration.properties;
        if (properties) {
            for (var key in properties) {
                var message = void 0;
                if (validate && (message = validateProperty(key))) {
                    console.warn(message);
                    delete properties[key];
                    continue;
                }
                // fill in default values
                var property = properties[key];
                var defaultValue = property.default;
                if (types.isUndefined(defaultValue)) {
                    property.default = getDefaultValue(property.type);
                }
                // Inherit overridable property from parent
                if (overridable) {
                    property.overridable = true;
                }
                // add to properties map
                this.configurationProperties[key] = properties[key];
            }
        }
        var subNodes = configuration.allOf;
        if (subNodes) {
            for (var _i = 0, subNodes_1 = subNodes; _i < subNodes_1.length; _i++) {
                var node = subNodes_1[_i];
                this.validateAndRegisterProperties(node, validate, overridable);
            }
        }
    };
    ConfigurationRegistry.prototype.validateProperty = function (property) {
        return !exports.OVERRIDE_PROPERTY_PATTERN.test(property) && this.getConfigurationProperties()[property] !== void 0;
    };
    ConfigurationRegistry.prototype.getConfigurations = function () {
        return this.configurationContributors;
    };
    ConfigurationRegistry.prototype.getConfigurationProperties = function () {
        return this.configurationProperties;
    };
    ConfigurationRegistry.prototype.registerJSONConfiguration = function (configuration) {
        var configurationSchema = this.configurationSchema;
        function register(configuration) {
            var properties = configuration.properties;
            if (properties) {
                for (var key in properties) {
                    configurationSchema.properties[key] = properties[key];
                }
            }
            var subNodes = configuration.allOf;
            if (subNodes) {
                subNodes.forEach(register);
            }
        }
        ;
        register(configuration);
        contributionRegistry.registerSchema(schemaId, configurationSchema);
    };
    ConfigurationRegistry.prototype.updateSchemaForOverrideSettingsConfiguration = function (configuration) {
        if (configuration.id !== SETTINGS_OVERRRIDE_NODE_ID) {
            this.update(configuration, this.editorConfigurationSchema);
            contributionRegistry.registerSchema(editorConfigurationSchemaId, this.editorConfigurationSchema);
        }
    };
    ConfigurationRegistry.prototype.updateOverridePropertyPatternKey = function () {
        var patternProperties = this.configurationSchema.patternProperties[this.overridePropertyPattern];
        if (!patternProperties) {
            patternProperties = {
                type: 'object',
                description: nls.localize('overrideSettings.defaultDescription', "Configure editor settings to be overridden for a language."),
                errorMessage: 'Unknown Identifier. Use language identifiers',
                $ref: editorConfigurationSchemaId
            };
        }
        delete this.configurationSchema.patternProperties[this.overridePropertyPattern];
        this.computeOverridePropertyPattern();
        this.configurationSchema.patternProperties[this.overridePropertyPattern] = patternProperties;
        contributionRegistry.registerSchema(schemaId, this.configurationSchema);
    };
    ConfigurationRegistry.prototype.update = function (configuration, overridePropertiesSchema) {
        var _this = this;
        var properties = configuration.properties;
        if (properties) {
            for (var key in properties) {
                if (properties[key].overridable) {
                    overridePropertiesSchema.properties[key] = this.getConfigurationProperties()[key];
                }
            }
        }
        var subNodes = configuration.allOf;
        if (subNodes) {
            subNodes.forEach(function (subNode) { return _this.update(subNode, overridePropertiesSchema); });
        }
    };
    ConfigurationRegistry.prototype.computeOverridePropertyPattern = function () {
        this.overridePropertyPattern = this.overrideIdentifiers.length ? OVERRIDE_PATTERN_WITH_SUBSTITUTION.replace('${0}', this.overrideIdentifiers.map(function (identifier) { return strings.createRegExp(identifier, false).source; }).join('|')) : OVERRIDE_PROPERTY;
    };
    return ConfigurationRegistry;
}());
var SETTINGS_OVERRRIDE_NODE_ID = 'override';
var OVERRIDE_PROPERTY = '\\[.*\\]$';
var OVERRIDE_PATTERN_WITH_SUBSTITUTION = '\\[(${0})\\]$';
exports.OVERRIDE_PROPERTY_PATTERN = new RegExp(OVERRIDE_PROPERTY);
function getDefaultValue(type) {
    var t = Array.isArray(type) ? type[0] : type;
    switch (t) {
        case 'boolean':
            return false;
        case 'integer':
        case 'number':
            return 0;
        case 'string':
            return '';
        case 'array':
            return [];
        case 'object':
            return {};
        default:
            return null;
    }
}
var configurationRegistry = new ConfigurationRegistry();
platform_1.Registry.add(exports.Extensions.Configuration, configurationRegistry);
var configurationExtPoint = extensionsRegistry_1.ExtensionsRegistry.registerExtensionPoint('configuration', [], {
    description: nls.localize('vscode.extension.contributes.configuration', 'Contributes configuration settings.'),
    type: 'object',
    defaultSnippets: [{ body: { title: '', properties: {} } }],
    properties: {
        title: {
            description: nls.localize('vscode.extension.contributes.configuration.title', 'A summary of the settings. This label will be used in the settings file as separating comment.'),
            type: 'string'
        },
        properties: {
            description: nls.localize('vscode.extension.contributes.configuration.properties', 'Description of the configuration properties.'),
            type: 'object',
            additionalProperties: {
                anyOf: [
                    { $ref: 'http://json-schema.org/draft-04/schema#' },
                    {
                        type: 'object',
                        properties: {
                            isExecutable: {
                                type: 'boolean'
                            }
                        }
                    }
                ]
            }
        }
    }
});
function validateProperty(property) {
    if (exports.OVERRIDE_PROPERTY_PATTERN.test(property)) {
        return nls.localize('config.property.languageDefault', "Cannot register '{0}'. This matches property pattern '\\\\[.*\\\\]$' for describing language specific editor settings. Use 'configurationDefaults' contribution.", property);
    }
    if (configurationRegistry.getConfigurationProperties()[property] !== void 0) {
        return nls.localize('config.property.duplicate', "Cannot register '{0}'. This property is already registered.", property);
    }
    return null;
}
function validateProperties(configuration, collector) {
    var properties = configuration.properties;
    if (properties) {
        if (typeof properties !== 'object') {
            collector.error(nls.localize('invalid.properties', "'configuration.properties' must be an object"));
            configuration.properties = {};
        }
        for (var key in properties) {
            var message = validateProperty(key);
            if (message) {
                collector.warn(message);
                delete properties[key];
            }
        }
    }
    var subNodes = configuration.allOf;
    if (subNodes) {
        for (var _i = 0, subNodes_2 = subNodes; _i < subNodes_2.length; _i++) {
            var node = subNodes_2[_i];
            validateProperties(node, collector);
        }
    }
}
configurationExtPoint.setHandler(function (extensions) {
    var configurations = [];
    for (var i = 0; i < extensions.length; i++) {
        var configuration = objects.clone(extensions[i].value);
        var collector = extensions[i].collector;
        if (configuration.type && configuration.type !== 'object') {
            collector.warn(nls.localize('invalid.type', "if set, 'configuration.type' must be set to 'object"));
        }
        else {
            configuration.type = 'object';
        }
        if (configuration.title && (typeof configuration.title !== 'string')) {
            collector.error(nls.localize('invalid.title', "'configuration.title' must be a string"));
        }
        validateProperties(configuration, collector);
        configuration.id = extensions[i].description.id;
        configurations.push(configuration);
    }
    configurationRegistry.registerConfigurations(configurations, false);
});
var defaultConfigurationExtPoint = extensionsRegistry_1.ExtensionsRegistry.registerExtensionPoint('configurationDefaults', [], {
    description: nls.localize('vscode.extension.contributes.defaultConfiguration', 'Contributes default editor configuration settings by language.'),
    type: 'object',
    defaultSnippets: [{ body: {} }],
    patternProperties: {
        '\\[.*\\]$': {
            type: 'object',
            default: {},
            $ref: editorConfigurationSchemaId,
        }
    }
});
defaultConfigurationExtPoint.setHandler(function (extensions) {
    var defaultConfigurations = extensions.map(function (extension) {
        var id = extension.description.id;
        var name = extension.description.name;
        var defaults = objects.clone(extension.value);
        return {
            id: id, name: name, defaults: defaults
        };
    });
    configurationRegistry.registerDefaultConfigurations(defaultConfigurations);
});
