import { TPromise } from 'vs/base/common/winjs.base';
import { IDisposable, Disposable } from 'vs/base/common/lifecycle';
import { IConfigurationService, IConfigurationServiceEvent, IConfigurationValue, IConfigurationKeys, IConfigModel, IConfigurationOptions } from 'vs/platform/configuration/common/configuration';
import Event from 'vs/base/common/event';
import { IEnvironmentService } from 'vs/platform/environment/common/environment';
export interface ICache<T> {
    defaults: IConfigModel<T>;
    user: IConfigModel<T>;
    consolidated: IConfigModel<any>;
}
export declare class ConfigurationService<T> extends Disposable implements IConfigurationService, IDisposable {
    _serviceBrand: any;
    private cache;
    private userConfigModelWatcher;
    private _onDidUpdateConfiguration;
    readonly onDidUpdateConfiguration: Event<IConfigurationServiceEvent>;
    constructor(environmentService: IEnvironmentService);
    private onConfigurationChange(source);
    reloadConfiguration<C>(section?: string): TPromise<C>;
    getConfiguration<C>(section?: string): C;
    getConfiguration<C>(options?: IConfigurationOptions): C;
    lookup<C>(key: string, overrideIdentifier?: string): IConfigurationValue<C>;
    keys(): IConfigurationKeys;
    getCache(): ICache<T>;
    private toOptions(arg);
    private consolidateConfigurations();
}
