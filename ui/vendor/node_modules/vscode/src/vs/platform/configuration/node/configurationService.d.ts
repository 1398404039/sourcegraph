import { TPromise } from 'vs/base/common/winjs.base';
import { IDisposable } from 'vs/base/common/lifecycle';
import { IConfigurationService, IConfigurationServiceEvent, IConfigurationValue, IConfigurationKeys } from 'vs/platform/configuration/common/configuration';
import Event from 'vs/base/common/event';
import { IEnvironmentService } from 'vs/platform/environment/common/environment';
export declare class ConfigurationService<T> implements IConfigurationService, IDisposable {
    _serviceBrand: any;
    private disposables;
    private rawConfig;
    private cache;
    private _onDidUpdateConfiguration;
    constructor(environmentService: IEnvironmentService);
    private onConfigurationChange(source);
    readonly onDidUpdateConfiguration: Event<IConfigurationServiceEvent>;
    reloadConfiguration<C>(section?: string): TPromise<C>;
    getConfiguration<C>(section?: string): C;
    private getCache();
    lookup<C>(key: string): IConfigurationValue<C>;
    keys(): IConfigurationKeys;
    private consolidateConfigurations();
    dispose(): void;
}
