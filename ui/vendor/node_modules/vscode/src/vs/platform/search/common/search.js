/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var objects_1 = require("vs/base/common/objects");
var instantiation_1 = require("vs/platform/instantiation/common/instantiation");
exports.ID = 'searchService';
exports.ISearchService = instantiation_1.createDecorator(exports.ID);
var QueryType;
(function (QueryType) {
    QueryType[QueryType["File"] = 1] = "File";
    QueryType[QueryType["Text"] = 2] = "Text";
})(QueryType = exports.QueryType || (exports.QueryType = {}));
// ---- very simple implementation of the search model --------------------
var FileMatch = (function () {
    function FileMatch(resource) {
        this.resource = resource;
        this.lineMatches = [];
        // empty
    }
    return FileMatch;
}());
exports.FileMatch = FileMatch;
var LineMatch = (function () {
    function LineMatch(preview, lineNumber, offsetAndLengths) {
        this.preview = preview;
        this.lineNumber = lineNumber;
        this.offsetAndLengths = offsetAndLengths;
        // empty
    }
    return LineMatch;
}());
exports.LineMatch = LineMatch;
function getExcludes(configuration) {
    var fileExcludes = configuration && configuration.files && configuration.files.exclude;
    var searchExcludes = configuration && configuration.search && configuration.search.exclude;
    if (!fileExcludes && !searchExcludes) {
        return null;
    }
    if (!fileExcludes || !searchExcludes) {
        return fileExcludes || searchExcludes;
    }
    var allExcludes = Object.create(null);
    allExcludes = objects_1.mixin(allExcludes, fileExcludes);
    allExcludes = objects_1.mixin(allExcludes, searchExcludes, true);
    return allExcludes;
}
exports.getExcludes = getExcludes;
