/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var paths_1 = require('vs/base/common/paths');
var contextkey_1 = require('vs/platform/contextkey/common/contextkey');
var modeService_1 = require('vs/editor/common/services/modeService');
var ResourceContextKey = (function () {
    function ResourceContextKey(contextKeyService, _modeService) {
        this._modeService = _modeService;
        this._schemeKey = ResourceContextKey.Scheme.bindTo(contextKeyService);
        this._filenameKey = ResourceContextKey.Filename.bindTo(contextKeyService);
        this._langIdKey = ResourceContextKey.LangId.bindTo(contextKeyService);
        this._resourceKey = ResourceContextKey.Resource.bindTo(contextKeyService);
    }
    ResourceContextKey.prototype.set = function (value) {
        this._resourceKey.set(value);
        this._schemeKey.set(value && value.scheme);
        this._filenameKey.set(value && paths_1.basename(value.fsPath));
        this._langIdKey.set(value && this._modeService.getModeIdByFilenameOrFirstLine(value.fsPath));
    };
    ResourceContextKey.prototype.reset = function () {
        this._schemeKey.reset();
        this._langIdKey.reset();
        this._resourceKey.reset();
    };
    ResourceContextKey.prototype.get = function () {
        return this._resourceKey.get();
    };
    ResourceContextKey.Scheme = new contextkey_1.RawContextKey('resourceScheme', undefined);
    ResourceContextKey.Filename = new contextkey_1.RawContextKey('resourceFilename', undefined);
    ResourceContextKey.LangId = new contextkey_1.RawContextKey('resourceLangId', undefined);
    ResourceContextKey.Resource = new contextkey_1.RawContextKey('resource', undefined);
    ResourceContextKey = __decorate([
        __param(0, contextkey_1.IContextKeyService),
        __param(1, modeService_1.IModeService)
    ], ResourceContextKey);
    return ResourceContextKey;
}());
exports.ResourceContextKey = ResourceContextKey;
