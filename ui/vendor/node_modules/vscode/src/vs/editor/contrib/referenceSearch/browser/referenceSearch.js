/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var nls = require("vs/nls");
var uri_1 = require("vs/base/common/uri");
var winjs_base_1 = require("vs/base/common/winjs.base");
var editor_1 = require("vs/platform/editor/common/editor");
var instantiation_1 = require("vs/platform/instantiation/common/instantiation");
var commands_1 = require("vs/platform/commands/common/commands");
var contextkey_1 = require("vs/platform/contextkey/common/contextkey");
var keybindingsRegistry_1 = require("vs/platform/keybinding/common/keybindingsRegistry");
var position_1 = require("vs/editor/common/core/position");
var range_1 = require("vs/editor/common/core/range");
var editorCommon = require("vs/editor/common/editorCommon");
var editorCommonExtensions_1 = require("vs/editor/common/editorCommonExtensions");
var peekViewWidget_1 = require("vs/editor/contrib/zoneWidget/browser/peekViewWidget");
var referenceSearch_1 = require("../common/referenceSearch");
var referencesController_1 = require("./referencesController");
var referencesModel_1 = require("./referencesModel");
var ModeContextKeys = editorCommon.ModeContextKeys;
var EditorContextKeys = editorCommon.EditorContextKeys;
var defaultReferenceSearchOptions = {
    getMetaTitle: function (model) {
        return model.references.length > 1 && nls.localize('meta.titleReference', " â€“ {0} references", model.references.length);
    }
};
var ReferenceController = ReferenceController_1 = (function () {
    function ReferenceController(editor, contextKeyService, peekViewService) {
        if (peekViewService) {
            peekViewWidget_1.PeekContext.inPeekEditor.bindTo(contextKeyService);
        }
    }
    ReferenceController.prototype.dispose = function () {
    };
    ReferenceController.prototype.getId = function () {
        return ReferenceController_1.ID;
    };
    return ReferenceController;
}());
ReferenceController.ID = 'editor.contrib.referenceController';
ReferenceController = ReferenceController_1 = __decorate([
    editorCommonExtensions_1.commonEditorContribution,
    __param(1, contextkey_1.IContextKeyService),
    __param(2, instantiation_1.optional(peekViewWidget_1.IPeekViewService))
], ReferenceController);
exports.ReferenceController = ReferenceController;
var ReferenceAction = (function (_super) {
    __extends(ReferenceAction, _super);
    function ReferenceAction() {
        return _super.call(this, {
            id: 'editor.action.referenceSearch.trigger',
            label: nls.localize('references.action.label', "Find All References"),
            alias: 'Find All References',
            precondition: contextkey_1.ContextKeyExpr.and(ModeContextKeys.hasReferenceProvider, peekViewWidget_1.PeekContext.notInPeekEditor),
            kbOpts: {
                kbExpr: EditorContextKeys.TextFocus,
                primary: 16384 /* Shift */ | 70 /* F12 */
            },
            menuOpts: {
                group: 'navigation',
                order: 1.3
            }
        }) || this;
    }
    ReferenceAction.prototype.run = function (accessor, editor) {
        var controller = referencesController_1.ReferencesController.get(editor);
        if (!controller) {
            return;
        }
        var range = editor.getSelection();
        var model = editor.getModel();
        var references = referenceSearch_1.provideReferences(model, range.getStartPosition()).then(function (references) { return new referencesModel_1.ReferencesModel(references); });
        controller.toggleWidget(range, references, defaultReferenceSearchOptions);
    };
    return ReferenceAction;
}(editorCommonExtensions_1.EditorAction));
ReferenceAction = __decorate([
    editorCommonExtensions_1.editorAction
], ReferenceAction);
exports.ReferenceAction = ReferenceAction;
var findReferencesCommand = function (accessor, resource, position) {
    if (!(resource instanceof uri_1.default)) {
        throw new Error('illegal argument, uri');
    }
    if (!position) {
        throw new Error('illegal argument, position');
    }
    return accessor.get(editor_1.IEditorService).openEditor({ resource: resource }).then(function (editor) {
        var control = editor.getControl();
        if (!control || typeof control.getEditorType !== 'function') {
            return;
        }
        var controller = referencesController_1.ReferencesController.get(control);
        if (!controller) {
            return;
        }
        var references = referenceSearch_1.provideReferences(control.getModel(), position_1.Position.lift(position)).then(function (references) { return new referencesModel_1.ReferencesModel(references); });
        var range = new range_1.Range(position.lineNumber, position.column, position.lineNumber, position.column);
        return winjs_base_1.TPromise.as(controller.toggleWidget(range, references, defaultReferenceSearchOptions));
    });
};
var showReferencesCommand = function (accessor, resource, position, references) {
    if (!(resource instanceof uri_1.default)) {
        throw new Error('illegal argument, uri expected');
    }
    return accessor.get(editor_1.IEditorService).openEditor({ resource: resource }).then(function (editor) {
        var control = editor.getControl();
        if (!control || typeof control.getEditorType !== 'function') {
            return;
        }
        var controller = referencesController_1.ReferencesController.get(control);
        if (!controller) {
            return;
        }
        return winjs_base_1.TPromise.as(controller.toggleWidget(new range_1.Range(position.lineNumber, position.column, position.lineNumber, position.column), winjs_base_1.TPromise.as(new referencesModel_1.ReferencesModel(references)), defaultReferenceSearchOptions)).then(function () { return true; });
    });
};
// register commands
commands_1.CommandsRegistry.registerCommand('editor.action.findReferences', findReferencesCommand);
commands_1.CommandsRegistry.registerCommand('editor.action.showReferences', {
    handler: showReferencesCommand,
    description: {
        description: 'Show references at a position in a file',
        args: [
            { name: 'uri', description: 'The text document in which to show references', constraint: uri_1.default },
            { name: 'position', description: 'The position at which to show', constraint: position_1.Position.isIPosition },
            { name: 'locations', description: 'An array of locations.', constraint: Array },
        ]
    }
});
function closeActiveReferenceSearch(accessor, args) {
    var outerEditor = peekViewWidget_1.getOuterEditor(accessor, args);
    if (!outerEditor) {
        return;
    }
    var controller = referencesController_1.ReferencesController.get(outerEditor);
    if (!controller) {
        return;
    }
    controller.closeWidget();
}
keybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({
    id: 'closeReferenceSearch',
    weight: editorCommonExtensions_1.CommonEditorRegistry.commandWeight(50),
    primary: 9 /* Escape */,
    secondary: [16384 /* Shift */ | 9 /* Escape */],
    when: contextkey_1.ContextKeyExpr.and(referencesController_1.ctxReferenceSearchVisible, contextkey_1.ContextKeyExpr.not('config.editor.stablePeek')),
    handler: closeActiveReferenceSearch
});
keybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({
    id: 'closeReferenceSearchEditor',
    weight: editorCommonExtensions_1.CommonEditorRegistry.commandWeight(-101),
    primary: 9 /* Escape */,
    secondary: [16384 /* Shift */ | 9 /* Escape */],
    when: contextkey_1.ContextKeyExpr.and(peekViewWidget_1.PeekContext.inPeekEditor, contextkey_1.ContextKeyExpr.not('config.editor.stablePeek')),
    handler: closeActiveReferenceSearch
});
var ReferenceController_1;
