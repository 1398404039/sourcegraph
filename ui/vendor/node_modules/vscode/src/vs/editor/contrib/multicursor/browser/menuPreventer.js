/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var lifecycle_1 = require("vs/base/common/lifecycle");
var editorBrowserExtensions_1 = require("vs/editor/browser/editorBrowserExtensions");
/**
 * Prevents the top-level menu from showing up when doing Alt + Click in the editor
 */
var MenuPreventer = MenuPreventer_1 = (function (_super) {
    __extends(MenuPreventer, _super);
    function MenuPreventer(editor) {
        var _this = _super.call(this) || this;
        _this._editor = editor;
        _this._altListeningMouse = false;
        _this._altMouseTriggered = false;
        // A global crossover handler to prevent menu bar from showing up
        // When <alt> is hold, we will listen to mouse events and prevent
        // the release event up <alt> if the mouse is triggered.
        _this._register(_this._editor.onMouseDown(function (e) {
            if (_this._altListeningMouse) {
                _this._altMouseTriggered = true;
            }
        }));
        _this._register(_this._editor.onKeyDown(function (e) {
            if (e.equals(8192 /* Alt */)) {
                if (!_this._altListeningMouse) {
                    _this._altMouseTriggered = false;
                }
                _this._altListeningMouse = true;
            }
        }));
        _this._register(_this._editor.onKeyUp(function (e) {
            if (e.equals(8192 /* Alt */)) {
                if (_this._altMouseTriggered) {
                    e.preventDefault();
                }
                _this._altListeningMouse = false;
                _this._altMouseTriggered = false;
            }
        }));
        return _this;
    }
    MenuPreventer.prototype.getId = function () {
        return MenuPreventer_1.ID;
    };
    return MenuPreventer;
}(lifecycle_1.Disposable));
MenuPreventer.ID = 'editor.contrib.menuPreventer';
MenuPreventer = MenuPreventer_1 = __decorate([
    editorBrowserExtensions_1.editorContribution
], MenuPreventer);
exports.MenuPreventer = MenuPreventer;
var MenuPreventer_1;
