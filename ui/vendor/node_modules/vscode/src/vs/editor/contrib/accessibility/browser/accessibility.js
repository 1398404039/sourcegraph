/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
require("./accessibility.css");
var nls = require("vs/nls");
var lifecycle_1 = require("vs/base/common/lifecycle");
var strings = require("vs/base/common/strings");
var dom_1 = require("vs/base/browser/dom");
var htmlContentRenderer_1 = require("vs/base/browser/htmlContentRenderer");
var fastDomNode_1 = require("vs/base/browser/fastDomNode");
var widget_1 = require("vs/base/browser/ui/widget");
var keybinding_1 = require("vs/platform/keybinding/common/keybinding");
var contextkey_1 = require("vs/platform/contextkey/common/contextkey");
var keybindingsRegistry_1 = require("vs/platform/keybinding/common/keybindingsRegistry");
var commonEditorConfig_1 = require("vs/editor/common/config/commonEditorConfig");
var editorCommon_1 = require("vs/editor/common/editorCommon");
var editorCommonExtensions_1 = require("vs/editor/common/editorCommonExtensions");
var editorBrowserExtensions_1 = require("vs/editor/browser/editorBrowserExtensions");
var toggleTabFocusMode_1 = require("vs/editor/contrib/toggleTabFocusMode/common/toggleTabFocusMode");
var CONTEXT_ACCESSIBILITY_WIDGET_VISIBLE = new contextkey_1.RawContextKey('accessibilityHelpWidgetVisible', false);
var TOGGLE_EXPERIMENTAL_SCREEN_READER_SUPPORT_COMMAND_ID = 'toggleExperimentalScreenReaderSupport';
var AccessibilityHelpController = AccessibilityHelpController_1 = (function (_super) {
    __extends(AccessibilityHelpController, _super);
    function AccessibilityHelpController(editor, contextKeyService, keybindingService) {
        var _this = _super.call(this) || this;
        _this._editor = editor;
        _this._widget = _this._register(new AccessibilityHelpWidget(_this._editor, contextKeyService, keybindingService));
        return _this;
    }
    AccessibilityHelpController.get = function (editor) {
        return editor.getContribution(AccessibilityHelpController_1.ID);
    };
    AccessibilityHelpController.prototype.getId = function () {
        return AccessibilityHelpController_1.ID;
    };
    AccessibilityHelpController.prototype.show = function () {
        this._widget.show();
    };
    AccessibilityHelpController.prototype.hide = function () {
        this._widget.hide();
    };
    return AccessibilityHelpController;
}(lifecycle_1.Disposable));
AccessibilityHelpController.ID = 'editor.contrib.accessibilityHelpController';
AccessibilityHelpController = AccessibilityHelpController_1 = __decorate([
    editorBrowserExtensions_1.editorContribution,
    __param(1, contextkey_1.IContextKeyService),
    __param(2, keybinding_1.IKeybindingService)
], AccessibilityHelpController);
var AccessibilityHelpWidget = (function (_super) {
    __extends(AccessibilityHelpWidget, _super);
    function AccessibilityHelpWidget(editor, contextKeyService, keybindingService) {
        var _this = _super.call(this) || this;
        _this._editor = editor;
        _this._keybindingService = keybindingService;
        _this._isVisibleKey = CONTEXT_ACCESSIBILITY_WIDGET_VISIBLE.bindTo(contextKeyService);
        _this._domNode = fastDomNode_1.createFastDomNode(document.createElement('div'));
        _this._domNode.setClassName('accessibilityHelpWidget');
        _this._domNode.setWidth(AccessibilityHelpWidget.WIDTH);
        _this._domNode.setHeight(AccessibilityHelpWidget.HEIGHT);
        _this._domNode.setDisplay('none');
        _this._domNode.setAttribute('role', 'tooltip');
        _this._domNode.setAttribute('aria-hidden', 'true');
        _this._isVisible = false;
        _this._register(_this._editor.onDidLayoutChange(function () {
            if (_this._isVisible) {
                _this._layout();
            }
        }));
        _this.onblur(_this._domNode.domNode, function () {
            _this.hide();
        });
        _this._editor.addOverlayWidget(_this);
        return _this;
    }
    AccessibilityHelpWidget.prototype.dispose = function () {
        this._editor.removeOverlayWidget(this);
        _super.prototype.dispose.call(this);
    };
    AccessibilityHelpWidget.prototype.getId = function () {
        return AccessibilityHelpWidget.ID;
    };
    AccessibilityHelpWidget.prototype.getDomNode = function () {
        return this._domNode.domNode;
    };
    AccessibilityHelpWidget.prototype.getPosition = function () {
        return {
            preference: null
        };
    };
    AccessibilityHelpWidget.prototype.show = function () {
        if (this._isVisible) {
            return;
        }
        this._isVisible = true;
        this._isVisibleKey.set(true);
        this._layout();
        this._domNode.setDisplay('block');
        this._domNode.setAttribute('aria-hidden', 'false');
        this._domNode.domNode.tabIndex = 0;
        this._buildContent();
        this._domNode.domNode.focus();
    };
    AccessibilityHelpWidget.prototype._descriptionForCommand = function (commandId, msg, noKbMsg) {
        var kb = this._keybindingService.lookupKeybinding(commandId);
        if (kb) {
            return strings.format(msg, kb.getAriaLabel());
        }
        return strings.format(noKbMsg, commandId);
    };
    AccessibilityHelpWidget.prototype._buildContent = function () {
        var opts = this._editor.getConfiguration();
        var text = nls.localize('introMsg', "Thank you for trying out VS Code's accessibility options.");
        text += '\n\n' + nls.localize('status', "Status:");
        var NLS_TAB_FOCUS_MODE_ON = nls.localize('tabFocusModeOnMsg', "Pressing Tab in the current editor will move focus to the next focusable element. Toggle this behavior by pressing {0}.");
        var NLS_TAB_FOCUS_MODE_ON_NO_KB = nls.localize('tabFocusModeOnMsgNoKb', "Pressing Tab in the current editor will move focus to the next focusable element. The command {0} is currently not triggerable by a keybinding.");
        var NLS_TAB_FOCUS_MODE_OFF = nls.localize('tabFocusModeOffMsg', "Pressing Tab in the current editor will insert the tab character. Toggle this behavior by pressing {0}.");
        var NLS_TAB_FOCUS_MODE_OFF_NO_KB = nls.localize('tabFocusModeOffMsgNoKb', "Pressing Tab in the current editor will insert the tab character. The command {0} is currently not triggerable by a keybinding.");
        if (opts.tabFocusMode) {
            text += '\n\n - ' + this._descriptionForCommand(toggleTabFocusMode_1.ToggleTabFocusModeAction.ID, NLS_TAB_FOCUS_MODE_ON, NLS_TAB_FOCUS_MODE_ON_NO_KB);
        }
        else {
            text += '\n\n - ' + this._descriptionForCommand(toggleTabFocusMode_1.ToggleTabFocusModeAction.ID, NLS_TAB_FOCUS_MODE_OFF, NLS_TAB_FOCUS_MODE_OFF_NO_KB);
        }
        text += '\n\n' + nls.localize('outroMsg', "You can dismiss this tooltip and return to the editor by pressing Escape.");
        this._domNode.domNode.appendChild(htmlContentRenderer_1.renderHtml({
            formattedText: text
        }));
    };
    AccessibilityHelpWidget.prototype.hide = function () {
        if (!this._isVisible) {
            return;
        }
        this._isVisible = false;
        this._isVisibleKey.reset();
        this._domNode.setDisplay('none');
        this._domNode.setAttribute('aria-hidden', 'true');
        this._domNode.domNode.tabIndex = -1;
        dom_1.clearNode(this._domNode.domNode);
        this._editor.focus();
    };
    AccessibilityHelpWidget.prototype._layout = function () {
        var editorLayout = this._editor.getLayoutInfo();
        var top = Math.round((editorLayout.height - AccessibilityHelpWidget.HEIGHT) / 2);
        this._domNode.setTop(top);
        var left = Math.round((editorLayout.width - AccessibilityHelpWidget.WIDTH) / 2);
        this._domNode.setLeft(left);
    };
    return AccessibilityHelpWidget;
}(widget_1.Widget));
AccessibilityHelpWidget.ID = 'editor.contrib.accessibilityHelpWidget';
AccessibilityHelpWidget.WIDTH = 500;
AccessibilityHelpWidget.HEIGHT = 300;
var ShowAccessibilityHelpAction = (function (_super) {
    __extends(ShowAccessibilityHelpAction, _super);
    function ShowAccessibilityHelpAction() {
        return _super.call(this, {
            id: 'editor.action.showAccessibilityHelp',
            label: nls.localize('ShowAccessibilityHelpAction', "Show Accessibility Help"),
            alias: 'Show Accessibility Help',
            precondition: null,
            kbOpts: {
                kbExpr: editorCommon_1.EditorContextKeys.Focus,
                primary: 512 /* Alt */ | 59 /* F1 */
            }
        }) || this;
    }
    ShowAccessibilityHelpAction.prototype.run = function (accessor, editor) {
        var controller = AccessibilityHelpController.get(editor);
        if (controller) {
            controller.show();
        }
    };
    return ShowAccessibilityHelpAction;
}(editorCommonExtensions_1.EditorAction));
ShowAccessibilityHelpAction = __decorate([
    editorCommonExtensions_1.editorAction
], ShowAccessibilityHelpAction);
var AccessibilityHelpCommand = editorCommonExtensions_1.EditorCommand.bindToContribution(AccessibilityHelpController.get);
editorCommonExtensions_1.CommonEditorRegistry.registerEditorCommand(new AccessibilityHelpCommand({
    id: 'closeAccessibilityHelp',
    precondition: CONTEXT_ACCESSIBILITY_WIDGET_VISIBLE,
    handler: function (x) { return x.hide(); },
    kbOpts: {
        weight: editorCommonExtensions_1.CommonEditorRegistry.commandWeight(100),
        kbExpr: editorCommon_1.EditorContextKeys.Focus,
        primary: 9 /* Escape */, secondary: [1024 /* Shift */ | 9 /* Escape */]
    }
}));
var ToggleExperimentalScreenReaderSupportCommand = (function (_super) {
    __extends(ToggleExperimentalScreenReaderSupportCommand, _super);
    function ToggleExperimentalScreenReaderSupportCommand() {
        return _super.call(this, {
            id: TOGGLE_EXPERIMENTAL_SCREEN_READER_SUPPORT_COMMAND_ID,
            precondition: null,
            kbOpts: {
                weight: keybindingsRegistry_1.KeybindingsRegistry.WEIGHT.workbenchContrib(),
                kbExpr: null,
                primary: 2048 /* CtrlCmd */ | 1024 /* Shift */ | 48 /* KEY_R */
            }
        }) || this;
    }
    ToggleExperimentalScreenReaderSupportCommand.prototype.runCommand = function (accessor, args) {
        var currentValue = commonEditorConfig_1.GlobalScreenReaderNVDA.getValue();
        commonEditorConfig_1.GlobalScreenReaderNVDA.setValue(!currentValue);
    };
    return ToggleExperimentalScreenReaderSupportCommand;
}(editorCommonExtensions_1.Command));
editorCommonExtensions_1.CommonEditorRegistry.registerEditorCommand(new ToggleExperimentalScreenReaderSupportCommand());
var AccessibilityHelpController_1;
