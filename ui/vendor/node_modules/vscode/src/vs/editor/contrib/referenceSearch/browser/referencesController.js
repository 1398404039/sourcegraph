/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var nls = require("vs/nls");
var errors_1 = require("vs/base/common/errors");
var lifecycle_1 = require("vs/base/common/lifecycle");
var severity_1 = require("vs/base/common/severity");
var editor_1 = require("vs/platform/editor/common/editor");
var event_1 = require("vs/base/common/event");
var instantiation_1 = require("vs/platform/instantiation/common/instantiation");
var contextkey_1 = require("vs/platform/contextkey/common/contextkey");
var message_1 = require("vs/platform/message/common/message");
var telemetry_1 = require("vs/platform/telemetry/common/telemetry");
var configuration_1 = require("vs/platform/configuration/common/configuration");
var workspace_1 = require("vs/platform/workspace/common/workspace");
var storage_1 = require("vs/platform/storage/common/storage");
var editorBrowserExtensions_1 = require("vs/editor/browser/editorBrowserExtensions");
var peekViewWidget_1 = require("vs/editor/contrib/zoneWidget/browser/peekViewWidget");
var referencesModel_1 = require("./referencesModel");
var referencesWidget_1 = require("./referencesWidget");
var resolverService_1 = require("vs/editor/common/services/resolverService");
exports.ctxReferenceSearchVisible = new contextkey_1.RawContextKey('referenceSearchVisible', false);
var ReferencesController = ReferencesController_1 = (function () {
    function ReferencesController(editor, contextKeyService, _editorService, _textModelResolverService, _telemetryService, _messageService, _instantiationService, _contextService, _storageService, _configurationService, _peekViewService) {
        this._editorService = _editorService;
        this._textModelResolverService = _textModelResolverService;
        this._telemetryService = _telemetryService;
        this._messageService = _messageService;
        this._instantiationService = _instantiationService;
        this._contextService = _contextService;
        this._storageService = _storageService;
        this._configurationService = _configurationService;
        this._peekViewService = _peekViewService;
        this._requestIdPool = 0;
        this._disposables = [];
        this._ignoreModelChangeEvent = false;
        this._editor = editor;
        this._referenceSearchVisible = exports.ctxReferenceSearchVisible.bindTo(contextKeyService);
    }
    ReferencesController.get = function (editor) {
        return editor.getContribution(ReferencesController_1.ID);
    };
    ReferencesController.prototype.getId = function () {
        return ReferencesController_1.ID;
    };
    ReferencesController.prototype.dispose = function () {
        if (this._widget) {
            this._widget.dispose();
            this._widget = null;
        }
        this._editor = null;
    };
    ReferencesController.prototype.toggleWidget = function (range, modelPromise, options) {
        var _this = this;
        // close current widget and return early is position didn't change
        var widgetPosition;
        if (this._widget) {
            widgetPosition = this._widget.position;
        }
        this.closeWidget();
        if (!!widgetPosition && range.containsPosition(widgetPosition)) {
            return null;
        }
        this._referenceSearchVisible.set(true);
        // close the widget on model/mode changes
        this._disposables.push(this._editor.onDidChangeModelMode(function () { _this.closeWidget(); }));
        this._disposables.push(this._editor.onDidChangeModel(function () {
            if (!_this._ignoreModelChangeEvent) {
                _this.closeWidget();
            }
        }));
        var storageKey = 'peekViewLayout';
        var data = JSON.parse(this._storageService.get(storageKey, undefined, '{}'));
        this._widget = new referencesWidget_1.ReferenceWidget(this._editor, data, this._textModelResolverService, this._contextService, this._instantiationService);
        this._widget.setTitle(nls.localize('labelLoading', "Loading..."));
        this._widget.show(range);
        this._disposables.push(this._widget.onDidClose(function () {
            modelPromise.cancel();
            _this._storageService.store(storageKey, JSON.stringify(_this._widget.layoutData));
            _this._widget = null;
            _this.closeWidget();
        }));
        this._disposables.push(this._widget.onDidSelectReference(function (event) {
            var element = event.element, kind = event.kind;
            switch (kind) {
                case 'open':
                    if (event.source === 'editor'
                        && _this._configurationService.lookup('editor.stablePeek').value) {
                        // when stable peek is configured we don't close
                        // the peek window on selecting the editor
                        break;
                    }
                case 'side':
                    _this._openReference(element, kind === 'side');
                    break;
                case 'goto':
                    if (options.onGoto) {
                        options.onGoto(element);
                    }
                    else {
                        _this._gotoReference(element);
                    }
                    break;
            }
        }));
        var requestId = ++this._requestIdPool;
        var firstUpdate = true;
        var handleModel = function (model, final) {
            if (final === void 0) { final = true; }
            // still current request? widget still open?
            if (requestId !== _this._requestIdPool || !_this._widget) {
                return;
            }
            if (_this._model) {
                _this._model.dispose();
            }
            _this._model = model;
            if (firstUpdate) {
                // measure time it stays open
                var startTime_1 = Date.now();
                _this._disposables.push({
                    dispose: function () {
                        _this._telemetryService.publicLog('zoneWidgetShown', {
                            mode: 'reference search',
                            elapsedTime: Date.now() - startTime_1
                        });
                    }
                });
            }
            // show widget
            var result = _this._widget.setModel(_this._model, !firstUpdate);
            firstUpdate = false;
            return result.then(function () {
                if (final) {
                    // set title
                    _this._widget.setMetaTitle(options.getMetaTitle(_this._model));
                    // set 'best' selection
                    var uri = _this._editor.getModel().uri;
                    var pos = { lineNumber: range.startLineNumber, column: range.startColumn };
                    var selection = _this._model.nearestReference(uri, pos);
                    if (selection && _this._widget.isTreeInDefaultState()) {
                        return _this._widget.setSelection(selection);
                    }
                }
            });
        };
        var aggregatedLocations = [];
        var promise = modelPromise.then(handleModel, function (error) {
            _this._messageService.show(severity_1.default.Error, error);
        }, function (newLocations) {
            aggregatedLocations.push.apply(aggregatedLocations, newLocations);
            handleModel(new referencesModel_1.ReferencesModel(aggregatedLocations), false);
        });
        var onDone = event_1.stopwatch(event_1.fromPromise(promise));
        onDone(function (duration) { return _this._telemetryService.publicLog('findReferences', {
            duration: duration,
            mode: _this._editor.getModel().getMode().getId()
        }); });
    };
    ReferencesController.prototype.closeWidget = function () {
        if (this._widget) {
            this._widget.dispose();
            this._widget = null;
        }
        this._referenceSearchVisible.reset();
        this._disposables = lifecycle_1.dispose(this._disposables);
        if (this._model) {
            this._model.dispose();
            this._model = null;
        }
        this._editor.focus();
        this._requestIdPool += 1; // Cancel pending requests
    };
    ReferencesController.prototype._gotoReference = function (ref) {
        var _this = this;
        this._widget.hide();
        this._ignoreModelChangeEvent = true;
        var uri = ref.uri, range = ref.range;
        this._editorService.openEditor({
            resource: uri,
            options: { selection: range }
        }).done(function (openedEditor) {
            _this._ignoreModelChangeEvent = false;
            if (!openedEditor || openedEditor.getControl() !== _this._editor) {
                // TODO@Alex TODO@Joh
                // when opening the current reference we might end up
                // in a different editor instance. that means we also have
                // a different instance of this reference search controller
                // and cannot hold onto the widget (which likely doesn't
                // exist). Instead of bailing out we should find the
                // 'sister' action and pass our current model on to it.
                _this.closeWidget();
                return;
            }
            _this._widget.show(range);
            _this._widget.focus();
        }, function (err) {
            _this._ignoreModelChangeEvent = false;
            errors_1.onUnexpectedError(err);
        });
    };
    ReferencesController.prototype._openReference = function (ref, sideBySide) {
        var uri = ref.uri, range = ref.range;
        this._editorService.openEditor({
            resource: uri,
            options: { selection: range }
        }, sideBySide);
        // clear stage
        if (!sideBySide) {
            this.closeWidget();
        }
    };
    return ReferencesController;
}());
ReferencesController.ID = 'editor.contrib.referencesController';
ReferencesController = ReferencesController_1 = __decorate([
    editorBrowserExtensions_1.editorContribution,
    __param(1, contextkey_1.IContextKeyService),
    __param(2, editor_1.IEditorService),
    __param(3, resolverService_1.ITextModelResolverService),
    __param(4, telemetry_1.ITelemetryService),
    __param(5, message_1.IMessageService),
    __param(6, instantiation_1.IInstantiationService),
    __param(7, workspace_1.IWorkspaceContextService),
    __param(8, storage_1.IStorageService),
    __param(9, configuration_1.IConfigurationService),
    __param(10, instantiation_1.optional(peekViewWidget_1.IPeekViewService))
], ReferencesController);
exports.ReferencesController = ReferencesController;
var ReferencesController_1;
