/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var arrays = require("vs/base/common/arrays");
var event_1 = require("vs/base/common/event");
var lifecycle_1 = require("vs/base/common/lifecycle");
var range_1 = require("vs/editor/common/core/range");
var modes_1 = require("vs/editor/common/modes");
var quickFix_1 = require("../common/quickFix");
var QuickFixOracle = (function () {
    function QuickFixOracle(_editor, _markerService, _signalChange) {
        var _this = this;
        this._editor = _editor;
        this._markerService = _markerService;
        this._signalChange = _signalChange;
        this._disposables = [];
        this._disposables.push(this._markerService.onMarkerChanged(function (e) { return _this._onMarkerChanges(e); }), this._editor.onDidChangeCursorPosition(function (e) { return _this._onCursorChange(); }));
    }
    QuickFixOracle.prototype.dispose = function () {
        this._disposables = lifecycle_1.dispose(this._disposables);
    };
    QuickFixOracle.prototype.trigger = function (type) {
        var range = this._rangeAtPosition();
        if (!range) {
            range = this._editor.getSelection();
        }
        this._signalChange({
            type: type,
            range: range,
            position: this._editor.getPosition(),
            fixes: range && quickFix_1.getCodeActions(this._editor.getModel(), this._editor.getModel().validateRange(range))
        });
    };
    QuickFixOracle.prototype._onMarkerChanges = function (resources) {
        var uri = this._editor.getModel().uri;
        for (var _i = 0, resources_1 = resources; _i < resources_1.length; _i++) {
            var resource = resources_1[_i];
            if (resource.toString() === uri.toString()) {
                this._currentRange = undefined;
                this._onCursorChange();
                return;
            }
        }
    };
    QuickFixOracle.prototype._onCursorChange = function () {
        var range = this._rangeAtPosition();
        if (!range_1.Range.equalsRange(this._currentRange, range)) {
            this._currentRange = range;
            this._signalChange({
                type: 'auto',
                range: range,
                position: this._editor.getPosition(),
                fixes: range && quickFix_1.getCodeActions(this._editor.getModel(), this._editor.getModel().validateRange(range))
            });
        }
    };
    QuickFixOracle.prototype._rangeAtPosition = function () {
        // (1) check with non empty selection
        var selection = this._editor.getSelection();
        if (!selection.isEmpty()) {
            return selection;
        }
        // (2) check with diagnostics markers
        var marker = this._markerAtPosition();
        if (marker) {
            return range_1.Range.lift(marker);
        }
        // (3) check with word
        return this._wordAtPosition();
    };
    QuickFixOracle.prototype._markerAtPosition = function () {
        var position = this._editor.getPosition();
        var uri = this._editor.getModel().uri;
        var markers = this._markerService.read({ resource: uri }).sort(range_1.Range.compareRangesUsingStarts);
        var idx = arrays.findFirst(markers, function (marker) { return marker.endLineNumber >= position.lineNumber; });
        while (idx < markers.length && markers[idx].endLineNumber >= position.lineNumber) {
            var marker = markers[idx];
            if (range_1.Range.containsPosition(marker, position)) {
                return marker;
            }
            idx++;
        }
        return undefined;
    };
    QuickFixOracle.prototype._wordAtPosition = function () {
        var pos = this._editor.getPosition();
        var model = this._editor.getModel();
        var info = model.getWordAtPosition(pos);
        if (info) {
            return {
                startLineNumber: pos.lineNumber,
                startColumn: info.startColumn,
                endLineNumber: pos.lineNumber,
                endColumn: info.endColumn
            };
        }
        return undefined;
    };
    return QuickFixOracle;
}());
exports.QuickFixOracle = QuickFixOracle;
var QuickFixModel = (function () {
    function QuickFixModel(editor, markerService) {
        var _this = this;
        this._onDidChangeFixes = new event_1.Emitter();
        this._disposables = [];
        this._editor = editor;
        this._markerService = markerService;
        this._disposables.push(this._editor.onDidChangeModel(function () { return _this._update(); }));
        this._disposables.push(this._editor.onDidChangeModelLanguage(function () { return _this._update(); }));
        this._disposables.push(modes_1.CodeActionProviderRegistry.onDidChange(this._update, this));
        this._update();
    }
    QuickFixModel.prototype.dispose = function () {
        this._disposables = lifecycle_1.dispose(this._disposables);
        lifecycle_1.dispose(this._quickFixOracle);
    };
    Object.defineProperty(QuickFixModel.prototype, "onDidChangeFixes", {
        get: function () {
            return this._onDidChangeFixes.event;
        },
        enumerable: true,
        configurable: true
    });
    QuickFixModel.prototype._update = function () {
        var _this = this;
        if (this._quickFixOracle) {
            this._quickFixOracle.dispose();
            this._quickFixOracle = undefined;
            this._onDidChangeFixes.fire(undefined);
        }
        if (this._editor.getModel()
            && modes_1.CodeActionProviderRegistry.has(this._editor.getModel())
            && !this._editor.getConfiguration().readOnly) {
            this._quickFixOracle = new QuickFixOracle(this._editor, this._markerService, function (p) { return _this._onDidChangeFixes.fire(p); });
            this._quickFixOracle.trigger('auto');
        }
    };
    QuickFixModel.prototype.trigger = function (type) {
        if (this._quickFixOracle) {
            this._quickFixOracle.trigger(type);
        }
    };
    return QuickFixModel;
}());
exports.QuickFixModel = QuickFixModel;
