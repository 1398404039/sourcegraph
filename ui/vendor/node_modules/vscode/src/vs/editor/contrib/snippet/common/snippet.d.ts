import * as editorCommon from 'vs/editor/common/editorCommon';
export interface IIndentationNormalizer {
    normalizeIndentation(str: string): string;
}
export interface IPlaceHolder {
    id: string;
    value: string;
    occurences: editorCommon.IRange[];
}
export interface ICodeSnippet {
    lines: string[];
    placeHolders: IPlaceHolder[];
    finishPlaceHolderIndex: number;
}
export interface ISnippetVariableResolver {
    resolve(name: string): string;
}
export declare class CodeSnippet implements ICodeSnippet {
    static fromTextmate(template: string, variableResolver?: ISnippetVariableResolver): CodeSnippet;
    static fromInternal(template: string): CodeSnippet;
    static none(template: string): CodeSnippet;
    static fromEmmet(template: string): CodeSnippet;
    lines: string[];
    placeHolders: IPlaceHolder[];
    finishPlaceHolderIndex: number;
    readonly isInsertOnly: boolean;
    readonly isSingleTabstopOnly: boolean;
    private extractLineIndentation(str, maxColumn?);
    bind(referenceLine: string, deltaLine: number, firstLineDeltaColumn: number, config: IIndentationNormalizer): ICodeSnippet;
}
export declare enum ExternalSnippetType {
    TextMateSnippet = 0,
    EmmetSnippet = 1,
}
