/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var nls = require("vs/nls");
var editorCommon_1 = require("vs/editor/common/editorCommon");
var editorCommonExtensions_1 = require("vs/editor/common/editorCommonExtensions");
var InsertCursorAbove = (function (_super) {
    __extends(InsertCursorAbove, _super);
    function InsertCursorAbove() {
        return _super.call(this, {
            id: 'editor.action.insertCursorAbove',
            label: nls.localize('mutlicursor.insertAbove', "Add Cursor Above"),
            alias: 'Add Cursor Above',
            precondition: null,
            handlerId: editorCommon_1.Handler.AddCursorUp,
            kbOpts: {
                kbExpr: editorCommon_1.EditorContextKeys.TextFocus,
                primary: 32768 /* CtrlCmd */ | 8192 /* Alt */ | 16 /* UpArrow */,
                linux: {
                    primary: 16384 /* Shift */ | 8192 /* Alt */ | 16 /* UpArrow */,
                    secondary: [32768 /* CtrlCmd */ | 16384 /* Shift */ | 16 /* UpArrow */]
                }
            }
        }) || this;
    }
    return InsertCursorAbove;
}(editorCommonExtensions_1.HandlerEditorAction));
InsertCursorAbove = __decorate([
    editorCommonExtensions_1.editorAction
], InsertCursorAbove);
var InsertCursorBelow = (function (_super) {
    __extends(InsertCursorBelow, _super);
    function InsertCursorBelow() {
        return _super.call(this, {
            id: 'editor.action.insertCursorBelow',
            label: nls.localize('mutlicursor.insertBelow', "Add Cursor Below"),
            alias: 'Add Cursor Below',
            precondition: null,
            handlerId: editorCommon_1.Handler.AddCursorDown,
            kbOpts: {
                kbExpr: editorCommon_1.EditorContextKeys.TextFocus,
                primary: 32768 /* CtrlCmd */ | 8192 /* Alt */ | 18 /* DownArrow */,
                linux: {
                    primary: 16384 /* Shift */ | 8192 /* Alt */ | 18 /* DownArrow */,
                    secondary: [32768 /* CtrlCmd */ | 16384 /* Shift */ | 18 /* DownArrow */]
                }
            }
        }) || this;
    }
    return InsertCursorBelow;
}(editorCommonExtensions_1.HandlerEditorAction));
InsertCursorBelow = __decorate([
    editorCommonExtensions_1.editorAction
], InsertCursorBelow);
var InsertCursorAtEndOfEachLineSelected = (function (_super) {
    __extends(InsertCursorAtEndOfEachLineSelected, _super);
    function InsertCursorAtEndOfEachLineSelected() {
        return _super.call(this, {
            id: 'editor.action.insertCursorAtEndOfEachLineSelected',
            label: nls.localize('mutlicursor.insertAtEndOfEachLineSelected', "Create Multiple Cursors from Selected Lines"),
            alias: 'Create Multiple Cursors from Selected Lines',
            precondition: null,
            kbOpts: {
                kbExpr: editorCommon_1.EditorContextKeys.TextFocus,
                primary: 16384 /* Shift */ | 8192 /* Alt */ | 39 /* KEY_I */
            }
        }) || this;
    }
    InsertCursorAtEndOfEachLineSelected.prototype.run = function (accessor, editor) {
        var selection = editor.getSelection();
        if (selection.isEmpty()) {
            return;
        }
        var model = editor.getModel();
        var newSelections = new Array();
        var selectionStart = selection.getStartPosition();
        var selectionEnd = selection.getEndPosition();
        for (var i = selectionStart.lineNumber; i <= selectionEnd.lineNumber; i++) {
            if (i !== selectionEnd.lineNumber) {
                var currentLineMaxColumn = model.getLineMaxColumn(i);
                newSelections.push({
                    selectionStartLineNumber: i,
                    selectionStartColumn: currentLineMaxColumn,
                    positionLineNumber: i,
                    positionColumn: currentLineMaxColumn
                });
            }
            else if (selectionEnd.column > 0) {
                newSelections.push({
                    selectionStartLineNumber: selectionEnd.lineNumber,
                    selectionStartColumn: selectionEnd.column,
                    positionLineNumber: selectionEnd.lineNumber,
                    positionColumn: selectionEnd.column
                });
            }
        }
        editor.setSelections(newSelections);
    };
    return InsertCursorAtEndOfEachLineSelected;
}(editorCommonExtensions_1.EditorAction));
InsertCursorAtEndOfEachLineSelected = __decorate([
    editorCommonExtensions_1.editorAction
], InsertCursorAtEndOfEachLineSelected);
