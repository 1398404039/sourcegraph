/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var nls = require("vs/nls");
var keyCodes_1 = require("vs/base/common/keyCodes");
var sortLinesCommand_1 = require("vs/editor/contrib/linesOperations/common/sortLinesCommand");
var editOperation_1 = require("vs/editor/common/core/editOperation");
var trimTrailingWhitespaceCommand_1 = require("vs/editor/common/commands/trimTrailingWhitespaceCommand");
var editorCommon_1 = require("vs/editor/common/editorCommon");
var replaceCommand_1 = require("vs/editor/common/commands/replaceCommand");
var range_1 = require("vs/editor/common/core/range");
var selection_1 = require("vs/editor/common/core/selection");
var editorCommonExtensions_1 = require("vs/editor/common/editorCommonExtensions");
var copyLinesCommand_1 = require("./copyLinesCommand");
var deleteLinesCommand_1 = require("./deleteLinesCommand");
var moveLinesCommand_1 = require("./moveLinesCommand");
// copy lines
var AbstractCopyLinesAction = (function (_super) {
    __extends(AbstractCopyLinesAction, _super);
    function AbstractCopyLinesAction(down, opts) {
        var _this = _super.call(this, opts) || this;
        _this.down = down;
        return _this;
    }
    AbstractCopyLinesAction.prototype.run = function (accessor, editor) {
        var commands = [];
        var selections = editor.getSelections();
        for (var i = 0; i < selections.length; i++) {
            commands.push(new copyLinesCommand_1.CopyLinesCommand(selections[i], this.down));
        }
        editor.executeCommands(this.id, commands);
    };
    return AbstractCopyLinesAction;
}(editorCommonExtensions_1.EditorAction));
var CopyLinesUpAction = (function (_super) {
    __extends(CopyLinesUpAction, _super);
    function CopyLinesUpAction() {
        return _super.call(this, false, {
            id: 'editor.action.copyLinesUpAction',
            label: nls.localize('lines.copyUp', "Copy Line Up"),
            alias: 'Copy Line Up',
            precondition: editorCommon_1.EditorContextKeys.Writable,
            kbOpts: {
                kbExpr: editorCommon_1.EditorContextKeys.TextFocus,
                primary: 8192 /* Alt */ | 16384 /* Shift */ | 16 /* UpArrow */,
                linux: { primary: 32768 /* CtrlCmd */ | 8192 /* Alt */ | 16384 /* Shift */ | 16 /* UpArrow */ }
            }
        }) || this;
    }
    return CopyLinesUpAction;
}(AbstractCopyLinesAction));
CopyLinesUpAction = __decorate([
    editorCommonExtensions_1.editorAction
], CopyLinesUpAction);
var CopyLinesDownAction = (function (_super) {
    __extends(CopyLinesDownAction, _super);
    function CopyLinesDownAction() {
        return _super.call(this, true, {
            id: 'editor.action.copyLinesDownAction',
            label: nls.localize('lines.copyDown', "Copy Line Down"),
            alias: 'Copy Line Down',
            precondition: editorCommon_1.EditorContextKeys.Writable,
            kbOpts: {
                kbExpr: editorCommon_1.EditorContextKeys.TextFocus,
                primary: 8192 /* Alt */ | 16384 /* Shift */ | 18 /* DownArrow */,
                linux: { primary: 32768 /* CtrlCmd */ | 8192 /* Alt */ | 16384 /* Shift */ | 18 /* DownArrow */ }
            }
        }) || this;
    }
    return CopyLinesDownAction;
}(AbstractCopyLinesAction));
CopyLinesDownAction = __decorate([
    editorCommonExtensions_1.editorAction
], CopyLinesDownAction);
// move lines
var AbstractMoveLinesAction = (function (_super) {
    __extends(AbstractMoveLinesAction, _super);
    function AbstractMoveLinesAction(down, opts) {
        var _this = _super.call(this, opts) || this;
        _this.down = down;
        return _this;
    }
    AbstractMoveLinesAction.prototype.run = function (accessor, editor) {
        var commands = [];
        var selections = editor.getSelections();
        for (var i = 0; i < selections.length; i++) {
            commands.push(new moveLinesCommand_1.MoveLinesCommand(selections[i], this.down));
        }
        editor.executeCommands(this.id, commands);
    };
    return AbstractMoveLinesAction;
}(editorCommonExtensions_1.EditorAction));
var MoveLinesUpAction = (function (_super) {
    __extends(MoveLinesUpAction, _super);
    function MoveLinesUpAction() {
        return _super.call(this, false, {
            id: 'editor.action.moveLinesUpAction',
            label: nls.localize('lines.moveUp', "Move Line Up"),
            alias: 'Move Line Up',
            precondition: editorCommon_1.EditorContextKeys.Writable,
            kbOpts: {
                kbExpr: editorCommon_1.EditorContextKeys.TextFocus,
                primary: 8192 /* Alt */ | 16 /* UpArrow */,
                linux: { primary: 8192 /* Alt */ | 16 /* UpArrow */ }
            }
        }) || this;
    }
    return MoveLinesUpAction;
}(AbstractMoveLinesAction));
MoveLinesUpAction = __decorate([
    editorCommonExtensions_1.editorAction
], MoveLinesUpAction);
var MoveLinesDownAction = (function (_super) {
    __extends(MoveLinesDownAction, _super);
    function MoveLinesDownAction() {
        return _super.call(this, true, {
            id: 'editor.action.moveLinesDownAction',
            label: nls.localize('lines.moveDown', "Move Line Down"),
            alias: 'Move Line Down',
            precondition: editorCommon_1.EditorContextKeys.Writable,
            kbOpts: {
                kbExpr: editorCommon_1.EditorContextKeys.TextFocus,
                primary: 8192 /* Alt */ | 18 /* DownArrow */,
                linux: { primary: 8192 /* Alt */ | 18 /* DownArrow */ }
            }
        }) || this;
    }
    return MoveLinesDownAction;
}(AbstractMoveLinesAction));
MoveLinesDownAction = __decorate([
    editorCommonExtensions_1.editorAction
], MoveLinesDownAction);
var AbstractSortLinesAction = (function (_super) {
    __extends(AbstractSortLinesAction, _super);
    function AbstractSortLinesAction(descending, opts) {
        var _this = _super.call(this, opts) || this;
        _this.descending = descending;
        return _this;
    }
    AbstractSortLinesAction.prototype.run = function (accessor, editor) {
        if (!sortLinesCommand_1.SortLinesCommand.canRun(editor.getModel(), editor.getSelection(), this.descending)) {
            return;
        }
        var command = new sortLinesCommand_1.SortLinesCommand(editor.getSelection(), this.descending);
        editor.executeCommands(this.id, [command]);
    };
    return AbstractSortLinesAction;
}(editorCommonExtensions_1.EditorAction));
var SortLinesAscendingAction = (function (_super) {
    __extends(SortLinesAscendingAction, _super);
    function SortLinesAscendingAction() {
        return _super.call(this, false, {
            id: 'editor.action.sortLinesAscending',
            label: nls.localize('lines.sortAscending', "Sort Lines Ascending"),
            alias: 'Sort Lines Ascending',
            precondition: editorCommon_1.EditorContextKeys.Writable
        }) || this;
    }
    return SortLinesAscendingAction;
}(AbstractSortLinesAction));
SortLinesAscendingAction = __decorate([
    editorCommonExtensions_1.editorAction
], SortLinesAscendingAction);
var SortLinesDescendingAction = (function (_super) {
    __extends(SortLinesDescendingAction, _super);
    function SortLinesDescendingAction() {
        return _super.call(this, true, {
            id: 'editor.action.sortLinesDescending',
            label: nls.localize('lines.sortDescending', "Sort Lines Descending"),
            alias: 'Sort Lines Descending',
            precondition: editorCommon_1.EditorContextKeys.Writable
        }) || this;
    }
    return SortLinesDescendingAction;
}(AbstractSortLinesAction));
SortLinesDescendingAction = __decorate([
    editorCommonExtensions_1.editorAction
], SortLinesDescendingAction);
var TrimTrailingWhitespaceAction = TrimTrailingWhitespaceAction_1 = (function (_super) {
    __extends(TrimTrailingWhitespaceAction, _super);
    function TrimTrailingWhitespaceAction() {
        return _super.call(this, {
            id: TrimTrailingWhitespaceAction_1.ID,
            label: nls.localize('lines.trimTrailingWhitespace', "Trim Trailing Whitespace"),
            alias: 'Trim Trailing Whitespace',
            precondition: editorCommon_1.EditorContextKeys.Writable,
            kbOpts: {
                kbExpr: editorCommon_1.EditorContextKeys.TextFocus,
                primary: keyCodes_1.KeyChord(32768 /* CtrlCmd */ | 41 /* KEY_K */, 32768 /* CtrlCmd */ | 54 /* KEY_X */)
            }
        }) || this;
    }
    TrimTrailingWhitespaceAction.prototype.run = function (accessor, editor) {
        var command = new trimTrailingWhitespaceCommand_1.TrimTrailingWhitespaceCommand(editor.getSelection());
        editor.executeCommands(this.id, [command]);
    };
    return TrimTrailingWhitespaceAction;
}(editorCommonExtensions_1.EditorAction));
TrimTrailingWhitespaceAction.ID = 'editor.action.trimTrailingWhitespace';
TrimTrailingWhitespaceAction = TrimTrailingWhitespaceAction_1 = __decorate([
    editorCommonExtensions_1.editorAction
], TrimTrailingWhitespaceAction);
exports.TrimTrailingWhitespaceAction = TrimTrailingWhitespaceAction;
var AbstractRemoveLinesAction = (function (_super) {
    __extends(AbstractRemoveLinesAction, _super);
    function AbstractRemoveLinesAction() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AbstractRemoveLinesAction.prototype._getLinesToRemove = function (editor) {
        // Construct delete operations
        var operations = editor.getSelections().map(function (s) {
            var endLineNumber = s.endLineNumber;
            if (s.startLineNumber < s.endLineNumber && s.endColumn === 1) {
                endLineNumber -= 1;
            }
            return {
                startLineNumber: s.startLineNumber,
                endLineNumber: endLineNumber,
                positionColumn: s.positionColumn
            };
        });
        // Sort delete operations
        operations.sort(function (a, b) {
            return a.startLineNumber - b.startLineNumber;
        });
        // Merge delete operations on consecutive lines
        var mergedOperations = [];
        var previousOperation = operations[0];
        for (var i = 1; i < operations.length; i++) {
            if (previousOperation.endLineNumber + 1 === operations[i].startLineNumber) {
                // Merge current operations into the previous one
                previousOperation.endLineNumber = operations[i].endLineNumber;
            }
            else {
                // Push previous operation
                mergedOperations.push(previousOperation);
                previousOperation = operations[i];
            }
        }
        // Push the last operation
        mergedOperations.push(previousOperation);
        return mergedOperations;
    };
    return AbstractRemoveLinesAction;
}(editorCommonExtensions_1.EditorAction));
var DeleteLinesAction = (function (_super) {
    __extends(DeleteLinesAction, _super);
    function DeleteLinesAction() {
        return _super.call(this, {
            id: 'editor.action.deleteLines',
            label: nls.localize('lines.delete', "Delete Line"),
            alias: 'Delete Line',
            precondition: editorCommon_1.EditorContextKeys.Writable,
            kbOpts: {
                kbExpr: editorCommon_1.EditorContextKeys.TextFocus,
                primary: 32768 /* CtrlCmd */ | 16384 /* Shift */ | 41 /* KEY_K */
            }
        }) || this;
    }
    DeleteLinesAction.prototype.run = function (accessor, editor) {
        var ops = this._getLinesToRemove(editor);
        // Finally, construct the delete lines commands
        var commands = ops.map(function (op) {
            return new deleteLinesCommand_1.DeleteLinesCommand(op.startLineNumber, op.endLineNumber, op.positionColumn);
        });
        editor.executeCommands(this.id, commands);
    };
    return DeleteLinesAction;
}(AbstractRemoveLinesAction));
DeleteLinesAction = __decorate([
    editorCommonExtensions_1.editorAction
], DeleteLinesAction);
var IndentLinesAction = (function (_super) {
    __extends(IndentLinesAction, _super);
    function IndentLinesAction() {
        return _super.call(this, {
            id: 'editor.action.indentLines',
            label: nls.localize('lines.indent', "Indent Line"),
            alias: 'Indent Line',
            precondition: editorCommon_1.EditorContextKeys.Writable,
            handlerId: editorCommon_1.Handler.Indent,
            kbOpts: {
                kbExpr: editorCommon_1.EditorContextKeys.TextFocus,
                primary: 32768 /* CtrlCmd */ | 89 /* US_CLOSE_SQUARE_BRACKET */
            }
        }) || this;
    }
    return IndentLinesAction;
}(editorCommonExtensions_1.HandlerEditorAction));
IndentLinesAction = __decorate([
    editorCommonExtensions_1.editorAction
], IndentLinesAction);
var OutdentLinesAction = (function (_super) {
    __extends(OutdentLinesAction, _super);
    function OutdentLinesAction() {
        return _super.call(this, {
            id: 'editor.action.outdentLines',
            label: nls.localize('lines.outdent', "Outdent Line"),
            alias: 'Outdent Line',
            precondition: editorCommon_1.EditorContextKeys.Writable,
            handlerId: editorCommon_1.Handler.Outdent,
            kbOpts: {
                kbExpr: editorCommon_1.EditorContextKeys.TextFocus,
                primary: 32768 /* CtrlCmd */ | 87 /* US_OPEN_SQUARE_BRACKET */
            }
        }) || this;
    }
    return OutdentLinesAction;
}(editorCommonExtensions_1.HandlerEditorAction));
OutdentLinesAction = __decorate([
    editorCommonExtensions_1.editorAction
], OutdentLinesAction);
var InsertLineBeforeAction = (function (_super) {
    __extends(InsertLineBeforeAction, _super);
    function InsertLineBeforeAction() {
        return _super.call(this, {
            id: 'editor.action.insertLineBefore',
            label: nls.localize('lines.insertBefore', "Insert Line Above"),
            alias: 'Insert Line Above',
            precondition: editorCommon_1.EditorContextKeys.Writable,
            handlerId: editorCommon_1.Handler.LineInsertBefore,
            kbOpts: {
                kbExpr: editorCommon_1.EditorContextKeys.TextFocus,
                primary: 32768 /* CtrlCmd */ | 16384 /* Shift */ | 3 /* Enter */
            }
        }) || this;
    }
    return InsertLineBeforeAction;
}(editorCommonExtensions_1.HandlerEditorAction));
InsertLineBeforeAction = __decorate([
    editorCommonExtensions_1.editorAction
], InsertLineBeforeAction);
var InsertLineAfterAction = (function (_super) {
    __extends(InsertLineAfterAction, _super);
    function InsertLineAfterAction() {
        return _super.call(this, {
            id: 'editor.action.insertLineAfter',
            label: nls.localize('lines.insertAfter', "Insert Line Below"),
            alias: 'Insert Line Below',
            precondition: editorCommon_1.EditorContextKeys.Writable,
            handlerId: editorCommon_1.Handler.LineInsertAfter,
            kbOpts: {
                kbExpr: editorCommon_1.EditorContextKeys.TextFocus,
                primary: 32768 /* CtrlCmd */ | 3 /* Enter */
            }
        }) || this;
    }
    return InsertLineAfterAction;
}(editorCommonExtensions_1.HandlerEditorAction));
InsertLineAfterAction = __decorate([
    editorCommonExtensions_1.editorAction
], InsertLineAfterAction);
var DeleteAllLeftAction = (function (_super) {
    __extends(DeleteAllLeftAction, _super);
    function DeleteAllLeftAction() {
        return _super.call(this, {
            id: 'deleteAllLeft',
            label: nls.localize('lines.deleteAllLeft', "Delete All Left"),
            alias: 'Delete All Left',
            precondition: editorCommon_1.EditorContextKeys.Writable,
            kbOpts: {
                kbExpr: editorCommon_1.EditorContextKeys.TextFocus,
                primary: null,
                mac: { primary: 32768 /* CtrlCmd */ | 1 /* Backspace */ }
            }
        }) || this;
    }
    DeleteAllLeftAction.prototype.run = function (accessor, editor) {
        var selections = editor.getSelections();
        selections.sort(range_1.Range.compareRangesUsingStarts);
        selections = selections.map(function (selection) {
            if (selection.isEmpty()) {
                return new selection_1.Selection(selection.startLineNumber, 1, selection.startLineNumber, selection.startColumn);
            }
            else {
                return selection;
            }
        });
        // merge overlapping selections
        var effectiveRanges = [];
        for (var i = 0, count = selections.length - 1; i < count; i++) {
            var range = selections[i];
            var nextRange = selections[i + 1];
            if (range_1.Range.intersectRanges(range, nextRange) === null) {
                effectiveRanges.push(range);
            }
            else {
                selections[i + 1] = range_1.Range.plusRange(range, nextRange);
            }
        }
        effectiveRanges.push(selections[selections.length - 1]);
        var edits = effectiveRanges.map(function (range) {
            return editOperation_1.EditOperation.replace(range, '');
        });
        editor.executeEdits(this.id, edits);
    };
    return DeleteAllLeftAction;
}(editorCommonExtensions_1.EditorAction));
DeleteAllLeftAction = __decorate([
    editorCommonExtensions_1.editorAction
], DeleteAllLeftAction);
exports.DeleteAllLeftAction = DeleteAllLeftAction;
var JoinLinesAction = (function (_super) {
    __extends(JoinLinesAction, _super);
    function JoinLinesAction() {
        return _super.call(this, {
            id: 'editor.action.joinLines',
            label: nls.localize('lines.joinLines', "Join Lines"),
            alias: 'Join Lines',
            precondition: editorCommon_1.EditorContextKeys.Writable,
            kbOpts: {
                kbExpr: editorCommon_1.EditorContextKeys.TextFocus,
                primary: 0,
                mac: { primary: 4096 /* WinCtrl */ | 40 /* KEY_J */ }
            }
        }) || this;
    }
    JoinLinesAction.prototype.run = function (accessor, editor) {
        var selections = editor.getSelections();
        var primarySelection = editor.getSelection();
        selections.sort(range_1.Range.compareRangesUsingStarts);
        var reducedSelections = [];
        var lastSelection = selections.reduce(function (previousValue, currentValue) {
            if (previousValue.isEmpty()) {
                if (currentValue.startLineNumber > previousValue.endLineNumber + 1) {
                    reducedSelections.push(previousValue);
                    return currentValue;
                }
                else {
                    return new selection_1.Selection(previousValue.startLineNumber, previousValue.startColumn, currentValue.endLineNumber, currentValue.endColumn);
                }
            }
            else {
                if (currentValue.startLineNumber > previousValue.endLineNumber) {
                    reducedSelections.push(previousValue);
                    return currentValue;
                }
                else {
                    return new selection_1.Selection(previousValue.startLineNumber, previousValue.startColumn, currentValue.endLineNumber, currentValue.endColumn);
                }
            }
        });
        reducedSelections.push(lastSelection);
        var model = editor.getModel();
        var edits = [];
        var resultSelections = [];
        var resultPrimarySelection = primarySelection;
        var lineOffset = 0;
        for (var i = 0, len = reducedSelections.length; i < len; i++) {
            var selection = reducedSelections[i];
            var startLineNumber = selection.startLineNumber;
            var startColumn = 1;
            var endLineNumber = void 0, endColumn = void 0, columnDeltaOffset = void 0;
            var selectionEndPositionOffset = model.getLineContent(selection.endLineNumber).length - selection.endColumn;
            if (selection.isEmpty() || selection.startLineNumber === selection.endLineNumber) {
                var position = selection.getStartPosition();
                if (position.lineNumber < model.getLineCount()) {
                    endLineNumber = startLineNumber + 1;
                    endColumn = model.getLineMaxColumn(endLineNumber);
                }
                else {
                    endLineNumber = position.lineNumber;
                    endColumn = model.getLineMaxColumn(position.lineNumber);
                }
            }
            else {
                endLineNumber = selection.endLineNumber;
                endColumn = model.getLineMaxColumn(endLineNumber);
            }
            var trimmedLinesContent = model.getLineContent(startLineNumber);
            for (var i_1 = startLineNumber + 1; i_1 <= endLineNumber; i_1++) {
                var lineText = model.getLineContent(i_1);
                var firstNonWhitespaceIdx = model.getLineFirstNonWhitespaceColumn(i_1);
                if (firstNonWhitespaceIdx >= 1) {
                    var insertSpace = true;
                    if (trimmedLinesContent === '') {
                        insertSpace = false;
                    }
                    if (insertSpace && (trimmedLinesContent.charAt(trimmedLinesContent.length - 1) === ' ' ||
                        trimmedLinesContent.charAt(trimmedLinesContent.length - 1) === '\t')) {
                        insertSpace = false;
                        trimmedLinesContent = trimmedLinesContent.replace(/[\s\uFEFF\xA0]+$/g, ' ');
                    }
                    var lineTextWithoutIndent = lineText.substr(firstNonWhitespaceIdx - 1);
                    trimmedLinesContent += (insertSpace ? ' ' : '') + lineTextWithoutIndent;
                    if (insertSpace) {
                        columnDeltaOffset = lineTextWithoutIndent.length + 1;
                    }
                    else {
                        columnDeltaOffset = lineTextWithoutIndent.length;
                    }
                }
                else {
                    columnDeltaOffset = 0;
                }
            }
            var deleteSelection = new range_1.Range(startLineNumber, startColumn, endLineNumber, endColumn);
            if (!deleteSelection.isEmpty()) {
                var resultSelection = void 0;
                if (selection.isEmpty()) {
                    edits.push(editOperation_1.EditOperation.replace(deleteSelection, trimmedLinesContent));
                    resultSelection = new selection_1.Selection(deleteSelection.startLineNumber - lineOffset, trimmedLinesContent.length - columnDeltaOffset + 1, startLineNumber - lineOffset, trimmedLinesContent.length - columnDeltaOffset + 1);
                }
                else {
                    if (selection.startLineNumber === selection.endLineNumber) {
                        edits.push(editOperation_1.EditOperation.replace(deleteSelection, trimmedLinesContent));
                        resultSelection = new selection_1.Selection(selection.startLineNumber - lineOffset, selection.startColumn, selection.endLineNumber - lineOffset, selection.endColumn);
                    }
                    else {
                        edits.push(editOperation_1.EditOperation.replace(deleteSelection, trimmedLinesContent));
                        resultSelection = new selection_1.Selection(selection.startLineNumber - lineOffset, selection.startColumn, selection.startLineNumber - lineOffset, trimmedLinesContent.length - selectionEndPositionOffset);
                    }
                }
                if (range_1.Range.intersectRanges(deleteSelection, primarySelection) !== null) {
                    resultPrimarySelection = resultSelection;
                }
                else {
                    resultSelections.push(resultSelection);
                }
            }
            lineOffset += deleteSelection.endLineNumber - deleteSelection.startLineNumber;
        }
        editor.executeEdits(this.id, edits);
        resultSelections.unshift(resultPrimarySelection);
        editor.setSelections(resultSelections);
    };
    return JoinLinesAction;
}(editorCommonExtensions_1.EditorAction));
JoinLinesAction = __decorate([
    editorCommonExtensions_1.editorAction
], JoinLinesAction);
exports.JoinLinesAction = JoinLinesAction;
var TransposeAction = (function (_super) {
    __extends(TransposeAction, _super);
    function TransposeAction() {
        return _super.call(this, {
            id: 'editor.action.transpose',
            label: nls.localize('editor.transpose', "Transpose characters around the cursor"),
            alias: 'Transpose characters around the cursor',
            precondition: editorCommon_1.EditorContextKeys.Writable
        }) || this;
    }
    TransposeAction.prototype.run = function (accessor, editor) {
        var selections = editor.getSelections();
        var model = editor.getModel();
        var commands = [];
        for (var i = 0, len = selections.length; i < len; i++) {
            var selection = selections[i];
            if (!selection.isEmpty()) {
                continue;
            }
            var cursor = selection.getStartPosition();
            var maxColumn = model.getLineMaxColumn(cursor.lineNumber);
            if (cursor.column >= maxColumn) {
                if (cursor.lineNumber === model.getLineCount()) {
                    continue;
                }
                // The cursor is at the end of current line and current line is not empty
                // then we transpose the character before the cursor and the line break if there is any following line.
                var deleteSelection = new range_1.Range(cursor.lineNumber, Math.max(1, cursor.column - 1), cursor.lineNumber + 1, 1);
                var chars = model.getValueInRange(deleteSelection).split('').reverse().join('');
                commands.push(new replaceCommand_1.ReplaceCommand(new selection_1.Selection(cursor.lineNumber, Math.max(1, cursor.column - 1), cursor.lineNumber + 1, 1), chars));
            }
            else {
                var deleteSelection = new range_1.Range(cursor.lineNumber, Math.max(1, cursor.column - 1), cursor.lineNumber, cursor.column + 1);
                var chars = model.getValueInRange(deleteSelection).split('').reverse().join('');
                commands.push(new replaceCommand_1.ReplaceCommandThatPreservesSelection(deleteSelection, chars, new selection_1.Selection(cursor.lineNumber, cursor.column + 1, cursor.lineNumber, cursor.column + 1)));
            }
        }
        editor.executeCommands(this.id, commands);
    };
    return TransposeAction;
}(editorCommonExtensions_1.EditorAction));
TransposeAction = __decorate([
    editorCommonExtensions_1.editorAction
], TransposeAction);
exports.TransposeAction = TransposeAction;
var AbstractCaseAction = (function (_super) {
    __extends(AbstractCaseAction, _super);
    function AbstractCaseAction() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AbstractCaseAction.prototype.run = function (accessor, editor) {
        var selections = editor.getSelections();
        var model = editor.getModel();
        var commands = [];
        for (var i = 0, len = selections.length; i < len; i++) {
            var selection = selections[i];
            if (selection.isEmpty()) {
                var cursor = selection.getStartPosition();
                var word = model.getWordAtPosition(cursor);
                if (!word) {
                    continue;
                }
                var wordRange = new range_1.Range(cursor.lineNumber, word.startColumn, cursor.lineNumber, word.endColumn);
                var text = model.getValueInRange(wordRange);
                commands.push(new replaceCommand_1.ReplaceCommandThatPreservesSelection(wordRange, this._modifyText(text), new selection_1.Selection(cursor.lineNumber, cursor.column, cursor.lineNumber, cursor.column)));
            }
            else {
                var text = model.getValueInRange(selection);
                commands.push(new replaceCommand_1.ReplaceCommandThatPreservesSelection(selection, this._modifyText(text), selection));
            }
        }
        editor.executeCommands(this.id, commands);
    };
    return AbstractCaseAction;
}(editorCommonExtensions_1.EditorAction));
exports.AbstractCaseAction = AbstractCaseAction;
var UpperCaseAction = (function (_super) {
    __extends(UpperCaseAction, _super);
    function UpperCaseAction() {
        return _super.call(this, {
            id: 'editor.action.transformToUppercase',
            label: nls.localize('editor.transformToUppercase', "Transform to Uppercase"),
            alias: 'Transform to Uppercase',
            precondition: editorCommon_1.EditorContextKeys.Writable
        }) || this;
    }
    UpperCaseAction.prototype._modifyText = function (text) {
        return text.toLocaleUpperCase();
    };
    return UpperCaseAction;
}(AbstractCaseAction));
UpperCaseAction = __decorate([
    editorCommonExtensions_1.editorAction
], UpperCaseAction);
exports.UpperCaseAction = UpperCaseAction;
var LowerCaseAction = (function (_super) {
    __extends(LowerCaseAction, _super);
    function LowerCaseAction() {
        return _super.call(this, {
            id: 'editor.action.transformToLowercase',
            label: nls.localize('editor.transformToLowercase', "Transform to Lowercase"),
            alias: 'Transform to Lowercase',
            precondition: editorCommon_1.EditorContextKeys.Writable
        }) || this;
    }
    LowerCaseAction.prototype._modifyText = function (text) {
        return text.toLocaleLowerCase();
    };
    return LowerCaseAction;
}(AbstractCaseAction));
LowerCaseAction = __decorate([
    editorCommonExtensions_1.editorAction
], LowerCaseAction);
exports.LowerCaseAction = LowerCaseAction;
var TrimTrailingWhitespaceAction_1;
