/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var nls = require("vs/nls");
var arrays_1 = require("vs/base/common/arrays");
var keyCodes_1 = require("vs/base/common/keyCodes");
var lifecycle_1 = require("vs/base/common/lifecycle");
var winjs_base_1 = require("vs/base/common/winjs.base");
var editorCommon = require("vs/editor/common/editorCommon");
var contextkey_1 = require("vs/platform/contextkey/common/contextkey");
var editorCommonExtensions_1 = require("vs/editor/common/editorCommonExtensions");
var modes_1 = require("vs/editor/common/modes");
var format_1 = require("../common/format");
var formatCommand_1 = require("./formatCommand");
var commands_1 = require("vs/platform/commands/common/commands");
var codeEditorService_1 = require("vs/editor/common/services/codeEditorService");
var editorWorkerService_1 = require("vs/editor/common/services/editorWorkerService");
var ModeContextKeys = editorCommon.ModeContextKeys;
var EditorContextKeys = editorCommon.EditorContextKeys;
var FormatOnType = FormatOnType_1 = (function () {
    function FormatOnType(editor, workerService) {
        var _this = this;
        this.editor = editor;
        this.workerService = workerService;
        this.callOnDispose = [];
        this.callOnModel = [];
        this.callOnDispose.push(editor.onDidChangeConfiguration(function () { return _this.update(); }));
        this.callOnDispose.push(editor.onDidChangeModel(function () { return _this.update(); }));
        this.callOnDispose.push(editor.onDidChangeModelMode(function () { return _this.update(); }));
        this.callOnDispose.push(modes_1.OnTypeFormattingEditProviderRegistry.onDidChange(this.update, this));
    }
    FormatOnType.prototype.update = function () {
        var _this = this;
        // clean up
        this.callOnModel = lifecycle_1.dispose(this.callOnModel);
        // we are disabled
        if (!this.editor.getConfiguration().contribInfo.formatOnType) {
            return;
        }
        // no model
        if (!this.editor.getModel()) {
            return;
        }
        var model = this.editor.getModel();
        // no support
        var support = modes_1.OnTypeFormattingEditProviderRegistry.ordered(model)[0];
        if (!support || !support.autoFormatTriggerCharacters) {
            return;
        }
        // register typing listeners that will trigger the format
        support.autoFormatTriggerCharacters.forEach(function (ch) {
            _this.callOnModel.push(_this.editor.addTypingListener(ch, _this.trigger.bind(_this, ch)));
        });
    };
    FormatOnType.prototype.trigger = function (ch) {
        var _this = this;
        if (this.editor.getSelections().length > 1) {
            return;
        }
        var model = this.editor.getModel(), position = this.editor.getPosition(), canceled = false;
        // install a listener that checks if edits happens before the
        // position on which we format right now. If so, we won't
        // apply the format edits
        var unbind = this.editor.onDidChangeModelRawContent(function (e) {
            if (e.changeType === editorCommon.EventType.ModelRawContentChangedFlush) {
                // a model.setValue() was called
                canceled = true;
            }
            else if (e.changeType === editorCommon.EventType.ModelRawContentChangedLineChanged) {
                var changedLine = e.lineNumber;
                canceled = changedLine <= position.lineNumber;
            }
            else if (e.changeType === editorCommon.EventType.ModelRawContentChangedLinesInserted) {
                var insertLine = e.fromLineNumber;
                canceled = insertLine <= position.lineNumber;
            }
            else if (e.changeType === editorCommon.EventType.ModelRawContentChangedLinesDeleted) {
                var deleteLine2 = e.toLineNumber;
                canceled = deleteLine2 <= position.lineNumber;
            }
            if (canceled) {
                // cancel only once
                unbind.dispose();
            }
        });
        var modelOpts = model.getOptions();
        format_1.getOnTypeFormattingEdits(model, position, ch, {
            tabSize: modelOpts.tabSize,
            insertSpaces: modelOpts.insertSpaces
        }).then(function (edits) {
            return _this.workerService.computeMoreMinimalEdits(model.uri, edits, []);
        }).then(function (edits) {
            unbind.dispose();
            if (canceled || arrays_1.isFalsyOrEmpty(edits)) {
                return;
            }
            _this.editor.executeCommand(_this.getId(), new formatCommand_1.EditOperationsCommand(edits, _this.editor.getSelection()));
        }, function (err) {
            unbind.dispose();
            throw err;
        });
    };
    FormatOnType.prototype.getId = function () {
        return FormatOnType_1.ID;
    };
    FormatOnType.prototype.dispose = function () {
        this.callOnDispose = lifecycle_1.dispose(this.callOnDispose);
        this.callOnModel = lifecycle_1.dispose(this.callOnModel);
    };
    return FormatOnType;
}());
FormatOnType.ID = 'editor.contrib.autoFormat';
FormatOnType = FormatOnType_1 = __decorate([
    editorCommonExtensions_1.commonEditorContribution,
    __param(1, editorWorkerService_1.IEditorWorkerService)
], FormatOnType);
var AbstractFormatAction = (function (_super) {
    __extends(AbstractFormatAction, _super);
    function AbstractFormatAction() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AbstractFormatAction.prototype.run = function (accessor, editor) {
        var _this = this;
        var workerService = accessor.get(editorWorkerService_1.IEditorWorkerService);
        var formattingPromise = this._getFormattingEdits(editor);
        if (!formattingPromise) {
            return winjs_base_1.TPromise.as(void 0);
        }
        // Capture the state of the editor
        var state = editor.captureState(editorCommon.CodeEditorStateFlag.Value, editorCommon.CodeEditorStateFlag.Position);
        // Receive formatted value from worker
        return formattingPromise.then(function (edits) { return workerService.computeMoreMinimalEdits(editor.getModel().uri, edits, editor.getSelections()); }).then(function (edits) {
            if (!state.validate(editor) || arrays_1.isFalsyOrEmpty(edits)) {
                return;
            }
            var command = new formatCommand_1.EditOperationsCommand(edits, editor.getSelection());
            editor.executeCommand(_this.id, command);
            editor.focus();
        });
    };
    return AbstractFormatAction;
}(editorCommonExtensions_1.EditorAction));
exports.AbstractFormatAction = AbstractFormatAction;
var FormatDocumentAction = (function (_super) {
    __extends(FormatDocumentAction, _super);
    function FormatDocumentAction() {
        return _super.call(this, {
            id: 'editor.action.formatDocument',
            label: nls.localize('formatDocument.label', "Format Document"),
            alias: 'Format Document',
            precondition: contextkey_1.ContextKeyExpr.and(EditorContextKeys.Writable, ModeContextKeys.hasDocumentFormattingProvider),
            kbOpts: {
                kbExpr: EditorContextKeys.TextFocus,
                primary: 16384 /* Shift */ | 8192 /* Alt */ | 36 /* KEY_F */,
                // secondary: [KeyChord(KeyMod.CtrlCmd | KeyCode.KEY_K, KeyMod.CtrlCmd | KeyCode.KEY_D)],
                linux: { primary: 32768 /* CtrlCmd */ | 16384 /* Shift */ | 39 /* KEY_I */ }
            },
            menuOpts: {
                group: '1_modification',
                order: 1.3
            }
        }) || this;
    }
    FormatDocumentAction.prototype._getFormattingEdits = function (editor) {
        var model = editor.getModel();
        var _a = model.getOptions(), tabSize = _a.tabSize, insertSpaces = _a.insertSpaces;
        return format_1.getDocumentFormattingEdits(model, { tabSize: tabSize, insertSpaces: insertSpaces });
    };
    return FormatDocumentAction;
}(AbstractFormatAction));
FormatDocumentAction = __decorate([
    editorCommonExtensions_1.editorAction
], FormatDocumentAction);
exports.FormatDocumentAction = FormatDocumentAction;
var FormatSelectionAction = (function (_super) {
    __extends(FormatSelectionAction, _super);
    function FormatSelectionAction() {
        return _super.call(this, {
            id: 'editor.action.formatSelection',
            label: nls.localize('formatSelection.label', "Format Selection"),
            alias: 'Format Code',
            precondition: contextkey_1.ContextKeyExpr.and(EditorContextKeys.Writable, ModeContextKeys.hasDocumentFormattingProvider, EditorContextKeys.HasNonEmptySelection),
            kbOpts: {
                kbExpr: EditorContextKeys.TextFocus,
                primary: keyCodes_1.KeyChord(32768 /* CtrlCmd */ | 41 /* KEY_K */, 32768 /* CtrlCmd */ | 36 /* KEY_F */)
            },
            menuOpts: {
                group: '1_modification',
                order: 1.31
            }
        }) || this;
    }
    FormatSelectionAction.prototype._getFormattingEdits = function (editor) {
        var model = editor.getModel();
        var _a = model.getOptions(), tabSize = _a.tabSize, insertSpaces = _a.insertSpaces;
        return format_1.getDocumentRangeFormattingEdits(model, editor.getSelection(), { tabSize: tabSize, insertSpaces: insertSpaces });
    };
    return FormatSelectionAction;
}(AbstractFormatAction));
FormatSelectionAction = __decorate([
    editorCommonExtensions_1.editorAction
], FormatSelectionAction);
exports.FormatSelectionAction = FormatSelectionAction;
// this is the old format action that does both (format document OR format selection)
// and we keep it here such that existing keybinding configurations etc will still work
commands_1.CommandsRegistry.registerCommand('editor.action.format', function (accessor) {
    var editor = accessor.get(codeEditorService_1.ICodeEditorService).getFocusedCodeEditor();
    if (editor) {
        return new (function (_super) {
            __extends(class_1, _super);
            function class_1() {
                return _super.call(this, {}) || this;
            }
            class_1.prototype._getFormattingEdits = function (editor) {
                var model = editor.getModel();
                var editorSelection = editor.getSelection();
                var _a = model.getOptions(), tabSize = _a.tabSize, insertSpaces = _a.insertSpaces;
                return editorSelection.isEmpty()
                    ? format_1.getDocumentFormattingEdits(model, { tabSize: tabSize, insertSpaces: insertSpaces })
                    : format_1.getDocumentRangeFormattingEdits(model, editorSelection, { tabSize: tabSize, insertSpaces: insertSpaces });
            };
            return class_1;
        }(AbstractFormatAction))().run(accessor, editor);
    }
});
var FormatOnType_1;
