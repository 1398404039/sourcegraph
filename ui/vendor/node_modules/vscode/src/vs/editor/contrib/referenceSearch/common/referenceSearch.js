/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var errors_1 = require("vs/base/common/errors");
var winjs_base_1 = require("vs/base/common/winjs.base");
var editorCommonExtensions_1 = require("vs/editor/common/editorCommonExtensions");
var modes_1 = require("vs/editor/common/modes");
var async_1 = require("vs/base/common/async");
function provideReferences(model, position, progress, context) {
    // collect references from all providers
    var promises = modes_1.ReferenceProviderRegistry.ordered(model).map(function (provider) {
        return async_1.asWinJsPromise(function (token) {
            var ctx = context || { includeDeclaration: true };
            return provider.provideReferences(model, position, ctx, token, progress);
        }).then(function (result) {
            if (Array.isArray(result)) {
                return result;
            }
        }, function (err) {
            errors_1.onUnexpectedExternalError(err);
        });
    });
    return winjs_base_1.TPromise.join(promises).then(function (references) {
        var result = [];
        for (var _i = 0, references_1 = references; _i < references_1.length; _i++) {
            var refs = references_1[_i];
            for (var _a = 0, refs_1 = refs; _a < refs_1.length; _a++) {
                var ref = refs_1[_a];
                result.push(ref);
            }
        }
        return result;
    });
}
exports.provideReferences = provideReferences;
function provideWorkspaceReferences(modeId, workspace, query, hints, progress) {
    var model = {
        isTooLargeForHavingARichMode: function () {
            return false;
        },
        getModeId: function () {
            return modeId;
        },
        uri: workspace
    };
    // collect references from all providers
    var promises = modes_1.WorkspaceReferenceProviderRegistry.ordered(model).map(function (provider) {
        return async_1.asWinJsPromise(function (token) {
            return provider.provideWorkspaceReferences(workspace, query, hints, token, progress);
        }).then(function (result) {
            if (Array.isArray(result)) {
                return result;
            }
        }, function (err) {
            errors_1.onUnexpectedExternalError(err);
        });
    });
    return winjs_base_1.TPromise.join(promises).then(function (references) {
        var result = [];
        for (var _i = 0, references_2 = references; _i < references_2.length; _i++) {
            var refs = references_2[_i];
            for (var _a = 0, refs_2 = refs; _a < refs_2.length; _a++) {
                var ref = refs_2[_a];
                result.push(ref);
            }
        }
        return result;
    });
}
exports.provideWorkspaceReferences = provideWorkspaceReferences;
editorCommonExtensions_1.CommonEditorRegistry.registerDefaultLanguageCommand('_executeReferenceProvider', provideReferences);
