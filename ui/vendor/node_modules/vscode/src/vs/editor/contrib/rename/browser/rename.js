/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var nls = require("vs/nls");
var errors_1 = require("vs/base/common/errors");
var severity_1 = require("vs/base/common/severity");
var winjs_base_1 = require("vs/base/common/winjs.base");
var files_1 = require("vs/platform/files/common/files");
var contextkey_1 = require("vs/platform/contextkey/common/contextkey");
var message_1 = require("vs/platform/message/common/message");
var progress_1 = require("vs/platform/progress/common/progress");
var editorCommonExtensions_1 = require("vs/editor/common/editorCommonExtensions");
var editorBrowserExtensions_1 = require("vs/editor/browser/editorBrowserExtensions");
var editorCommon_1 = require("vs/editor/common/editorCommon");
var bulkEdit_1 = require("vs/editor/common/services/bulkEdit");
var rename_1 = require("../common/rename");
var renameInputField_1 = require("./renameInputField");
var resolverService_1 = require("vs/editor/common/services/resolverService");
var instantiation_1 = require("vs/platform/instantiation/common/instantiation");
// ---  register actions and commands
var CONTEXT_RENAME_INPUT_VISIBLE = new contextkey_1.RawContextKey('renameInputVisible', false);
var RenameController = RenameController_1 = (function () {
    function RenameController(editor, _messageService, _textModelResolverService, _progressService, contextKeyService, _fileService) {
        this.editor = editor;
        this._messageService = _messageService;
        this._textModelResolverService = _textModelResolverService;
        this._progressService = _progressService;
        this._fileService = _fileService;
        this._renameInputField = new renameInputField_1.default(editor);
        this._renameInputVisible = CONTEXT_RENAME_INPUT_VISIBLE.bindTo(contextKeyService);
    }
    RenameController.get = function (editor) {
        return editor.getContribution(RenameController_1.ID);
    };
    RenameController.prototype.dispose = function () {
        this._renameInputField.dispose();
    };
    RenameController.prototype.getId = function () {
        return RenameController_1.ID;
    };
    RenameController.prototype.run = function () {
        var _this = this;
        var selection = this.editor.getSelection(), word = this.editor.getModel().getWordAtPosition(selection.getStartPosition());
        if (!word) {
            return undefined;
        }
        var lineNumber = selection.startLineNumber, selectionStart = 0, selectionEnd = word.word.length, wordRange;
        wordRange = {
            startLineNumber: lineNumber,
            startColumn: word.startColumn,
            endLineNumber: lineNumber,
            endColumn: word.endColumn
        };
        if (!selection.isEmpty() && selection.startLineNumber === selection.endLineNumber) {
            selectionStart = Math.max(0, selection.startColumn - word.startColumn);
            selectionEnd = Math.min(word.endColumn, selection.endColumn) - word.startColumn;
        }
        this._renameInputVisible.set(true);
        return this._renameInputField.getInput(wordRange, word.word, selectionStart, selectionEnd).then(function (newName) {
            _this._renameInputVisible.reset();
            _this.editor.focus();
            var renameOperation = _this._prepareRename(newName).then(function (edit) {
                return edit.finish().then(function (selection) {
                    if (selection) {
                        _this.editor.setSelection(selection);
                    }
                });
            }, function (err) {
                if (typeof err === 'string') {
                    _this._messageService.show(severity_1.default.Info, err);
                    return undefined;
                }
                else {
                    _this._messageService.show(severity_1.default.Error, nls.localize('rename.failed', "Sorry, rename failed to execute."));
                    return winjs_base_1.TPromise.wrapError(err);
                }
            });
            _this._progressService.showWhile(renameOperation, 250);
            return renameOperation;
        }, function (err) {
            _this._renameInputVisible.reset();
            _this.editor.focus();
            if (!errors_1.isPromiseCanceledError(err)) {
                return winjs_base_1.TPromise.wrapError(err);
            }
            return undefined;
        });
    };
    RenameController.prototype.acceptRenameInput = function () {
        this._renameInputField.acceptInput();
    };
    RenameController.prototype.cancelRenameInput = function () {
        this._renameInputField.cancelInput();
    };
    RenameController.prototype._prepareRename = function (newName) {
        // start recording of file changes so that we can figure out if a file that
        // is to be renamed conflicts with another (concurrent) modification
        var edit = bulkEdit_1.createBulkEdit(this._textModelResolverService, this.editor, this._fileService);
        return rename_1.rename(this.editor.getModel(), this.editor.getPosition(), newName).then(function (result) {
            if (result.rejectReason) {
                return winjs_base_1.TPromise.wrapError(result.rejectReason);
            }
            edit.add(result.edits);
            return edit;
        });
    };
    return RenameController;
}());
RenameController.ID = 'editor.contrib.renameController';
RenameController = RenameController_1 = __decorate([
    editorBrowserExtensions_1.editorContribution,
    __param(1, message_1.IMessageService),
    __param(2, resolverService_1.ITextModelResolverService),
    __param(3, progress_1.IProgressService),
    __param(4, contextkey_1.IContextKeyService),
    __param(5, instantiation_1.optional(files_1.IFileService))
], RenameController);
// ---- action implementation
var RenameAction = (function (_super) {
    __extends(RenameAction, _super);
    function RenameAction() {
        return _super.call(this, {
            id: 'editor.action.rename',
            label: nls.localize('rename.label', "Rename Symbol"),
            alias: 'Rename Symbol',
            precondition: contextkey_1.ContextKeyExpr.and(editorCommon_1.EditorContextKeys.Writable, editorCommon_1.ModeContextKeys.hasRenameProvider),
            kbOpts: {
                kbExpr: editorCommon_1.EditorContextKeys.TextFocus,
                primary: 60 /* F2 */
            },
            menuOpts: {
                group: '1_modification',
                order: 1.1
            }
        }) || this;
    }
    RenameAction.prototype.run = function (accessor, editor) {
        var controller = RenameController.get(editor);
        if (controller) {
            return controller.run();
        }
        return undefined;
    };
    return RenameAction;
}(editorCommonExtensions_1.EditorAction));
RenameAction = __decorate([
    editorCommonExtensions_1.editorAction
], RenameAction);
exports.RenameAction = RenameAction;
var RenameCommand = editorCommonExtensions_1.EditorCommand.bindToContribution(RenameController.get);
editorCommonExtensions_1.CommonEditorRegistry.registerEditorCommand(new RenameCommand({
    id: 'acceptRenameInput',
    precondition: CONTEXT_RENAME_INPUT_VISIBLE,
    handler: function (x) { return x.acceptRenameInput(); },
    kbOpts: {
        weight: editorCommonExtensions_1.CommonEditorRegistry.commandWeight(99),
        kbExpr: editorCommon_1.EditorContextKeys.Focus,
        primary: 3 /* Enter */
    }
}));
editorCommonExtensions_1.CommonEditorRegistry.registerEditorCommand(new RenameCommand({
    id: 'cancelRenameInput',
    precondition: CONTEXT_RENAME_INPUT_VISIBLE,
    handler: function (x) { return x.cancelRenameInput(); },
    kbOpts: {
        weight: editorCommonExtensions_1.CommonEditorRegistry.commandWeight(99),
        kbExpr: editorCommon_1.EditorContextKeys.Focus,
        primary: 9 /* Escape */,
        secondary: [1024 /* Shift */ | 9 /* Escape */]
    }
}));
var RenameController_1;
