/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
require("./peekViewWidget.css");
var nls = require("vs/nls");
var actions_1 = require("vs/base/common/actions");
var strings = require("vs/base/common/strings");
var builder_1 = require("vs/base/browser/builder");
var event_1 = require("vs/base/common/event");
var dom = require("vs/base/browser/dom");
var actionbar_1 = require("vs/base/browser/ui/actionbar/actionbar");
var instantiation_1 = require("vs/platform/instantiation/common/instantiation");
var codeEditorService_1 = require("vs/editor/common/services/codeEditorService");
var zoneWidget_1 = require("./zoneWidget");
var embeddedCodeEditorWidget_1 = require("vs/editor/browser/widget/embeddedCodeEditorWidget");
var contextkey_1 = require("vs/platform/contextkey/common/contextkey");
exports.IPeekViewService = instantiation_1.createDecorator('peekViewService');
var PeekContext;
(function (PeekContext) {
    PeekContext.inPeekEditor = new contextkey_1.RawContextKey('inReferenceSearchEditor', true);
    PeekContext.notInPeekEditor = PeekContext.inPeekEditor.toNegated();
})(PeekContext = exports.PeekContext || (exports.PeekContext = {}));
exports.NOT_INNER_EDITOR_CONTEXT_KEY = new contextkey_1.RawContextKey('inReferenceSearchEditor', true);
function getOuterEditor(accessor, args) {
    var editor = accessor.get(codeEditorService_1.ICodeEditorService).getFocusedCodeEditor();
    if (editor instanceof embeddedCodeEditorWidget_1.EmbeddedCodeEditorWidget) {
        return editor.getParentEditor();
    }
    return editor;
}
exports.getOuterEditor = getOuterEditor;
var PeekViewWidget = (function (_super) {
    __extends(PeekViewWidget, _super);
    function PeekViewWidget(editor, options) {
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, editor, options) || this;
        _this._onDidClose = new event_1.Emitter();
        _this._isActive = false;
        return _this;
    }
    PeekViewWidget.prototype.dispose = function () {
        this._isActive = false;
        _super.prototype.dispose.call(this);
        this._onDidClose.fire(this);
    };
    Object.defineProperty(PeekViewWidget.prototype, "onDidClose", {
        get: function () {
            return this._onDidClose.event;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PeekViewWidget.prototype, "isActive", {
        get: function () {
            return this._isActive;
        },
        enumerable: true,
        configurable: true
    });
    PeekViewWidget.prototype.show = function (where, heightInLines) {
        this._isActive = true;
        _super.prototype.show.call(this, where, heightInLines);
    };
    PeekViewWidget.prototype._fillContainer = function (container) {
        this.setCssClass('peekview-widget');
        this._headElement = builder_1.$('.head').getHTMLElement();
        this._bodyElement = builder_1.$('.body').getHTMLElement();
        this._fillHead(this._headElement);
        this._fillBody(this._bodyElement);
        container.appendChild(this._headElement);
        container.appendChild(this._bodyElement);
    };
    PeekViewWidget.prototype._fillHead = function (container) {
        var _this = this;
        var titleElement = builder_1.$('.peekview-title').
            on(dom.EventType.CLICK, function (e) { return _this._onTitleClick(e); }).
            appendTo(this._headElement).
            getHTMLElement();
        this._primaryHeading = builder_1.$('span.filename').appendTo(titleElement).getHTMLElement();
        this._secondaryHeading = builder_1.$('span.dirname').appendTo(titleElement).getHTMLElement();
        this._metaHeading = builder_1.$('span.meta').appendTo(titleElement).getHTMLElement();
        this._actionbarWidget = new actionbar_1.ActionBar(builder_1.$('.peekview-actions').
            appendTo(this._headElement));
        this._actionbarWidget.push(new actions_1.Action('peekview.close', nls.localize('label.close', "Close"), 'close-peekview-action', true, function () {
            _this.dispose();
            return null;
        }), { label: false, icon: true });
    };
    PeekViewWidget.prototype._onTitleClick = function (event) {
        // implement me
    };
    PeekViewWidget.prototype.setTitle = function (primaryHeading, secondaryHeading) {
        builder_1.$(this._primaryHeading).safeInnerHtml(primaryHeading);
        if (secondaryHeading) {
            builder_1.$(this._secondaryHeading).safeInnerHtml(secondaryHeading);
        }
        else {
            dom.clearNode(this._secondaryHeading);
        }
    };
    PeekViewWidget.prototype.setMetaTitle = function (value) {
        if (value) {
            builder_1.$(this._metaHeading).safeInnerHtml(value);
        }
        else {
            dom.clearNode(this._metaHeading);
        }
    };
    PeekViewWidget.prototype._fillBody = function (container) {
        // implement me
    };
    PeekViewWidget.prototype._doLayout = function (heightInPixel, widthInPixel) {
        if (!this._isShowing && heightInPixel < 0) {
            // Looks like the view zone got folded away!
            this.dispose();
            this._onDidClose.fire(this);
            return;
        }
        var headHeight = Math.ceil(this.editor.getConfiguration().lineHeight * 1.2), bodyHeight = heightInPixel - (headHeight + 2 /* the border-top/bottom width*/);
        this._doLayoutHead(headHeight, widthInPixel);
        this._doLayoutBody(bodyHeight, widthInPixel);
    };
    PeekViewWidget.prototype._doLayoutHead = function (heightInPixel, widthInPixel) {
        this._headElement.style.height = strings.format('{0}px', heightInPixel);
        this._headElement.style.lineHeight = this._headElement.style.height;
    };
    PeekViewWidget.prototype._doLayoutBody = function (heightInPixel, widthInPixel) {
        this._bodyElement.style.height = strings.format('{0}px', heightInPixel);
    };
    return PeekViewWidget;
}(zoneWidget_1.ZoneWidget));
exports.PeekViewWidget = PeekViewWidget;
