/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
require("./dnd.css");
var lifecycle_1 = require("vs/base/common/lifecycle");
var platform_1 = require("vs/base/common/platform");
var editorBrowserExtensions_1 = require("vs/editor/browser/editorBrowserExtensions");
var editorCommon = require("vs/editor/common/editorCommon");
var position_1 = require("vs/editor/common/core/position");
var range_1 = require("vs/editor/common/core/range");
var selection_1 = require("vs/editor/common/core/selection");
var dragAndDropCommand_1 = require("../common/dragAndDropCommand");
var DragAndDropController = DragAndDropController_1 = (function () {
    function DragAndDropController(editor) {
        var _this = this;
        this._editor = editor;
        this._toUnhook = [];
        this._toUnhook.push(this._editor.onMouseDrag(function (e) { return _this._onEditorMouseDrag(e); }));
        this._toUnhook.push(this._editor.onMouseDrop(function (e) { return _this._onEditorMouseDrop(e); }));
        this._dndDecorationIds = [];
        this._dragSelection = null;
    }
    DragAndDropController.get = function (editor) {
        return editor.getContribution(DragAndDropController_1.ID);
    };
    DragAndDropController.prototype.isDragAndCopy = function (mouseEvent) {
        if (platform_1.isWindows && mouseEvent.ctrlKey) {
            return true;
        }
        if (!platform_1.isWindows && mouseEvent.altKey) {
            return true;
        }
        return false;
    };
    DragAndDropController.prototype._onEditorMouseDrag = function (mouseEvent) {
        var target = mouseEvent.target;
        if (this._dragSelection === null) {
            var possibleSelections = this._editor.getSelections().filter(function (selection) { return selection.containsPosition(target.position); });
            if (possibleSelections.length === 1) {
                this._dragSelection = possibleSelections[0];
            }
            else {
                return;
            }
        }
        if (this.isDragAndCopy(mouseEvent.event)) {
            this._editor.updateOptions({
                mouseStyle: 'copy'
            });
        }
        else {
            this._editor.updateOptions({
                mouseStyle: 'default'
            });
        }
        if (this._dragSelection.containsPosition(target.position)) {
            this._removeDecoration();
        }
        else {
            this.showAt(target.position);
        }
    };
    DragAndDropController.prototype._onEditorMouseDrop = function (mouseEvent) {
        if (mouseEvent.target && (this._hitContent(mouseEvent.target) || this._hitMargin(mouseEvent.target)) && mouseEvent.target.position) {
            var newCursorPosition_1 = new position_1.Position(mouseEvent.target.position.lineNumber, mouseEvent.target.position.column);
            if (this._dragSelection === null) {
                var newSelections = this._editor.getSelections().map(function (selection) {
                    if (selection.containsPosition(newCursorPosition_1)) {
                        return new selection_1.Selection(newCursorPosition_1.lineNumber, newCursorPosition_1.column, newCursorPosition_1.lineNumber, newCursorPosition_1.column);
                    }
                    else {
                        return selection;
                    }
                });
                this._editor.setSelections(newSelections);
            }
            else if (!this._dragSelection.containsPosition(newCursorPosition_1)) {
                this._editor.executeCommand(DragAndDropController_1.ID, new dragAndDropCommand_1.DragAndDropCommand(this._dragSelection, newCursorPosition_1, this.isDragAndCopy(mouseEvent.event)));
            }
        }
        this._editor.updateOptions({
            mouseStyle: 'text'
        });
        this._removeDecoration();
        this._dragSelection = null;
    };
    DragAndDropController.prototype.showAt = function (position) {
        var _this = this;
        this._editor.changeDecorations(function (changeAccessor) {
            var newDecorations = [];
            newDecorations.push({
                range: new range_1.Range(position.lineNumber, position.column, position.lineNumber, position.column),
                options: { className: 'dnd-target' }
            });
            _this._dndDecorationIds = changeAccessor.deltaDecorations(_this._dndDecorationIds, newDecorations);
        });
        this._editor.revealPosition(position);
    };
    DragAndDropController.prototype._removeDecoration = function () {
        var _this = this;
        this._editor.changeDecorations(function (changeAccessor) {
            changeAccessor.deltaDecorations(_this._dndDecorationIds, []);
        });
    };
    DragAndDropController.prototype._hitContent = function (target) {
        return target.type === editorCommon.MouseTargetType.CONTENT_TEXT ||
            target.type === editorCommon.MouseTargetType.CONTENT_EMPTY;
    };
    DragAndDropController.prototype._hitMargin = function (target) {
        return target.type === editorCommon.MouseTargetType.GUTTER_GLYPH_MARGIN ||
            target.type === editorCommon.MouseTargetType.GUTTER_LINE_NUMBERS ||
            target.type === editorCommon.MouseTargetType.GUTTER_LINE_DECORATIONS;
    };
    DragAndDropController.prototype.getId = function () {
        return DragAndDropController_1.ID;
    };
    DragAndDropController.prototype.dispose = function () {
        this._removeDecoration();
        this._toUnhook = lifecycle_1.dispose(this._toUnhook);
    };
    return DragAndDropController;
}());
DragAndDropController.ID = 'editor.contrib.dragAndDrop';
DragAndDropController = DragAndDropController_1 = __decorate([
    editorBrowserExtensions_1.editorContribution
], DragAndDropController);
exports.DragAndDropController = DragAndDropController;
var DragAndDropController_1;
