/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
require("./clipboard.css");
var nls = require("vs/nls");
var browser = require("vs/base/browser/browser");
var config_1 = require("vs/editor/common/config/config");
var editorCommon = require("vs/editor/common/editorCommon");
var editorCommonExtensions_1 = require("vs/editor/common/editorCommonExtensions");
var textAreaHandler_1 = require("vs/editor/common/controller/textAreaHandler");
var EditorContextKeys = editorCommon.EditorContextKeys;
var CLIPBOARD_CONTEXT_MENU_GROUP = '9_cutcopypaste';
function conditionalEditorAction(testCommand) {
    if (!browser.supportsExecCommand(testCommand)) {
        return function () { };
    }
    return editorCommonExtensions_1.editorAction;
}
function conditionalCopyWithSyntaxHighlighting() {
    if (browser.isEdgeOrIE || !browser.supportsExecCommand('copy')) {
        return function () { };
    }
    return editorCommonExtensions_1.editorAction;
}
var ExecCommandAction = (function (_super) {
    __extends(ExecCommandAction, _super);
    function ExecCommandAction(browserCommand, opts) {
        var _this = _super.call(this, opts) || this;
        _this.browserCommand = browserCommand;
        return _this;
    }
    ExecCommandAction.prototype.runCommand = function (accessor, args) {
        var focusedEditor = config_1.findFocusedEditor(this.id, accessor, false);
        // Only if editor text focus (i.e. not if editor has widget focus).
        if (focusedEditor && focusedEditor.isFocused()) {
            focusedEditor.trigger('keyboard', this.id, args);
            return;
        }
        document.execCommand(this.browserCommand);
    };
    ExecCommandAction.prototype.run = function (accessor, editor) {
        editor.focus();
        document.execCommand(this.browserCommand);
    };
    return ExecCommandAction;
}(editorCommonExtensions_1.EditorAction));
var ExecCommandCutAction = (function (_super) {
    __extends(ExecCommandCutAction, _super);
    function ExecCommandCutAction() {
        return _super.call(this, 'cut', {
            id: 'editor.action.clipboardCutAction',
            label: nls.localize('actions.clipboard.cutLabel', "Cut"),
            alias: 'Cut',
            precondition: EditorContextKeys.Writable,
            kbOpts: {
                kbExpr: EditorContextKeys.TextFocus,
                primary: 2048 /* CtrlCmd */ | 54 /* KEY_X */,
                win: { primary: 2048 /* CtrlCmd */ | 54 /* KEY_X */, secondary: [1024 /* Shift */ | 20 /* Delete */] }
            },
            menuOpts: {
                group: CLIPBOARD_CONTEXT_MENU_GROUP,
                order: 1
            }
        }) || this;
    }
    ExecCommandCutAction.prototype.run = function (accessor, editor) {
        var enableEmptySelectionClipboard = editor.getConfiguration().contribInfo.emptySelectionClipboard && browser.enableEmptySelectionClipboard;
        if (!enableEmptySelectionClipboard && editor.getSelection().isEmpty()) {
            return;
        }
        _super.prototype.run.call(this, accessor, editor);
    };
    return ExecCommandCutAction;
}(ExecCommandAction));
ExecCommandCutAction = __decorate([
    conditionalEditorAction('cut')
], ExecCommandCutAction);
var ExecCommandCopyAction = (function (_super) {
    __extends(ExecCommandCopyAction, _super);
    function ExecCommandCopyAction() {
        return _super.call(this, 'copy', {
            id: 'editor.action.clipboardCopyAction',
            label: nls.localize('actions.clipboard.copyLabel', "Copy"),
            alias: 'Copy',
            precondition: null,
            kbOpts: {
                kbExpr: EditorContextKeys.TextFocus,
                primary: 2048 /* CtrlCmd */ | 33 /* KEY_C */,
                win: { primary: 2048 /* CtrlCmd */ | 33 /* KEY_C */, secondary: [2048 /* CtrlCmd */ | 19 /* Insert */] }
            },
            menuOpts: {
                group: CLIPBOARD_CONTEXT_MENU_GROUP,
                order: 2
            }
        }) || this;
    }
    ExecCommandCopyAction.prototype.run = function (accessor, editor) {
        var enableEmptySelectionClipboard = editor.getConfiguration().contribInfo.emptySelectionClipboard && browser.enableEmptySelectionClipboard;
        if (!enableEmptySelectionClipboard && editor.getSelection().isEmpty()) {
            return;
        }
        _super.prototype.run.call(this, accessor, editor);
    };
    return ExecCommandCopyAction;
}(ExecCommandAction));
ExecCommandCopyAction = __decorate([
    conditionalEditorAction('copy')
], ExecCommandCopyAction);
var ExecCommandPasteAction = (function (_super) {
    __extends(ExecCommandPasteAction, _super);
    function ExecCommandPasteAction() {
        return _super.call(this, 'paste', {
            id: 'editor.action.clipboardPasteAction',
            label: nls.localize('actions.clipboard.pasteLabel', "Paste"),
            alias: 'Paste',
            precondition: EditorContextKeys.Writable,
            kbOpts: {
                kbExpr: EditorContextKeys.TextFocus,
                primary: 2048 /* CtrlCmd */ | 52 /* KEY_V */,
                win: { primary: 2048 /* CtrlCmd */ | 52 /* KEY_V */, secondary: [1024 /* Shift */ | 19 /* Insert */] }
            },
            menuOpts: {
                group: CLIPBOARD_CONTEXT_MENU_GROUP,
                order: 3
            }
        }) || this;
    }
    return ExecCommandPasteAction;
}(ExecCommandAction));
ExecCommandPasteAction = __decorate([
    conditionalEditorAction('paste')
], ExecCommandPasteAction);
var ExecCommandCopyWithSyntaxHighlightingAction = (function (_super) {
    __extends(ExecCommandCopyWithSyntaxHighlightingAction, _super);
    function ExecCommandCopyWithSyntaxHighlightingAction() {
        return _super.call(this, 'copy', {
            id: 'editor.action.clipboardCopyWithSyntaxHighlightingAction',
            label: nls.localize('actions.clipboard.copyWithSyntaxHighlightingLabel', "Copy With Syntax Highlighting"),
            alias: 'Copy With Syntax Highlighting',
            precondition: null,
            kbOpts: {
                kbExpr: EditorContextKeys.TextFocus,
                primary: null
            }
        }) || this;
    }
    ExecCommandCopyWithSyntaxHighlightingAction.prototype.run = function (accessor, editor) {
        var enableEmptySelectionClipboard = editor.getConfiguration().contribInfo.emptySelectionClipboard && browser.enableEmptySelectionClipboard;
        if (!enableEmptySelectionClipboard && editor.getSelection().isEmpty()) {
            return;
        }
        textAreaHandler_1.CopyOptions.forceCopyWithSyntaxHighlighting = true;
        _super.prototype.run.call(this, accessor, editor);
        textAreaHandler_1.CopyOptions.forceCopyWithSyntaxHighlighting = false;
    };
    return ExecCommandCopyWithSyntaxHighlightingAction;
}(ExecCommandAction));
ExecCommandCopyWithSyntaxHighlightingAction = __decorate([
    conditionalCopyWithSyntaxHighlighting()
], ExecCommandCopyWithSyntaxHighlightingAction);
