import './suggest.css';
import Event from 'vs/base/common/event';
import { IDisposable } from 'vs/base/common/lifecycle';
import { IDelegate } from 'vs/base/browser/ui/list/list';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';
import { ICodeEditor, IContentWidget, IContentWidgetPosition } from 'vs/editor/browser/editorBrowser';
import { ICompletionItem, CompletionModel } from '../common/completionModel';
import { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';
export declare class SuggestWidget implements IContentWidget, IDelegate<ICompletionItem>, IDisposable {
    private editor;
    private telemetryService;
    private static ID;
    static LOADING_MESSAGE: string;
    static NO_SUGGESTIONS_MESSAGE: string;
    allowEditorOverflow: boolean;
    private state;
    private isAuto;
    private loadingTimeout;
    private currentSuggestionDetails;
    private focusedItem;
    private completionModel;
    private element;
    private messageElement;
    private listElement;
    private details;
    private list;
    private suggestWidgetVisible;
    private suggestWidgetMultipleSuggestions;
    private suggestionSupportsAutoAccept;
    private onDidSelectEmitter;
    private editorBlurTimeout;
    private showTimeout;
    private toDispose;
    constructor(editor: ICodeEditor, telemetryService: ITelemetryService, contextKeyService: IContextKeyService, instantiationService: IInstantiationService);
    private onCursorSelectionChanged();
    private onEditorBlur();
    private onListSelection(e);
    private _getSuggestionAriaAlertLabel(item);
    private _lastAriaAlertLabel;
    private _ariaAlert(newAriaAlertLabel);
    private onListFocus(e);
    private setState(state);
    readonly onDidSelect: Event<ICompletionItem>;
    showTriggered(auto: boolean): void;
    showSuggestions(completionModel: CompletionModel, isFrozen: boolean, isAuto: boolean): void;
    selectNextPage(): boolean;
    selectNext(): boolean;
    selectPreviousPage(): boolean;
    selectPrevious(): boolean;
    getFocusedItem(): ICompletionItem;
    toggleDetails(): void;
    private show();
    private hide();
    hideWidget(): void;
    hideDetailsOrHideWidget(): void;
    getPosition(): IContentWidgetPosition;
    getDomNode(): HTMLElement;
    getId(): string;
    private updateWidgetHeight();
    private renderDetails();
    private readonly focusHeight;
    private readonly unfocusedHeight;
    getHeight(element: ICompletionItem): number;
    getTemplateId(element: ICompletionItem): string;
    dispose(): void;
}
