/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var nls = require("vs/nls");
var editorCommon_1 = require("vs/editor/common/editorCommon");
var editorCommonExtensions_1 = require("vs/editor/common/editorCommonExtensions");
var moveCaretCommand_1 = require("./moveCaretCommand");
var MoveCaretAction = (function (_super) {
    __extends(MoveCaretAction, _super);
    function MoveCaretAction(left, opts) {
        var _this = _super.call(this, opts) || this;
        _this.left = left;
        return _this;
    }
    MoveCaretAction.prototype.run = function (accessor, editor) {
        var commands = [];
        var selections = editor.getSelections();
        for (var i = 0; i < selections.length; i++) {
            commands.push(new moveCaretCommand_1.MoveCaretCommand(selections[i], this.left));
        }
        editor.executeCommands(this.id, commands);
    };
    return MoveCaretAction;
}(editorCommonExtensions_1.EditorAction));
var MoveCaretLeftAction = (function (_super) {
    __extends(MoveCaretLeftAction, _super);
    function MoveCaretLeftAction() {
        return _super.call(this, true, {
            id: 'editor.action.moveCarretLeftAction',
            label: nls.localize('caret.moveLeft', "Move Caret Left"),
            alias: 'Move Caret Left',
            precondition: editorCommon_1.EditorContextKeys.Writable
        }) || this;
    }
    return MoveCaretLeftAction;
}(MoveCaretAction));
MoveCaretLeftAction = __decorate([
    editorCommonExtensions_1.editorAction
], MoveCaretLeftAction);
var MoveCaretRightAction = (function (_super) {
    __extends(MoveCaretRightAction, _super);
    function MoveCaretRightAction() {
        return _super.call(this, false, {
            id: 'editor.action.moveCarretRightAction',
            label: nls.localize('caret.moveRight', "Move Caret Right"),
            alias: 'Move Caret Right',
            precondition: editorCommon_1.EditorContextKeys.Writable
        }) || this;
    }
    return MoveCaretRightAction;
}(MoveCaretAction));
MoveCaretRightAction = __decorate([
    editorCommonExtensions_1.editorAction
], MoveCaretRightAction);
