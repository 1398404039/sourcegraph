/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
require("./referencesWidget.css");
var nls = require("vs/nls");
var collections = require("vs/base/common/collections");
var errors_1 = require("vs/base/common/errors");
var event_1 = require("vs/base/common/event");
var lifecycle_1 = require("vs/base/common/lifecycle");
var network_1 = require("vs/base/common/network");
var strings = require("vs/base/common/strings");
var winjs_base_1 = require("vs/base/common/winjs.base");
var builder_1 = require("vs/base/browser/builder");
var dom = require("vs/base/browser/dom");
var sash_1 = require("vs/base/browser/ui/sash/sash");
var countBadge_1 = require("vs/base/browser/ui/countBadge/countBadge");
var iconLabel_1 = require("vs/base/browser/ui/iconLabel/iconLabel");
var leftRightWidget_1 = require("vs/base/browser/ui/leftRightWidget/leftRightWidget");
var treeDefaults_1 = require("vs/base/parts/tree/browser/treeDefaults");
var treeImpl_1 = require("vs/base/parts/tree/browser/treeImpl");
var serviceCollection_1 = require("vs/platform/instantiation/common/serviceCollection");
var workspace_1 = require("vs/platform/workspace/common/workspace");
var defaultConfig_1 = require("vs/editor/common/config/defaultConfig");
var range_1 = require("vs/editor/common/core/range");
var editorCommon = require("vs/editor/common/editorCommon");
var model_1 = require("vs/editor/common/model/model");
var embeddedCodeEditorWidget_1 = require("vs/editor/browser/widget/embeddedCodeEditorWidget");
var peekViewWidget_1 = require("vs/editor/contrib/zoneWidget/browser/peekViewWidget");
var referencesModel_1 = require("./referencesModel");
var resolverService_1 = require("vs/editor/common/services/resolverService");
var DecorationsManager = (function () {
    function DecorationsManager(editor, model) {
        var _this = this;
        this.editor = editor;
        this.model = model;
        this._decorationSet = collections.createStringDictionary();
        this._decorationIgnoreSet = collections.createStringDictionary();
        this._callOnDispose = [];
        this._callOnModelChange = [];
        this._callOnDispose.push(this.editor.onDidChangeModel(function () { return _this._onModelChanged(); }));
        this._onModelChanged();
    }
    DecorationsManager.prototype.dispose = function () {
        this._callOnModelChange = lifecycle_1.dispose(this._callOnModelChange);
        this._callOnDispose = lifecycle_1.dispose(this._callOnDispose);
        this.removeDecorations();
    };
    DecorationsManager.prototype._onModelChanged = function () {
        this.removeDecorations();
        this._callOnModelChange = lifecycle_1.dispose(this._callOnModelChange);
        var model = this.editor.getModel();
        if (!model) {
            return;
        }
        for (var i = 0, len = this.model.groups.length; i < len; i++) {
            if (this.model.groups[i].uri.toString() === model.uri.toString()) {
                this._addDecorations(this.model.groups[i]);
                return;
            }
        }
    };
    DecorationsManager.prototype._addDecorations = function (reference) {
        var _this = this;
        this._callOnModelChange.push(this.editor.getModel().onDidChangeDecorations(function (event) { return _this._onDecorationChanged(event); }));
        this.editor.getModel().changeDecorations(function (accessor) {
            var newDecorations = [];
            var newDecorationsActualIndex = [];
            for (var i_1 = 0, len = reference.children.length; i_1 < len; i_1++) {
                var oneReference = reference.children[i_1];
                if (_this._decorationIgnoreSet[oneReference.id]) {
                    continue;
                }
                newDecorations.push({
                    range: oneReference.range,
                    options: DecorationsManager.DecorationOptions
                });
                newDecorationsActualIndex.push(i_1);
            }
            var decorations = accessor.deltaDecorations([], newDecorations);
            for (var i = 0; i < decorations.length; i++) {
                _this._decorationSet[decorations[i]] = reference.children[newDecorationsActualIndex[i]];
            }
        });
    };
    DecorationsManager.prototype._onDecorationChanged = function (event) {
        var _this = this;
        var changedDecorations = event.changedDecorations, toRemove = [];
        for (var i = 0, len = changedDecorations.length; i < len; i++) {
            var reference = collections.lookup(this._decorationSet, changedDecorations[i]);
            if (!reference) {
                continue;
            }
            var newRange = this.editor.getModel().getDecorationRange(changedDecorations[i]), ignore = false;
            if (range_1.Range.equalsRange(newRange, reference.range)) {
                continue;
            }
            else if (range_1.Range.spansMultipleLines(newRange)) {
                ignore = true;
            }
            else {
                var lineLength = reference.range.endColumn - reference.range.startColumn, newLineLength = newRange.endColumn - newRange.startColumn;
                if (lineLength !== newLineLength) {
                    ignore = true;
                }
            }
            if (ignore) {
                this._decorationIgnoreSet[reference.id] = reference;
                toRemove.push(changedDecorations[i]);
            }
            else {
                reference.range = newRange;
            }
        }
        this.editor.changeDecorations(function (accessor) {
            for (var i_2 = 0, len_1 = toRemove.length; i_2 < len_1; i_2++) {
                delete _this._decorationSet[toRemove[i_2]];
            }
            accessor.deltaDecorations(toRemove, []);
        });
    };
    DecorationsManager.prototype.removeDecorations = function () {
        var keys = Object.keys(this._decorationSet);
        if (keys.length > 0) {
            this.editor.changeDecorations(function (accessor) {
                accessor.deltaDecorations(keys, []);
            });
        }
        this._decorationSet = {};
    };
    return DecorationsManager;
}());
DecorationsManager.DecorationOptions = {
    stickiness: editorCommon.TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges,
    className: 'reference-decoration'
};
var DataSource = (function () {
    function DataSource(_textModelResolverService) {
        this._textModelResolverService = _textModelResolverService;
        //
    }
    DataSource.prototype.getId = function (tree, element) {
        if (element instanceof referencesModel_1.ReferencesModel) {
            return 'root';
        }
        else if (element instanceof referencesModel_1.FileReferences) {
            return element.id;
        }
        else if (element instanceof referencesModel_1.OneReference) {
            return element.id;
        }
    };
    DataSource.prototype.hasChildren = function (tree, element) {
        if (element instanceof referencesModel_1.ReferencesModel) {
            return true;
        }
        if (element instanceof referencesModel_1.FileReferences && !element.failure) {
            return true;
        }
    };
    DataSource.prototype.getChildren = function (tree, element) {
        if (element instanceof referencesModel_1.ReferencesModel) {
            return winjs_base_1.TPromise.as(element.groups);
        }
        else if (element instanceof referencesModel_1.FileReferences) {
            return element.resolve(this._textModelResolverService).then(function (val) {
                if (element.failure) {
                    // refresh the element on failure so that
                    // we can update its rendering
                    return tree.refresh(element).then(function () { return val.children; });
                }
                return val.children;
            });
        }
        else {
            return winjs_base_1.TPromise.as([]);
        }
    };
    DataSource.prototype.getParent = function (tree, element) {
        var result = null;
        if (element instanceof referencesModel_1.FileReferences) {
            result = element.parent;
        }
        else if (element instanceof referencesModel_1.OneReference) {
            result = element.parent;
        }
        return winjs_base_1.TPromise.as(result);
    };
    return DataSource;
}());
DataSource = __decorate([
    __param(0, resolverService_1.ITextModelResolverService)
], DataSource);
var Controller = (function (_super) {
    __extends(Controller, _super);
    function Controller() {
        return _super.apply(this, arguments) || this;
    }
    Controller.prototype.onTap = function (tree, element, event) {
        if (element instanceof referencesModel_1.FileReferences) {
            event.preventDefault();
            event.stopPropagation();
            return this._expandCollapse(tree, element);
        }
        var result = _super.prototype.onTap.call(this, tree, element, event);
        tree.emit(Controller.Events.FOCUSED, element);
        return result;
    };
    Controller.prototype.onMouseDown = function (tree, element, event) {
        if (event.leftButton) {
            if (element instanceof referencesModel_1.FileReferences) {
                event.preventDefault();
                event.stopPropagation();
                return this._expandCollapse(tree, element);
            }
            var result = _super.prototype.onClick.call(this, tree, element, event);
            if (event.ctrlKey || event.metaKey) {
                tree.emit(Controller.Events.OPEN_TO_SIDE, element);
            }
            else if (event.detail === 2) {
                tree.emit(Controller.Events.SELECTED, element);
            }
            else {
                tree.emit(Controller.Events.FOCUSED, element);
            }
            return result;
        }
        return false;
    };
    Controller.prototype.onClick = function (tree, element, event) {
        if (event.leftButton) {
            return false; // Already handled by onMouseDown
        }
        return _super.prototype.onClick.call(this, tree, element, event);
    };
    Controller.prototype._expandCollapse = function (tree, element) {
        if (tree.isExpanded(element)) {
            tree.collapse(element).done(null, errors_1.onUnexpectedError);
        }
        else {
            tree.expand(element).done(null, errors_1.onUnexpectedError);
        }
        return true;
    };
    Controller.prototype.onEscape = function (tree, event) {
        return false;
    };
    Controller.prototype.onEnter = function (tree, event) {
        var element = tree.getFocus();
        if (element instanceof referencesModel_1.FileReferences) {
            return this._expandCollapse(tree, element);
        }
        var result = _super.prototype.onEnter.call(this, tree, event);
        if (event.ctrlKey || event.metaKey) {
            tree.emit(Controller.Events.OPEN_TO_SIDE, element);
        }
        else {
            tree.emit(Controller.Events.SELECTED, element);
        }
        return result;
    };
    Controller.prototype.onUp = function (tree, event) {
        _super.prototype.onUp.call(this, tree, event);
        this._fakeFocus(tree, event);
        return true;
    };
    Controller.prototype.onPageUp = function (tree, event) {
        _super.prototype.onPageUp.call(this, tree, event);
        this._fakeFocus(tree, event);
        return true;
    };
    Controller.prototype.onLeft = function (tree, event) {
        _super.prototype.onLeft.call(this, tree, event);
        this._fakeFocus(tree, event);
        return true;
    };
    Controller.prototype.onDown = function (tree, event) {
        _super.prototype.onDown.call(this, tree, event);
        this._fakeFocus(tree, event);
        return true;
    };
    Controller.prototype.onPageDown = function (tree, event) {
        _super.prototype.onPageDown.call(this, tree, event);
        this._fakeFocus(tree, event);
        return true;
    };
    Controller.prototype.onRight = function (tree, event) {
        _super.prototype.onRight.call(this, tree, event);
        this._fakeFocus(tree, event);
        return true;
    };
    Controller.prototype._fakeFocus = function (tree, event) {
        // focus next item
        var focus = tree.getFocus();
        tree.setSelection([focus]);
        // send out event
        tree.emit(Controller.Events.FOCUSED, focus);
    };
    return Controller;
}(treeDefaults_1.DefaultController));
Controller.Events = {
    FOCUSED: 'events/custom/focused',
    SELECTED: 'events/custom/selected',
    OPEN_TO_SIDE: 'events/custom/opentoside'
};
var Renderer = (function (_super) {
    __extends(Renderer, _super);
    function Renderer(contextService) {
        var _this = _super.call(this) || this;
        _this._contextService = contextService;
        return _this;
    }
    Renderer.prototype.getHeight = function (tree, element) {
        return 22;
    };
    Renderer.prototype.render = function (tree, element, container) {
        var _this = this;
        dom.clearNode(container);
        if (element instanceof referencesModel_1.FileReferences) {
            var fileReferencesContainer = builder_1.$('.reference-file');
            /* tslint:disable:no-unused-expression */
            new leftRightWidget_1.LeftRightWidget(fileReferencesContainer, function (left) {
                new iconLabel_1.FileLabel(left, element.uri, _this._contextService);
                return null;
            }, function (right) {
                var len = element.children.length;
                var badge = new countBadge_1.CountBadge(right, len);
                if (element.failure) {
                    badge.setTitleFormat(nls.localize('referencesFailre', "Failed to resolve file."));
                }
                else if (len > 1) {
                    badge.setTitleFormat(nls.localize('referencesCount', "{0} references", len));
                }
                else {
                    badge.setTitleFormat(nls.localize('referenceCount', "{0} reference", len));
                }
                return badge;
            });
            /* tslint:enable:no-unused-expression */
            fileReferencesContainer.appendTo(container);
        }
        else if (element instanceof referencesModel_1.OneReference) {
            var preview = element.parent.preview.preview(element.range);
            builder_1.$('.reference').innerHtml(strings.format('<span>{0}</span><span class="referenceMatch">{1}</span><span>{2}</span>', strings.escape(preview.before), strings.escape(preview.inside), strings.escape(preview.after))).appendTo(container);
        }
        return null;
    };
    return Renderer;
}(treeDefaults_1.LegacyRenderer));
Renderer = __decorate([
    __param(0, workspace_1.IWorkspaceContextService)
], Renderer);
var VSash = (function () {
    function VSash(container, ratio) {
        var _this = this;
        this._disposables = new lifecycle_1.Disposables();
        this._onDidChangePercentages = new event_1.Emitter();
        this._ratio = ratio;
        this._sash = new sash_1.Sash(container, {
            getVerticalSashLeft: function () { return _this._width * _this._ratio; },
            getVerticalSashHeight: function () { return _this._height; }
        });
        // compute the current widget clientX postion since
        // the sash works with clientX when dragging
        var clientX;
        this._disposables.add(this._sash.addListener2('start', function (e) {
            clientX = e.startX - (_this._width * _this.ratio);
        }));
        this._disposables.add(this._sash.addListener2('change', function (e) {
            // compute the new position of the sash and from that
            // compute the new ratio that we are using
            var newLeft = e.currentX - clientX;
            if (newLeft > 20 && newLeft + 20 < _this._width) {
                _this._ratio = newLeft / _this._width;
                _this._sash.layout();
                _this._onDidChangePercentages.fire(_this);
            }
        }));
    }
    VSash.prototype.dispose = function () {
        this._sash.dispose();
        this._onDidChangePercentages.dispose();
        this._disposables.dispose();
    };
    Object.defineProperty(VSash.prototype, "onDidChangePercentages", {
        get: function () {
            return this._onDidChangePercentages.event;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VSash.prototype, "width", {
        set: function (value) {
            this._width = value;
            this._sash.layout();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VSash.prototype, "height", {
        set: function (value) {
            this._height = value;
            this._sash.layout();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VSash.prototype, "percentages", {
        get: function () {
            var left = 100 * this._ratio;
            var right = 100 - left;
            return [left + "%", right + "%"];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VSash.prototype, "ratio", {
        get: function () {
            return this._ratio;
        },
        enumerable: true,
        configurable: true
    });
    return VSash;
}());
/**
 * ZoneWidget that is shown inside the editor
 */
var ReferenceWidget = (function (_super) {
    __extends(ReferenceWidget, _super);
    function ReferenceWidget(editor, layoutData, _textModelResolverService, _contextService, _instantiationService) {
        var _this = _super.call(this, editor, { frameColor: '#007ACC', showFrame: false, showArrow: true, isResizeable: true }) || this;
        _this.layoutData = layoutData;
        _this._textModelResolverService = _textModelResolverService;
        _this._contextService = _contextService;
        _this._instantiationService = _instantiationService;
        _this._disposeOnNewModel = [];
        _this._onDidSelectReference = new event_1.Emitter();
        _this._previewModelReference = lifecycle_1.empty;
        _this._instantiationService = _this._instantiationService.createChild(new serviceCollection_1.ServiceCollection([peekViewWidget_1.IPeekViewService, _this]));
        _this.create();
        return _this;
    }
    ReferenceWidget.prototype.dispose = function () {
        this.setModel(null);
        lifecycle_1.dispose(this._preview, this._previewNotAvailableMessage, this._tree, this._sash);
        _super.prototype.dispose.call(this);
    };
    Object.defineProperty(ReferenceWidget.prototype, "onDidSelectReference", {
        get: function () {
            return this._onDidSelectReference.event;
        },
        enumerable: true,
        configurable: true
    });
    ReferenceWidget.prototype.show = function (where) {
        this.editor.revealRangeInCenterIfOutsideViewport(where);
        _super.prototype.show.call(this, where, this.layoutData.heightInLines || 18);
    };
    ReferenceWidget.prototype.focus = function () {
        this._tree.DOMFocus();
    };
    ReferenceWidget.prototype._onTitleClick = function (e) {
        if (this._preview && this._preview.getModel()) {
            this._onDidSelectReference.fire({
                element: this._getFocusedReference(),
                kind: e.ctrlKey || e.metaKey ? 'side' : 'open',
                source: 'title'
            });
        }
    };
    ReferenceWidget.prototype._fillBody = function (containerElement) {
        var _this = this;
        var container = builder_1.$(containerElement);
        container.addClass('reference-zone-widget');
        // message pane
        container.div({ 'class': 'messages' }, function (div) {
            _this._messageContainer = div.hide();
        });
        // editor
        container.div({ 'class': 'preview inline' }, function (div) {
            var options = {
                scrollBeyondLastLine: false,
                scrollbar: defaultConfig_1.DefaultConfig.editor.scrollbar,
                overviewRulerLanes: 2,
                fixedOverflowWidgets: true
            };
            _this._preview = _this._instantiationService.createInstance(embeddedCodeEditorWidget_1.EmbeddedCodeEditorWidget, div.getHTMLElement(), options, _this.editor);
            _this._previewContainer = div.hide();
            _this._previewNotAvailableMessage = model_1.Model.createFromString(nls.localize('missingPreviewMessage', "no preview available"));
        });
        // sash
        this._sash = new VSash(containerElement, this.layoutData.ratio || .8);
        this._sash.onDidChangePercentages(function () {
            var _a = _this._sash.percentages, left = _a[0], right = _a[1];
            _this._previewContainer.style({ width: left });
            _this._treeContainer.style({ width: right });
            _this._preview.layout();
            _this._tree.layout();
            _this.layoutData.ratio = _this._sash.ratio;
        });
        // tree
        container.div({ 'class': 'ref-tree inline' }, function (div) {
            var config = {
                dataSource: _this._instantiationService.createInstance(DataSource),
                renderer: _this._instantiationService.createInstance(Renderer),
                //sorter: new Sorter(),
                controller: new Controller()
            };
            var options = {
                allowHorizontalScroll: false,
                twistiePixels: 20,
                ariaLabel: nls.localize('treeAriaLabel', "References")
            };
            _this._tree = new treeImpl_1.Tree(div.getHTMLElement(), config, options);
            _this._treeContainer = div.hide();
        });
    };
    ReferenceWidget.prototype._doLayoutBody = function (heightInPixel, widthInPixel) {
        _super.prototype._doLayoutBody.call(this, heightInPixel, widthInPixel);
        var height = heightInPixel + 'px';
        this._sash.height = heightInPixel;
        this._sash.width = widthInPixel;
        // set height/width
        var _a = this._sash.percentages, left = _a[0], right = _a[1];
        this._previewContainer.style({ height: height, width: left });
        this._treeContainer.style({ height: height, width: right });
        // forward
        this._tree.layout(heightInPixel);
        this._preview.layout();
        // store layout data
        this.layoutData = {
            heightInLines: this._viewZone.heightInLines,
            ratio: this._sash.ratio
        };
    };
    ReferenceWidget.prototype._onWidth = function (widthInPixel) {
        this._sash.width = widthInPixel;
        this._preview.layout();
    };
    ReferenceWidget.prototype.setSelection = function (selection) {
        return this._revealReference(selection);
    };
    ReferenceWidget.prototype.setModel = function (newModel) {
        // clean up
        this._disposeOnNewModel = lifecycle_1.dispose(this._disposeOnNewModel);
        this._model = newModel;
        if (this._model) {
            return this._onNewModel();
        }
    };
    ReferenceWidget.prototype._onNewModel = function () {
        var _this = this;
        if (this._model.empty) {
            this.setTitle('');
            this._messageContainer.innerHtml(nls.localize('noResults', "No results")).show();
            return winjs_base_1.TPromise.as(void 0);
        }
        this._messageContainer.hide();
        this._decorationsManager = new DecorationsManager(this._preview, this._model);
        this._disposeOnNewModel.push(this._decorationsManager);
        // listen on model changes
        this._disposeOnNewModel.push(this._model.onDidChangeReferenceRange(function (reference) { return _this._tree.refresh(reference); }));
        // listen on selection and focus
        this._disposeOnNewModel.push(this._tree.addListener2(Controller.Events.FOCUSED, function (element) {
            if (element instanceof referencesModel_1.OneReference) {
                _this._revealReference(element);
                _this._onDidSelectReference.fire({ element: element, kind: 'show', source: 'tree' });
            }
        }));
        this._disposeOnNewModel.push(this._tree.addListener2(Controller.Events.SELECTED, function (element) {
            if (element instanceof referencesModel_1.OneReference) {
                _this._onDidSelectReference.fire({ element: element, kind: 'goto', source: 'tree' });
            }
        }));
        this._disposeOnNewModel.push(this._tree.addListener2(Controller.Events.OPEN_TO_SIDE, function (element) {
            if (element instanceof referencesModel_1.OneReference) {
                _this._onDidSelectReference.fire({ element: element, kind: 'side', source: 'tree' });
            }
        }));
        // listen on editor
        this._disposeOnNewModel.push(this._preview.onMouseDown(function (e) {
            if (e.event.detail === 2) {
                _this._onDidSelectReference.fire({
                    element: _this._getFocusedReference(),
                    kind: (e.event.ctrlKey || e.event.metaKey) ? 'side' : 'open',
                    source: 'editor'
                });
            }
        }));
        // make sure things are rendered
        dom.addClass(this.container, 'results-loaded');
        this._treeContainer.show();
        this._previewContainer.show();
        this._preview.layout();
        this._tree.layout();
        this.focus();
        // pick input and a reference to begin with
        var input = this._model.groups.length === 1 ? this._model.groups[0] : this._model;
        return this._tree.setInput(input);
    };
    ReferenceWidget.prototype._getFocusedReference = function () {
        var element = this._tree.getFocus();
        if (element instanceof referencesModel_1.OneReference) {
            return element;
        }
        else if (element instanceof referencesModel_1.FileReferences) {
            if (element.children.length > 0) {
                return element.children[0];
            }
        }
    };
    ReferenceWidget.prototype._revealReference = function (reference) {
        var _this = this;
        // Update widget header
        if (reference.uri.scheme !== network_1.Schemas.inMemory) {
            var file = reference.uri;
            var path = file.path + "/" + file.fragment;
            var dirs = path.split("/");
            dirs.splice(0, 1);
            var base = dirs.pop();
            this.setTitle(base, dirs.join("/"));
        }
        else {
            this.setTitle(nls.localize('peekView.alternateTitle', "References"));
        }
        var promise = this._textModelResolverService.createModelReference(reference.uri);
        return winjs_base_1.TPromise.join([promise, this._tree.reveal(reference)]).then(function (values) {
            var ref = values[0];
            if (!_this._model) {
                ref.dispose();
                // disposed
                return;
            }
            _this._previewModelReference.dispose();
            _this._previewModelReference = lifecycle_1.empty;
            // show in editor
            var model = ref.object;
            if (model) {
                _this._previewModelReference = ref;
                _this._preview.setModel(model.textEditorModel);
                var sel = range_1.Range.lift(reference.range).collapseToStart();
                _this._preview.setSelection(sel);
                _this._preview.revealRangeInCenter(sel);
            }
            else {
                _this._preview.setModel(_this._previewNotAvailableMessage);
                ref.dispose();
            }
            // show in tree
            _this._tree.setSelection([reference]);
            _this._tree.setFocus(reference);
        }, errors_1.onUnexpectedError);
    };
    return ReferenceWidget;
}(peekViewWidget_1.PeekViewWidget));
exports.ReferenceWidget = ReferenceWidget;
