/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var nls = require("vs/nls");
var history_1 = require("vs/base/common/history");
var keyCodes_1 = require("vs/base/common/keyCodes");
var lifecycle_1 = require("vs/base/common/lifecycle");
var contextkey_1 = require("vs/platform/contextkey/common/contextkey");
var range_1 = require("vs/editor/common/core/range");
var selection_1 = require("vs/editor/common/core/selection");
var strings = require("vs/base/common/strings");
var editorCommon = require("vs/editor/common/editorCommon");
var editorCommonExtensions_1 = require("vs/editor/common/editorCommonExtensions");
var findModel_1 = require("vs/editor/contrib/find/common/findModel");
var findState_1 = require("vs/editor/contrib/find/common/findState");
var modes_1 = require("vs/editor/common/modes");
var async_1 = require("vs/base/common/async");
var EditorContextKeys = editorCommon.EditorContextKeys;
var FindStartFocusAction;
(function (FindStartFocusAction) {
    FindStartFocusAction[FindStartFocusAction["NoFocusChange"] = 0] = "NoFocusChange";
    FindStartFocusAction[FindStartFocusAction["FocusFindInput"] = 1] = "FocusFindInput";
    FindStartFocusAction[FindStartFocusAction["FocusReplaceInput"] = 2] = "FocusReplaceInput";
})(FindStartFocusAction = exports.FindStartFocusAction || (exports.FindStartFocusAction = {}));
exports.CONTEXT_FIND_WIDGET_VISIBLE = new contextkey_1.RawContextKey('findWidgetVisible', false);
exports.CONTEXT_FIND_WIDGET_NOT_VISIBLE = exports.CONTEXT_FIND_WIDGET_VISIBLE.toNegated();
exports.CONTEXT_FIND_INPUT_FOCUSSED = new contextkey_1.RawContextKey('findInputFocussed', false);
var CommonFindController = (function (_super) {
    __extends(CommonFindController, _super);
    function CommonFindController(editor, contextKeyService) {
        var _this = _super.call(this) || this;
        _this._editor = editor;
        _this._findWidgetVisible = exports.CONTEXT_FIND_WIDGET_VISIBLE.bindTo(contextKeyService);
        _this._updateHistoryDelayer = new async_1.Delayer(500);
        _this._currentHistoryNavigator = new history_1.HistoryNavigator();
        _this._state = _this._register(new findState_1.FindReplaceState());
        _this._register(_this._state.addChangeListener(function (e) { return _this._onStateChanged(e); }));
        _this._model = null;
        _this._register(_this._editor.onDidChangeModel(function () {
            var shouldRestartFind = (_this._editor.getModel() && _this._state.isRevealed);
            _this.disposeModel();
            _this._state.change({
                searchScope: null
            }, false);
            if (shouldRestartFind) {
                _this._start({
                    forceRevealReplace: false,
                    seedSearchStringFromSelection: false,
                    shouldFocus: 0 /* NoFocusChange */,
                    shouldAnimate: false,
                });
            }
        }));
        return _this;
    }
    CommonFindController.get = function (editor) {
        return editor.getContribution(CommonFindController.ID);
    };
    CommonFindController.prototype.dispose = function () {
        this.disposeModel();
        _super.prototype.dispose.call(this);
    };
    CommonFindController.prototype.disposeModel = function () {
        if (this._model) {
            this._model.dispose();
            this._model = null;
        }
    };
    CommonFindController.prototype.getId = function () {
        return CommonFindController.ID;
    };
    CommonFindController.prototype._onStateChanged = function (e) {
        if (e.updateHistory && e.searchString) {
            this._delayedUpdateHistory();
        }
        if (e.isRevealed) {
            if (this._state.isRevealed) {
                this._findWidgetVisible.set(true);
            }
            else {
                this._findWidgetVisible.reset();
                this.disposeModel();
            }
        }
    };
    CommonFindController.prototype._delayedUpdateHistory = function () {
        this._updateHistoryDelayer.trigger(this._updateHistory.bind(this));
    };
    CommonFindController.prototype._updateHistory = function () {
        if (this._state.searchString) {
            this._currentHistoryNavigator.add(this._state.searchString);
        }
    };
    CommonFindController.prototype.getState = function () {
        return this._state;
    };
    CommonFindController.prototype.getHistory = function () {
        return this._currentHistoryNavigator;
    };
    CommonFindController.prototype.closeFindWidget = function () {
        this._state.change({
            isRevealed: false,
            searchScope: null
        }, false);
        this._editor.focus();
    };
    CommonFindController.prototype.toggleCaseSensitive = function () {
        this._state.change({ matchCase: !this._state.matchCase }, false);
    };
    CommonFindController.prototype.toggleWholeWords = function () {
        this._state.change({ wholeWord: !this._state.wholeWord }, false);
    };
    CommonFindController.prototype.toggleRegex = function () {
        this._state.change({ isRegex: !this._state.isRegex }, false);
    };
    CommonFindController.prototype.setSearchString = function (searchString) {
        this._state.change({ searchString: searchString }, false);
    };
    CommonFindController.prototype.getSelectionSearchString = function () {
        var selection = this._editor.getSelection();
        if (selection.startLineNumber === selection.endLineNumber) {
            if (selection.isEmpty()) {
                var wordAtPosition = this._editor.getModel().getWordAtPosition(selection.getStartPosition());
                if (wordAtPosition) {
                    return wordAtPosition.word;
                }
            }
            else {
                return this._editor.getModel().getValueInRange(selection);
            }
        }
        return null;
    };
    CommonFindController.prototype._start = function (opts) {
        this.disposeModel();
        if (!this._editor.getModel()) {
            // cannot do anything with an editor that doesn't have a model...
            return;
        }
        var stateChanges = {
            isRevealed: true
        };
        // Consider editor selection and overwrite the state with it
        if (opts.seedSearchStringFromSelection) {
            var selectionSearchString = this.getSelectionSearchString();
            if (selectionSearchString) {
                if (this._state.isRegex) {
                    stateChanges.searchString = strings.escapeRegExpCharacters(selectionSearchString);
                }
                else {
                    stateChanges.searchString = selectionSearchString;
                }
            }
        }
        // Overwrite isReplaceRevealed
        if (opts.forceRevealReplace) {
            stateChanges.isReplaceRevealed = true;
        }
        this._state.change(stateChanges, false);
        if (!this._model) {
            this._model = new findModel_1.FindModelBoundToEditorModel(this._editor, this._state);
        }
    };
    CommonFindController.prototype.start = function (opts) {
        this._start(opts);
    };
    CommonFindController.prototype.moveToNextMatch = function () {
        if (this._model) {
            this._model.moveToNextMatch();
            return true;
        }
        return false;
    };
    CommonFindController.prototype.moveToPrevMatch = function () {
        if (this._model) {
            this._model.moveToPrevMatch();
            return true;
        }
        return false;
    };
    CommonFindController.prototype.replace = function () {
        if (this._model) {
            this._model.replace();
            return true;
        }
        return false;
    };
    CommonFindController.prototype.replaceAll = function () {
        if (this._model) {
            this._model.replaceAll();
            return true;
        }
        return false;
    };
    CommonFindController.prototype.selectAllMatches = function () {
        if (this._model) {
            this._model.selectAllMatches();
            this._editor.focus();
            return true;
        }
        return false;
    };
    CommonFindController.prototype.showPreviousFindTerm = function () {
        var previousTerm = this._currentHistoryNavigator.previous();
        if (previousTerm) {
            this._state.change({ searchString: previousTerm }, false, false);
        }
        return true;
    };
    CommonFindController.prototype.showNextFindTerm = function () {
        var nextTerm = this._currentHistoryNavigator.next();
        if (nextTerm) {
            this._state.change({ searchString: nextTerm }, false, false);
        }
        return true;
    };
    return CommonFindController;
}(lifecycle_1.Disposable));
CommonFindController.ID = 'editor.contrib.findController';
CommonFindController = __decorate([
    __param(1, contextkey_1.IContextKeyService)
], CommonFindController);
exports.CommonFindController = CommonFindController;
var StartFindAction = (function (_super) {
    __extends(StartFindAction, _super);
    function StartFindAction() {
        return _super.call(this, {
            id: findModel_1.FIND_IDS.StartFindAction,
            label: nls.localize('startFindAction', "Find"),
            alias: 'Find',
            precondition: null,
            kbOpts: {
                kbExpr: null,
                primary: 32768 /* CtrlCmd */ | 36 /* KEY_F */,
                mac: {
                    primary: 32768 /* CtrlCmd */ | 36 /* KEY_F */,
                    secondary: [32768 /* CtrlCmd */ | 35 /* KEY_E */]
                }
            }
        }) || this;
    }
    StartFindAction.prototype.run = function (accessor, editor) {
        var controller = CommonFindController.get(editor);
        if (controller) {
            controller.start({
                forceRevealReplace: false,
                seedSearchStringFromSelection: true,
                shouldFocus: 1 /* FocusFindInput */,
                shouldAnimate: true
            });
        }
    };
    return StartFindAction;
}(editorCommonExtensions_1.EditorAction));
StartFindAction = __decorate([
    editorCommonExtensions_1.editorAction
], StartFindAction);
exports.StartFindAction = StartFindAction;
var MatchFindAction = (function (_super) {
    __extends(MatchFindAction, _super);
    function MatchFindAction() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MatchFindAction.prototype.run = function (accessor, editor) {
        var controller = CommonFindController.get(editor);
        if (controller && !this._run(controller)) {
            controller.start({
                forceRevealReplace: false,
                seedSearchStringFromSelection: (controller.getState().searchString.length === 0),
                shouldFocus: 0 /* NoFocusChange */,
                shouldAnimate: true
            });
            this._run(controller);
        }
    };
    return MatchFindAction;
}(editorCommonExtensions_1.EditorAction));
exports.MatchFindAction = MatchFindAction;
var NextMatchFindAction = (function (_super) {
    __extends(NextMatchFindAction, _super);
    function NextMatchFindAction() {
        return _super.call(this, {
            id: findModel_1.FIND_IDS.NextMatchFindAction,
            label: nls.localize('findNextMatchAction', "Find Next"),
            alias: 'Find Next',
            precondition: null,
            kbOpts: {
                kbExpr: EditorContextKeys.Focus,
                primary: 61 /* F3 */,
                mac: { primary: 32768 /* CtrlCmd */ | 37 /* KEY_G */, secondary: [61 /* F3 */] }
            }
        }) || this;
    }
    NextMatchFindAction.prototype._run = function (controller) {
        return controller.moveToNextMatch();
    };
    return NextMatchFindAction;
}(MatchFindAction));
NextMatchFindAction = __decorate([
    editorCommonExtensions_1.editorAction
], NextMatchFindAction);
exports.NextMatchFindAction = NextMatchFindAction;
var PreviousMatchFindAction = (function (_super) {
    __extends(PreviousMatchFindAction, _super);
    function PreviousMatchFindAction() {
        return _super.call(this, {
            id: findModel_1.FIND_IDS.PreviousMatchFindAction,
            label: nls.localize('findPreviousMatchAction', "Find Previous"),
            alias: 'Find Previous',
            precondition: null,
            kbOpts: {
                kbExpr: EditorContextKeys.Focus,
                primary: 16384 /* Shift */ | 61 /* F3 */,
                mac: { primary: 32768 /* CtrlCmd */ | 16384 /* Shift */ | 37 /* KEY_G */, secondary: [16384 /* Shift */ | 61 /* F3 */] }
            }
        }) || this;
    }
    PreviousMatchFindAction.prototype._run = function (controller) {
        return controller.moveToPrevMatch();
    };
    return PreviousMatchFindAction;
}(MatchFindAction));
PreviousMatchFindAction = __decorate([
    editorCommonExtensions_1.editorAction
], PreviousMatchFindAction);
exports.PreviousMatchFindAction = PreviousMatchFindAction;
var SelectionMatchFindAction = (function (_super) {
    __extends(SelectionMatchFindAction, _super);
    function SelectionMatchFindAction() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SelectionMatchFindAction.prototype.run = function (accessor, editor) {
        var controller = CommonFindController.get(editor);
        if (!controller) {
            return;
        }
        var selectionSearchString = controller.getSelectionSearchString();
        if (selectionSearchString) {
            controller.setSearchString(selectionSearchString);
        }
        if (!this._run(controller)) {
            controller.start({
                forceRevealReplace: false,
                seedSearchStringFromSelection: false,
                shouldFocus: 0 /* NoFocusChange */,
                shouldAnimate: true
            });
            this._run(controller);
        }
    };
    return SelectionMatchFindAction;
}(editorCommonExtensions_1.EditorAction));
exports.SelectionMatchFindAction = SelectionMatchFindAction;
var NextSelectionMatchFindAction = (function (_super) {
    __extends(NextSelectionMatchFindAction, _super);
    function NextSelectionMatchFindAction() {
        return _super.call(this, {
            id: findModel_1.FIND_IDS.NextSelectionMatchFindAction,
            label: nls.localize('nextSelectionMatchFindAction', "Find Next Selection"),
            alias: 'Find Next Selection',
            precondition: null,
            kbOpts: {
                kbExpr: EditorContextKeys.Focus,
                primary: 32768 /* CtrlCmd */ | 61 /* F3 */
            }
        }) || this;
    }
    NextSelectionMatchFindAction.prototype._run = function (controller) {
        return controller.moveToNextMatch();
    };
    return NextSelectionMatchFindAction;
}(SelectionMatchFindAction));
NextSelectionMatchFindAction = __decorate([
    editorCommonExtensions_1.editorAction
], NextSelectionMatchFindAction);
exports.NextSelectionMatchFindAction = NextSelectionMatchFindAction;
var PreviousSelectionMatchFindAction = (function (_super) {
    __extends(PreviousSelectionMatchFindAction, _super);
    function PreviousSelectionMatchFindAction() {
        return _super.call(this, {
            id: findModel_1.FIND_IDS.PreviousSelectionMatchFindAction,
            label: nls.localize('previousSelectionMatchFindAction', "Find Previous Selection"),
            alias: 'Find Previous Selection',
            precondition: null,
            kbOpts: {
                kbExpr: EditorContextKeys.Focus,
                primary: 32768 /* CtrlCmd */ | 16384 /* Shift */ | 61 /* F3 */
            }
        }) || this;
    }
    PreviousSelectionMatchFindAction.prototype._run = function (controller) {
        return controller.moveToPrevMatch();
    };
    return PreviousSelectionMatchFindAction;
}(SelectionMatchFindAction));
PreviousSelectionMatchFindAction = __decorate([
    editorCommonExtensions_1.editorAction
], PreviousSelectionMatchFindAction);
exports.PreviousSelectionMatchFindAction = PreviousSelectionMatchFindAction;
var StartFindReplaceAction = (function (_super) {
    __extends(StartFindReplaceAction, _super);
    function StartFindReplaceAction() {
        return _super.call(this, {
            id: findModel_1.FIND_IDS.StartFindReplaceAction,
            label: nls.localize('startReplace', "Replace"),
            alias: 'Replace',
            precondition: null,
            kbOpts: {
                kbExpr: null,
                primary: 32768 /* CtrlCmd */ | 38 /* KEY_H */,
                mac: { primary: 32768 /* CtrlCmd */ | 8192 /* Alt */ | 36 /* KEY_F */ }
            }
        }) || this;
    }
    StartFindReplaceAction.prototype.run = function (accessor, editor) {
        if (editor.getConfiguration().readOnly) {
            return;
        }
        var controller = CommonFindController.get(editor);
        if (controller) {
            controller.start({
                forceRevealReplace: true,
                seedSearchStringFromSelection: true,
                shouldFocus: 2 /* FocusReplaceInput */,
                shouldAnimate: true
            });
        }
    };
    return StartFindReplaceAction;
}(editorCommonExtensions_1.EditorAction));
StartFindReplaceAction = __decorate([
    editorCommonExtensions_1.editorAction
], StartFindReplaceAction);
exports.StartFindReplaceAction = StartFindReplaceAction;
function multiCursorFind(editor, changeFindSearchString, allowMultiline) {
    var controller = CommonFindController.get(editor);
    if (!controller) {
        return null;
    }
    var state = controller.getState();
    var searchText;
    var currentMatch;
    // In any case, if the find widget was ever opened, the options are taken from it
    var wholeWord = state.wholeWord;
    var matchCase = state.matchCase;
    // Find widget owns what we search for if:
    //  - focus is not in the editor (i.e. it is in the find widget)
    //  - and the search widget is visible
    //  - and the search string is non-empty
    if (!editor.isFocused() && state.isRevealed && state.searchString.length > 0) {
        // Find widget owns what is searched for
        searchText = state.searchString;
    }
    else {
        // Selection owns what is searched for
        var s = editor.getSelection();
        if (s.startLineNumber !== s.endLineNumber && !allowMultiline) {
            // multiline forbidden
            return null;
        }
        if (s.isEmpty()) {
            // selection is empty => expand to current word
            var word = editor.getModel().getWordAtPosition(s.getStartPosition());
            if (!word) {
                return null;
            }
            searchText = word.word;
            currentMatch = new selection_1.Selection(s.startLineNumber, word.startColumn, s.startLineNumber, word.endColumn);
        }
        else {
            searchText = editor.getModel().getValueInRange(s);
        }
        if (changeFindSearchString) {
            controller.setSearchString(searchText);
        }
    }
    return {
        searchText: searchText,
        matchCase: matchCase,
        wholeWord: wholeWord,
        currentMatch: currentMatch
    };
}
var SelectNextFindMatchAction = (function (_super) {
    __extends(SelectNextFindMatchAction, _super);
    function SelectNextFindMatchAction() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SelectNextFindMatchAction.prototype._getNextMatch = function (editor) {
        var r = multiCursorFind(editor, /*changeFindSearchString*/ true, /*allowMultiline*/ true);
        if (!r) {
            return null;
        }
        if (r.currentMatch) {
            return r.currentMatch;
        }
        var allSelections = editor.getSelections();
        var lastAddedSelection = allSelections[allSelections.length - 1];
        var nextMatch = editor.getModel().findNextMatch(r.searchText, lastAddedSelection.getEndPosition(), false, r.matchCase, r.wholeWord);
        if (!nextMatch) {
            return null;
        }
        return new selection_1.Selection(nextMatch.startLineNumber, nextMatch.startColumn, nextMatch.endLineNumber, nextMatch.endColumn);
    };
    return SelectNextFindMatchAction;
}(editorCommonExtensions_1.EditorAction));
exports.SelectNextFindMatchAction = SelectNextFindMatchAction;
var SelectPreviousFindMatchAction = (function (_super) {
    __extends(SelectPreviousFindMatchAction, _super);
    function SelectPreviousFindMatchAction() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SelectPreviousFindMatchAction.prototype._getPreviousMatch = function (editor) {
        var r = multiCursorFind(editor, /*changeFindSearchString*/ true, /*allowMultiline*/ true);
        if (!r) {
            return null;
        }
        if (r.currentMatch) {
            return r.currentMatch;
        }
        var allSelections = editor.getSelections();
        var lastAddedSelection = allSelections[allSelections.length - 1];
        var previousMatch = editor.getModel().findPreviousMatch(r.searchText, lastAddedSelection.getStartPosition(), false, r.matchCase, r.wholeWord);
        if (!previousMatch) {
            return null;
        }
        return new selection_1.Selection(previousMatch.startLineNumber, previousMatch.startColumn, previousMatch.endLineNumber, previousMatch.endColumn);
    };
    return SelectPreviousFindMatchAction;
}(editorCommonExtensions_1.EditorAction));
exports.SelectPreviousFindMatchAction = SelectPreviousFindMatchAction;
var AddSelectionToNextFindMatchAction = (function (_super) {
    __extends(AddSelectionToNextFindMatchAction, _super);
    function AddSelectionToNextFindMatchAction() {
        return _super.call(this, {
            id: findModel_1.FIND_IDS.AddSelectionToNextFindMatchAction,
            label: nls.localize('addSelectionToNextFindMatch', "Add Selection To Next Find Match"),
            alias: 'Add Selection To Next Find Match',
            precondition: null,
            kbOpts: {
                kbExpr: EditorContextKeys.Focus,
                primary: 32768 /* CtrlCmd */ | 34 /* KEY_D */
            }
        }) || this;
    }
    AddSelectionToNextFindMatchAction.prototype.run = function (accessor, editor) {
        var nextMatch = this._getNextMatch(editor);
        if (!nextMatch) {
            return;
        }
        var allSelections = editor.getSelections();
        editor.setSelections(allSelections.concat(nextMatch));
        editor.revealRangeInCenterIfOutsideViewport(nextMatch);
    };
    return AddSelectionToNextFindMatchAction;
}(SelectNextFindMatchAction));
AddSelectionToNextFindMatchAction = __decorate([
    editorCommonExtensions_1.editorAction
], AddSelectionToNextFindMatchAction);
exports.AddSelectionToNextFindMatchAction = AddSelectionToNextFindMatchAction;
var AddSelectionToPreviousFindMatchAction = (function (_super) {
    __extends(AddSelectionToPreviousFindMatchAction, _super);
    function AddSelectionToPreviousFindMatchAction() {
        return _super.call(this, {
            id: findModel_1.FIND_IDS.AddSelectionToPreviousFindMatchAction,
            label: nls.localize('addSelectionToPreviousFindMatch', "Add Selection To Previous Find Match"),
            alias: 'Add Selection To Previous Find Match',
            precondition: null
        }) || this;
    }
    AddSelectionToPreviousFindMatchAction.prototype.run = function (accessor, editor) {
        var previousMatch = this._getPreviousMatch(editor);
        if (!previousMatch) {
            return;
        }
        var allSelections = editor.getSelections();
        editor.setSelections(allSelections.concat(previousMatch));
        editor.revealRangeInCenterIfOutsideViewport(previousMatch);
    };
    return AddSelectionToPreviousFindMatchAction;
}(SelectPreviousFindMatchAction));
AddSelectionToPreviousFindMatchAction = __decorate([
    editorCommonExtensions_1.editorAction
], AddSelectionToPreviousFindMatchAction);
exports.AddSelectionToPreviousFindMatchAction = AddSelectionToPreviousFindMatchAction;
var MoveSelectionToNextFindMatchAction = (function (_super) {
    __extends(MoveSelectionToNextFindMatchAction, _super);
    function MoveSelectionToNextFindMatchAction() {
        return _super.call(this, {
            id: findModel_1.FIND_IDS.MoveSelectionToNextFindMatchAction,
            label: nls.localize('moveSelectionToNextFindMatch', "Move Last Selection To Next Find Match"),
            alias: 'Move Last Selection To Next Find Match',
            precondition: null,
            kbOpts: {
                kbExpr: EditorContextKeys.Focus,
                primary: keyCodes_1.KeyChord(32768 /* CtrlCmd */ | 41 /* KEY_K */, 32768 /* CtrlCmd */ | 34 /* KEY_D */)
            }
        }) || this;
    }
    MoveSelectionToNextFindMatchAction.prototype.run = function (accessor, editor) {
        var nextMatch = this._getNextMatch(editor);
        if (!nextMatch) {
            return;
        }
        var allSelections = editor.getSelections();
        editor.setSelections(allSelections.slice(0, allSelections.length - 1).concat(nextMatch));
        editor.revealRangeInCenterIfOutsideViewport(nextMatch);
    };
    return MoveSelectionToNextFindMatchAction;
}(SelectNextFindMatchAction));
MoveSelectionToNextFindMatchAction = __decorate([
    editorCommonExtensions_1.editorAction
], MoveSelectionToNextFindMatchAction);
exports.MoveSelectionToNextFindMatchAction = MoveSelectionToNextFindMatchAction;
var MoveSelectionToPreviousFindMatchAction = (function (_super) {
    __extends(MoveSelectionToPreviousFindMatchAction, _super);
    function MoveSelectionToPreviousFindMatchAction() {
        return _super.call(this, {
            id: findModel_1.FIND_IDS.MoveSelectionToPreviousFindMatchAction,
            label: nls.localize('moveSelectionToPreviousFindMatch', "Move Last Selection To Previous Find Match"),
            alias: 'Move Last Selection To Previous Find Match',
            precondition: null
        }) || this;
    }
    MoveSelectionToPreviousFindMatchAction.prototype.run = function (accessor, editor) {
        var previousMatch = this._getPreviousMatch(editor);
        if (!previousMatch) {
            return;
        }
        var allSelections = editor.getSelections();
        editor.setSelections(allSelections.slice(0, allSelections.length - 1).concat(previousMatch));
        editor.revealRangeInCenterIfOutsideViewport(previousMatch);
    };
    return MoveSelectionToPreviousFindMatchAction;
}(SelectPreviousFindMatchAction));
MoveSelectionToPreviousFindMatchAction = __decorate([
    editorCommonExtensions_1.editorAction
], MoveSelectionToPreviousFindMatchAction);
exports.MoveSelectionToPreviousFindMatchAction = MoveSelectionToPreviousFindMatchAction;
var AbstractSelectHighlightsAction = (function (_super) {
    __extends(AbstractSelectHighlightsAction, _super);
    function AbstractSelectHighlightsAction() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AbstractSelectHighlightsAction.prototype.run = function (accessor, editor) {
        var r = multiCursorFind(editor, /*changeFindSearchString*/ true, /*allowMultiline*/ true);
        if (!r) {
            return;
        }
        var matches = editor.getModel().findMatches(r.searchText, true, false, r.matchCase, r.wholeWord);
        if (matches.length > 0) {
            var editorSelection = editor.getSelection();
            for (var i = 0, len = matches.length; i < len; i++) {
                var match = matches[i];
                var intersection = match.intersectRanges(editorSelection);
                if (intersection) {
                    // bingo!
                    matches.splice(i, 1);
                    matches.unshift(match);
                    break;
                }
            }
            editor.setSelections(matches.map(function (m) { return new selection_1.Selection(m.startLineNumber, m.startColumn, m.endLineNumber, m.endColumn); }));
        }
    };
    return AbstractSelectHighlightsAction;
}(editorCommonExtensions_1.EditorAction));
exports.AbstractSelectHighlightsAction = AbstractSelectHighlightsAction;
var SelectHighlightsAction = (function (_super) {
    __extends(SelectHighlightsAction, _super);
    function SelectHighlightsAction() {
        return _super.call(this, {
            id: 'editor.action.selectHighlights',
            label: nls.localize('selectAllOccurencesOfFindMatch', "Select All Occurrences of Find Match"),
            alias: 'Select All Occurrences of Find Match',
            precondition: null,
            kbOpts: {
                kbExpr: EditorContextKeys.Focus,
                primary: 32768 /* CtrlCmd */ | 16384 /* Shift */ | 42 /* KEY_L */
            }
        }) || this;
    }
    return SelectHighlightsAction;
}(AbstractSelectHighlightsAction));
SelectHighlightsAction = __decorate([
    editorCommonExtensions_1.editorAction
], SelectHighlightsAction);
exports.SelectHighlightsAction = SelectHighlightsAction;
var CompatChangeAll = (function (_super) {
    __extends(CompatChangeAll, _super);
    function CompatChangeAll() {
        return _super.call(this, {
            id: 'editor.action.changeAll',
            label: nls.localize('changeAll.label', "Change All Occurrences"),
            alias: 'Change All Occurrences',
            precondition: EditorContextKeys.Writable,
            kbOpts: {
                kbExpr: EditorContextKeys.TextFocus,
                primary: 32768 /* CtrlCmd */ | 60 /* F2 */
            },
            menuOpts: {
                group: '1_modification',
                order: 1.2
            }
        }) || this;
    }
    return CompatChangeAll;
}(AbstractSelectHighlightsAction));
CompatChangeAll = __decorate([
    editorCommonExtensions_1.editorAction
], CompatChangeAll);
exports.CompatChangeAll = CompatChangeAll;
var SelectionHighlighter = SelectionHighlighter_1 = (function (_super) {
    __extends(SelectionHighlighter, _super);
    function SelectionHighlighter(editor) {
        var _this = _super.call(this) || this;
        _this.editor = editor;
        _this.decorations = [];
        _this.updateSoon = _this._register(new async_1.RunOnceScheduler(function () { return _this._update(); }, 300));
        _this.lastWordUnderCursor = null;
        _this._register(editor.onDidChangeCursorSelection(function (e) {
            if (e.selection.isEmpty()) {
                if (e.reason === editorCommon.CursorChangeReason.Explicit) {
                    if (!_this.lastWordUnderCursor || !_this.lastWordUnderCursor.containsPosition(e.selection.getStartPosition())) {
                        // no longer valid
                        _this.removeDecorations();
                    }
                    _this.updateSoon.schedule();
                }
                else {
                    _this.removeDecorations();
                }
            }
            else {
                _this._update();
            }
        }));
        _this._register(editor.onDidChangeModel(function (e) {
            _this.removeDecorations();
        }));
        _this._register(CommonFindController.get(editor).getState().addChangeListener(function (e) {
            _this._update();
        }));
        return _this;
    }
    SelectionHighlighter.prototype.getId = function () {
        return SelectionHighlighter_1.ID;
    };
    SelectionHighlighter.prototype.removeDecorations = function () {
        this.lastWordUnderCursor = null;
        if (this.decorations.length > 0) {
            this.decorations = this.editor.deltaDecorations(this.decorations, []);
        }
    };
    SelectionHighlighter.prototype._update = function () {
        var model = this.editor.getModel();
        if (!model) {
            return;
        }
        this.lastWordUnderCursor = null;
        if (!this.editor.getConfiguration().contribInfo.selectionHighlight) {
            return;
        }
        var r = multiCursorFind(this.editor, /*changeFindSearchString*/ false, /*allowMultiline*/ false);
        if (!r) {
            this.removeDecorations();
            return;
        }
        var hasFindOccurences = modes_1.DocumentHighlightProviderRegistry.has(model);
        if (r.currentMatch) {
            // This is an empty selection
            if (hasFindOccurences) {
                // Do not interfere with semantic word highlighting in the no selection case
                this.removeDecorations();
                return;
            }
            this.lastWordUnderCursor = r.currentMatch;
        }
        if (/^[ \t]+$/.test(r.searchText)) {
            // whitespace only selection
            this.removeDecorations();
            return;
        }
        if (r.searchText.length > 200) {
            // very long selection
            this.removeDecorations();
            return;
        }
        var selections = this.editor.getSelections();
        var firstSelectedText = model.getValueInRange(selections[0]);
        for (var i = 1; i < selections.length; i++) {
            var selectedText = model.getValueInRange(selections[i]);
            if (firstSelectedText !== selectedText) {
                // not all selections have the same text
                this.removeDecorations();
                return;
            }
        }
        var allMatches = model.findMatches(r.searchText, true, false, r.matchCase, r.wholeWord);
        allMatches.sort(range_1.Range.compareRangesUsingStarts);
        selections.sort(range_1.Range.compareRangesUsingStarts);
        // do not overlap with selection (issue #64 and #512)
        var matches = [];
        for (var i = 0, j = 0, len = allMatches.length, lenJ = selections.length; i < len;) {
            var match = allMatches[i];
            if (j >= lenJ) {
                // finished all editor selections
                matches.push(match);
                i++;
            }
            else {
                var cmp = range_1.Range.compareRangesUsingStarts(match, selections[j]);
                if (cmp < 0) {
                    // match is before sel
                    matches.push(match);
                    i++;
                }
                else if (cmp > 0) {
                    // sel is before match
                    j++;
                }
                else {
                    // sel is equal to match
                    i++;
                    j++;
                }
            }
        }
        var decorations = matches.map(function (r) {
            return {
                range: r,
                options: {
                    stickiness: editorCommon.TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges,
                    className: 'selectionHighlight',
                    // Show in overviewRuler only if model has no semantic highlighting
                    overviewRuler: (hasFindOccurences ? undefined : {
                        color: '#A0A0A0',
                        darkColor: '#A0A0A0',
                        position: editorCommon.OverviewRulerLane.Center
                    })
                }
            };
        });
        this.decorations = this.editor.deltaDecorations(this.decorations, decorations);
    };
    SelectionHighlighter.prototype.dispose = function () {
        this.removeDecorations();
        _super.prototype.dispose.call(this);
    };
    return SelectionHighlighter;
}(lifecycle_1.Disposable));
SelectionHighlighter.ID = 'editor.contrib.selectionHighlighter';
SelectionHighlighter = SelectionHighlighter_1 = __decorate([
    editorCommonExtensions_1.commonEditorContribution
], SelectionHighlighter);
exports.SelectionHighlighter = SelectionHighlighter;
var FindCommand = editorCommonExtensions_1.EditorCommand.bindToContribution(CommonFindController.get);
editorCommonExtensions_1.CommonEditorRegistry.registerEditorCommand(new FindCommand({
    id: findModel_1.FIND_IDS.CloseFindWidgetCommand,
    precondition: exports.CONTEXT_FIND_WIDGET_VISIBLE,
    handler: function (x) { return x.closeFindWidget(); },
    kbOpts: {
        weight: editorCommonExtensions_1.CommonEditorRegistry.commandWeight(5),
        kbExpr: EditorContextKeys.Focus,
        primary: 9 /* Escape */,
        secondary: [16384 /* Shift */ | 9 /* Escape */]
    }
}));
editorCommonExtensions_1.CommonEditorRegistry.registerEditorCommand(new FindCommand({
    id: findModel_1.FIND_IDS.ToggleCaseSensitiveCommand,
    precondition: null,
    handler: function (x) { return x.toggleCaseSensitive(); },
    kbOpts: {
        weight: editorCommonExtensions_1.CommonEditorRegistry.commandWeight(5),
        kbExpr: EditorContextKeys.Focus,
        primary: findModel_1.ToggleCaseSensitiveKeybinding.primary,
        mac: findModel_1.ToggleCaseSensitiveKeybinding.mac,
        win: findModel_1.ToggleCaseSensitiveKeybinding.win,
        linux: findModel_1.ToggleCaseSensitiveKeybinding.linux
    }
}));
editorCommonExtensions_1.CommonEditorRegistry.registerEditorCommand(new FindCommand({
    id: findModel_1.FIND_IDS.ToggleWholeWordCommand,
    precondition: null,
    handler: function (x) { return x.toggleWholeWords(); },
    kbOpts: {
        weight: editorCommonExtensions_1.CommonEditorRegistry.commandWeight(5),
        kbExpr: EditorContextKeys.Focus,
        primary: findModel_1.ToggleWholeWordKeybinding.primary,
        mac: findModel_1.ToggleWholeWordKeybinding.mac,
        win: findModel_1.ToggleWholeWordKeybinding.win,
        linux: findModel_1.ToggleWholeWordKeybinding.linux
    }
}));
editorCommonExtensions_1.CommonEditorRegistry.registerEditorCommand(new FindCommand({
    id: findModel_1.FIND_IDS.ToggleRegexCommand,
    precondition: null,
    handler: function (x) { return x.toggleRegex(); },
    kbOpts: {
        weight: editorCommonExtensions_1.CommonEditorRegistry.commandWeight(5),
        kbExpr: EditorContextKeys.Focus,
        primary: findModel_1.ToggleRegexKeybinding.primary,
        mac: findModel_1.ToggleRegexKeybinding.mac,
        win: findModel_1.ToggleRegexKeybinding.win,
        linux: findModel_1.ToggleRegexKeybinding.linux
    }
}));
editorCommonExtensions_1.CommonEditorRegistry.registerEditorCommand(new FindCommand({
    id: findModel_1.FIND_IDS.ReplaceOneAction,
    precondition: exports.CONTEXT_FIND_WIDGET_VISIBLE,
    handler: function (x) { return x.replace(); },
    kbOpts: {
        weight: editorCommonExtensions_1.CommonEditorRegistry.commandWeight(5),
        kbExpr: EditorContextKeys.Focus,
        primary: 32768 /* CtrlCmd */ | 16384 /* Shift */ | 22 /* KEY_1 */
    }
}));
editorCommonExtensions_1.CommonEditorRegistry.registerEditorCommand(new FindCommand({
    id: findModel_1.FIND_IDS.ReplaceAllAction,
    precondition: exports.CONTEXT_FIND_WIDGET_VISIBLE,
    handler: function (x) { return x.replaceAll(); },
    kbOpts: {
        weight: editorCommonExtensions_1.CommonEditorRegistry.commandWeight(5),
        kbExpr: EditorContextKeys.Focus,
        primary: 32768 /* CtrlCmd */ | 8192 /* Alt */ | 3 /* Enter */
    }
}));
editorCommonExtensions_1.CommonEditorRegistry.registerEditorCommand(new FindCommand({
    id: findModel_1.FIND_IDS.SelectAllMatchesAction,
    precondition: exports.CONTEXT_FIND_WIDGET_VISIBLE,
    handler: function (x) { return x.selectAllMatches(); },
    kbOpts: {
        weight: editorCommonExtensions_1.CommonEditorRegistry.commandWeight(5),
        kbExpr: EditorContextKeys.Focus,
        primary: 8192 /* Alt */ | 3 /* Enter */
    }
}));
editorCommonExtensions_1.CommonEditorRegistry.registerEditorCommand(new FindCommand({
    id: findModel_1.FIND_IDS.ShowPreviousFindTermAction,
    precondition: exports.CONTEXT_FIND_WIDGET_VISIBLE,
    handler: function (x) { return x.showPreviousFindTerm(); },
    kbOpts: {
        weight: editorCommonExtensions_1.CommonEditorRegistry.commandWeight(5),
        kbExpr: contextkey_1.ContextKeyExpr.and(exports.CONTEXT_FIND_INPUT_FOCUSSED, EditorContextKeys.Focus),
        primary: findModel_1.ShowPreviousFindTermKeybinding.primary,
        mac: findModel_1.ShowPreviousFindTermKeybinding.mac,
        win: findModel_1.ShowPreviousFindTermKeybinding.win,
        linux: findModel_1.ShowPreviousFindTermKeybinding.linux
    }
}));
editorCommonExtensions_1.CommonEditorRegistry.registerEditorCommand(new FindCommand({
    id: findModel_1.FIND_IDS.ShowNextFindTermAction,
    precondition: exports.CONTEXT_FIND_WIDGET_VISIBLE,
    handler: function (x) { return x.showNextFindTerm(); },
    kbOpts: {
        weight: editorCommonExtensions_1.CommonEditorRegistry.commandWeight(5),
        kbExpr: contextkey_1.ContextKeyExpr.and(exports.CONTEXT_FIND_INPUT_FOCUSSED, EditorContextKeys.Focus),
        primary: findModel_1.ShowNextFindTermKeybinding.primary,
        mac: findModel_1.ShowNextFindTermKeybinding.mac,
        win: findModel_1.ShowNextFindTermKeybinding.win,
        linux: findModel_1.ShowNextFindTermKeybinding.linux
    }
}));
var SelectionHighlighter_1;
