/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var errors_1 = require("vs/base/common/errors");
var winjs_base_1 = require("vs/base/common/winjs.base");
var editorCommonExtensions_1 = require("vs/editor/common/editorCommonExtensions");
var modes_1 = require("vs/editor/common/modes");
var async_1 = require("vs/base/common/async");
function outputResults(promises) {
    return winjs_base_1.TPromise.join(promises).then(function (allReferences) {
        var result = [];
        for (var _i = 0, allReferences_1 = allReferences; _i < allReferences_1.length; _i++) {
            var references = allReferences_1[_i];
            if (Array.isArray(references)) {
                result.push.apply(result, references);
            }
            else if (references) {
                result.push(references);
            }
        }
        return result;
    });
}
function getDefinitions(model, position, registry, provide) {
    var provider = registry.ordered(model);
    // get results
    var promises = provider.map(function (provider, idx) {
        return async_1.asWinJsPromise(function (token) {
            return provide(provider, model, position, token);
        }).then(function (result) {
            return result;
        }, function (err) {
            errors_1.onUnexpectedExternalError(err);
        });
    });
    return outputResults(promises);
}
function getDefinitionsAtPosition(model, position) {
    return getDefinitions(model, position, modes_1.DefinitionProviderRegistry, function (provider, model, position, token) {
        return provider.provideDefinition(model, position, token);
    });
}
exports.getDefinitionsAtPosition = getDefinitionsAtPosition;
function getImplementationsAtPosition(model, position) {
    return getDefinitions(model, position, modes_1.ImplementationProviderRegistry, function (provider, model, position, token) {
        return provider.provideImplementation(model, position, token);
    });
}
exports.getImplementationsAtPosition = getImplementationsAtPosition;
function getTypeDefinitionsAtPosition(model, position) {
    return getDefinitions(model, position, modes_1.TypeDefinitionProviderRegistry, function (provider, model, position, token) {
        return provider.provideTypeDefinition(model, position, token);
    });
}
exports.getTypeDefinitionsAtPosition = getTypeDefinitionsAtPosition;
editorCommonExtensions_1.CommonEditorRegistry.registerDefaultLanguageCommand('_executeDefinitionProvider', getDefinitionsAtPosition);
editorCommonExtensions_1.CommonEditorRegistry.registerDefaultLanguageCommand('_executeImplementationProvider', getImplementationsAtPosition);
editorCommonExtensions_1.CommonEditorRegistry.registerDefaultLanguageCommand('_executeTypeDefinitionProvider', getTypeDefinitionsAtPosition);
