import './referencesWidget.css';
import Event from 'vs/base/common/event';
import { TPromise } from 'vs/base/common/winjs.base';
import { IKeyboardEvent } from 'vs/base/browser/keyboardEvent';
import { IMouseEvent } from 'vs/base/browser/mouseEvent';
import { GestureEvent } from 'vs/base/browser/touch';
import * as tree from 'vs/base/parts/tree/browser/tree';
import { DefaultController, LegacyRenderer } from 'vs/base/parts/tree/browser/treeDefaults';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';
import * as editorCommon from 'vs/editor/common/editorCommon';
import { ICodeEditor } from 'vs/editor/browser/editorBrowser';
import { PeekViewWidget } from 'vs/editor/contrib/zoneWidget/browser/peekViewWidget';
import { FileReferences, OneReference, ReferencesModel } from './referencesModel';
import { ITextModelResolverService } from 'vs/editor/common/services/resolverService';
export declare class DataSource implements tree.IDataSource {
    private _textModelResolverService;
    constructor(_textModelResolverService: ITextModelResolverService);
    getId(tree: tree.ITree, element: any): string;
    hasChildren(tree: tree.ITree, element: any): boolean;
    getChildren(tree: tree.ITree, element: ReferencesModel | FileReferences): TPromise<any[]>;
    getParent(tree: tree.ITree, element: any): TPromise<any>;
}
/**
 * RevealedReference wraps an optional OneReference.
 * This allows RevealedReference to be passed around (i.e. to Controller)
 * and updates to the reference can be seen.
 */
export declare type RevealedReference = {
    ref: OneReference | undefined;
};
export declare class Controller extends DefaultController {
    private _expandedElements;
    private _revealedReference;
    constructor(_expandedElements: {
        [id: string]: FileReferences;
    }, _revealedReference: RevealedReference);
    static Events: {
        FOCUSED: string;
        SELECTED: string;
        OPEN_TO_SIDE: string;
    };
    onTap(tree: tree.ITree, element: any, event: GestureEvent): boolean;
    onMouseDown(tree: tree.ITree, element: any, event: IMouseEvent): boolean;
    onClick(tree: tree.ITree, element: any, event: IMouseEvent): boolean;
    private _expandCollapse(tree, element);
    onEscape(tree: tree.ITree, event: IKeyboardEvent): boolean;
    onEnter(tree: tree.ITree, event: IKeyboardEvent): boolean;
    onUp(tree: tree.ITree, event: IKeyboardEvent): boolean;
    onPageUp(tree: tree.ITree, event: IKeyboardEvent): boolean;
    onLeft(tree: tree.ITree, event: IKeyboardEvent): boolean;
    onDown(tree: tree.ITree, event: IKeyboardEvent): boolean;
    onPageDown(tree: tree.ITree, event: IKeyboardEvent): boolean;
    onRight(tree: tree.ITree, event: IKeyboardEvent): boolean;
    private _fakeFocus(tree, event);
}
export declare class Renderer extends LegacyRenderer {
    private _contextService;
    constructor(contextService: IWorkspaceContextService);
    getHeight(tree: tree.ITree, element: any): number;
    protected render(tree: tree.ITree, element: FileReferences | OneReference, container: HTMLElement): tree.IElementCallback;
}
export interface LayoutData {
    ratio: number;
    heightInLines: number;
}
export interface SelectionEvent {
    kind: 'goto' | 'show' | 'side' | 'open';
    source: 'editor' | 'tree' | 'title';
    element: OneReference;
}
/**
 * ZoneWidget that is shown inside the editor
 */
export declare class ReferenceWidget extends PeekViewWidget {
    layoutData: LayoutData;
    private _textModelResolverService;
    private _contextService;
    private _instantiationService;
    private _model;
    private _decorationsManager;
    /**
     * Map of FileRefereces by id.
     */
    private _expandedElements;
    private _revealedReference;
    private _disposeOnNewModel;
    private _onDidSelectReference;
    private _tree;
    private _treeContainer;
    private _sash;
    private _preview;
    private _previewModelReference;
    private _previewNotAvailableMessage;
    private _previewContainer;
    private _messageContainer;
    constructor(editor: ICodeEditor, layoutData: LayoutData, _textModelResolverService: ITextModelResolverService, _contextService: IWorkspaceContextService, _instantiationService: IInstantiationService);
    dispose(): void;
    readonly onDidSelectReference: Event<SelectionEvent>;
    show(where: editorCommon.IRange): void;
    focus(): void;
    protected _onTitleClick(e: MouseEvent): void;
    protected _fillBody(containerElement: HTMLElement): void;
    protected _doLayoutBody(heightInPixel: number, widthInPixel: number): void;
    _onWidth(widthInPixel: number): void;
    isTreeInDefaultState(): boolean;
    setSelection(selection: OneReference): TPromise<any>;
    setModel(newModel: ReferencesModel, incrementalUpdate?: boolean): TPromise<any>;
    private _onNewModel();
    private _getFocusedReference();
    private _revealReference(reference);
}
