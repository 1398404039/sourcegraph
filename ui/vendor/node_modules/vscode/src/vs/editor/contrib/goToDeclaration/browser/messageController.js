/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
require("./messageController.css");
var event_1 = require("vs/base/common/event");
var async_1 = require("vs/base/common/async");
var lifecycle_1 = require("vs/base/common/lifecycle");
var range_1 = require("vs/editor/common/core/range");
var editorCommonExtensions_1 = require("vs/editor/common/editorCommonExtensions");
var editorBrowser_1 = require("vs/editor/browser/editorBrowser");
var contextkey_1 = require("vs/platform/contextkey/common/contextkey");
var MessageController = MessageController_1 = (function () {
    function MessageController(editor, contextKeyService) {
        this._messageListeners = [];
        this._editor = editor;
        this._visible = MessageController_1.CONTEXT_SNIPPET_MODE.bindTo(contextKeyService);
    }
    MessageController.get = function (editor) {
        return editor.getContribution(MessageController_1._id);
    };
    MessageController.prototype.getId = function () {
        return MessageController_1._id;
    };
    MessageController.prototype.dispose = function () {
        this._visible.reset();
    };
    MessageController.prototype.showMessage = function (message, position) {
        var _this = this;
        this._visible.set(true);
        lifecycle_1.dispose(this._messageWidget);
        this._messageListeners = lifecycle_1.dispose(this._messageListeners);
        this._messageWidget = new MessageWidget(this._editor, position, message);
        // close on blur, cursor, model change, dispose
        this._messageListeners.push(event_1.any(this._editor.onDidBlurEditorText, this._editor.onDidChangeCursorPosition, this._editor.onDidDispose, this._editor.onDidChangeModel)(this.closeMessage, this));
        // close after 3s
        this._messageListeners.push(async_1.setDisposableTimeout(function () { return _this.closeMessage(); }, 3000));
        // close on mouse move
        var bounds;
        this._messageListeners.push(this._editor.onMouseMove(function (e) {
            // outside the text area
            if (!e.target.position) {
                return;
            }
            if (!bounds) {
                // define bounding box around position and first mouse occurance
                bounds = new range_1.Range(position.lineNumber - 3, 1, e.target.position.lineNumber + 3, 1);
            }
            else if (!bounds.containsPosition(e.target.position)) {
                // check if position is still in bounds
                _this.closeMessage();
            }
        }));
    };
    MessageController.prototype.closeMessage = function () {
        this._visible.reset();
        this._messageListeners = lifecycle_1.dispose(this._messageListeners);
        this._messageListeners.push(MessageWidget.fadeOut(this._messageWidget));
    };
    return MessageController;
}());
MessageController._id = 'editor.contrib.messageController';
MessageController.CONTEXT_SNIPPET_MODE = new contextkey_1.RawContextKey('messageVisible', false);
MessageController = MessageController_1 = __decorate([
    editorCommonExtensions_1.commonEditorContribution,
    __param(1, contextkey_1.IContextKeyService)
], MessageController);
exports.MessageController = MessageController;
var MessageCommand = editorCommonExtensions_1.EditorCommand.bindToContribution(MessageController.get);
editorCommonExtensions_1.CommonEditorRegistry.registerEditorCommand(new MessageCommand({
    id: 'leaveEditorMessage',
    precondition: MessageController.CONTEXT_SNIPPET_MODE,
    handler: function (c) { return c.closeMessage(); },
    kbOpts: {
        weight: editorCommonExtensions_1.CommonEditorRegistry.commandWeight(30),
        primary: 9 /* Escape */
    }
}));
var MessageWidget = (function () {
    function MessageWidget(editor, _a, text) {
        var lineNumber = _a.lineNumber, column = _a.column;
        // Editor.IContentWidget.allowEditorOverflow
        this.allowEditorOverflow = true;
        this.suppressMouseDown = false;
        this._editor = editor;
        this._editor.revealLinesInCenterIfOutsideViewport(lineNumber, lineNumber);
        this._position = { lineNumber: lineNumber, column: 1 };
        this._domNode = document.createElement('div');
        this._domNode.style.paddingLeft = editor.getOffsetForColumn(lineNumber, column) - 6 + "px";
        this._domNode.classList.add('monaco-editor-overlaymessage');
        var message = document.createElement('div');
        message.classList.add('message');
        message.textContent = text;
        this._domNode.appendChild(message);
        var anchor = document.createElement('div');
        anchor.classList.add('anchor');
        this._domNode.appendChild(anchor);
        this._editor.addContentWidget(this);
        this._domNode.classList.add('fadeIn');
    }
    MessageWidget.fadeOut = function (messageWidget) {
        var handle;
        var dispose = function () {
            messageWidget.dispose();
            clearTimeout(handle);
            messageWidget.getDomNode().removeEventListener('animationend', dispose);
        };
        handle = setTimeout(dispose, 110);
        messageWidget.getDomNode().addEventListener('animationend', dispose);
        messageWidget.getDomNode().classList.add('fadeOut');
        return { dispose: dispose };
    };
    MessageWidget.prototype.dispose = function () {
        this._editor.removeContentWidget(this);
    };
    MessageWidget.prototype.getId = function () {
        return 'messageoverlay';
    };
    MessageWidget.prototype.getDomNode = function () {
        return this._domNode;
    };
    MessageWidget.prototype.getPosition = function () {
        return { position: this._position, preference: [editorBrowser_1.ContentWidgetPositionPreference.ABOVE] };
    };
    return MessageWidget;
}());
var MessageController_1;
