/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var nls = require("vs/nls");
var platform_1 = require("vs/platform/platform");
var editorCommon_1 = require("vs/editor/common/editorCommon");
var editorCommonExtensions_1 = require("vs/editor/common/editorCommonExtensions");
var snippetController_1 = require("vs/editor/contrib/snippet/common/snippetController");
var quickOpenService_1 = require("vs/workbench/services/quickopen/common/quickOpenService");
var snippetsRegistry_1 = require("vs/editor/common/modes/snippetsRegistry");
var ShowSnippetsActions = (function (_super) {
    __extends(ShowSnippetsActions, _super);
    function ShowSnippetsActions() {
        return _super.call(this, {
            id: 'editor.action.showSnippets',
            label: nls.localize('snippet.suggestions.label', "Insert Snippet"),
            alias: 'Insert Snippet',
            precondition: editorCommon_1.EditorContextKeys.Writable
        }) || this;
    }
    ShowSnippetsActions.prototype.run = function (accessor, editor) {
        var quickOpenService = accessor.get(quickOpenService_1.IQuickOpenService);
        if (!editor.getModel()) {
            return;
        }
        var _a = editor.getPosition(), lineNumber = _a.lineNumber, column = _a.column;
        var modeId = editor.getModel().getModeIdAtPosition(lineNumber, column);
        var picks = [];
        platform_1.Registry.as(snippetsRegistry_1.Extensions.Snippets).visitSnippets(modeId, function (snippet) {
            picks.push({
                label: snippet.prefix,
                detail: snippet.description,
                snippet: snippet
            });
            return true;
        });
        return quickOpenService.pick(picks).then(function (pick) {
            if (pick) {
                snippetController_1.SnippetController.get(editor).insertSnippet(pick.snippet.codeSnippet, 0, 0);
            }
        });
    };
    return ShowSnippetsActions;
}(editorCommonExtensions_1.EditorAction));
ShowSnippetsActions = __decorate([
    editorCommonExtensions_1.editorAction
], ShowSnippetsActions);
