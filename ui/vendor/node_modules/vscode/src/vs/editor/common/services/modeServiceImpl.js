/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var nls = require("vs/nls");
var errors_1 = require("vs/base/common/errors");
var event_1 = require("vs/base/common/event");
var winjs_base_1 = require("vs/base/common/winjs.base");
var extensionsRegistry_1 = require("vs/platform/extensions/common/extensionsRegistry");
var abstractMode_1 = require("vs/editor/common/modes/abstractMode");
var languagesRegistry_1 = require("vs/editor/common/services/languagesRegistry");
exports.languagesExtPoint = extensionsRegistry_1.ExtensionsRegistry.registerExtensionPoint('languages', [], {
    description: nls.localize('vscode.extension.contributes.languages', 'Contributes language declarations.'),
    type: 'array',
    items: {
        type: 'object',
        defaultSnippets: [{ body: { id: '${1:languageId}', aliases: ['${2:label}'], extensions: ['${3:extension}'], configuration: './language-configuration.json' } }],
        properties: {
            id: {
                description: nls.localize('vscode.extension.contributes.languages.id', 'ID of the language.'),
                type: 'string'
            },
            aliases: {
                description: nls.localize('vscode.extension.contributes.languages.aliases', 'Name aliases for the language.'),
                type: 'array',
                items: {
                    type: 'string'
                }
            },
            extensions: {
                description: nls.localize('vscode.extension.contributes.languages.extensions', 'File extensions associated to the language.'),
                default: ['.foo'],
                type: 'array',
                items: {
                    type: 'string'
                }
            },
            filenames: {
                description: nls.localize('vscode.extension.contributes.languages.filenames', 'File names associated to the language.'),
                type: 'array',
                items: {
                    type: 'string'
                }
            },
            filenamePatterns: {
                description: nls.localize('vscode.extension.contributes.languages.filenamePatterns', 'File name glob patterns associated to the language.'),
                type: 'array',
                items: {
                    type: 'string'
                }
            },
            mimetypes: {
                description: nls.localize('vscode.extension.contributes.languages.mimetypes', 'Mime types associated to the language.'),
                type: 'array',
                items: {
                    type: 'string'
                }
            },
            firstLine: {
                description: nls.localize('vscode.extension.contributes.languages.firstLine', 'A regular expression matching the first line of a file of the language.'),
                type: 'string'
            },
            configuration: {
                description: nls.localize('vscode.extension.contributes.languages.configuration', 'A relative path to a file containing configuration options for the language.'),
                type: 'string',
                default: './language-configuration.json'
            }
        }
    }
});
var ModeServiceImpl = (function () {
    function ModeServiceImpl() {
        var _this = this;
        this._onDidAddModes = new event_1.Emitter();
        this.onDidAddModes = this._onDidAddModes.event;
        this._onDidCreateMode = new event_1.Emitter();
        this.onDidCreateMode = this._onDidCreateMode.event;
        this._instantiatedModes = {};
        this._registry = new languagesRegistry_1.LanguagesRegistry();
        this._registry.onDidAddModes(function (modes) { return _this._onDidAddModes.fire(modes); });
    }
    ModeServiceImpl.prototype._onReady = function () {
        return winjs_base_1.TPromise.as(true);
    };
    ModeServiceImpl.prototype.isRegisteredMode = function (mimetypeOrModeId) {
        return this._registry.isRegisteredMode(mimetypeOrModeId);
    };
    ModeServiceImpl.prototype.getRegisteredModes = function () {
        return this._registry.getRegisteredModes();
    };
    ModeServiceImpl.prototype.getRegisteredLanguageNames = function () {
        return this._registry.getRegisteredLanguageNames();
    };
    ModeServiceImpl.prototype.getExtensions = function (alias) {
        return this._registry.getExtensions(alias);
    };
    ModeServiceImpl.prototype.getFilenames = function (alias) {
        return this._registry.getFilenames(alias);
    };
    ModeServiceImpl.prototype.getMimeForMode = function (modeId) {
        return this._registry.getMimeForMode(modeId);
    };
    ModeServiceImpl.prototype.getLanguageName = function (modeId) {
        return this._registry.getLanguageName(modeId);
    };
    ModeServiceImpl.prototype.getModeIdForLanguageName = function (alias) {
        return this._registry.getModeIdForLanguageNameLowercase(alias);
    };
    ModeServiceImpl.prototype.getModeIdByFilenameOrFirstLine = function (filename, firstLine) {
        var modeIds = this._registry.getModeIdsFromFilenameOrFirstLine(filename, firstLine);
        if (modeIds.length > 0) {
            return modeIds[0];
        }
        return null;
    };
    ModeServiceImpl.prototype.getModeId = function (commaSeparatedMimetypesOrCommaSeparatedIds) {
        var modeIds = this._registry.extractModeIds(commaSeparatedMimetypesOrCommaSeparatedIds);
        if (modeIds.length > 0) {
            return modeIds[0];
        }
        return null;
    };
    ModeServiceImpl.prototype.getLanguageIdentifier = function (modeId) {
        return this._registry.getLanguageIdentifier(modeId);
    };
    ModeServiceImpl.prototype.getConfigurationFiles = function (modeId) {
        return this._registry.getConfigurationFiles(modeId);
    };
    // --- instantiation
    ModeServiceImpl.prototype.lookup = function (commaSeparatedMimetypesOrCommaSeparatedIds) {
        var r = [];
        var modeIds = this._registry.extractModeIds(commaSeparatedMimetypesOrCommaSeparatedIds);
        for (var i = 0; i < modeIds.length; i++) {
            var modeId = modeIds[i];
            r.push({
                modeId: modeId,
                isInstantiated: this._instantiatedModes.hasOwnProperty(modeId)
            });
        }
        return r;
    };
    ModeServiceImpl.prototype.getMode = function (commaSeparatedMimetypesOrCommaSeparatedIds) {
        var modeIds = this._registry.extractModeIds(commaSeparatedMimetypesOrCommaSeparatedIds);
        var isPlainText = false;
        for (var i = 0; i < modeIds.length; i++) {
            if (this._instantiatedModes.hasOwnProperty(modeIds[i])) {
                return this._instantiatedModes[modeIds[i]];
            }
            isPlainText = isPlainText || (modeIds[i] === 'plaintext');
        }
        if (isPlainText) {
            // Try to do it synchronously
            var r = null;
            this.getOrCreateMode(commaSeparatedMimetypesOrCommaSeparatedIds).then(function (mode) {
                r = mode;
            }).done(null, errors_1.onUnexpectedError);
            return r;
        }
        return undefined;
    };
    ModeServiceImpl.prototype.getOrCreateMode = function (commaSeparatedMimetypesOrCommaSeparatedIds) {
        var _this = this;
        return this._onReady().then(function () {
            var modeId = _this.getModeId(commaSeparatedMimetypesOrCommaSeparatedIds);
            // Fall back to plain text if no mode was found
            return _this._getOrCreateMode(modeId || 'plaintext');
        });
    };
    ModeServiceImpl.prototype.getOrCreateModeByLanguageName = function (languageName) {
        var _this = this;
        return this._onReady().then(function () {
            var modeId = _this._getModeIdByLanguageName(languageName);
            // Fall back to plain text if no mode was found
            return _this._getOrCreateMode(modeId || 'plaintext');
        });
    };
    ModeServiceImpl.prototype._getModeIdByLanguageName = function (languageName) {
        var modeIds = this._registry.getModeIdsFromLanguageName(languageName);
        if (modeIds.length > 0) {
            return modeIds[0];
        }
        return null;
    };
    ModeServiceImpl.prototype.getOrCreateModeByFilenameOrFirstLine = function (filename, firstLine) {
        var _this = this;
        return this._onReady().then(function () {
            var modeId = _this.getModeIdByFilenameOrFirstLine(filename, firstLine);
            // Fall back to plain text if no mode was found
            return _this._getOrCreateMode(modeId || 'plaintext');
        });
    };
    ModeServiceImpl.prototype._getOrCreateMode = function (modeId) {
        if (!this._instantiatedModes.hasOwnProperty(modeId)) {
            var languageIdentifier = this.getLanguageIdentifier(modeId);
            this._instantiatedModes[modeId] = new abstractMode_1.FrankensteinMode(languageIdentifier);
            this._onDidCreateMode.fire(this._instantiatedModes[modeId]);
        }
        return this._instantiatedModes[modeId];
    };
    return ModeServiceImpl;
}());
exports.ModeServiceImpl = ModeServiceImpl;
