/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var cursorCommon_1 = require("vs/editor/common/controller/cursorCommon");
var position_1 = require("vs/editor/common/core/position");
var characterClassifier_1 = require("vs/editor/common/core/characterClassifier");
var cursorMoveOperations_1 = require("vs/editor/common/controller/cursorMoveOperations");
var editorCommon_1 = require("vs/editor/common/editorCommon");
var cursorDeleteOperations_1 = require("vs/editor/common/controller/cursorDeleteOperations");
var strings = require("vs/base/common/strings");
var range_1 = require("vs/editor/common/core/range");
var replaceCommand_1 = require("vs/editor/common/commands/replaceCommand");
var WordType;
(function (WordType) {
    WordType[WordType["None"] = 0] = "None";
    WordType[WordType["Regular"] = 1] = "Regular";
    WordType[WordType["Separator"] = 2] = "Separator";
})(WordType = exports.WordType || (exports.WordType = {}));
var CharacterClass;
(function (CharacterClass) {
    CharacterClass[CharacterClass["Regular"] = 0] = "Regular";
    CharacterClass[CharacterClass["Whitespace"] = 1] = "Whitespace";
    CharacterClass[CharacterClass["WordSeparator"] = 2] = "WordSeparator";
})(CharacterClass || (CharacterClass = {}));
var WordNavigationType;
(function (WordNavigationType) {
    WordNavigationType[WordNavigationType["WordStart"] = 0] = "WordStart";
    WordNavigationType[WordNavigationType["WordEnd"] = 1] = "WordEnd";
})(WordNavigationType = exports.WordNavigationType || (exports.WordNavigationType = {}));
var WordCharacterClassifier = (function (_super) {
    __extends(WordCharacterClassifier, _super);
    function WordCharacterClassifier(wordSeparators) {
        var _this = _super.call(this, 0 /* Regular */) || this;
        for (var i = 0, len = wordSeparators.length; i < len; i++) {
            _this.set(wordSeparators.charCodeAt(i), 2 /* WordSeparator */);
        }
        _this.set(32 /* Space */, 1 /* Whitespace */);
        _this.set(9 /* Tab */, 1 /* Whitespace */);
        return _this;
    }
    return WordCharacterClassifier;
}(characterClassifier_1.CharacterClassifier));
function once(computeFn) {
    var cache = {}; // TODO@Alex unbounded cache
    return function (input) {
        if (!cache.hasOwnProperty(input)) {
            cache[input] = computeFn(input);
        }
        return cache[input];
    };
}
var getMapForWordSeparators = once(function (input) { return new WordCharacterClassifier(input); });
var WordOperations = (function () {
    function WordOperations() {
    }
    WordOperations._createWord = function (lineContent, wordType, start, end) {
        // console.log('WORD ==> ' + start + ' => ' + end + ':::: <<<' + lineContent.substring(start, end) + '>>>');
        return { start: start, end: end, wordType: wordType };
    };
    WordOperations.findPreviousWordOnLine = function (config, model, position) {
        var wordSeparators = getMapForWordSeparators(config.wordSeparators);
        var lineContent = model.getLineContent(position.lineNumber);
        return this._findPreviousWordOnLine(lineContent, wordSeparators, position);
    };
    WordOperations._findPreviousWordOnLine = function (lineContent, wordSeparators, position) {
        var wordType = 0 /* None */;
        for (var chIndex = position.column - 2; chIndex >= 0; chIndex--) {
            var chCode = lineContent.charCodeAt(chIndex);
            var chClass = wordSeparators.get(chCode);
            if (chClass === 0 /* Regular */) {
                if (wordType === 2 /* Separator */) {
                    return this._createWord(lineContent, wordType, chIndex + 1, this._findEndOfWord(lineContent, wordSeparators, wordType, chIndex + 1));
                }
                wordType = 1 /* Regular */;
            }
            else if (chClass === 2 /* WordSeparator */) {
                if (wordType === 1 /* Regular */) {
                    return this._createWord(lineContent, wordType, chIndex + 1, this._findEndOfWord(lineContent, wordSeparators, wordType, chIndex + 1));
                }
                wordType = 2 /* Separator */;
            }
            else if (chClass === 1 /* Whitespace */) {
                if (wordType !== 0 /* None */) {
                    return this._createWord(lineContent, wordType, chIndex + 1, this._findEndOfWord(lineContent, wordSeparators, wordType, chIndex + 1));
                }
            }
        }
        if (wordType !== 0 /* None */) {
            return this._createWord(lineContent, wordType, 0, this._findEndOfWord(lineContent, wordSeparators, wordType, 0));
        }
        return null;
    };
    WordOperations._findEndOfWord = function (lineContent, wordSeparators, wordType, startIndex) {
        var len = lineContent.length;
        for (var chIndex = startIndex; chIndex < len; chIndex++) {
            var chCode = lineContent.charCodeAt(chIndex);
            var chClass = wordSeparators.get(chCode);
            if (chClass === 1 /* Whitespace */) {
                return chIndex;
            }
            if (wordType === 1 /* Regular */ && chClass === 2 /* WordSeparator */) {
                return chIndex;
            }
            if (wordType === 2 /* Separator */ && chClass === 0 /* Regular */) {
                return chIndex;
            }
        }
        return len;
    };
    WordOperations.findNextWordOnLine = function (config, model, position) {
        var wordSeparators = getMapForWordSeparators(config.wordSeparators);
        var lineContent = model.getLineContent(position.lineNumber);
        return this._findNextWordOnLine(lineContent, wordSeparators, position);
    };
    WordOperations._findNextWordOnLine = function (lineContent, wordSeparators, position) {
        var wordType = 0 /* None */;
        var len = lineContent.length;
        for (var chIndex = position.column - 1; chIndex < len; chIndex++) {
            var chCode = lineContent.charCodeAt(chIndex);
            var chClass = wordSeparators.get(chCode);
            if (chClass === 0 /* Regular */) {
                if (wordType === 2 /* Separator */) {
                    return this._createWord(lineContent, wordType, this._findStartOfWord(lineContent, wordSeparators, wordType, chIndex - 1), chIndex);
                }
                wordType = 1 /* Regular */;
            }
            else if (chClass === 2 /* WordSeparator */) {
                if (wordType === 1 /* Regular */) {
                    return this._createWord(lineContent, wordType, this._findStartOfWord(lineContent, wordSeparators, wordType, chIndex - 1), chIndex);
                }
                wordType = 2 /* Separator */;
            }
            else if (chClass === 1 /* Whitespace */) {
                if (wordType !== 0 /* None */) {
                    return this._createWord(lineContent, wordType, this._findStartOfWord(lineContent, wordSeparators, wordType, chIndex - 1), chIndex);
                }
            }
        }
        if (wordType !== 0 /* None */) {
            return this._createWord(lineContent, wordType, this._findStartOfWord(lineContent, wordSeparators, wordType, len - 1), len);
        }
        return null;
    };
    WordOperations._findStartOfWord = function (lineContent, wordSeparators, wordType, startIndex) {
        for (var chIndex = startIndex; chIndex >= 0; chIndex--) {
            var chCode = lineContent.charCodeAt(chIndex);
            var chClass = wordSeparators.get(chCode);
            if (chClass === 1 /* Whitespace */) {
                return chIndex + 1;
            }
            if (wordType === 1 /* Regular */ && chClass === 2 /* WordSeparator */) {
                return chIndex + 1;
            }
            if (wordType === 2 /* Separator */ && chClass === 0 /* Regular */) {
                return chIndex + 1;
            }
        }
        return 0;
    };
    WordOperations.moveWordLeft = function (config, model, cursor, inSelectionMode, wordNavigationType) {
        var position = cursor.position;
        var lineNumber = position.lineNumber;
        var column = position.column;
        if (column === 1) {
            if (lineNumber > 1) {
                lineNumber = lineNumber - 1;
                column = model.getLineMaxColumn(lineNumber);
            }
        }
        var prevWordOnLine = WordOperations.findPreviousWordOnLine(config, model, new position_1.Position(lineNumber, column));
        if (wordNavigationType === 0 /* WordStart */) {
            if (prevWordOnLine) {
                column = prevWordOnLine.start + 1;
            }
            else {
                column = 1;
            }
        }
        else {
            if (prevWordOnLine && column <= prevWordOnLine.end + 1) {
                prevWordOnLine = WordOperations.findPreviousWordOnLine(config, model, new position_1.Position(lineNumber, prevWordOnLine.start + 1));
            }
            if (prevWordOnLine) {
                column = prevWordOnLine.end + 1;
            }
            else {
                column = 1;
            }
        }
        return cursorMoveOperations_1.SingleMoveOperationResult.fromMove(cursor, inSelectionMode, lineNumber, column, 0, true, editorCommon_1.CursorChangeReason.Explicit);
    };
    WordOperations.moveWordRight = function (config, model, cursor, inSelectionMode, wordNavigationType) {
        var position = cursor.position;
        var lineNumber = position.lineNumber;
        var column = position.column;
        if (column === model.getLineMaxColumn(lineNumber)) {
            if (lineNumber < model.getLineCount()) {
                lineNumber = lineNumber + 1;
                column = 1;
            }
        }
        var nextWordOnLine = WordOperations.findNextWordOnLine(config, model, new position_1.Position(lineNumber, column));
        if (wordNavigationType === 1 /* WordEnd */) {
            if (nextWordOnLine) {
                column = nextWordOnLine.end + 1;
            }
            else {
                column = model.getLineMaxColumn(lineNumber);
            }
        }
        else {
            if (nextWordOnLine && column >= nextWordOnLine.start + 1) {
                nextWordOnLine = WordOperations.findNextWordOnLine(config, model, new position_1.Position(lineNumber, nextWordOnLine.end + 1));
            }
            if (nextWordOnLine) {
                column = nextWordOnLine.start + 1;
            }
            else {
                column = model.getLineMaxColumn(lineNumber);
            }
        }
        return cursorMoveOperations_1.SingleMoveOperationResult.fromMove(cursor, inSelectionMode, lineNumber, column, 0, true, editorCommon_1.CursorChangeReason.Explicit);
    };
    WordOperations._deleteWordLeftWhitespace = function (config, model, cursor) {
        var position = cursor.position;
        var lineContent = model.getLineContent(position.lineNumber);
        var startIndex = position.column - 2;
        var lastNonWhitespace = strings.lastNonWhitespaceIndex(lineContent, startIndex);
        if (lastNonWhitespace + 1 < startIndex) {
            var deleteRange = new range_1.Range(position.lineNumber, lastNonWhitespace + 2, position.lineNumber, position.column);
            return new cursorCommon_1.EditOperationResult(new replaceCommand_1.ReplaceCommand(deleteRange, ''), {
                shouldPushStackElementBefore: false,
                shouldPushStackElementAfter: false
            });
        }
        return null;
    };
    WordOperations.deleteWordLeft = function (config, model, cursor, whitespaceHeuristics, wordNavigationType) {
        var r = cursorDeleteOperations_1.DeleteOperations.autoClosingPairDelete(config, model, cursor);
        if (r) {
            // This was a case for an auto-closing pair delete
            return r;
        }
        var selection = cursor.selection;
        if (selection.isEmpty()) {
            var position = cursor.position;
            var lineNumber = position.lineNumber;
            var column = position.column;
            if (lineNumber === 1 && column === 1) {
                // Ignore deleting at beginning of file
                return null;
            }
            if (whitespaceHeuristics) {
                var r_1 = this._deleteWordLeftWhitespace(config, model, cursor);
                if (r_1) {
                    return r_1;
                }
            }
            var prevWordOnLine = WordOperations.findPreviousWordOnLine(config, model, position);
            if (wordNavigationType === 0 /* WordStart */) {
                if (prevWordOnLine) {
                    column = prevWordOnLine.start + 1;
                }
                else {
                    column = 1;
                }
            }
            else {
                if (prevWordOnLine && column <= prevWordOnLine.end + 1) {
                    prevWordOnLine = WordOperations.findPreviousWordOnLine(config, model, new position_1.Position(lineNumber, prevWordOnLine.start + 1));
                }
                if (prevWordOnLine) {
                    column = prevWordOnLine.end + 1;
                }
                else {
                    column = 1;
                }
            }
            var deleteSelection = new range_1.Range(lineNumber, column, lineNumber, position.column);
            if (!deleteSelection.isEmpty()) {
                return new cursorCommon_1.EditOperationResult(new replaceCommand_1.ReplaceCommand(deleteSelection, ''), {
                    shouldPushStackElementBefore: false,
                    shouldPushStackElementAfter: false
                });
            }
        }
        return cursorDeleteOperations_1.DeleteOperations.deleteLeft(config, model, cursor);
    };
    WordOperations._findFirstNonWhitespaceChar = function (str, startIndex) {
        var len = str.length;
        for (var chIndex = startIndex; chIndex < len; chIndex++) {
            var ch = str.charAt(chIndex);
            if (ch !== ' ' && ch !== '\t') {
                return chIndex;
            }
        }
        return len;
    };
    WordOperations._deleteWordRightWhitespace = function (config, model, cursor) {
        var position = cursor.position;
        var lineContent = model.getLineContent(position.lineNumber);
        var startIndex = position.column - 1;
        var firstNonWhitespace = this._findFirstNonWhitespaceChar(lineContent, startIndex);
        if (startIndex + 1 < firstNonWhitespace) {
            // bingo
            var deleteRange = new range_1.Range(position.lineNumber, position.column, position.lineNumber, firstNonWhitespace + 1);
            return new cursorCommon_1.EditOperationResult(new replaceCommand_1.ReplaceCommand(deleteRange, ''), {
                shouldPushStackElementBefore: false,
                shouldPushStackElementAfter: false
            });
        }
        return null;
    };
    WordOperations.deleteWordRight = function (config, model, cursor, whitespaceHeuristics, wordNavigationType) {
        var selection = cursor.selection;
        if (selection.isEmpty()) {
            var position = cursor.position;
            var lineNumber = position.lineNumber;
            var column = position.column;
            var lineCount = model.getLineCount();
            var maxColumn = model.getLineMaxColumn(lineNumber);
            if (lineNumber === lineCount && column === maxColumn) {
                // Ignore deleting at end of file
                return null;
            }
            if (whitespaceHeuristics) {
                var r = this._deleteWordRightWhitespace(config, model, cursor);
                if (r) {
                    return r;
                }
            }
            var nextWordOnLine = WordOperations.findNextWordOnLine(config, model, position);
            if (wordNavigationType === 1 /* WordEnd */) {
                if (nextWordOnLine) {
                    column = nextWordOnLine.end + 1;
                }
                else {
                    if (column < maxColumn || lineNumber === lineCount) {
                        column = maxColumn;
                    }
                    else {
                        lineNumber++;
                        nextWordOnLine = WordOperations.findNextWordOnLine(config, model, new position_1.Position(lineNumber, 1));
                        if (nextWordOnLine) {
                            column = nextWordOnLine.start + 1;
                        }
                        else {
                            column = model.getLineMaxColumn(lineNumber);
                        }
                    }
                }
            }
            else {
                if (nextWordOnLine && column >= nextWordOnLine.start + 1) {
                    nextWordOnLine = WordOperations.findNextWordOnLine(config, model, new position_1.Position(lineNumber, nextWordOnLine.end + 1));
                }
                if (nextWordOnLine) {
                    column = nextWordOnLine.start + 1;
                }
                else {
                    if (column < maxColumn || lineNumber === lineCount) {
                        column = maxColumn;
                    }
                    else {
                        lineNumber++;
                        nextWordOnLine = WordOperations.findNextWordOnLine(config, model, new position_1.Position(lineNumber, 1));
                        if (nextWordOnLine) {
                            column = nextWordOnLine.start + 1;
                        }
                        else {
                            column = model.getLineMaxColumn(lineNumber);
                        }
                    }
                }
            }
            var deleteSelection = new range_1.Range(lineNumber, column, position.lineNumber, position.column);
            if (!deleteSelection.isEmpty()) {
                return new cursorCommon_1.EditOperationResult(new replaceCommand_1.ReplaceCommand(deleteSelection, ''), {
                    shouldPushStackElementBefore: false,
                    shouldPushStackElementAfter: false
                });
            }
        }
        // fall back to normal deleteRight behavior
        return cursorDeleteOperations_1.DeleteOperations.deleteRight(config, model, cursor);
    };
    WordOperations.word = function (config, model, cursor, inSelectionMode, position) {
        var prevWord = WordOperations.findPreviousWordOnLine(config, model, position);
        var isInPrevWord = (prevWord && prevWord.wordType === 1 /* Regular */ && prevWord.start < position.column - 1 && position.column - 1 <= prevWord.end);
        var nextWord = WordOperations.findNextWordOnLine(config, model, position);
        var isInNextWord = (nextWord && nextWord.wordType === 1 /* Regular */ && nextWord.start < position.column - 1 && position.column - 1 <= nextWord.end);
        if (!inSelectionMode || !cursor.hasSelection()) {
            var startColumn_1;
            var endColumn_1;
            if (isInPrevWord) {
                startColumn_1 = prevWord.start + 1;
                endColumn_1 = prevWord.end + 1;
            }
            else if (isInNextWord) {
                startColumn_1 = nextWord.start + 1;
                endColumn_1 = nextWord.end + 1;
            }
            else {
                if (prevWord) {
                    startColumn_1 = prevWord.end + 1;
                }
                else {
                    startColumn_1 = 1;
                }
                if (nextWord) {
                    endColumn_1 = nextWord.start + 1;
                }
                else {
                    endColumn_1 = model.getLineMaxColumn(position.lineNumber);
                }
            }
            return new cursorMoveOperations_1.SingleMoveOperationResult(new cursorCommon_1.SingleCursorState(new range_1.Range(position.lineNumber, startColumn_1, position.lineNumber, endColumn_1), 0, new position_1.Position(position.lineNumber, endColumn_1), 0), false, editorCommon_1.CursorChangeReason.Explicit);
        }
        var startColumn;
        var endColumn;
        if (isInPrevWord) {
            startColumn = prevWord.start + 1;
            endColumn = prevWord.end + 1;
        }
        else if (isInNextWord) {
            startColumn = nextWord.start + 1;
            endColumn = nextWord.end + 1;
        }
        else {
            startColumn = position.column;
            endColumn = position.column;
        }
        var lineNumber = position.lineNumber;
        var column;
        if (position.isBeforeOrEqual(cursor.selectionStart.getStartPosition())) {
            column = startColumn;
            var possiblePosition = new position_1.Position(lineNumber, column);
            if (cursor.selectionStart.containsPosition(possiblePosition)) {
                column = cursor.selectionStart.endColumn;
            }
        }
        else {
            column = endColumn;
            var possiblePosition = new position_1.Position(lineNumber, column);
            if (cursor.selectionStart.containsPosition(possiblePosition)) {
                column = cursor.selectionStart.startColumn;
            }
        }
        return cursorMoveOperations_1.SingleMoveOperationResult.fromMove(cursor, cursor.hasSelection(), lineNumber, column, 0, false, editorCommon_1.CursorChangeReason.Explicit);
    };
    return WordOperations;
}());
exports.WordOperations = WordOperations;
