/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var types = require("vs/base/common/types");
var contextkey_1 = require("vs/platform/contextkey/common/contextkey");
/**
 * Describes how to indent wrapped lines.
 */
var WrappingIndent;
(function (WrappingIndent) {
    /**
     * No indentation => wrapped lines begin at column 1.
     */
    WrappingIndent[WrappingIndent["None"] = 0] = "None";
    /**
     * Same => wrapped lines get the same indentation as the parent.
     */
    WrappingIndent[WrappingIndent["Same"] = 1] = "Same";
    /**
     * Indent => wrapped lines get +1 indentation as the parent.
     */
    WrappingIndent[WrappingIndent["Indent"] = 2] = "Indent";
})(WrappingIndent = exports.WrappingIndent || (exports.WrappingIndent = {}));
var InternalEditorScrollbarOptions = (function () {
    /**
     * @internal
     */
    function InternalEditorScrollbarOptions(source) {
        this.arrowSize = source.arrowSize | 0;
        this.vertical = source.vertical | 0;
        this.horizontal = source.horizontal | 0;
        this.useShadows = Boolean(source.useShadows);
        this.verticalHasArrows = Boolean(source.verticalHasArrows);
        this.horizontalHasArrows = Boolean(source.horizontalHasArrows);
        this.handleMouseWheel = Boolean(source.handleMouseWheel);
        this.horizontalScrollbarSize = source.horizontalScrollbarSize | 0;
        this.horizontalSliderSize = source.horizontalSliderSize | 0;
        this.verticalScrollbarSize = source.verticalScrollbarSize | 0;
        this.verticalSliderSize = source.verticalSliderSize | 0;
        this.mouseWheelScrollSensitivity = Number(source.mouseWheelScrollSensitivity);
    }
    /**
     * @internal
     */
    InternalEditorScrollbarOptions.prototype.equals = function (other) {
        return (this.arrowSize === other.arrowSize
            && this.vertical === other.vertical
            && this.horizontal === other.horizontal
            && this.useShadows === other.useShadows
            && this.verticalHasArrows === other.verticalHasArrows
            && this.horizontalHasArrows === other.horizontalHasArrows
            && this.handleMouseWheel === other.handleMouseWheel
            && this.horizontalScrollbarSize === other.horizontalScrollbarSize
            && this.horizontalSliderSize === other.horizontalSliderSize
            && this.verticalScrollbarSize === other.verticalScrollbarSize
            && this.verticalSliderSize === other.verticalSliderSize
            && this.mouseWheelScrollSensitivity === other.mouseWheelScrollSensitivity);
    };
    /**
     * @internal
     */
    InternalEditorScrollbarOptions.prototype.clone = function () {
        return new InternalEditorScrollbarOptions(this);
    };
    return InternalEditorScrollbarOptions;
}());
exports.InternalEditorScrollbarOptions = InternalEditorScrollbarOptions;
var EditorWrappingInfo = (function () {
    /**
     * @internal
     */
    function EditorWrappingInfo(source) {
        this.isViewportWrapping = Boolean(source.isViewportWrapping);
        this.wrappingColumn = source.wrappingColumn | 0;
        this.wrappingIndent = source.wrappingIndent | 0;
        this.wordWrapBreakBeforeCharacters = String(source.wordWrapBreakBeforeCharacters);
        this.wordWrapBreakAfterCharacters = String(source.wordWrapBreakAfterCharacters);
        this.wordWrapBreakObtrusiveCharacters = String(source.wordWrapBreakObtrusiveCharacters);
    }
    /**
     * @internal
     */
    EditorWrappingInfo.prototype.equals = function (other) {
        return (this.isViewportWrapping === other.isViewportWrapping
            && this.wrappingColumn === other.wrappingColumn
            && this.wrappingIndent === other.wrappingIndent
            && this.wordWrapBreakBeforeCharacters === other.wordWrapBreakBeforeCharacters
            && this.wordWrapBreakAfterCharacters === other.wordWrapBreakAfterCharacters
            && this.wordWrapBreakObtrusiveCharacters === other.wordWrapBreakObtrusiveCharacters);
    };
    /**
     * @internal
     */
    EditorWrappingInfo.prototype.clone = function () {
        return new EditorWrappingInfo(this);
    };
    return EditorWrappingInfo;
}());
exports.EditorWrappingInfo = EditorWrappingInfo;
var InternalEditorViewOptions = (function () {
    /**
     * @internal
     */
    function InternalEditorViewOptions(source) {
        this.theme = String(source.theme);
        this.canUseTranslate3d = Boolean(source.canUseTranslate3d);
        this.experimentalScreenReader = Boolean(source.experimentalScreenReader);
        this.rulers = InternalEditorViewOptions._toSortedIntegerArray(source.rulers);
        this.ariaLabel = String(source.ariaLabel);
        this.renderLineNumbers = Boolean(source.renderLineNumbers);
        this.renderCustomLineNumbers = source.renderCustomLineNumbers;
        this.renderRelativeLineNumbers = Boolean(source.renderRelativeLineNumbers);
        this.selectOnLineNumbers = Boolean(source.selectOnLineNumbers);
        this.glyphMargin = Boolean(source.glyphMargin);
        this.revealHorizontalRightPadding = source.revealHorizontalRightPadding | 0;
        this.roundedSelection = Boolean(source.roundedSelection);
        this.overviewRulerLanes = source.overviewRulerLanes | 0;
        this.cursorBlinking = source.cursorBlinking | 0;
        this.mouseWheelZoom = Boolean(source.mouseWheelZoom);
        this.cursorStyle = source.cursorStyle | 0;
        this.hideCursorInOverviewRuler = Boolean(source.hideCursorInOverviewRuler);
        this.scrollBeyondLastLine = Boolean(source.scrollBeyondLastLine);
        this.editorClassName = String(source.editorClassName);
        this.stopRenderingLineAfter = source.stopRenderingLineAfter | 0;
        this.renderWhitespace = source.renderWhitespace;
        this.renderControlCharacters = Boolean(source.renderControlCharacters);
        this.renderIndentGuides = Boolean(source.renderIndentGuides);
        this.renderLineHighlight = source.renderLineHighlight;
        this.scrollbar = source.scrollbar.clone();
        this.fixedOverflowWidgets = Boolean(source.fixedOverflowWidgets);
    }
    InternalEditorViewOptions._toSortedIntegerArray = function (source) {
        if (!Array.isArray(source)) {
            return [];
        }
        var arrSource = source;
        var result = arrSource.map(function (el) {
            var r = parseInt(el, 10);
            if (isNaN(r)) {
                return 0;
            }
            return r;
        });
        result.sort();
        return result;
    };
    InternalEditorViewOptions._numberArraysEqual = function (a, b) {
        if (a.length !== b.length) {
            return false;
        }
        for (var i = 0; i < a.length; i++) {
            if (a[i] !== b[i]) {
                return false;
            }
        }
        return true;
    };
    /**
     * @internal
     */
    InternalEditorViewOptions.prototype.equals = function (other) {
        return (this.theme === other.theme
            && this.canUseTranslate3d === other.canUseTranslate3d
            && this.experimentalScreenReader === other.experimentalScreenReader
            && InternalEditorViewOptions._numberArraysEqual(this.rulers, other.rulers)
            && this.ariaLabel === other.ariaLabel
            && this.renderLineNumbers === other.renderLineNumbers
            && this.renderCustomLineNumbers === other.renderCustomLineNumbers
            && this.renderRelativeLineNumbers === other.renderRelativeLineNumbers
            && this.selectOnLineNumbers === other.selectOnLineNumbers
            && this.glyphMargin === other.glyphMargin
            && this.revealHorizontalRightPadding === other.revealHorizontalRightPadding
            && this.roundedSelection === other.roundedSelection
            && this.overviewRulerLanes === other.overviewRulerLanes
            && this.cursorBlinking === other.cursorBlinking
            && this.mouseWheelZoom === other.mouseWheelZoom
            && this.cursorStyle === other.cursorStyle
            && this.hideCursorInOverviewRuler === other.hideCursorInOverviewRuler
            && this.scrollBeyondLastLine === other.scrollBeyondLastLine
            && this.editorClassName === other.editorClassName
            && this.stopRenderingLineAfter === other.stopRenderingLineAfter
            && this.renderWhitespace === other.renderWhitespace
            && this.renderControlCharacters === other.renderControlCharacters
            && this.renderIndentGuides === other.renderIndentGuides
            && this.renderLineHighlight === other.renderLineHighlight
            && this.scrollbar.equals(other.scrollbar)
            && this.fixedOverflowWidgets === other.fixedOverflowWidgets);
    };
    /**
     * @internal
     */
    InternalEditorViewOptions.prototype.createChangeEvent = function (newOpts) {
        return {
            theme: this.theme !== newOpts.theme,
            canUseTranslate3d: this.canUseTranslate3d !== newOpts.canUseTranslate3d,
            experimentalScreenReader: this.experimentalScreenReader !== newOpts.experimentalScreenReader,
            rulers: (!InternalEditorViewOptions._numberArraysEqual(this.rulers, newOpts.rulers)),
            ariaLabel: this.ariaLabel !== newOpts.ariaLabel,
            renderLineNumbers: this.renderLineNumbers !== newOpts.renderLineNumbers,
            renderCustomLineNumbers: this.renderCustomLineNumbers !== newOpts.renderCustomLineNumbers,
            renderRelativeLineNumbers: this.renderRelativeLineNumbers !== newOpts.renderRelativeLineNumbers,
            selectOnLineNumbers: this.selectOnLineNumbers !== newOpts.selectOnLineNumbers,
            glyphMargin: this.glyphMargin !== newOpts.glyphMargin,
            revealHorizontalRightPadding: this.revealHorizontalRightPadding !== newOpts.revealHorizontalRightPadding,
            roundedSelection: this.roundedSelection !== newOpts.roundedSelection,
            overviewRulerLanes: this.overviewRulerLanes !== newOpts.overviewRulerLanes,
            cursorBlinking: this.cursorBlinking !== newOpts.cursorBlinking,
            mouseWheelZoom: this.mouseWheelZoom !== newOpts.mouseWheelZoom,
            cursorStyle: this.cursorStyle !== newOpts.cursorStyle,
            hideCursorInOverviewRuler: this.hideCursorInOverviewRuler !== newOpts.hideCursorInOverviewRuler,
            scrollBeyondLastLine: this.scrollBeyondLastLine !== newOpts.scrollBeyondLastLine,
            editorClassName: this.editorClassName !== newOpts.editorClassName,
            stopRenderingLineAfter: this.stopRenderingLineAfter !== newOpts.stopRenderingLineAfter,
            renderWhitespace: this.renderWhitespace !== newOpts.renderWhitespace,
            renderControlCharacters: this.renderControlCharacters !== newOpts.renderControlCharacters,
            renderIndentGuides: this.renderIndentGuides !== newOpts.renderIndentGuides,
            renderLineHighlight: this.renderLineHighlight !== newOpts.renderLineHighlight,
            scrollbar: (!this.scrollbar.equals(newOpts.scrollbar)),
            fixedOverflowWidgets: this.fixedOverflowWidgets !== newOpts.fixedOverflowWidgets
        };
    };
    /**
     * @internal
     */
    InternalEditorViewOptions.prototype.clone = function () {
        return new InternalEditorViewOptions(this);
    };
    return InternalEditorViewOptions;
}());
exports.InternalEditorViewOptions = InternalEditorViewOptions;
var EditorContribOptions = (function () {
    /**
     * @internal
     */
    function EditorContribOptions(source) {
        this.selectionClipboard = Boolean(source.selectionClipboard);
        this.hover = Boolean(source.hover);
        this.contextmenu = Boolean(source.contextmenu);
        this.quickSuggestions = Boolean(source.quickSuggestions);
        this.quickSuggestionsDelay = source.quickSuggestionsDelay || 0;
        this.parameterHints = Boolean(source.parameterHints);
        this.iconsInSuggestions = Boolean(source.iconsInSuggestions);
        this.formatOnType = Boolean(source.formatOnType);
        this.suggestOnTriggerCharacters = Boolean(source.suggestOnTriggerCharacters);
        this.acceptSuggestionOnEnter = Boolean(source.acceptSuggestionOnEnter);
        this.snippetSuggestions = source.snippetSuggestions;
        this.emptySelectionClipboard = source.emptySelectionClipboard;
        this.tabCompletion = source.tabCompletion;
        this.wordBasedSuggestions = source.wordBasedSuggestions;
        this.suggestFontSize = source.suggestFontSize;
        this.suggestLineHeight = source.suggestLineHeight;
        this.selectionHighlight = Boolean(source.selectionHighlight);
        this.codeLens = Boolean(source.codeLens);
        this.folding = Boolean(source.folding);
    }
    /**
     * @internal
     */
    EditorContribOptions.prototype.equals = function (other) {
        return (this.selectionClipboard === other.selectionClipboard
            && this.hover === other.hover
            && this.contextmenu === other.contextmenu
            && this.quickSuggestions === other.quickSuggestions
            && this.quickSuggestionsDelay === other.quickSuggestionsDelay
            && this.parameterHints === other.parameterHints
            && this.iconsInSuggestions === other.iconsInSuggestions
            && this.formatOnType === other.formatOnType
            && this.suggestOnTriggerCharacters === other.suggestOnTriggerCharacters
            && this.acceptSuggestionOnEnter === other.acceptSuggestionOnEnter
            && this.snippetSuggestions === other.snippetSuggestions
            && this.emptySelectionClipboard === other.emptySelectionClipboard
            && this.tabCompletion === other.tabCompletion
            && this.wordBasedSuggestions === other.wordBasedSuggestions
            && this.suggestFontSize === other.suggestFontSize
            && this.suggestLineHeight === other.suggestLineHeight
            && this.selectionHighlight === other.selectionHighlight
            && this.codeLens === other.codeLens
            && this.folding === other.folding);
    };
    /**
     * @internal
     */
    EditorContribOptions.prototype.clone = function () {
        return new EditorContribOptions(this);
    };
    return EditorContribOptions;
}());
exports.EditorContribOptions = EditorContribOptions;
/**
 * Internal configuration options (transformed or computed) for the editor.
 */
var InternalEditorOptions = (function () {
    /**
     * @internal
     */
    function InternalEditorOptions(source) {
        this.lineHeight = source.lineHeight | 0;
        this.readOnly = Boolean(source.readOnly);
        this.wordSeparators = String(source.wordSeparators);
        this.autoClosingBrackets = Boolean(source.autoClosingBrackets);
        this.useTabStops = Boolean(source.useTabStops);
        this.tabFocusMode = Boolean(source.tabFocusMode);
        this.layoutInfo = source.layoutInfo.clone();
        this.fontInfo = source.fontInfo.clone();
        this.viewInfo = source.viewInfo.clone();
        this.wrappingInfo = source.wrappingInfo.clone();
        this.contribInfo = source.contribInfo.clone();
    }
    /**
     * @internal
     */
    InternalEditorOptions.prototype.equals = function (other) {
        return (this.lineHeight === other.lineHeight
            && this.readOnly === other.readOnly
            && this.wordSeparators === other.wordSeparators
            && this.autoClosingBrackets === other.autoClosingBrackets
            && this.useTabStops === other.useTabStops
            && this.tabFocusMode === other.tabFocusMode
            && this.layoutInfo.equals(other.layoutInfo)
            && this.fontInfo.equals(other.fontInfo)
            && this.viewInfo.equals(other.viewInfo)
            && this.wrappingInfo.equals(other.wrappingInfo)
            && this.contribInfo.equals(other.contribInfo));
    };
    /**
     * @internal
     */
    InternalEditorOptions.prototype.createChangeEvent = function (newOpts) {
        return {
            lineHeight: (this.lineHeight !== newOpts.lineHeight),
            readOnly: (this.readOnly !== newOpts.readOnly),
            wordSeparators: (this.wordSeparators !== newOpts.wordSeparators),
            autoClosingBrackets: (this.autoClosingBrackets !== newOpts.autoClosingBrackets),
            useTabStops: (this.useTabStops !== newOpts.useTabStops),
            tabFocusMode: (this.tabFocusMode !== newOpts.tabFocusMode),
            layoutInfo: (!this.layoutInfo.equals(newOpts.layoutInfo)),
            fontInfo: (!this.fontInfo.equals(newOpts.fontInfo)),
            viewInfo: this.viewInfo.createChangeEvent(newOpts.viewInfo),
            wrappingInfo: (!this.wrappingInfo.equals(newOpts.wrappingInfo)),
            contribInfo: (!this.contribInfo.equals(newOpts.contribInfo)),
        };
    };
    /**
     * @internal
     */
    InternalEditorOptions.prototype.clone = function () {
        return new InternalEditorOptions(this);
    };
    return InternalEditorOptions;
}());
exports.InternalEditorOptions = InternalEditorOptions;
/**
 * Vertical Lane in the overview ruler of the editor.
 */
var OverviewRulerLane;
(function (OverviewRulerLane) {
    OverviewRulerLane[OverviewRulerLane["Left"] = 1] = "Left";
    OverviewRulerLane[OverviewRulerLane["Center"] = 2] = "Center";
    OverviewRulerLane[OverviewRulerLane["Right"] = 4] = "Right";
    OverviewRulerLane[OverviewRulerLane["Full"] = 7] = "Full";
})(OverviewRulerLane = exports.OverviewRulerLane || (exports.OverviewRulerLane = {}));
/**
 * End of line character preference.
 */
var EndOfLinePreference;
(function (EndOfLinePreference) {
    /**
     * Use the end of line character identified in the text buffer.
     */
    EndOfLinePreference[EndOfLinePreference["TextDefined"] = 0] = "TextDefined";
    /**
     * Use line feed (\n) as the end of line character.
     */
    EndOfLinePreference[EndOfLinePreference["LF"] = 1] = "LF";
    /**
     * Use carriage return and line feed (\r\n) as the end of line character.
     */
    EndOfLinePreference[EndOfLinePreference["CRLF"] = 2] = "CRLF";
})(EndOfLinePreference = exports.EndOfLinePreference || (exports.EndOfLinePreference = {}));
/**
 * The default end of line to use when instantiating models.
 */
var DefaultEndOfLine;
(function (DefaultEndOfLine) {
    /**
     * Use line feed (\n) as the end of line character.
     */
    DefaultEndOfLine[DefaultEndOfLine["LF"] = 1] = "LF";
    /**
     * Use carriage return and line feed (\r\n) as the end of line character.
     */
    DefaultEndOfLine[DefaultEndOfLine["CRLF"] = 2] = "CRLF";
})(DefaultEndOfLine = exports.DefaultEndOfLine || (exports.DefaultEndOfLine = {}));
/**
 * End of line character preference.
 */
var EndOfLineSequence;
(function (EndOfLineSequence) {
    /**
     * Use line feed (\n) as the end of line character.
     */
    EndOfLineSequence[EndOfLineSequence["LF"] = 0] = "LF";
    /**
     * Use carriage return and line feed (\r\n) as the end of line character.
     */
    EndOfLineSequence[EndOfLineSequence["CRLF"] = 1] = "CRLF";
})(EndOfLineSequence = exports.EndOfLineSequence || (exports.EndOfLineSequence = {}));
var TextModelResolvedOptions = (function () {
    /**
     * @internal
     */
    function TextModelResolvedOptions(src) {
        this.tabSize = src.tabSize | 0;
        this.insertSpaces = Boolean(src.insertSpaces);
        this.defaultEOL = src.defaultEOL | 0;
        this.trimAutoWhitespace = Boolean(src.trimAutoWhitespace);
    }
    /**
     * @internal
     */
    TextModelResolvedOptions.prototype.equals = function (other) {
        return (this.tabSize === other.tabSize
            && this.insertSpaces === other.insertSpaces
            && this.defaultEOL === other.defaultEOL
            && this.trimAutoWhitespace === other.trimAutoWhitespace);
    };
    /**
     * @internal
     */
    TextModelResolvedOptions.prototype.createChangeEvent = function (newOpts) {
        return {
            tabSize: this.tabSize !== newOpts.tabSize,
            insertSpaces: this.insertSpaces !== newOpts.insertSpaces,
            trimAutoWhitespace: this.trimAutoWhitespace !== newOpts.trimAutoWhitespace,
        };
    };
    return TextModelResolvedOptions;
}());
exports.TextModelResolvedOptions = TextModelResolvedOptions;
/**
 * Describes the behaviour of decorations when typing/editing near their edges.
 */
var TrackedRangeStickiness;
(function (TrackedRangeStickiness) {
    TrackedRangeStickiness[TrackedRangeStickiness["AlwaysGrowsWhenTypingAtEdges"] = 0] = "AlwaysGrowsWhenTypingAtEdges";
    TrackedRangeStickiness[TrackedRangeStickiness["NeverGrowsWhenTypingAtEdges"] = 1] = "NeverGrowsWhenTypingAtEdges";
    TrackedRangeStickiness[TrackedRangeStickiness["GrowsOnlyWhenTypingBefore"] = 2] = "GrowsOnlyWhenTypingBefore";
    TrackedRangeStickiness[TrackedRangeStickiness["GrowsOnlyWhenTypingAfter"] = 3] = "GrowsOnlyWhenTypingAfter";
})(TrackedRangeStickiness = exports.TrackedRangeStickiness || (exports.TrackedRangeStickiness = {}));
/**
 * Describes the reason the cursor has changed its position.
 */
var CursorChangeReason;
(function (CursorChangeReason) {
    /**
     * Unknown or not set.
     */
    CursorChangeReason[CursorChangeReason["NotSet"] = 0] = "NotSet";
    /**
     * A `model.setValue()` was called.
     */
    CursorChangeReason[CursorChangeReason["ContentFlush"] = 1] = "ContentFlush";
    /**
     * The `model` has been changed outside of this cursor and the cursor recovers its position from associated markers.
     */
    CursorChangeReason[CursorChangeReason["RecoverFromMarkers"] = 2] = "RecoverFromMarkers";
    /**
     * There was an explicit user gesture.
     */
    CursorChangeReason[CursorChangeReason["Explicit"] = 3] = "Explicit";
    /**
     * There was a Paste.
     */
    CursorChangeReason[CursorChangeReason["Paste"] = 4] = "Paste";
    /**
     * There was an Undo.
     */
    CursorChangeReason[CursorChangeReason["Undo"] = 5] = "Undo";
    /**
     * There was a Redo.
     */
    CursorChangeReason[CursorChangeReason["Redo"] = 6] = "Redo";
})(CursorChangeReason = exports.CursorChangeReason || (exports.CursorChangeReason = {}));
/**
 * @internal
 */
var VerticalRevealType;
(function (VerticalRevealType) {
    VerticalRevealType[VerticalRevealType["Simple"] = 0] = "Simple";
    VerticalRevealType[VerticalRevealType["Center"] = 1] = "Center";
    VerticalRevealType[VerticalRevealType["CenterIfOutsideViewport"] = 2] = "CenterIfOutsideViewport";
    VerticalRevealType[VerticalRevealType["Top"] = 3] = "Top";
    VerticalRevealType[VerticalRevealType["Bottom"] = 4] = "Bottom";
})(VerticalRevealType = exports.VerticalRevealType || (exports.VerticalRevealType = {}));
/**
 * A description for the overview ruler position.
 */
var OverviewRulerPosition = (function () {
    /**
     * @internal
     */
    function OverviewRulerPosition(source) {
        this.width = source.width | 0;
        this.height = source.height | 0;
        this.top = source.top | 0;
        this.right = source.right | 0;
    }
    /**
     * @internal
     */
    OverviewRulerPosition.prototype.equals = function (other) {
        return (this.width === other.width
            && this.height === other.height
            && this.top === other.top
            && this.right === other.right);
    };
    /**
     * @internal
     */
    OverviewRulerPosition.prototype.clone = function () {
        return new OverviewRulerPosition(this);
    };
    return OverviewRulerPosition;
}());
exports.OverviewRulerPosition = OverviewRulerPosition;
/**
 * The internal layout details of the editor.
 */
var EditorLayoutInfo = (function () {
    /**
     * @internal
     */
    function EditorLayoutInfo(source) {
        this.width = source.width | 0;
        this.height = source.height | 0;
        this.glyphMarginLeft = source.glyphMarginLeft | 0;
        this.glyphMarginWidth = source.glyphMarginWidth | 0;
        this.glyphMarginHeight = source.glyphMarginHeight | 0;
        this.lineNumbersLeft = source.lineNumbersLeft | 0;
        this.lineNumbersWidth = source.lineNumbersWidth | 0;
        this.lineNumbersHeight = source.lineNumbersHeight | 0;
        this.decorationsLeft = source.decorationsLeft | 0;
        this.decorationsWidth = source.decorationsWidth | 0;
        this.decorationsHeight = source.decorationsHeight | 0;
        this.contentLeft = source.contentLeft | 0;
        this.contentWidth = source.contentWidth | 0;
        this.contentHeight = source.contentHeight | 0;
        this.verticalScrollbarWidth = source.verticalScrollbarWidth | 0;
        this.horizontalScrollbarHeight = source.horizontalScrollbarHeight | 0;
        this.overviewRuler = source.overviewRuler.clone();
    }
    /**
     * @internal
     */
    EditorLayoutInfo.prototype.equals = function (other) {
        return (this.width === other.width
            && this.height === other.height
            && this.glyphMarginLeft === other.glyphMarginLeft
            && this.glyphMarginWidth === other.glyphMarginWidth
            && this.glyphMarginHeight === other.glyphMarginHeight
            && this.lineNumbersLeft === other.lineNumbersLeft
            && this.lineNumbersWidth === other.lineNumbersWidth
            && this.lineNumbersHeight === other.lineNumbersHeight
            && this.decorationsLeft === other.decorationsLeft
            && this.decorationsWidth === other.decorationsWidth
            && this.decorationsHeight === other.decorationsHeight
            && this.contentLeft === other.contentLeft
            && this.contentWidth === other.contentWidth
            && this.contentHeight === other.contentHeight
            && this.verticalScrollbarWidth === other.verticalScrollbarWidth
            && this.horizontalScrollbarHeight === other.horizontalScrollbarHeight
            && this.overviewRuler.equals(other.overviewRuler));
    };
    /**
     * @internal
     */
    EditorLayoutInfo.prototype.clone = function () {
        return new EditorLayoutInfo(this);
    };
    return EditorLayoutInfo;
}());
exports.EditorLayoutInfo = EditorLayoutInfo;
/**
 * Type of hit element with the mouse in the editor.
 */
var MouseTargetType;
(function (MouseTargetType) {
    /**
     * Mouse is on top of an unknown element.
     */
    MouseTargetType[MouseTargetType["UNKNOWN"] = 0] = "UNKNOWN";
    /**
     * Mouse is on top of the textarea used for input.
     */
    MouseTargetType[MouseTargetType["TEXTAREA"] = 1] = "TEXTAREA";
    /**
     * Mouse is on top of the glyph margin
     */
    MouseTargetType[MouseTargetType["GUTTER_GLYPH_MARGIN"] = 2] = "GUTTER_GLYPH_MARGIN";
    /**
     * Mouse is on top of the line numbers
     */
    MouseTargetType[MouseTargetType["GUTTER_LINE_NUMBERS"] = 3] = "GUTTER_LINE_NUMBERS";
    /**
     * Mouse is on top of the line decorations
     */
    MouseTargetType[MouseTargetType["GUTTER_LINE_DECORATIONS"] = 4] = "GUTTER_LINE_DECORATIONS";
    /**
     * Mouse is on top of the whitespace left in the gutter by a view zone.
     */
    MouseTargetType[MouseTargetType["GUTTER_VIEW_ZONE"] = 5] = "GUTTER_VIEW_ZONE";
    /**
     * Mouse is on top of text in the content.
     */
    MouseTargetType[MouseTargetType["CONTENT_TEXT"] = 6] = "CONTENT_TEXT";
    /**
     * Mouse is on top of empty space in the content (e.g. after line text or below last line)
     */
    MouseTargetType[MouseTargetType["CONTENT_EMPTY"] = 7] = "CONTENT_EMPTY";
    /**
     * Mouse is on top of a view zone in the content.
     */
    MouseTargetType[MouseTargetType["CONTENT_VIEW_ZONE"] = 8] = "CONTENT_VIEW_ZONE";
    /**
     * Mouse is on top of a content widget.
     */
    MouseTargetType[MouseTargetType["CONTENT_WIDGET"] = 9] = "CONTENT_WIDGET";
    /**
     * Mouse is on top of the decorations overview ruler.
     */
    MouseTargetType[MouseTargetType["OVERVIEW_RULER"] = 10] = "OVERVIEW_RULER";
    /**
     * Mouse is on top of a scrollbar.
     */
    MouseTargetType[MouseTargetType["SCROLLBAR"] = 11] = "SCROLLBAR";
    /**
     * Mouse is on top of an overlay widget.
     */
    MouseTargetType[MouseTargetType["OVERLAY_WIDGET"] = 12] = "OVERLAY_WIDGET";
})(MouseTargetType = exports.MouseTargetType || (exports.MouseTargetType = {}));
/**
 * @internal
 */
var EditorContextKeys;
(function (EditorContextKeys) {
    /**
     * A context key that is set when the editor's text has focus (cursor is blinking).
     * @internal
     */
    EditorContextKeys.TextFocus = new contextkey_1.RawContextKey('editorTextFocus', false);
    /**
     * A context key that is set when the editor's text or an editor's widget has focus.
     * @internal
     */
    EditorContextKeys.Focus = new contextkey_1.RawContextKey('editorFocus', false);
    /**
     * A context key that is set when the editor's text is readonly.
     * @internal
     */
    EditorContextKeys.ReadOnly = new contextkey_1.RawContextKey('editorReadonly', false);
    /**
     * @internal
     */
    EditorContextKeys.Writable = EditorContextKeys.ReadOnly.toNegated();
    /**
     * A context key that is set when the editor has a non-collapsed selection.
     * @internal
     */
    EditorContextKeys.HasNonEmptySelection = new contextkey_1.RawContextKey('editorHasSelection', false);
    /**
     * @internal
     */
    EditorContextKeys.HasOnlyEmptySelection = EditorContextKeys.HasNonEmptySelection.toNegated();
    /**
     * A context key that is set when the editor has multiple selections (multiple cursors).
     * @internal
     */
    EditorContextKeys.HasMultipleSelections = new contextkey_1.RawContextKey('editorHasMultipleSelections', false);
    /**
     * @internal
     */
    EditorContextKeys.HasSingleSelection = EditorContextKeys.HasMultipleSelections.toNegated();
    /**
     * @internal
     */
    EditorContextKeys.TabMovesFocus = new contextkey_1.RawContextKey('editorTabMovesFocus', false);
    /**
     * @internal
     */
    EditorContextKeys.TabDoesNotMoveFocus = EditorContextKeys.TabMovesFocus.toNegated();
    /**
     * A context key that is set to the language associated with the model associated with the editor.
     * @internal
     */
    EditorContextKeys.LanguageId = new contextkey_1.RawContextKey('editorLangId', undefined);
})(EditorContextKeys = exports.EditorContextKeys || (exports.EditorContextKeys = {}));
;
/**
 * @internal
 */
var ModeContextKeys;
(function (ModeContextKeys) {
    /**
     * @internal
     */
    ModeContextKeys.hasCompletionItemProvider = new contextkey_1.RawContextKey('editorHasCompletionItemProvider', undefined);
    /**
     * @internal
     */
    ModeContextKeys.hasCodeActionsProvider = new contextkey_1.RawContextKey('editorHasCodeActionsProvider', undefined);
    /**
     * @internal
     */
    ModeContextKeys.hasCodeLensProvider = new contextkey_1.RawContextKey('editorHasCodeLensProvider', undefined);
    /**
     * @internal
     */
    ModeContextKeys.hasDefinitionProvider = new contextkey_1.RawContextKey('editorHasDefinitionProvider', undefined);
    /**
     * @internal
     */
    ModeContextKeys.hasHoverProvider = new contextkey_1.RawContextKey('editorHasHoverProvider', undefined);
    /**
     * @internal
     */
    ModeContextKeys.hasDocumentHighlightProvider = new contextkey_1.RawContextKey('editorHasDocumentHighlightProvider', undefined);
    /**
     * @internal
     */
    ModeContextKeys.hasDocumentSymbolProvider = new contextkey_1.RawContextKey('editorHasDocumentSymbolProvider', undefined);
    /**
     * @internal
     */
    ModeContextKeys.hasReferenceProvider = new contextkey_1.RawContextKey('editorHasReferenceProvider', undefined);
    /**
     * @internal
     */
    ModeContextKeys.hasWorkspaceReferenceProvider = new contextkey_1.RawContextKey('editorHasWorkspaceReferenceProvider', undefined);
    /**
     * @internal
     */
    ModeContextKeys.hasRenameProvider = new contextkey_1.RawContextKey('editorHasRenameProvider', undefined);
    /**
     * @internal
     */
    ModeContextKeys.hasDocumentFormattingProvider = new contextkey_1.RawContextKey('editorHasDocumentFormattingProvider', undefined);
    /**
     * @internal
     */
    ModeContextKeys.hasDocumentSelectionFormattingProvider = new contextkey_1.RawContextKey('editorHasDocumentSelectionFormattingProvider', undefined);
    /**
     * @internal
     */
    ModeContextKeys.hasSignatureHelpProvider = new contextkey_1.RawContextKey('editorHasSignatureHelpProvider', undefined);
})(ModeContextKeys = exports.ModeContextKeys || (exports.ModeContextKeys = {}));
var BareFontInfo = (function () {
    /**
     * @internal
     */
    function BareFontInfo(opts) {
        this.fontFamily = String(opts.fontFamily);
        this.fontWeight = String(opts.fontWeight);
        this.fontSize = opts.fontSize;
        this.lineHeight = opts.lineHeight | 0;
    }
    /**
     * @internal
     */
    BareFontInfo.prototype.getId = function () {
        return this.fontFamily + '-' + this.fontWeight + '-' + this.fontSize + '-' + this.lineHeight + '-';
    };
    return BareFontInfo;
}());
exports.BareFontInfo = BareFontInfo;
var FontInfo = (function (_super) {
    __extends(FontInfo, _super);
    /**
     * @internal
     */
    function FontInfo(opts) {
        var _this = _super.call(this, opts) || this;
        _this.typicalHalfwidthCharacterWidth = opts.typicalHalfwidthCharacterWidth;
        _this.typicalFullwidthCharacterWidth = opts.typicalFullwidthCharacterWidth;
        _this.spaceWidth = opts.spaceWidth;
        _this.maxDigitWidth = opts.maxDigitWidth;
        return _this;
    }
    /**
     * @internal
     */
    FontInfo.prototype.equals = function (other) {
        return (this.fontFamily === other.fontFamily
            && this.fontWeight === other.fontWeight
            && this.fontSize === other.fontSize
            && this.lineHeight === other.lineHeight
            && this.typicalHalfwidthCharacterWidth === other.typicalHalfwidthCharacterWidth
            && this.typicalFullwidthCharacterWidth === other.typicalFullwidthCharacterWidth
            && this.spaceWidth === other.spaceWidth
            && this.maxDigitWidth === other.maxDigitWidth);
    };
    /**
     * @internal
     */
    FontInfo.prototype.clone = function () {
        return new FontInfo(this);
    };
    return FontInfo;
}(BareFontInfo));
exports.FontInfo = FontInfo;
// --- view
/**
 * @internal
 */
exports.ViewEventNames = {
    ModelFlushedEvent: 'modelFlushedEvent',
    LinesDeletedEvent: 'linesDeletedEvent',
    LinesInsertedEvent: 'linesInsertedEvent',
    LineChangedEvent: 'lineChangedEvent',
    TokensChangedEvent: 'tokensChangedEvent',
    DecorationsChangedEvent: 'decorationsChangedEvent',
    CursorPositionChangedEvent: 'cursorPositionChangedEvent',
    CursorSelectionChangedEvent: 'cursorSelectionChangedEvent',
    RevealRangeEvent: 'revealRangeEvent',
    LineMappingChangedEvent: 'lineMappingChangedEvent',
    ScrollRequestEvent: 'scrollRequestEvent'
};
/**
 * @internal
 */
var Viewport = (function () {
    function Viewport(top, left, width, height) {
        this.top = top | 0;
        this.left = left | 0;
        this.width = width | 0;
        this.height = height | 0;
    }
    return Viewport;
}());
exports.Viewport = Viewport;
/**
 * @internal
 */
var CodeEditorStateFlag;
(function (CodeEditorStateFlag) {
    CodeEditorStateFlag[CodeEditorStateFlag["Value"] = 0] = "Value";
    CodeEditorStateFlag[CodeEditorStateFlag["Selection"] = 1] = "Selection";
    CodeEditorStateFlag[CodeEditorStateFlag["Position"] = 2] = "Position";
    CodeEditorStateFlag[CodeEditorStateFlag["Scroll"] = 3] = "Scroll";
})(CodeEditorStateFlag = exports.CodeEditorStateFlag || (exports.CodeEditorStateFlag = {}));
/**
 * The type of the `IEditor`.
 */
exports.EditorType = {
    ICodeEditor: 'vs.editor.ICodeEditor',
    IDiffEditor: 'vs.editor.IDiffEditor'
};
/**
 *@internal
 */
function isCommonCodeEditor(thing) {
    if (thing && typeof thing.getEditorType === 'function') {
        return thing.getEditorType() === exports.EditorType.ICodeEditor;
    }
    else {
        return false;
    }
}
exports.isCommonCodeEditor = isCommonCodeEditor;
/**
 *@internal
 */
function isCommonDiffEditor(thing) {
    if (thing && typeof thing.getEditorType === 'function') {
        return thing.getEditorType() === exports.EditorType.IDiffEditor;
    }
    else {
        return false;
    }
}
exports.isCommonDiffEditor = isCommonDiffEditor;
/**
 * @internal
 */
exports.ClassName = {
    EditorWarningDecoration: 'greensquiggly',
    EditorErrorDecoration: 'redsquiggly'
};
/**
 * @internal
 */
exports.EventType = {
    Disposed: 'disposed',
    ConfigurationChanged: 'configurationChanged',
    ModelDispose: 'modelDispose',
    ModelChanged: 'modelChanged',
    ModelTokensChanged: 'modelTokensChanged',
    ModelModeChanged: 'modelsModeChanged',
    ModelOptionsChanged: 'modelOptionsChanged',
    ModelRawContentChanged: 'contentChanged',
    ModelContentChanged2: 'contentChanged2',
    ModelRawContentChangedFlush: 'flush',
    ModelRawContentChangedLinesDeleted: 'linesDeleted',
    ModelRawContentChangedLinesInserted: 'linesInserted',
    ModelRawContentChangedLineChanged: 'lineChanged',
    EditorTextBlur: 'blur',
    EditorTextFocus: 'focus',
    EditorFocus: 'widgetFocus',
    EditorBlur: 'widgetBlur',
    ModelDecorationsChanged: 'decorationsChanged',
    CursorPositionChanged: 'positionChanged',
    CursorSelectionChanged: 'selectionChanged',
    CursorRevealRange: 'revealRange',
    CursorScrollRequest: 'scrollRequest',
    ViewFocusGained: 'focusGained',
    ViewFocusLost: 'focusLost',
    ViewFocusChanged: 'focusChanged',
    ViewScrollChanged: 'scrollChanged',
    ViewZonesChanged: 'zonesChanged',
    ViewLayoutChanged: 'viewLayoutChanged',
    ContextMenu: 'contextMenu',
    MouseDown: 'mousedown',
    MouseUp: 'mouseup',
    MouseMove: 'mousemove',
    MouseLeave: 'mouseleave',
    KeyDown: 'keydown',
    KeyUp: 'keyup',
    EditorLayout: 'editorLayout',
    DiffUpdated: 'diffUpdated'
};
/**
 * Positions in the view for cursor move command.
 */
exports.CursorMovePosition = {
    Left: 'left',
    Right: 'right',
    Up: 'up',
    Down: 'down',
    WrappedLineStart: 'wrappedLineStart',
    WrappedLineFirstNonWhitespaceCharacter: 'wrappedLineFirstNonWhitespaceCharacter',
    WrappedLineColumnCenter: 'wrappedLineColumnCenter',
    WrappedLineEnd: 'wrappedLineEnd',
    WrappedLineLastNonWhitespaceCharacter: 'wrappedLineLastNonWhitespaceCharacter',
    ViewPortTop: 'viewPortTop',
    ViewPortCenter: 'viewPortCenter',
    ViewPortBottom: 'viewPortBottom',
    ViewPortIfOutside: 'viewPortIfOutside'
};
/**
 * Units for Cursor move 'by' argument
 */
exports.CursorMoveByUnit = {
    Line: 'line',
    WrappedLine: 'wrappedLine',
    Character: 'character',
    HalfLine: 'halfLine'
};
;
/**
 * @internal
 */
var isCursorMoveArgs = function (arg) {
    if (!types.isObject(arg)) {
        return false;
    }
    var cursorMoveArg = arg;
    if (!types.isString(cursorMoveArg.to)) {
        return false;
    }
    if (!types.isUndefined(cursorMoveArg.select) && !types.isBoolean(cursorMoveArg.select)) {
        return false;
    }
    if (!types.isUndefined(cursorMoveArg.by) && !types.isString(cursorMoveArg.by)) {
        return false;
    }
    if (!types.isUndefined(cursorMoveArg.value) && !types.isNumber(cursorMoveArg.value)) {
        return false;
    }
    return true;
};
/**
 * Directions in the view for editor scroll command.
 */
exports.EditorScrollDirection = {
    Up: 'up',
    Down: 'down',
};
/**
 * Units for editor scroll 'by' argument
 */
exports.EditorScrollByUnit = {
    Line: 'line',
    WrappedLine: 'wrappedLine',
    Page: 'page',
    HalfPage: 'halfPage'
};
;
/**
 * @internal
 */
var isEditorScrollArgs = function (arg) {
    if (!types.isObject(arg)) {
        return false;
    }
    var scrollArg = arg;
    if (!types.isString(scrollArg.to)) {
        return false;
    }
    if (!types.isUndefined(scrollArg.by) && !types.isString(scrollArg.by)) {
        return false;
    }
    if (!types.isUndefined(scrollArg.value) && !types.isNumber(scrollArg.value)) {
        return false;
    }
    if (!types.isUndefined(scrollArg.revealCursor) && !types.isBoolean(scrollArg.revealCursor)) {
        return false;
    }
    return true;
};
;
/**
 * Values for reveal line 'at' argument
 */
exports.RevealLineAtArgument = {
    Top: 'top',
    Center: 'center',
    Bottom: 'bottom'
};
/**
 * @internal
 */
var isRevealLineArgs = function (arg) {
    if (!types.isObject(arg)) {
        return false;
    }
    var reveaLineArg = arg;
    if (!types.isNumber(reveaLineArg.lineNumber)) {
        return false;
    }
    if (!types.isUndefined(reveaLineArg.at) && !types.isString(reveaLineArg.at)) {
        return false;
    }
    return true;
};
/**
 * @internal
 */
exports.CommandDescription = {
    CursorMove: {
        description: 'Move cursor to a logical position in the view',
        args: [
            {
                name: 'Cursor move argument object',
                description: "Property-value pairs that can be passed through this argument:\n\t\t\t\t\t* 'to': A mandatory logical position value providing where to move the cursor.\n\t\t\t\t\t\t```\n\t\t\t\t\t\t'left', 'right', 'up', 'down'\n\t\t\t\t\t\t'wrappedLineStart', 'wrappedLineEnd', 'wrappedLineColumnCenter'\n\t\t\t\t\t\t'wrappedLineFirstNonWhitespaceCharacter', 'wrappedLineLastNonWhitespaceCharacter',\n\t\t\t\t\t\t'viewPortTop', 'viewPortCenter', 'viewPortBottom', 'viewPortIfOutside'\n\t\t\t\t\t\t```\n\t\t\t\t\t* 'by': Unit to move. Default is computed based on 'to' value.\n\t\t\t\t\t\t```\n\t\t\t\t\t\t'line', 'wrappedLine', 'character', 'halfLine'\n\t\t\t\t\t\t```\n\t\t\t\t\t* 'value': Number of units to move. Default is '1'.\n\t\t\t\t\t* 'select': If 'true' makes the selection. Default is 'false'.\n\t\t\t\t",
                constraint: isCursorMoveArgs
            }
        ]
    },
    EditorScroll: {
        description: 'Scroll editor in the given direction',
        args: [
            {
                name: 'Editor scroll argument object',
                description: "Property-value pairs that can be passed through this argument:\n\t\t\t\t\t* 'to': A mandatory direction value.\n\t\t\t\t\t\t```\n\t\t\t\t\t\t'up', 'down'\n\t\t\t\t\t\t```\n\t\t\t\t\t* 'by': Unit to move. Default is computed based on 'to' value.\n\t\t\t\t\t\t```\n\t\t\t\t\t\t'line', 'wrappedLine', 'page', 'halfPage'\n\t\t\t\t\t\t```\n\t\t\t\t\t* 'value': Number of units to move. Default is '1'.\n\t\t\t\t\t* 'revealCursor': If 'true' reveals the cursor if it is outside view port.\n\t\t\t\t",
                constraint: isEditorScrollArgs
            }
        ]
    },
    RevealLine: {
        description: 'Reveal the given line at the given logical position',
        args: [
            {
                name: 'Reveal line argument object',
                description: "Property-value pairs that can be passed through this argument:\n\t\t\t\t\t* 'lineNumber': A mandatory line number value.\n\t\t\t\t\t* 'at': Logical position at which line has to be revealed .\n\t\t\t\t\t\t```\n\t\t\t\t\t\t'top', 'center', 'bottom'\n\t\t\t\t\t\t```\n\t\t\t\t",
                constraint: isRevealLineArgs
            }
        ]
    }
};
/**
 * Built-in commands.
 */
exports.Handler = {
    ExecuteCommand: 'executeCommand',
    ExecuteCommands: 'executeCommands',
    CursorLeft: 'cursorLeft',
    CursorLeftSelect: 'cursorLeftSelect',
    CursorWordLeft: 'cursorWordLeft',
    CursorWordStartLeft: 'cursorWordStartLeft',
    CursorWordEndLeft: 'cursorWordEndLeft',
    CursorWordLeftSelect: 'cursorWordLeftSelect',
    CursorWordStartLeftSelect: 'cursorWordStartLeftSelect',
    CursorWordEndLeftSelect: 'cursorWordEndLeftSelect',
    CursorRight: 'cursorRight',
    CursorRightSelect: 'cursorRightSelect',
    CursorWordRight: 'cursorWordRight',
    CursorWordStartRight: 'cursorWordStartRight',
    CursorWordEndRight: 'cursorWordEndRight',
    CursorWordRightSelect: 'cursorWordRightSelect',
    CursorWordStartRightSelect: 'cursorWordStartRightSelect',
    CursorWordEndRightSelect: 'cursorWordEndRightSelect',
    CursorUp: 'cursorUp',
    CursorUpSelect: 'cursorUpSelect',
    CursorDown: 'cursorDown',
    CursorDownSelect: 'cursorDownSelect',
    CursorPageUp: 'cursorPageUp',
    CursorPageUpSelect: 'cursorPageUpSelect',
    CursorPageDown: 'cursorPageDown',
    CursorPageDownSelect: 'cursorPageDownSelect',
    CursorHome: 'cursorHome',
    CursorHomeSelect: 'cursorHomeSelect',
    CursorEnd: 'cursorEnd',
    CursorEndSelect: 'cursorEndSelect',
    ExpandLineSelection: 'expandLineSelection',
    CursorTop: 'cursorTop',
    CursorTopSelect: 'cursorTopSelect',
    CursorBottom: 'cursorBottom',
    CursorBottomSelect: 'cursorBottomSelect',
    CursorColumnSelectLeft: 'cursorColumnSelectLeft',
    CursorColumnSelectRight: 'cursorColumnSelectRight',
    CursorColumnSelectUp: 'cursorColumnSelectUp',
    CursorColumnSelectPageUp: 'cursorColumnSelectPageUp',
    CursorColumnSelectDown: 'cursorColumnSelectDown',
    CursorColumnSelectPageDown: 'cursorColumnSelectPageDown',
    CursorMove: 'cursorMove',
    AddCursorDown: 'addCursorDown',
    AddCursorUp: 'addCursorUp',
    CursorUndo: 'cursorUndo',
    MoveTo: 'moveTo',
    MoveToSelect: 'moveToSelect',
    ColumnSelect: 'columnSelect',
    CreateCursor: 'createCursor',
    LastCursorMoveToSelect: 'lastCursorMoveToSelect',
    JumpToBracket: 'jumpToBracket',
    Type: 'type',
    ReplacePreviousChar: 'replacePreviousChar',
    CompositionStart: 'compositionStart',
    CompositionEnd: 'compositionEnd',
    Paste: 'paste',
    Tab: 'tab',
    Indent: 'indent',
    Outdent: 'outdent',
    DeleteLeft: 'deleteLeft',
    DeleteRight: 'deleteRight',
    DeleteWordLeft: 'deleteWordLeft',
    DeleteWordStartLeft: 'deleteWordStartLeft',
    DeleteWordEndLeft: 'deleteWordEndLeft',
    DeleteWordRight: 'deleteWordRight',
    DeleteWordStartRight: 'deleteWordStartRight',
    DeleteWordEndRight: 'deleteWordEndRight',
    DeleteAllRight: 'deleteAllRight',
    RemoveSecondaryCursors: 'removeSecondaryCursors',
    CancelSelection: 'cancelSelection',
    Cut: 'cut',
    Undo: 'undo',
    Redo: 'redo',
    WordSelect: 'wordSelect',
    WordSelectDrag: 'wordSelectDrag',
    LastCursorWordSelect: 'lastCursorWordSelect',
    LineSelect: 'lineSelect',
    LineSelectDrag: 'lineSelectDrag',
    LastCursorLineSelect: 'lastCursorLineSelect',
    LastCursorLineSelectDrag: 'lastCursorLineSelectDrag',
    LineInsertBefore: 'lineInsertBefore',
    LineInsertAfter: 'lineInsertAfter',
    LineBreakInsert: 'lineBreakInsert',
    SelectAll: 'selectAll',
    EditorScroll: 'editorScroll',
    ScrollLineUp: 'scrollLineUp',
    ScrollLineDown: 'scrollLineDown',
    ScrollPageUp: 'scrollPageUp',
    ScrollPageDown: 'scrollPageDown',
    RevealLine: 'revealLine'
};
/**
 * The style in which the editor's cursor should be rendered.
 */
var TextEditorCursorStyle;
(function (TextEditorCursorStyle) {
    /**
     * As a vertical line (sitting between two characters).
     */
    TextEditorCursorStyle[TextEditorCursorStyle["Line"] = 1] = "Line";
    /**
     * As a block (sitting on top of a character).
     */
    TextEditorCursorStyle[TextEditorCursorStyle["Block"] = 2] = "Block";
    /**
     * As a horizontal line (sitting under a character).
     */
    TextEditorCursorStyle[TextEditorCursorStyle["Underline"] = 3] = "Underline";
})(TextEditorCursorStyle = exports.TextEditorCursorStyle || (exports.TextEditorCursorStyle = {}));
/**
 * The kind of animation in which the editor's cursor should be rendered.
 */
var TextEditorCursorBlinkingStyle;
(function (TextEditorCursorBlinkingStyle) {
    /**
     * Hidden
     */
    TextEditorCursorBlinkingStyle[TextEditorCursorBlinkingStyle["Hidden"] = 0] = "Hidden";
    /**
     * Blinking
     */
    TextEditorCursorBlinkingStyle[TextEditorCursorBlinkingStyle["Blink"] = 1] = "Blink";
    /**
     * Blinking with smooth fading
     */
    TextEditorCursorBlinkingStyle[TextEditorCursorBlinkingStyle["Smooth"] = 2] = "Smooth";
    /**
     * Blinking with prolonged filled state and smooth fading
     */
    TextEditorCursorBlinkingStyle[TextEditorCursorBlinkingStyle["Phase"] = 3] = "Phase";
    /**
     * Expand collapse animation on the y axis
     */
    TextEditorCursorBlinkingStyle[TextEditorCursorBlinkingStyle["Expand"] = 4] = "Expand";
    /**
     * No-Blinking
     */
    TextEditorCursorBlinkingStyle[TextEditorCursorBlinkingStyle["Solid"] = 5] = "Solid";
})(TextEditorCursorBlinkingStyle = exports.TextEditorCursorBlinkingStyle || (exports.TextEditorCursorBlinkingStyle = {}));
/**
 * @internal
 */
function cursorStyleToString(cursorStyle) {
    if (cursorStyle === TextEditorCursorStyle.Line) {
        return 'line';
    }
    else if (cursorStyle === TextEditorCursorStyle.Block) {
        return 'block';
    }
    else if (cursorStyle === TextEditorCursorStyle.Underline) {
        return 'underline';
    }
    else {
        throw new Error('cursorStyleToString: Unknown cursorStyle');
    }
}
exports.cursorStyleToString = cursorStyleToString;
/**
 * @internal
 */
var ColorZone = (function () {
    function ColorZone(from, to, colorId, position) {
        this.from = from | 0;
        this.to = to | 0;
        this.colorId = colorId | 0;
        this.position = position | 0;
    }
    return ColorZone;
}());
exports.ColorZone = ColorZone;
/**
 * A zone in the overview ruler
 * @internal
 */
var OverviewRulerZone = (function () {
    function OverviewRulerZone(startLineNumber, endLineNumber, position, forceHeight, color, darkColor) {
        this.startLineNumber = startLineNumber;
        this.endLineNumber = endLineNumber;
        this.position = position;
        this.forceHeight = forceHeight;
        this._color = color;
        this._darkColor = darkColor;
        this._colorZones = null;
    }
    OverviewRulerZone.prototype.getColor = function (useDarkColor) {
        if (useDarkColor) {
            return this._darkColor;
        }
        return this._color;
    };
    OverviewRulerZone.prototype.equals = function (other) {
        return (this.startLineNumber === other.startLineNumber
            && this.endLineNumber === other.endLineNumber
            && this.position === other.position
            && this.forceHeight === other.forceHeight
            && this._color === other._color
            && this._darkColor === other._darkColor);
    };
    OverviewRulerZone.prototype.compareTo = function (other) {
        if (this.startLineNumber === other.startLineNumber) {
            if (this.endLineNumber === other.endLineNumber) {
                if (this.forceHeight === other.forceHeight) {
                    if (this.position === other.position) {
                        if (this._darkColor === other._darkColor) {
                            if (this._color === other._color) {
                                return 0;
                            }
                            return this._color < other._color ? -1 : 1;
                        }
                        return this._darkColor < other._darkColor ? -1 : 1;
                    }
                    return this.position - other.position;
                }
                return this.forceHeight - other.forceHeight;
            }
            return this.endLineNumber - other.endLineNumber;
        }
        return this.startLineNumber - other.startLineNumber;
    };
    OverviewRulerZone.prototype.setColorZones = function (colorZones) {
        this._colorZones = colorZones;
    };
    OverviewRulerZone.prototype.getColorZones = function () {
        return this._colorZones;
    };
    return OverviewRulerZone;
}());
exports.OverviewRulerZone = OverviewRulerZone;
