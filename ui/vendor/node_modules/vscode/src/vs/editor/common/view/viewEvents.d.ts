import { VerticalRevealType, IConfigurationChangedEvent, IViewConfigurationChangedEvent } from 'vs/editor/common/editorCommon';
import { Position } from 'vs/editor/common/core/position';
import { Range } from 'vs/editor/common/core/range';
import { Selection } from 'vs/editor/common/core/selection';
import { ScrollEvent } from 'vs/base/common/scrollable';
export declare const enum ViewEventType {
    ViewConfigurationChanged = 1,
    ViewCursorPositionChanged = 2,
    ViewCursorSelectionChanged = 3,
    ViewDecorationsChanged = 4,
    ViewFlushed = 5,
    ViewFocusChanged = 6,
    ViewLineMappingChanged = 7,
    ViewLinesChanged = 8,
    ViewLinesDeleted = 9,
    ViewLinesInserted = 10,
    ViewRevealRangeRequest = 11,
    ViewScrollChanged = 12,
    ViewScrollRequest = 13,
    ViewTokensChanged = 14,
    ViewTokensColorsChanged = 15,
    ViewZonesChanged = 16,
}
export declare class ViewConfigurationChangedEvent {
    readonly type: ViewEventType;
    readonly lineHeight: boolean;
    readonly readOnly: boolean;
    readonly layoutInfo: boolean;
    readonly fontInfo: boolean;
    readonly viewInfo: IViewConfigurationChangedEvent;
    readonly wrappingInfo: boolean;
    constructor(source: IConfigurationChangedEvent);
}
export declare class ViewCursorPositionChangedEvent {
    readonly type: ViewEventType;
    /**
     * Primary cursor's position.
     */
    readonly position: Position;
    /**
     * Secondary cursors' position.
     */
    readonly secondaryPositions: Position[];
    /**
     * Is the primary cursor in the editable range?
     */
    readonly isInEditableRange: boolean;
    constructor(position: Position, secondaryPositions: Position[], isInEditableRange: boolean);
}
export declare class ViewCursorSelectionChangedEvent {
    readonly type: ViewEventType;
    /**
     * The primary selection.
     */
    readonly selection: Selection;
    /**
     * The secondary selections.
     */
    readonly secondarySelections: Selection[];
    constructor(selection: Selection, secondarySelections: Selection[]);
}
export declare class ViewDecorationsChangedEvent {
    readonly type: ViewEventType;
    constructor();
}
export declare class ViewFlushedEvent {
    readonly type: ViewEventType;
    constructor();
}
export declare class ViewFocusChangedEvent {
    readonly type: ViewEventType;
    readonly isFocused: boolean;
    constructor(isFocused: boolean);
}
export declare class ViewLineMappingChangedEvent {
    readonly type: ViewEventType;
    constructor();
}
export declare class ViewLinesChangedEvent {
    readonly type: ViewEventType;
    /**
     * The first line that has changed.
     */
    readonly fromLineNumber: number;
    /**
     * The last line that has changed.
     */
    readonly toLineNumber: number;
    constructor(fromLineNumber: number, toLineNumber: number);
}
export declare class ViewLinesDeletedEvent {
    readonly type: ViewEventType;
    /**
     * At what line the deletion began (inclusive).
     */
    readonly fromLineNumber: number;
    /**
     * At what line the deletion stopped (inclusive).
     */
    readonly toLineNumber: number;
    constructor(fromLineNumber: number, toLineNumber: number);
}
export declare class ViewLinesInsertedEvent {
    readonly type: ViewEventType;
    /**
     * Before what line did the insertion begin
     */
    readonly fromLineNumber: number;
    /**
     * `toLineNumber` - `fromLineNumber` + 1 denotes the number of lines that were inserted
     */
    readonly toLineNumber: number;
    constructor(fromLineNumber: number, toLineNumber: number);
}
export declare class ViewRevealRangeRequestEvent {
    readonly type: ViewEventType;
    /**
     * Range to be reavealed.
     */
    readonly range: Range;
    readonly verticalType: VerticalRevealType;
    /**
     * If true: there should be a horizontal & vertical revealing
     * If false: there should be just a vertical revealing
     */
    readonly revealHorizontal: boolean;
    /**
     * If true: cursor is revealed if outside viewport
     */
    readonly revealCursor: boolean;
    constructor(range: Range, verticalType: VerticalRevealType, revealHorizontal: boolean, revealCursor: boolean);
}
export declare class ViewScrollChangedEvent {
    readonly type: ViewEventType;
    readonly scrollWidth: number;
    readonly scrollLeft: number;
    readonly scrollHeight: number;
    readonly scrollTop: number;
    readonly scrollWidthChanged: boolean;
    readonly scrollLeftChanged: boolean;
    readonly scrollHeightChanged: boolean;
    readonly scrollTopChanged: boolean;
    constructor(source: ScrollEvent);
}
export declare class ViewScrollRequestEvent {
    readonly type: ViewEventType;
    readonly deltaLines: number;
    readonly revealCursor: boolean;
    constructor(deltaLines: number, revealCursor: boolean);
}
export declare class ViewTokensChangedEvent {
    readonly type: ViewEventType;
    readonly ranges: {
        /**
         * Start line number of range
         */
        readonly fromLineNumber: number;
        /**
         * End line number of range
         */
        readonly toLineNumber: number;
    }[];
    constructor(ranges: {
        fromLineNumber: number;
        toLineNumber: number;
    }[]);
}
export declare class ViewTokensColorsChangedEvent {
    readonly type: ViewEventType;
    constructor();
}
export declare class ViewZonesChangedEvent {
    readonly type: ViewEventType;
    constructor();
}
export declare type ViewEvent = (ViewConfigurationChangedEvent | ViewCursorPositionChangedEvent | ViewCursorSelectionChangedEvent | ViewDecorationsChangedEvent | ViewFlushedEvent | ViewFocusChangedEvent | ViewLinesChangedEvent | ViewLineMappingChangedEvent | ViewLinesDeletedEvent | ViewLinesInsertedEvent | ViewRevealRangeRequestEvent | ViewScrollChangedEvent | ViewScrollRequestEvent | ViewTokensChangedEvent | ViewTokensColorsChangedEvent | ViewZonesChangedEvent);
