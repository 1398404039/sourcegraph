/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var errors_1 = require("vs/base/common/errors");
var event_1 = require("vs/base/common/event");
var eventEmitter_1 = require("vs/base/common/eventEmitter");
var lifecycle_1 = require("vs/base/common/lifecycle");
var winjs_base_1 = require("vs/base/common/winjs.base");
var serviceCollection_1 = require("vs/platform/instantiation/common/serviceCollection");
var contextkey_1 = require("vs/platform/contextkey/common/contextkey");
var defaultConfig_1 = require("vs/editor/common/config/defaultConfig");
var cursor_1 = require("vs/editor/common/controller/cursor");
var cursorCommon_1 = require("vs/editor/common/controller/cursorCommon");
var editorState_1 = require("vs/editor/common/core/editorState");
var position_1 = require("vs/editor/common/core/position");
var range_1 = require("vs/editor/common/core/range");
var selection_1 = require("vs/editor/common/core/selection");
var editorCommon = require("vs/editor/common/editorCommon");
var characterHardWrappingLineMapper_1 = require("vs/editor/common/viewModel/characterHardWrappingLineMapper");
var splitLinesCollection_1 = require("vs/editor/common/viewModel/splitLinesCollection");
var viewModelImpl_1 = require("vs/editor/common/viewModel/viewModelImpl");
var hash_1 = require("vs/base/common/hash");
var editorModeContext_1 = require("vs/editor/common/modes/editorModeContext");
var EditorContextKeys = editorCommon.EditorContextKeys;
var EDITOR_ID = 0;
var CommonCodeEditor = (function (_super) {
    __extends(CommonCodeEditor, _super);
    function CommonCodeEditor(domElement, options, instantiationService, contextKeyService) {
        var _this = _super.call(this) || this;
        _this.onDidChangeModelRawContent = event_1.fromEventEmitter(_this, editorCommon.EventType.ModelRawContentChanged);
        _this.onDidChangeModelContent = event_1.fromEventEmitter(_this, editorCommon.EventType.ModelContentChanged2);
        _this.onDidChangeModelLanguage = event_1.fromEventEmitter(_this, editorCommon.EventType.ModelLanguageChanged);
        _this.onDidChangeModelOptions = event_1.fromEventEmitter(_this, editorCommon.EventType.ModelOptionsChanged);
        _this.onDidChangeModelDecorations = event_1.fromEventEmitter(_this, editorCommon.EventType.ModelDecorationsChanged);
        _this.onDidChangeConfiguration = event_1.fromEventEmitter(_this, editorCommon.EventType.ConfigurationChanged);
        _this.onDidChangeModel = event_1.fromEventEmitter(_this, editorCommon.EventType.ModelChanged);
        _this.onDidChangeCursorPosition = event_1.fromEventEmitter(_this, editorCommon.EventType.CursorPositionChanged);
        _this.onDidChangeCursorSelection = event_1.fromEventEmitter(_this, editorCommon.EventType.CursorSelectionChanged);
        _this.onDidFocusEditorText = event_1.fromEventEmitter(_this, editorCommon.EventType.EditorTextFocus);
        _this.onDidBlurEditorText = event_1.fromEventEmitter(_this, editorCommon.EventType.EditorTextBlur);
        _this.onDidFocusEditor = event_1.fromEventEmitter(_this, editorCommon.EventType.EditorFocus);
        _this.onDidBlurEditor = event_1.fromEventEmitter(_this, editorCommon.EventType.EditorBlur);
        _this.onDidDispose = event_1.fromEventEmitter(_this, editorCommon.EventType.Disposed);
        _this.onWillType = event_1.fromEventEmitter(_this, editorCommon.EventType.WillType);
        _this.onDidType = event_1.fromEventEmitter(_this, editorCommon.EventType.DidType);
        _this.onDidPaste = event_1.fromEventEmitter(_this, editorCommon.EventType.DidPaste);
        _this.domElement = domElement;
        _this.id = (++EDITOR_ID);
        // listeners that are kept during the whole editor lifetime
        _this._lifetimeDispose = [];
        _this._decorationTypeKeysToIds = {};
        _this._decorationTypeSubtypes = {};
        options = options || {};
        if (typeof options.ariaLabel === 'undefined') {
            options.ariaLabel = defaultConfig_1.DefaultConfig.editor.ariaLabel;
        }
        _this._configuration = _this._createConfiguration(options);
        _this._lifetimeDispose.push(_this._configuration.onDidChange(function (e) {
            _this.emit(editorCommon.EventType.ConfigurationChanged, e);
            if (e.layoutInfo) {
                _this.emit(editorCommon.EventType.EditorLayout, _this._configuration.editor.layoutInfo);
            }
        }));
        _this._contextKeyService = contextKeyService.createScoped(_this.domElement);
        _this._lifetimeDispose.push(new EditorContextKeysManager(_this, _this._contextKeyService));
        _this._lifetimeDispose.push(new editorModeContext_1.EditorModeContext(_this, _this._contextKeyService));
        _this._instantiationService = instantiationService.createChild(new serviceCollection_1.ServiceCollection([contextkey_1.IContextKeyService, _this._contextKeyService]));
        _this._attachModel(null);
        _this._contributions = {};
        _this._actions = {};
        return _this;
    }
    CommonCodeEditor.prototype.getId = function () {
        return this.getEditorType() + ':' + this.id;
    };
    CommonCodeEditor.prototype.getEditorType = function () {
        return editorCommon.EditorType.ICodeEditor;
    };
    CommonCodeEditor.prototype.destroy = function () {
        this.dispose();
    };
    CommonCodeEditor.prototype.dispose = function () {
        this._lifetimeDispose = lifecycle_1.dispose(this._lifetimeDispose);
        var keys = Object.keys(this._contributions);
        for (var i = 0, len = keys.length; i < len; i++) {
            var contributionId = keys[i];
            this._contributions[contributionId].dispose();
        }
        this._contributions = {};
        // editor actions don't need to be disposed
        this._actions = {};
        this._postDetachModelCleanup(this._detachModel());
        this._configuration.dispose();
        this._contextKeyService.dispose();
        this.emit(editorCommon.EventType.Disposed);
        _super.prototype.dispose.call(this);
    };
    CommonCodeEditor.prototype.captureState = function () {
        var flags = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            flags[_i] = arguments[_i];
        }
        return new editorState_1.EditorState(this, flags);
    };
    CommonCodeEditor.prototype.invokeWithinContext = function (fn) {
        return this._instantiationService.invokeFunction(fn);
    };
    CommonCodeEditor.prototype.updateOptions = function (newOptions) {
        this._configuration.updateOptions(newOptions);
    };
    CommonCodeEditor.prototype.getConfiguration = function () {
        return this._configuration.editorClone;
    };
    CommonCodeEditor.prototype.getRawConfiguration = function () {
        return this._configuration.getRawOptions();
    };
    CommonCodeEditor.prototype.getValue = function (options) {
        if (options === void 0) { options = null; }
        if (this.model) {
            var preserveBOM = (options && options.preserveBOM) ? true : false;
            var eolPreference = editorCommon.EndOfLinePreference.TextDefined;
            if (options && options.lineEnding && options.lineEnding === '\n') {
                eolPreference = editorCommon.EndOfLinePreference.LF;
            }
            else if (options && options.lineEnding && options.lineEnding === '\r\n') {
                eolPreference = editorCommon.EndOfLinePreference.CRLF;
            }
            return this.model.getValue(eolPreference, preserveBOM);
        }
        return '';
    };
    CommonCodeEditor.prototype.setValue = function (newValue) {
        if (this.model) {
            this.model.setValue(newValue);
        }
    };
    CommonCodeEditor.prototype.getModel = function () {
        return this.model;
    };
    CommonCodeEditor.prototype.setModel = function (model) {
        if (model === void 0) { model = null; }
        if (this.model === model) {
            // Current model is the new model
            return;
        }
        var detachedModel = this._detachModel();
        this._attachModel(model);
        var e = {
            oldModelUrl: detachedModel ? detachedModel.uri : null,
            newModelUrl: model ? model.uri : null
        };
        this.emit(editorCommon.EventType.ModelChanged, e);
        this._postDetachModelCleanup(detachedModel);
    };
    CommonCodeEditor.prototype.getVisibleColumnFromPosition = function (rawPosition) {
        if (!this.model) {
            return rawPosition.column;
        }
        var position = this.model.validatePosition(rawPosition);
        var tabSize = this.model.getOptions().tabSize;
        return cursorCommon_1.CursorColumns.visibleColumnFromColumn(this.model.getLineContent(position.lineNumber), position.column, tabSize) + 1;
    };
    CommonCodeEditor.prototype.getPosition = function () {
        if (!this.cursor) {
            return null;
        }
        return this.cursor.getPosition().clone();
    };
    CommonCodeEditor.prototype.setPosition = function (position, reveal, revealVerticalInCenter, revealHorizontal) {
        if (reveal === void 0) { reveal = false; }
        if (revealVerticalInCenter === void 0) { revealVerticalInCenter = false; }
        if (revealHorizontal === void 0) { revealHorizontal = false; }
        if (!this.cursor) {
            return;
        }
        if (!position_1.Position.isIPosition(position)) {
            throw new Error('Invalid arguments');
        }
        this.cursor.setSelections('api', [{
                selectionStartLineNumber: position.lineNumber,
                selectionStartColumn: position.column,
                positionLineNumber: position.lineNumber,
                positionColumn: position.column
            }]);
        if (reveal) {
            this.revealPosition(position, revealVerticalInCenter, revealHorizontal);
        }
    };
    CommonCodeEditor.prototype._sendRevealRange = function (range, verticalType, revealHorizontal) {
        if (!this.model || !this.cursor) {
            return;
        }
        if (!range_1.Range.isIRange(range)) {
            throw new Error('Invalid arguments');
        }
        var validatedRange = this.model.validateRange(range);
        var revealRangeEvent = {
            range: validatedRange,
            viewRange: null,
            verticalType: verticalType,
            revealHorizontal: revealHorizontal,
            revealCursor: false
        };
        this.cursor.emit(editorCommon.EventType.CursorRevealRange, revealRangeEvent);
    };
    CommonCodeEditor.prototype.revealLine = function (lineNumber) {
        this._revealLine(lineNumber, 0 /* Simple */);
    };
    CommonCodeEditor.prototype.revealLineInCenter = function (lineNumber) {
        this._revealLine(lineNumber, 1 /* Center */);
    };
    CommonCodeEditor.prototype.revealLineInCenterIfOutsideViewport = function (lineNumber) {
        this._revealLine(lineNumber, 2 /* CenterIfOutsideViewport */);
    };
    CommonCodeEditor.prototype._revealLine = function (lineNumber, revealType) {
        if (typeof lineNumber !== 'number') {
            throw new Error('Invalid arguments');
        }
        this._sendRevealRange(new range_1.Range(lineNumber, 1, lineNumber, 1), revealType, false);
    };
    CommonCodeEditor.prototype.revealPosition = function (position, revealVerticalInCenter, revealHorizontal) {
        if (revealVerticalInCenter === void 0) { revealVerticalInCenter = false; }
        if (revealHorizontal === void 0) { revealHorizontal = false; }
        this._revealPosition(position, revealVerticalInCenter ? 1 /* Center */ : 0 /* Simple */, revealHorizontal);
    };
    CommonCodeEditor.prototype.revealPositionInCenter = function (position) {
        this._revealPosition(position, 1 /* Center */, true);
    };
    CommonCodeEditor.prototype.revealPositionInCenterIfOutsideViewport = function (position) {
        this._revealPosition(position, 2 /* CenterIfOutsideViewport */, true);
    };
    CommonCodeEditor.prototype._revealPosition = function (position, verticalType, revealHorizontal) {
        if (!position_1.Position.isIPosition(position)) {
            throw new Error('Invalid arguments');
        }
        this._sendRevealRange(new range_1.Range(position.lineNumber, position.column, position.lineNumber, position.column), verticalType, revealHorizontal);
    };
    CommonCodeEditor.prototype.getSelection = function () {
        if (!this.cursor) {
            return null;
        }
        return this.cursor.getSelection().clone();
    };
    CommonCodeEditor.prototype.getSelections = function () {
        if (!this.cursor) {
            return null;
        }
        var selections = this.cursor.getSelections();
        var result = [];
        for (var i = 0, len = selections.length; i < len; i++) {
            result[i] = selections[i].clone();
        }
        return result;
    };
    CommonCodeEditor.prototype.setSelection = function (something, reveal, revealVerticalInCenter, revealHorizontal) {
        if (reveal === void 0) { reveal = false; }
        if (revealVerticalInCenter === void 0) { revealVerticalInCenter = false; }
        if (revealHorizontal === void 0) { revealHorizontal = false; }
        var isSelection = selection_1.Selection.isISelection(something);
        var isRange = range_1.Range.isIRange(something);
        if (!isSelection && !isRange) {
            throw new Error('Invalid arguments');
        }
        if (isSelection) {
            this._setSelectionImpl(something, reveal, revealVerticalInCenter, revealHorizontal);
        }
        else if (isRange) {
            // act as if it was an IRange
            var selection = {
                selectionStartLineNumber: something.startLineNumber,
                selectionStartColumn: something.startColumn,
                positionLineNumber: something.endLineNumber,
                positionColumn: something.endColumn
            };
            this._setSelectionImpl(selection, reveal, revealVerticalInCenter, revealHorizontal);
        }
    };
    CommonCodeEditor.prototype._setSelectionImpl = function (sel, reveal, revealVerticalInCenter, revealHorizontal) {
        if (!this.cursor) {
            return;
        }
        var selection = new selection_1.Selection(sel.selectionStartLineNumber, sel.selectionStartColumn, sel.positionLineNumber, sel.positionColumn);
        this.cursor.setSelections('api', [selection]);
        if (reveal) {
            this.revealRange(selection, revealVerticalInCenter, revealHorizontal);
        }
    };
    CommonCodeEditor.prototype.revealLines = function (startLineNumber, endLineNumber) {
        this._revealLines(startLineNumber, endLineNumber, 0 /* Simple */);
    };
    CommonCodeEditor.prototype.revealLinesInCenter = function (startLineNumber, endLineNumber) {
        this._revealLines(startLineNumber, endLineNumber, 1 /* Center */);
    };
    CommonCodeEditor.prototype.revealLinesInCenterIfOutsideViewport = function (startLineNumber, endLineNumber) {
        this._revealLines(startLineNumber, endLineNumber, 2 /* CenterIfOutsideViewport */);
    };
    CommonCodeEditor.prototype._revealLines = function (startLineNumber, endLineNumber, verticalType) {
        if (typeof startLineNumber !== 'number' || typeof endLineNumber !== 'number') {
            throw new Error('Invalid arguments');
        }
        this._sendRevealRange(new range_1.Range(startLineNumber, 1, endLineNumber, 1), verticalType, false);
    };
    CommonCodeEditor.prototype.revealRange = function (range, revealVerticalInCenter, revealHorizontal) {
        if (revealVerticalInCenter === void 0) { revealVerticalInCenter = false; }
        if (revealHorizontal === void 0) { revealHorizontal = true; }
        this._revealRange(range, revealVerticalInCenter ? 1 /* Center */ : 0 /* Simple */, revealHorizontal);
    };
    CommonCodeEditor.prototype.revealRangeInCenter = function (range) {
        this._revealRange(range, 1 /* Center */, true);
    };
    CommonCodeEditor.prototype.revealRangeInCenterIfOutsideViewport = function (range) {
        this._revealRange(range, 2 /* CenterIfOutsideViewport */, true);
    };
    CommonCodeEditor.prototype.revealRangeAtTop = function (range) {
        this._revealRange(range, 3 /* Top */, true);
    };
    CommonCodeEditor.prototype._revealRange = function (range, verticalType, revealHorizontal) {
        if (!range_1.Range.isIRange(range)) {
            throw new Error('Invalid arguments');
        }
        this._sendRevealRange(range_1.Range.lift(range), verticalType, revealHorizontal);
    };
    CommonCodeEditor.prototype.setSelections = function (ranges) {
        if (!this.cursor) {
            return;
        }
        if (!ranges || ranges.length === 0) {
            throw new Error('Invalid arguments');
        }
        for (var i = 0, len = ranges.length; i < len; i++) {
            if (!selection_1.Selection.isISelection(ranges[i])) {
                throw new Error('Invalid arguments');
            }
        }
        this.cursor.setSelections('api', ranges);
    };
    CommonCodeEditor.prototype.onVisible = function () {
    };
    CommonCodeEditor.prototype.onHide = function () {
    };
    CommonCodeEditor.prototype.getContribution = function (id) {
        return (this._contributions[id] || null);
    };
    CommonCodeEditor.prototype.getActions = function () {
        var result = [];
        var keys = Object.keys(this._actions);
        for (var i = 0, len = keys.length; i < len; i++) {
            var id = keys[i];
            result.push(this._actions[id]);
        }
        return result;
    };
    CommonCodeEditor.prototype.getSupportedActions = function () {
        var result = this.getActions();
        result = result.filter(function (action) { return action.isSupported(); });
        return result;
    };
    CommonCodeEditor.prototype.getAction = function (id) {
        return this._actions[id] || null;
    };
    CommonCodeEditor.prototype.trigger = function (source, handlerId, payload) {
        payload = payload || {};
        // Special case for typing
        if (handlerId === editorCommon.Handler.Type) {
            if (!this.cursor || typeof payload.text !== 'string' || payload.text.length === 0) {
                // nothing to do
                return;
            }
            if (source === 'keyboard') {
                this.emit(editorCommon.EventType.WillType, payload.text);
            }
            this.cursor.trigger(source, handlerId, payload);
            if (source === 'keyboard') {
                this.emit(editorCommon.EventType.DidType, payload.text);
            }
            return;
        }
        if (handlerId === editorCommon.Handler.Paste) {
            if (!this.cursor || typeof payload.text !== 'string' || payload.text.length === 0) {
                // nothing to do
                return;
            }
            var startPosition = this.cursor.getSelection().getStartPosition();
            this.cursor.trigger(source, handlerId, payload);
            var endPosition = this.cursor.getSelection().getStartPosition();
            if (source === 'keyboard') {
                this.emit(editorCommon.EventType.DidPaste, new range_1.Range(startPosition.lineNumber, startPosition.column, endPosition.lineNumber, endPosition.column));
            }
            return;
        }
        var candidate = this.getAction(handlerId);
        if (candidate !== null) {
            winjs_base_1.TPromise.as(candidate.run()).done(null, errors_1.onUnexpectedError);
        }
        else {
            if (!this.cursor) {
                return;
            }
            this.cursor.trigger(source, handlerId, payload);
        }
    };
    CommonCodeEditor.prototype.executeCommand = function (source, command) {
        if (!this.cursor) {
            return;
        }
        this.cursor.trigger(source, editorCommon.Handler.ExecuteCommand, command);
    };
    CommonCodeEditor.prototype.pushUndoStop = function () {
        if (!this.cursor) {
            // no view, no cursor
            return false;
        }
        if (this._configuration.editor.readOnly) {
            // read only editor => sorry!
            return false;
        }
        this.model.pushStackElement();
        return true;
    };
    CommonCodeEditor.prototype.executeEdits = function (source, edits, endCursorState) {
        var _this = this;
        if (!this.cursor) {
            // no view, no cursor
            return false;
        }
        if (this._configuration.editor.readOnly) {
            // read only editor => sorry!
            return false;
        }
        this.model.pushEditOperations(this.cursor.getSelections(), edits, function () {
            return endCursorState ? endCursorState : _this.cursor.getSelections();
        });
        if (endCursorState) {
            this.cursor.setSelections(source, endCursorState);
        }
        return true;
    };
    CommonCodeEditor.prototype.executeCommands = function (source, commands) {
        if (!this.cursor) {
            return;
        }
        this.cursor.trigger(source, editorCommon.Handler.ExecuteCommands, commands);
    };
    CommonCodeEditor.prototype.changeDecorations = function (callback) {
        if (!this.model) {
            //			console.warn('Cannot change decorations on editor that is not attached to a model');
            // callback will not be called
            return null;
        }
        return this.model.changeDecorations(callback, this.id);
    };
    CommonCodeEditor.prototype.getLineDecorations = function (lineNumber) {
        if (!this.model) {
            return null;
        }
        return this.model.getLineDecorations(lineNumber, this.id, this._configuration.editor.readOnly);
    };
    CommonCodeEditor.prototype.deltaDecorations = function (oldDecorations, newDecorations) {
        if (!this.model) {
            return [];
        }
        if (oldDecorations.length === 0 && newDecorations.length === 0) {
            return oldDecorations;
        }
        return this.model.deltaDecorations(oldDecorations, newDecorations, this.id);
    };
    CommonCodeEditor.prototype.setDecorations = function (decorationTypeKey, decorationOptions) {
        var newDecorationsSubTypes = {};
        var oldDecorationsSubTypes = this._decorationTypeSubtypes[decorationTypeKey] || {};
        this._decorationTypeSubtypes[decorationTypeKey] = newDecorationsSubTypes;
        var newModelDecorations = [];
        for (var _i = 0, decorationOptions_1 = decorationOptions; _i < decorationOptions_1.length; _i++) {
            var decorationOption = decorationOptions_1[_i];
            var typeKey = decorationTypeKey;
            if (decorationOption.renderOptions) {
                // identify custom reder options by a hash code over all keys and values
                // For custom render options register a decoration type if necessary
                var subType = hash_1.hash(decorationOption.renderOptions).toString(16);
                // The fact that `decorationTypeKey` appears in the typeKey has no influence
                // it is just a mechanism to get predictable and unique keys (repeatable for the same options and unique across clients)
                typeKey = decorationTypeKey + '-' + subType;
                if (!oldDecorationsSubTypes[subType] && !newDecorationsSubTypes[subType]) {
                    // decoration type did not exist before, register new one
                    this._registerDecorationType(typeKey, decorationOption.renderOptions, decorationTypeKey);
                }
                newDecorationsSubTypes[subType] = true;
            }
            var opts = this._resolveDecorationOptions(typeKey, !!decorationOption.hoverMessage);
            if (decorationOption.hoverMessage) {
                opts.hoverMessage = decorationOption.hoverMessage;
            }
            newModelDecorations.push({ range: decorationOption.range, options: opts });
        }
        // remove decoration sub types that are no longer used, deregister decoration type if necessary
        for (var subType in oldDecorationsSubTypes) {
            if (!newDecorationsSubTypes[subType]) {
                this._removeDecorationType(decorationTypeKey + '-' + subType);
            }
        }
        // update all decorations
        var oldDecorationsIds = this._decorationTypeKeysToIds[decorationTypeKey] || [];
        this._decorationTypeKeysToIds[decorationTypeKey] = this.deltaDecorations(oldDecorationsIds, newModelDecorations);
    };
    CommonCodeEditor.prototype.removeDecorations = function (decorationTypeKey) {
        // remove decorations for type and sub type
        var oldDecorationsIds = this._decorationTypeKeysToIds[decorationTypeKey];
        if (oldDecorationsIds) {
            this.deltaDecorations(oldDecorationsIds, []);
        }
        if (this._decorationTypeKeysToIds.hasOwnProperty(decorationTypeKey)) {
            delete this._decorationTypeKeysToIds[decorationTypeKey];
        }
        if (this._decorationTypeSubtypes.hasOwnProperty(decorationTypeKey)) {
            delete this._decorationTypeSubtypes[decorationTypeKey];
        }
    };
    CommonCodeEditor.prototype.getLayoutInfo = function () {
        return this._configuration.editor.layoutInfo;
    };
    CommonCodeEditor.prototype._attachModel = function (model) {
        var _this = this;
        this.model = model ? model : null;
        this.listenersToRemove = [];
        this.viewModel = null;
        this.cursor = null;
        if (this.model) {
            this.domElement.setAttribute('data-mode-id', this.model.getLanguageIdentifier().language);
            this._configuration.setIsDominatedByLongLines(this.model.isDominatedByLongLines());
            this.model.onBeforeAttached();
            var hardWrappingLineMapperFactory = new characterHardWrappingLineMapper_1.CharacterHardWrappingLineMapperFactory(this._configuration.editor.wrappingInfo.wordWrapBreakBeforeCharacters, this._configuration.editor.wrappingInfo.wordWrapBreakAfterCharacters, this._configuration.editor.wrappingInfo.wordWrapBreakObtrusiveCharacters);
            var linesCollection = new splitLinesCollection_1.SplitLinesCollection(this.model, hardWrappingLineMapperFactory, this.model.getOptions().tabSize, this._configuration.editor.wrappingInfo.wrappingColumn, this._configuration.editor.fontInfo.typicalFullwidthCharacterWidth / this._configuration.editor.fontInfo.typicalHalfwidthCharacterWidth, this._configuration.editor.wrappingInfo.wrappingIndent);
            this.viewModel = new viewModelImpl_1.ViewModel(linesCollection, this.id, this._configuration, this.model);
            var viewModelHelper = {
                viewModel: this.viewModel,
                coordinatesConverter: this.viewModel.coordinatesConverter,
                getCurrentCompletelyVisibleViewLinesRangeInViewport: function () {
                    return _this.viewModel.coordinatesConverter.convertModelRangeToViewRange(_this.getCompletelyVisibleLinesRangeInViewport());
                },
                getCurrentCompletelyVisibleModelLinesRangeInViewport: function () {
                    return _this.getCompletelyVisibleLinesRangeInViewport();
                },
            };
            this.listenersToRemove.push(this.model.addBulkListener(function (events) {
                for (var i = 0, len = events.length; i < len; i++) {
                    var eventType = events[i].getType();
                    var e = events[i].getData();
                    switch (eventType) {
                        case editorCommon.EventType.ModelDecorationsChanged:
                            _this.emit(editorCommon.EventType.ModelDecorationsChanged, e);
                            break;
                        case editorCommon.EventType.ModelLanguageChanged:
                            _this.domElement.setAttribute('data-mode-id', _this.model.getLanguageIdentifier().language);
                            _this.emit(editorCommon.EventType.ModelLanguageChanged, e);
                            break;
                        case editorCommon.EventType.ModelRawContentChanged:
                            _this.emit(editorCommon.EventType.ModelRawContentChanged, e);
                            break;
                        case editorCommon.EventType.ModelContentChanged2:
                            _this.emit(editorCommon.EventType.ModelContentChanged2, e);
                            break;
                        case editorCommon.EventType.ModelOptionsChanged:
                            _this.emit(editorCommon.EventType.ModelOptionsChanged, e);
                            break;
                        case editorCommon.EventType.ModelDispose:
                            // Someone might destroy the model from under the editor, so prevent any exceptions by setting a null model
                            _this.setModel(null);
                            break;
                        default:
                    }
                }
            }));
            this.cursor = new cursor_1.Cursor(this._configuration, this.model, viewModelHelper, this._enableEmptySelectionClipboard());
            this.viewModel.addEventSource(this.cursor);
            this._createView();
            this.listenersToRemove.push(this._getViewInternalEventBus().addBulkListener2(function (events) {
                for (var i = 0, len = events.length; i < len; i++) {
                    var eventType = events[i].getType();
                    var e = events[i].getData();
                    switch (eventType) {
                        case editorCommon.EventType.ViewFocusGained:
                            _this.emit(editorCommon.EventType.EditorTextFocus);
                            // In IE, the focus is not synchronous, so we give it a little help
                            _this.emit(editorCommon.EventType.EditorFocus, {});
                            break;
                        case 'scroll':
                            _this.emit('scroll', e);
                            break;
                        case editorCommon.EventType.ViewFocusLost:
                            _this.emit(editorCommon.EventType.EditorTextBlur);
                            break;
                        case editorCommon.EventType.ContextMenu:
                            _this.emit(editorCommon.EventType.ContextMenu, e);
                            break;
                        case editorCommon.EventType.MouseDown:
                            _this.emit(editorCommon.EventType.MouseDown, e);
                            break;
                        case editorCommon.EventType.MouseUp:
                            _this.emit(editorCommon.EventType.MouseUp, e);
                            break;
                        case editorCommon.EventType.MouseDrag:
                            _this.emit(editorCommon.EventType.MouseDrag, e);
                            break;
                        case editorCommon.EventType.MouseDrop:
                            _this.emit(editorCommon.EventType.MouseDrop, e);
                            break;
                        case editorCommon.EventType.KeyUp:
                            _this.emit(editorCommon.EventType.KeyUp, e);
                            break;
                        case editorCommon.EventType.MouseMove:
                            _this.emit(editorCommon.EventType.MouseMove, e);
                            break;
                        case editorCommon.EventType.MouseLeave:
                            _this.emit(editorCommon.EventType.MouseLeave, e);
                            break;
                        case editorCommon.EventType.KeyDown:
                            _this.emit(editorCommon.EventType.KeyDown, e);
                            break;
                        default:
                    }
                }
            }));
            this.listenersToRemove.push(this.cursor.addBulkListener2(function (events) {
                for (var i = 0, len = events.length; i < len; i++) {
                    var eventType = events[i].getType();
                    var e = events[i].getData();
                    switch (eventType) {
                        case editorCommon.EventType.CursorPositionChanged:
                            _this.emit(editorCommon.EventType.CursorPositionChanged, e);
                            break;
                        case editorCommon.EventType.CursorSelectionChanged:
                            _this.emit(editorCommon.EventType.CursorSelectionChanged, e);
                            break;
                        default:
                    }
                }
            }));
        }
        else {
            this.hasView = false;
        }
    };
    CommonCodeEditor.prototype._postDetachModelCleanup = function (detachedModel) {
        if (detachedModel) {
            this._decorationTypeKeysToIds = {};
            if (this._decorationTypeSubtypes) {
                for (var decorationType in this._decorationTypeSubtypes) {
                    var subTypes = this._decorationTypeSubtypes[decorationType];
                    for (var subType in subTypes) {
                        this._removeDecorationType(decorationType + '-' + subType);
                    }
                }
                this._decorationTypeSubtypes = {};
            }
            detachedModel.removeAllDecorationsWithOwnerId(this.id);
        }
    };
    CommonCodeEditor.prototype._detachModel = function () {
        if (this.model) {
            this.model.onBeforeDetached();
        }
        this.hasView = false;
        this.listenersToRemove = lifecycle_1.dispose(this.listenersToRemove);
        if (this.cursor) {
            this.cursor.dispose();
            this.cursor = null;
        }
        if (this.viewModel) {
            this.viewModel.dispose();
            this.viewModel = null;
        }
        var result = this.model;
        this.model = null;
        this.domElement.removeAttribute('data-mode-id');
        return result;
    };
    CommonCodeEditor.prototype.getTelemetryData = function () {
        return null;
    };
    return CommonCodeEditor;
}(eventEmitter_1.EventEmitter));
exports.CommonCodeEditor = CommonCodeEditor;
var EditorContextKeysManager = (function (_super) {
    __extends(EditorContextKeysManager, _super);
    function EditorContextKeysManager(editor, contextKeyService) {
        var _this = _super.call(this) || this;
        _this._editor = editor;
        _this._editorId = contextKeyService.createKey('editorId', editor.getId());
        _this._editorFocus = EditorContextKeys.Focus.bindTo(contextKeyService);
        _this._editorTextFocus = EditorContextKeys.TextFocus.bindTo(contextKeyService);
        _this._editorTabMovesFocus = EditorContextKeys.TabMovesFocus.bindTo(contextKeyService);
        _this._editorReadonly = EditorContextKeys.ReadOnly.bindTo(contextKeyService);
        _this._hasMultipleSelections = EditorContextKeys.HasMultipleSelections.bindTo(contextKeyService);
        _this._hasNonEmptySelection = EditorContextKeys.HasNonEmptySelection.bindTo(contextKeyService);
        _this._register(_this._editor.onDidChangeConfiguration(function () { return _this._updateFromConfig(); }));
        _this._register(_this._editor.onDidChangeCursorSelection(function () { return _this._updateFromSelection(); }));
        _this._register(_this._editor.onDidFocusEditor(function () { return _this._updateFromFocus(); }));
        _this._register(_this._editor.onDidBlurEditor(function () { return _this._updateFromFocus(); }));
        _this._register(_this._editor.onDidFocusEditorText(function () { return _this._updateFromFocus(); }));
        _this._register(_this._editor.onDidBlurEditorText(function () { return _this._updateFromFocus(); }));
        _this._updateFromConfig();
        _this._updateFromSelection();
        _this._updateFromFocus();
        return _this;
    }
    EditorContextKeysManager.prototype._updateFromConfig = function () {
        var config = this._editor.getConfiguration();
        this._editorTabMovesFocus.set(config.tabFocusMode);
        this._editorReadonly.set(config.readOnly);
    };
    EditorContextKeysManager.prototype._updateFromSelection = function () {
        var selections = this._editor.getSelections();
        if (!selections) {
            this._hasMultipleSelections.reset();
            this._hasNonEmptySelection.reset();
        }
        else {
            this._hasMultipleSelections.set(selections.length > 1);
            this._hasNonEmptySelection.set(selections.some(function (s) { return !s.isEmpty(); }));
        }
    };
    EditorContextKeysManager.prototype._updateFromFocus = function () {
        this._editorFocus.set(this._editor.hasWidgetFocus());
        this._editorTextFocus.set(this._editor.isFocused());
    };
    return EditorContextKeysManager;
}(lifecycle_1.Disposable));
