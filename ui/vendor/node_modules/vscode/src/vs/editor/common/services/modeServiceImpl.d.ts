import Event from 'vs/base/common/event';
import { TPromise } from 'vs/base/common/winjs.base';
import { IExtensionPoint } from 'vs/platform/extensions/common/extensionsRegistry';
import { IMode, LanguageId, LanguageIdentifier } from 'vs/editor/common/modes';
import { ILanguageExtensionPoint, IModeLookupResult, IModeService } from 'vs/editor/common/services/modeService';
export declare const languagesExtPoint: IExtensionPoint<ILanguageExtensionPoint[]>;
export declare class ModeServiceImpl implements IModeService {
    _serviceBrand: any;
    private _instantiatedModes;
    private _registry;
    private _onDidAddModes;
    onDidAddModes: Event<string[]>;
    private _onDidCreateMode;
    onDidCreateMode: Event<IMode>;
    constructor();
    protected _onReady(): TPromise<boolean>;
    isRegisteredMode(mimetypeOrModeId: string): boolean;
    getRegisteredModes(): string[];
    getRegisteredLanguageNames(): string[];
    getExtensions(alias: string): string[];
    getFilenames(alias: string): string[];
    getMimeForMode(modeId: string): string;
    getLanguageName(modeId: string): string;
    getModeIdForLanguageName(alias: string): string;
    getModeIdByFilenameOrFirstLine(filename: string, firstLine?: string): string;
    getModeId(commaSeparatedMimetypesOrCommaSeparatedIds: string): string;
    getLanguageIdentifier(modeId: string | LanguageId): LanguageIdentifier;
    getConfigurationFiles(modeId: string): string[];
    lookup(commaSeparatedMimetypesOrCommaSeparatedIds: string): IModeLookupResult[];
    getMode(commaSeparatedMimetypesOrCommaSeparatedIds: string): IMode;
    getOrCreateMode(commaSeparatedMimetypesOrCommaSeparatedIds: string): TPromise<IMode>;
    getOrCreateModeByLanguageName(languageName: string): TPromise<IMode>;
    private _getModeIdByLanguageName(languageName);
    getOrCreateModeByFilenameOrFirstLine(filename: string, firstLine?: string): TPromise<IMode>;
    private _getOrCreateMode(modeId);
}
