/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var errors_1 = require("vs/base/common/errors");
var cursorCommon_1 = require("vs/editor/common/controller/cursorCommon");
var position_1 = require("vs/editor/common/core/position");
var range_1 = require("vs/editor/common/core/range");
var selection_1 = require("vs/editor/common/core/selection");
var editorCommon = require("vs/editor/common/editorCommon");
var cursorMoveOperations_1 = require("vs/editor/common/controller/cursorMoveOperations");
var cursorWordOperations_1 = require("vs/editor/common/controller/cursorWordOperations");
var MoveOperationResult = (function () {
    function MoveOperationResult(modelState, viewState, ensureInEditableRange, reason) {
        this.modelState = modelState;
        this.viewState = viewState;
        this.ensureInEditableRange = ensureInEditableRange;
        this.reason = reason;
    }
    return MoveOperationResult;
}());
exports.MoveOperationResult = MoveOperationResult;
var OneCursor = (function () {
    function OneCursor(model, configuration, modeConfiguration, viewModelHelper) {
        var _this = this;
        this.model = model;
        this.configuration = configuration;
        this.modeConfiguration = modeConfiguration;
        this.viewModelHelper = viewModelHelper;
        this.coordinatesConverter = viewModelHelper.coordinatesConverter;
        this.viewModel = this.viewModelHelper.viewModel;
        this._recreateCursorConfig();
        this._modelOptionsListener = model.onDidChangeOptions(function () { return _this._recreateCursorConfig(); });
        this._configChangeListener = this.configuration.onDidChange(function (e) {
            if (cursorCommon_1.CursorConfiguration.shouldRecreate(e)) {
                _this._recreateCursorConfig();
            }
        });
        this._setState(new cursorCommon_1.SingleCursorState(new range_1.Range(1, 1, 1, 1), 0, new position_1.Position(1, 1), 0), new cursorCommon_1.SingleCursorState(new range_1.Range(1, 1, 1, 1), 0, new position_1.Position(1, 1), 0), false);
    }
    /**
     * Sometimes, the line mapping changes and the stored view position is stale.
     */
    OneCursor.prototype.ensureValidState = function () {
        this._setState(this.modelState, this.viewState, false);
    };
    OneCursor.prototype._recreateCursorConfig = function () {
        this.config = new cursorCommon_1.CursorConfiguration(this.model.getOneIndent(), this.model.getOptions(), this.configuration, this.modeConfiguration);
    };
    OneCursor.prototype._ensureInEditableRange = function (position) {
        var editableRange = this.model.getEditableRange();
        if (position.lineNumber < editableRange.startLineNumber || (position.lineNumber === editableRange.startLineNumber && position.column < editableRange.startColumn)) {
            return new position_1.Position(editableRange.startLineNumber, editableRange.startColumn);
        }
        else if (position.lineNumber > editableRange.endLineNumber || (position.lineNumber === editableRange.endLineNumber && position.column > editableRange.endColumn)) {
            return new position_1.Position(editableRange.endLineNumber, editableRange.endColumn);
        }
        return position;
    };
    OneCursor.prototype._setState = function (modelState, viewState, ensureInEditableRange) {
        // Validate new model state
        var selectionStart = this.model.validateRange(modelState.selectionStart);
        var selectionStartLeftoverVisibleColumns = modelState.selectionStart.equalsRange(selectionStart) ? modelState.selectionStartLeftoverVisibleColumns : 0;
        var position = this.model.validatePosition(modelState.position);
        if (ensureInEditableRange) {
            position = this._ensureInEditableRange(position);
        }
        var leftoverVisibleColumns = modelState.position.equals(position) ? modelState.leftoverVisibleColumns : 0;
        modelState = new cursorCommon_1.SingleCursorState(selectionStart, selectionStartLeftoverVisibleColumns, position, leftoverVisibleColumns);
        // Validate new view state
        var viewSelectionStart = this.coordinatesConverter.validateViewRange(viewState.selectionStart, modelState.selectionStart);
        var viewPosition = this.coordinatesConverter.validateViewPosition(viewState.position, modelState.position);
        viewState = new cursorCommon_1.SingleCursorState(viewSelectionStart, selectionStartLeftoverVisibleColumns, viewPosition, leftoverVisibleColumns);
        if (this.modelState && this.viewState && this.modelState.equals(modelState) && this.viewState.equals(viewState)) {
            // No-op, early return
            return;
        }
        this.modelState = modelState;
        this.viewState = viewState;
        this._selStartMarker = this._ensureMarker(this._selStartMarker, this.modelState.selection.startLineNumber, this.modelState.selection.startColumn, true);
        this._selEndMarker = this._ensureMarker(this._selEndMarker, this.modelState.selection.endLineNumber, this.modelState.selection.endColumn, false);
    };
    OneCursor.prototype._ensureMarker = function (markerId, lineNumber, column, stickToPreviousCharacter) {
        if (!markerId) {
            return this.model._addMarker(0, lineNumber, column, stickToPreviousCharacter);
        }
        else {
            this.model._changeMarker(markerId, lineNumber, column);
            this.model._changeMarkerStickiness(markerId, stickToPreviousCharacter);
            return markerId;
        }
    };
    OneCursor.prototype.saveState = function () {
        return {
            selectionStart: this.modelState.selectionStart,
            viewSelectionStart: this.viewState.selectionStart,
            position: this.modelState.position,
            viewPosition: this.viewState.position,
            leftoverVisibleColumns: this.modelState.leftoverVisibleColumns,
            selectionStartLeftoverVisibleColumns: this.modelState.selectionStartLeftoverVisibleColumns
        };
    };
    OneCursor.prototype.restoreState = function (state) {
        var position = this.model.validatePosition(state.position);
        var selectionStart;
        if (state.selectionStart) {
            selectionStart = this.model.validateRange(state.selectionStart);
        }
        else {
            selectionStart = new range_1.Range(position.lineNumber, position.column, position.lineNumber, position.column);
        }
        var viewPosition = this.coordinatesConverter.validateViewPosition(new position_1.Position(state.viewPosition.lineNumber, state.viewPosition.column), position);
        var viewSelectionStart;
        if (state.viewSelectionStart) {
            viewSelectionStart = this.coordinatesConverter.validateViewRange(new range_1.Range(state.viewSelectionStart.startLineNumber, state.viewSelectionStart.startColumn, state.viewSelectionStart.endLineNumber, state.viewSelectionStart.endColumn), selectionStart);
        }
        else {
            viewSelectionStart = this.coordinatesConverter.convertModelRangeToViewRange(selectionStart);
        }
        this._setState(new cursorCommon_1.SingleCursorState(selectionStart, state.selectionStartLeftoverVisibleColumns, position, state.leftoverVisibleColumns), new cursorCommon_1.SingleCursorState(viewSelectionStart, state.selectionStartLeftoverVisibleColumns, viewPosition, state.leftoverVisibleColumns), false);
    };
    OneCursor.prototype.updateModeConfiguration = function (modeConfiguration) {
        this.modeConfiguration = modeConfiguration;
        this._recreateCursorConfig();
    };
    OneCursor.prototype.duplicate = function () {
        var result = new OneCursor(this.model, this.configuration, this.modeConfiguration, this.viewModelHelper);
        result._setState(this.modelState, this.viewState, false);
        return result;
    };
    OneCursor.prototype.dispose = function () {
        this._modelOptionsListener.dispose();
        this._configChangeListener.dispose();
        this.model._removeMarker(this._selStartMarker);
        this.model._removeMarker(this._selEndMarker);
    };
    OneCursor.prototype.setSelection = function (selection, viewSelection) {
        if (viewSelection === void 0) { viewSelection = null; }
        var position = this.model.validatePosition({
            lineNumber: selection.positionLineNumber,
            column: selection.positionColumn
        });
        var selectionStart = this.model.validatePosition({
            lineNumber: selection.selectionStartLineNumber,
            column: selection.selectionStartColumn
        });
        var viewPosition;
        var viewSelectionStart;
        if (viewSelection) {
            viewPosition = this.coordinatesConverter.validateViewPosition(new position_1.Position(viewSelection.positionLineNumber, viewSelection.positionColumn), position);
            viewSelectionStart = this.coordinatesConverter.validateViewPosition(new position_1.Position(viewSelection.selectionStartLineNumber, viewSelection.selectionStartColumn), selectionStart);
        }
        else {
            viewPosition = this.coordinatesConverter.convertModelPositionToViewPosition(position);
            viewSelectionStart = this.coordinatesConverter.convertModelPositionToViewPosition(selectionStart);
        }
        this._setState(new cursorCommon_1.SingleCursorState(new range_1.Range(selectionStart.lineNumber, selectionStart.column, selectionStart.lineNumber, selectionStart.column), 0, position, 0), new cursorCommon_1.SingleCursorState(new range_1.Range(viewSelectionStart.lineNumber, viewSelectionStart.column, viewSelectionStart.lineNumber, viewSelectionStart.column), 0, viewPosition, 0), false);
    };
    // -------------------- START modifications
    OneCursor.prototype.setSelectionStart = function (range) {
        this._setState(this.modelState.withSelectionStart(range), this.viewState.withSelectionStart(this.coordinatesConverter.convertModelRangeToViewRange(range)), false);
    };
    OneCursor.prototype.collapseSelection = function () {
        this._setState(this.modelState.collapse(), this.viewState.collapse(), false);
    };
    OneCursor.prototype.moveModelPosition = function (inSelectionMode, lineNumber, column, leftoverVisibleColumns, ensureInEditableRange) {
        var viewPosition = this.coordinatesConverter.convertModelPositionToViewPosition(new position_1.Position(lineNumber, column));
        this._move(inSelectionMode, lineNumber, column, viewPosition.lineNumber, viewPosition.column, leftoverVisibleColumns, ensureInEditableRange);
    };
    OneCursor.prototype.moveViewPosition = function (inSelectionMode, viewLineNumber, viewColumn, leftoverVisibleColumns, ensureInEditableRange) {
        var modelPosition = this.coordinatesConverter.convertViewPositionToModelPosition(new position_1.Position(viewLineNumber, viewColumn));
        this._move(inSelectionMode, modelPosition.lineNumber, modelPosition.column, viewLineNumber, viewColumn, leftoverVisibleColumns, ensureInEditableRange);
    };
    OneCursor.prototype._move = function (inSelectionMode, lineNumber, column, viewLineNumber, viewColumn, leftoverVisibleColumns, ensureInEditableRange) {
        this._setState(this.modelState.move(inSelectionMode, new position_1.Position(lineNumber, column), leftoverVisibleColumns), this.viewState.move(inSelectionMode, new position_1.Position(viewLineNumber, viewColumn), leftoverVisibleColumns), ensureInEditableRange);
    };
    OneCursor.prototype.setState = function (modelState, viewState, ensureInEditableRange) {
        this._setState(modelState, viewState, ensureInEditableRange);
    };
    OneCursor.prototype.beginRecoverSelectionFromMarkers = function () {
        var start = this.model._getMarker(this._selStartMarker);
        var end = this.model._getMarker(this._selEndMarker);
        if (this.modelState.selection.getDirection() === selection_1.SelectionDirection.LTR) {
            return new selection_1.Selection(start.lineNumber, start.column, end.lineNumber, end.column);
        }
        return new selection_1.Selection(end.lineNumber, end.column, start.lineNumber, start.column);
    };
    OneCursor.prototype.endRecoverSelectionFromMarkers = function (ctx, recoveredSelection) {
        ctx.cursorPositionChangeReason = editorCommon.CursorChangeReason.RecoverFromMarkers;
        ctx.shouldPushStackElementBefore = true;
        ctx.shouldPushStackElementAfter = true;
        ctx.shouldReveal = false;
        ctx.shouldRevealHorizontal = false;
        var selectionStart = new range_1.Range(recoveredSelection.selectionStartLineNumber, recoveredSelection.selectionStartColumn, recoveredSelection.selectionStartLineNumber, recoveredSelection.selectionStartColumn);
        var position = new position_1.Position(recoveredSelection.positionLineNumber, recoveredSelection.positionColumn);
        var viewSelectionStart = this.coordinatesConverter.convertModelRangeToViewRange(selectionStart);
        var viewPosition = this.coordinatesConverter.convertViewPositionToModelPosition(position);
        this._setState(new cursorCommon_1.SingleCursorState(selectionStart, 0, position, 0), new cursorCommon_1.SingleCursorState(viewSelectionStart, 0, viewPosition, 0), false);
        return true;
    };
    // -------------------- END modifications
    // -------------------- START reading API
    OneCursor.prototype.setSelectionStartLeftoverVisibleColumns = function (value) {
        this._setState(this.modelState.withSelectionStartLeftoverVisibleColumns(value), this.viewState.withSelectionStartLeftoverVisibleColumns(value), false);
    };
    // -- utils
    OneCursor.prototype.validatePosition = function (position) {
        return this.model.validatePosition(position);
    };
    OneCursor.prototype.validateViewPosition = function (viewLineNumber, viewColumn, modelPosition) {
        return this.coordinatesConverter.validateViewPosition(new position_1.Position(viewLineNumber, viewColumn), modelPosition);
    };
    OneCursor.prototype.convertViewSelectionToModelSelection = function (viewSelection) {
        return this.coordinatesConverter.convertViewSelectionToModelSelection(viewSelection);
    };
    OneCursor.prototype.convertViewToModelPosition = function (lineNumber, column) {
        return this.coordinatesConverter.convertViewPositionToModelPosition(new position_1.Position(lineNumber, column));
    };
    OneCursor.prototype.convertModelPositionToViewPosition = function (lineNumber, column) {
        return this.coordinatesConverter.convertModelPositionToViewPosition(new position_1.Position(lineNumber, column));
    };
    // -- model
    OneCursor.prototype.getRangeToRevealModelLinesBeforeViewPortTop = function (noOfLinesBeforeTop) {
        var visibleModelRange = this.viewModelHelper.getCurrentCompletelyVisibleModelLinesRangeInViewport();
        var startLineNumber;
        if (this.model.getLineMinColumn(visibleModelRange.startLineNumber) !== visibleModelRange.startColumn) {
            // Start line is partially visible by wrapping so reveal start line
            startLineNumber = visibleModelRange.startLineNumber;
        }
        else {
            // Reveal previous line
            startLineNumber = visibleModelRange.startLineNumber - 1;
        }
        startLineNumber -= (noOfLinesBeforeTop - 1);
        startLineNumber = this.model.validateRange({ startLineNumber: startLineNumber, startColumn: 1, endLineNumber: startLineNumber, endColumn: 1 }).startLineNumber;
        var startColumn = this.model.getLineMinColumn(startLineNumber);
        var endColumn = this.model.getLineMaxColumn(visibleModelRange.startLineNumber);
        return new range_1.Range(startLineNumber, startColumn, startLineNumber, endColumn);
    };
    OneCursor.prototype.getRangeToRevealModelLinesAfterViewPortBottom = function (noOfLinesAfterBottom) {
        var visibleModelRange = this.viewModelHelper.getCurrentCompletelyVisibleModelLinesRangeInViewport();
        // Last line in the view port is not considered revealed because scroll bar would cover it
        // Hence consider last line to reveal in the range
        var startLineNumber = visibleModelRange.endLineNumber + (noOfLinesAfterBottom - 1);
        startLineNumber = this.model.validateRange({ startLineNumber: startLineNumber, startColumn: 1, endLineNumber: startLineNumber, endColumn: 1 }).startLineNumber;
        var startColumn = this.model.getLineMinColumn(startLineNumber);
        var endColumn = this.model.getLineMaxColumn(startLineNumber);
        return new range_1.Range(startLineNumber, startColumn, startLineNumber, endColumn);
    };
    OneCursor.prototype.getLineFromViewPortTop = function (lineFromTop) {
        if (lineFromTop === void 0) { lineFromTop = 1; }
        var visibleRange = this.viewModelHelper.getCurrentCompletelyVisibleModelLinesRangeInViewport();
        var startColumn = this.model.getLineMinColumn(visibleRange.startLineNumber);
        // Use next line if the first line is partially visible
        var visibleLineNumber = visibleRange.startColumn === startColumn ? visibleRange.startLineNumber : visibleRange.startLineNumber + 1;
        visibleLineNumber = visibleLineNumber + lineFromTop - 1;
        return visibleLineNumber > visibleRange.endLineNumber ? visibleRange.endLineNumber : visibleLineNumber;
    };
    OneCursor.prototype.getCenterLineInViewPort = function () {
        return Math.round((this.getLineFromViewPortTop() + this.getLineFromViewPortBottom() - 1) / 2);
    };
    OneCursor.prototype.getLineFromViewPortBottom = function (lineFromBottom) {
        if (lineFromBottom === void 0) { lineFromBottom = 1; }
        var visibleRange = this.viewModelHelper.getCurrentCompletelyVisibleModelLinesRangeInViewport();
        var visibleLineNumber = visibleRange.endLineNumber - (lineFromBottom - 1);
        return visibleLineNumber > visibleRange.startLineNumber ? visibleLineNumber : this.getLineFromViewPortTop();
    };
    // -- view
    OneCursor.prototype.isLastLineVisibleInViewPort = function () {
        return this.viewModel.getLineCount() <= this.getCompletelyVisibleViewLinesRangeInViewport().getEndPosition().lineNumber;
    };
    OneCursor.prototype.getCompletelyVisibleViewLinesRangeInViewport = function () {
        return this.viewModelHelper.getCurrentCompletelyVisibleViewLinesRangeInViewport();
    };
    OneCursor.prototype.getRevealViewLinesRangeInViewport = function () {
        var visibleRange = this.getCompletelyVisibleViewLinesRangeInViewport().cloneRange();
        if (!this.isLastLineVisibleInViewPort() && visibleRange.endLineNumber > visibleRange.startLineNumber) {
            visibleRange = new range_1.Range(visibleRange.startLineNumber, visibleRange.startColumn, visibleRange.endLineNumber - 1, this.viewModel.getLineLastNonWhitespaceColumn(visibleRange.endLineNumber - 1));
        }
        return visibleRange;
    };
    OneCursor.prototype.getNearestRevealViewPositionInViewport = function () {
        var position = this.viewState.position;
        var revealRange = this.getRevealViewLinesRangeInViewport();
        if (position.lineNumber < revealRange.startLineNumber) {
            return new position_1.Position(revealRange.startLineNumber, this.viewModel.getLineFirstNonWhitespaceColumn(revealRange.startLineNumber));
        }
        if (position.lineNumber > revealRange.endLineNumber) {
            return new position_1.Position(revealRange.endLineNumber, this.viewModel.getLineFirstNonWhitespaceColumn(revealRange.endLineNumber));
        }
        return position;
    };
    return OneCursor;
}());
exports.OneCursor = OneCursor;
var OneCursorOp = (function () {
    function OneCursorOp() {
    }
    // -------------------- START handlers that simply change cursor state
    OneCursorOp.moveTo = function (cursor, inSelectionMode, position, viewPosition, eventSource, ctx) {
        var validatedPosition = cursor.model.validatePosition(position);
        var validatedViewPosition;
        if (viewPosition) {
            validatedViewPosition = cursor.validateViewPosition(viewPosition.lineNumber, viewPosition.column, validatedPosition);
        }
        else {
            validatedViewPosition = cursor.convertModelPositionToViewPosition(validatedPosition.lineNumber, validatedPosition.column);
        }
        var reason = (eventSource === 'mouse' ? editorCommon.CursorChangeReason.Explicit : editorCommon.CursorChangeReason.NotSet);
        if (eventSource === 'api') {
            ctx.shouldRevealVerticalInCenter = true;
        }
        if (reason) {
            ctx.cursorPositionChangeReason = reason;
        }
        cursor.moveViewPosition(inSelectionMode, validatedViewPosition.lineNumber, validatedViewPosition.column, 0, false);
        return true;
    };
    OneCursorOp._getViewHalfLineSize = function (cursor, lineNumber) {
        return Math.round((cursor.viewModel.getLineMaxColumn(lineNumber) - cursor.viewModel.getLineMinColumn(lineNumber)) / 2);
    };
    OneCursorOp.move = function (cursor, moveParams, eventSource, ctx) {
        if (!moveParams.to) {
            errors_1.illegalArgument('to');
        }
        var inSelectionMode = !!moveParams.select;
        var validatedViewPosition = cursor.viewState.position;
        var viewLineNumber = validatedViewPosition.lineNumber;
        var viewColumn;
        switch (moveParams.to) {
            case editorCommon.CursorMovePosition.Left:
                return this._moveLeft(cursor, inSelectionMode, editorCommon.CursorMoveByUnit.HalfLine === moveParams.by ? this._getViewHalfLineSize(cursor, viewLineNumber) : moveParams.value, ctx);
            case editorCommon.CursorMovePosition.Right:
                return this._moveRight(cursor, inSelectionMode, editorCommon.CursorMoveByUnit.HalfLine === moveParams.by ? this._getViewHalfLineSize(cursor, viewLineNumber) : moveParams.value, ctx);
            case editorCommon.CursorMovePosition.Up:
                return this._moveUp(cursor, moveParams, ctx);
            case editorCommon.CursorMovePosition.Down:
                return this._moveDown(cursor, moveParams, ctx);
            case editorCommon.CursorMovePosition.WrappedLineStart:
                viewColumn = cursor.viewModel.getLineMinColumn(viewLineNumber);
                break;
            case editorCommon.CursorMovePosition.WrappedLineFirstNonWhitespaceCharacter:
                viewColumn = cursor.viewModel.getLineFirstNonWhitespaceColumn(viewLineNumber);
                break;
            case editorCommon.CursorMovePosition.WrappedLineColumnCenter:
                viewColumn = Math.round((cursor.viewModel.getLineMaxColumn(viewLineNumber) + cursor.viewModel.getLineMinColumn(viewLineNumber)) / 2);
                break;
            case editorCommon.CursorMovePosition.WrappedLineEnd:
                viewColumn = cursor.viewModel.getLineMaxColumn(viewLineNumber);
                break;
            case editorCommon.CursorMovePosition.WrappedLineLastNonWhitespaceCharacter:
                viewColumn = cursor.viewModel.getLineLastNonWhitespaceColumn(viewLineNumber);
                break;
            case editorCommon.CursorMovePosition.ViewPortTop:
                viewLineNumber = cursor.convertModelPositionToViewPosition(cursor.getLineFromViewPortTop(moveParams.value), 1).lineNumber;
                viewColumn = cursor.viewModel.getLineFirstNonWhitespaceColumn(viewLineNumber);
                break;
            case editorCommon.CursorMovePosition.ViewPortBottom:
                viewLineNumber = cursor.convertModelPositionToViewPosition(cursor.getLineFromViewPortBottom(moveParams.value), 1).lineNumber;
                ;
                viewColumn = cursor.viewModel.getLineFirstNonWhitespaceColumn(viewLineNumber);
                break;
            case editorCommon.CursorMovePosition.ViewPortCenter:
                viewLineNumber = cursor.convertModelPositionToViewPosition(cursor.getCenterLineInViewPort(), 1).lineNumber;
                ;
                viewColumn = cursor.viewModel.getLineFirstNonWhitespaceColumn(viewLineNumber);
                break;
            case editorCommon.CursorMovePosition.ViewPortIfOutside:
                var position = cursor.getNearestRevealViewPositionInViewport();
                viewLineNumber = position.lineNumber;
                viewColumn = position.column;
                break;
            default:
                return false;
        }
        ctx.cursorPositionChangeReason = editorCommon.CursorChangeReason.Explicit;
        cursor.moveViewPosition(inSelectionMode, viewLineNumber, viewColumn, 0, true);
        return true;
    };
    OneCursorOp._applyMoveOperationResult = function (cursor, ctx, r) {
        ctx.cursorPositionChangeReason = r.reason;
        cursor.setState(r.modelState, r.viewState, r.ensureInEditableRange);
        return true;
    };
    OneCursorOp._fromModelCursorState = function (cursor, r) {
        var viewSelectionStart1 = cursor.convertModelPositionToViewPosition(r.state.selectionStart.startLineNumber, r.state.selectionStart.startColumn);
        var viewSelectionStart2 = cursor.convertModelPositionToViewPosition(r.state.selectionStart.endLineNumber, r.state.selectionStart.endColumn);
        var viewSelectionStart = new range_1.Range(viewSelectionStart1.lineNumber, viewSelectionStart1.column, viewSelectionStart2.lineNumber, viewSelectionStart2.column);
        var viewPosition = cursor.convertModelPositionToViewPosition(r.state.position.lineNumber, r.state.position.column);
        return new MoveOperationResult(r.state, new cursorCommon_1.SingleCursorState(viewSelectionStart, r.state.selectionStartLeftoverVisibleColumns, viewPosition, r.state.leftoverVisibleColumns), r.ensureInEditableRange, r.reason);
    };
    OneCursorOp._fromViewCursorState = function (cursor, r) {
        var selectionStart1 = cursor.convertViewToModelPosition(r.state.selectionStart.startLineNumber, r.state.selectionStart.startColumn);
        var selectionStart2 = cursor.convertViewToModelPosition(r.state.selectionStart.endLineNumber, r.state.selectionStart.endColumn);
        var selectionStart = new range_1.Range(selectionStart1.lineNumber, selectionStart1.column, selectionStart2.lineNumber, selectionStart2.column);
        var position = cursor.convertViewToModelPosition(r.state.position.lineNumber, r.state.position.column);
        return new MoveOperationResult(new cursorCommon_1.SingleCursorState(selectionStart, r.state.selectionStartLeftoverVisibleColumns, position, r.state.leftoverVisibleColumns), r.state, r.ensureInEditableRange, r.reason);
    };
    OneCursorOp._moveLeft = function (cursor, inSelectionMode, noOfColumns, ctx) {
        if (noOfColumns === void 0) { noOfColumns = 1; }
        return this._applyMoveOperationResult(cursor, ctx, this._fromViewCursorState(cursor, cursorMoveOperations_1.MoveOperations.moveLeft(cursor.config, cursor.viewModel, cursor.viewState, inSelectionMode, noOfColumns)));
    };
    OneCursorOp.moveWordLeft = function (cursor, inSelectionMode, wordNavigationType, ctx) {
        return this._applyMoveOperationResult(cursor, ctx, this._fromModelCursorState(cursor, cursorWordOperations_1.WordOperations.moveWordLeft(cursor.config, cursor.model, cursor.modelState, inSelectionMode, wordNavigationType)));
    };
    OneCursorOp._moveRight = function (cursor, inSelectionMode, noOfColumns, ctx) {
        if (noOfColumns === void 0) { noOfColumns = 1; }
        return this._applyMoveOperationResult(cursor, ctx, this._fromViewCursorState(cursor, cursorMoveOperations_1.MoveOperations.moveRight(cursor.config, cursor.viewModel, cursor.viewState, inSelectionMode, noOfColumns)));
    };
    OneCursorOp.moveWordRight = function (cursor, inSelectionMode, wordNavigationType, ctx) {
        return this._applyMoveOperationResult(cursor, ctx, this._fromModelCursorState(cursor, cursorWordOperations_1.WordOperations.moveWordRight(cursor.config, cursor.model, cursor.modelState, inSelectionMode, wordNavigationType)));
    };
    OneCursorOp._moveDown = function (cursor, moveArguments, ctx) {
        var linesCount = (moveArguments.isPaged ? (moveArguments.pageSize || cursor.config.pageSize) : moveArguments.value) || 1;
        if (editorCommon.CursorMoveByUnit.WrappedLine === moveArguments.by) {
            return this._moveDownByViewLines(cursor, moveArguments.select, linesCount, ctx);
        }
        return this._moveDownByModelLines(cursor, moveArguments.select, linesCount, ctx);
    };
    OneCursorOp._moveDownByViewLines = function (cursor, inSelectionMode, linesCount, ctx) {
        return this._applyMoveOperationResult(cursor, ctx, this._fromViewCursorState(cursor, cursorMoveOperations_1.MoveOperations.moveDown(cursor.config, cursor.viewModel, cursor.viewState, inSelectionMode, linesCount)));
    };
    OneCursorOp._moveDownByModelLines = function (cursor, inSelectionMode, linesCount, ctx) {
        return this._applyMoveOperationResult(cursor, ctx, this._fromModelCursorState(cursor, cursorMoveOperations_1.MoveOperations.moveDown(cursor.config, cursor.model, cursor.modelState, inSelectionMode, linesCount)));
    };
    OneCursorOp.translateDown = function (cursor, ctx) {
        return this._applyMoveOperationResult(cursor, ctx, this._fromViewCursorState(cursor, cursorMoveOperations_1.MoveOperations.translateDown(cursor.config, cursor.viewModel, cursor.viewState)));
    };
    OneCursorOp._moveUp = function (cursor, moveArguments, ctx) {
        var linesCount = (moveArguments.isPaged ? (moveArguments.pageSize || cursor.config.pageSize) : moveArguments.value) || 1;
        if (editorCommon.CursorMoveByUnit.WrappedLine === moveArguments.by) {
            return this._moveUpByViewLines(cursor, moveArguments.select, linesCount, ctx);
        }
        return this._moveUpByModelLines(cursor, moveArguments.select, linesCount, ctx);
    };
    OneCursorOp._moveUpByViewLines = function (cursor, inSelectionMode, linesCount, ctx) {
        return this._applyMoveOperationResult(cursor, ctx, this._fromViewCursorState(cursor, cursorMoveOperations_1.MoveOperations.moveUp(cursor.config, cursor.viewModel, cursor.viewState, inSelectionMode, linesCount)));
    };
    OneCursorOp._moveUpByModelLines = function (cursor, inSelectionMode, linesCount, ctx) {
        return this._applyMoveOperationResult(cursor, ctx, this._fromModelCursorState(cursor, cursorMoveOperations_1.MoveOperations.moveUp(cursor.config, cursor.model, cursor.modelState, inSelectionMode, linesCount)));
    };
    OneCursorOp.translateUp = function (cursor, ctx) {
        return this._applyMoveOperationResult(cursor, ctx, this._fromViewCursorState(cursor, cursorMoveOperations_1.MoveOperations.translateUp(cursor.config, cursor.viewModel, cursor.viewState)));
    };
    OneCursorOp.moveToBeginningOfLine = function (cursor, inSelectionMode, ctx) {
        return this._applyMoveOperationResult(cursor, ctx, this._fromViewCursorState(cursor, cursorMoveOperations_1.MoveOperations.moveToBeginningOfLine(cursor.config, cursor.viewModel, cursor.viewState, inSelectionMode)));
    };
    OneCursorOp.moveToEndOfLine = function (cursor, inSelectionMode, ctx) {
        return this._applyMoveOperationResult(cursor, ctx, this._fromViewCursorState(cursor, cursorMoveOperations_1.MoveOperations.moveToEndOfLine(cursor.config, cursor.viewModel, cursor.viewState, inSelectionMode)));
    };
    OneCursorOp.expandLineSelection = function (cursor, ctx) {
        ctx.cursorPositionChangeReason = editorCommon.CursorChangeReason.Explicit;
        var viewSel = cursor.viewState.selection;
        var viewStartLineNumber = viewSel.startLineNumber;
        var viewEndLineNumber = viewSel.endLineNumber;
        var viewEndColumn = viewSel.endColumn;
        var moveResult = cursorMoveOperations_1.MoveOperations.down(cursor.config, cursor.viewModel, viewEndLineNumber, viewEndColumn, 0, 1, true);
        viewEndLineNumber = moveResult.lineNumber;
        // If we reach the last line of the document, select until the end of line too
        if (cursor.viewModel.getLineCount() === viewSel.endLineNumber) {
            viewEndColumn = cursor.viewModel.getLineMaxColumn(viewEndLineNumber);
        }
        else {
            viewEndColumn = 1;
        }
        cursor.moveViewPosition(false, viewStartLineNumber, 1, 0, true);
        cursor.moveViewPosition(true, viewEndLineNumber, viewEndColumn, 0, true);
        return true;
    };
    OneCursorOp.moveToBeginningOfBuffer = function (cursor, inSelectionMode, ctx) {
        return this._applyMoveOperationResult(cursor, ctx, this._fromModelCursorState(cursor, cursorMoveOperations_1.MoveOperations.moveToBeginningOfBuffer(cursor.config, cursor.model, cursor.modelState, inSelectionMode)));
    };
    OneCursorOp.moveToEndOfBuffer = function (cursor, inSelectionMode, ctx) {
        return this._applyMoveOperationResult(cursor, ctx, this._fromModelCursorState(cursor, cursorMoveOperations_1.MoveOperations.moveToEndOfBuffer(cursor.config, cursor.model, cursor.modelState, inSelectionMode)));
    };
    OneCursorOp.selectAll = function (cursor, ctx) {
        var selectEntireBuffer = true;
        var newSelectionStartLineNumber, newSelectionStartColumn, newPositionLineNumber, newPositionColumn;
        if (cursor.model.hasEditableRange()) {
            // Toggle between selecting editable range and selecting the entire buffer
            var editableRange = cursor.model.getEditableRange();
            var selection = cursor.modelState.selection;
            if (!selection.equalsRange(editableRange)) {
                // Selection is not editable range => select editable range
                selectEntireBuffer = false;
                newSelectionStartLineNumber = editableRange.startLineNumber;
                newSelectionStartColumn = editableRange.startColumn;
                newPositionLineNumber = editableRange.endLineNumber;
                newPositionColumn = editableRange.endColumn;
            }
        }
        if (selectEntireBuffer) {
            newSelectionStartLineNumber = 1;
            newSelectionStartColumn = 1;
            newPositionLineNumber = cursor.model.getLineCount();
            newPositionColumn = cursor.model.getLineMaxColumn(newPositionLineNumber);
        }
        cursor.moveModelPosition(false, newSelectionStartLineNumber, newSelectionStartColumn, 0, false);
        cursor.moveModelPosition(true, newPositionLineNumber, newPositionColumn, 0, false);
        ctx.shouldReveal = false;
        ctx.shouldRevealHorizontal = false;
        return true;
    };
    OneCursorOp.line = function (cursor, inSelectionMode, _position, _viewPosition, ctx) {
        // TODO@Alex -> select in editable range
        var position = cursor.validatePosition(_position);
        var viewPosition = (_viewPosition ?
            cursor.validateViewPosition(_viewPosition.lineNumber, _viewPosition.column, position)
            : cursor.convertModelPositionToViewPosition(position.lineNumber, position.column));
        ctx.cursorPositionChangeReason = editorCommon.CursorChangeReason.Explicit;
        ctx.shouldRevealHorizontal = false;
        if (!inSelectionMode || !cursor.modelState.hasSelection()) {
            // Entering line selection for the first time
            var selectToLineNumber = position.lineNumber + 1;
            var selectToColumn = 1;
            if (selectToLineNumber > cursor.model.getLineCount()) {
                selectToLineNumber = cursor.model.getLineCount();
                selectToColumn = cursor.model.getLineMaxColumn(selectToLineNumber);
            }
            var selectionStartRange = new range_1.Range(position.lineNumber, 1, selectToLineNumber, selectToColumn);
            cursor.setSelectionStart(selectionStartRange);
            cursor.moveModelPosition(cursor.modelState.hasSelection(), selectionStartRange.endLineNumber, selectionStartRange.endColumn, 0, false);
            return true;
        }
        else {
            // Continuing line selection
            var enteringLineNumber = cursor.modelState.selectionStart.getStartPosition().lineNumber;
            if (position.lineNumber < enteringLineNumber) {
                cursor.moveViewPosition(cursor.modelState.hasSelection(), viewPosition.lineNumber, 1, 0, false);
            }
            else if (position.lineNumber > enteringLineNumber) {
                var selectToViewLineNumber = viewPosition.lineNumber + 1;
                var selectToViewColumn = 1;
                if (selectToViewLineNumber > cursor.viewModel.getLineCount()) {
                    selectToViewLineNumber = cursor.viewModel.getLineCount();
                    selectToViewColumn = cursor.viewModel.getLineMaxColumn(selectToViewLineNumber);
                }
                cursor.moveViewPosition(cursor.modelState.hasSelection(), selectToViewLineNumber, selectToViewColumn, 0, false);
            }
            else {
                var endPositionOfSelectionStart = cursor.modelState.selectionStart.getEndPosition();
                cursor.moveModelPosition(cursor.modelState.hasSelection(), endPositionOfSelectionStart.lineNumber, endPositionOfSelectionStart.column, 0, false);
            }
            return true;
        }
    };
    OneCursorOp.word = function (cursor, inSelectionMode, validatedPosition, ctx) {
        return this._applyMoveOperationResult(cursor, ctx, this._fromModelCursorState(cursor, cursorWordOperations_1.WordOperations.word(cursor.config, cursor.model, cursor.modelState, inSelectionMode, validatedPosition)));
    };
    OneCursorOp.cancelSelection = function (cursor, ctx) {
        if (!cursor.modelState.hasSelection()) {
            return false;
        }
        cursor.collapseSelection();
        return true;
    };
    return OneCursorOp;
}());
exports.OneCursorOp = OneCursorOp;
