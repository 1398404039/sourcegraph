/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var lifecycle_1 = require("vs/base/common/lifecycle");
var modes = require("vs/editor/common/modes");
var editorCommon_1 = require("vs/editor/common/editorCommon");
var EditorModeContext = (function () {
    function EditorModeContext(editor, contextKeyService) {
        var _this = this;
        this._disposables = [];
        this._editor = editor;
        this._langId = editorCommon_1.EditorContextKeys.LanguageId.bindTo(contextKeyService);
        this._hasCompletionItemProvider = editorCommon_1.ModeContextKeys.hasCompletionItemProvider.bindTo(contextKeyService);
        this._hasCodeActionsProvider = editorCommon_1.ModeContextKeys.hasCodeActionsProvider.bindTo(contextKeyService);
        this._hasCodeLensProvider = editorCommon_1.ModeContextKeys.hasCodeLensProvider.bindTo(contextKeyService);
        this._hasDefinitionProvider = editorCommon_1.ModeContextKeys.hasDefinitionProvider.bindTo(contextKeyService);
        this._hasHoverProvider = editorCommon_1.ModeContextKeys.hasHoverProvider.bindTo(contextKeyService);
        this._hasDocumentHighlightProvider = editorCommon_1.ModeContextKeys.hasDocumentHighlightProvider.bindTo(contextKeyService);
        this._hasDocumentSymbolProvider = editorCommon_1.ModeContextKeys.hasDocumentSymbolProvider.bindTo(contextKeyService);
        this._hasReferenceProvider = editorCommon_1.ModeContextKeys.hasReferenceProvider.bindTo(contextKeyService);
        this._hasRenameProvider = editorCommon_1.ModeContextKeys.hasRenameProvider.bindTo(contextKeyService);
        this._hasDocumentFormattingProvider = editorCommon_1.ModeContextKeys.hasDocumentFormattingProvider.bindTo(contextKeyService);
        this._hasDocumentSelectionFormattingProvider = editorCommon_1.ModeContextKeys.hasDocumentSelectionFormattingProvider.bindTo(contextKeyService);
        this._hasSignatureHelpProvider = editorCommon_1.ModeContextKeys.hasSignatureHelpProvider.bindTo(contextKeyService);
        // update when model/mode changes
        this._disposables.push(editor.onDidChangeModel(function () { return _this._update(); }));
        this._disposables.push(editor.onDidChangeModelMode(function () { return _this._update(); }));
        // update when registries change
        modes.SuggestRegistry.onDidChange(this._update, this, this._disposables);
        modes.CodeActionProviderRegistry.onDidChange(this._update, this, this._disposables);
        modes.CodeLensProviderRegistry.onDidChange(this._update, this, this._disposables);
        modes.DefinitionProviderRegistry.onDidChange(this._update, this, this._disposables);
        modes.HoverProviderRegistry.onDidChange(this._update, this, this._disposables);
        modes.DocumentHighlightProviderRegistry.onDidChange(this._update, this, this._disposables);
        modes.DocumentSymbolProviderRegistry.onDidChange(this._update, this, this._disposables);
        modes.ReferenceProviderRegistry.onDidChange(this._update, this, this._disposables);
        modes.RenameProviderRegistry.onDidChange(this._update, this, this._disposables);
        modes.DocumentFormattingEditProviderRegistry.onDidChange(this._update, this, this._disposables);
        modes.DocumentRangeFormattingEditProviderRegistry.onDidChange(this._update, this, this._disposables);
        modes.SignatureHelpProviderRegistry.onDidChange(this._update, this, this._disposables);
        this._update();
    }
    EditorModeContext.prototype.dispose = function () {
        this._disposables = lifecycle_1.dispose(this._disposables);
    };
    EditorModeContext.prototype.reset = function () {
        this._langId.reset();
        this._hasCompletionItemProvider.reset();
        this._hasCodeActionsProvider.reset();
        this._hasCodeLensProvider.reset();
        this._hasDefinitionProvider.reset();
        this._hasHoverProvider.reset();
        this._hasDocumentHighlightProvider.reset();
        this._hasDocumentSymbolProvider.reset();
        this._hasReferenceProvider.reset();
        this._hasRenameProvider.reset();
        this._hasDocumentFormattingProvider.reset();
        this._hasDocumentSelectionFormattingProvider.reset();
        this._hasSignatureHelpProvider.reset();
    };
    EditorModeContext.prototype._update = function () {
        var model = this._editor.getModel();
        if (!model) {
            this.reset();
            return;
        }
        this._langId.set(model.getModeId());
        this._hasCompletionItemProvider.set(modes.SuggestRegistry.has(model));
        this._hasCodeActionsProvider.set(modes.CodeActionProviderRegistry.has(model));
        this._hasCodeLensProvider.set(modes.CodeLensProviderRegistry.has(model));
        this._hasDefinitionProvider.set(modes.DefinitionProviderRegistry.has(model));
        this._hasHoverProvider.set(modes.HoverProviderRegistry.has(model));
        this._hasDocumentHighlightProvider.set(modes.DocumentHighlightProviderRegistry.has(model));
        this._hasDocumentSymbolProvider.set(modes.DocumentSymbolProviderRegistry.has(model));
        this._hasReferenceProvider.set(modes.ReferenceProviderRegistry.has(model));
        this._hasRenameProvider.set(modes.RenameProviderRegistry.has(model));
        this._hasSignatureHelpProvider.set(modes.SignatureHelpProviderRegistry.has(model));
        this._hasDocumentFormattingProvider.set(modes.DocumentFormattingEditProviderRegistry.has(model) || modes.DocumentRangeFormattingEditProviderRegistry.has(model));
        this._hasDocumentSelectionFormattingProvider.set(modes.DocumentRangeFormattingEditProviderRegistry.has(model));
    };
    return EditorModeContext;
}());
exports.EditorModeContext = EditorModeContext;
