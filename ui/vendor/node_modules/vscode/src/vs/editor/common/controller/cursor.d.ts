import { EventEmitter } from 'vs/base/common/eventEmitter';
import { IViewModelHelper } from 'vs/editor/common/controller/oneCursor';
import { Position } from 'vs/editor/common/core/position';
import { Selection } from 'vs/editor/common/core/selection';
import * as editorCommon from 'vs/editor/common/editorCommon';
export interface ITypingListener {
    (): void;
}
export declare class Cursor extends EventEmitter {
    private configuration;
    private model;
    private modelUnbinds;
    private cursors;
    private cursorUndoStack;
    private viewModelHelper;
    private _isHandling;
    private enableEmptySelectionClipboard;
    private _handlers;
    constructor(configuration: editorCommon.IConfiguration, model: editorCommon.IModel, viewModelHelper: IViewModelHelper, enableEmptySelectionClipboard: boolean);
    dispose(): void;
    saveState(): editorCommon.ICursorState[];
    restoreState(states: editorCommon.ICursorState[]): void;
    private _onModelLanguageChanged();
    private _onModelContentChanged(hadFlushEvent);
    getSelection(): Selection;
    getSelections(): Selection[];
    getPosition(): Position;
    setSelections(source: string, selections: editorCommon.ISelection[]): void;
    private _createAndInterpretHandlerCtx(eventSource, eventData, callback);
    private _onHandler(command, handler, source, data);
    private _interpretHandlerContext(ctx);
    private _interpretCommandResult(cursorState);
    private _getEditOperationsFromCommand(ctx, majorIdentifier, command, isAutoWhitespaceCommand);
    private _getEditOperations(ctx, commands, isAutoWhitespaceCommand);
    private _getLoserCursorMap(operations);
    private _collapseDeleteCommands(rawCmds, isAutoWhitespaceCommand);
    private _internalExecuteCommands(commands, isAutoWhitespaceCommand);
    private _arrayIsEmpty(commands);
    private _innerExecuteCommands(ctx, commands, isAutoWhitespaceCommand);
    private emitCursorPositionChanged(source, reason);
    private emitCursorSelectionChanged(source, reason);
    private emitCursorScrollRequest(deltaLines, revealCursor);
    private revealRange(revealTarget, verticalType, revealHorizontal);
    private emitCursorRevealRange(range, viewRange, verticalType, revealHorizontal, revealCursor);
    trigger(source: string, handlerId: string, payload: any): void;
    private _registerHandlers();
    private _invokeForAllSorted(ctx, callable, pushStackElementBefore?, pushStackElementAfter?);
    private _invokeForAll(ctx, callable, pushStackElementBefore?, pushStackElementAfter?);
    private _doInvokeForAll(ctx, sorted, callable, pushStackElementBefore?, pushStackElementAfter?);
    private _moveTo(inSelectionMode, ctx);
    private _cursorMove(ctx);
    private _columnSelectToLineNumber;
    private _getColumnSelectToLineNumber();
    private _columnSelectToVisualColumn;
    private _getColumnSelectToVisualColumn();
    private _columnSelectMouse(ctx);
    private _columnSelectOp(ctx, op);
    private _columnSelectLeft(ctx);
    private _columnSelectRight(ctx);
    private _columnSelectUp(isPaged, ctx);
    private _columnSelectDown(isPaged, ctx);
    private _createCursor(ctx);
    private _lastCursorMoveTo(ctx);
    private _addCursorUp(ctx);
    private _addCursorDown(ctx);
    private _moveLeft(inSelectionMode, ctx);
    private _moveWordLeft(inSelectionMode, wordNavigationType, ctx);
    private _moveRight(inSelectionMode, ctx);
    private _moveWordRight(inSelectionMode, wordNavigationType, ctx);
    private _moveDown(inSelectionMode, isPaged, ctx);
    private _moveUp(inSelectionMode, isPaged, ctx);
    private _moveToBeginningOfLine(inSelectionMode, ctx);
    private _moveToEndOfLine(inSelectionMode, ctx);
    private _moveToBeginningOfBuffer(inSelectionMode, ctx);
    private _moveToEndOfBuffer(inSelectionMode, ctx);
    private _selectAll(ctx);
    private _line(inSelectionMode, ctx);
    private _lastCursorLine(inSelectionMode, ctx);
    private _expandLineSelection(ctx);
    private _word(inSelectionMode, ctx);
    private _lastCursorWord(ctx);
    private _removeSecondaryCursors(ctx);
    private _cancelSelection(ctx);
    private _doApplyEdit(cursorIndex, oneCursor, oneCtx, callable);
    private _applyEditForAll(ctx, callable);
    private _applyEditForAllSorted(ctx, callable);
    private _lineInsertBefore(ctx);
    private _lineInsertAfter(ctx);
    private _lineBreakInsert(ctx);
    private _type(ctx);
    private _replacePreviousChar(ctx);
    private _tab(ctx);
    private _indent(ctx);
    private _outdent(ctx);
    private _distributePasteToCursors(ctx);
    private _paste(ctx);
    private _deleteLeft(ctx);
    private _deleteWordLeft(whitespaceHeuristics, wordNavigationType, ctx);
    private _deleteRight(ctx);
    private _deleteWordRight(whitespaceHeuristics, wordNavigationType, ctx);
    private _cut(ctx);
    private _revealLine(ctx);
    private _editorScroll(ctx);
    private _scrollUpOrDown(editorScrollArg, ctx);
    private _scrollByReveal(editorScrollArg, ctx);
    private _scrollUp(isPaged, ctx);
    private _scrollDown(isPaged, ctx);
    private _undo(ctx);
    private _cursorUndo(ctx);
    private _redo(ctx);
    private _externalExecuteCommand(ctx);
    private _externalExecuteCommands(ctx);
}
