import { IEventEmitter } from 'vs/base/common/eventEmitter';
import { IDisposable } from 'vs/base/common/lifecycle';
import { Position } from 'vs/editor/common/core/position';
import { Range } from 'vs/editor/common/core/range';
import { Selection } from 'vs/editor/common/core/selection';
import * as editorCommon from 'vs/editor/common/editorCommon';
import { MinimapLinesRenderingData, ViewLineRenderingData, ViewModelDecoration, IViewModel, ICoordinatesConverter } from 'vs/editor/common/viewModel/viewModel';
import { SplitLinesCollection } from 'vs/editor/common/viewModel/splitLinesCollection';
import * as viewEvents from 'vs/editor/common/view/viewEvents';
export declare class CoordinatesConverter implements ICoordinatesConverter {
    private readonly _lines;
    constructor(lines: SplitLinesCollection);
    convertViewPositionToModelPosition(viewPosition: Position): Position;
    convertViewRangeToModelRange(viewRange: Range): Range;
    convertViewSelectionToModelSelection(viewSelection: Selection): Selection;
    validateViewPosition(viewPosition: Position, expectedModelPosition: Position): Position;
    validateViewRange(viewRange: Range, expectedModelRange: Range): Range;
    convertModelPositionToViewPosition(modelPosition: Position): Position;
    convertModelRangeToViewRange(modelRange: Range): Range;
    convertModelSelectionToViewSelection(modelSelection: Selection): Selection;
    modelPositionIsVisible(modelPosition: Position): boolean;
}
export declare class ViewModel implements IViewModel {
    private readonly lines;
    private readonly editorId;
    private readonly configuration;
    private readonly model;
    readonly coordinatesConverter: ICoordinatesConverter;
    private listenersToRemove;
    private _toDispose;
    private readonly decorations;
    private readonly cursors;
    private _renderCustomLineNumbers;
    private _renderRelativeLineNumbers;
    private _lastCursorPosition;
    private _centeredViewLine;
    private _listeners;
    constructor(lines: SplitLinesCollection, editorId: number, configuration: editorCommon.IConfiguration, model: editorCommon.IModel);
    setHiddenAreas(ranges: editorCommon.IRange[]): void;
    private _setHiddenAreas(eventsCollector, ranges);
    dispose(): void;
    addEventListener(listener: (events: viewEvents.ViewEvent[]) => void): IDisposable;
    private _emit(events);
    private _onTabSizeChange(eventsCollector, newTabSize);
    private _onWrappingIndentChange(eventsCollector, newWrappingIndent);
    private _restoreCenteredModelRange(eventsCollector, range);
    private _onWrappingColumnChange(eventsCollector, newWrappingColumn, columnsForFullWidthChar);
    addEventSource(eventSource: IEventEmitter): void;
    private onEvents(events);
    private static _containsModelContentChangeEvent(events);
    private static _containsWrappingRelatedEvents(events);
    getCenteredRangeInViewport(): Range;
    private _onEvents(eventsCollector, events);
    private onModelFlushed(eventsCollector, e);
    private onModelDecorationsChanged(eventsCollector, e);
    private onModelLinesDeleted(eventsCollector, e);
    private onModelTokensChanged(eventsCollector, e);
    private onModelLineChanged(eventsCollector, e);
    private onModelLinesInserted(eventsCollector, e);
    private onCursorPositionChanged(eventsCollector, e);
    private onCursorSelectionChanged(eventsCollector, e);
    private onCursorRevealRange(eventsCollector, e);
    private onCursorScrollRequest(eventsCollector, e);
    getTabSize(): number;
    getLineCount(): number;
    /**
     * Gives a hint that a lot of requests are about to come in for these line numbers.
     */
    setViewport(startLineNumber: number, endLineNumber: number, centeredLineNumber: number): void;
    getLineIndentGuide(lineNumber: number): number;
    getLineContent(lineNumber: number): string;
    getLineMinColumn(lineNumber: number): number;
    getLineMaxColumn(lineNumber: number): number;
    getLineFirstNonWhitespaceColumn(lineNumber: number): number;
    getLineLastNonWhitespaceColumn(lineNumber: number): number;
    getLineRenderLineNumber(viewLineNumber: number): string;
    getDecorationsInViewport(visibleRange: Range): ViewModelDecoration[];
    getViewLineRenderingData(visibleRange: Range, lineNumber: number): ViewLineRenderingData;
    getMinimapLinesRenderingData(startLineNumber: number, endLineNumber: number, needed: boolean[]): MinimapLinesRenderingData;
    getAllOverviewRulerDecorations(): ViewModelDecoration[];
    getEOL(): string;
    getValueInRange(range: Range, eol: editorCommon.EndOfLinePreference): string;
    getModelLineContent(modelLineNumber: number): string;
    getModelLineMaxColumn(modelLineNumber: number): number;
    validateModelPosition(position: editorCommon.IPosition): Position;
    getPlainTextToCopy(ranges: Range[], enableEmptySelectionClipboard: boolean): string;
    getHTMLToCopy(viewRanges: Range[], enableEmptySelectionClipboard: boolean): string;
    private _getHTMLToCopy(modelRange, colorMap);
    private _getColorMap();
}
