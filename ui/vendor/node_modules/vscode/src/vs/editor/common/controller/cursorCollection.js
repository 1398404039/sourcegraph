/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var errors_1 = require("vs/base/common/errors");
var oneCursor_1 = require("vs/editor/common/controller/oneCursor");
var selection_1 = require("vs/editor/common/core/selection");
var languageConfigurationRegistry_1 = require("vs/editor/common/modes/languageConfigurationRegistry");
var CursorCollection = (function () {
    function CursorCollection(model, configuration, viewModelHelper) {
        this.model = model;
        this.configuration = configuration;
        this.viewModelHelper = viewModelHelper;
        this.modeConfiguration = this.getModeConfiguration();
        this.primaryCursor = new oneCursor_1.OneCursor(this.model, this.configuration, this.modeConfiguration, this.viewModelHelper);
        this.secondaryCursors = [];
        this.lastAddedCursorIndex = 0;
    }
    CursorCollection.prototype.dispose = function () {
        this.primaryCursor.dispose();
        this.killSecondaryCursors();
    };
    CursorCollection.prototype.ensureValidState = function () {
        this.primaryCursor.ensureValidState();
        for (var i = 0, len = this.secondaryCursors.length; i < len; i++) {
            this.secondaryCursors[i].ensureValidState();
        }
    };
    CursorCollection.prototype.saveState = function () {
        return {
            primary: this.primaryCursor.saveState(),
            secondary: this.secondaryCursors.map(function (c) { return c.saveState(); })
        };
    };
    CursorCollection.prototype.restoreState = function (state) {
        this.primaryCursor.restoreState(state.primary);
        this.killSecondaryCursors();
        for (var i = 0; i < state.secondary.length; i++) {
            this.addSecondaryCursor(null);
            this.secondaryCursors[i].restoreState(state.secondary[i]);
        }
    };
    CursorCollection.prototype.updateMode = function () {
        var _this = this;
        this.modeConfiguration = this.getModeConfiguration();
        this.getAll().forEach(function (cursor) {
            cursor.updateModeConfiguration(_this.modeConfiguration);
        });
    };
    CursorCollection.prototype.getAll = function () {
        var result = [];
        result.push(this.primaryCursor);
        result = result.concat(this.secondaryCursors);
        return result;
    };
    CursorCollection.prototype.getPosition = function (index) {
        if (index === 0) {
            return this.primaryCursor.modelState.position;
        }
        else {
            return this.secondaryCursors[index - 1].modelState.position;
        }
    };
    CursorCollection.prototype.getViewPosition = function (index) {
        if (index === 0) {
            return this.primaryCursor.viewState.position;
        }
        else {
            return this.secondaryCursors[index - 1].viewState.position;
        }
    };
    CursorCollection.prototype.getPositions = function () {
        var result = [];
        result.push(this.primaryCursor.modelState.position);
        for (var i = 0, len = this.secondaryCursors.length; i < len; i++) {
            result.push(this.secondaryCursors[i].modelState.position);
        }
        return result;
    };
    CursorCollection.prototype.getViewPositions = function () {
        var result = [];
        result.push(this.primaryCursor.viewState.position);
        for (var i = 0, len = this.secondaryCursors.length; i < len; i++) {
            result.push(this.secondaryCursors[i].viewState.position);
        }
        return result;
    };
    CursorCollection.prototype.getSelection = function (index) {
        if (index === 0) {
            return this.primaryCursor.modelState.selection;
        }
        else {
            return this.secondaryCursors[index - 1].modelState.selection;
        }
    };
    CursorCollection.prototype.getSelections = function () {
        var result = [];
        result.push(this.primaryCursor.modelState.selection);
        for (var i = 0, len = this.secondaryCursors.length; i < len; i++) {
            result.push(this.secondaryCursors[i].modelState.selection);
        }
        return result;
    };
    CursorCollection.prototype.getViewSelections = function () {
        var result = [];
        result.push(this.primaryCursor.viewState.selection);
        for (var i = 0, len = this.secondaryCursors.length; i < len; i++) {
            result.push(this.secondaryCursors[i].viewState.selection);
        }
        return result;
    };
    CursorCollection.prototype.setSelections = function (selections, viewSelections) {
        this.primaryCursor.setSelection(selections[0], viewSelections ? viewSelections[0] : null);
        this._setSecondarySelections(selections.slice(1), viewSelections ? viewSelections.slice(1) : null);
    };
    CursorCollection.prototype.killSecondaryCursors = function () {
        return (this._setSecondarySelections([], []) > 0);
    };
    CursorCollection.prototype.normalize = function () {
        this._mergeCursorsIfNecessary();
    };
    CursorCollection.prototype.addSecondaryCursor = function (selection) {
        var newCursor = new oneCursor_1.OneCursor(this.model, this.configuration, this.modeConfiguration, this.viewModelHelper);
        if (selection) {
            newCursor.setSelection(selection);
        }
        this.secondaryCursors.push(newCursor);
        this.lastAddedCursorIndex = this.secondaryCursors.length;
    };
    CursorCollection.prototype.duplicateCursors = function () {
        var newCursors = [];
        newCursors.push(this.primaryCursor.duplicate());
        for (var i = 0, len = this.secondaryCursors.length; i < len; i++) {
            newCursors.push(this.secondaryCursors[i].duplicate());
        }
        this.secondaryCursors = this.secondaryCursors.concat(newCursors);
        this.lastAddedCursorIndex = this.secondaryCursors.length;
    };
    CursorCollection.prototype.getLastAddedCursor = function () {
        if (this.secondaryCursors.length === 0 || this.lastAddedCursorIndex === 0) {
            return this.primaryCursor;
        }
        return this.secondaryCursors[this.lastAddedCursorIndex - 1];
    };
    /**
     * Creates or disposes secondary cursors as necessary to match the number of `secondarySelections`.
     * Return value:
     * 		- a positive number indicates the number of secondary cursors added
     * 		- a negative number indicates the number of secondary cursors removed
     * 		- 0 indicates that no changes have been done to the secondary cursors list
     */
    CursorCollection.prototype._setSecondarySelections = function (secondarySelections, viewSelections) {
        var secondaryCursorsLength = this.secondaryCursors.length;
        var secondarySelectionsLength = secondarySelections.length;
        var returnValue = secondarySelectionsLength - secondaryCursorsLength;
        if (secondaryCursorsLength < secondarySelectionsLength) {
            var createCnt = secondarySelectionsLength - secondaryCursorsLength;
            for (var i = 0; i < createCnt; i++) {
                this.addSecondaryCursor(null);
            }
        }
        else if (secondaryCursorsLength > secondarySelectionsLength) {
            var removeCnt = secondaryCursorsLength - secondarySelectionsLength;
            for (var i = 0; i < removeCnt; i++) {
                this._removeSecondaryCursor(this.secondaryCursors.length - 1);
            }
        }
        for (var i = 0; i < secondarySelectionsLength; i++) {
            if (secondarySelections[i]) {
                this.secondaryCursors[i].setSelection(secondarySelections[i], viewSelections ? viewSelections[i] : null);
            }
        }
        return returnValue;
    };
    CursorCollection.prototype._removeSecondaryCursor = function (removeIndex) {
        if (this.lastAddedCursorIndex >= removeIndex + 1) {
            this.lastAddedCursorIndex--;
        }
        this.secondaryCursors[removeIndex].dispose();
        this.secondaryCursors.splice(removeIndex, 1);
    };
    CursorCollection.prototype._mergeCursorsIfNecessary = function () {
        if (this.secondaryCursors.length === 0) {
            return;
        }
        var cursors = this.getAll();
        var sortedCursors = [];
        for (var i = 0; i < cursors.length; i++) {
            sortedCursors.push({
                index: i,
                selection: cursors[i].modelState.selection,
                viewSelection: cursors[i].viewState.selection
            });
        }
        sortedCursors.sort(function (a, b) {
            if (a.viewSelection.startLineNumber === b.viewSelection.startLineNumber) {
                return a.viewSelection.startColumn - b.viewSelection.startColumn;
            }
            return a.viewSelection.startLineNumber - b.viewSelection.startLineNumber;
        });
        for (var sortedCursorIndex = 0; sortedCursorIndex < sortedCursors.length - 1; sortedCursorIndex++) {
            var current = sortedCursors[sortedCursorIndex];
            var next = sortedCursors[sortedCursorIndex + 1];
            var currentViewSelection = current.viewSelection;
            var nextViewSelection = next.viewSelection;
            if (nextViewSelection.getStartPosition().isBeforeOrEqual(currentViewSelection.getEndPosition())) {
                var winnerSortedCursorIndex = current.index < next.index ? sortedCursorIndex : sortedCursorIndex + 1;
                var looserSortedCursorIndex = current.index < next.index ? sortedCursorIndex + 1 : sortedCursorIndex;
                var looserIndex = sortedCursors[looserSortedCursorIndex].index;
                var winnerIndex = sortedCursors[winnerSortedCursorIndex].index;
                var looserSelection = sortedCursors[looserSortedCursorIndex].selection;
                var winnerSelection = sortedCursors[winnerSortedCursorIndex].selection;
                if (!looserSelection.equalsSelection(winnerSelection)) {
                    var resultingRange = looserSelection.plusRange(winnerSelection);
                    var looserSelectionIsLTR = (looserSelection.selectionStartLineNumber === looserSelection.startLineNumber && looserSelection.selectionStartColumn === looserSelection.startColumn);
                    var winnerSelectionIsLTR = (winnerSelection.selectionStartLineNumber === winnerSelection.startLineNumber && winnerSelection.selectionStartColumn === winnerSelection.startColumn);
                    // Give more importance to the last added cursor (think Ctrl-dragging + hitting another cursor)
                    var resultingSelectionIsLTR;
                    if (looserIndex === this.lastAddedCursorIndex) {
                        resultingSelectionIsLTR = looserSelectionIsLTR;
                        this.lastAddedCursorIndex = winnerIndex;
                    }
                    else {
                        // Winner takes it all
                        resultingSelectionIsLTR = winnerSelectionIsLTR;
                    }
                    var resultingSelection;
                    if (resultingSelectionIsLTR) {
                        resultingSelection = new selection_1.Selection(resultingRange.startLineNumber, resultingRange.startColumn, resultingRange.endLineNumber, resultingRange.endColumn);
                    }
                    else {
                        resultingSelection = new selection_1.Selection(resultingRange.endLineNumber, resultingRange.endColumn, resultingRange.startLineNumber, resultingRange.startColumn);
                    }
                    sortedCursors[winnerSortedCursorIndex].selection = resultingSelection;
                    cursors[winnerIndex].setSelection(resultingSelection);
                }
                for (var j = 0; j < sortedCursors.length; j++) {
                    if (sortedCursors[j].index > looserIndex) {
                        sortedCursors[j].index--;
                    }
                }
                cursors.splice(looserIndex, 1);
                sortedCursors.splice(looserSortedCursorIndex, 1);
                this._removeSecondaryCursor(looserIndex - 1);
                sortedCursorIndex--;
            }
        }
    };
    CursorCollection.prototype.getModeConfiguration = function () {
        var i;
        var result = {
            electricChars: {},
            autoClosingPairsOpen: {},
            autoClosingPairsClose: {},
            surroundingPairs: {}
        };
        var electricChars = null;
        try {
            electricChars = languageConfigurationRegistry_1.LanguageConfigurationRegistry.getElectricCharacters(this.model.getLanguageIdentifier().id);
        }
        catch (e) {
            errors_1.onUnexpectedError(e);
            electricChars = null;
        }
        if (electricChars) {
            for (i = 0; i < electricChars.length; i++) {
                result.electricChars[electricChars[i]] = true;
            }
        }
        var autoClosingPairs;
        try {
            autoClosingPairs = languageConfigurationRegistry_1.LanguageConfigurationRegistry.getAutoClosingPairs(this.model.getLanguageIdentifier().id);
        }
        catch (e) {
            errors_1.onUnexpectedError(e);
            autoClosingPairs = null;
        }
        if (autoClosingPairs) {
            for (i = 0; i < autoClosingPairs.length; i++) {
                result.autoClosingPairsOpen[autoClosingPairs[i].open] = autoClosingPairs[i].close;
                result.autoClosingPairsClose[autoClosingPairs[i].close] = autoClosingPairs[i].open;
            }
        }
        var surroundingPairs;
        try {
            surroundingPairs = languageConfigurationRegistry_1.LanguageConfigurationRegistry.getSurroundingPairs(this.model.getLanguageIdentifier().id);
        }
        catch (e) {
            errors_1.onUnexpectedError(e);
            surroundingPairs = null;
        }
        if (surroundingPairs) {
            for (i = 0; i < surroundingPairs.length; i++) {
                result.surroundingPairs[surroundingPairs[i].open] = surroundingPairs[i].close;
            }
        }
        return result;
    };
    return CursorCollection;
}());
exports.CursorCollection = CursorCollection;
