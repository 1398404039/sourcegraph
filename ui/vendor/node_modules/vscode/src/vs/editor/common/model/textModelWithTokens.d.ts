import { Range } from 'vs/editor/common/core/range';
import * as editorCommon from 'vs/editor/common/editorCommon';
import { TextModel } from 'vs/editor/common/model/textModel';
import { TokenIterator } from 'vs/editor/common/model/tokenIterator';
import { LanguageId, LanguageIdentifier } from 'vs/editor/common/modes';
import { LineTokens } from 'vs/editor/common/core/lineTokens';
import { ITextSource, IRawTextSource } from 'vs/editor/common/model/textSource';
export declare class TextModelWithTokens extends TextModel implements editorCommon.ITokenizedModel {
    private static MODE_TOKENIZATION_FAILED_MSG;
    private _languageIdentifier;
    private _tokenizationListener;
    private _tokenizationSupport;
    private _invalidLineStartIndex;
    private _lastState;
    private _revalidateTokensTimeout;
    constructor(allowedEventTypes: string[], rawTextSource: IRawTextSource, creationOptions: editorCommon.ITextModelCreationOptions, languageIdentifier: LanguageIdentifier);
    dispose(): void;
    protected _shouldAutoTokenize(): boolean;
    protected _resetValue(newValue: ITextSource): void;
    protected _resetTokenizationState(): void;
    private _clearTimers();
    private _withModelTokensChangedEventBuilder<T>(callback);
    forceTokenization(lineNumber: number): void;
    getLineTokens(lineNumber: number): LineTokens;
    private _getLineTokens(lineNumber);
    getLanguageIdentifier(): LanguageIdentifier;
    getModeId(): string;
    setMode(languageIdentifier: LanguageIdentifier): void;
    getLanguageIdAtPosition(_lineNumber: number, _column: number): LanguageId;
    protected _invalidateLine(lineIndex: number): void;
    private _beginBackgroundTokenization();
    _warmUpTokens(): void;
    private _revalidateTokensNow(toLineNumber?);
    private _updateTokensUntilLine(eventBuilder, lineNumber);
    private emitModelTokensChangedEvent(e);
    private _emitModelModeChangedEvent(e);
    getWordAtPosition(_position: editorCommon.IPosition): editorCommon.IWordAtPosition;
    getWordUntilPosition(position: editorCommon.IPosition): editorCommon.IWordAtPosition;
    tokenIterator(position: editorCommon.IPosition, callback: (it: TokenIterator) => any): any;
    findMatchingBracketUp(_bracket: string, _position: editorCommon.IPosition): Range;
    matchBracket(position: editorCommon.IPosition): [Range, Range];
    private _matchBracket(position);
    private _matchFoundBracket(foundBracket, data, isOpen);
    private _findMatchingBracketUp(bracket, position);
    private _findMatchingBracketDown(bracket, position);
    findPrevBracket(_position: editorCommon.IPosition): editorCommon.IFoundBracket;
    findNextBracket(_position: editorCommon.IPosition): editorCommon.IFoundBracket;
    private _toFoundBracket(modeBrackets, r);
}
