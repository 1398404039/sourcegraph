import { SingleCursorState, EditOperationResult, CursorConfiguration, ICursorSimpleModel } from 'vs/editor/common/controller/cursorCommon';
import { Position } from 'vs/editor/common/core/position';
import { SingleMoveOperationResult } from 'vs/editor/common/controller/cursorMoveOperations';
export interface IFindWordResult {
    /**
     * The index where the word starts.
     */
    start: number;
    /**
     * The index where the word ends.
     */
    end: number;
    /**
     * The word type.
     */
    wordType: WordType;
}
export declare const enum WordType {
    None = 0,
    Regular = 1,
    Separator = 2,
}
export declare const enum WordNavigationType {
    WordStart = 0,
    WordEnd = 1,
}
export declare class WordOperations {
    private static _createWord(lineContent, wordType, start, end);
    static findPreviousWordOnLine(config: CursorConfiguration, model: ICursorSimpleModel, position: Position): IFindWordResult;
    private static _findPreviousWordOnLine(lineContent, wordSeparators, position);
    private static _findEndOfWord(lineContent, wordSeparators, wordType, startIndex);
    static findNextWordOnLine(config: CursorConfiguration, model: ICursorSimpleModel, position: Position): IFindWordResult;
    private static _findNextWordOnLine(lineContent, wordSeparators, position);
    private static _findStartOfWord(lineContent, wordSeparators, wordType, startIndex);
    static moveWordLeft(config: CursorConfiguration, model: ICursorSimpleModel, cursor: SingleCursorState, inSelectionMode: boolean, wordNavigationType: WordNavigationType): SingleMoveOperationResult;
    static moveWordRight(config: CursorConfiguration, model: ICursorSimpleModel, cursor: SingleCursorState, inSelectionMode: boolean, wordNavigationType: WordNavigationType): SingleMoveOperationResult;
    private static _deleteWordLeftWhitespace(config, model, cursor);
    static deleteWordLeft(config: CursorConfiguration, model: ICursorSimpleModel, cursor: SingleCursorState, whitespaceHeuristics: boolean, wordNavigationType: WordNavigationType): EditOperationResult;
    private static _findFirstNonWhitespaceChar(str, startIndex);
    private static _deleteWordRightWhitespace(config, model, cursor);
    static deleteWordRight(config: CursorConfiguration, model: ICursorSimpleModel, cursor: SingleCursorState, whitespaceHeuristics: boolean, wordNavigationType: WordNavigationType): EditOperationResult;
    static word(config: CursorConfiguration, model: ICursorSimpleModel, cursor: SingleCursorState, inSelectionMode: boolean, position: Position): SingleMoveOperationResult;
}
