import { TPromise } from 'vs/base/common/winjs.base';
import { ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';
import { ICommandOptions, Command as ConfigBasicCommand, EditorCommand as ConfigEditorCommand } from 'vs/editor/common/config/config';
import { Position } from 'vs/editor/common/core/position';
import * as editorCommon from 'vs/editor/common/editorCommon';
import { IMenuItem } from 'vs/platform/actions/common/actions';
export declare type ServicesAccessor = ServicesAccessor;
export declare const Command: typeof ConfigBasicCommand;
export declare const EditorCommand: typeof ConfigEditorCommand;
export declare type ICommandOptions = ICommandOptions;
export interface IEditorCommandMenuOptions {
    group?: string;
    order?: number;
}
export interface IActionOptions extends ICommandOptions {
    label: string;
    alias: string;
    menuOpts?: IEditorCommandMenuOptions;
}
export declare abstract class EditorAction extends ConfigEditorCommand {
    label: string;
    alias: string;
    private menuOpts;
    constructor(opts: IActionOptions);
    toMenuItem(): IMenuItem;
    runEditorCommand(accessor: ServicesAccessor, editor: editorCommon.ICommonCodeEditor, args: any): void | TPromise<void>;
    protected reportTelemetry(accessor: ServicesAccessor, editor: editorCommon.ICommonCodeEditor): void;
    abstract run(accessor: ServicesAccessor, editor: editorCommon.ICommonCodeEditor, args: any): void | TPromise<void>;
}
export interface IHandlerActionOptions extends IActionOptions {
    handlerId: string;
}
export declare abstract class HandlerEditorAction extends EditorAction {
    private _handlerId;
    constructor(opts: IHandlerActionOptions);
    run(accessor: ServicesAccessor, editor: editorCommon.ICommonCodeEditor): void;
}
export declare function editorAction(ctor: {
    new (): EditorAction;
}): void;
export declare function commonEditorContribution(ctor: editorCommon.ICommonEditorContributionCtor): void;
export declare module CommonEditorRegistry {
    function registerEditorAction(desc: EditorAction): void;
    function getEditorActions(): EditorAction[];
    function getEditorContributions(): editorCommon.ICommonEditorContributionCtor[];
    function commandWeight(importance?: number): number;
    function registerEditorCommand(desc: ConfigBasicCommand): void;
    function registerLanguageCommand(id: string, handler: (accessor: ServicesAccessor, args: {
        [n: string]: any;
    }) => any): void;
    function registerDefaultLanguageCommand(id: string, handler: (model: editorCommon.IModel, position: Position, args: {
        [n: string]: any;
    }) => any): void;
}
