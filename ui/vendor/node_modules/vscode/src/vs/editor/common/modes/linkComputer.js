/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var characterClassifier_1 = require("vs/editor/common/core/characterClassifier");
var State;
(function (State) {
    State[State["Invalid"] = 0] = "Invalid";
    State[State["Start"] = 1] = "Start";
    State[State["H"] = 2] = "H";
    State[State["HT"] = 3] = "HT";
    State[State["HTT"] = 4] = "HTT";
    State[State["HTTP"] = 5] = "HTTP";
    State[State["F"] = 6] = "F";
    State[State["FI"] = 7] = "FI";
    State[State["FIL"] = 8] = "FIL";
    State[State["BeforeColon"] = 9] = "BeforeColon";
    State[State["AfterColon"] = 10] = "AfterColon";
    State[State["AlmostThere"] = 11] = "AlmostThere";
    State[State["End"] = 12] = "End";
    State[State["Accept"] = 13] = "Accept";
})(State || (State = {}));
var StateMachine = (function () {
    function StateMachine(edges) {
        var maxCharCode = 0;
        var maxState = 0 /* Invalid */;
        for (var i = 0, len = edges.length; i < len; i++) {
            var _a = edges[i], from = _a[0], chCode = _a[1], to = _a[2];
            if (chCode > maxCharCode) {
                maxCharCode = chCode;
            }
            if (from > maxState) {
                maxState = from;
            }
            if (to > maxState) {
                maxState = to;
            }
        }
        var states = [];
        for (var i = 0; i <= maxState; i++) {
            var tmp = [];
            for (var j = 0; j <= maxCharCode; j++) {
                tmp[j] = 0 /* Invalid */;
            }
            states[i] = tmp;
        }
        for (var i = 0, len = edges.length; i < len; i++) {
            var _b = edges[i], from = _b[0], chCode = _b[1], to = _b[2];
            states[from][chCode] = to;
        }
        this._states = states;
        this._maxCharCode = maxCharCode;
    }
    StateMachine.prototype.nextState = function (currentState, chCode) {
        if (chCode < 0 || chCode > this._maxCharCode) {
            return 0 /* Invalid */;
        }
        return this._states[currentState][chCode];
    };
    return StateMachine;
}());
// State machine for http:// or https:// or file://
var stateMachine = new StateMachine([
    [1 /* Start */, 104 /* h */, 2 /* H */],
    [1 /* Start */, 72 /* H */, 2 /* H */],
    [1 /* Start */, 102 /* f */, 6 /* F */],
    [1 /* Start */, 70 /* F */, 6 /* F */],
    [2 /* H */, 116 /* t */, 3 /* HT */],
    [2 /* H */, 84 /* T */, 3 /* HT */],
    [3 /* HT */, 116 /* t */, 4 /* HTT */],
    [3 /* HT */, 84 /* T */, 4 /* HTT */],
    [4 /* HTT */, 112 /* p */, 5 /* HTTP */],
    [4 /* HTT */, 80 /* P */, 5 /* HTTP */],
    [5 /* HTTP */, 115 /* s */, 9 /* BeforeColon */],
    [5 /* HTTP */, 83 /* S */, 9 /* BeforeColon */],
    [5 /* HTTP */, 58 /* Colon */, 10 /* AfterColon */],
    [6 /* F */, 105 /* i */, 7 /* FI */],
    [6 /* F */, 73 /* I */, 7 /* FI */],
    [7 /* FI */, 108 /* l */, 8 /* FIL */],
    [7 /* FI */, 76 /* L */, 8 /* FIL */],
    [8 /* FIL */, 101 /* e */, 9 /* BeforeColon */],
    [8 /* FIL */, 69 /* E */, 9 /* BeforeColon */],
    [9 /* BeforeColon */, 58 /* Colon */, 10 /* AfterColon */],
    [10 /* AfterColon */, 47 /* Slash */, 11 /* AlmostThere */],
    [11 /* AlmostThere */, 47 /* Slash */, 12 /* End */],
]);
var CharacterClass;
(function (CharacterClass) {
    CharacterClass[CharacterClass["None"] = 0] = "None";
    CharacterClass[CharacterClass["ForceTermination"] = 1] = "ForceTermination";
    CharacterClass[CharacterClass["CannotEndIn"] = 2] = "CannotEndIn";
})(CharacterClass || (CharacterClass = {}));
var classifier = (function () {
    var result = new characterClassifier_1.CharacterClassifier(0 /* None */);
    var FORCE_TERMINATION_CHARACTERS = ' \t<>\'\"、。｡､，．：；？！＠＃＄％＆＊‘“〈《「『【〔（［｛｢｣｝］）〕】』」》〉”’｀～…';
    for (var i = 0; i < FORCE_TERMINATION_CHARACTERS.length; i++) {
        result.set(FORCE_TERMINATION_CHARACTERS.charCodeAt(i), 1 /* ForceTermination */);
    }
    var CANNOT_END_WITH_CHARACTERS = '.,;';
    for (var i = 0; i < CANNOT_END_WITH_CHARACTERS.length; i++) {
        result.set(CANNOT_END_WITH_CHARACTERS.charCodeAt(i), 2 /* CannotEndIn */);
    }
    return result;
})();
var LinkComputer = (function () {
    function LinkComputer() {
    }
    LinkComputer._createLink = function (line, lineNumber, linkBeginIndex, linkEndIndex) {
        // Do not allow to end link in certain characters...
        var lastIncludedCharIndex = linkEndIndex - 1;
        do {
            var chCode = line.charCodeAt(lastIncludedCharIndex);
            var chClass = classifier.get(chCode);
            if (chClass !== 2 /* CannotEndIn */) {
                break;
            }
            lastIncludedCharIndex--;
        } while (lastIncludedCharIndex > linkBeginIndex);
        return {
            range: {
                startLineNumber: lineNumber,
                startColumn: linkBeginIndex + 1,
                endLineNumber: lineNumber,
                endColumn: lastIncludedCharIndex + 2
            },
            url: line.substring(linkBeginIndex, lastIncludedCharIndex + 1)
        };
    };
    LinkComputer.computeLinks = function (model) {
        var result = [];
        for (var i = 1, lineCount = model.getLineCount(); i <= lineCount; i++) {
            var line = model.getLineContent(i);
            var len = line.length;
            var j = 0;
            var linkBeginIndex = 0;
            var state = 1 /* Start */;
            var hasOpenParens = false;
            var hasOpenSquareBracket = false;
            var hasOpenCurlyBracket = false;
            while (j < len) {
                var resetStateMachine = false;
                var chCode = line.charCodeAt(j);
                if (state === 13 /* Accept */) {
                    var chClass = void 0;
                    switch (chCode) {
                        case 40 /* OpenParen */:
                            hasOpenParens = true;
                            chClass = 0 /* None */;
                            break;
                        case 41 /* CloseParen */:
                            chClass = (hasOpenParens ? 0 /* None */ : 1 /* ForceTermination */);
                            break;
                        case 91 /* OpenSquareBracket */:
                            hasOpenSquareBracket = true;
                            chClass = 0 /* None */;
                            break;
                        case 93 /* CloseSquareBracket */:
                            chClass = (hasOpenSquareBracket ? 0 /* None */ : 1 /* ForceTermination */);
                            break;
                        case 123 /* OpenCurlyBrace */:
                            hasOpenCurlyBracket = true;
                            chClass = 0 /* None */;
                            break;
                        case 125 /* CloseCurlyBrace */:
                            chClass = (hasOpenCurlyBracket ? 0 /* None */ : 1 /* ForceTermination */);
                            break;
                        default:
                            chClass = classifier.get(chCode);
                    }
                    // Check if character terminates link
                    if (chClass === 1 /* ForceTermination */) {
                        result.push(LinkComputer._createLink(line, i, linkBeginIndex, j));
                        resetStateMachine = true;
                    }
                }
                else if (state === 12 /* End */) {
                    var chClass = classifier.get(chCode);
                    // Check if character terminates link
                    if (chClass === 1 /* ForceTermination */) {
                        resetStateMachine = true;
                    }
                    else {
                        state = 13 /* Accept */;
                    }
                }
                else {
                    state = stateMachine.nextState(state, chCode);
                    if (state === 0 /* Invalid */) {
                        resetStateMachine = true;
                    }
                }
                if (resetStateMachine) {
                    state = 1 /* Start */;
                    hasOpenParens = false;
                    hasOpenSquareBracket = false;
                    hasOpenCurlyBracket = false;
                    // Record where the link started
                    linkBeginIndex = j + 1;
                }
                j++;
            }
            if (state === 13 /* Accept */) {
                result.push(LinkComputer._createLink(line, i, linkBeginIndex, len));
            }
        }
        return result;
    };
    return LinkComputer;
}());
/**
 * Returns an array of all links contains in the provided
 * document. *Note* that this operation is computational
 * expensive and should not run in the UI thread.
 */
function computeLinks(model) {
    if (!model || typeof model.getLineCount !== 'function' || typeof model.getLineContent !== 'function') {
        // Unknown caller!
        return [];
    }
    return LinkComputer.computeLinks(model);
}
exports.computeLinks = computeLinks;
