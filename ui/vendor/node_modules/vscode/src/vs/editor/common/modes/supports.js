/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var modeTransition_1 = require("vs/editor/common/core/modeTransition");
var RawLineTokens = (function () {
    function RawLineTokens(tokens, modeTransitions, actualStopOffset, endState) {
        this.tokens = tokens;
        this.modeTransitions = modeTransitions;
        this.actualStopOffset = actualStopOffset;
        this.endState = endState;
        this.retokenize = null;
    }
    return RawLineTokens;
}());
exports.RawLineTokens = RawLineTokens;
function createScopedLineTokens(context, offset) {
    var modeTransitions = context.modeTransitions;
    if (modeTransitions.length === 1) {
        return new ScopedLineTokens(context, modeTransitions[0].modeId, 0, context.getTokenCount(), 0, context.getLineContent().length);
    }
    var modeIndex = modeTransition_1.ModeTransition.findIndexInSegmentsArray(modeTransitions, offset);
    var nestedModeId = modeTransitions[modeIndex].modeId;
    var modeStartIndex = modeTransitions[modeIndex].startIndex;
    var firstTokenIndex = context.findTokenIndexAtOffset(modeStartIndex);
    var lastCharOffset = -1;
    var lastTokenIndex = -1;
    if (modeIndex + 1 < modeTransitions.length) {
        lastTokenIndex = context.findTokenIndexAtOffset(modeTransitions[modeIndex + 1].startIndex);
        lastCharOffset = context.getTokenStartOffset(lastTokenIndex);
    }
    else {
        lastTokenIndex = context.getTokenCount();
        lastCharOffset = context.getLineContent().length;
    }
    var firstCharOffset = context.getTokenStartOffset(firstTokenIndex);
    return new ScopedLineTokens(context, nestedModeId, firstTokenIndex, lastTokenIndex, firstCharOffset, lastCharOffset);
}
exports.createScopedLineTokens = createScopedLineTokens;
var ScopedLineTokens = (function () {
    function ScopedLineTokens(actual, modeId, firstTokenIndex, lastTokenIndex, firstCharOffset, lastCharOffset) {
        this._actual = actual;
        this.modeId = modeId;
        this._firstTokenIndex = firstTokenIndex;
        this._lastTokenIndex = lastTokenIndex;
        this.firstCharOffset = firstCharOffset;
        this._lastCharOffset = lastCharOffset;
    }
    ScopedLineTokens.prototype.getLineContent = function () {
        var actualLineContent = this._actual.getLineContent();
        return actualLineContent.substring(this.firstCharOffset, this._lastCharOffset);
    };
    ScopedLineTokens.prototype.getTokenCount = function () {
        return this._lastTokenIndex - this._firstTokenIndex;
    };
    ScopedLineTokens.prototype.findTokenIndexAtOffset = function (offset) {
        return this._actual.findTokenIndexAtOffset(offset + this.firstCharOffset) - this._firstTokenIndex;
    };
    ScopedLineTokens.prototype.getTokenStartOffset = function (tokenIndex) {
        return this._actual.getTokenStartOffset(tokenIndex + this._firstTokenIndex) - this.firstCharOffset;
    };
    ScopedLineTokens.prototype.getStandardTokenType = function (tokenIndex) {
        return this._actual.getStandardTokenType(tokenIndex + this._firstTokenIndex);
    };
    return ScopedLineTokens;
}());
exports.ScopedLineTokens = ScopedLineTokens;
var IgnoreBracketsInTokens;
(function (IgnoreBracketsInTokens) {
    IgnoreBracketsInTokens[IgnoreBracketsInTokens["value"] = 7] = "value";
})(IgnoreBracketsInTokens || (IgnoreBracketsInTokens = {}));
function ignoreBracketsInToken(standardTokenType) {
    return (standardTokenType & 7 /* value */) !== 0;
}
exports.ignoreBracketsInToken = ignoreBracketsInToken;
