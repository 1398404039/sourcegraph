import { CharacterPairSupport } from 'vs/editor/common/modes/supports/characterPair';
import { BracketElectricCharacterSupport, IElectricAction } from 'vs/editor/common/modes/supports/electricCharacter';
import { OnEnterSupport } from 'vs/editor/common/modes/supports/onEnter';
import { RichEditBrackets } from 'vs/editor/common/modes/supports/richEditBrackets';
import Event from 'vs/base/common/event';
import { ITokenizedModel } from 'vs/editor/common/editorCommon';
import { IDisposable } from 'vs/base/common/lifecycle';
import { LineTokens } from 'vs/editor/common/core/lineTokens';
import { Range } from 'vs/editor/common/core/range';
import { IndentAction, EnterAction, IAutoClosingPair, LanguageConfiguration, IndentationRule } from 'vs/editor/common/modes/languageConfiguration';
import { LanguageIdentifier, LanguageId } from 'vs/editor/common/modes';
/**
 * Interface used to support insertion of mode specific comments.
 */
export interface ICommentsConfiguration {
    lineCommentToken?: string;
    blockCommentStartToken?: string;
    blockCommentEndToken?: string;
}
export declare class RichEditSupport {
    private readonly _conf;
    readonly electricCharacter: BracketElectricCharacterSupport;
    readonly comments: ICommentsConfiguration;
    readonly characterPair: CharacterPairSupport;
    readonly wordDefinition: RegExp;
    readonly onEnter: OnEnterSupport;
    readonly brackets: RichEditBrackets;
    readonly indentationRules: IndentationRule;
    constructor(languageIdentifier: LanguageIdentifier, previous: RichEditSupport, rawConf: LanguageConfiguration);
    private static _mergeConf(prev, current);
    private static _handleOnEnter(conf);
    private static _handleComments(conf);
}
export declare class LanguageConfigurationRegistryImpl {
    private _entries;
    private _onDidChange;
    onDidChange: Event<void>;
    constructor();
    register(languageIdentifier: LanguageIdentifier, configuration: LanguageConfiguration): IDisposable;
    private _getRichEditSupport(languageId);
    getIndentationRules(languageId: LanguageId): IndentationRule;
    private _getElectricCharacterSupport(languageId);
    getElectricCharacters(languageId: LanguageId): string[];
    /**
     * Should return opening bracket type to match indentation with
     */
    onElectricCharacter(character: string, context: LineTokens, column: number): IElectricAction;
    getComments(languageId: LanguageId): ICommentsConfiguration;
    private _getCharacterPairSupport(languageId);
    getAutoClosingPairs(languageId: LanguageId): IAutoClosingPair[];
    getSurroundingPairs(languageId: LanguageId): IAutoClosingPair[];
    shouldAutoClosePair(character: string, context: LineTokens, column: number): boolean;
    getWordDefinition(languageId: LanguageId): RegExp;
    private _getOnEnterSupport(languageId);
    getRawEnterActionAtPosition(model: ITokenizedModel, lineNumber: number, column: number): EnterAction;
    getEnterAction(model: ITokenizedModel, range: Range): {
        enterAction: EnterAction;
        indentation: string;
        ignoreCurrentLine: boolean;
    };
    private getIndentationAtPosition(model, lineNumber, column);
    private getLastValidLine(model, lineNumber, onEnterSupport);
    private getLineContent(model, lineNumber);
    private getScopedLineTokens(model, lineNumber);
    getGoodIndentActionForLine(model: ITokenizedModel, lineNumber: number): {
        indentation: string;
        action: IndentAction;
    };
    getBracketsSupport(languageId: LanguageId): RichEditBrackets;
}
export declare const LanguageConfigurationRegistry: LanguageConfigurationRegistryImpl;
