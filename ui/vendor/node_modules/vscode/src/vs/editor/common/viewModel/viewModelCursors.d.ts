import * as editorCommon from 'vs/editor/common/editorCommon';
import { Position } from 'vs/editor/common/core/position';
import { ICoordinatesConverter, ViewEventsCollector } from 'vs/editor/common/viewModel/viewModel';
import { Selection } from 'vs/editor/common/core/selection';
export interface ICursorPositionChangedEvent {
    readonly position: Position;
    readonly viewPosition: Position;
    readonly secondaryPositions: Position[];
    readonly secondaryViewPositions: Position[];
    readonly isInEditableRange: boolean;
}
export interface ICursorSelectionChangedEvent {
    readonly selection: Selection;
    readonly viewSelection: Selection;
    readonly secondarySelections: Selection[];
    readonly secondaryViewSelections: Selection[];
}
export declare class ViewModelCursors {
    private readonly configuration;
    private readonly coordinatesConverter;
    private lastCursorPositionChangedEvent;
    private lastCursorSelectionChangedEvent;
    constructor(configuration: editorCommon.IConfiguration, coordinatesConverter: ICoordinatesConverter);
    /**
     * Limit position to be somewhere where it can actually be rendered
     */
    private static _toPositionThatCanBeRendered(position, stopRenderingLineAfter);
    onCursorPositionChanged(eventsCollector: ViewEventsCollector, e: ICursorPositionChangedEvent): void;
    onCursorSelectionChanged(eventsCollector: ViewEventsCollector, e: ICursorSelectionChangedEvent): void;
    onCursorRevealRange(eventsCollector: ViewEventsCollector, e: editorCommon.ICursorRevealRangeEvent): void;
    onLineMappingChanged(eventsCollector: ViewEventsCollector): void;
    onCursorScrollRequest(eventsCollector: ViewEventsCollector, e: editorCommon.ICursorScrollRequestEvent): void;
}
