/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var nls = require("vs/nls");
var event_1 = require("vs/base/common/event");
var lifecycle_1 = require("vs/base/common/lifecycle");
var objects = require("vs/base/common/objects");
var platform = require("vs/base/common/platform");
var configurationRegistry_1 = require("vs/platform/configuration/common/configurationRegistry");
var platform_1 = require("vs/platform/platform");
var defaultConfig_1 = require("vs/editor/common/config/defaultConfig");
var editorCommon = require("vs/editor/common/editorCommon");
var editorLayoutProvider_1 = require("vs/editor/common/viewLayout/editorLayoutProvider");
var scrollable_1 = require("vs/base/common/scrollable");
// TODO@Alex: investigate if it is better to stick to 31 bits (see smi = SMall Integer)
// See https://thibaultlaurens.github.io/javascript/2013/04/29/how-the-v8-engine-works/#tagged-values
/**
 * MAX_INT that fits in 32 bits
 */
var MAX_SAFE_INT = 0x7fffffff;
/**
 * MIN_INT that fits in 32 bits
 */
var MIN_SAFE_INT = -0x80000000;
exports.EditorZoom = new (function () {
    function class_1() {
        this._zoomLevel = 0;
        this._onDidChangeZoomLevel = new event_1.Emitter();
        this.onDidChangeZoomLevel = this._onDidChangeZoomLevel.event;
    }
    class_1.prototype.getZoomLevel = function () {
        return this._zoomLevel;
    };
    class_1.prototype.setZoomLevel = function (zoomLevel) {
        zoomLevel = Math.min(Math.max(-9, zoomLevel), 9);
        if (this._zoomLevel === zoomLevel) {
            return;
        }
        this._zoomLevel = zoomLevel;
        this._onDidChangeZoomLevel.fire(this._zoomLevel);
    };
    return class_1;
}());
exports.TabFocus = new (function () {
    function class_2() {
        this._tabFocus = false;
        this._onDidChangeTabFocus = new event_1.Emitter();
        this.onDidChangeTabFocus = this._onDidChangeTabFocus.event;
    }
    class_2.prototype.getTabFocusMode = function () {
        return this._tabFocus;
    };
    class_2.prototype.setTabFocusMode = function (tabFocusMode) {
        if (this._tabFocus === tabFocusMode) {
            return;
        }
        this._tabFocus = tabFocusMode;
        this._onDidChangeTabFocus.fire(this._tabFocus);
    };
    return class_2;
}());
/**
 * Experimental screen reader support toggle
 */
var GlobalScreenReaderNVDA = (function () {
    function GlobalScreenReaderNVDA() {
    }
    GlobalScreenReaderNVDA.getValue = function () {
        return this._value;
    };
    GlobalScreenReaderNVDA.setValue = function (value) {
        if (this._value === value) {
            return;
        }
        this._value = value;
        this._onChange.fire(this._value);
    };
    return GlobalScreenReaderNVDA;
}());
GlobalScreenReaderNVDA._value = false;
GlobalScreenReaderNVDA._onChange = new event_1.Emitter();
GlobalScreenReaderNVDA.onChange = GlobalScreenReaderNVDA._onChange.event;
exports.GlobalScreenReaderNVDA = GlobalScreenReaderNVDA;
var ConfigurationWithDefaults = (function () {
    function ConfigurationWithDefaults(options) {
        this._editor = objects.clone(defaultConfig_1.DefaultConfig.editor);
        this._mergeOptionsIn(options);
    }
    ConfigurationWithDefaults.prototype.getEditorOptions = function () {
        return this._editor;
    };
    ConfigurationWithDefaults.prototype._mergeOptionsIn = function (newOptions) {
        this._editor = objects.mixin(this._editor, newOptions || {});
    };
    ConfigurationWithDefaults.prototype.updateOptions = function (newOptions) {
        // Apply new options
        this._mergeOptionsIn(newOptions);
    };
    return ConfigurationWithDefaults;
}());
exports.ConfigurationWithDefaults = ConfigurationWithDefaults;
var InternalEditorOptionsHelper = (function () {
    function InternalEditorOptionsHelper() {
    }
    InternalEditorOptionsHelper.createInternalEditorOptions = function (outerWidth, outerHeight, opts, fontInfo, editorClassName, isDominatedByLongLines, maxLineNumber, canUseTranslate3d) {
        var wrappingColumn = toInteger(opts.wrappingColumn, -1);
        var wordWrap = toBoolean(opts.wordWrap);
        var stopRenderingLineAfter;
        if (typeof opts.stopRenderingLineAfter !== 'undefined') {
            stopRenderingLineAfter = toInteger(opts.stopRenderingLineAfter, -1);
        }
        else if (wrappingColumn >= 0) {
            stopRenderingLineAfter = -1;
        }
        else {
            stopRenderingLineAfter = 10000;
        }
        var mouseWheelScrollSensitivity = toFloat(opts.mouseWheelScrollSensitivity, 1);
        var scrollbar = this._sanitizeScrollbarOpts(opts.scrollbar, mouseWheelScrollSensitivity);
        var glyphMargin = toBoolean(opts.glyphMargin);
        var lineNumbers = opts.lineNumbers;
        var lineNumbersMinChars = toInteger(opts.lineNumbersMinChars, 1);
        var lineDecorationsWidth;
        if (typeof opts.lineDecorationsWidth === 'string' && /^\d+(\.\d+)?ch$/.test(opts.lineDecorationsWidth)) {
            var multiple = parseFloat(opts.lineDecorationsWidth.substr(0, opts.lineDecorationsWidth.length - 2));
            lineDecorationsWidth = multiple * fontInfo.typicalHalfwidthCharacterWidth;
        }
        else {
            lineDecorationsWidth = toInteger(opts.lineDecorationsWidth, 0);
        }
        if (opts.folding) {
            lineDecorationsWidth += 16;
        }
        var renderLineNumbers;
        var renderCustomLineNumbers;
        var renderRelativeLineNumbers;
        // Compatibility with old true or false values
        if (lineNumbers === true) {
            lineNumbers = 'on';
        }
        else if (lineNumbers === false) {
            lineNumbers = 'off';
        }
        if (typeof lineNumbers === 'function') {
            renderLineNumbers = true;
            renderCustomLineNumbers = lineNumbers;
            renderRelativeLineNumbers = false;
        }
        else if (lineNumbers === 'relative') {
            renderLineNumbers = true;
            renderCustomLineNumbers = null;
            renderRelativeLineNumbers = true;
        }
        else if (lineNumbers === 'on') {
            renderLineNumbers = true;
            renderCustomLineNumbers = null;
            renderRelativeLineNumbers = false;
        }
        else {
            renderLineNumbers = false;
            renderCustomLineNumbers = null;
            renderRelativeLineNumbers = false;
        }
        var layoutInfo = editorLayoutProvider_1.EditorLayoutProvider.compute({
            outerWidth: outerWidth,
            outerHeight: outerHeight,
            showGlyphMargin: glyphMargin,
            lineHeight: fontInfo.lineHeight,
            showLineNumbers: renderLineNumbers,
            lineNumbersMinChars: lineNumbersMinChars,
            lineDecorationsWidth: lineDecorationsWidth,
            maxDigitWidth: fontInfo.maxDigitWidth,
            maxLineNumber: maxLineNumber,
            verticalScrollbarWidth: scrollbar.verticalScrollbarSize,
            horizontalScrollbarHeight: scrollbar.horizontalScrollbarSize,
            scrollbarArrowSize: scrollbar.arrowSize,
            verticalScrollbarHasArrows: scrollbar.verticalHasArrows
        });
        if (isDominatedByLongLines && wrappingColumn > 0) {
            // Force viewport width wrapping if model is dominated by long lines
            wrappingColumn = 0;
        }
        var bareWrappingInfo;
        if (wrappingColumn === 0) {
            // If viewport width wrapping is enabled
            bareWrappingInfo = {
                isViewportWrapping: true,
                wrappingColumn: Math.max(1, Math.floor((layoutInfo.contentWidth - layoutInfo.verticalScrollbarWidth) / fontInfo.typicalHalfwidthCharacterWidth))
            };
        }
        else if (wrappingColumn > 0 && wordWrap === true) {
            // Enable smart viewport wrapping
            bareWrappingInfo = {
                isViewportWrapping: true,
                wrappingColumn: Math.min(wrappingColumn, Math.floor((layoutInfo.contentWidth - layoutInfo.verticalScrollbarWidth) / fontInfo.typicalHalfwidthCharacterWidth))
            };
        }
        else if (wrappingColumn > 0) {
            // Wrapping is enabled
            bareWrappingInfo = {
                isViewportWrapping: false,
                wrappingColumn: wrappingColumn
            };
        }
        else {
            bareWrappingInfo = {
                isViewportWrapping: false,
                wrappingColumn: -1
            };
        }
        var wrappingInfo = new editorCommon.EditorWrappingInfo({
            isViewportWrapping: bareWrappingInfo.isViewportWrapping,
            wrappingColumn: bareWrappingInfo.wrappingColumn,
            wrappingIndent: wrappingIndentFromString(opts.wrappingIndent),
            wordWrapBreakBeforeCharacters: String(opts.wordWrapBreakBeforeCharacters),
            wordWrapBreakAfterCharacters: String(opts.wordWrapBreakAfterCharacters),
            wordWrapBreakObtrusiveCharacters: String(opts.wordWrapBreakObtrusiveCharacters),
        });
        var readOnly = toBoolean(opts.readOnly);
        var tabFocusMode = exports.TabFocus.getTabFocusMode();
        if (readOnly) {
            tabFocusMode = true;
        }
        var renderWhitespace = opts.renderWhitespace;
        // Compatibility with old true or false values
        if (renderWhitespace === true) {
            renderWhitespace = 'boundary';
        }
        else if (renderWhitespace === false) {
            renderWhitespace = 'none';
        }
        var renderLineHighlight = opts.renderLineHighlight;
        // Compatibility with old true or false values
        if (renderLineHighlight === true) {
            renderLineHighlight = 'line';
        }
        else if (renderLineHighlight === false) {
            renderLineHighlight = 'none';
        }
        var viewInfo = new editorCommon.InternalEditorViewOptions({
            theme: opts.theme,
            canUseTranslate3d: canUseTranslate3d,
            experimentalScreenReader: toBoolean(opts.experimentalScreenReader),
            rulers: toSortedIntegerArray(opts.rulers),
            ariaLabel: String(opts.ariaLabel),
            renderLineNumbers: renderLineNumbers,
            renderCustomLineNumbers: renderCustomLineNumbers,
            renderRelativeLineNumbers: renderRelativeLineNumbers,
            selectOnLineNumbers: toBoolean(opts.selectOnLineNumbers),
            glyphMargin: glyphMargin,
            revealHorizontalRightPadding: toInteger(opts.revealHorizontalRightPadding, 0),
            roundedSelection: toBoolean(opts.roundedSelection),
            overviewRulerLanes: toInteger(opts.overviewRulerLanes, 0, 3),
            cursorBlinking: cursorBlinkingStyleFromString(opts.cursorBlinking),
            mouseWheelZoom: toBoolean(opts.mouseWheelZoom),
            cursorStyle: cursorStyleFromString(opts.cursorStyle),
            hideCursorInOverviewRuler: toBoolean(opts.hideCursorInOverviewRuler),
            scrollBeyondLastLine: toBoolean(opts.scrollBeyondLastLine),
            editorClassName: editorClassName,
            stopRenderingLineAfter: stopRenderingLineAfter,
            renderWhitespace: renderWhitespace,
            renderControlCharacters: toBoolean(opts.renderControlCharacters),
            renderIndentGuides: toBoolean(opts.renderIndentGuides),
            renderLineHighlight: renderLineHighlight,
            scrollbar: scrollbar,
            fixedOverflowWidgets: toBoolean(opts.fixedOverflowWidgets)
        });
        var contribInfo = new editorCommon.EditorContribOptions({
            selectionClipboard: toBoolean(opts.selectionClipboard),
            hover: toBoolean(opts.hover),
            contextmenu: toBoolean(opts.contextmenu),
            quickSuggestions: toBoolean(opts.quickSuggestions),
            quickSuggestionsDelay: toInteger(opts.quickSuggestionsDelay),
            parameterHints: toBoolean(opts.parameterHints),
            iconsInSuggestions: toBoolean(opts.iconsInSuggestions),
            formatOnType: toBoolean(opts.formatOnType),
            suggestOnTriggerCharacters: toBoolean(opts.suggestOnTriggerCharacters),
            acceptSuggestionOnEnter: toBoolean(opts.acceptSuggestionOnEnter),
            snippetSuggestions: opts.snippetSuggestions,
            emptySelectionClipboard: opts.emptySelectionClipboard,
            tabCompletion: opts.tabCompletion,
            wordBasedSuggestions: opts.wordBasedSuggestions,
            suggestFontSize: opts.suggestFontSize,
            suggestLineHeight: opts.suggestLineHeight,
            selectionHighlight: toBoolean(opts.selectionHighlight),
            codeLens: opts.referenceInfos && opts.codeLens,
            folding: toBoolean(opts.folding),
        });
        return new editorCommon.InternalEditorOptions({
            lineHeight: fontInfo.lineHeight,
            readOnly: readOnly,
            wordSeparators: String(opts.wordSeparators),
            autoClosingBrackets: toBoolean(opts.autoClosingBrackets),
            useTabStops: toBoolean(opts.useTabStops),
            tabFocusMode: tabFocusMode,
            layoutInfo: layoutInfo,
            fontInfo: fontInfo,
            viewInfo: viewInfo,
            wrappingInfo: wrappingInfo,
            contribInfo: contribInfo,
        });
    };
    InternalEditorOptionsHelper._sanitizeScrollbarOpts = function (raw, mouseWheelScrollSensitivity) {
        var visibilityFromString = function (visibility) {
            switch (visibility) {
                case 'hidden':
                    return scrollable_1.ScrollbarVisibility.Hidden;
                case 'visible':
                    return scrollable_1.ScrollbarVisibility.Visible;
                default:
                    return scrollable_1.ScrollbarVisibility.Auto;
            }
        };
        var horizontalScrollbarSize = toIntegerWithDefault(raw.horizontalScrollbarSize, 10);
        var verticalScrollbarSize = toIntegerWithDefault(raw.verticalScrollbarSize, 14);
        return new editorCommon.InternalEditorScrollbarOptions({
            vertical: visibilityFromString(raw.vertical),
            horizontal: visibilityFromString(raw.horizontal),
            arrowSize: toIntegerWithDefault(raw.arrowSize, 11),
            useShadows: toBooleanWithDefault(raw.useShadows, true),
            verticalHasArrows: toBooleanWithDefault(raw.verticalHasArrows, false),
            horizontalHasArrows: toBooleanWithDefault(raw.horizontalHasArrows, false),
            horizontalScrollbarSize: horizontalScrollbarSize,
            horizontalSliderSize: toIntegerWithDefault(raw.horizontalSliderSize, horizontalScrollbarSize),
            verticalScrollbarSize: verticalScrollbarSize,
            verticalSliderSize: toIntegerWithDefault(raw.verticalSliderSize, verticalScrollbarSize),
            handleMouseWheel: toBooleanWithDefault(raw.handleMouseWheel, true),
            mouseWheelScrollSensitivity: mouseWheelScrollSensitivity
        });
    };
    return InternalEditorOptionsHelper;
}());
function toBoolean(value) {
    return value === 'false' ? false : Boolean(value);
}
function toBooleanWithDefault(value, defaultValue) {
    if (typeof value === 'undefined') {
        return defaultValue;
    }
    return toBoolean(value);
}
function toFloat(source, defaultValue) {
    var r = parseFloat(source);
    if (isNaN(r)) {
        r = defaultValue;
    }
    return r;
}
function toInteger(source, minimum, maximum) {
    if (minimum === void 0) { minimum = MIN_SAFE_INT; }
    if (maximum === void 0) { maximum = MAX_SAFE_INT; }
    var r = parseInt(source, 10);
    if (isNaN(r)) {
        r = 0;
    }
    r = Math.max(minimum, r);
    r = Math.min(maximum, r);
    return r | 0;
}
function toSortedIntegerArray(source) {
    if (!Array.isArray(source)) {
        return [];
    }
    var arrSource = source;
    var r = arrSource.map(function (el) { return toInteger(el); });
    r.sort();
    return r;
}
function wrappingIndentFromString(wrappingIndent) {
    if (wrappingIndent === 'indent') {
        return editorCommon.WrappingIndent.Indent;
    }
    else if (wrappingIndent === 'same') {
        return editorCommon.WrappingIndent.Same;
    }
    else {
        return editorCommon.WrappingIndent.None;
    }
}
function cursorStyleFromString(cursorStyle) {
    if (cursorStyle === 'line') {
        return editorCommon.TextEditorCursorStyle.Line;
    }
    else if (cursorStyle === 'block') {
        return editorCommon.TextEditorCursorStyle.Block;
    }
    else if (cursorStyle === 'underline') {
        return editorCommon.TextEditorCursorStyle.Underline;
    }
    return editorCommon.TextEditorCursorStyle.Line;
}
function cursorBlinkingStyleFromString(cursorBlinkingStyle) {
    switch (cursorBlinkingStyle) {
        case 'blink':
            return editorCommon.TextEditorCursorBlinkingStyle.Blink;
        case 'smooth':
            return editorCommon.TextEditorCursorBlinkingStyle.Smooth;
        case 'phase':
            return editorCommon.TextEditorCursorBlinkingStyle.Phase;
        case 'expand':
            return editorCommon.TextEditorCursorBlinkingStyle.Expand;
        case 'visible': // maintain compatibility
        case 'solid':
            return editorCommon.TextEditorCursorBlinkingStyle.Solid;
    }
    return editorCommon.TextEditorCursorBlinkingStyle.Blink;
}
function toIntegerWithDefault(source, defaultValue) {
    if (typeof source === 'undefined') {
        return defaultValue;
    }
    return toInteger(source);
}
var CommonEditorConfiguration = (function (_super) {
    __extends(CommonEditorConfiguration, _super);
    function CommonEditorConfiguration(options, elementSizeObserver) {
        if (elementSizeObserver === void 0) { elementSizeObserver = null; }
        var _this = _super.call(this) || this;
        _this._onDidChange = _this._register(new event_1.Emitter());
        _this.onDidChange = _this._onDidChange.event;
        _this._configWithDefaults = new ConfigurationWithDefaults(options);
        _this._elementSizeObserver = elementSizeObserver;
        _this._isDominatedByLongLines = false;
        _this._maxLineNumber = 1;
        _this.editor = _this._computeInternalOptions();
        _this.editorClone = _this.editor.clone();
        _this._register(exports.EditorZoom.onDidChangeZoomLevel(function (_) { return _this._recomputeOptions(); }));
        _this._register(exports.TabFocus.onDidChangeTabFocus(function (_) { return _this._recomputeOptions(); }));
        return _this;
    }
    CommonEditorConfiguration.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
    };
    CommonEditorConfiguration.prototype._recomputeOptions = function () {
        this._setOptions(this._computeInternalOptions());
    };
    CommonEditorConfiguration.prototype._setOptions = function (newOptions) {
        if (this.editor && this.editor.equals(newOptions)) {
            return;
        }
        var changeEvent = this.editor.createChangeEvent(newOptions);
        this.editor = newOptions;
        this.editorClone = this.editor.clone();
        this._onDidChange.fire(changeEvent);
    };
    CommonEditorConfiguration.prototype.getRawOptions = function () {
        return this._configWithDefaults.getEditorOptions();
    };
    CommonEditorConfiguration.prototype._computeInternalOptions = function () {
        var opts = this._configWithDefaults.getEditorOptions();
        var editorClassName = this._getEditorClassName(opts.theme, toBoolean(opts.fontLigatures));
        var fontFamily = String(opts.fontFamily) || defaultConfig_1.DefaultConfig.editor.fontFamily;
        var fontWeight = String(opts.fontWeight) || defaultConfig_1.DefaultConfig.editor.fontWeight;
        var fontSize = toFloat(opts.fontSize, defaultConfig_1.DefaultConfig.editor.fontSize);
        fontSize = Math.max(0, fontSize);
        fontSize = Math.min(100, fontSize);
        if (fontSize === 0) {
            fontSize = defaultConfig_1.DefaultConfig.editor.fontSize;
        }
        var lineHeight = toInteger(opts.lineHeight, 0, 150);
        if (lineHeight === 0) {
            lineHeight = Math.round(defaultConfig_1.GOLDEN_LINE_HEIGHT_RATIO * fontSize);
        }
        var editorZoomLevelMultiplier = 1 + (exports.EditorZoom.getZoomLevel() * 0.1);
        fontSize *= editorZoomLevelMultiplier;
        lineHeight *= editorZoomLevelMultiplier;
        var disableTranslate3d = toBoolean(opts.disableTranslate3d);
        var canUseTranslate3d = this._getCanUseTranslate3d();
        if (disableTranslate3d) {
            canUseTranslate3d = false;
        }
        return InternalEditorOptionsHelper.createInternalEditorOptions(this.getOuterWidth(), this.getOuterHeight(), opts, this.readConfiguration(new editorCommon.BareFontInfo({
            fontFamily: fontFamily,
            fontWeight: fontWeight,
            fontSize: fontSize,
            lineHeight: lineHeight
        })), editorClassName, this._isDominatedByLongLines, this._maxLineNumber, canUseTranslate3d);
    };
    CommonEditorConfiguration.prototype.updateOptions = function (newOptions) {
        this._configWithDefaults.updateOptions(newOptions);
        this._recomputeOptions();
    };
    CommonEditorConfiguration.prototype.setIsDominatedByLongLines = function (isDominatedByLongLines) {
        this._isDominatedByLongLines = isDominatedByLongLines;
        this._recomputeOptions();
    };
    CommonEditorConfiguration.prototype.setMaxLineNumber = function (maxLineNumber) {
        this._maxLineNumber = maxLineNumber;
        this._recomputeOptions();
    };
    return CommonEditorConfiguration;
}(lifecycle_1.Disposable));
exports.CommonEditorConfiguration = CommonEditorConfiguration;
/**
 * Helper to update Monaco Editor Settings from configurations service.
 */
var EditorConfiguration = (function () {
    function EditorConfiguration() {
    }
    /**
     * Ask the provided configuration service to apply its configuration to the provided editor.
     */
    EditorConfiguration.apply = function (config, editor) {
        if (!config) {
            return;
        }
        // Editor Settings (Code Editor, Diff, Terminal)
        if (editor && typeof editor.updateOptions === 'function') {
            var type = editor.getEditorType();
            if (type !== editorCommon.EditorType.ICodeEditor && type !== editorCommon.EditorType.IDiffEditor) {
                return;
            }
            var editorConfig = config[EditorConfiguration.EDITOR_SECTION];
            if (type === editorCommon.EditorType.IDiffEditor) {
                var diffEditorConfig = config[EditorConfiguration.DIFF_EDITOR_SECTION];
                if (diffEditorConfig) {
                    if (!editorConfig) {
                        editorConfig = diffEditorConfig;
                    }
                    else {
                        editorConfig = objects.mixin(editorConfig, diffEditorConfig);
                    }
                }
            }
            if (editorConfig) {
                delete editorConfig.readOnly; // Prevent someone from making editor readonly
                editor.updateOptions(editorConfig);
            }
        }
    };
    return EditorConfiguration;
}());
EditorConfiguration.EDITOR_SECTION = 'editor';
EditorConfiguration.DIFF_EDITOR_SECTION = 'diffEditor';
exports.EditorConfiguration = EditorConfiguration;
var configurationRegistry = platform_1.Registry.as(configurationRegistry_1.Extensions.Configuration);
var editorConfiguration = {
    'id': 'editor',
    'order': 5,
    'type': 'object',
    'title': nls.localize('editorConfigurationTitle', "Editor"),
    'properties': {
        'editor.fontFamily': {
            'type': 'string',
            'default': defaultConfig_1.DefaultConfig.editor.fontFamily,
            'description': nls.localize('fontFamily', "Controls the font family.")
        },
        'editor.fontWeight': {
            'type': 'string',
            'enum': ['normal', 'bold', '100', '200', '300', '400', '500', '600', '700', '800', '900'],
            'default': defaultConfig_1.DefaultConfig.editor.fontWeight,
            'description': nls.localize('fontWeight', "Controls the font weight.")
        },
        'editor.fontSize': {
            'type': 'number',
            'default': defaultConfig_1.DefaultConfig.editor.fontSize,
            'description': nls.localize('fontSize', "Controls the font size in pixels.")
        },
        'editor.lineHeight': {
            'type': 'number',
            'default': defaultConfig_1.DefaultConfig.editor.lineHeight,
            'description': nls.localize('lineHeight', "Controls the line height. Use 0 to compute the lineHeight from the fontSize.")
        },
        'editor.lineNumbers': {
            'type': 'string',
            'enum': ['off', 'on', 'relative'],
            'default': defaultConfig_1.DefaultConfig.editor.lineNumbers,
            'description': nls.localize('lineNumbers', "Controls the display of line numbers. Possible values are 'on', 'off', and 'relative'. 'relative' shows the line count from the current cursor position.")
        },
        'editor.rulers': {
            'type': 'array',
            'items': {
                'type': 'number'
            },
            'default': defaultConfig_1.DefaultConfig.editor.rulers,
            'description': nls.localize('rulers', "Columns at which to show vertical rulers")
        },
        'editor.wordSeparators': {
            'type': 'string',
            'default': defaultConfig_1.DefaultConfig.editor.wordSeparators,
            'description': nls.localize('wordSeparators', "Characters that will be used as word separators when doing word related navigations or operations")
        },
        'editor.tabSize': {
            'type': 'number',
            'default': defaultConfig_1.DEFAULT_INDENTATION.tabSize,
            'minimum': 1,
            'description': nls.localize('tabSize', "The number of spaces a tab is equal to. This setting is overriden based on the file contents when `editor.detectIndentation` is on."),
            'errorMessage': nls.localize('tabSize.errorMessage', "Expected 'number'. Note that the value \"auto\" has been replaced by the `editor.detectIndentation` setting.")
        },
        'editor.insertSpaces': {
            'type': 'boolean',
            'default': defaultConfig_1.DEFAULT_INDENTATION.insertSpaces,
            'description': nls.localize('insertSpaces', "Insert spaces when pressing Tab. This setting is overriden based on the file contents when `editor.detectIndentation` is on."),
            'errorMessage': nls.localize('insertSpaces.errorMessage', "Expected 'boolean'. Note that the value \"auto\" has been replaced by the `editor.detectIndentation` setting.")
        },
        'editor.detectIndentation': {
            'type': 'boolean',
            'default': defaultConfig_1.DEFAULT_INDENTATION.detectIndentation,
            'description': nls.localize('detectIndentation', "When opening a file, `editor.tabSize` and `editor.insertSpaces` will be detected based on the file contents.")
        },
        'editor.roundedSelection': {
            'type': 'boolean',
            'default': defaultConfig_1.DefaultConfig.editor.roundedSelection,
            'description': nls.localize('roundedSelection', "Controls if selections have rounded corners")
        },
        'editor.scrollBeyondLastLine': {
            'type': 'boolean',
            'default': defaultConfig_1.DefaultConfig.editor.scrollBeyondLastLine,
            'description': nls.localize('scrollBeyondLastLine', "Controls if the editor will scroll beyond the last line")
        },
        'editor.wrappingColumn': {
            'type': 'integer',
            'default': defaultConfig_1.DefaultConfig.editor.wrappingColumn,
            'minimum': -1,
            'description': nls.localize('wrappingColumn', "Controls after how many characters the editor will wrap to the next line. Setting this to 0 turns on viewport width wrapping (word wrapping). Setting this to -1 forces the editor to never wrap.")
        },
        'editor.wordWrap': {
            'type': 'boolean',
            'default': defaultConfig_1.DefaultConfig.editor.wordWrap,
            'description': nls.localize('wordWrap', "Controls if lines should wrap. The lines will wrap at min(editor.wrappingColumn, viewportWidthInColumns).")
        },
        'editor.wrappingIndent': {
            'type': 'string',
            'enum': ['none', 'same', 'indent'],
            'default': defaultConfig_1.DefaultConfig.editor.wrappingIndent,
            'description': nls.localize('wrappingIndent', "Controls the indentation of wrapped lines. Can be one of 'none', 'same' or 'indent'.")
        },
        'editor.mouseWheelScrollSensitivity': {
            'type': 'number',
            'default': defaultConfig_1.DefaultConfig.editor.mouseWheelScrollSensitivity,
            'description': nls.localize('mouseWheelScrollSensitivity', "A multiplier to be used on the `deltaX` and `deltaY` of mouse wheel scroll events")
        },
        'editor.quickSuggestions': {
            'type': 'boolean',
            'default': defaultConfig_1.DefaultConfig.editor.quickSuggestions,
            'description': nls.localize('quickSuggestions', "Controls if quick suggestions should show up or not while typing")
        },
        'editor.quickSuggestionsDelay': {
            'type': 'integer',
            'default': defaultConfig_1.DefaultConfig.editor.quickSuggestionsDelay,
            'minimum': 0,
            'description': nls.localize('quickSuggestionsDelay', "Controls the delay in ms after which quick suggestions will show up")
        },
        'editor.parameterHints': {
            'type': 'boolean',
            'default': defaultConfig_1.DefaultConfig.editor.parameterHints,
            'description': nls.localize('parameterHints', "Enables parameter hints")
        },
        'editor.autoClosingBrackets': {
            'type': 'boolean',
            'default': defaultConfig_1.DefaultConfig.editor.autoClosingBrackets,
            'description': nls.localize('autoClosingBrackets', "Controls if the editor should automatically close brackets after opening them")
        },
        'editor.formatOnType': {
            'type': 'boolean',
            'default': defaultConfig_1.DefaultConfig.editor.formatOnType,
            'description': nls.localize('formatOnType', "Controls if the editor should automatically format the line after typing")
        },
        'editor.suggestOnTriggerCharacters': {
            'type': 'boolean',
            'default': defaultConfig_1.DefaultConfig.editor.suggestOnTriggerCharacters,
            'description': nls.localize('suggestOnTriggerCharacters', "Controls if suggestions should automatically show up when typing trigger characters")
        },
        'editor.acceptSuggestionOnEnter': {
            'type': 'boolean',
            'default': defaultConfig_1.DefaultConfig.editor.acceptSuggestionOnEnter,
            'description': nls.localize('acceptSuggestionOnEnter', "Controls if suggestions should be accepted 'Enter' - in addition to 'Tab'. Helps to avoid ambiguity between inserting new lines or accepting suggestions.")
        },
        'editor.snippetSuggestions': {
            'type': 'string',
            'enum': ['top', 'bottom', 'inline', 'none'],
            'default': defaultConfig_1.DefaultConfig.editor.snippetSuggestions,
            'description': nls.localize('snippetSuggestions', "Controls whether snippets are shown with other suggestions and how they are sorted.")
        },
        'editor.emptySelectionClipboard': {
            'type': 'boolean',
            'default': defaultConfig_1.DefaultConfig.editor.emptySelectionClipboard,
            'description': nls.localize('emptySelectionClipboard', "Controls whether copying without a selection copies the current line.")
        },
        'editor.wordBasedSuggestions': {
            'type': 'boolean',
            'default': defaultConfig_1.DefaultConfig.editor.wordBasedSuggestions,
            'description': nls.localize('wordBasedSuggestions', "Enable word based suggestions.")
        },
        'editor.suggestFontSize': {
            'type': 'integer',
            'default': 0,
            'minimum': 0,
            'description': nls.localize('suggestFontSize', "Font size for the suggest widget")
        },
        'editor.suggestLineHeight': {
            'type': 'integer',
            'default': 0,
            'minimum': 0,
            'description': nls.localize('suggestLineHeight', "Line height for the suggest widget")
        },
        'editor.tabCompletion': {
            'type': 'boolean',
            'default': defaultConfig_1.DefaultConfig.editor.tabCompletion,
            'description': nls.localize('tabCompletion', "Insert snippets when their prefix matches. Works best when 'quickSuggestions' aren't enabled.")
        },
        'editor.selectionHighlight': {
            'type': 'boolean',
            'default': defaultConfig_1.DefaultConfig.editor.selectionHighlight,
            'description': nls.localize('selectionHighlight', "Controls whether the editor should highlight similar matches to the selection")
        },
        'editor.overviewRulerLanes': {
            'type': 'integer',
            'default': 3,
            'description': nls.localize('overviewRulerLanes', "Controls the number of decorations that can show up at the same position in the overview ruler")
        },
        'editor.cursorBlinking': {
            'type': 'string',
            'enum': ['blink', 'smooth', 'phase', 'expand', 'solid'],
            'default': defaultConfig_1.DefaultConfig.editor.cursorBlinking,
            'description': nls.localize('cursorBlinking', "Control the cursor animation style, possible values are 'blink', 'smooth', 'phase', 'expand' and 'solid'")
        },
        'editor.mouseWheelZoom': {
            'type': 'boolean',
            'default': defaultConfig_1.DefaultConfig.editor.mouseWheelZoom,
            'description': nls.localize('mouseWheelZoom', "Zoom the font of the editor when using mouse wheel and holding Ctrl")
        },
        'editor.cursorStyle': {
            'type': 'string',
            'enum': ['block', 'line', 'underline'],
            'default': defaultConfig_1.DefaultConfig.editor.cursorStyle,
            'description': nls.localize('cursorStyle', "Controls the cursor style, accepted values are 'block', 'line' and 'underline'")
        },
        'editor.fontLigatures': {
            'type': 'boolean',
            'default': defaultConfig_1.DefaultConfig.editor.fontLigatures,
            'description': nls.localize('fontLigatures', "Enables font ligatures")
        },
        'editor.hideCursorInOverviewRuler': {
            'type': 'boolean',
            'default': defaultConfig_1.DefaultConfig.editor.hideCursorInOverviewRuler,
            'description': nls.localize('hideCursorInOverviewRuler', "Controls if the cursor should be hidden in the overview ruler.")
        },
        'editor.renderWhitespace': {
            'type': 'string',
            'enum': ['none', 'boundary', 'all'],
            default: defaultConfig_1.DefaultConfig.editor.renderWhitespace,
            description: nls.localize('renderWhitespace', "Controls how the editor should render whitespace characters, possibilities are 'none', 'boundary', and 'all'. The 'boundary' option does not render single spaces between words.")
        },
        'editor.renderControlCharacters': {
            'type': 'boolean',
            default: defaultConfig_1.DefaultConfig.editor.renderControlCharacters,
            description: nls.localize('renderControlCharacters', "Controls whether the editor should render control characters")
        },
        'editor.renderIndentGuides': {
            'type': 'boolean',
            default: defaultConfig_1.DefaultConfig.editor.renderIndentGuides,
            description: nls.localize('renderIndentGuides', "Controls whether the editor should render indent guides")
        },
        'editor.renderLineHighlight': {
            'type': 'string',
            'enum': ['none', 'gutter', 'line', 'all'],
            default: defaultConfig_1.DefaultConfig.editor.renderLineHighlight,
            description: nls.localize('renderLineHighlight', "Controls how the editor should render the current line highlight, possibilities are 'none', 'gutter', 'line', and 'all'.")
        },
        'editor.codeLens': {
            'type': 'boolean',
            'default': defaultConfig_1.DefaultConfig.editor.codeLens,
            'description': nls.localize('codeLens', "Controls if the editor shows code lenses")
        },
        'editor.folding': {
            'type': 'boolean',
            'default': defaultConfig_1.DefaultConfig.editor.folding,
            'description': nls.localize('folding', "Controls whether the editor has code folding enabled")
        },
        'editor.glyphMargin': {
            'type': 'boolean',
            'default': defaultConfig_1.DefaultConfig.editor.glyphMargin,
            'description': nls.localize('glyphMargin', "Controls whether the editor should render the vertical glyph margin. Glyph margin is mostly used for debugging.")
        },
        'editor.useTabStops': {
            'type': 'boolean',
            'default': defaultConfig_1.DefaultConfig.editor.useTabStops,
            'description': nls.localize('useTabStops', "Inserting and deleting whitespace follows tab stops")
        },
        'editor.trimAutoWhitespace': {
            'type': 'boolean',
            'default': defaultConfig_1.DEFAULT_TRIM_AUTO_WHITESPACE,
            'description': nls.localize('trimAutoWhitespace', "Remove trailing auto inserted whitespace")
        },
        'editor.stablePeek': {
            'type': 'boolean',
            'default': false,
            'description': nls.localize('stablePeek', "Keep peek editors open even when double clicking their content or when hitting Escape.")
        },
        'diffEditor.renderSideBySide': {
            'type': 'boolean',
            'default': true,
            'description': nls.localize('sideBySide', "Controls if the diff editor shows the diff side by side or inline")
        },
        'diffEditor.ignoreTrimWhitespace': {
            'type': 'boolean',
            'default': true,
            'description': nls.localize('ignoreTrimWhitespace', "Controls if the diff editor shows changes in leading or trailing whitespace as diffs")
        },
        'diffEditor.renderIndicators': {
            'type': 'boolean',
            'default': true,
            'description': nls.localize('renderIndicators', "Controls if the diff editor shows +/- indicators for added/removed changes")
        }
    }
};
if (platform.isLinux) {
    editorConfiguration['properties']['editor.selectionClipboard'] = {
        'type': 'boolean',
        'default': defaultConfig_1.DefaultConfig.editor.selectionClipboard,
        'description': nls.localize('selectionClipboard', "Controls if the Linux primary clipboard should be supported.")
    };
}
configurationRegistry.registerConfiguration(editorConfiguration);
