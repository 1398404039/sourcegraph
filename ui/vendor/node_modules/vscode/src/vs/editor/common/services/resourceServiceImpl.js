/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var CompatMirrorModelMap = (function () {
    function CompatMirrorModelMap() {
        this._data = {};
    }
    CompatMirrorModelMap.prototype.set = function (key, data) {
        this._data[key] = data;
    };
    CompatMirrorModelMap.prototype.get = function (key) {
        return this._data[key] || null;
    };
    CompatMirrorModelMap.prototype.contains = function (key) {
        return !!this._data[key];
    };
    CompatMirrorModelMap.prototype.remove = function (key) {
        delete this._data[key];
    };
    return CompatMirrorModelMap;
}());
var ResourceService = (function () {
    function ResourceService() {
        this._map = new CompatMirrorModelMap();
    }
    ResourceService._anonymousModelId = function (input) {
        var r = '';
        for (var i = 0; i < input.length; i++) {
            var ch = input[i];
            if (ch >= '0' && ch <= '9') {
                r += '0';
                continue;
            }
            if (ch >= 'a' && ch <= 'z') {
                r += 'a';
                continue;
            }
            if (ch >= 'A' && ch <= 'Z') {
                r += 'A';
                continue;
            }
            r += ch;
        }
        return r;
    };
    ResourceService.prototype.insert = function (uri, element) {
        var key = uri.toString();
        if (this._map.contains(key)) {
            // There already exists a model with this id => this is a programmer error
            throw new Error('ResourceService: Cannot add model ' + ResourceService._anonymousModelId(key) + ' because it already exists!');
        }
        this._map.set(key, element);
    };
    ResourceService.prototype.get = function (uri) {
        var key = uri.toString();
        return this._map.get(key);
    };
    ResourceService.prototype.remove = function (uri) {
        var key = uri.toString();
        this._map.remove(key);
    };
    return ResourceService;
}());
exports.ResourceService = ResourceService;
