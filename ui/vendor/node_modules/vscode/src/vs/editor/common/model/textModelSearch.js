/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var strings = require("vs/base/common/strings");
var position_1 = require("vs/editor/common/core/position");
var range_1 = require("vs/editor/common/core/range");
var editorCommon_1 = require("vs/editor/common/editorCommon");
var LIMIT_FIND_COUNT = 999;
var SearchParams = (function () {
    function SearchParams(searchString, isRegex, matchCase, wholeWord) {
        this.searchString = searchString;
        this.isRegex = isRegex;
        this.matchCase = matchCase;
        this.wholeWord = wholeWord;
    }
    SearchParams._isMultilineRegexSource = function (searchString) {
        if (!searchString || searchString.length === 0) {
            return false;
        }
        for (var i = 0, len = searchString.length; i < len; i++) {
            var chCode = searchString.charCodeAt(i);
            if (chCode === 92 /* Backslash */) {
                // move to next char
                i++;
                if (i >= len) {
                    // string ends with a \
                    break;
                }
                var nextChCode = searchString.charCodeAt(i);
                if (nextChCode === 110 /* n */ || nextChCode === 114 /* r */) {
                    return true;
                }
            }
        }
        return false;
    };
    SearchParams.prototype.parseSearchRequest = function () {
        if (this.searchString === '') {
            return null;
        }
        // Try to create a RegExp out of the params
        var multiline;
        if (this.isRegex) {
            multiline = SearchParams._isMultilineRegexSource(this.searchString);
        }
        else {
            multiline = (this.searchString.indexOf('\n') >= 0);
        }
        var regex = null;
        try {
            regex = strings.createRegExp(this.searchString, this.isRegex, {
                matchCase: this.matchCase,
                wholeWord: this.wholeWord,
                multiline: multiline,
                global: true
            });
        }
        catch (err) {
            return null;
        }
        if (!regex) {
            return null;
        }
        var canUseSimpleSearch = (!this.isRegex && !this.wholeWord && !multiline);
        if (canUseSimpleSearch && this.searchString.toLowerCase() !== this.searchString.toUpperCase()) {
            // casing might make a difference
            canUseSimpleSearch = this.matchCase;
        }
        return new SearchData(regex, canUseSimpleSearch ? this.searchString : null);
    };
    return SearchParams;
}());
exports.SearchParams = SearchParams;
var SearchData = (function () {
    function SearchData(regex, simpleSearch) {
        this.regex = regex;
        this.simpleSearch = simpleSearch;
    }
    return SearchData;
}());
exports.SearchData = SearchData;
function createFindMatch(range, rawMatches, captureMatches) {
    if (!captureMatches) {
        return new editorCommon_1.FindMatch(range, null);
    }
    var matches = [];
    for (var i = 0, len = rawMatches.length; i < len; i++) {
        matches[i] = rawMatches[i];
    }
    return new editorCommon_1.FindMatch(range, matches);
}
var TextModelSearch = (function () {
    function TextModelSearch() {
    }
    TextModelSearch.findMatches = function (model, searchParams, searchRange, captureMatches, limitResultCount) {
        var searchData = searchParams.parseSearchRequest();
        if (!searchData) {
            return [];
        }
        if (searchData.regex.multiline) {
            return this._doFindMatchesMultiline(model, searchRange, searchData.regex, captureMatches, limitResultCount);
        }
        return this._doFindMatchesLineByLine(model, searchRange, searchData, captureMatches, limitResultCount);
    };
    /**
     * Multiline search always executes on the lines concatenated with \n.
     * We must therefore compensate for the count of \n in case the model is CRLF
     */
    TextModelSearch._getMultilineMatchRange = function (model, deltaOffset, text, matchIndex, match0) {
        var startOffset;
        if (model.getEOL() === '\r\n') {
            var lineFeedCountBeforeMatch = 0;
            for (var i = 0; i < matchIndex; i++) {
                var chCode = text.charCodeAt(i);
                if (chCode === 10 /* LineFeed */) {
                    lineFeedCountBeforeMatch++;
                }
            }
            startOffset = deltaOffset + matchIndex + lineFeedCountBeforeMatch /* add as many \r as there were \n */;
        }
        else {
            startOffset = deltaOffset + matchIndex;
        }
        var endOffset;
        if (model.getEOL() === '\r\n') {
            var lineFeedCountInMatch = 0;
            for (var i = 0, len = match0.length; i < len; i++) {
                var chCode = text.charCodeAt(i + matchIndex);
                if (chCode === 10 /* LineFeed */) {
                    lineFeedCountInMatch++;
                }
            }
            endOffset = startOffset + match0.length + lineFeedCountInMatch /* add as many \r as there were \n */;
        }
        else {
            endOffset = startOffset + match0.length;
        }
        var startPosition = model.getPositionAt(startOffset);
        var endPosition = model.getPositionAt(endOffset);
        return new range_1.Range(startPosition.lineNumber, startPosition.column, endPosition.lineNumber, endPosition.column);
    };
    TextModelSearch._doFindMatchesMultiline = function (model, searchRange, searchRegex, captureMatches, limitResultCount) {
        var deltaOffset = model.getOffsetAt(searchRange.getStartPosition());
        // We always execute multiline search over the lines joined with \n
        // This makes it that \n will match the EOL for both CRLF and LF models
        // We compensate for offset errors in `_getMultilineMatchRange`
        var text = model.getValueInRange(searchRange, editorCommon_1.EndOfLinePreference.LF);
        var result = [];
        var prevStartOffset = 0;
        var prevEndOffset = 0;
        var counter = 0;
        var m;
        while ((m = searchRegex.exec(text))) {
            var startOffset = deltaOffset + m.index;
            var endOffset = startOffset + m[0].length;
            if (prevStartOffset === startOffset && prevEndOffset === endOffset) {
                // Exit early if the regex matches the same range
                return result;
            }
            result[counter++] = createFindMatch(this._getMultilineMatchRange(model, deltaOffset, text, m.index, m[0]), m, captureMatches);
            if (counter >= limitResultCount) {
                return result;
            }
            prevStartOffset = startOffset;
            prevEndOffset = endOffset;
        }
        return result;
    };
    TextModelSearch._doFindMatchesLineByLine = function (model, searchRange, searchData, captureMatches, limitResultCount) {
        var result = [];
        var resultLen = 0;
        // Early case for a search range that starts & stops on the same line number
        if (searchRange.startLineNumber === searchRange.endLineNumber) {
            var text_1 = model.getLineContent(searchRange.startLineNumber).substring(searchRange.startColumn - 1, searchRange.endColumn - 1);
            resultLen = this._findMatchesInLine(searchData, text_1, searchRange.startLineNumber, searchRange.startColumn - 1, resultLen, result, captureMatches, limitResultCount);
            return result;
        }
        // Collect results from first line
        var text = model.getLineContent(searchRange.startLineNumber).substring(searchRange.startColumn - 1);
        resultLen = this._findMatchesInLine(searchData, text, searchRange.startLineNumber, searchRange.startColumn - 1, resultLen, result, captureMatches, limitResultCount);
        // Collect results from middle lines
        for (var lineNumber = searchRange.startLineNumber + 1; lineNumber < searchRange.endLineNumber && resultLen < limitResultCount; lineNumber++) {
            resultLen = this._findMatchesInLine(searchData, model.getLineContent(lineNumber), lineNumber, 0, resultLen, result, captureMatches, limitResultCount);
        }
        // Collect results from last line
        if (resultLen < limitResultCount) {
            var text_2 = model.getLineContent(searchRange.endLineNumber).substring(0, searchRange.endColumn - 1);
            resultLen = this._findMatchesInLine(searchData, text_2, searchRange.endLineNumber, 0, resultLen, result, captureMatches, limitResultCount);
        }
        return result;
    };
    TextModelSearch._findMatchesInLine = function (searchData, text, lineNumber, deltaOffset, resultLen, result, captureMatches, limitResultCount) {
        if (!captureMatches && searchData.simpleSearch) {
            var searchString = searchData.simpleSearch;
            var searchStringLen = searchString.length;
            var lastMatchIndex = -searchStringLen;
            while ((lastMatchIndex = text.indexOf(searchString, lastMatchIndex + searchStringLen)) !== -1) {
                var range = new range_1.Range(lineNumber, lastMatchIndex + 1 + deltaOffset, lineNumber, lastMatchIndex + 1 + searchStringLen + deltaOffset);
                result[resultLen++] = new editorCommon_1.FindMatch(range, null);
                if (resultLen >= limitResultCount) {
                    return resultLen;
                }
            }
            return resultLen;
        }
        var searchRegex = searchData.regex;
        var m;
        // Reset regex to search from the beginning
        searchRegex.lastIndex = 0;
        do {
            m = searchRegex.exec(text);
            if (m) {
                var range = new range_1.Range(lineNumber, m.index + 1 + deltaOffset, lineNumber, m.index + 1 + m[0].length + deltaOffset);
                if (result.length > 0 && range.equalsRange(result[result.length - 1].range)) {
                    // Exit early if the regex matches the same range
                    return resultLen;
                }
                result[resultLen++] = createFindMatch(range, m, captureMatches);
                if (resultLen >= limitResultCount) {
                    return resultLen;
                }
                if (m.index + m[0].length === text.length) {
                    // Reached the end of the line
                    return resultLen;
                }
            }
        } while (m);
        return resultLen;
    };
    TextModelSearch.findNextMatch = function (model, searchParams, searchStart, captureMatches) {
        var searchData = searchParams.parseSearchRequest();
        if (!searchData) {
            return null;
        }
        if (searchData.regex.multiline) {
            return this._doFindNextMatchMultiline(model, searchStart, searchData.regex, captureMatches);
        }
        return this._doFindNextMatchLineByLine(model, searchStart, searchData.regex, captureMatches);
    };
    TextModelSearch._doFindNextMatchMultiline = function (model, searchStart, searchRegex, captureMatches) {
        var searchTextStart = new position_1.Position(searchStart.lineNumber, 1);
        var deltaOffset = model.getOffsetAt(searchTextStart);
        var lineCount = model.getLineCount();
        // We always execute multiline search over the lines joined with \n
        // This makes it that \n will match the EOL for both CRLF and LF models
        // We compensate for offset errors in `_getMultilineMatchRange`
        var text = model.getValueInRange(new range_1.Range(searchTextStart.lineNumber, searchTextStart.column, lineCount, model.getLineMaxColumn(lineCount)), editorCommon_1.EndOfLinePreference.LF);
        searchRegex.lastIndex = searchStart.column - 1;
        var m = searchRegex.exec(text);
        if (m) {
            return createFindMatch(this._getMultilineMatchRange(model, deltaOffset, text, m.index, m[0]), m, captureMatches);
        }
        if (searchStart.lineNumber !== 1 || searchStart.column !== 1) {
            // Try again from the top
            return this._doFindNextMatchMultiline(model, new position_1.Position(1, 1), searchRegex, captureMatches);
        }
        return null;
    };
    TextModelSearch._doFindNextMatchLineByLine = function (model, searchStart, searchRegex, captureMatches) {
        var lineCount = model.getLineCount();
        var startLineNumber = searchStart.lineNumber;
        // Look in first line
        var text = model.getLineContent(startLineNumber);
        var r = this._findFirstMatchInLine(searchRegex, text, startLineNumber, searchStart.column, captureMatches);
        if (r) {
            return r;
        }
        for (var i = 1; i <= lineCount; i++) {
            var lineIndex = (startLineNumber + i - 1) % lineCount;
            var text_3 = model.getLineContent(lineIndex + 1);
            var r_1 = this._findFirstMatchInLine(searchRegex, text_3, lineIndex + 1, 1, captureMatches);
            if (r_1) {
                return r_1;
            }
        }
        return null;
    };
    TextModelSearch._findFirstMatchInLine = function (searchRegex, text, lineNumber, fromColumn, captureMatches) {
        // Set regex to search from column
        searchRegex.lastIndex = fromColumn - 1;
        var m = searchRegex.exec(text);
        if (m) {
            return createFindMatch(new range_1.Range(lineNumber, m.index + 1, lineNumber, m.index + 1 + m[0].length), m, captureMatches);
        }
        return null;
    };
    TextModelSearch.findPreviousMatch = function (model, searchParams, searchStart, captureMatches) {
        var searchData = searchParams.parseSearchRequest();
        if (!searchData) {
            return null;
        }
        if (searchData.regex.multiline) {
            return this._doFindPreviousMatchMultiline(model, searchStart, searchData.regex, captureMatches);
        }
        return this._doFindPreviousMatchLineByLine(model, searchStart, searchData.regex, captureMatches);
    };
    TextModelSearch._doFindPreviousMatchMultiline = function (model, searchStart, searchRegex, captureMatches) {
        var matches = this._doFindMatchesMultiline(model, new range_1.Range(1, 1, searchStart.lineNumber, searchStart.column), searchRegex, captureMatches, 10 * LIMIT_FIND_COUNT);
        if (matches.length > 0) {
            return matches[matches.length - 1];
        }
        var lineCount = model.getLineCount();
        if (searchStart.lineNumber !== lineCount || searchStart.column !== model.getLineMaxColumn(lineCount)) {
            // Try again with all content
            return this._doFindPreviousMatchMultiline(model, new position_1.Position(lineCount, model.getLineMaxColumn(lineCount)), searchRegex, captureMatches);
        }
        return null;
    };
    TextModelSearch._doFindPreviousMatchLineByLine = function (model, searchStart, searchRegex, captureMatches) {
        var lineCount = model.getLineCount();
        var startLineNumber = searchStart.lineNumber;
        // Look in first line
        var text = model.getLineContent(startLineNumber).substring(0, searchStart.column - 1);
        var r = this._findLastMatchInLine(searchRegex, text, startLineNumber, captureMatches);
        if (r) {
            return r;
        }
        for (var i = 1; i <= lineCount; i++) {
            var lineIndex = (lineCount + startLineNumber - i - 1) % lineCount;
            var text_4 = model.getLineContent(lineIndex + 1);
            var r_2 = this._findLastMatchInLine(searchRegex, text_4, lineIndex + 1, captureMatches);
            if (r_2) {
                return r_2;
            }
        }
        return null;
    };
    TextModelSearch._findLastMatchInLine = function (searchRegex, text, lineNumber, captureMatches) {
        var bestResult = null;
        var m;
        while ((m = searchRegex.exec(text))) {
            var result = new range_1.Range(lineNumber, m.index + 1, lineNumber, m.index + 1 + m[0].length);
            if (bestResult && result.equalsRange(bestResult.range)) {
                break;
            }
            bestResult = createFindMatch(result, m, captureMatches);
            if (m.index + m[0].length === text.length) {
                // Reached the end of the line
                break;
            }
        }
        return bestResult;
    };
    return TextModelSearch;
}());
exports.TextModelSearch = TextModelSearch;
