/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var lifecycle_1 = require("vs/base/common/lifecycle");
var scrollable_1 = require("vs/base/common/scrollable");
var editorCommon = require("vs/editor/common/editorCommon");
var linesLayout_1 = require("vs/editor/common/viewLayout/linesLayout");
var viewEvents = require("vs/editor/common/view/viewEvents");
var LayoutProvider = (function (_super) {
    __extends(LayoutProvider, _super);
    function LayoutProvider(configuration, lineCount, privateViewEventBus) {
        var _this = _super.call(this) || this;
        _this._configuration = configuration;
        _this._privateViewEventBus = privateViewEventBus;
        _this._linesLayout = new linesLayout_1.LinesLayout(lineCount, _this._configuration.editor.lineHeight);
        _this._scrollable = _this._register(new scrollable_1.Scrollable());
        _this._scrollable.updateState({
            width: configuration.editor.layoutInfo.contentWidth,
            height: configuration.editor.layoutInfo.contentHeight
        });
        _this._register(_this._scrollable.onScroll(function (e) {
            _this._privateViewEventBus.emit(new viewEvents.ViewScrollChangedEvent(e));
        }));
        _this._updateHeight();
        return _this;
    }
    LayoutProvider.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
    };
    LayoutProvider.prototype.getScrollable = function () {
        return this._scrollable;
    };
    LayoutProvider.prototype.onHeightMaybeChanged = function () {
        this._updateHeight();
    };
    // ---- begin view event handlers
    LayoutProvider.prototype.onConfigurationChanged = function (e) {
        if (e.lineHeight) {
            this._linesLayout.setLineHeight(this._configuration.editor.lineHeight);
        }
        if (e.layoutInfo) {
            this._scrollable.updateState({
                width: this._configuration.editor.layoutInfo.contentWidth,
                height: this._configuration.editor.layoutInfo.contentHeight
            });
        }
        this._updateHeight();
    };
    LayoutProvider.prototype.onFlushed = function (lineCount) {
        this._linesLayout.onFlushed(lineCount);
        this._updateHeight();
    };
    LayoutProvider.prototype.onLinesDeleted = function (e) {
        this._linesLayout.onLinesDeleted(e.fromLineNumber, e.toLineNumber);
        this._updateHeight();
    };
    LayoutProvider.prototype.onLinesInserted = function (e) {
        this._linesLayout.onLinesInserted(e.fromLineNumber, e.toLineNumber);
        this._updateHeight();
    };
    // ---- end view event handlers
    LayoutProvider.prototype._getHorizontalScrollbarHeight = function (scrollState) {
        if (this._configuration.editor.viewInfo.scrollbar.horizontal === scrollable_1.ScrollbarVisibility.Hidden) {
            // horizontal scrollbar not visible
            return 0;
        }
        if (scrollState.width <= scrollState.scrollWidth) {
            // horizontal scrollbar not visible
            return 0;
        }
        return this._configuration.editor.viewInfo.scrollbar.horizontalScrollbarSize;
    };
    LayoutProvider.prototype._getTotalHeight = function () {
        var scrollState = this._scrollable.getState();
        var result = this._linesLayout.getLinesTotalHeight();
        if (this._configuration.editor.viewInfo.scrollBeyondLastLine) {
            result += scrollState.height - this._configuration.editor.lineHeight;
        }
        else {
            result += this._getHorizontalScrollbarHeight(scrollState);
        }
        return Math.max(scrollState.height, result);
    };
    LayoutProvider.prototype._updateHeight = function () {
        this._scrollable.updateState({
            scrollHeight: this._getTotalHeight()
        });
    };
    // ---- Layouting logic
    LayoutProvider.prototype.getCurrentViewport = function () {
        var scrollState = this._scrollable.getState();
        return new editorCommon.Viewport(scrollState.scrollTop, scrollState.scrollLeft, scrollState.width, scrollState.height);
    };
    LayoutProvider.prototype._computeScrollWidth = function (maxLineWidth, viewportWidth) {
        var isViewportWrapping = this._configuration.editor.wrappingInfo.isViewportWrapping;
        if (!isViewportWrapping) {
            return Math.max(maxLineWidth + LayoutProvider.LINES_HORIZONTAL_EXTRA_PX, viewportWidth);
        }
        return Math.max(maxLineWidth, viewportWidth);
    };
    LayoutProvider.prototype.onMaxLineWidthChanged = function (maxLineWidth) {
        var newScrollWidth = this._computeScrollWidth(maxLineWidth, this.getCurrentViewport().width);
        this._scrollable.updateState({
            scrollWidth: newScrollWidth
        });
        // The height might depend on the fact that there is a horizontal scrollbar or not
        this._updateHeight();
    };
    // ---- view state
    LayoutProvider.prototype.saveState = function () {
        var scrollState = this._scrollable.getState();
        var scrollTop = scrollState.scrollTop;
        var firstLineNumberInViewport = this._linesLayout.getLineNumberAtOrAfterVerticalOffset(scrollTop);
        var whitespaceAboveFirstLine = this._linesLayout.getWhitespaceAccumulatedHeightBeforeLineNumber(firstLineNumberInViewport);
        return {
            scrollTop: scrollTop,
            scrollTopWithoutViewZones: scrollTop - whitespaceAboveFirstLine,
            scrollLeft: scrollState.scrollLeft
        };
    };
    LayoutProvider.prototype.restoreState = function (state) {
        var restoreScrollTop = state.scrollTop;
        if (typeof state.scrollTopWithoutViewZones === 'number' && !this._linesLayout.hasWhitespace()) {
            restoreScrollTop = state.scrollTopWithoutViewZones;
        }
        this._scrollable.updateState({
            scrollLeft: state.scrollLeft,
            scrollTop: restoreScrollTop
        });
    };
    // ---- IVerticalLayoutProvider
    LayoutProvider.prototype.addWhitespace = function (afterLineNumber, ordinal, height) {
        return this._linesLayout.insertWhitespace(afterLineNumber, ordinal, height);
    };
    LayoutProvider.prototype.changeWhitespace = function (id, newAfterLineNumber, newHeight) {
        return this._linesLayout.changeWhitespace(id, newAfterLineNumber, newHeight);
    };
    LayoutProvider.prototype.removeWhitespace = function (id) {
        return this._linesLayout.removeWhitespace(id);
    };
    LayoutProvider.prototype.getVerticalOffsetForLineNumber = function (lineNumber) {
        return this._linesLayout.getVerticalOffsetForLineNumber(lineNumber);
    };
    LayoutProvider.prototype.isAfterLines = function (verticalOffset) {
        return this._linesLayout.isAfterLines(verticalOffset);
    };
    LayoutProvider.prototype.getLineNumberAtVerticalOffset = function (verticalOffset) {
        return this._linesLayout.getLineNumberAtOrAfterVerticalOffset(verticalOffset);
    };
    LayoutProvider.prototype.getWhitespaceAtVerticalOffset = function (verticalOffset) {
        return this._linesLayout.getWhitespaceAtVerticalOffset(verticalOffset);
    };
    LayoutProvider.prototype.getLinesViewportData = function () {
        var visibleBox = this.getCurrentViewport();
        return this._linesLayout.getLinesViewportData(visibleBox.top, visibleBox.top + visibleBox.height);
    };
    LayoutProvider.prototype.getWhitespaceViewportData = function () {
        var visibleBox = this.getCurrentViewport();
        return this._linesLayout.getWhitespaceViewportData(visibleBox.top, visibleBox.top + visibleBox.height);
    };
    LayoutProvider.prototype.getWhitespaces = function () {
        return this._linesLayout.getWhitespaces();
    };
    // ---- IScrollingProvider
    LayoutProvider.prototype.getScrollWidth = function () {
        var scrollState = this._scrollable.getState();
        return scrollState.scrollWidth;
    };
    LayoutProvider.prototype.getScrollLeft = function () {
        var scrollState = this._scrollable.getState();
        return scrollState.scrollLeft;
    };
    LayoutProvider.prototype.getScrollHeight = function () {
        var scrollState = this._scrollable.getState();
        return scrollState.scrollHeight;
    };
    LayoutProvider.prototype.getScrollTop = function () {
        var scrollState = this._scrollable.getState();
        return scrollState.scrollTop;
    };
    LayoutProvider.prototype.setScrollPosition = function (position) {
        this._scrollable.updateState(position);
    };
    return LayoutProvider;
}(lifecycle_1.Disposable));
LayoutProvider.LINES_HORIZONTAL_EXTRA_PX = 30;
exports.LayoutProvider = LayoutProvider;
