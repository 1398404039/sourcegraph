/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var position_1 = require("vs/editor/common/core/position");
var viewEvents = require("vs/editor/common/view/viewEvents");
var ViewModelCursors = (function () {
    function ViewModelCursors(configuration, coordinatesConverter) {
        this.configuration = configuration;
        this.coordinatesConverter = coordinatesConverter;
        this.lastCursorPositionChangedEvent = null;
        this.lastCursorSelectionChangedEvent = null;
    }
    /**
     * Limit position to be somewhere where it can actually be rendered
     */
    ViewModelCursors._toPositionThatCanBeRendered = function (position, stopRenderingLineAfter) {
        // Limit position to be somewhere where it can actually be rendered
        if (stopRenderingLineAfter !== -1 && position.column > stopRenderingLineAfter) {
            position = new position_1.Position(position.lineNumber, stopRenderingLineAfter);
        }
        return position;
    };
    ViewModelCursors.prototype.onCursorPositionChanged = function (eventsCollector, e) {
        this.lastCursorPositionChangedEvent = e;
        var stopRenderingLineAfter = this.configuration.editor.viewInfo.stopRenderingLineAfter;
        var position = ViewModelCursors._toPositionThatCanBeRendered(e.viewPosition, stopRenderingLineAfter);
        var secondaryPositions = [];
        for (var i = 0, len = e.secondaryPositions.length; i < len; i++) {
            secondaryPositions[i] = ViewModelCursors._toPositionThatCanBeRendered(e.secondaryViewPositions[i], stopRenderingLineAfter);
        }
        eventsCollector.emit(new viewEvents.ViewCursorPositionChangedEvent(position, secondaryPositions, e.isInEditableRange));
    };
    ViewModelCursors.prototype.onCursorSelectionChanged = function (eventsCollector, e) {
        this.lastCursorSelectionChangedEvent = e;
        eventsCollector.emit(new viewEvents.ViewCursorSelectionChangedEvent(e.viewSelection, e.secondaryViewSelections));
    };
    ViewModelCursors.prototype.onCursorRevealRange = function (eventsCollector, e) {
        eventsCollector.emit(new viewEvents.ViewRevealRangeRequestEvent(e.viewRange, e.verticalType, e.revealHorizontal, e.revealCursor));
    };
    ViewModelCursors.prototype.onLineMappingChanged = function (eventsCollector) {
        var _this = this;
        if (this.lastCursorPositionChangedEvent) {
            var toViewPos = function (pos) { return _this.coordinatesConverter.convertModelPositionToViewPosition(pos); };
            var e = {
                position: this.lastCursorPositionChangedEvent.position,
                viewPosition: toViewPos(this.lastCursorPositionChangedEvent.position),
                secondaryPositions: this.lastCursorPositionChangedEvent.secondaryPositions,
                secondaryViewPositions: this.lastCursorPositionChangedEvent.secondaryPositions.map(toViewPos),
                isInEditableRange: this.lastCursorPositionChangedEvent.isInEditableRange,
            };
            this.onCursorPositionChanged(eventsCollector, e);
        }
        if (this.lastCursorSelectionChangedEvent) {
            var toViewSel = function (sel) { return _this.coordinatesConverter.convertModelSelectionToViewSelection(sel); };
            var e = {
                selection: this.lastCursorSelectionChangedEvent.selection,
                viewSelection: toViewSel(this.lastCursorSelectionChangedEvent.selection),
                secondarySelections: this.lastCursorSelectionChangedEvent.secondarySelections,
                secondaryViewSelections: this.lastCursorSelectionChangedEvent.secondarySelections.map(toViewSel),
            };
            this.onCursorSelectionChanged(eventsCollector, e);
        }
    };
    ViewModelCursors.prototype.onCursorScrollRequest = function (eventsCollector, e) {
        eventsCollector.emit(new viewEvents.ViewScrollRequestEvent(e.deltaLines, e.revealCursor));
    };
    return ViewModelCursors;
}());
exports.ViewModelCursors = ViewModelCursors;
