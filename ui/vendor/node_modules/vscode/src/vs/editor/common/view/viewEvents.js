/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var ViewEventType;
(function (ViewEventType) {
    ViewEventType[ViewEventType["ViewConfigurationChanged"] = 1] = "ViewConfigurationChanged";
    ViewEventType[ViewEventType["ViewCursorPositionChanged"] = 2] = "ViewCursorPositionChanged";
    ViewEventType[ViewEventType["ViewCursorSelectionChanged"] = 3] = "ViewCursorSelectionChanged";
    ViewEventType[ViewEventType["ViewDecorationsChanged"] = 4] = "ViewDecorationsChanged";
    ViewEventType[ViewEventType["ViewFlushed"] = 5] = "ViewFlushed";
    ViewEventType[ViewEventType["ViewFocusChanged"] = 6] = "ViewFocusChanged";
    ViewEventType[ViewEventType["ViewLineMappingChanged"] = 7] = "ViewLineMappingChanged";
    ViewEventType[ViewEventType["ViewLinesChanged"] = 8] = "ViewLinesChanged";
    ViewEventType[ViewEventType["ViewLinesDeleted"] = 9] = "ViewLinesDeleted";
    ViewEventType[ViewEventType["ViewLinesInserted"] = 10] = "ViewLinesInserted";
    ViewEventType[ViewEventType["ViewRevealRangeRequest"] = 11] = "ViewRevealRangeRequest";
    ViewEventType[ViewEventType["ViewScrollChanged"] = 12] = "ViewScrollChanged";
    ViewEventType[ViewEventType["ViewScrollRequest"] = 13] = "ViewScrollRequest";
    ViewEventType[ViewEventType["ViewTokensChanged"] = 14] = "ViewTokensChanged";
    ViewEventType[ViewEventType["ViewTokensColorsChanged"] = 15] = "ViewTokensColorsChanged";
    ViewEventType[ViewEventType["ViewZonesChanged"] = 16] = "ViewZonesChanged";
})(ViewEventType = exports.ViewEventType || (exports.ViewEventType = {}));
var ViewConfigurationChangedEvent = (function () {
    function ViewConfigurationChangedEvent(source) {
        this.type = 1 /* ViewConfigurationChanged */;
        this.lineHeight = source.lineHeight;
        this.readOnly = source.readOnly;
        this.layoutInfo = source.layoutInfo;
        this.fontInfo = source.fontInfo;
        this.viewInfo = source.viewInfo;
        this.wrappingInfo = source.wrappingInfo;
    }
    return ViewConfigurationChangedEvent;
}());
exports.ViewConfigurationChangedEvent = ViewConfigurationChangedEvent;
var ViewCursorPositionChangedEvent = (function () {
    function ViewCursorPositionChangedEvent(position, secondaryPositions, isInEditableRange) {
        this.type = 2 /* ViewCursorPositionChanged */;
        this.position = position;
        this.secondaryPositions = secondaryPositions;
        this.isInEditableRange = isInEditableRange;
    }
    return ViewCursorPositionChangedEvent;
}());
exports.ViewCursorPositionChangedEvent = ViewCursorPositionChangedEvent;
var ViewCursorSelectionChangedEvent = (function () {
    function ViewCursorSelectionChangedEvent(selection, secondarySelections) {
        this.type = 3 /* ViewCursorSelectionChanged */;
        this.selection = selection;
        this.secondarySelections = secondarySelections;
    }
    return ViewCursorSelectionChangedEvent;
}());
exports.ViewCursorSelectionChangedEvent = ViewCursorSelectionChangedEvent;
var ViewDecorationsChangedEvent = (function () {
    function ViewDecorationsChangedEvent() {
        this.type = 4 /* ViewDecorationsChanged */;
        // Nothing to do
    }
    return ViewDecorationsChangedEvent;
}());
exports.ViewDecorationsChangedEvent = ViewDecorationsChangedEvent;
var ViewFlushedEvent = (function () {
    function ViewFlushedEvent() {
        this.type = 5 /* ViewFlushed */;
        // Nothing to do
    }
    return ViewFlushedEvent;
}());
exports.ViewFlushedEvent = ViewFlushedEvent;
var ViewFocusChangedEvent = (function () {
    function ViewFocusChangedEvent(isFocused) {
        this.type = 6 /* ViewFocusChanged */;
        this.isFocused = isFocused;
    }
    return ViewFocusChangedEvent;
}());
exports.ViewFocusChangedEvent = ViewFocusChangedEvent;
var ViewLineMappingChangedEvent = (function () {
    function ViewLineMappingChangedEvent() {
        this.type = 7 /* ViewLineMappingChanged */;
        // Nothing to do
    }
    return ViewLineMappingChangedEvent;
}());
exports.ViewLineMappingChangedEvent = ViewLineMappingChangedEvent;
var ViewLinesChangedEvent = (function () {
    function ViewLinesChangedEvent(fromLineNumber, toLineNumber) {
        this.type = 8 /* ViewLinesChanged */;
        this.fromLineNumber = fromLineNumber;
        this.toLineNumber = toLineNumber;
    }
    return ViewLinesChangedEvent;
}());
exports.ViewLinesChangedEvent = ViewLinesChangedEvent;
var ViewLinesDeletedEvent = (function () {
    function ViewLinesDeletedEvent(fromLineNumber, toLineNumber) {
        this.type = 9 /* ViewLinesDeleted */;
        this.fromLineNumber = fromLineNumber;
        this.toLineNumber = toLineNumber;
    }
    return ViewLinesDeletedEvent;
}());
exports.ViewLinesDeletedEvent = ViewLinesDeletedEvent;
var ViewLinesInsertedEvent = (function () {
    function ViewLinesInsertedEvent(fromLineNumber, toLineNumber) {
        this.type = 10 /* ViewLinesInserted */;
        this.fromLineNumber = fromLineNumber;
        this.toLineNumber = toLineNumber;
    }
    return ViewLinesInsertedEvent;
}());
exports.ViewLinesInsertedEvent = ViewLinesInsertedEvent;
var ViewRevealRangeRequestEvent = (function () {
    function ViewRevealRangeRequestEvent(range, verticalType, revealHorizontal, revealCursor) {
        this.type = 11 /* ViewRevealRangeRequest */;
        this.range = range;
        this.verticalType = verticalType;
        this.revealHorizontal = revealHorizontal;
        this.revealCursor = revealCursor;
    }
    return ViewRevealRangeRequestEvent;
}());
exports.ViewRevealRangeRequestEvent = ViewRevealRangeRequestEvent;
var ViewScrollChangedEvent = (function () {
    function ViewScrollChangedEvent(source) {
        this.type = 12 /* ViewScrollChanged */;
        this.scrollWidth = source.scrollWidth;
        this.scrollLeft = source.scrollLeft;
        this.scrollHeight = source.scrollHeight;
        this.scrollTop = source.scrollTop;
        this.scrollWidthChanged = source.scrollWidthChanged;
        this.scrollLeftChanged = source.scrollLeftChanged;
        this.scrollHeightChanged = source.scrollHeightChanged;
        this.scrollTopChanged = source.scrollTopChanged;
    }
    return ViewScrollChangedEvent;
}());
exports.ViewScrollChangedEvent = ViewScrollChangedEvent;
var ViewScrollRequestEvent = (function () {
    function ViewScrollRequestEvent(deltaLines, revealCursor) {
        this.type = 13 /* ViewScrollRequest */;
        this.deltaLines = deltaLines;
        this.revealCursor = revealCursor;
    }
    return ViewScrollRequestEvent;
}());
exports.ViewScrollRequestEvent = ViewScrollRequestEvent;
var ViewTokensChangedEvent = (function () {
    function ViewTokensChangedEvent(ranges) {
        this.type = 14 /* ViewTokensChanged */;
        this.ranges = ranges;
    }
    return ViewTokensChangedEvent;
}());
exports.ViewTokensChangedEvent = ViewTokensChangedEvent;
var ViewTokensColorsChangedEvent = (function () {
    function ViewTokensColorsChangedEvent() {
        this.type = 15 /* ViewTokensColorsChanged */;
        // Nothing to do
    }
    return ViewTokensColorsChangedEvent;
}());
exports.ViewTokensColorsChangedEvent = ViewTokensColorsChangedEvent;
var ViewZonesChangedEvent = (function () {
    function ViewZonesChangedEvent() {
        this.type = 16 /* ViewZonesChanged */;
        // Nothing to do
    }
    return ViewZonesChangedEvent;
}());
exports.ViewZonesChangedEvent = ViewZonesChangedEvent;
