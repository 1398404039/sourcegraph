import { Disposable } from 'vs/base/common/lifecycle';
import { Scrollable } from 'vs/base/common/scrollable';
import * as editorCommon from 'vs/editor/common/editorCommon';
import { IViewLayout } from 'vs/editor/common/viewModel/viewModel';
import { IPartialViewLinesViewportData } from 'vs/editor/common/viewLayout/viewLinesViewportData';
import { ViewEventDispatcher } from 'vs/editor/common/view/viewEventDispatcher';
import * as viewEvents from 'vs/editor/common/view/viewEvents';
export declare class LayoutProvider extends Disposable implements IViewLayout {
    static LINES_HORIZONTAL_EXTRA_PX: number;
    private _configuration;
    private _privateViewEventBus;
    private _linesLayout;
    private _scrollable;
    constructor(configuration: editorCommon.IConfiguration, lineCount: number, privateViewEventBus: ViewEventDispatcher);
    dispose(): void;
    getScrollable(): Scrollable;
    onHeightMaybeChanged(): void;
    onConfigurationChanged(e: viewEvents.ViewConfigurationChangedEvent): void;
    onFlushed(lineCount: number): void;
    onLinesDeleted(e: viewEvents.ViewLinesDeletedEvent): void;
    onLinesInserted(e: viewEvents.ViewLinesInsertedEvent): void;
    private _getHorizontalScrollbarHeight(scrollState);
    private _getTotalHeight();
    private _updateHeight();
    getCurrentViewport(): editorCommon.Viewport;
    private _computeScrollWidth(maxLineWidth, viewportWidth);
    onMaxLineWidthChanged(maxLineWidth: number): void;
    saveState(): editorCommon.IViewState;
    restoreState(state: editorCommon.IViewState): void;
    addWhitespace(afterLineNumber: number, ordinal: number, height: number): number;
    changeWhitespace(id: number, newAfterLineNumber: number, newHeight: number): boolean;
    removeWhitespace(id: number): boolean;
    getVerticalOffsetForLineNumber(lineNumber: number): number;
    isAfterLines(verticalOffset: number): boolean;
    getLineNumberAtVerticalOffset(verticalOffset: number): number;
    getWhitespaceAtVerticalOffset(verticalOffset: number): editorCommon.IViewWhitespaceViewportData;
    getLinesViewportData(): IPartialViewLinesViewportData;
    getWhitespaceViewportData(): editorCommon.IViewWhitespaceViewportData[];
    getWhitespaces(): editorCommon.IEditorWhitespace[];
    getScrollWidth(): number;
    getScrollLeft(): number;
    getScrollHeight(): number;
    getScrollTop(): number;
    setScrollPosition(position: editorCommon.INewScrollPosition): void;
}
