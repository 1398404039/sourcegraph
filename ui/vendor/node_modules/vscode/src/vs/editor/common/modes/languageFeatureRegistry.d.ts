import URI from 'vs/base/common/uri';
import Event from 'vs/base/common/event';
import { IDisposable } from 'vs/base/common/lifecycle';
import { LanguageSelector } from 'vs/editor/common/modes/languageSelector';
import { IWorkspace } from 'vs/platform/workspace/common/workspace';
/**
 * The minimal set of methods from IReadOnlyModel required for registration.
 */
export interface Model {
    /**
     * Only basic mode supports allowed on this model because it is simply too large.
     * (tokenization is allowed and other basic supports)
     * @internal
     */
    isTooLargeForHavingARichMode(): boolean;
    /**
     * Gets the resource associated with this editor model.
     */
    readonly uri: URI;
    /**
     * Get the language associated with this model.
     */
    getModeId(): string;
}
export default class LanguageFeatureRegistry<T> {
    private _clock;
    private _entries;
    private _onDidChange;
    constructor();
    readonly onDidChange: Event<number>;
    register(selector: LanguageSelector, provider: T, workspace?: IWorkspace): IDisposable;
    has(model: Model): boolean;
    all(model: Model): T[];
    ordered(model: Model): T[];
    orderedGroups(model: Model): T[][];
    private _orderedForEach(model, callback);
    private _lastCandidate;
    private _updateScores(model);
    private static _compareByScoreAndTime(a, b);
}
