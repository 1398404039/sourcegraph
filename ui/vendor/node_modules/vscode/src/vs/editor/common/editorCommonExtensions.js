/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var errors_1 = require("vs/base/common/errors");
var uri_1 = require("vs/base/common/uri");
var commands_1 = require("vs/platform/commands/common/commands");
var keybindingsRegistry_1 = require("vs/platform/keybinding/common/keybindingsRegistry");
var platform_1 = require("vs/platform/platform");
var telemetry_1 = require("vs/platform/telemetry/common/telemetry");
var config_1 = require("vs/editor/common/config/config");
var position_1 = require("vs/editor/common/core/position");
var modelService_1 = require("vs/editor/common/services/modelService");
var actions_1 = require("vs/platform/actions/common/actions");
exports.Command = config_1.Command;
exports.EditorCommand = config_1.EditorCommand;
var EditorAction = (function (_super) {
    __extends(EditorAction, _super);
    function EditorAction(opts) {
        var _this = _super.call(this, opts) || this;
        _this.label = opts.label;
        _this.alias = opts.alias;
        _this.menuOpts = opts.menuOpts;
        return _this;
    }
    EditorAction.prototype.toMenuItem = function () {
        if (!this.menuOpts) {
            return null;
        }
        return {
            command: {
                id: this.id,
                title: this.label
            },
            when: this.precondition,
            group: this.menuOpts.group,
            order: this.menuOpts.order
        };
    };
    EditorAction.prototype.runEditorCommand = function (accessor, editor, args) {
        this.reportTelemetry(accessor);
        return this.run(accessor, editor);
    };
    EditorAction.prototype.reportTelemetry = function (accessor) {
        accessor.get(telemetry_1.ITelemetryService).publicLog('editorActionInvoked', { name: this.label, id: this.id });
    };
    return EditorAction;
}(config_1.EditorCommand));
exports.EditorAction = EditorAction;
var HandlerEditorAction = (function (_super) {
    __extends(HandlerEditorAction, _super);
    function HandlerEditorAction(opts) {
        var _this = _super.call(this, opts) || this;
        _this._handlerId = opts.handlerId;
        return _this;
    }
    HandlerEditorAction.prototype.run = function (accessor, editor) {
        editor.trigger(this.id, this._handlerId, null);
    };
    return HandlerEditorAction;
}(EditorAction));
exports.HandlerEditorAction = HandlerEditorAction;
// --- Editor Actions
function editorAction(ctor) {
    CommonEditorRegistry.registerEditorAction(new ctor());
}
exports.editorAction = editorAction;
function commonEditorContribution(ctor) {
    EditorContributionRegistry.INSTANCE.registerEditorContribution(ctor);
}
exports.commonEditorContribution = commonEditorContribution;
var CommonEditorRegistry;
(function (CommonEditorRegistry) {
    // --- Editor Actions
    function registerEditorAction(desc) {
        EditorContributionRegistry.INSTANCE.registerEditorAction(desc);
    }
    CommonEditorRegistry.registerEditorAction = registerEditorAction;
    function getEditorActions() {
        return EditorContributionRegistry.INSTANCE.getEditorActions();
    }
    CommonEditorRegistry.getEditorActions = getEditorActions;
    // --- Editor Contributions
    function getEditorContributions() {
        return EditorContributionRegistry.INSTANCE.getEditorContributions();
    }
    CommonEditorRegistry.getEditorContributions = getEditorContributions;
    // --- Editor Commands
    function commandWeight(importance) {
        if (importance === void 0) { importance = 0; }
        return keybindingsRegistry_1.KeybindingsRegistry.WEIGHT.editorContrib(importance);
    }
    CommonEditorRegistry.commandWeight = commandWeight;
    function registerEditorCommand(desc) {
        keybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule(desc.toCommandAndKeybindingRule(keybindingsRegistry_1.KeybindingsRegistry.WEIGHT.editorContrib()));
    }
    CommonEditorRegistry.registerEditorCommand = registerEditorCommand;
    function registerLanguageCommand(id, handler) {
        commands_1.CommandsRegistry.registerCommand(id, function (accessor, args) { return handler(accessor, args || {}); });
    }
    CommonEditorRegistry.registerLanguageCommand = registerLanguageCommand;
    function registerDefaultLanguageCommand(id, handler) {
        registerLanguageCommand(id, function (accessor, args) {
            var resource = args.resource, position = args.position;
            if (!(resource instanceof uri_1.default)) {
                throw errors_1.illegalArgument('resource');
            }
            if (!position_1.Position.isIPosition(position)) {
                throw errors_1.illegalArgument('position');
            }
            var model = accessor.get(modelService_1.IModelService).getModel(resource);
            if (!model) {
                throw errors_1.illegalArgument('Can not find open model for ' + resource);
            }
            var editorPosition = position_1.Position.lift(position);
            return handler(model, editorPosition, args);
        });
    }
    CommonEditorRegistry.registerDefaultLanguageCommand = registerDefaultLanguageCommand;
})(CommonEditorRegistry = exports.CommonEditorRegistry || (exports.CommonEditorRegistry = {}));
// Editor extension points
var Extensions = {
    EditorCommonContributions: 'editor.commonContributions'
};
var EditorContributionRegistry = (function () {
    function EditorContributionRegistry() {
        this.editorContributions = [];
        this.editorActions = [];
    }
    EditorContributionRegistry.prototype.registerEditorContribution = function (ctor) {
        this.editorContributions.push(ctor);
    };
    EditorContributionRegistry.prototype.registerEditorAction = function (action) {
        var menuItem = action.toMenuItem();
        if (menuItem) {
            actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.EditorContext, menuItem);
        }
        keybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule(action.toCommandAndKeybindingRule(keybindingsRegistry_1.KeybindingsRegistry.WEIGHT.editorContrib()));
        this.editorActions.push(action);
    };
    EditorContributionRegistry.prototype.getEditorContributions = function () {
        return this.editorContributions.slice(0);
    };
    EditorContributionRegistry.prototype.getEditorActions = function () {
        return this.editorActions.slice(0);
    };
    return EditorContributionRegistry;
}());
EditorContributionRegistry.INSTANCE = new EditorContributionRegistry();
platform_1.Registry.add(Extensions.EditorCommonContributions, EditorContributionRegistry.INSTANCE);
