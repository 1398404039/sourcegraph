import { TPromise } from 'vs/base/common/winjs.base';
import { ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';
import { IKeybindings } from 'vs/platform/keybinding/common/keybinding';
import { ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';
import { ICommandAndKeybindingRule } from 'vs/platform/keybinding/common/keybindingsRegistry';
import * as editorCommon from 'vs/editor/common/editorCommon';
import { ICommandHandlerDescription } from 'vs/platform/commands/common/commands';
export interface ICommandKeybindingsOptions extends IKeybindings {
    kbExpr?: ContextKeyExpr;
    weight?: number;
}
export interface ICommandOptions {
    id: string;
    precondition: ContextKeyExpr;
    kbOpts?: ICommandKeybindingsOptions;
    description?: ICommandHandlerDescription;
}
export declare abstract class Command {
    id: string;
    precondition: ContextKeyExpr;
    private kbOpts;
    private description;
    constructor(opts: ICommandOptions);
    abstract runCommand(accessor: ServicesAccessor, args: any): void | TPromise<void>;
    toCommandAndKeybindingRule(defaultWeight: number): ICommandAndKeybindingRule;
}
export interface EditorControllerCommand<T extends editorCommon.IEditorContribution> {
    new (opts: IContributionCommandOptions<T>): EditorCommand;
}
export interface IContributionCommandOptions<T> extends ICommandOptions {
    handler: (controller: T) => void;
}
export declare abstract class EditorCommand extends Command {
    static bindToContribution<T extends editorCommon.IEditorContribution>(controllerGetter: (editor: editorCommon.ICommonCodeEditor) => T): EditorControllerCommand<T>;
    constructor(opts: ICommandOptions);
    runCommand(accessor: ServicesAccessor, args: any): void | TPromise<void>;
    protected abstract runEditorCommand(accessor: ServicesAccessor, editor: editorCommon.ICommonCodeEditor, args: any): void | TPromise<void>;
}
export declare function findFocusedEditor(commandId: string, accessor: ServicesAccessor, complain: boolean): editorCommon.ICommonCodeEditor;
