import { SingleCursorState, CursorConfiguration, ICursorSimpleModel } from 'vs/editor/common/controller/cursorCommon';
import { Position } from 'vs/editor/common/core/position';
import { Range } from 'vs/editor/common/core/range';
import { Selection } from 'vs/editor/common/core/selection';
import * as editorCommon from 'vs/editor/common/editorCommon';
import { WordNavigationType } from 'vs/editor/common/controller/cursorWordOperations';
import { ICoordinatesConverter } from 'vs/editor/common/viewModel/viewModel';
export interface IOneCursorOperationContext {
    cursorPositionChangeReason: editorCommon.CursorChangeReason;
    shouldReveal: boolean;
    shouldRevealVerticalInCenter: boolean;
    shouldRevealHorizontal: boolean;
    shouldPushStackElementBefore: boolean;
    shouldPushStackElementAfter: boolean;
    executeCommand: editorCommon.ICommand;
    isAutoWhitespaceCommand: boolean;
}
export interface IModeConfiguration {
    electricChars: {
        [key: string]: boolean;
    };
    autoClosingPairsOpen: {
        [key: string]: string;
    };
    autoClosingPairsClose: {
        [key: string]: string;
    };
    surroundingPairs: {
        [key: string]: string;
    };
}
export interface CursorMoveArguments extends editorCommon.CursorMoveArguments {
    pageSize?: number;
    isPaged?: boolean;
}
export interface IViewModelHelper {
    coordinatesConverter: ICoordinatesConverter;
    viewModel: ICursorSimpleModel;
    getCurrentCompletelyVisibleViewLinesRangeInViewport(): Range;
    getCurrentCompletelyVisibleModelLinesRangeInViewport(): Range;
}
export interface IOneCursorState {
    selectionStart: Range;
    viewSelectionStart: Range;
    position: Position;
    viewPosition: Position;
    leftoverVisibleColumns: number;
    selectionStartLeftoverVisibleColumns: number;
}
export interface IOneCursor {
    readonly modelState: SingleCursorState;
    readonly viewState: SingleCursorState;
    readonly config: CursorConfiguration;
}
export declare class MoveOperationResult {
    readonly modelState: SingleCursorState;
    readonly viewState: SingleCursorState;
    readonly ensureInEditableRange: boolean;
    readonly reason: editorCommon.CursorChangeReason;
    constructor(modelState: SingleCursorState, viewState: SingleCursorState, ensureInEditableRange: boolean, reason: editorCommon.CursorChangeReason);
}
export declare class OneCursor implements IOneCursor {
    readonly model: editorCommon.IModel;
    readonly viewModel: ICursorSimpleModel;
    private readonly configuration;
    private readonly viewModelHelper;
    private readonly coordinatesConverter;
    private readonly _modelOptionsListener;
    private readonly _configChangeListener;
    private modeConfiguration;
    config: CursorConfiguration;
    modelState: SingleCursorState;
    viewState: SingleCursorState;
    private _selStartMarker;
    private _selEndMarker;
    constructor(model: editorCommon.IModel, configuration: editorCommon.IConfiguration, modeConfiguration: IModeConfiguration, viewModelHelper: IViewModelHelper);
    /**
     * Sometimes, the line mapping changes and the stored view position is stale.
     */
    ensureValidState(): void;
    private _recreateCursorConfig();
    private _ensureInEditableRange(position);
    private _setState(modelState, viewState, ensureInEditableRange);
    private _ensureMarker(markerId, lineNumber, column, stickToPreviousCharacter);
    saveState(): IOneCursorState;
    restoreState(state: IOneCursorState): void;
    updateModeConfiguration(modeConfiguration: IModeConfiguration): void;
    duplicate(): OneCursor;
    dispose(): void;
    setSelection(selection: editorCommon.ISelection, viewSelection?: editorCommon.ISelection): void;
    setSelectionStart(range: Range): void;
    collapseSelection(): void;
    moveModelPosition(inSelectionMode: boolean, lineNumber: number, column: number, leftoverVisibleColumns: number, ensureInEditableRange: boolean): void;
    moveViewPosition(inSelectionMode: boolean, viewLineNumber: number, viewColumn: number, leftoverVisibleColumns: number, ensureInEditableRange: boolean): void;
    private _move(inSelectionMode, lineNumber, column, viewLineNumber, viewColumn, leftoverVisibleColumns, ensureInEditableRange);
    setState(modelState: SingleCursorState, viewState: SingleCursorState, ensureInEditableRange: boolean): void;
    beginRecoverSelectionFromMarkers(): Selection;
    endRecoverSelectionFromMarkers(ctx: IOneCursorOperationContext, recoveredSelection: Selection): boolean;
    setSelectionStartLeftoverVisibleColumns(value: number): void;
    validatePosition(position: editorCommon.IPosition): Position;
    validateViewPosition(viewLineNumber: number, viewColumn: number, modelPosition: Position): Position;
    convertViewSelectionToModelSelection(viewSelection: Selection): Selection;
    convertViewToModelPosition(lineNumber: number, column: number): Position;
    convertModelPositionToViewPosition(lineNumber: number, column: number): Position;
    getRangeToRevealModelLinesBeforeViewPortTop(noOfLinesBeforeTop: number): Range;
    getRangeToRevealModelLinesAfterViewPortBottom(noOfLinesAfterBottom: number): Range;
    getLineFromViewPortTop(lineFromTop?: number): number;
    getCenterLineInViewPort(): number;
    getLineFromViewPortBottom(lineFromBottom?: number): number;
    isLastLineVisibleInViewPort(): boolean;
    getCompletelyVisibleViewLinesRangeInViewport(): Range;
    getRevealViewLinesRangeInViewport(): Range;
    getNearestRevealViewPositionInViewport(): Position;
}
export declare class OneCursorOp {
    static moveTo(cursor: OneCursor, inSelectionMode: boolean, position: editorCommon.IPosition, viewPosition: editorCommon.IPosition, eventSource: string, ctx: IOneCursorOperationContext): boolean;
    private static _getViewHalfLineSize(cursor, lineNumber);
    static move(cursor: OneCursor, moveParams: CursorMoveArguments, eventSource: string, ctx: IOneCursorOperationContext): boolean;
    private static _applyMoveOperationResult(cursor, ctx, r);
    private static _fromModelCursorState(cursor, r);
    private static _fromViewCursorState(cursor, r);
    private static _moveLeft(cursor, inSelectionMode, noOfColumns, ctx);
    static moveWordLeft(cursor: OneCursor, inSelectionMode: boolean, wordNavigationType: WordNavigationType, ctx: IOneCursorOperationContext): boolean;
    private static _moveRight(cursor, inSelectionMode, noOfColumns, ctx);
    static moveWordRight(cursor: OneCursor, inSelectionMode: boolean, wordNavigationType: WordNavigationType, ctx: IOneCursorOperationContext): boolean;
    private static _moveDown(cursor, moveArguments, ctx);
    private static _moveDownByViewLines(cursor, inSelectionMode, linesCount, ctx);
    private static _moveDownByModelLines(cursor, inSelectionMode, linesCount, ctx);
    static translateDown(cursor: OneCursor, ctx: IOneCursorOperationContext): boolean;
    private static _moveUp(cursor, moveArguments, ctx);
    private static _moveUpByViewLines(cursor, inSelectionMode, linesCount, ctx);
    private static _moveUpByModelLines(cursor, inSelectionMode, linesCount, ctx);
    static translateUp(cursor: OneCursor, ctx: IOneCursorOperationContext): boolean;
    static moveToBeginningOfLine(cursor: OneCursor, inSelectionMode: boolean, ctx: IOneCursorOperationContext): boolean;
    static moveToEndOfLine(cursor: OneCursor, inSelectionMode: boolean, ctx: IOneCursorOperationContext): boolean;
    static expandLineSelection(cursor: OneCursor, ctx: IOneCursorOperationContext): boolean;
    static moveToBeginningOfBuffer(cursor: OneCursor, inSelectionMode: boolean, ctx: IOneCursorOperationContext): boolean;
    static moveToEndOfBuffer(cursor: OneCursor, inSelectionMode: boolean, ctx: IOneCursorOperationContext): boolean;
    static selectAll(cursor: OneCursor, ctx: IOneCursorOperationContext): boolean;
    static line(cursor: OneCursor, inSelectionMode: boolean, _position: editorCommon.IPosition, _viewPosition: editorCommon.IPosition, ctx: IOneCursorOperationContext): boolean;
    static word(cursor: OneCursor, inSelectionMode: boolean, validatedPosition: Position, ctx: IOneCursorOperationContext): boolean;
    static cancelSelection(cursor: OneCursor, ctx: IOneCursorOperationContext): boolean;
}
