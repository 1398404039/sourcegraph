/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var editorCommon_1 = require("vs/editor/common/editorCommon");
var EditorLayoutProvider = (function () {
    function EditorLayoutProvider() {
    }
    EditorLayoutProvider.compute = function (_opts) {
        var outerWidth = _opts.outerWidth | 0;
        var outerHeight = _opts.outerHeight | 0;
        var showGlyphMargin = Boolean(_opts.showGlyphMargin);
        var lineHeight = _opts.lineHeight | 0;
        var showLineNumbers = Boolean(_opts.showLineNumbers);
        var lineNumbersMinChars = _opts.lineNumbersMinChars | 0;
        var lineNumbersDigitCount = _opts.lineNumbersDigitCount | 0;
        var lineDecorationsWidth = _opts.lineDecorationsWidth | 0;
        var typicalHalfwidthCharacterWidth = Number(_opts.typicalHalfwidthCharacterWidth);
        var maxDigitWidth = Number(_opts.maxDigitWidth);
        var verticalScrollbarWidth = _opts.verticalScrollbarWidth | 0;
        var verticalScrollbarHasArrows = Boolean(_opts.verticalScrollbarHasArrows);
        var scrollbarArrowSize = _opts.scrollbarArrowSize | 0;
        var horizontalScrollbarHeight = _opts.horizontalScrollbarHeight | 0;
        var minimap = Boolean(_opts.minimap);
        var minimapRenderCharacters = Boolean(_opts.minimapRenderCharacters);
        var minimapMaxColumn = _opts.minimapMaxColumn | 0;
        var pixelRatio = Number(_opts.pixelRatio);
        var lineNumbersWidth = 0;
        if (showLineNumbers) {
            var digitCount = Math.max(lineNumbersDigitCount, lineNumbersMinChars);
            lineNumbersWidth = Math.round(digitCount * maxDigitWidth);
        }
        var glyphMarginWidth = 0;
        if (showGlyphMargin) {
            glyphMarginWidth = lineHeight;
        }
        var glyphMarginLeft = 0;
        var lineNumbersLeft = glyphMarginLeft + glyphMarginWidth;
        var decorationsLeft = lineNumbersLeft + lineNumbersWidth;
        var contentLeft = decorationsLeft + lineDecorationsWidth;
        var remainingWidth = outerWidth - glyphMarginWidth - lineNumbersWidth - lineDecorationsWidth;
        var renderMinimap;
        var minimapWidth;
        var contentWidth;
        if (!minimap) {
            minimapWidth = 0;
            renderMinimap = editorCommon_1.RenderMinimap.None;
            contentWidth = remainingWidth;
        }
        else {
            var minimapCharWidth = void 0;
            if (pixelRatio >= 2) {
                renderMinimap = minimapRenderCharacters ? editorCommon_1.RenderMinimap.Large : editorCommon_1.RenderMinimap.LargeBlocks;
                minimapCharWidth = 2 / pixelRatio;
            }
            else {
                renderMinimap = minimapRenderCharacters ? editorCommon_1.RenderMinimap.Small : editorCommon_1.RenderMinimap.SmallBlocks;
                minimapCharWidth = 1 / pixelRatio;
            }
            // Given:
            // viewportColumn = (contentWidth - verticalScrollbarWidth) / typicalHalfwidthCharacterWidth
            // minimapWidth = viewportColumn * minimapCharWidth
            // contentWidth = remainingWidth - minimapWidth
            // What are good values for contentWidth and minimapWidth ?
            // minimapWidth = ((contentWidth - verticalScrollbarWidth) / typicalHalfwidthCharacterWidth) * minimapCharWidth
            // typicalHalfwidthCharacterWidth * minimapWidth = (contentWidth - verticalScrollbarWidth) * minimapCharWidth
            // typicalHalfwidthCharacterWidth * minimapWidth = (remainingWidth - minimapWidth - verticalScrollbarWidth) * minimapCharWidth
            // (typicalHalfwidthCharacterWidth + minimapCharWidth) * minimapWidth = (remainingWidth - verticalScrollbarWidth) * minimapCharWidth
            // minimapWidth = ((remainingWidth - verticalScrollbarWidth) * minimapCharWidth) / (typicalHalfwidthCharacterWidth + minimapCharWidth)
            minimapWidth = Math.max(0, Math.floor(((remainingWidth - verticalScrollbarWidth) * minimapCharWidth) / (typicalHalfwidthCharacterWidth + minimapCharWidth)));
            var minimapColumns = minimapWidth / minimapCharWidth;
            if (minimapColumns > minimapMaxColumn) {
                minimapWidth = Math.floor(minimapMaxColumn * minimapCharWidth);
            }
            contentWidth = remainingWidth - minimapWidth;
        }
        var viewportColumn = Math.max(1, Math.floor((contentWidth - verticalScrollbarWidth) / typicalHalfwidthCharacterWidth));
        var verticalArrowSize = (verticalScrollbarHasArrows ? scrollbarArrowSize : 0);
        return new editorCommon_1.EditorLayoutInfo({
            width: outerWidth,
            height: outerHeight,
            glyphMarginLeft: glyphMarginLeft,
            glyphMarginWidth: glyphMarginWidth,
            glyphMarginHeight: outerHeight,
            lineNumbersLeft: lineNumbersLeft,
            lineNumbersWidth: lineNumbersWidth,
            lineNumbersHeight: outerHeight,
            decorationsLeft: decorationsLeft,
            decorationsWidth: lineDecorationsWidth,
            decorationsHeight: outerHeight,
            contentLeft: contentLeft,
            contentWidth: contentWidth,
            contentHeight: outerHeight,
            renderMinimap: renderMinimap,
            minimapWidth: minimapWidth,
            viewportColumn: viewportColumn,
            verticalScrollbarWidth: verticalScrollbarWidth,
            horizontalScrollbarHeight: horizontalScrollbarHeight,
            overviewRuler: new editorCommon_1.OverviewRulerPosition({
                top: verticalArrowSize,
                width: verticalScrollbarWidth,
                height: (outerHeight - 2 * verticalArrowSize),
                right: 0
            })
        });
    };
    return EditorLayoutProvider;
}());
exports.EditorLayoutProvider = EditorLayoutProvider;
