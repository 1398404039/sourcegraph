import { ViewLineToken } from 'vs/editor/common/core/viewLineToken';
import { Token } from 'vs/editor/common/core/token';
export declare const enum TokensBinaryEncodingValues {
    START_INDEX_MASK = 4294967295,
    TYPE_MASK = 65535,
    START_INDEX_OFFSET = 1,
    TYPE_OFFSET = 4294967296,
}
export declare const DEFLATED_TOKENS_EMPTY_TEXT: number[];
export declare const DEFLATED_TOKENS_NON_EMPTY_TEXT: number[];
export declare class TokensInflatorMap {
    _tokensInflatorMapBrand: void;
    topLevelModeId: string;
    _inflate: string[];
    _deflate: {
        [token: string]: number;
    };
    constructor(topLevelModeId: string);
}
export declare class TokensBinaryEncoding {
    static deflateArr(map: TokensInflatorMap, tokens: Token[]): number[];
    static getStartIndex(binaryEncodedToken: number): number;
    static getType(map: TokensInflatorMap, binaryEncodedToken: number): string;
    static inflateArr(map: TokensInflatorMap, binaryEncodedTokens: number[]): ViewLineToken[];
    static findIndexOfOffset(binaryEncodedTokens: number[], offset: number): number;
    static sliceAndInflate(map: TokensInflatorMap, binaryEncodedTokens: number[], startOffset: number, endOffset: number, deltaStartIndex: number): ViewLineToken[];
    private static findIndexInSegmentsArray(arr, desiredIndex);
}
