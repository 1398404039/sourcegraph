/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var languageFeatureRegistry_1 = require("vs/editor/common/modes/languageFeatureRegistry");
var tokenizationRegistry_1 = require("vs/editor/common/modes/tokenizationRegistry");
/**
 * Open ended enum at runtime
 * @internal
 */
var LanguageId;
(function (LanguageId) {
    LanguageId[LanguageId["Null"] = 0] = "Null";
    LanguageId[LanguageId["PlainText"] = 1] = "PlainText";
})(LanguageId = exports.LanguageId || (exports.LanguageId = {}));
/**
 * @internal
 */
var LanguageIdentifier = (function () {
    function LanguageIdentifier(sid, iid) {
        this.language = sid;
        this.id = iid;
    }
    return LanguageIdentifier;
}());
exports.LanguageIdentifier = LanguageIdentifier;
/**
 * A font style. Values are 2^x such that a bit mask can be used.
 * @internal
 */
var FontStyle;
(function (FontStyle) {
    FontStyle[FontStyle["NotSet"] = -1] = "NotSet";
    FontStyle[FontStyle["None"] = 0] = "None";
    FontStyle[FontStyle["Italic"] = 1] = "Italic";
    FontStyle[FontStyle["Bold"] = 2] = "Bold";
    FontStyle[FontStyle["Underline"] = 4] = "Underline";
})(FontStyle = exports.FontStyle || (exports.FontStyle = {}));
/**
 * Open ended enum at runtime
 * @internal
 */
var ColorId;
(function (ColorId) {
    ColorId[ColorId["None"] = 0] = "None";
    ColorId[ColorId["DefaultForeground"] = 1] = "DefaultForeground";
    ColorId[ColorId["DefaultBackground"] = 2] = "DefaultBackground";
})(ColorId = exports.ColorId || (exports.ColorId = {}));
/**
 * A standard token type. Values are 2^x such that a bit mask can be used.
 * @internal
 */
var StandardTokenType;
(function (StandardTokenType) {
    StandardTokenType[StandardTokenType["Other"] = 0] = "Other";
    StandardTokenType[StandardTokenType["Comment"] = 1] = "Comment";
    StandardTokenType[StandardTokenType["String"] = 2] = "String";
    StandardTokenType[StandardTokenType["RegEx"] = 4] = "RegEx";
})(StandardTokenType = exports.StandardTokenType || (exports.StandardTokenType = {}));
/**
 * Helpers to manage the "collapsed" metadata of an entire StackElement stack.
 * The following assumptions have been made:
 *  - languageId < 256 => needs 8 bits
 *  - unique color count < 512 => needs 9 bits
 *
 * The binary format is:
 * - -------------------------------------------
 *     3322 2222 2222 1111 1111 1100 0000 0000
 *     1098 7654 3210 9876 5432 1098 7654 3210
 * - -------------------------------------------
 *     xxxx xxxx xxxx xxxx xxxx xxxx xxxx xxxx
 *     bbbb bbbb bfff ffff ffFF FTTT LLLL LLLL
 * - -------------------------------------------
 *  - L = LanguageId (8 bits)
 *  - T = StandardTokenType (3 bits)
 *  - F = FontStyle (3 bits)
 *  - f = foreground color (9 bits)
 *  - b = background color (9 bits)
 *
 * @internal
 */
var MetadataConsts;
(function (MetadataConsts) {
    MetadataConsts[MetadataConsts["LANGUAGEID_MASK"] = 255] = "LANGUAGEID_MASK";
    MetadataConsts[MetadataConsts["TOKEN_TYPE_MASK"] = 1792] = "TOKEN_TYPE_MASK";
    MetadataConsts[MetadataConsts["FONT_STYLE_MASK"] = 14336] = "FONT_STYLE_MASK";
    MetadataConsts[MetadataConsts["FOREGROUND_MASK"] = 8372224] = "FOREGROUND_MASK";
    MetadataConsts[MetadataConsts["BACKGROUND_MASK"] = 4286578688] = "BACKGROUND_MASK";
    MetadataConsts[MetadataConsts["LANGUAGEID_OFFSET"] = 0] = "LANGUAGEID_OFFSET";
    MetadataConsts[MetadataConsts["TOKEN_TYPE_OFFSET"] = 8] = "TOKEN_TYPE_OFFSET";
    MetadataConsts[MetadataConsts["FONT_STYLE_OFFSET"] = 11] = "FONT_STYLE_OFFSET";
    MetadataConsts[MetadataConsts["FOREGROUND_OFFSET"] = 14] = "FOREGROUND_OFFSET";
    MetadataConsts[MetadataConsts["BACKGROUND_OFFSET"] = 23] = "BACKGROUND_OFFSET";
})(MetadataConsts = exports.MetadataConsts || (exports.MetadataConsts = {}));
/**
 * A document highlight kind.
 */
var DocumentHighlightKind;
(function (DocumentHighlightKind) {
    /**
     * A textual occurrence.
     */
    DocumentHighlightKind[DocumentHighlightKind["Text"] = 0] = "Text";
    /**
     * Read-access of a symbol, like reading a variable.
     */
    DocumentHighlightKind[DocumentHighlightKind["Read"] = 1] = "Read";
    /**
     * Write-access of a symbol, like writing to a variable.
     */
    DocumentHighlightKind[DocumentHighlightKind["Write"] = 2] = "Write";
})(DocumentHighlightKind = exports.DocumentHighlightKind || (exports.DocumentHighlightKind = {}));
/**
 * A symbol kind.
 */
var SymbolKind;
(function (SymbolKind) {
    SymbolKind[SymbolKind["File"] = 0] = "File";
    SymbolKind[SymbolKind["Module"] = 1] = "Module";
    SymbolKind[SymbolKind["Namespace"] = 2] = "Namespace";
    SymbolKind[SymbolKind["Package"] = 3] = "Package";
    SymbolKind[SymbolKind["Class"] = 4] = "Class";
    SymbolKind[SymbolKind["Method"] = 5] = "Method";
    SymbolKind[SymbolKind["Property"] = 6] = "Property";
    SymbolKind[SymbolKind["Field"] = 7] = "Field";
    SymbolKind[SymbolKind["Constructor"] = 8] = "Constructor";
    SymbolKind[SymbolKind["Enum"] = 9] = "Enum";
    SymbolKind[SymbolKind["Interface"] = 10] = "Interface";
    SymbolKind[SymbolKind["Function"] = 11] = "Function";
    SymbolKind[SymbolKind["Variable"] = 12] = "Variable";
    SymbolKind[SymbolKind["Constant"] = 13] = "Constant";
    SymbolKind[SymbolKind["String"] = 14] = "String";
    SymbolKind[SymbolKind["Number"] = 15] = "Number";
    SymbolKind[SymbolKind["Boolean"] = 16] = "Boolean";
    SymbolKind[SymbolKind["Array"] = 17] = "Array";
    SymbolKind[SymbolKind["Object"] = 18] = "Object";
    SymbolKind[SymbolKind["Key"] = 19] = "Key";
    SymbolKind[SymbolKind["Null"] = 20] = "Null";
})(SymbolKind = exports.SymbolKind || (exports.SymbolKind = {}));
/**
 * @internal
 */
(function (SymbolKind) {
    /**
     * @internal
     */
    function from(kind) {
        switch (kind) {
            case SymbolKind.Method:
                return 'method';
            case SymbolKind.Function:
                return 'function';
            case SymbolKind.Constructor:
                return 'constructor';
            case SymbolKind.Field:
                return 'field';
            case SymbolKind.Variable:
                return 'variable';
            case SymbolKind.Class:
                return 'class';
            case SymbolKind.Interface:
                return 'interface';
            case SymbolKind.Namespace:
                return 'namespace';
            case SymbolKind.Package:
                return 'package';
            case SymbolKind.Module:
                return 'module';
            case SymbolKind.Property:
                return 'property';
            case SymbolKind.Enum:
                return 'enum';
            case SymbolKind.String:
                return 'string';
            case SymbolKind.File:
                return 'file';
            case SymbolKind.Array:
                return 'array';
            case SymbolKind.Number:
                return 'number';
            case SymbolKind.Boolean:
                return 'boolean';
            case SymbolKind.Object:
                return 'object';
            case SymbolKind.Key:
                return 'key';
            case SymbolKind.Null:
                return 'null';
        }
        return 'property';
    }
    SymbolKind.from = from;
    /**
     * @internal
     */
    function to(type) {
        switch (type) {
            case 'method':
                return SymbolKind.Method;
            case 'function':
                return SymbolKind.Function;
            case 'constructor':
                return SymbolKind.Constructor;
            case 'field':
                return SymbolKind.Field;
            case 'variable':
                return SymbolKind.Variable;
            case 'class':
                return SymbolKind.Class;
            case 'interface':
                return SymbolKind.Interface;
            case 'namespace':
                return SymbolKind.Namespace;
            case 'package':
                return SymbolKind.Package;
            case 'module':
                return SymbolKind.Module;
            case 'property':
                return SymbolKind.Property;
            case 'enum':
                return SymbolKind.Enum;
            case 'string':
                return SymbolKind.String;
            case 'file':
                return SymbolKind.File;
            case 'array':
                return SymbolKind.Array;
            case 'number':
                return SymbolKind.Number;
            case 'boolean':
                return SymbolKind.Boolean;
            case 'object':
                return SymbolKind.Object;
            case 'key':
                return SymbolKind.Key;
            case 'null':
                return SymbolKind.Null;
        }
        return SymbolKind.Property;
    }
    SymbolKind.to = to;
})(SymbolKind = exports.SymbolKind || (exports.SymbolKind = {}));
// --- feature registries ------
/**
 * @internal
 */
exports.ReferenceProviderRegistry = new languageFeatureRegistry_1.default();
/**
 * @internal
 */
exports.WorkspaceReferenceProviderRegistry = new languageFeatureRegistry_1.default();
/**
 * @internal
 */
exports.RenameProviderRegistry = new languageFeatureRegistry_1.default();
/**
 * @internal
 */
exports.SuggestRegistry = new languageFeatureRegistry_1.default();
/**
 * @internal
 */
exports.SignatureHelpProviderRegistry = new languageFeatureRegistry_1.default();
/**
 * @internal
 */
exports.HoverProviderRegistry = new languageFeatureRegistry_1.default();
/**
 * @internal
 */
exports.DocumentSymbolProviderRegistry = new languageFeatureRegistry_1.default();
/**
 * @internal
 */
exports.DocumentHighlightProviderRegistry = new languageFeatureRegistry_1.default();
/**
 * @internal
 */
exports.DefinitionProviderRegistry = new languageFeatureRegistry_1.default();
/**
 * @internal
 */
exports.ImplementationProviderRegistry = new languageFeatureRegistry_1.default();
/**
 * @internal
 */
exports.TypeDefinitionProviderRegistry = new languageFeatureRegistry_1.default();
/**
 * @internal
 */
exports.CodeLensProviderRegistry = new languageFeatureRegistry_1.default();
/**
 * @internal
 */
exports.CodeActionProviderRegistry = new languageFeatureRegistry_1.default();
/**
 * @internal
 */
exports.DocumentFormattingEditProviderRegistry = new languageFeatureRegistry_1.default();
/**
 * @internal
 */
exports.DocumentRangeFormattingEditProviderRegistry = new languageFeatureRegistry_1.default();
/**
 * @internal
 */
exports.OnTypeFormattingEditProviderRegistry = new languageFeatureRegistry_1.default();
/**
 * @internal
 */
exports.LinkProviderRegistry = new languageFeatureRegistry_1.default();
/**
 * @internal
 */
exports.TokenizationRegistry = new tokenizationRegistry_1.TokenizationRegistryImpl();
