/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var languageFeatureRegistry_1 = require("vs/editor/common/modes/languageFeatureRegistry");
var event_1 = require("vs/base/common/event");
/**
 * A document highlight kind.
 */
var DocumentHighlightKind;
(function (DocumentHighlightKind) {
    /**
     * A textual occurrence.
     */
    DocumentHighlightKind[DocumentHighlightKind["Text"] = 0] = "Text";
    /**
     * Read-access of a symbol, like reading a variable.
     */
    DocumentHighlightKind[DocumentHighlightKind["Read"] = 1] = "Read";
    /**
     * Write-access of a symbol, like writing to a variable.
     */
    DocumentHighlightKind[DocumentHighlightKind["Write"] = 2] = "Write";
})(DocumentHighlightKind = exports.DocumentHighlightKind || (exports.DocumentHighlightKind = {}));
/**
 * A symbol kind.
 */
var SymbolKind;
(function (SymbolKind) {
    SymbolKind[SymbolKind["File"] = 0] = "File";
    SymbolKind[SymbolKind["Module"] = 1] = "Module";
    SymbolKind[SymbolKind["Namespace"] = 2] = "Namespace";
    SymbolKind[SymbolKind["Package"] = 3] = "Package";
    SymbolKind[SymbolKind["Class"] = 4] = "Class";
    SymbolKind[SymbolKind["Method"] = 5] = "Method";
    SymbolKind[SymbolKind["Property"] = 6] = "Property";
    SymbolKind[SymbolKind["Field"] = 7] = "Field";
    SymbolKind[SymbolKind["Constructor"] = 8] = "Constructor";
    SymbolKind[SymbolKind["Enum"] = 9] = "Enum";
    SymbolKind[SymbolKind["Interface"] = 10] = "Interface";
    SymbolKind[SymbolKind["Function"] = 11] = "Function";
    SymbolKind[SymbolKind["Variable"] = 12] = "Variable";
    SymbolKind[SymbolKind["Constant"] = 13] = "Constant";
    SymbolKind[SymbolKind["String"] = 14] = "String";
    SymbolKind[SymbolKind["Number"] = 15] = "Number";
    SymbolKind[SymbolKind["Boolean"] = 16] = "Boolean";
    SymbolKind[SymbolKind["Array"] = 17] = "Array";
    SymbolKind[SymbolKind["Object"] = 18] = "Object";
    SymbolKind[SymbolKind["Key"] = 19] = "Key";
    SymbolKind[SymbolKind["Null"] = 20] = "Null";
})(SymbolKind = exports.SymbolKind || (exports.SymbolKind = {}));
/**
 * @internal
 */
(function (SymbolKind) {
    /**
     * @internal
     */
    function from(kind) {
        switch (kind) {
            case SymbolKind.Method:
                return 'method';
            case SymbolKind.Function:
                return 'function';
            case SymbolKind.Constructor:
                return 'constructor';
            case SymbolKind.Variable:
                return 'variable';
            case SymbolKind.Class:
                return 'class';
            case SymbolKind.Interface:
                return 'interface';
            case SymbolKind.Namespace:
                return 'namespace';
            case SymbolKind.Package:
                return 'package';
            case SymbolKind.Module:
                return 'module';
            case SymbolKind.Property:
                return 'property';
            case SymbolKind.Enum:
                return 'enum';
            case SymbolKind.String:
                return 'string';
            case SymbolKind.File:
                return 'file';
            case SymbolKind.Array:
                return 'array';
            case SymbolKind.Number:
                return 'number';
            case SymbolKind.Boolean:
                return 'boolean';
            case SymbolKind.Object:
                return 'object';
            case SymbolKind.Key:
                return 'key';
            case SymbolKind.Null:
                return 'null';
        }
        return 'property';
    }
    SymbolKind.from = from;
    /**
     * @internal
     */
    function to(type) {
        switch (type) {
            case 'method':
                return SymbolKind.Method;
            case 'function':
                return SymbolKind.Function;
            case 'constructor':
                return SymbolKind.Constructor;
            case 'variable':
                return SymbolKind.Variable;
            case 'class':
                return SymbolKind.Class;
            case 'interface':
                return SymbolKind.Interface;
            case 'namespace':
                return SymbolKind.Namespace;
            case 'package':
                return SymbolKind.Package;
            case 'module':
                return SymbolKind.Module;
            case 'property':
                return SymbolKind.Property;
            case 'enum':
                return SymbolKind.Enum;
            case 'string':
                return SymbolKind.String;
            case 'file':
                return SymbolKind.File;
            case 'array':
                return SymbolKind.Array;
            case 'number':
                return SymbolKind.Number;
            case 'boolean':
                return SymbolKind.Boolean;
            case 'object':
                return SymbolKind.Object;
            case 'key':
                return SymbolKind.Key;
            case 'null':
                return SymbolKind.Null;
        }
        return SymbolKind.Property;
    }
    SymbolKind.to = to;
})(SymbolKind = exports.SymbolKind || (exports.SymbolKind = {}));
// --- feature registries ------
/**
 * @internal
 */
exports.ReferenceProviderRegistry = new languageFeatureRegistry_1.default();
/**
 * @internal
 */
exports.WorkspaceReferenceProviderRegistry = new languageFeatureRegistry_1.default();
/**
 * @internal
 */
exports.RenameProviderRegistry = new languageFeatureRegistry_1.default();
/**
 * @internal
 */
exports.SuggestRegistry = new languageFeatureRegistry_1.default();
/**
 * @internal
 */
exports.SignatureHelpProviderRegistry = new languageFeatureRegistry_1.default();
/**
 * @internal
 */
exports.HoverProviderRegistry = new languageFeatureRegistry_1.default();
/**
 * @internal
 */
exports.DocumentSymbolProviderRegistry = new languageFeatureRegistry_1.default();
/**
 * @internal
 */
exports.DocumentHighlightProviderRegistry = new languageFeatureRegistry_1.default();
/**
 * @internal
 */
exports.DefinitionProviderRegistry = new languageFeatureRegistry_1.default();
/**
 * @internal
 */
exports.CodeLensProviderRegistry = new languageFeatureRegistry_1.default();
/**
 * @internal
 */
exports.CodeActionProviderRegistry = new languageFeatureRegistry_1.default();
/**
 * @internal
 */
exports.DocumentFormattingEditProviderRegistry = new languageFeatureRegistry_1.default();
/**
 * @internal
 */
exports.DocumentRangeFormattingEditProviderRegistry = new languageFeatureRegistry_1.default();
/**
 * @internal
 */
exports.OnTypeFormattingEditProviderRegistry = new languageFeatureRegistry_1.default();
/**
 * @internal
 */
exports.LinkProviderRegistry = new languageFeatureRegistry_1.default();
/**
 * @internal
 */
var TokenizationRegistryImpl = (function () {
    function TokenizationRegistryImpl() {
        this._onDidChange = new event_1.Emitter();
        this.onDidChange = this._onDidChange.event;
        this._map = Object.create(null);
    }
    /**
     * Fire a change event for a language.
     * This is useful for languages that embed other languages.
     */
    TokenizationRegistryImpl.prototype.fire = function (languageId) {
        this._onDidChange.fire({ languageId: languageId });
    };
    TokenizationRegistryImpl.prototype.register = function (languageId, support) {
        var _this = this;
        this._map[languageId] = support;
        this.fire(languageId);
        return {
            dispose: function () {
                if (_this._map[languageId] !== support) {
                    return;
                }
                delete _this._map[languageId];
                _this.fire(languageId);
            }
        };
    };
    TokenizationRegistryImpl.prototype.get = function (languageId) {
        return (this._map[languageId] || null);
    };
    return TokenizationRegistryImpl;
}());
exports.TokenizationRegistryImpl = TokenizationRegistryImpl;
/**
 * @internal
 */
exports.TokenizationRegistry = new TokenizationRegistryImpl();
