/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var nls = require('vs/nls');
var json_1 = require('vs/base/common/json');
var pfs_1 = require('vs/base/node/pfs');
var modeService_1 = require('vs/editor/common/services/modeService');
var languageConfigurationRegistry_1 = require('vs/editor/common/modes/languageConfigurationRegistry');
var jsonContributionRegistry_1 = require('vs/platform/jsonschemas/common/jsonContributionRegistry');
var platform_1 = require('vs/platform/platform');
var LanguageConfigurationFileHandler = (function () {
    function LanguageConfigurationFileHandler(modeService) {
        var _this = this;
        this._modeService = modeService;
        this._handleModes(this._modeService.getRegisteredModes());
        this._modeService.onDidAddModes(function (modes) { return _this._handleModes(modes); });
    }
    LanguageConfigurationFileHandler.prototype._handleModes = function (modes) {
        var _this = this;
        modes.forEach(function (modeId) { return _this._handleMode(modeId); });
    };
    LanguageConfigurationFileHandler.prototype._handleMode = function (modeId) {
        var _this = this;
        var disposable = this._modeService.onDidCreateMode(function (mode) {
            if (mode.getId() !== modeId) {
                return;
            }
            var configurationFiles = _this._modeService.getConfigurationFiles(modeId);
            configurationFiles.forEach(function (configFilePath) { return _this._handleConfigFile(modeId, configFilePath); });
            disposable.dispose();
        });
    };
    LanguageConfigurationFileHandler.prototype._handleConfigFile = function (modeId, configFilePath) {
        var _this = this;
        pfs_1.readFile(configFilePath).then(function (fileContents) {
            var errors = [];
            var configuration = json_1.parse(fileContents.toString(), errors);
            if (errors.length) {
                console.error(nls.localize('parseErrors', "Errors parsing {0}: {1}", configFilePath, errors.join('\n')));
            }
            _this._handleConfig(modeId, configuration);
        }, function (err) {
            console.error(err);
        });
    };
    LanguageConfigurationFileHandler.prototype._handleConfig = function (modeId, configuration) {
        var richEditConfig = {};
        if (configuration.comments) {
            richEditConfig.comments = configuration.comments;
        }
        if (configuration.brackets) {
            richEditConfig.brackets = configuration.brackets;
        }
        if (configuration.autoClosingPairs) {
            richEditConfig.autoClosingPairs = this._mapCharacterPairs(configuration.autoClosingPairs);
        }
        if (configuration.surroundingPairs) {
            richEditConfig.surroundingPairs = this._mapCharacterPairs(configuration.surroundingPairs);
        }
        languageConfigurationRegistry_1.LanguageConfigurationRegistry.register(modeId, richEditConfig);
    };
    LanguageConfigurationFileHandler.prototype._mapCharacterPairs = function (pairs) {
        return pairs.map(function (pair) {
            if (Array.isArray(pair)) {
                return { open: pair[0], close: pair[1] };
            }
            return pair;
        });
    };
    LanguageConfigurationFileHandler = __decorate([
        __param(0, modeService_1.IModeService)
    ], LanguageConfigurationFileHandler);
    return LanguageConfigurationFileHandler;
}());
exports.LanguageConfigurationFileHandler = LanguageConfigurationFileHandler;
var schemaId = 'vscode://schemas/language-configuration';
var schema = {
    default: {
        comments: {
            blockComment: ['/*', '*/'],
            lineComment: '//'
        },
        brackets: [['(', ')'], ['[', ']'], ['{', '}']],
        autoClosingPairs: [['(', ')'], ['[', ']'], ['{', '}']],
        surroundingPairs: [['(', ')'], ['[', ']'], ['{', '}']]
    },
    definitions: {
        openBracket: {
            type: 'string',
            description: nls.localize('schema.openBracket', 'The opening bracket character or string sequence.')
        },
        closeBracket: {
            type: 'string',
            description: nls.localize('schema.closeBracket', 'The closing bracket character or string sequence.')
        },
        bracketPair: {
            type: 'array',
            items: [{
                    $ref: '#definitions/openBracket'
                }, {
                    $ref: '#definitions/closeBracket'
                }]
        }
    },
    properties: {
        comments: {
            default: {
                blockComment: ['/*', '*/'],
                lineComment: '//'
            },
            description: nls.localize('schema.comments', 'Defines the comment symbols'),
            type: 'object',
            properties: {
                blockComment: {
                    type: 'array',
                    description: nls.localize('schema.blockComments', 'Defines how block comments are marked.'),
                    items: [{
                            type: 'string',
                            description: nls.localize('schema.blockComment.begin', 'The character sequence that starts a block comment.')
                        }, {
                            type: 'string',
                            description: nls.localize('schema.blockComment.end', 'The character sequence that ends a block comment.')
                        }]
                },
                lineComment: {
                    type: 'string',
                    description: nls.localize('schema.lineComment', 'The character sequence that starts a line comment.')
                }
            }
        },
        brackets: {
            default: [['(', ')'], ['[', ']'], ['{', '}']],
            description: nls.localize('schema.brackets', 'Defines the bracket symbols that increase or decrease the indentation.'),
            type: 'array',
            items: {
                $ref: '#definitions/bracketPair'
            }
        },
        autoClosingPairs: {
            default: [['(', ')'], ['[', ']'], ['{', '}']],
            description: nls.localize('schema.autoClosingPairs', 'Defines the bracket pairs. When a opening bracket is entered, the closing bracket is inserted automatically.'),
            type: 'array',
            items: {
                oneOf: [{
                        $ref: '#definitions/bracketPair'
                    }, {
                        type: 'object',
                        properties: {
                            open: {
                                $ref: '#definitions/openBracket'
                            },
                            close: {
                                $ref: '#definitions/closeBracket'
                            },
                            notIn: {
                                type: 'array',
                                description: nls.localize('schema.autoClosingPairs.notIn', 'Defines a list of scopes where the auto pairs are disabled.'),
                                items: {
                                    enum: ['string', 'comment']
                                }
                            }
                        }
                    }]
            }
        },
        surroundingPairs: {
            default: [['(', ')'], ['[', ']'], ['{', '}']],
            description: nls.localize('schema.surroundingPairs', 'Defines the bracket pairs that can be used to surround a selected string.'),
            type: 'array',
            items: {
                oneOf: [{
                        $ref: '#definitions/bracketPair'
                    }, {
                        type: 'object',
                        properties: {
                            open: {
                                $ref: '#definitions/openBracket'
                            },
                            close: {
                                $ref: '#definitions/closeBracket'
                            }
                        }
                    }]
            }
        },
    }
};
var schemaRegistry = platform_1.Registry.as(jsonContributionRegistry_1.Extensions.JSONContribution);
schemaRegistry.registerSchema(schemaId, schema);
