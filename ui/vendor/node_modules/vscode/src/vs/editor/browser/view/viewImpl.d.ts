import { IEventEmitter } from 'vs/base/common/eventEmitter';
import { IDisposable } from 'vs/base/common/lifecycle';
import { FastDomNode } from 'vs/base/browser/fastDomNode';
import { ICommandService } from 'vs/platform/commands/common/commands';
import { Range } from 'vs/editor/common/core/range';
import * as editorCommon from 'vs/editor/common/editorCommon';
import { ViewEventHandler } from 'vs/editor/common/viewModel/viewEventHandler';
import { Configuration } from 'vs/editor/browser/config/configuration';
import * as editorBrowser from 'vs/editor/browser/editorBrowser';
import { TriggerCursorHandler } from 'vs/editor/browser/view/viewController';
import { OverviewRuler } from 'vs/editor/browser/viewParts/overviewRuler/overviewRuler';
import { ViewContext } from 'vs/editor/common/view/viewContext';
import { IViewModel } from 'vs/editor/common/viewModel/viewModel';
import * as viewEvents from 'vs/editor/common/view/viewEvents';
export declare class View extends ViewEventHandler implements editorBrowser.IView, IDisposable {
    private triggerCursorHandler;
    private eventDispatcher;
    private listenersToRemove;
    private listenersToDispose;
    private layoutProvider;
    private _scrollbar;
    _context: ViewContext;
    private viewLines;
    private viewZones;
    private contentWidgets;
    private overlayWidgets;
    private viewCursors;
    private viewParts;
    private keyboardHandler;
    private pointerHandler;
    private outgoingEvents;
    private linesContent;
    domNode: FastDomNode<HTMLElement>;
    textArea: FastDomNode<HTMLTextAreaElement>;
    private textAreaCover;
    private overflowGuardContainer;
    private hasFocus;
    private _isDisposed;
    private handleAccumulatedModelEventsTimeout;
    private accumulatedModelEvents;
    private _renderAnimationFrame;
    constructor(commandService: ICommandService, configuration: Configuration, model: IViewModel, triggerCursorHandler: TriggerCursorHandler);
    private _flushAnyAccumulatedEvents();
    private createTextArea();
    private createViewParts();
    private _flushAccumulatedAndRenderNow();
    private createPointerHandlerHelper();
    private createKeyboardHandlerHelper();
    setAriaActiveDescendant(id: string): void;
    private _setLayout();
    onConfigurationChanged(e: viewEvents.ViewConfigurationChangedEvent): boolean;
    onFlushed(e: viewEvents.ViewFlushedEvent): boolean;
    onFocusChanged(e: viewEvents.ViewFocusChangedEvent): boolean;
    onLinesDeleted(e: viewEvents.ViewLinesDeletedEvent): boolean;
    onLinesInserted(e: viewEvents.ViewLinesInsertedEvent): boolean;
    onRevealRangeRequest(e: viewEvents.ViewRevealRangeRequestEvent): boolean;
    onScrollChanged(e: viewEvents.ViewScrollChangedEvent): boolean;
    onScrollRequest(e: viewEvents.ViewScrollRequestEvent): boolean;
    private revealCursor();
    dispose(): void;
    private codeEditorHelper;
    getCodeEditorHelper(): editorBrowser.ICodeEditorHelper;
    getCompletelyVisibleLinesRangeInViewport(): Range;
    getInternalEventBus(): IEventEmitter;
    saveState(): editorCommon.IViewState;
    restoreState(state: editorCommon.IViewState): void;
    focus(): void;
    isFocused(): boolean;
    createOverviewRuler(cssClassName: string, minimumHeight: number, maximumHeight: number): OverviewRuler;
    change(callback: (changeAccessor: editorBrowser.IViewZoneChangeAccessor) => any): boolean;
    getWhitespaces(): editorCommon.IEditorWhitespace[];
    addContentWidget(widgetData: editorBrowser.IContentWidgetData): void;
    layoutContentWidget(widgetData: editorBrowser.IContentWidgetData): void;
    removeContentWidget(widgetData: editorBrowser.IContentWidgetData): void;
    addOverlayWidget(widgetData: editorBrowser.IOverlayWidgetData): void;
    layoutOverlayWidget(widgetData: editorBrowser.IOverlayWidgetData): void;
    removeOverlayWidget(widgetData: editorBrowser.IOverlayWidgetData): void;
    render(now: boolean, everything: boolean): void;
    private _renderOnce(callback);
    private _scheduleRender();
    private _onRenderScheduled();
    private _renderNow();
    private _getViewPartsToRender();
    private _actualRender();
    private _setHasFocus(newHasFocus);
}
