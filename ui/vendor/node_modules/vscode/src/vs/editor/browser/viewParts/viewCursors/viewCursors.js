/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
require("./viewCursors.css");
var editorCommon = require("vs/editor/common/editorCommon");
var editorBrowser_1 = require("vs/editor/browser/editorBrowser");
var viewPart_1 = require("vs/editor/browser/view/viewPart");
var viewCursor_1 = require("vs/editor/browser/viewParts/viewCursors/viewCursor");
var styleMutator_1 = require("vs/base/browser/styleMutator");
var async_1 = require("vs/base/common/async");
var browsers = require("vs/base/browser/browser");
var ANIMATIONS_SUPPORTED = !browsers.isIE9;
var ViewCursors = (function (_super) {
    __extends(ViewCursors, _super);
    function ViewCursors(context) {
        var _this = _super.call(this, context) || this;
        _this._readOnly = _this._context.configuration.editor.readOnly;
        _this._cursorBlinking = _this._context.configuration.editor.viewInfo.cursorBlinking;
        _this._cursorStyle = _this._context.configuration.editor.viewInfo.cursorStyle;
        _this._primaryCursor = new viewCursor_1.ViewCursor(_this._context, false);
        _this._secondaryCursors = [];
        _this._renderData = [];
        _this._domNode = styleMutator_1.createFastDomNode(document.createElement('div'));
        _this._updateDomClassName();
        _this._domNode.domNode.appendChild(_this._primaryCursor.getDomNode());
        _this._startCursorBlinkAnimation = new async_1.TimeoutTimer();
        _this._compatBlink = new async_1.IntervalTimer();
        _this._blinkingEnabled = false;
        _this._editorHasFocus = false;
        _this._updateBlinking();
        return _this;
    }
    ViewCursors.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this._startCursorBlinkAnimation.dispose();
        this._compatBlink.dispose();
    };
    ViewCursors.prototype.getDomNode = function () {
        return this._domNode.domNode;
    };
    // --- begin event handlers
    ViewCursors.prototype.onModelFlushed = function () {
        this._primaryCursor.onModelFlushed();
        for (var i = 0, len = this._secondaryCursors.length; i < len; i++) {
            var domNode = this._secondaryCursors[i].getDomNode();
            domNode.parentNode.removeChild(domNode);
        }
        this._secondaryCursors = [];
        return true;
    };
    ViewCursors.prototype.onModelDecorationsChanged = function (e) {
        // true for inline decorations that can end up relayouting text
        return true; //e.inlineDecorationsChanged;
    };
    ViewCursors.prototype.onModelLinesDeleted = function (e) {
        return true;
    };
    ViewCursors.prototype.onModelLineChanged = function (e) {
        return true;
    };
    ViewCursors.prototype.onModelLinesInserted = function (e) {
        return true;
    };
    ViewCursors.prototype.onModelTokensChanged = function (e) {
        var shouldRender = function (position) {
            for (var i = 0, len = e.ranges.length; i < len; i++) {
                if (e.ranges[i].fromLineNumber <= position.lineNumber && position.lineNumber <= e.ranges[i].toLineNumber) {
                    return true;
                }
            }
            return false;
        };
        if (shouldRender(this._primaryCursor.getPosition())) {
            return true;
        }
        for (var i = 0; i < this._secondaryCursors.length; i++) {
            if (shouldRender(this._secondaryCursors[i].getPosition())) {
                return true;
            }
        }
        return false;
    };
    ViewCursors.prototype.onCursorPositionChanged = function (e) {
        this._primaryCursor.onCursorPositionChanged(e.position, e.isInEditableRange);
        this._updateBlinking();
        if (this._secondaryCursors.length < e.secondaryPositions.length) {
            // Create new cursors
            var addCnt = e.secondaryPositions.length - this._secondaryCursors.length;
            for (var i = 0; i < addCnt; i++) {
                var newCursor = new viewCursor_1.ViewCursor(this._context, true);
                this._primaryCursor.getDomNode().parentNode.insertBefore(newCursor.getDomNode(), this._primaryCursor.getDomNode().nextSibling);
                this._secondaryCursors.push(newCursor);
            }
        }
        else if (this._secondaryCursors.length > e.secondaryPositions.length) {
            // Remove some cursors
            var removeCnt = this._secondaryCursors.length - e.secondaryPositions.length;
            for (var i = 0; i < removeCnt; i++) {
                this._secondaryCursors[0].getDomNode().parentNode.removeChild(this._secondaryCursors[0].getDomNode());
                this._secondaryCursors.splice(0, 1);
            }
        }
        for (var i = 0; i < e.secondaryPositions.length; i++) {
            this._secondaryCursors[i].onCursorPositionChanged(e.secondaryPositions[i], e.isInEditableRange);
        }
        return true;
    };
    ViewCursors.prototype.onCursorSelectionChanged = function (e) {
        return false;
    };
    ViewCursors.prototype.onConfigurationChanged = function (e) {
        if (e.readOnly) {
            this._readOnly = this._context.configuration.editor.readOnly;
        }
        if (e.viewInfo.cursorBlinking) {
            this._cursorBlinking = this._context.configuration.editor.viewInfo.cursorBlinking;
        }
        if (e.viewInfo.cursorStyle) {
            this._cursorStyle = this._context.configuration.editor.viewInfo.cursorStyle;
        }
        this._primaryCursor.onConfigurationChanged(e);
        this._updateBlinking();
        if (e.viewInfo.cursorStyle || e.viewInfo.cursorBlinking) {
            this._updateDomClassName();
        }
        for (var i = 0, len = this._secondaryCursors.length; i < len; i++) {
            this._secondaryCursors[i].onConfigurationChanged(e);
        }
        return true;
    };
    ViewCursors.prototype.onLayoutChanged = function (layoutInfo) {
        return true;
    };
    ViewCursors.prototype.onScrollChanged = function (e) {
        return true;
    };
    ViewCursors.prototype.onZonesChanged = function () {
        return true;
    };
    ViewCursors.prototype.onViewFocusChanged = function (isFocused) {
        this._editorHasFocus = isFocused;
        this._updateBlinking();
        return false;
    };
    // --- end event handlers
    ViewCursors.prototype.getPosition = function () {
        return this._primaryCursor.getPosition();
    };
    // ---- blinking logic
    ViewCursors.prototype._getCursorBlinking = function () {
        if (!this._editorHasFocus) {
            return editorCommon.TextEditorCursorBlinkingStyle.Hidden;
        }
        if (this._readOnly || !this._primaryCursor.getIsInEditableRange()) {
            return editorCommon.TextEditorCursorBlinkingStyle.Solid;
        }
        return this._cursorBlinking;
    };
    ViewCursors.prototype._updateBlinking = function () {
        var _this = this;
        this._startCursorBlinkAnimation.cancel();
        this._compatBlink.cancel();
        var blinkingStyle = this._getCursorBlinking();
        // hidden and solid are special as they involve no animations
        var isHidden = (blinkingStyle === editorCommon.TextEditorCursorBlinkingStyle.Hidden);
        var isSolid = (blinkingStyle === editorCommon.TextEditorCursorBlinkingStyle.Solid);
        if (isHidden) {
            this._hide();
        }
        else {
            this._show();
        }
        this._blinkingEnabled = false;
        this._updateDomClassName();
        if (!isHidden && !isSolid) {
            if (ANIMATIONS_SUPPORTED) {
                this._startCursorBlinkAnimation.setIfNotSet(function () {
                    _this._blinkingEnabled = true;
                    _this._updateDomClassName();
                }, ViewCursors.BLINK_INTERVAL);
            }
            else {
                this._compatBlink.cancelAndSet(function () { return _this._compatBlinkUpdate(); }, ViewCursors.BLINK_INTERVAL);
            }
        }
    };
    // --- end blinking logic
    ViewCursors.prototype._updateDomClassName = function () {
        this._domNode.setClassName(this._getClassName());
    };
    ViewCursors.prototype._getClassName = function () {
        var result = editorBrowser_1.ClassNames.VIEW_CURSORS_LAYER;
        switch (this._cursorStyle) {
            case editorCommon.TextEditorCursorStyle.Line:
                result += ' cursor-line-style';
                break;
            case editorCommon.TextEditorCursorStyle.Block:
                result += ' cursor-block-style';
                break;
            case editorCommon.TextEditorCursorStyle.Underline:
                result += ' cursor-underline-style';
                break;
            default:
                result += ' cursor-line-style';
        }
        if (this._blinkingEnabled) {
            switch (this._getCursorBlinking()) {
                case editorCommon.TextEditorCursorBlinkingStyle.Blink:
                    result += ' cursor-blink';
                    break;
                case editorCommon.TextEditorCursorBlinkingStyle.Smooth:
                    result += ' cursor-smooth';
                    break;
                case editorCommon.TextEditorCursorBlinkingStyle.Phase:
                    result += ' cursor-phase';
                    break;
                case editorCommon.TextEditorCursorBlinkingStyle.Expand:
                    result += ' cursor-expand';
                    break;
                case editorCommon.TextEditorCursorBlinkingStyle.Solid:
                    result += ' cursor-solid';
                    break;
                default:
                    result += ' cursor-solid';
            }
        }
        else {
            result += ' cursor-solid';
        }
        return result;
    };
    ViewCursors.prototype._compatBlinkUpdate = function () {
        if (this._isVisible) {
            this._hide();
        }
        else {
            this._show();
        }
    };
    ViewCursors.prototype._show = function () {
        this._primaryCursor.show();
        for (var i = 0, len = this._secondaryCursors.length; i < len; i++) {
            this._secondaryCursors[i].show();
        }
        this._isVisible = true;
    };
    ViewCursors.prototype._hide = function () {
        this._primaryCursor.hide();
        for (var i = 0, len = this._secondaryCursors.length; i < len; i++) {
            this._secondaryCursors[i].hide();
        }
        this._isVisible = false;
    };
    // ---- IViewPart implementation
    ViewCursors.prototype.prepareRender = function (ctx) {
        if (!this.shouldRender()) {
            throw new Error('I did not ask to render!');
        }
        this._primaryCursor.prepareRender(ctx);
        for (var i = 0, len = this._secondaryCursors.length; i < len; i++) {
            this._secondaryCursors[i].prepareRender(ctx);
        }
    };
    ViewCursors.prototype.render = function (ctx) {
        this._renderData = [];
        this._renderData.push(this._primaryCursor.render(ctx));
        for (var i = 0, len = this._secondaryCursors.length; i < len; i++) {
            this._renderData.push(this._secondaryCursors[i].render(ctx));
        }
        // Keep only data of cursors that are visible
        this._renderData = this._renderData.filter(function (d) { return !!d; });
    };
    ViewCursors.prototype.getLastRenderData = function () {
        return this._renderData;
    };
    return ViewCursors;
}(viewPart_1.ViewPart));
ViewCursors.BLINK_INTERVAL = 500;
exports.ViewCursors = ViewCursors;
