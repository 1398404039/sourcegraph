/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var lifecycle_1 = require("vs/base/common/lifecycle");
var contextView_1 = require("vs/platform/contextview/browser/contextView");
var instantiation_1 = require("vs/platform/instantiation/common/instantiation");
var commands_1 = require("vs/platform/commands/common/commands");
var keybinding_1 = require("vs/platform/keybinding/common/keybinding");
var contextkey_1 = require("vs/platform/contextkey/common/contextkey");
var editorCommon_1 = require("vs/editor/common/editorCommon");
var codeEditorService_1 = require("vs/editor/common/services/codeEditorService");
var editorWorkerService_1 = require("vs/editor/common/services/editorWorkerService");
var simpleServices_1 = require("vs/editor/browser/standalone/simpleServices");
var codeEditor_1 = require("vs/editor/browser/codeEditor");
var diffEditorWidget_1 = require("vs/editor/browser/widget/diffEditorWidget");
var StandaloneEditor = (function (_super) {
    __extends(StandaloneEditor, _super);
    function StandaloneEditor(domElement, options, toDispose, instantiationService, codeEditorService, commandService, contextKeyService, keybindingService, contextViewService) {
        var _this = this;
        options = options || {};
        _this = _super.call(this, domElement, options, instantiationService, codeEditorService, commandService, contextKeyService) || this;
        if (keybindingService instanceof simpleServices_1.StandaloneKeybindingService) {
            _this._standaloneKeybindingService = keybindingService;
        }
        _this._contextViewService = contextViewService;
        _this._toDispose2 = [toDispose];
        var model = null;
        if (typeof options.model === 'undefined') {
            model = self.monaco.editor.createModel(options.value || '', options.language || 'text/plain');
            _this._ownsModel = true;
        }
        else {
            model = options.model;
            delete options.model;
            _this._ownsModel = false;
        }
        _this._attachModel(model);
        if (model) {
            var e = {
                oldModelUrl: null,
                newModelUrl: model.uri
            };
            _this.emit(editorCommon_1.EventType.ModelChanged, e);
        }
        return _this;
    }
    StandaloneEditor.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this._toDispose2 = lifecycle_1.dispose(this._toDispose2);
    };
    StandaloneEditor.prototype.destroy = function () {
        this.dispose();
    };
    StandaloneEditor.prototype.addCommand = function (keybinding, handler, context) {
        if (!this._standaloneKeybindingService) {
            console.warn('Cannot add command because the editor is configured with an unrecognized KeybindingService');
            return null;
        }
        return this._standaloneKeybindingService.addDynamicKeybinding(keybinding, handler, context);
    };
    StandaloneEditor.prototype.createContextKey = function (key, defaultValue) {
        if (!this._standaloneKeybindingService) {
            console.warn('Cannot create context key because the editor is configured with an unrecognized KeybindingService');
            return null;
        }
        return this._contextKeyService.createKey(key, defaultValue);
    };
    StandaloneEditor.prototype.addAction = function (descriptor) {
        var _this = this;
        _super.prototype.addAction.call(this, descriptor);
        if (!this._standaloneKeybindingService) {
            console.warn('Cannot add keybinding because the editor is configured with an unrecognized KeybindingService');
            return null;
        }
        if (Array.isArray(descriptor.keybindings)) {
            var handler_1 = function (accessor) {
                return _this.trigger('keyboard', descriptor.id, null);
            };
            descriptor.keybindings.forEach(function (kb) {
                _this._standaloneKeybindingService.addDynamicKeybinding(kb, handler_1, descriptor.keybindingContext, descriptor.id);
            });
        }
    };
    StandaloneEditor.prototype._attachModel = function (model) {
        _super.prototype._attachModel.call(this, model);
        if (this._view) {
            this._contextViewService.setContainer(this._view.domNode);
        }
    };
    StandaloneEditor.prototype._postDetachModelCleanup = function (detachedModel) {
        _super.prototype._postDetachModelCleanup.call(this, detachedModel);
        if (detachedModel && this._ownsModel) {
            detachedModel.dispose();
            this._ownsModel = false;
        }
    };
    return StandaloneEditor;
}(codeEditor_1.CodeEditor));
StandaloneEditor = __decorate([
    __param(3, instantiation_1.IInstantiationService),
    __param(4, codeEditorService_1.ICodeEditorService),
    __param(5, commands_1.ICommandService),
    __param(6, contextkey_1.IContextKeyService),
    __param(7, keybinding_1.IKeybindingService),
    __param(8, contextView_1.IContextViewService)
], StandaloneEditor);
exports.StandaloneEditor = StandaloneEditor;
var StandaloneDiffEditor = (function (_super) {
    __extends(StandaloneDiffEditor, _super);
    function StandaloneDiffEditor(domElement, options, toDispose, instantiationService, contextKeyService, keybindingService, contextViewService, editorWorkerService) {
        var _this = _super.call(this, domElement, options, editorWorkerService, contextKeyService, instantiationService) || this;
        if (keybindingService instanceof simpleServices_1.StandaloneKeybindingService) {
            _this._standaloneKeybindingService = keybindingService;
        }
        _this._contextViewService = contextViewService;
        _this._toDispose2 = [toDispose];
        _this._contextViewService.setContainer(_this._containerDomElement);
        return _this;
    }
    StandaloneDiffEditor.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this._toDispose2 = lifecycle_1.dispose(this._toDispose2);
    };
    StandaloneDiffEditor.prototype.destroy = function () {
        this.dispose();
    };
    StandaloneDiffEditor.prototype.addCommand = function (keybinding, handler, context) {
        if (!this._standaloneKeybindingService) {
            console.warn('Cannot add command because the editor is configured with an unrecognized KeybindingService');
            return null;
        }
        return this._standaloneKeybindingService.addDynamicKeybinding(keybinding, handler, context);
    };
    StandaloneDiffEditor.prototype.createContextKey = function (key, defaultValue) {
        if (!this._standaloneKeybindingService) {
            console.warn('Cannot create context key because the editor is configured with an unrecognized KeybindingService');
            return null;
        }
        return this._contextKeyService.createKey(key, defaultValue);
    };
    StandaloneDiffEditor.prototype.addAction = function (descriptor) {
        var _this = this;
        _super.prototype.addAction.call(this, descriptor);
        if (!this._standaloneKeybindingService) {
            console.warn('Cannot add keybinding because the editor is configured with an unrecognized KeybindingService');
            return null;
        }
        if (Array.isArray(descriptor.keybindings)) {
            var handler_2 = function (ctx) {
                return _this.trigger('keyboard', descriptor.id, null);
            };
            descriptor.keybindings.forEach(function (kb) {
                _this._standaloneKeybindingService.addDynamicKeybinding(kb, handler_2, descriptor.keybindingContext, descriptor.id);
            });
        }
    };
    return StandaloneDiffEditor;
}(diffEditorWidget_1.DiffEditorWidget));
StandaloneDiffEditor = __decorate([
    __param(3, instantiation_1.IInstantiationService),
    __param(4, contextkey_1.IContextKeyService),
    __param(5, keybinding_1.IKeybindingService),
    __param(6, contextView_1.IContextViewService),
    __param(7, editorWorkerService_1.IEditorWorkerService)
], StandaloneDiffEditor);
exports.StandaloneDiffEditor = StandaloneDiffEditor;
