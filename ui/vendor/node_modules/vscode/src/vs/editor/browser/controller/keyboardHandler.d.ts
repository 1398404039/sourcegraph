import { IDisposable } from 'vs/base/common/lifecycle';
import { ViewEventHandler } from 'vs/editor/common/viewModel/viewEventHandler';
import { IViewController } from 'vs/editor/browser/editorBrowser';
import { ViewContext } from 'vs/editor/common/view/viewContext';
import { HorizontalRange } from 'vs/editor/common/view/renderingContext';
import * as viewEvents from 'vs/editor/common/view/viewEvents';
import { FastDomNode } from 'vs/base/browser/fastDomNode';
export interface IKeyboardHandlerHelper {
    viewDomNode: FastDomNode<HTMLElement>;
    textArea: FastDomNode<HTMLTextAreaElement>;
    visibleRangeForPositionRelativeToEditor(lineNumber: number, column: number): HorizontalRange;
    getVerticalOffsetForLineNumber(lineNumber: number): number;
    flushAnyAccumulatedEvents(): void;
}
export declare class KeyboardHandler extends ViewEventHandler implements IDisposable {
    private _context;
    private viewController;
    private viewHelper;
    private textArea;
    private textAreaHandler;
    private _toDispose;
    private contentLeft;
    private contentWidth;
    private scrollLeft;
    private scrollTop;
    private visiblePosition;
    constructor(context: ViewContext, viewController: IViewController, viewHelper: IKeyboardHandlerHelper);
    dispose(): void;
    private _getStrategy();
    focusTextArea(): void;
    onConfigurationChanged(e: viewEvents.ViewConfigurationChangedEvent): boolean;
    private _lastCursorSelectionChanged;
    onCursorSelectionChanged(e: viewEvents.ViewCursorSelectionChangedEvent): boolean;
    onFocusChanged(e: viewEvents.ViewFocusChangedEvent): boolean;
    onScrollChanged(e: viewEvents.ViewScrollChangedEvent): boolean;
    writeToTextArea(): void;
}
