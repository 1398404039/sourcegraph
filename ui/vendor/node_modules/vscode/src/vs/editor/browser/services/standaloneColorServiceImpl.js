/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var tokenization_1 = require("vs/editor/common/modes/supports/tokenization");
var themes_1 = require("vs/editor/common/standalone/themes");
var dom = require("vs/base/browser/dom");
var modes_1 = require("vs/editor/common/modes");
var KnownTheme = (function () {
    function KnownTheme(cssClassName, rules) {
        this.cssClassName = cssClassName;
        this.rules = rules;
    }
    return KnownTheme;
}());
var VS_THEME_NAME = 'vs';
var VS_DARK_THEME_NAME = 'vs-dark';
var HC_BLACK_THEME_NAME = 'hc-black';
function isBuiltinTheme(themeName) {
    return (themeName === VS_THEME_NAME
        || themeName === VS_DARK_THEME_NAME
        || themeName === HC_BLACK_THEME_NAME);
}
function getBuiltinRules(builtinTheme) {
    switch (builtinTheme) {
        case VS_THEME_NAME:
            return themes_1.vs;
        case VS_DARK_THEME_NAME:
            return themes_1.vs_dark;
        case HC_BLACK_THEME_NAME:
            return themes_1.hc_black;
    }
}
var StandaloneColorServiceImpl = (function () {
    function StandaloneColorServiceImpl() {
        this._knownThemes = new Map();
        this._knownThemes.set(VS_THEME_NAME, new KnownTheme(VS_THEME_NAME, getBuiltinRules(VS_THEME_NAME)));
        this._knownThemes.set(VS_DARK_THEME_NAME, new KnownTheme(VS_DARK_THEME_NAME, getBuiltinRules(VS_DARK_THEME_NAME)));
        this._knownThemes.set(HC_BLACK_THEME_NAME, new KnownTheme(HC_BLACK_THEME_NAME, getBuiltinRules(HC_BLACK_THEME_NAME)));
        this._styleElement = dom.createStyleSheet();
        this._styleElement.className = 'monaco-tokens-styles';
        this.setTheme(VS_THEME_NAME);
    }
    StandaloneColorServiceImpl.prototype.defineTheme = function (themeName, themeData) {
        if (!/^[a-z0-9\-]+$/i.test(themeName) || isBuiltinTheme(themeName)) {
            throw new Error('Illegal theme name!');
        }
        if (!isBuiltinTheme(themeData.base)) {
            throw new Error('Illegal theme base!');
        }
        var cssClassName = themeData.base + ' ' + themeName;
        var rules = [];
        if (themeData.inherit) {
            rules = rules.concat(getBuiltinRules(themeData.base));
        }
        rules = rules.concat(themeData.rules);
        this._knownThemes.set(themeName, new KnownTheme(cssClassName, rules));
    };
    StandaloneColorServiceImpl.prototype.getTheme = function () {
        return this._theme;
    };
    StandaloneColorServiceImpl.prototype.setTheme = function (themeName) {
        var themeData;
        if (this._knownThemes.has(themeName)) {
            themeData = this._knownThemes.get(themeName);
        }
        else {
            themeData = this._knownThemes.get(VS_THEME_NAME);
        }
        this._theme = tokenization_1.Theme.createFromRawTheme(themeData.rules);
        var colorMap = this._theme.getColorMap();
        var cssRules = tokenization_1.generateTokensCSSForColorMap(colorMap);
        this._styleElement.innerHTML = cssRules;
        modes_1.TokenizationRegistry.setColorMap(colorMap);
        return themeData.cssClassName;
    };
    return StandaloneColorServiceImpl;
}());
exports.StandaloneColorServiceImpl = StandaloneColorServiceImpl;
