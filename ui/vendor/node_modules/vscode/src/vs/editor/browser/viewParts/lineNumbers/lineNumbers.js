/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
require("./lineNumbers.css");
var platform = require("vs/base/common/platform");
var dynamicViewOverlay_1 = require("vs/editor/browser/view/dynamicViewOverlay");
var editorBrowser_1 = require("vs/editor/browser/editorBrowser");
var LineNumbersOverlay = (function (_super) {
    __extends(LineNumbersOverlay, _super);
    function LineNumbersOverlay(context) {
        var _this = _super.call(this) || this;
        _this._context = context;
        _this._lineHeight = _this._context.configuration.editor.lineHeight;
        _this._renderLineNumbers = _this._context.configuration.editor.viewInfo.renderLineNumbers;
        _this._renderRelativeLineNumbers = _this._context.configuration.editor.viewInfo.renderRelativeLineNumbers;
        _this._lineNumbersLeft = 0;
        _this._lineNumbersWidth = 0;
        _this._renderResult = null;
        _this._context.addEventHandler(_this);
        return _this;
    }
    LineNumbersOverlay.prototype.dispose = function () {
        this._context.removeEventHandler(this);
        this._context = null;
        this._renderResult = null;
    };
    // --- begin event handlers
    LineNumbersOverlay.prototype.onModelFlushed = function () {
        return true;
    };
    LineNumbersOverlay.prototype.onModelDecorationsChanged = function (e) {
        return false;
    };
    LineNumbersOverlay.prototype.onModelLinesDeleted = function (e) {
        return true;
    };
    LineNumbersOverlay.prototype.onModelLineChanged = function (e) {
        return true;
    };
    LineNumbersOverlay.prototype.onModelLinesInserted = function (e) {
        return true;
    };
    LineNumbersOverlay.prototype.onCursorPositionChanged = function (e) {
        if (this._renderRelativeLineNumbers) {
            return true;
        }
        return false;
    };
    LineNumbersOverlay.prototype.onCursorSelectionChanged = function (e) {
        return false;
    };
    LineNumbersOverlay.prototype.onCursorRevealRange = function (e) {
        return false;
    };
    LineNumbersOverlay.prototype.onConfigurationChanged = function (e) {
        if (e.lineHeight) {
            this._lineHeight = this._context.configuration.editor.lineHeight;
        }
        if (e.viewInfo.renderLineNumbers) {
            this._renderLineNumbers = this._context.configuration.editor.viewInfo.renderLineNumbers;
        }
        if (e.viewInfo.renderRelativeLineNumbers) {
            this._renderRelativeLineNumbers = this._context.configuration.editor.viewInfo.renderRelativeLineNumbers;
        }
        return true;
    };
    LineNumbersOverlay.prototype.onLayoutChanged = function (layoutInfo) {
        this._lineNumbersLeft = layoutInfo.lineNumbersLeft;
        this._lineNumbersWidth = layoutInfo.lineNumbersWidth;
        return true;
    };
    LineNumbersOverlay.prototype.onScrollChanged = function (e) {
        return e.scrollTopChanged;
    };
    LineNumbersOverlay.prototype.onZonesChanged = function () {
        return true;
    };
    // --- end event handlers
    LineNumbersOverlay.prototype.prepareRender = function (ctx) {
        if (!this._renderLineNumbers) {
            this._renderResult = null;
            return;
        }
        var lineHeightClassName = (platform.isLinux ? (this._lineHeight % 2 === 0 ? ' lh-even' : ' lh-odd') : '');
        var visibleStartLineNumber = ctx.visibleRange.startLineNumber;
        var visibleEndLineNumber = ctx.visibleRange.endLineNumber;
        var common = '<div class="' + editorBrowser_1.ClassNames.LINE_NUMBERS + lineHeightClassName + '" style="left:' + this._lineNumbersLeft.toString() + 'px;width:' + (this._lineNumbersWidth + 5).toString() + 'px;">';
        var output = [];
        for (var lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {
            var lineIndex = lineNumber - visibleStartLineNumber;
            var renderLineNumber = this._context.model.getLineRenderLineNumber(lineNumber);
            if (renderLineNumber) {
                output[lineIndex] = (common
                    + renderLineNumber
                    + '</div>');
            }
            else {
                output[lineIndex] = '';
            }
        }
        this._renderResult = output;
    };
    LineNumbersOverlay.prototype.render = function (startLineNumber, lineNumber) {
        if (!this._renderResult) {
            return '';
        }
        var lineIndex = lineNumber - startLineNumber;
        if (lineIndex < 0 || lineIndex >= this._renderResult.length) {
            throw new Error('Unexpected render request');
        }
        return this._renderResult[lineIndex];
    };
    return LineNumbersOverlay;
}(dynamicViewOverlay_1.DynamicViewOverlay));
exports.LineNumbersOverlay = LineNumbersOverlay;
