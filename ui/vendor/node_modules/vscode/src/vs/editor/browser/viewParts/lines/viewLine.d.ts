import { IConfigurationChangedEvent } from 'vs/editor/common/editorCommon';
import { IVisibleLineData } from 'vs/editor/browser/view/viewLayer';
import { ViewContext } from 'vs/editor/common/view/viewContext';
import { HorizontalRange } from 'vs/editor/common/view/renderingContext';
import { InlineDecoration } from 'vs/editor/common/viewModel/viewModel';
export declare class ViewLine implements IVisibleLineData {
    private _context;
    private _renderWhitespace;
    private _renderControlCharacters;
    private _spaceWidth;
    private _lineHeight;
    private _stopRenderingLineAfter;
    private _isMaybeInvalid;
    private _renderedViewLine;
    constructor(context: ViewContext);
    getDomNode(): HTMLElement;
    setDomNode(domNode: HTMLElement): void;
    onContentChanged(): void;
    onTokensChanged(): void;
    onModelDecorationsChanged(): void;
    onConfigurationChanged(e: IConfigurationChangedEvent): void;
    shouldUpdateHTML(startLineNumber: number, lineNumber: number, inlineDecorations: InlineDecoration[]): boolean;
    getLineOuterHTML(out: string[], lineNumber: number, deltaTop: number): void;
    getLineInnerHTML(lineNumber: number): string;
    layoutLine(lineNumber: number, deltaTop: number): void;
    getWidth(): number;
    getVisibleRangesForRange(startColumn: number, endColumn: number, clientRectDeltaLeft: number, endNode: HTMLElement): HorizontalRange[];
    getColumnOfNodeOffset(lineNumber: number, spanNode: HTMLElement, offset: number): number;
}
