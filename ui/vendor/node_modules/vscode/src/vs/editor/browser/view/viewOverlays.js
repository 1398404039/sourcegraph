/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var styleMutator_1 = require("vs/base/browser/styleMutator");
var editorBrowser = require("vs/editor/browser/editorBrowser");
var viewLayer_1 = require("vs/editor/browser/view/viewLayer");
var configuration_1 = require("vs/editor/browser/config/configuration");
var ViewOverlays = (function (_super) {
    __extends(ViewOverlays, _super);
    function ViewOverlays(context, layoutProvider) {
        var _this = _super.call(this, context) || this;
        _this._dynamicOverlays = [];
        _this._isFocused = false;
        _this._layoutProvider = layoutProvider;
        _this.domNode.setClassName('view-overlays');
        return _this;
    }
    ViewOverlays.prototype.shouldRender = function () {
        if (_super.prototype.shouldRender.call(this)) {
            return true;
        }
        for (var i = 0, len = this._dynamicOverlays.length; i < len; i++) {
            var dynamicOverlay = this._dynamicOverlays[i];
            if (dynamicOverlay.shouldRender()) {
                return true;
            }
        }
        return false;
    };
    ViewOverlays.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this._layoutProvider = null;
        for (var i = 0, len = this._dynamicOverlays.length; i < len; i++) {
            var dynamicOverlay = this._dynamicOverlays[i];
            dynamicOverlay.dispose();
        }
        this._dynamicOverlays = null;
    };
    ViewOverlays.prototype.getDomNode = function () {
        return this.domNode.domNode;
    };
    ViewOverlays.prototype.addDynamicOverlay = function (overlay) {
        this._dynamicOverlays.push(overlay);
    };
    // ----- event handlers
    ViewOverlays.prototype.onViewFocusChanged = function (isFocused) {
        this._isFocused = isFocused;
        return true;
    };
    // ----- end event handlers
    ViewOverlays.prototype._createLine = function () {
        return new ViewOverlayLine(this._context, this._dynamicOverlays);
    };
    ViewOverlays.prototype.prepareRender = function (ctx) {
        var toRender = this._dynamicOverlays.filter(function (overlay) { return overlay.shouldRender(); });
        for (var i = 0, len = toRender.length; i < len; i++) {
            var dynamicOverlay = toRender[i];
            dynamicOverlay.prepareRender(ctx);
            dynamicOverlay.onDidRender();
        }
        return null;
    };
    ViewOverlays.prototype.render = function (ctx) {
        // Overwriting to bypass `shouldRender` flag
        this._viewOverlaysRender(ctx);
        this.domNode.toggleClassName('focused', this._isFocused);
    };
    ViewOverlays.prototype._viewOverlaysRender = function (ctx) {
        _super.prototype._renderLines.call(this, ctx.linesViewportData);
    };
    return ViewOverlays;
}(viewLayer_1.ViewLayer));
exports.ViewOverlays = ViewOverlays;
var ViewOverlayLine = (function () {
    function ViewOverlayLine(context, dynamicOverlays) {
        this._context = context;
        this._lineHeight = this._context.configuration.editor.lineHeight;
        this._dynamicOverlays = dynamicOverlays;
        this._domNode = null;
        this._renderPieces = null;
    }
    ViewOverlayLine.prototype.getDomNode = function () {
        if (!this._domNode) {
            return null;
        }
        return this._domNode.domNode;
    };
    ViewOverlayLine.prototype.setDomNode = function (domNode) {
        this._domNode = styleMutator_1.createFastDomNode(domNode);
    };
    ViewOverlayLine.prototype.onContentChanged = function () {
        // Nothing
    };
    ViewOverlayLine.prototype.onTokensChanged = function () {
        // Nothing
    };
    ViewOverlayLine.prototype.onConfigurationChanged = function (e) {
        if (e.lineHeight) {
            this._lineHeight = this._context.configuration.editor.lineHeight;
        }
    };
    ViewOverlayLine.prototype.shouldUpdateHTML = function (startLineNumber, lineNumber, inlineDecorations) {
        var newPieces = '';
        for (var i = 0, len = this._dynamicOverlays.length; i < len; i++) {
            var dynamicOverlay = this._dynamicOverlays[i];
            newPieces += dynamicOverlay.render(startLineNumber, lineNumber);
        }
        var piecesEqual = (this._renderPieces === newPieces);
        if (!piecesEqual) {
            this._renderPieces = newPieces;
        }
        return !piecesEqual;
    };
    ViewOverlayLine.prototype.getLineOuterHTML = function (out, lineNumber, deltaTop) {
        out.push('<div lineNumber="');
        out.push(lineNumber.toString());
        out.push('" style="top:');
        out.push(deltaTop.toString());
        out.push('px;height:');
        out.push(this._lineHeight.toString());
        out.push('px;" class="');
        out.push(editorBrowser.ClassNames.VIEW_LINE);
        out.push('">');
        out.push(this.getLineInnerHTML(lineNumber));
        out.push('</div>');
    };
    ViewOverlayLine.prototype.getLineInnerHTML = function (lineNumber) {
        return this._renderPieces;
    };
    ViewOverlayLine.prototype.layoutLine = function (lineNumber, deltaTop) {
        this._domNode.setLineNumber(String(lineNumber));
        this._domNode.setTop(deltaTop);
        this._domNode.setHeight(this._lineHeight);
    };
    return ViewOverlayLine;
}());
exports.ViewOverlayLine = ViewOverlayLine;
var ContentViewOverlays = (function (_super) {
    __extends(ContentViewOverlays, _super);
    function ContentViewOverlays(context, layoutProvider) {
        var _this = _super.call(this, context, layoutProvider) || this;
        _this._scrollWidth = _this._layoutProvider.getScrollWidth();
        _this._contentWidth = _this._context.configuration.editor.layoutInfo.contentWidth;
        _this.domNode.setWidth(_this._scrollWidth);
        _this.domNode.setHeight(0);
        return _this;
    }
    ContentViewOverlays.prototype.onConfigurationChanged = function (e) {
        if (e.layoutInfo) {
            this._contentWidth = this._context.configuration.editor.layoutInfo.contentWidth;
        }
        return _super.prototype.onConfigurationChanged.call(this, e);
    };
    ContentViewOverlays.prototype.onScrollChanged = function (e) {
        this._scrollWidth = e.scrollWidth;
        return _super.prototype.onScrollChanged.call(this, e) || e.scrollWidthChanged;
    };
    ContentViewOverlays.prototype._viewOverlaysRender = function (ctx) {
        _super.prototype._viewOverlaysRender.call(this, ctx);
        this.domNode.setWidth(Math.max(this._scrollWidth, this._contentWidth));
    };
    return ContentViewOverlays;
}(ViewOverlays));
exports.ContentViewOverlays = ContentViewOverlays;
var MarginViewOverlays = (function (_super) {
    __extends(MarginViewOverlays, _super);
    function MarginViewOverlays(context, layoutProvider) {
        var _this = _super.call(this, context, layoutProvider) || this;
        _this._contentLeft = context.configuration.editor.layoutInfo.contentLeft;
        _this._canUseTranslate3d = context.configuration.editor.viewInfo.canUseTranslate3d;
        _this.domNode.setClassName(editorBrowser.ClassNames.MARGIN_VIEW_OVERLAYS);
        _this.domNode.setWidth(1);
        configuration_1.Configuration.applyFontInfo(_this.domNode, _this._context.configuration.editor.fontInfo);
        return _this;
    }
    MarginViewOverlays.prototype.onScrollChanged = function (e) {
        return _super.prototype.onScrollChanged.call(this, e) || e.scrollHeightChanged;
    };
    MarginViewOverlays.prototype.onLayoutChanged = function (layoutInfo) {
        this._contentLeft = layoutInfo.contentLeft;
        return _super.prototype.onLayoutChanged.call(this, layoutInfo) || true;
    };
    MarginViewOverlays.prototype.onConfigurationChanged = function (e) {
        if (e.fontInfo) {
            configuration_1.Configuration.applyFontInfo(this.domNode, this._context.configuration.editor.fontInfo);
        }
        if (e.viewInfo.canUseTranslate3d) {
            this._canUseTranslate3d = this._context.configuration.editor.viewInfo.canUseTranslate3d;
        }
        return _super.prototype.onConfigurationChanged.call(this, e);
    };
    MarginViewOverlays.prototype._viewOverlaysRender = function (ctx) {
        _super.prototype._viewOverlaysRender.call(this, ctx);
        var height = Math.min(this._layoutProvider.getTotalHeight(), 1000000);
        this.domNode.setHeight(height);
        this.domNode.setWidth(this._contentLeft);
    };
    return MarginViewOverlays;
}(ViewOverlays));
exports.MarginViewOverlays = MarginViewOverlays;
