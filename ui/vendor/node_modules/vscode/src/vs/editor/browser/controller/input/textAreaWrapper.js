/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var event_1 = require("vs/base/common/event");
var lifecycle_1 = require("vs/base/common/lifecycle");
var browser = require("vs/base/browser/browser");
var dom = require("vs/base/browser/dom");
var ClipboardEventWrapper = (function () {
    function ClipboardEventWrapper(event) {
        this._event = event;
    }
    ClipboardEventWrapper.prototype.canUseTextData = function () {
        if (this._event.clipboardData) {
            return true;
        }
        if (window.clipboardData) {
            return true;
        }
        return false;
    };
    ClipboardEventWrapper.prototype.setTextData = function (text, richText) {
        if (this._event.clipboardData) {
            this._event.clipboardData.setData('text/plain', text);
            if (richText !== null) {
                this._event.clipboardData.setData('text/html', richText);
            }
            this._event.preventDefault();
            return;
        }
        if (window.clipboardData) {
            window.clipboardData.setData('Text', text);
            this._event.preventDefault();
            return;
        }
        throw new Error('ClipboardEventWrapper.setTextData: Cannot use text data!');
    };
    ClipboardEventWrapper.prototype.getTextData = function () {
        if (this._event.clipboardData) {
            this._event.preventDefault();
            return this._event.clipboardData.getData('text/plain');
        }
        if (window.clipboardData) {
            this._event.preventDefault();
            return window.clipboardData.getData('Text');
        }
        throw new Error('ClipboardEventWrapper.getTextData: Cannot use text data!');
    };
    return ClipboardEventWrapper;
}());
var KeyboardEventWrapper = (function () {
    function KeyboardEventWrapper(actual) {
        this._actual = actual;
    }
    KeyboardEventWrapper.prototype.equals = function (keybinding) {
        return this._actual.equals(keybinding);
    };
    KeyboardEventWrapper.prototype.preventDefault = function () {
        this._actual.preventDefault();
    };
    KeyboardEventWrapper.prototype.isDefaultPrevented = function () {
        if (this._actual.browserEvent) {
            return this._actual.browserEvent.defaultPrevented;
        }
        return false;
    };
    return KeyboardEventWrapper;
}());
var TextAreaWrapper = (function (_super) {
    __extends(TextAreaWrapper, _super);
    function TextAreaWrapper(_textArea) {
        var _this = _super.call(this) || this;
        _this._onKeyDown = _this._register(new event_1.Emitter());
        _this.onKeyDown = _this._onKeyDown.event;
        _this._onKeyUp = _this._register(new event_1.Emitter());
        _this.onKeyUp = _this._onKeyUp.event;
        _this._onKeyPress = _this._register(new event_1.Emitter());
        _this.onKeyPress = _this._onKeyPress.event;
        _this._onCompositionStart = _this._register(new event_1.Emitter());
        _this.onCompositionStart = _this._onCompositionStart.event;
        _this._onCompositionUpdate = _this._register(new event_1.Emitter());
        _this.onCompositionUpdate = _this._onCompositionUpdate.event;
        _this._onCompositionEnd = _this._register(new event_1.Emitter());
        _this.onCompositionEnd = _this._onCompositionEnd.event;
        _this._onInput = _this._register(new event_1.Emitter());
        _this.onInput = _this._onInput.event;
        _this._onCut = _this._register(new event_1.Emitter());
        _this.onCut = _this._onCut.event;
        _this._onCopy = _this._register(new event_1.Emitter());
        _this.onCopy = _this._onCopy.event;
        _this._onPaste = _this._register(new event_1.Emitter());
        _this.onPaste = _this._onPaste.event;
        _this._textArea = _textArea;
        var textArea = _this._textArea.domNode;
        _this._register(dom.addStandardDisposableListener(textArea, 'keydown', function (e) { return _this._onKeyDown.fire(new KeyboardEventWrapper(e)); }));
        _this._register(dom.addStandardDisposableListener(textArea, 'keyup', function (e) { return _this._onKeyUp.fire(new KeyboardEventWrapper(e)); }));
        _this._register(dom.addStandardDisposableListener(textArea, 'keypress', function (e) { return _this._onKeyPress.fire(new KeyboardEventWrapper(e)); }));
        _this._register(dom.addDisposableListener(textArea, 'compositionstart', function (e) { return _this._onCompositionStart.fire(e); }));
        _this._register(dom.addDisposableListener(textArea, 'compositionupdate', function (e) { return _this._onCompositionUpdate.fire(e); }));
        _this._register(dom.addDisposableListener(textArea, 'compositionend', function (e) { return _this._onCompositionEnd.fire(e); }));
        _this._register(dom.addDisposableListener(textArea, 'input', function (e) { return _this._onInput.fire(); }));
        _this._register(dom.addDisposableListener(textArea, 'cut', function (e) { return _this._onCut.fire(new ClipboardEventWrapper(e)); }));
        _this._register(dom.addDisposableListener(textArea, 'copy', function (e) { return _this._onCopy.fire(new ClipboardEventWrapper(e)); }));
        _this._register(dom.addDisposableListener(textArea, 'paste', function (e) { return _this._onPaste.fire(new ClipboardEventWrapper(e)); }));
        return _this;
    }
    Object.defineProperty(TextAreaWrapper.prototype, "actual", {
        get: function () {
            return this._textArea;
        },
        enumerable: true,
        configurable: true
    });
    TextAreaWrapper.prototype.getValue = function () {
        // console.log('current value: ' + this._textArea.value);
        var textArea = this._textArea.domNode;
        return textArea.value;
    };
    TextAreaWrapper.prototype.setValue = function (reason, value) {
        // console.log('reason: ' + reason + ', current value: ' + this._textArea.value + ' => new value: ' + value);
        var textArea = this._textArea.domNode;
        textArea.value = value;
    };
    TextAreaWrapper.prototype.getSelectionStart = function () {
        var textArea = this._textArea.domNode;
        return textArea.selectionStart;
    };
    TextAreaWrapper.prototype.getSelectionEnd = function () {
        var textArea = this._textArea.domNode;
        return textArea.selectionEnd;
    };
    TextAreaWrapper.prototype.setSelectionRange = function (selectionStart, selectionEnd) {
        var textArea = this._textArea.domNode;
        var activeElement = document.activeElement;
        if (activeElement === textArea) {
            textArea.setSelectionRange(selectionStart, selectionEnd);
        }
        else {
            this._setSelectionRangeJumpy(selectionStart, selectionEnd);
        }
    };
    TextAreaWrapper.prototype._setSelectionRangeJumpy = function (selectionStart, selectionEnd) {
        var textArea = this._textArea.domNode;
        try {
            var scrollState = dom.saveParentsScrollTop(textArea);
            textArea.focus();
            textArea.setSelectionRange(selectionStart, selectionEnd);
            dom.restoreParentsScrollTop(textArea, scrollState);
        }
        catch (e) {
            // Sometimes IE throws when setting selection (e.g. textarea is off-DOM)
            console.log('an error has been thrown!');
        }
    };
    TextAreaWrapper.prototype.isInOverwriteMode = function () {
        // In IE, pressing Insert will bring the typing into overwrite mode
        if (browser.isIE && document.queryCommandValue('OverWrite')) {
            return true;
        }
        return false;
    };
    return TextAreaWrapper;
}(lifecycle_1.Disposable));
exports.TextAreaWrapper = TextAreaWrapper;
