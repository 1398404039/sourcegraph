import Event from 'vs/base/common/event';
import { Disposable } from 'vs/base/common/lifecycle';
import { IClipboardEvent, ICompositionEvent, IKeyboardEventWrapper, ITextAreaWrapper } from 'vs/editor/common/controller/textAreaState';
import { FastDomNode } from 'vs/base/browser/fastDomNode';
export declare class TextAreaWrapper extends Disposable implements ITextAreaWrapper {
    private _textArea;
    private _onKeyDown;
    onKeyDown: Event<IKeyboardEventWrapper>;
    private _onKeyUp;
    onKeyUp: Event<IKeyboardEventWrapper>;
    private _onKeyPress;
    onKeyPress: Event<IKeyboardEventWrapper>;
    private _onCompositionStart;
    onCompositionStart: Event<ICompositionEvent>;
    private _onCompositionUpdate;
    onCompositionUpdate: Event<ICompositionEvent>;
    private _onCompositionEnd;
    onCompositionEnd: Event<ICompositionEvent>;
    private _onInput;
    onInput: Event<void>;
    private _onCut;
    onCut: Event<IClipboardEvent>;
    private _onCopy;
    onCopy: Event<IClipboardEvent>;
    private _onPaste;
    onPaste: Event<IClipboardEvent>;
    constructor(_textArea: FastDomNode<HTMLTextAreaElement>);
    readonly actual: FastDomNode<HTMLTextAreaElement>;
    getValue(): string;
    setValue(reason: string, value: string): void;
    getSelectionStart(): number;
    getSelectionEnd(): number;
    setSelectionRange(selectionStart: number, selectionEnd: number): void;
    private _setSelectionRangeJumpy(selectionStart, selectionEnd);
    isInOverwriteMode(): boolean;
}
