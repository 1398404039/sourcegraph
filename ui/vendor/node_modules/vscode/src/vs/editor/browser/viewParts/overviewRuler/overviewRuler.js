/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var viewEventHandler_1 = require("vs/editor/common/viewModel/viewEventHandler");
var overviewRulerImpl_1 = require("vs/editor/browser/viewParts/overviewRuler/overviewRulerImpl");
var OverviewRuler = (function (_super) {
    __extends(OverviewRuler, _super);
    function OverviewRuler(context, cssClassName, scrollHeight, minimumHeight, maximumHeight, getVerticalOffsetForLine) {
        var _this = _super.call(this) || this;
        _this._context = context;
        _this._overviewRuler = new overviewRulerImpl_1.OverviewRulerImpl(0, cssClassName, scrollHeight, _this._context.configuration.editor.lineHeight, _this._context.configuration.editor.viewInfo.canUseTranslate3d, minimumHeight, maximumHeight, getVerticalOffsetForLine);
        _this._context.addEventHandler(_this);
        return _this;
    }
    OverviewRuler.prototype.dispose = function () {
        this._context.removeEventHandler(this);
        this._overviewRuler.dispose();
    };
    OverviewRuler.prototype.onConfigurationChanged = function (e) {
        if (e.lineHeight) {
            this._overviewRuler.setLineHeight(this._context.configuration.editor.lineHeight, true);
            return true;
        }
        if (e.viewInfo.canUseTranslate3d) {
            this._overviewRuler.setCanUseTranslate3d(this._context.configuration.editor.viewInfo.canUseTranslate3d, true);
            return true;
        }
        return false;
    };
    OverviewRuler.prototype.onZonesChanged = function () {
        return true;
    };
    OverviewRuler.prototype.onModelFlushed = function () {
        return true;
    };
    OverviewRuler.prototype.onScrollChanged = function (e) {
        this._overviewRuler.setScrollHeight(e.scrollHeight, true);
        return _super.prototype.onScrollChanged.call(this, e) || e.scrollHeightChanged;
    };
    OverviewRuler.prototype.getDomNode = function () {
        return this._overviewRuler.getDomNode();
    };
    OverviewRuler.prototype.setLayout = function (position) {
        this._overviewRuler.setLayout(position, true);
    };
    OverviewRuler.prototype.setZones = function (zones) {
        this._overviewRuler.setZones(zones, true);
    };
    return OverviewRuler;
}(viewEventHandler_1.ViewEventHandler));
exports.OverviewRuler = OverviewRuler;
