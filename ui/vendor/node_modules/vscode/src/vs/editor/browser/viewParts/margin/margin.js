/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var styleMutator_1 = require("vs/base/browser/styleMutator");
var editorBrowser_1 = require("vs/editor/browser/editorBrowser");
var viewPart_1 = require("vs/editor/browser/view/viewPart");
var Margin = (function (_super) {
    __extends(Margin, _super);
    function Margin(context, layoutProvider) {
        var _this = _super.call(this, context) || this;
        _this._layoutProvider = layoutProvider;
        _this._canUseTranslate3d = _this._context.configuration.editor.viewInfo.canUseTranslate3d;
        _this._contentLeft = _this._context.configuration.editor.layoutInfo.contentLeft;
        _this._glyphMarginLeft = _this._context.configuration.editor.layoutInfo.glyphMarginLeft;
        _this._glyphMarginWidth = _this._context.configuration.editor.layoutInfo.glyphMarginWidth;
        _this.domNode = _this._createDomNode();
        return _this;
    }
    Margin.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
    };
    Margin.prototype._createDomNode = function () {
        var domNode = document.createElement('div');
        domNode.className = editorBrowser_1.ClassNames.MARGIN + ' monaco-editor-background';
        domNode.style.position = 'absolute';
        domNode.setAttribute('role', 'presentation');
        domNode.setAttribute('aria-hidden', 'true');
        this._glyphMarginBackgroundDomNode = styleMutator_1.createFastDomNode(document.createElement('div'));
        this._glyphMarginBackgroundDomNode.setClassName(editorBrowser_1.ClassNames.GLYPH_MARGIN);
        domNode.appendChild(this._glyphMarginBackgroundDomNode.domNode);
        return domNode;
    };
    // --- begin event handlers
    Margin.prototype.onConfigurationChanged = function (e) {
        if (e.viewInfo.canUseTranslate3d) {
            this._canUseTranslate3d = this._context.configuration.editor.viewInfo.canUseTranslate3d;
        }
        return _super.prototype.onConfigurationChanged.call(this, e);
    };
    Margin.prototype.onScrollChanged = function (e) {
        return _super.prototype.onScrollChanged.call(this, e) || e.scrollTopChanged;
    };
    Margin.prototype.onLayoutChanged = function (layoutInfo) {
        this._contentLeft = layoutInfo.contentLeft;
        this._glyphMarginLeft = layoutInfo.glyphMarginLeft;
        this._glyphMarginWidth = layoutInfo.glyphMarginWidth;
        return _super.prototype.onLayoutChanged.call(this, layoutInfo) || true;
    };
    // --- end event handlers
    Margin.prototype.prepareRender = function (ctx) {
        // Nothing to read
    };
    Margin.prototype.render = function (ctx) {
        if (this._canUseTranslate3d) {
            var transform = 'translate3d(0px, ' + ctx.linesViewportData.visibleRangesDeltaTop + 'px, 0px)';
            styleMutator_1.StyleMutator.setTransform(this.domNode, transform);
            styleMutator_1.StyleMutator.setTop(this.domNode, 0);
        }
        else {
            styleMutator_1.StyleMutator.setTransform(this.domNode, '');
            styleMutator_1.StyleMutator.setTop(this.domNode, ctx.linesViewportData.visibleRangesDeltaTop);
        }
        var height = Math.min(this._layoutProvider.getTotalHeight(), 1000000);
        styleMutator_1.StyleMutator.setHeight(this.domNode, height);
        styleMutator_1.StyleMutator.setWidth(this.domNode, this._contentLeft);
        this._glyphMarginBackgroundDomNode.setLeft(this._glyphMarginLeft);
        this._glyphMarginBackgroundDomNode.setWidth(this._glyphMarginWidth);
        this._glyphMarginBackgroundDomNode.setHeight(height);
    };
    return Margin;
}(viewPart_1.ViewPart));
exports.Margin = Margin;
