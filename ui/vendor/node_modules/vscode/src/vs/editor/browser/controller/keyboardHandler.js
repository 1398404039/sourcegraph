/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var lifecycle_1 = require("vs/base/common/lifecycle");
var browser = require("vs/base/browser/browser");
var dom = require("vs/base/browser/dom");
var styleMutator_1 = require("vs/base/browser/styleMutator");
var commonEditorConfig_1 = require("vs/editor/common/config/commonEditorConfig");
var textAreaHandler_1 = require("vs/editor/common/controller/textAreaHandler");
var textAreaState_1 = require("vs/editor/common/controller/textAreaState");
var range_1 = require("vs/editor/common/core/range");
var editorCommon = require("vs/editor/common/editorCommon");
var viewEventHandler_1 = require("vs/editor/common/viewModel/viewEventHandler");
var configuration_1 = require("vs/editor/browser/config/configuration");
var textAreaWrapper_1 = require("vs/editor/browser/controller/input/textAreaWrapper");
var KeyboardHandler = (function (_super) {
    __extends(KeyboardHandler, _super);
    function KeyboardHandler(context, viewController, viewHelper) {
        var _this = _super.call(this) || this;
        _this._lastCursorSelectionChanged = null;
        _this._context = context;
        _this.viewController = viewController;
        _this.textArea = new textAreaWrapper_1.TextAreaWrapper(viewHelper.textArea);
        configuration_1.Configuration.applyFontInfoSlow(_this.textArea.actual, _this._context.configuration.editor.fontInfo);
        _this.viewHelper = viewHelper;
        _this.contentLeft = 0;
        _this.contentWidth = 0;
        _this.scrollLeft = 0;
        _this.textAreaHandler = new textAreaHandler_1.TextAreaHandler(browser, _this._getStrategy(), _this.textArea, _this._context.model, function () { return _this.viewHelper.flushAnyAccumulatedEvents(); });
        _this._toDispose = [];
        _this._toDispose.push(_this.textAreaHandler.onKeyDown(function (e) { return _this.viewController.emitKeyDown(e._actual); }));
        _this._toDispose.push(_this.textAreaHandler.onKeyUp(function (e) { return _this.viewController.emitKeyUp(e._actual); }));
        _this._toDispose.push(_this.textAreaHandler.onPaste(function (e) { return _this.viewController.paste('keyboard', e.text, e.pasteOnNewLine); }));
        _this._toDispose.push(_this.textAreaHandler.onCut(function (e) { return _this.viewController.cut('keyboard'); }));
        _this._toDispose.push(_this.textAreaHandler.onType(function (e) {
            if (e.replaceCharCnt) {
                _this.viewController.replacePreviousChar('keyboard', e.text, e.replaceCharCnt);
            }
            else {
                _this.viewController.type('keyboard', e.text);
            }
        }));
        _this._toDispose.push(_this.textAreaHandler.onCompositionStart(function (e) {
            var lineNumber = e.showAtLineNumber;
            var column = e.showAtColumn;
            var revealPositionEvent = {
                range: new range_1.Range(lineNumber, column, lineNumber, column),
                verticalType: 0 /* Simple */,
                revealHorizontal: true,
                revealCursor: false
            };
            _this._context.privateViewEventBus.emit(editorCommon.ViewEventNames.RevealRangeEvent, revealPositionEvent);
            // Find range pixel position
            _this.visibleRange = _this.viewHelper.visibleRangeForPositionRelativeToEditor(lineNumber, column);
            if (_this.visibleRange) {
                styleMutator_1.StyleMutator.setTop(_this.textArea.actual, _this.visibleRange.top);
                styleMutator_1.StyleMutator.setLeft(_this.textArea.actual, _this.contentLeft + _this.visibleRange.left - _this.scrollLeft);
            }
            // Show the textarea
            styleMutator_1.StyleMutator.setHeight(_this.textArea.actual, _this._context.configuration.editor.lineHeight);
            dom.addClass(_this.viewHelper.viewDomNode, 'ime-input');
            _this.viewController.compositionStart('keyboard');
        }));
        _this._toDispose.push(_this.textAreaHandler.onCompositionUpdate(function (e) {
            if (browser.isEdgeOrIE) {
                // Due to isEdgeOrIE (where the textarea was not cleared initially)
                // we cannot assume the text consists only of the composited text
                styleMutator_1.StyleMutator.setWidth(_this.textArea.actual, 0);
            }
            else {
                // adjust width by its size
                var canvasElem = document.createElement('canvas');
                var context_1 = canvasElem.getContext('2d');
                var cs = dom.getComputedStyle(_this.textArea.actual);
                if (browser.isFirefox) {
                    // computedStyle.font is empty in Firefox...
                    context_1.font = cs.fontStyle + " " + cs.fontVariant + " " + cs.fontWeight + " " + cs.fontStretch + " " + cs.fontSize + " / " + cs.lineHeight + " " + cs.fontFamily;
                    var metrics = context_1.measureText(e.data);
                    styleMutator_1.StyleMutator.setWidth(_this.textArea.actual, metrics.width + 2); // +2 for Japanese...
                }
                else {
                    context_1.font = cs.font;
                    var metrics = context_1.measureText(e.data);
                    styleMutator_1.StyleMutator.setWidth(_this.textArea.actual, metrics.width);
                }
            }
        }));
        _this._toDispose.push(_this.textAreaHandler.onCompositionEnd(function (e) {
            _this.textArea.actual.style.height = '';
            _this.textArea.actual.style.width = '';
            styleMutator_1.StyleMutator.setLeft(_this.textArea.actual, 0);
            styleMutator_1.StyleMutator.setTop(_this.textArea.actual, 0);
            dom.removeClass(_this.viewHelper.viewDomNode, 'ime-input');
            _this.visibleRange = null;
            _this.viewController.compositionEnd('keyboard');
        }));
        _this._toDispose.push(commonEditorConfig_1.GlobalScreenReaderNVDA.onChange(function (value) {
            _this.textAreaHandler.setStrategy(_this._getStrategy());
        }));
        _this._context.addEventHandler(_this);
        return _this;
    }
    KeyboardHandler.prototype.dispose = function () {
        this._context.removeEventHandler(this);
        this.textAreaHandler.dispose();
        this.textArea.dispose();
        this._toDispose = lifecycle_1.dispose(this._toDispose);
    };
    KeyboardHandler.prototype._getStrategy = function () {
        if (commonEditorConfig_1.GlobalScreenReaderNVDA.getValue()) {
            return textAreaState_1.TextAreaStrategy.NVDA;
        }
        if (this._context.configuration.editor.viewInfo.experimentalScreenReader) {
            return textAreaState_1.TextAreaStrategy.NVDA;
        }
        return textAreaState_1.TextAreaStrategy.IENarrator;
    };
    KeyboardHandler.prototype.focusTextArea = function () {
        this.textAreaHandler.writePlaceholderAndSelectTextAreaSync();
    };
    KeyboardHandler.prototype.onConfigurationChanged = function (e) {
        // Give textarea same font size & line height as editor, for the IME case (when the textarea is visible)
        if (e.fontInfo) {
            configuration_1.Configuration.applyFontInfoSlow(this.textArea.actual, this._context.configuration.editor.fontInfo);
        }
        if (e.viewInfo.experimentalScreenReader) {
            this.textAreaHandler.setStrategy(this._getStrategy());
        }
        return false;
    };
    KeyboardHandler.prototype.onScrollChanged = function (e) {
        this.scrollLeft = e.scrollLeft;
        if (this.visibleRange) {
            styleMutator_1.StyleMutator.setTop(this.textArea.actual, this.visibleRange.top);
            styleMutator_1.StyleMutator.setLeft(this.textArea.actual, this.contentLeft + this.visibleRange.left - this.scrollLeft);
        }
        return false;
    };
    KeyboardHandler.prototype.onViewFocusChanged = function (isFocused) {
        this.textAreaHandler.setHasFocus(isFocused);
        return false;
    };
    KeyboardHandler.prototype.onCursorSelectionChanged = function (e) {
        this._lastCursorSelectionChanged = e;
        return false;
    };
    KeyboardHandler.prototype.onLayoutChanged = function (layoutInfo) {
        this.contentLeft = layoutInfo.contentLeft;
        this.contentWidth = layoutInfo.contentWidth;
        return false;
    };
    KeyboardHandler.prototype.writeToTextArea = function () {
        if (this._lastCursorSelectionChanged) {
            var e = this._lastCursorSelectionChanged;
            this._lastCursorSelectionChanged = null;
            this.textAreaHandler.setCursorSelections(e.selection, e.secondarySelections);
        }
    };
    return KeyboardHandler;
}(viewEventHandler_1.ViewEventHandler));
exports.KeyboardHandler = KeyboardHandler;
