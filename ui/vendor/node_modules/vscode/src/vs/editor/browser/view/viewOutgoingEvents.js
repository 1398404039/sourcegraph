/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var eventEmitter_1 = require("vs/base/common/eventEmitter");
var lifecycle_1 = require("vs/base/common/lifecycle");
var editorCommon_1 = require("vs/editor/common/editorCommon");
var ViewOutgoingEvents = (function (_super) {
    __extends(ViewOutgoingEvents, _super);
    function ViewOutgoingEvents(viewModel) {
        var _this = _super.call(this) || this;
        _this._viewModel = viewModel;
        _this._actual = _this._register(new eventEmitter_1.EventEmitter());
        return _this;
    }
    ViewOutgoingEvents.prototype.getInternalEventBus = function () {
        return this._actual;
    };
    ViewOutgoingEvents.prototype.deferredEmit = function (callback) {
        return this._actual.deferredEmit(callback);
    };
    ViewOutgoingEvents.prototype.emitViewLayoutChanged = function (layoutInfo) {
        this._actual.emit(editorCommon_1.EventType.ViewLayoutChanged, layoutInfo);
    };
    ViewOutgoingEvents.prototype.emitScrollChanged = function (e) {
        this._actual.emit('scroll', e);
    };
    ViewOutgoingEvents.prototype.emitViewFocusGained = function () {
        this._actual.emit(editorCommon_1.EventType.ViewFocusGained, {});
    };
    ViewOutgoingEvents.prototype.emitViewFocusLost = function () {
        this._actual.emit(editorCommon_1.EventType.ViewFocusLost, {});
    };
    ViewOutgoingEvents.prototype.emitKeyDown = function (e) {
        this._actual.emit(editorCommon_1.EventType.KeyDown, e);
    };
    ViewOutgoingEvents.prototype.emitKeyUp = function (e) {
        this._actual.emit(editorCommon_1.EventType.KeyUp, e);
    };
    ViewOutgoingEvents.prototype.emitContextMenu = function (e) {
        this._actual.emit(editorCommon_1.EventType.ContextMenu, this._convertViewToModelMouseEvent(e));
    };
    ViewOutgoingEvents.prototype.emitMouseMove = function (e) {
        this._actual.emit(editorCommon_1.EventType.MouseMove, this._convertViewToModelMouseEvent(e));
    };
    ViewOutgoingEvents.prototype.emitMouseLeave = function (e) {
        this._actual.emit(editorCommon_1.EventType.MouseLeave, this._convertViewToModelMouseEvent(e));
    };
    ViewOutgoingEvents.prototype.emitMouseUp = function (e) {
        this._actual.emit(editorCommon_1.EventType.MouseUp, this._convertViewToModelMouseEvent(e));
    };
    ViewOutgoingEvents.prototype.emitMouseDown = function (e) {
        this._actual.emit(editorCommon_1.EventType.MouseDown, this._convertViewToModelMouseEvent(e));
    };
    ViewOutgoingEvents.prototype._convertViewToModelMouseEvent = function (e) {
        if (e.target) {
            return {
                event: e.event,
                target: this._convertViewToModelMouseTarget(e.target)
            };
        }
        return e;
    };
    ViewOutgoingEvents.prototype._convertViewToModelMouseTarget = function (target) {
        return {
            element: target.element,
            type: target.type,
            position: target.position ? this._convertViewToModelPosition(target.position) : null,
            mouseColumn: target.mouseColumn,
            range: target.range ? this._convertViewToModelRange(target.range) : null,
            detail: target.detail
        };
    };
    ViewOutgoingEvents.prototype._convertViewToModelPosition = function (viewPosition) {
        return this._viewModel.convertViewPositionToModelPosition(viewPosition.lineNumber, viewPosition.column);
    };
    ViewOutgoingEvents.prototype._convertViewToModelRange = function (viewRange) {
        return this._viewModel.convertViewRangeToModelRange(viewRange);
    };
    return ViewOutgoingEvents;
}(lifecycle_1.Disposable));
exports.ViewOutgoingEvents = ViewOutgoingEvents;
