/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var network_1 = require("vs/base/common/network");
var severity_1 = require("vs/base/common/severity");
var winjs_base_1 = require("vs/base/common/winjs.base");
var configuration_1 = require("vs/platform/configuration/common/configuration");
var abstractExtensionService_1 = require("vs/platform/extensions/common/abstractExtensionService");
var abstractKeybindingService_1 = require("vs/platform/keybinding/common/abstractKeybindingService");
var keybindingResolver_1 = require("vs/platform/keybinding/common/keybindingResolver");
var keybinding_1 = require("vs/platform/keybinding/common/keybinding");
var editorCommon = require("vs/editor/common/editorCommon");
var event_1 = require("vs/base/common/event");
var model_1 = require("vs/platform/configuration/common/model");
var commandService_1 = require("vs/platform/commands/common/commandService");
var lifecycle_1 = require("vs/base/common/lifecycle");
var dom = require("vs/base/browser/dom");
var keyboardEvent_1 = require("vs/base/browser/keyboardEvent");
var keybindingsRegistry_1 = require("vs/platform/keybinding/common/keybindingsRegistry");
var SimpleEditor = (function () {
    function SimpleEditor(editor) {
        this._widget = editor;
    }
    SimpleEditor.prototype.getId = function () { return 'editor'; };
    SimpleEditor.prototype.getControl = function () { return this._widget; };
    SimpleEditor.prototype.getSelection = function () { return this._widget.getSelection(); };
    SimpleEditor.prototype.focus = function () { this._widget.focus(); };
    SimpleEditor.prototype.isVisible = function () { return true; };
    SimpleEditor.prototype.withTypedEditor = function (codeEditorCallback, diffEditorCallback) {
        if (this._widget.getEditorType() === editorCommon.EditorType.ICodeEditor) {
            // Single Editor
            return codeEditorCallback(this._widget);
        }
        else {
            // Diff Editor
            return diffEditorCallback(this._widget);
        }
    };
    return SimpleEditor;
}());
exports.SimpleEditor = SimpleEditor;
var SimpleModel = (function () {
    function SimpleModel(model) {
        this.model = model;
        this._onDispose = new event_1.Emitter();
    }
    Object.defineProperty(SimpleModel.prototype, "onDispose", {
        get: function () {
            return this._onDispose.event;
        },
        enumerable: true,
        configurable: true
    });
    SimpleModel.prototype.load = function () {
        return winjs_base_1.TPromise.as(this);
    };
    Object.defineProperty(SimpleModel.prototype, "textEditorModel", {
        get: function () {
            return this.model;
        },
        enumerable: true,
        configurable: true
    });
    SimpleModel.prototype.dispose = function () {
        this._onDispose.fire();
    };
    return SimpleModel;
}());
exports.SimpleModel = SimpleModel;
var SimpleEditorService = (function () {
    function SimpleEditorService() {
        this.openEditorDelegate = null;
    }
    SimpleEditorService.prototype.setEditor = function (editor) {
        this.editor = new SimpleEditor(editor);
    };
    SimpleEditorService.prototype.setOpenEditorDelegate = function (openEditorDelegate) {
        this.openEditorDelegate = openEditorDelegate;
    };
    SimpleEditorService.prototype.openEditor = function (typedData, sideBySide) {
        var _this = this;
        return winjs_base_1.TPromise.as(this.editor.withTypedEditor(function (editor) { return _this.doOpenEditor(editor, typedData); }, function (diffEditor) { return (_this.doOpenEditor(diffEditor.getOriginalEditor(), typedData) ||
            _this.doOpenEditor(diffEditor.getModifiedEditor(), typedData)); }));
    };
    SimpleEditorService.prototype.doOpenEditor = function (editor, data) {
        var model = this.findModel(editor, data);
        if (!model) {
            if (data.resource) {
                if (this.openEditorDelegate) {
                    this.openEditorDelegate(data.resource.toString());
                    return null;
                }
                else {
                    var schema = data.resource.scheme;
                    if (schema === network_1.Schemas.http || schema === network_1.Schemas.https) {
                        // This is a fully qualified http or https URL
                        window.open(data.resource.toString());
                        return this.editor;
                    }
                }
            }
            return null;
        }
        var selection = data.options.selection;
        if (selection) {
            if (typeof selection.endLineNumber === 'number' && typeof selection.endColumn === 'number') {
                editor.setSelection(selection);
                editor.revealRangeInCenter(selection);
            }
            else {
                var pos = {
                    lineNumber: selection.startLineNumber,
                    column: selection.startColumn
                };
                editor.setPosition(pos);
                editor.revealPositionInCenter(pos);
            }
        }
        return this.editor;
    };
    SimpleEditorService.prototype.findModel = function (editor, data) {
        var model = editor.getModel();
        if (model.uri.toString() !== data.resource.toString()) {
            return null;
        }
        return model;
    };
    return SimpleEditorService;
}());
exports.SimpleEditorService = SimpleEditorService;
var SimpleEditorModelResolverService = (function () {
    function SimpleEditorModelResolverService() {
    }
    SimpleEditorModelResolverService.prototype.setEditor = function (editor) {
        this.editor = new SimpleEditor(editor);
    };
    SimpleEditorModelResolverService.prototype.createModelReference = function (resource) {
        var _this = this;
        var model;
        model = this.editor.withTypedEditor(function (editor) { return _this.findModel(editor, resource); }, function (diffEditor) { return _this.findModel(diffEditor.getOriginalEditor(), resource) || _this.findModel(diffEditor.getModifiedEditor(), resource); });
        if (!model) {
            return winjs_base_1.TPromise.as(new lifecycle_1.ImmortalReference(null));
        }
        return winjs_base_1.TPromise.as(new lifecycle_1.ImmortalReference(new SimpleModel(model)));
    };
    SimpleEditorModelResolverService.prototype.registerTextModelContentProvider = function (scheme, provider) {
        return {
            dispose: function () { }
        };
    };
    SimpleEditorModelResolverService.prototype.findModel = function (editor, resource) {
        var model = editor.getModel();
        if (model.uri.toString() !== resource.toString()) {
            return null;
        }
        return model;
    };
    return SimpleEditorModelResolverService;
}());
exports.SimpleEditorModelResolverService = SimpleEditorModelResolverService;
var SimpleProgressService = (function () {
    function SimpleProgressService() {
    }
    SimpleProgressService.prototype.show = function () {
        return SimpleProgressService.NULL_PROGRESS_RUNNER;
    };
    SimpleProgressService.prototype.showWhile = function (promise, delay) {
        return null;
    };
    return SimpleProgressService;
}());
SimpleProgressService.NULL_PROGRESS_RUNNER = {
    done: function () { },
    total: function () { },
    worked: function () { }
};
exports.SimpleProgressService = SimpleProgressService;
var SimpleMessageService = (function () {
    function SimpleMessageService() {
    }
    SimpleMessageService.prototype.show = function (sev, message) {
        switch (sev) {
            case severity_1.default.Error:
                console.error(message);
                break;
            case severity_1.default.Warning:
                console.warn(message);
                break;
            default:
                console.log(message);
                break;
        }
        return SimpleMessageService.Empty;
    };
    SimpleMessageService.prototype.hideAll = function () {
        // No-op
    };
    SimpleMessageService.prototype.confirm = function (confirmation) {
        var messageText = confirmation.message;
        if (confirmation.detail) {
            messageText = messageText + '\n\n' + confirmation.detail;
        }
        return window.confirm(messageText);
    };
    return SimpleMessageService;
}());
SimpleMessageService.Empty = function () { };
exports.SimpleMessageService = SimpleMessageService;
var StandaloneCommandService = (function (_super) {
    __extends(StandaloneCommandService, _super);
    function StandaloneCommandService(instantiationService, extensionService) {
        var _this = _super.call(this, instantiationService, extensionService) || this;
        _this._dynamicCommands = Object.create(null);
        return _this;
    }
    StandaloneCommandService.prototype.addCommand = function (id, command) {
        this._dynamicCommands[id] = command;
    };
    StandaloneCommandService.prototype._getCommand = function (id) {
        return _super.prototype._getCommand.call(this, id) || this._dynamicCommands[id];
    };
    return StandaloneCommandService;
}(commandService_1.CommandService));
exports.StandaloneCommandService = StandaloneCommandService;
var StandaloneKeybindingService = (function (_super) {
    __extends(StandaloneKeybindingService, _super);
    function StandaloneKeybindingService(contextKeyService, commandService, messageService, domNode) {
        var _this = _super.call(this, contextKeyService, commandService, messageService) || this;
        _this._cachedResolver = null;
        _this._dynamicKeybindings = [];
        _this.toDispose.push(dom.addDisposableListener(domNode, dom.EventType.KEY_DOWN, function (e) {
            var keyEvent = new keyboardEvent_1.StandardKeyboardEvent(e);
            var shouldPreventDefault = _this._dispatch(keyEvent.toKeybinding(), keyEvent.target);
            if (shouldPreventDefault) {
                keyEvent.preventDefault();
            }
        }));
        return _this;
    }
    StandaloneKeybindingService.prototype.addDynamicKeybinding = function (keybinding, handler, when, commandId) {
        if (commandId === void 0) { commandId = null; }
        if (commandId === null) {
            commandId = 'DYNAMIC_' + (++StandaloneKeybindingService.LAST_GENERATED_ID);
        }
        var parsedContext = keybindingResolver_1.IOSupport.readKeybindingWhen(when);
        this._dynamicKeybindings.push({
            keybinding: keybinding,
            command: commandId,
            when: parsedContext,
            weight1: 1000,
            weight2: 0
        });
        var commandService = this._commandService;
        if (commandService instanceof StandaloneCommandService) {
            commandService.addCommand(commandId, {
                handler: handler
            });
        }
        else {
            throw new Error('Unknown command service!');
        }
        this.updateResolver({ source: keybinding_1.KeybindingSource.Default });
        return commandId;
    };
    StandaloneKeybindingService.prototype.updateResolver = function (event) {
        this._cachedResolver = null;
        this._onDidUpdateKeybindings.fire(event);
    };
    StandaloneKeybindingService.prototype._getResolver = function () {
        if (!this._cachedResolver) {
            this._cachedResolver = new keybindingResolver_1.KeybindingResolver(keybindingsRegistry_1.KeybindingsRegistry.getDefaultKeybindings(), this._getExtraKeybindings());
        }
        return this._cachedResolver;
    };
    StandaloneKeybindingService.prototype._getExtraKeybindings = function () {
        return this._dynamicKeybindings;
    };
    return StandaloneKeybindingService;
}(abstractKeybindingService_1.AbstractKeybindingService));
StandaloneKeybindingService.LAST_GENERATED_ID = 0;
exports.StandaloneKeybindingService = StandaloneKeybindingService;
var SimpleExtensionService = (function (_super) {
    __extends(SimpleExtensionService, _super);
    function SimpleExtensionService() {
        return _super.call(this, true) || this;
    }
    SimpleExtensionService.prototype._showMessage = function (severity, msg) {
        switch (severity) {
            case severity_1.default.Error:
                console.error(msg);
                break;
            case severity_1.default.Warning:
                console.warn(msg);
                break;
            case severity_1.default.Info:
                console.info(msg);
                break;
            default:
                console.log(msg);
        }
    };
    SimpleExtensionService.prototype._createFailedExtension = function () {
        throw new Error('unexpected');
    };
    SimpleExtensionService.prototype._actualActivateExtension = function (extensionDescription) {
        throw new Error('unexpected');
    };
    return SimpleExtensionService;
}(abstractExtensionService_1.AbstractExtensionService));
exports.SimpleExtensionService = SimpleExtensionService;
var SimpleConfigurationService = (function () {
    function SimpleConfigurationService() {
        this._onDidUpdateConfiguration = new event_1.Emitter();
        this.onDidUpdateConfiguration = this._onDidUpdateConfiguration.event;
        this._config = model_1.getDefaultValues();
    }
    SimpleConfigurationService.prototype.getConfiguration = function (section) {
        return this._config;
    };
    SimpleConfigurationService.prototype.reloadConfiguration = function (section) {
        return winjs_base_1.TPromise.as(this.getConfiguration(section));
    };
    SimpleConfigurationService.prototype.lookup = function (key) {
        return {
            value: configuration_1.getConfigurationValue(this.getConfiguration(), key),
            default: configuration_1.getConfigurationValue(this.getConfiguration(), key),
            user: configuration_1.getConfigurationValue(this.getConfiguration(), key)
        };
    };
    SimpleConfigurationService.prototype.keys = function () {
        return { default: [], user: [] };
    };
    return SimpleConfigurationService;
}());
exports.SimpleConfigurationService = SimpleConfigurationService;
