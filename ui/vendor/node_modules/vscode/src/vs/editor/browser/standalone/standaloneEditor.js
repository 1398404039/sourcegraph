/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
require("./media/standalone-tokens.css");
var editorCommon = require("vs/editor/common/editorCommon");
/* tslint:disable:duplicate-imports */
var editorBrowser_1 = require("vs/editor/browser/editorBrowser");
var standaloneCodeEditor_1 = require("vs/editor/browser/standalone/standaloneCodeEditor");
var scrollable_1 = require("vs/base/common/scrollable");
var standaloneServices_1 = require("vs/editor/browser/standalone/standaloneServices");
var openerService_1 = require("vs/platform/opener/browser/openerService");
var opener_1 = require("vs/platform/opener/common/opener");
var colorizer_1 = require("vs/editor/browser/standalone/colorizer");
var simpleServices_1 = require("vs/editor/browser/standalone/simpleServices");
var webWorker_1 = require("vs/editor/common/services/webWorker");
var diffNavigator_1 = require("vs/editor/contrib/diffNavigator/common/diffNavigator");
var editor_1 = require("vs/platform/editor/common/editor");
var commands_1 = require("vs/platform/commands/common/commands");
var contextView_1 = require("vs/platform/contextview/browser/contextView");
var instantiation_1 = require("vs/platform/instantiation/common/instantiation");
var keybinding_1 = require("vs/platform/keybinding/common/keybinding");
var contextkey_1 = require("vs/platform/contextkey/common/contextkey");
var codeEditorService_1 = require("vs/editor/common/services/codeEditorService");
var editorWorkerService_1 = require("vs/editor/common/services/editorWorkerService");
var resolverService_1 = require("vs/editor/common/services/resolverService");
/**
 * @internal
 */
function setupServices(overrides) {
    return standaloneServices_1.StaticServices.init(overrides);
}
exports.setupServices = setupServices;
function withAllStandaloneServices(domElement, override, callback) {
    var services = new standaloneServices_1.DynamicStandaloneServices(domElement, override);
    // The editorService is a lovely beast. It needs to point back to the code editor instance...
    var simpleEditorService = null;
    if (!services.has(editor_1.IEditorService)) {
        simpleEditorService = new simpleServices_1.SimpleEditorService();
        services.set(editor_1.IEditorService, simpleEditorService);
    }
    var simpleEditorModelResolverService = null;
    if (!services.has(resolverService_1.ITextModelResolverService)) {
        simpleEditorModelResolverService = new simpleServices_1.SimpleEditorModelResolverService();
        services.set(resolverService_1.ITextModelResolverService, simpleEditorModelResolverService);
    }
    if (!services.has(opener_1.IOpenerService)) {
        services.set(opener_1.IOpenerService, new openerService_1.OpenerService(services.get(editor_1.IEditorService), services.get(commands_1.ICommandService)));
    }
    var result = callback(services);
    if (simpleEditorService) {
        simpleEditorService.setEditor(result);
    }
    if (simpleEditorModelResolverService) {
        simpleEditorModelResolverService.setEditor(result);
    }
    return result;
}
/**
 * Create a new editor under `domElement`.
 * `domElement` should be empty (not contain other dom nodes).
 * The editor will read the size of `domElement`.
 */
function create(domElement, options, override) {
    return withAllStandaloneServices(domElement, override, function (services) {
        return new standaloneCodeEditor_1.StandaloneEditor(domElement, options, services, services.get(instantiation_1.IInstantiationService), services.get(codeEditorService_1.ICodeEditorService), services.get(commands_1.ICommandService), services.get(contextkey_1.IContextKeyService), services.get(keybinding_1.IKeybindingService), services.get(contextView_1.IContextViewService));
    });
}
exports.create = create;
/**
 * Create a new diff editor under `domElement`.
 * `domElement` should be empty (not contain other dom nodes).
 * The editor will read the size of `domElement`.
 */
function createDiffEditor(domElement, options, override) {
    return withAllStandaloneServices(domElement, override, function (services) {
        return new standaloneCodeEditor_1.StandaloneDiffEditor(domElement, options, services, services.get(instantiation_1.IInstantiationService), services.get(contextkey_1.IContextKeyService), services.get(keybinding_1.IKeybindingService), services.get(contextView_1.IContextViewService), services.get(editorWorkerService_1.IEditorWorkerService));
    });
}
exports.createDiffEditor = createDiffEditor;
function createDiffNavigator(diffEditor, opts) {
    return new diffNavigator_1.DiffNavigator(diffEditor, opts);
}
exports.createDiffNavigator = createDiffNavigator;
function doCreateModel(value, mode, uri) {
    return standaloneServices_1.StaticServices.modelService.get().createModel(value, mode, uri);
}
/**
 * Create a new editor model.
 * You can specify the language that should be set for this model or let the language be inferred from the `uri`.
 */
function createModel(value, language, uri) {
    value = value || '';
    if (!language) {
        var path = uri ? uri.path : null;
        var firstLF = value.indexOf('\n');
        var firstLine = value;
        if (firstLF !== -1) {
            firstLine = value.substring(0, firstLF);
        }
        return doCreateModel(value, standaloneServices_1.StaticServices.modeService.get().getOrCreateModeByFilenameOrFirstLine(path, firstLine), uri);
    }
    return doCreateModel(value, standaloneServices_1.StaticServices.modeService.get().getOrCreateMode(language), uri);
}
exports.createModel = createModel;
/**
 * Change the language for a model.
 */
function setModelLanguage(model, language) {
    standaloneServices_1.StaticServices.modelService.get().setMode(model, standaloneServices_1.StaticServices.modeService.get().getOrCreateMode(language));
}
exports.setModelLanguage = setModelLanguage;
/**
 * Set the markers for a model.
 */
function setModelMarkers(model, owner, markers) {
    if (model) {
        standaloneServices_1.StaticServices.markerService.get().changeOne(owner, model.uri, markers);
    }
}
exports.setModelMarkers = setModelMarkers;
/**
 * Get the model that has `uri` if it exists.
 */
function getModel(uri) {
    return standaloneServices_1.StaticServices.modelService.get().getModel(uri);
}
exports.getModel = getModel;
/**
 * Get all the created models.
 */
function getModels() {
    return standaloneServices_1.StaticServices.modelService.get().getModels();
}
exports.getModels = getModels;
/**
 * Emitted when a model is created.
 * @event
 */
function onDidCreateModel(listener) {
    return standaloneServices_1.StaticServices.modelService.get().onModelAdded(listener);
}
exports.onDidCreateModel = onDidCreateModel;
/**
 * Emitted right before a model is disposed.
 * @event
 */
function onWillDisposeModel(listener) {
    return standaloneServices_1.StaticServices.modelService.get().onModelRemoved(listener);
}
exports.onWillDisposeModel = onWillDisposeModel;
/**
 * Emitted when a different language is set to a model.
 * @event
 */
function onDidChangeModelLanguage(listener) {
    return standaloneServices_1.StaticServices.modelService.get().onModelModeChanged(function (e) {
        listener({
            model: e.model,
            oldLanguage: e.oldModeId
        });
    });
}
exports.onDidChangeModelLanguage = onDidChangeModelLanguage;
/**
 * @internal
 */
function getOrCreateMode(modeId) {
    return standaloneServices_1.StaticServices.modeService.get().getOrCreateMode(modeId);
}
exports.getOrCreateMode = getOrCreateMode;
/**
 * Create a new web worker that has model syncing capabilities built in.
 * Specify an AMD module to load that will `create` an object that will be proxied.
 */
function createWebWorker(opts) {
    return webWorker_1.createWebWorker(standaloneServices_1.StaticServices.modelService.get(), opts);
}
exports.createWebWorker = createWebWorker;
/**
 * Colorize the contents of `domNode` using attribute `data-lang`.
 */
function colorizeElement(domNode, options) {
    return colorizer_1.Colorizer.colorizeElement(standaloneServices_1.StaticServices.modeService.get(), domNode, options);
}
exports.colorizeElement = colorizeElement;
/**
 * Colorize `text` using language `languageId`.
 */
function colorize(text, languageId, options) {
    return colorizer_1.Colorizer.colorize(standaloneServices_1.StaticServices.modeService.get(), text, languageId, options);
}
exports.colorize = colorize;
/**
 * Colorize a line in a model.
 */
function colorizeModelLine(model, lineNumber, tabSize) {
    if (tabSize === void 0) { tabSize = 4; }
    return colorizer_1.Colorizer.colorizeModelLine(model, lineNumber, tabSize);
}
exports.colorizeModelLine = colorizeModelLine;
/**
 * @internal
 */
function createMonacoEditorAPI() {
    return {
        // methods
        create: create,
        createDiffEditor: createDiffEditor,
        createDiffNavigator: createDiffNavigator,
        createModel: createModel,
        setModelLanguage: setModelLanguage,
        setModelMarkers: setModelMarkers,
        getModels: getModels,
        getModel: getModel,
        onDidCreateModel: onDidCreateModel,
        onWillDisposeModel: onWillDisposeModel,
        onDidChangeModelLanguage: onDidChangeModelLanguage,
        createWebWorker: createWebWorker,
        colorizeElement: colorizeElement,
        colorize: colorize,
        colorizeModelLine: colorizeModelLine,
        // enums
        ScrollbarVisibility: scrollable_1.ScrollbarVisibility,
        WrappingIndent: editorCommon.WrappingIndent,
        OverviewRulerLane: editorCommon.OverviewRulerLane,
        EndOfLinePreference: editorCommon.EndOfLinePreference,
        DefaultEndOfLine: editorCommon.DefaultEndOfLine,
        EndOfLineSequence: editorCommon.EndOfLineSequence,
        TrackedRangeStickiness: editorCommon.TrackedRangeStickiness,
        CursorChangeReason: editorCommon.CursorChangeReason,
        MouseTargetType: editorCommon.MouseTargetType,
        TextEditorCursorStyle: editorCommon.TextEditorCursorStyle,
        TextEditorCursorBlinkingStyle: editorCommon.TextEditorCursorBlinkingStyle,
        ContentWidgetPositionPreference: editorBrowser_1.ContentWidgetPositionPreference,
        OverlayWidgetPositionPreference: editorBrowser_1.OverlayWidgetPositionPreference,
        // classes
        InternalEditorScrollbarOptions: editorCommon.InternalEditorScrollbarOptions,
        EditorWrappingInfo: editorCommon.EditorWrappingInfo,
        InternalEditorViewOptions: editorCommon.InternalEditorViewOptions,
        EditorContribOptions: editorCommon.EditorContribOptions,
        InternalEditorOptions: editorCommon.InternalEditorOptions,
        OverviewRulerPosition: editorCommon.OverviewRulerPosition,
        EditorLayoutInfo: editorCommon.EditorLayoutInfo,
        BareFontInfo: editorCommon.BareFontInfo,
        FontInfo: editorCommon.FontInfo,
        TextModelResolvedOptions: editorCommon.TextModelResolvedOptions,
        // vars
        EditorType: editorCommon.EditorType,
        CursorMoveByUnit: editorCommon.CursorMoveByUnit,
        CursorMovePosition: editorCommon.CursorMovePosition,
        EditorScrollDirection: editorCommon.EditorScrollDirection,
        EditorScrollByUnit: editorCommon.EditorScrollByUnit,
        RevealLineAtArgument: editorCommon.RevealLineAtArgument,
        Handler: editorCommon.Handler,
    };
}
exports.createMonacoEditorAPI = createMonacoEditorAPI;
