/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var dom = require("vs/base/browser/dom");
var fastDomNode_1 = require("vs/base/browser/fastDomNode");
var editorBrowser_1 = require("vs/editor/browser/editorBrowser");
var viewPart_1 = require("vs/editor/browser/view/viewPart");
var Coordinate = (function () {
    function Coordinate(top, left) {
        this.top = top;
        this.left = left;
    }
    return Coordinate;
}());
var ViewContentWidgets = (function (_super) {
    __extends(ViewContentWidgets, _super);
    function ViewContentWidgets(context, viewDomNode) {
        var _this = _super.call(this, context) || this;
        _this._viewDomNode = viewDomNode;
        _this._widgets = {};
        _this._contentWidth = _this._context.configuration.editor.layoutInfo.contentWidth;
        _this._contentLeft = _this._context.configuration.editor.layoutInfo.contentLeft;
        _this._lineHeight = _this._context.configuration.editor.lineHeight;
        _this._renderData = {};
        _this.domNode = document.createElement('div');
        viewPart_1.PartFingerprints.write(_this.domNode, 1 /* ContentWidgets */);
        _this.domNode.className = editorBrowser_1.ClassNames.CONTENT_WIDGETS;
        _this.domNode.style.position = 'absolute';
        _this.domNode.style.top = '0';
        _this.overflowingContentWidgetsDomNode = document.createElement('div');
        viewPart_1.PartFingerprints.write(_this.overflowingContentWidgetsDomNode, 2 /* OverflowingContentWidgets */);
        _this.overflowingContentWidgetsDomNode.className = editorBrowser_1.ClassNames.OVERFLOWING_CONTENT_WIDGETS;
        return _this;
    }
    ViewContentWidgets.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this._widgets = null;
        this.domNode = null;
    };
    // --- begin event handlers
    ViewContentWidgets.prototype.onConfigurationChanged = function (e) {
        if (e.lineHeight) {
            this._lineHeight = this._context.configuration.editor.lineHeight;
        }
        if (e.layoutInfo) {
            this._contentLeft = this._context.configuration.editor.layoutInfo.contentLeft;
            if (this._contentWidth !== this._context.configuration.editor.layoutInfo.contentWidth) {
                this._contentWidth = this._context.configuration.editor.layoutInfo.contentWidth;
                // update the maxWidth on widgets nodes, such that `onReadAfterForcedLayout`
                // below can read out the adjusted width/height of widgets
                var keys = Object.keys(this._widgets);
                for (var i = 0, len = keys.length; i < len; i++) {
                    var widgetId = keys[i];
                    var widgetData = this._widgets[widgetId];
                    var maxWidth = widgetData.allowEditorOverflow
                        ? window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth
                        : this._contentWidth;
                    widgetData.domNode.setMaxWidth(maxWidth);
                }
            }
        }
        return true;
    };
    ViewContentWidgets.prototype.onCursorPositionChanged = function (e) {
        return false;
    };
    ViewContentWidgets.prototype.onCursorSelectionChanged = function (e) {
        return false;
    };
    ViewContentWidgets.prototype.onDecorationsChanged = function (e) {
        // true for inline decorations that can end up relayouting text
        return true; //e.inlineDecorationsChanged;
    };
    ViewContentWidgets.prototype.onFlushed = function (e) {
        return true;
    };
    ViewContentWidgets.prototype.onLinesChanged = function (e) {
        return true;
    };
    ViewContentWidgets.prototype.onLinesDeleted = function (e) {
        return true;
    };
    ViewContentWidgets.prototype.onLinesInserted = function (e) {
        return true;
    };
    ViewContentWidgets.prototype.onRevealRangeRequest = function (e) {
        return false;
    };
    ViewContentWidgets.prototype.onScrollChanged = function (e) {
        return true;
    };
    ViewContentWidgets.prototype.onZonesChanged = function (e) {
        return true;
    };
    // ---- end view event handlers
    ViewContentWidgets.prototype.addWidget = function (widget) {
        var domNode = fastDomNode_1.createFastDomNode(widget.getDomNode());
        var widgetData = {
            allowEditorOverflow: widget.allowEditorOverflow || false,
            widget: widget,
            position: null,
            preference: null,
            isVisible: false,
            domNode: domNode
        };
        this._widgets[widget.getId()] = widgetData;
        domNode.setPosition((this._context.configuration.editor.viewInfo.fixedOverflowWidgets && widget.allowEditorOverflow) ? 'fixed' : 'absolute');
        domNode.setMaxWidth(this._contentWidth);
        domNode.setVisibility('hidden');
        domNode.setAttribute('widgetId', widget.getId());
        if (widgetData.allowEditorOverflow) {
            this.overflowingContentWidgetsDomNode.appendChild(domNode.domNode);
        }
        else {
            this.domNode.appendChild(domNode.domNode);
        }
        this.setShouldRender();
    };
    ViewContentWidgets.prototype.setWidgetPosition = function (widget, position, preference) {
        var widgetData = this._widgets[widget.getId()];
        widgetData.position = position;
        widgetData.preference = preference;
        this.setShouldRender();
    };
    ViewContentWidgets.prototype.removeWidget = function (widget) {
        var widgetId = widget.getId();
        if (this._widgets.hasOwnProperty(widgetId)) {
            var widgetData = this._widgets[widgetId];
            delete this._widgets[widgetId];
            var domNode = widgetData.domNode.domNode;
            domNode.parentNode.removeChild(domNode);
            domNode.removeAttribute('monaco-visible-content-widget');
            this.setShouldRender();
        }
    };
    ViewContentWidgets.prototype.shouldSuppressMouseDownOnWidget = function (widgetId) {
        if (this._widgets.hasOwnProperty(widgetId)) {
            var widgetData = this._widgets[widgetId];
            return widgetData.widget.suppressMouseDown;
        }
        return false;
    };
    ViewContentWidgets.prototype._layoutBoxInViewport = function (topLeft, width, height, ctx) {
        // Our visible box is split horizontally by the current line => 2 boxes
        // a) the box above the line
        var aboveLineTop = topLeft.top;
        var heightAboveLine = aboveLineTop;
        // b) the box under the line
        var underLineTop = topLeft.top + this._lineHeight;
        var heightUnderLine = ctx.viewportHeight - underLineTop;
        var aboveTop = aboveLineTop - height;
        var fitsAbove = (heightAboveLine >= height);
        var belowTop = underLineTop;
        var fitsBelow = (heightUnderLine >= height);
        // And its left
        var actualLeft = topLeft.left;
        if (actualLeft + width > ctx.scrollLeft + ctx.viewportWidth) {
            actualLeft = ctx.scrollLeft + ctx.viewportWidth - width;
        }
        if (actualLeft < ctx.scrollLeft) {
            actualLeft = ctx.scrollLeft;
        }
        return {
            aboveTop: aboveTop,
            fitsAbove: fitsAbove,
            belowTop: belowTop,
            fitsBelow: fitsBelow,
            left: actualLeft
        };
    };
    ViewContentWidgets.prototype._layoutBoxInPage = function (topLeft, width, height, ctx) {
        var left0 = topLeft.left - ctx.scrollLeft;
        if (left0 + width < 0 || left0 > this._contentWidth) {
            return null;
        }
        var aboveTop = topLeft.top - height;
        var belowTop = topLeft.top + this._lineHeight;
        var left = left0 + this._contentLeft;
        var domNodePosition = dom.getDomNodePagePosition(this._viewDomNode.domNode);
        var absoluteAboveTop = domNodePosition.top + aboveTop - dom.StandardWindow.scrollY;
        var absoluteBelowTop = domNodePosition.top + belowTop - dom.StandardWindow.scrollY;
        var absoluteLeft = domNodePosition.left + left - dom.StandardWindow.scrollX;
        var INNER_WIDTH = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
        var INNER_HEIGHT = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;
        // Leave some clearance to the bottom
        var TOP_PADDING = 22;
        var BOTTOM_PADDING = 22;
        var fitsAbove = (absoluteAboveTop >= TOP_PADDING), fitsBelow = (absoluteBelowTop + height <= INNER_HEIGHT - BOTTOM_PADDING);
        if (absoluteLeft + width + 20 > INNER_WIDTH) {
            var delta = absoluteLeft - (INNER_WIDTH - width - 20);
            absoluteLeft -= delta;
            left -= delta;
        }
        if (absoluteLeft < 0) {
            var delta = absoluteLeft;
            absoluteLeft -= delta;
            left -= delta;
        }
        if (this._context.configuration.editor.viewInfo.fixedOverflowWidgets) {
            aboveTop = absoluteAboveTop;
            belowTop = absoluteBelowTop;
            left = absoluteLeft;
        }
        return { aboveTop: aboveTop, fitsAbove: fitsAbove, belowTop: belowTop, fitsBelow: fitsBelow, left: left };
    };
    ViewContentWidgets.prototype._prepareRenderWidgetAtExactPosition = function (topLeft) {
        return {
            top: topLeft.top,
            left: topLeft.left
        };
    };
    ViewContentWidgets.prototype._prepareRenderWidgetAtExactPositionOverflowing = function (topLeft) {
        var r = this._prepareRenderWidgetAtExactPosition(topLeft);
        r.left += this._contentLeft;
        return r;
    };
    ViewContentWidgets.prototype._getTopLeft = function (ctx, position) {
        var visibleRange = ctx.visibleRangeForPosition(position);
        if (!visibleRange) {
            return null;
        }
        var top = ctx.getVerticalOffsetForLineNumber(position.lineNumber) - ctx.scrollTop;
        return new Coordinate(top, visibleRange.left);
    };
    ViewContentWidgets.prototype._prepareRenderWidget = function (widgetData, ctx) {
        var _this = this;
        if (!widgetData.position || !widgetData.preference) {
            return null;
        }
        // Do not trust that widgets have a valid position
        var validModelPosition = this._context.model.validateModelPosition(widgetData.position);
        if (!this._context.model.coordinatesConverter.modelPositionIsVisible(validModelPosition)) {
            // this position is hidden by the view model
            return null;
        }
        var position = this._context.model.coordinatesConverter.convertModelPositionToViewPosition(validModelPosition);
        var placement = null;
        var fetchPlacement = function () {
            if (placement) {
                return;
            }
            var topLeft = _this._getTopLeft(ctx, position);
            if (!topLeft) {
                return null;
            }
            var domNode = widgetData.domNode.domNode;
            var width = domNode.clientWidth;
            var height = domNode.clientHeight;
            if (widgetData.allowEditorOverflow) {
                placement = _this._layoutBoxInPage(topLeft, width, height, ctx);
            }
            else {
                placement = _this._layoutBoxInViewport(topLeft, width, height, ctx);
            }
        };
        // Do two passes, first for perfect fit, second picks first option
        for (var pass = 1; pass <= 2; pass++) {
            for (var i = 0; i < widgetData.preference.length; i++) {
                var pref = widgetData.preference[i];
                if (pref === editorBrowser_1.ContentWidgetPositionPreference.ABOVE) {
                    fetchPlacement();
                    if (!placement) {
                        // Widget outside of viewport
                        return null;
                    }
                    if (pass === 2 || placement.fitsAbove) {
                        return {
                            top: placement.aboveTop,
                            left: placement.left
                        };
                    }
                }
                else if (pref === editorBrowser_1.ContentWidgetPositionPreference.BELOW) {
                    fetchPlacement();
                    if (!placement) {
                        // Widget outside of viewport
                        return null;
                    }
                    if (pass === 2 || placement.fitsBelow) {
                        return {
                            top: placement.belowTop,
                            left: placement.left
                        };
                    }
                }
                else {
                    var topLeft = this._getTopLeft(ctx, position);
                    if (!topLeft) {
                        // Widget outside of viewport
                        return null;
                    }
                    if (widgetData.allowEditorOverflow) {
                        return this._prepareRenderWidgetAtExactPositionOverflowing(topLeft);
                    }
                    else {
                        return this._prepareRenderWidgetAtExactPosition(topLeft);
                    }
                }
            }
        }
        return null;
    };
    ViewContentWidgets.prototype.prepareRender = function (ctx) {
        var data = {};
        var keys = Object.keys(this._widgets);
        for (var i = 0, len = keys.length; i < len; i++) {
            var widgetId = keys[i];
            var renderData = this._prepareRenderWidget(this._widgets[widgetId], ctx);
            if (renderData) {
                data[widgetId] = renderData;
            }
        }
        this._renderData = data;
    };
    ViewContentWidgets.prototype.render = function (ctx) {
        var data = this._renderData;
        var keys = Object.keys(this._widgets);
        for (var i = 0, len = keys.length; i < len; i++) {
            var widgetId = keys[i];
            var widget = this._widgets[widgetId];
            var domNode = widget.domNode;
            if (data.hasOwnProperty(widgetId)) {
                if (widget.allowEditorOverflow) {
                    domNode.setTop(data[widgetId].top);
                    domNode.setLeft(data[widgetId].left);
                }
                else {
                    domNode.setTop(data[widgetId].top + ctx.scrollTop - ctx.bigNumbersDelta);
                    domNode.setLeft(data[widgetId].left);
                }
                if (!widget.isVisible) {
                    domNode.setVisibility('inherit');
                    domNode.setAttribute('monaco-visible-content-widget', 'true');
                    widget.isVisible = true;
                }
            }
            else {
                if (widget.isVisible) {
                    domNode.removeAttribute('monaco-visible-content-widget');
                    widget.isVisible = false;
                    domNode.setVisibility('hidden');
                }
            }
        }
    };
    return ViewContentWidgets;
}(viewPart_1.ViewPart));
exports.ViewContentWidgets = ViewContentWidgets;
