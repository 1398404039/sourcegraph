/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var themes = require("vs/platform/theme/common/themes");
var editorCommon = require("vs/editor/common/editorCommon");
var viewPart_1 = require("vs/editor/browser/view/viewPart");
var overviewRulerImpl_1 = require("vs/editor/browser/viewParts/overviewRuler/overviewRulerImpl");
var DecorationsOverviewRuler = (function (_super) {
    __extends(DecorationsOverviewRuler, _super);
    function DecorationsOverviewRuler(context, scrollHeight, getVerticalOffsetForLine) {
        var _this = _super.call(this, context) || this;
        _this._overviewRuler = new overviewRulerImpl_1.OverviewRulerImpl(1, 'decorationsOverviewRuler', scrollHeight, _this._context.configuration.editor.lineHeight, _this._context.configuration.editor.viewInfo.canUseTranslate3d, DecorationsOverviewRuler.MIN_DECORATION_HEIGHT, DecorationsOverviewRuler.MAX_DECORATION_HEIGHT, getVerticalOffsetForLine);
        _this._overviewRuler.setLanesCount(_this._context.configuration.editor.viewInfo.overviewRulerLanes, false);
        var theme = _this._context.configuration.editor.viewInfo.theme;
        _this._overviewRuler.setUseDarkColor(!themes.isLightTheme(theme), false);
        _this._shouldUpdateDecorations = true;
        _this._zonesFromDecorations = [];
        _this._shouldUpdateCursorPosition = true;
        _this._hideCursor = _this._context.configuration.editor.viewInfo.hideCursorInOverviewRuler;
        _this._zonesFromCursors = [];
        _this._cursorPositions = [];
        return _this;
    }
    DecorationsOverviewRuler.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this._overviewRuler.dispose();
    };
    // ---- begin view event handlers
    DecorationsOverviewRuler.prototype.onCursorPositionChanged = function (e) {
        this._shouldUpdateCursorPosition = true;
        this._cursorPositions = [e.position];
        this._cursorPositions = this._cursorPositions.concat(e.secondaryPositions);
        return true;
    };
    DecorationsOverviewRuler.prototype.onConfigurationChanged = function (e) {
        var prevLanesCount = this._overviewRuler.getLanesCount();
        var newLanesCount = this._context.configuration.editor.viewInfo.overviewRulerLanes;
        var shouldRender = false;
        if (e.lineHeight) {
            this._overviewRuler.setLineHeight(this._context.configuration.editor.lineHeight, false);
            shouldRender = true;
        }
        if (e.viewInfo.canUseTranslate3d) {
            this._overviewRuler.setCanUseTranslate3d(this._context.configuration.editor.viewInfo.canUseTranslate3d, false);
            shouldRender = true;
        }
        if (prevLanesCount !== newLanesCount) {
            this._overviewRuler.setLanesCount(newLanesCount, false);
            shouldRender = true;
        }
        if (e.viewInfo.hideCursorInOverviewRuler) {
            this._hideCursor = this._context.configuration.editor.viewInfo.hideCursorInOverviewRuler;
            this._shouldUpdateCursorPosition = true;
            shouldRender = true;
        }
        if (e.viewInfo.theme) {
            var theme = this._context.configuration.editor.viewInfo.theme;
            this._overviewRuler.setUseDarkColor(!themes.isLightTheme(theme), false);
            shouldRender = true;
        }
        return shouldRender;
    };
    DecorationsOverviewRuler.prototype.onLayoutChanged = function (layoutInfo) {
        this._overviewRuler.setLayout(layoutInfo.overviewRuler, false);
        return true;
    };
    DecorationsOverviewRuler.prototype.onZonesChanged = function () {
        return true;
    };
    DecorationsOverviewRuler.prototype.onModelFlushed = function () {
        this._shouldUpdateCursorPosition = true;
        this._shouldUpdateDecorations = true;
        return true;
    };
    DecorationsOverviewRuler.prototype.onModelDecorationsChanged = function (e) {
        this._shouldUpdateDecorations = true;
        return true;
    };
    DecorationsOverviewRuler.prototype.onScrollChanged = function (e) {
        this._overviewRuler.setScrollHeight(e.scrollHeight, false);
        return _super.prototype.onScrollChanged.call(this, e) || e.scrollHeightChanged;
    };
    // ---- end view event handlers
    DecorationsOverviewRuler.prototype.getDomNode = function () {
        return this._overviewRuler.getDomNode();
    };
    DecorationsOverviewRuler.prototype._createZonesFromDecorations = function () {
        var decorations = this._context.model.getAllOverviewRulerDecorations();
        var zones = [];
        for (var i = 0, len = decorations.length; i < len; i++) {
            var dec = decorations[i];
            var ovewviewRuler = dec.source.options.overviewRuler;
            zones.push(new editorCommon.OverviewRulerZone(dec.range.startLineNumber, dec.range.endLineNumber, ovewviewRuler.position, 0, ovewviewRuler.color, ovewviewRuler.darkColor));
        }
        return zones;
    };
    DecorationsOverviewRuler.prototype._createZonesFromCursors = function () {
        var zones = [];
        for (var i = 0, len = this._cursorPositions.length; i < len; i++) {
            var cursor = this._cursorPositions[i];
            zones.push(new editorCommon.OverviewRulerZone(cursor.lineNumber, cursor.lineNumber, editorCommon.OverviewRulerLane.Full, 2, DecorationsOverviewRuler._CURSOR_COLOR, DecorationsOverviewRuler._CURSOR_COLOR_DARK));
        }
        return zones;
    };
    DecorationsOverviewRuler.prototype.prepareRender = function (ctx) {
        // Nothing to read
        if (!this.shouldRender()) {
            throw new Error('I did not ask to render!');
        }
    };
    DecorationsOverviewRuler.prototype.render = function (ctx) {
        if (this._shouldUpdateDecorations || this._shouldUpdateCursorPosition) {
            if (this._shouldUpdateDecorations) {
                this._shouldUpdateDecorations = false;
                this._zonesFromDecorations = this._createZonesFromDecorations();
            }
            if (this._shouldUpdateCursorPosition) {
                this._shouldUpdateCursorPosition = false;
                if (this._hideCursor) {
                    this._zonesFromCursors = [];
                }
                else {
                    this._zonesFromCursors = this._createZonesFromCursors();
                }
            }
            var allZones = [];
            allZones = allZones.concat(this._zonesFromCursors);
            allZones = allZones.concat(this._zonesFromDecorations);
            this._overviewRuler.setZones(allZones, false);
        }
        var hasRendered = this._overviewRuler.render(false);
        if (hasRendered && overviewRulerImpl_1.OverviewRulerImpl.hasCanvas && this._overviewRuler.getLanesCount() > 0 && (this._zonesFromDecorations.length > 0 || this._zonesFromCursors.length > 0)) {
            var ctx2 = this._overviewRuler.getDomNode().getContext('2d');
            ctx2.beginPath();
            ctx2.lineWidth = 1;
            ctx2.strokeStyle = 'rgba(197,197,197,0.8)';
            ctx2.moveTo(0, 0);
            ctx2.lineTo(0, this._overviewRuler.getPixelHeight());
            ctx2.stroke();
            ctx2.moveTo(0, 0);
            ctx2.lineTo(this._overviewRuler.getPixelWidth(), 0);
            ctx2.stroke();
        }
    };
    return DecorationsOverviewRuler;
}(viewPart_1.ViewPart));
DecorationsOverviewRuler.MIN_DECORATION_HEIGHT = 6;
DecorationsOverviewRuler.MAX_DECORATION_HEIGHT = 60;
DecorationsOverviewRuler._CURSOR_COLOR = 'rgba(0, 0, 102, 0.8)';
DecorationsOverviewRuler._CURSOR_COLOR_DARK = 'rgba(152, 152, 152, 0.8)';
exports.DecorationsOverviewRuler = DecorationsOverviewRuler;
