import { FastDomNode } from 'vs/base/browser/fastDomNode';
import * as editorCommon from 'vs/editor/common/editorCommon';
import { ContentWidgetPositionPreference, IContentWidget } from 'vs/editor/browser/editorBrowser';
import { ViewPart } from 'vs/editor/browser/view/viewPart';
import { ViewContext } from 'vs/editor/common/view/viewContext';
import { RenderingContext, RestrictedRenderingContext } from 'vs/editor/common/view/renderingContext';
import * as viewEvents from 'vs/editor/common/view/viewEvents';
export declare class ViewContentWidgets extends ViewPart {
    private _widgets;
    private _contentWidth;
    private _contentLeft;
    private _lineHeight;
    private _renderData;
    domNode: HTMLElement;
    overflowingContentWidgetsDomNode: HTMLElement;
    private _viewDomNode;
    constructor(context: ViewContext, viewDomNode: FastDomNode<HTMLElement>);
    dispose(): void;
    onConfigurationChanged(e: viewEvents.ViewConfigurationChangedEvent): boolean;
    onCursorPositionChanged(e: viewEvents.ViewCursorPositionChangedEvent): boolean;
    onCursorSelectionChanged(e: viewEvents.ViewCursorSelectionChangedEvent): boolean;
    onDecorationsChanged(e: viewEvents.ViewDecorationsChangedEvent): boolean;
    onFlushed(e: viewEvents.ViewFlushedEvent): boolean;
    onLinesChanged(e: viewEvents.ViewLinesChangedEvent): boolean;
    onLinesDeleted(e: viewEvents.ViewLinesDeletedEvent): boolean;
    onLinesInserted(e: viewEvents.ViewLinesInsertedEvent): boolean;
    onRevealRangeRequest(e: viewEvents.ViewRevealRangeRequestEvent): boolean;
    onScrollChanged(e: viewEvents.ViewScrollChangedEvent): boolean;
    onZonesChanged(e: viewEvents.ViewZonesChangedEvent): boolean;
    addWidget(widget: IContentWidget): void;
    setWidgetPosition(widget: IContentWidget, position: editorCommon.IPosition, preference: ContentWidgetPositionPreference[]): void;
    removeWidget(widget: IContentWidget): void;
    shouldSuppressMouseDownOnWidget(widgetId: string): boolean;
    private _layoutBoxInViewport(topLeft, width, height, ctx);
    private _layoutBoxInPage(topLeft, width, height, ctx);
    private _prepareRenderWidgetAtExactPosition(topLeft);
    private _prepareRenderWidgetAtExactPositionOverflowing(topLeft);
    private _getTopLeft(ctx, position);
    private _prepareRenderWidget(widgetData, ctx);
    prepareRender(ctx: RenderingContext): void;
    render(ctx: RestrictedRenderingContext): void;
}
