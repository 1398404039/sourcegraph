/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var modes = require('vs/editor/common/modes');
var abstractMode_1 = require('vs/editor/common/modes/abstractMode');
var abstractState_1 = require('vs/editor/common/modes/abstractState');
var modeService_1 = require('vs/editor/common/services/modeService');
var instantiation_1 = require('vs/platform/instantiation/common/instantiation');
var htmlTokenTypes = require('vs/languages/html/common/htmlTokenTypes');
exports.htmlTokenTypes = htmlTokenTypes;
var htmlEmptyTagsShared_1 = require('vs/languages/html/common/htmlEmptyTagsShared');
exports.EMPTY_ELEMENTS = htmlEmptyTagsShared_1.EMPTY_ELEMENTS;
var languageConfigurationRegistry_1 = require('vs/editor/common/modes/languageConfigurationRegistry');
var tokenizationSupport_1 = require('vs/editor/common/modes/supports/tokenizationSupport');
var async_1 = require('vs/base/common/async');
var compatWorkerService_1 = require('vs/editor/common/services/compatWorkerService');
var workspace_1 = require('vs/platform/workspace/common/workspace');
var configuration_1 = require('vs/platform/configuration/common/configuration');
 // export to be used by Razor. We are the main module, so Razor should get it from us.
 // export to be used by Razor. We are the main module, so Razor should get it from us.
(function (States) {
    States[States["Content"] = 0] = "Content";
    States[States["OpeningStartTag"] = 1] = "OpeningStartTag";
    States[States["OpeningEndTag"] = 2] = "OpeningEndTag";
    States[States["WithinDoctype"] = 3] = "WithinDoctype";
    States[States["WithinTag"] = 4] = "WithinTag";
    States[States["WithinComment"] = 5] = "WithinComment";
    States[States["WithinEmbeddedContent"] = 6] = "WithinEmbeddedContent";
    States[States["AttributeName"] = 7] = "AttributeName";
    States[States["AttributeValue"] = 8] = "AttributeValue";
})(exports.States || (exports.States = {}));
var States = exports.States;
// list of elements that embed other content
var tagsEmbeddingContent = ['script', 'style'];
var State = (function (_super) {
    __extends(State, _super);
    function State(modeId, kind, lastTagName, lastAttributeName, embeddedContentType, attributeValueQuote, attributeValueLength) {
        _super.call(this, modeId);
        this.kind = kind;
        this.lastTagName = lastTagName;
        this.lastAttributeName = lastAttributeName;
        this.embeddedContentType = embeddedContentType;
        this.attributeValueQuote = attributeValueQuote;
        this.attributeValueLength = attributeValueLength;
    }
    State.escapeTagName = function (s) {
        return htmlTokenTypes.getTag(s.replace(/[:_.]/g, '-'));
    };
    State.prototype.makeClone = function () {
        return new State(this.getModeId(), this.kind, this.lastTagName, this.lastAttributeName, this.embeddedContentType, this.attributeValueQuote, this.attributeValueLength);
    };
    State.prototype.equals = function (other) {
        if (other instanceof State) {
            return (_super.prototype.equals.call(this, other) &&
                this.kind === other.kind &&
                this.lastTagName === other.lastTagName &&
                this.lastAttributeName === other.lastAttributeName &&
                this.embeddedContentType === other.embeddedContentType &&
                this.attributeValueQuote === other.attributeValueQuote &&
                this.attributeValueLength === other.attributeValueLength);
        }
        return false;
    };
    State.prototype.nextElementName = function (stream) {
        return stream.advanceIfRegExp(/^[_:\w][_:\w-.\d]*/).toLowerCase();
    };
    State.prototype.nextAttributeName = function (stream) {
        return stream.advanceIfRegExp(/^[^\s"'>/=\x00-\x0F\x7F\x80-\x9F]*/).toLowerCase();
    };
    State.prototype.tokenize = function (stream) {
        switch (this.kind) {
            case States.WithinComment:
                if (stream.advanceUntilString2('-->', false)) {
                    return { type: htmlTokenTypes.COMMENT };
                }
                else if (stream.advanceIfString2('-->')) {
                    this.kind = States.Content;
                    return { type: htmlTokenTypes.DELIM_COMMENT, dontMergeWithPrev: true };
                }
                break;
            case States.WithinDoctype:
                if (stream.advanceUntilString2('>', false)) {
                    return { type: htmlTokenTypes.DOCTYPE };
                }
                else if (stream.advanceIfString2('>')) {
                    this.kind = States.Content;
                    return { type: htmlTokenTypes.DELIM_DOCTYPE, dontMergeWithPrev: true };
                }
                break;
            case States.Content:
                if (stream.advanceIfCharCode2(60 /* LessThan */)) {
                    if (!stream.eos() && stream.peek() === '!') {
                        if (stream.advanceIfString2('!--')) {
                            this.kind = States.WithinComment;
                            return { type: htmlTokenTypes.DELIM_COMMENT, dontMergeWithPrev: true };
                        }
                        if (stream.advanceIfStringCaseInsensitive2('!DOCTYPE')) {
                            this.kind = States.WithinDoctype;
                            return { type: htmlTokenTypes.DELIM_DOCTYPE, dontMergeWithPrev: true };
                        }
                    }
                    if (stream.advanceIfCharCode2(47 /* Slash */)) {
                        this.kind = States.OpeningEndTag;
                        return { type: htmlTokenTypes.DELIM_END, dontMergeWithPrev: true };
                    }
                    this.kind = States.OpeningStartTag;
                    return { type: htmlTokenTypes.DELIM_START, dontMergeWithPrev: true };
                }
                break;
            case States.OpeningEndTag:
                var tagName = this.nextElementName(stream);
                if (tagName.length > 0) {
                    return {
                        type: State.escapeTagName(tagName),
                    };
                }
                else if (stream.advanceIfString2('>')) {
                    this.kind = States.Content;
                    return { type: htmlTokenTypes.DELIM_END, dontMergeWithPrev: true };
                }
                else {
                    stream.advanceUntilString2('>', false);
                    return { type: '' };
                }
            case States.OpeningStartTag:
                this.lastTagName = this.nextElementName(stream);
                if (this.lastTagName.length > 0) {
                    this.lastAttributeName = null;
                    if ('script' === this.lastTagName || 'style' === this.lastTagName) {
                        this.lastAttributeName = null;
                        this.embeddedContentType = null;
                    }
                    this.kind = States.WithinTag;
                    return {
                        type: State.escapeTagName(this.lastTagName),
                    };
                }
                break;
            case States.WithinTag:
                if (stream.skipWhitespace2() || stream.eos()) {
                    this.lastAttributeName = ''; // remember that we have seen a whitespace
                    return { type: '' };
                }
                else {
                    if (this.lastAttributeName === '') {
                        var name = this.nextAttributeName(stream);
                        if (name.length > 0) {
                            this.lastAttributeName = name;
                            this.kind = States.AttributeName;
                            return { type: htmlTokenTypes.ATTRIB_NAME };
                        }
                    }
                    if (stream.advanceIfString2('/>')) {
                        this.kind = States.Content;
                        return { type: htmlTokenTypes.DELIM_START, dontMergeWithPrev: true };
                    }
                    if (stream.advanceIfCharCode2(62 /* GreaterThan */)) {
                        if (tagsEmbeddingContent.indexOf(this.lastTagName) !== -1) {
                            this.kind = States.WithinEmbeddedContent;
                            return { type: htmlTokenTypes.DELIM_START, dontMergeWithPrev: true };
                        }
                        else {
                            this.kind = States.Content;
                            return { type: htmlTokenTypes.DELIM_START, dontMergeWithPrev: true };
                        }
                    }
                    else {
                        stream.next2();
                        return { type: '' };
                    }
                }
            case States.AttributeName:
                if (stream.skipWhitespace2() || stream.eos()) {
                    return { type: '' };
                }
                if (stream.advanceIfCharCode2(61 /* Equals */)) {
                    this.kind = States.AttributeValue;
                    return { type: htmlTokenTypes.DELIM_ASSIGN };
                }
                else {
                    this.kind = States.WithinTag;
                    this.lastAttributeName = '';
                    return this.tokenize(stream); // no advance yet - jump to WithinTag
                }
            case States.AttributeValue:
                if (stream.eos()) {
                    return { type: '' };
                }
                if (stream.skipWhitespace2()) {
                    if (this.attributeValueQuote === '"' || this.attributeValueQuote === '\'') {
                        // We are inside the quotes of an attribute value
                        return { type: htmlTokenTypes.ATTRIB_VALUE };
                    }
                    return { type: '' };
                }
                // We are in a attribute value
                if (this.attributeValueQuote === '"' || this.attributeValueQuote === '\'') {
                    if (this.attributeValueLength === 1 && ('script' === this.lastTagName || 'style' === this.lastTagName) && 'type' === this.lastAttributeName) {
                        var attributeValue = stream.advanceUntilString(this.attributeValueQuote, true);
                        if (attributeValue.length > 0) {
                            this.embeddedContentType = this.unquote(attributeValue);
                            this.kind = States.WithinTag;
                            this.attributeValueLength = 0;
                            this.attributeValueQuote = '';
                            return { type: htmlTokenTypes.ATTRIB_VALUE };
                        }
                    }
                    else {
                        if (stream.advanceIfCharCode2(this.attributeValueQuote.charCodeAt(0))) {
                            this.kind = States.WithinTag;
                            this.attributeValueLength = 0;
                            this.attributeValueQuote = '';
                            this.lastAttributeName = null;
                        }
                        else {
                            stream.next();
                            this.attributeValueLength++;
                        }
                        return { type: htmlTokenTypes.ATTRIB_VALUE };
                    }
                }
                else {
                    var attributeValue = stream.advanceIfRegExp(/^[^\s"'`=<>]+/);
                    if (attributeValue.length > 0) {
                        this.kind = States.WithinTag;
                        this.lastAttributeName = null;
                        return { type: htmlTokenTypes.ATTRIB_VALUE };
                    }
                    var ch = stream.peek();
                    if (ch === '\'' || ch === '"') {
                        this.attributeValueQuote = ch;
                        this.attributeValueLength = 1;
                        stream.next2();
                        return { type: htmlTokenTypes.ATTRIB_VALUE };
                    }
                    else {
                        this.kind = States.WithinTag;
                        this.lastAttributeName = null;
                        return this.tokenize(stream); // no advance yet - jump to WithinTag
                    }
                }
        }
        stream.next2();
        this.kind = States.Content;
        return { type: '' };
    };
    State.prototype.unquote = function (value) {
        var start = 0;
        var end = value.length;
        if ('"' === value[0]) {
            start++;
        }
        if ('"' === value[end - 1]) {
            end--;
        }
        return value.substring(start, end);
    };
    return State;
}(abstractState_1.AbstractState));
exports.State = State;
var HTMLMode = (function (_super) {
    __extends(HTMLMode, _super);
    function HTMLMode(descriptor, instantiationService, modeService, compatWorkerService, workspaceContextService, configurationService) {
        var _this = this;
        _super.call(this, descriptor.id, compatWorkerService);
        this.workspaceContextService = workspaceContextService;
        this.configurationService = configurationService;
        this._modeWorkerManager = this._createModeWorkerManager(descriptor, instantiationService);
        this._modeService = modeService;
        if (this.compatWorkerService && this.compatWorkerService.isInMainThread) {
            var updateConfiguration_1 = function () {
                var opts = configurationService.getConfiguration('html');
                _this._configureWorker(opts);
            };
            configurationService.onDidUpdateConfiguration(function (e) { return updateConfiguration_1(); });
            updateConfiguration_1();
        }
        this._registerSupports();
    }
    HTMLMode.prototype._registerSupports = function () {
        var _this = this;
        if (this.getId() !== 'html') {
            throw new Error('This method must be overwritten!');
        }
        modes.SuggestRegistry.register(this.getId(), {
            triggerCharacters: ['.', ':', '<', '"', '=', '/'],
            provideCompletionItems: function (model, position, token) {
                return async_1.wireCancellationToken(token, _this._provideCompletionItems(model.uri, position));
            }
        }, true);
        modes.DocumentHighlightProviderRegistry.register(this.getId(), {
            provideDocumentHighlights: function (model, position, token) {
                return async_1.wireCancellationToken(token, _this._provideDocumentHighlights(model.uri, position));
            }
        }, true);
        modes.DocumentRangeFormattingEditProviderRegistry.register(this.getId(), {
            provideDocumentRangeFormattingEdits: function (model, range, options, token) {
                return async_1.wireCancellationToken(token, _this._provideDocumentRangeFormattingEdits(model.uri, range, options));
            }
        }, true);
        modes.LinkProviderRegistry.register(this.getId(), {
            provideLinks: function (model, token) {
                return async_1.wireCancellationToken(token, _this.provideLinks(model.uri));
            }
        }, true);
        languageConfigurationRegistry_1.LanguageConfigurationRegistry.register(this.getId(), HTMLMode.LANG_CONFIG);
        modes.TokenizationRegistry.register(this.getId(), new tokenizationSupport_1.TokenizationSupport(this._modeService, this.getId(), this, true));
    };
    HTMLMode.prototype._createModeWorkerManager = function (descriptor, instantiationService) {
        return new abstractMode_1.ModeWorkerManager(descriptor, 'vs/languages/html/common/htmlWorker', 'HTMLWorker', null, instantiationService);
    };
    HTMLMode.prototype._worker = function (runner) {
        return this._modeWorkerManager.worker(runner);
    };
    // TokenizationSupport
    HTMLMode.prototype.getInitialState = function () {
        return new State(this.getId(), States.Content, '', '', '', '', 0);
    };
    HTMLMode.prototype.enterNestedMode = function (state) {
        return state instanceof State && state.kind === States.WithinEmbeddedContent;
    };
    HTMLMode.prototype.getNestedMode = function (state, locator) {
        var htmlState = state;
        if (htmlState.embeddedContentType !== null) {
            return locator.getMode(htmlState.embeddedContentType);
        }
        if ('script' === htmlState.lastTagName) {
            return locator.getMode('text/javascript');
        }
        if ('style' === htmlState.lastTagName) {
            return locator.getMode('text/css');
        }
        return null;
    };
    HTMLMode.prototype.getLeavingNestedModeData = function (line, state) {
        var tagName = state.lastTagName;
        var regexp = new RegExp('<\\/' + tagName + '\\s*>', 'i');
        var match = regexp.exec(line);
        if (match !== null) {
            return {
                nestedModeBuffer: line.substring(0, match.index),
                bufferAfterNestedMode: line.substring(match.index),
                stateAfterNestedMode: new State(this.getId(), States.Content, '', '', '', '', 0)
            };
        }
        return null;
    };
    HTMLMode.prototype._configureWorker = function (options) {
        return this._worker(function (w) { return w._doConfigure(options); });
    };
    HTMLMode.prototype.provideLinks = function (resource) {
        var workspace = this.workspaceContextService.getWorkspace();
        var workspaceResource = workspace ? workspace.resource : null;
        return this._provideLinks(resource, workspaceResource);
    };
    HTMLMode.prototype._provideLinks = function (resource, workspaceResource) {
        return this._worker(function (w) { return w.provideLinks(resource, workspaceResource); });
    };
    HTMLMode.prototype._provideDocumentRangeFormattingEdits = function (resource, range, options) {
        return this._worker(function (w) { return w.provideDocumentRangeFormattingEdits(resource, range, options); });
    };
    HTMLMode.prototype._provideDocumentHighlights = function (resource, position, strict) {
        if (strict === void 0) { strict = false; }
        return this._worker(function (w) { return w.provideDocumentHighlights(resource, position, strict); });
    };
    HTMLMode.prototype._provideCompletionItems = function (resource, position) {
        return this._worker(function (w) { return w.provideCompletionItems(resource, position); });
    };
    HTMLMode.LANG_CONFIG = {
        wordPattern: abstractMode_1.createWordRegExp('#-?%'),
        comments: {
            blockComment: ['<!--', '-->']
        },
        brackets: [
            ['<!--', '-->'],
            ['<', '>'],
        ],
        __electricCharacterSupport: {
            embeddedElectricCharacters: ['*', '}', ']', ')']
        },
        autoClosingPairs: [
            { open: '{', close: '}' },
            { open: '[', close: ']' },
            { open: '(', close: ')' },
            { open: '"', close: '"' },
            { open: '\'', close: '\'' }
        ],
        surroundingPairs: [
            { open: '"', close: '"' },
            { open: '\'', close: '\'' }
        ],
        onEnterRules: [
            {
                beforeText: new RegExp("<(?!(?:" + htmlEmptyTagsShared_1.EMPTY_ELEMENTS.join('|') + "))([_:\\w][_:\\w-.\\d]*)([^/>]*(?!/)>)[^<]*$", 'i'),
                afterText: /^<\/([_:\w][_:\w-.\d]*)\s*>$/i,
                action: { indentAction: modes.IndentAction.IndentOutdent }
            },
            {
                beforeText: new RegExp("<(?!(?:" + htmlEmptyTagsShared_1.EMPTY_ELEMENTS.join('|') + "))(\\w[\\w\\d]*)([^/>]*(?!/)>)[^<]*$", 'i'),
                action: { indentAction: modes.IndentAction.Indent }
            }
        ],
    };
    HTMLMode.$_configureWorker = compatWorkerService_1.CompatWorkerAttr(HTMLMode, HTMLMode.prototype._configureWorker);
    HTMLMode.$_provideLinks = compatWorkerService_1.CompatWorkerAttr(HTMLMode, HTMLMode.prototype._provideLinks);
    HTMLMode.$_provideDocumentRangeFormattingEdits = compatWorkerService_1.CompatWorkerAttr(HTMLMode, HTMLMode.prototype._provideDocumentRangeFormattingEdits);
    HTMLMode.$_provideDocumentHighlights = compatWorkerService_1.CompatWorkerAttr(HTMLMode, HTMLMode.prototype._provideDocumentHighlights);
    HTMLMode.$_provideCompletionItems = compatWorkerService_1.CompatWorkerAttr(HTMLMode, HTMLMode.prototype._provideCompletionItems);
    HTMLMode = __decorate([
        __param(1, instantiation_1.IInstantiationService),
        __param(2, modeService_1.IModeService),
        __param(3, compatWorkerService_1.ICompatWorkerService),
        __param(4, workspace_1.IWorkspaceContextService),
        __param(5, configuration_1.IConfigurationService)
    ], HTMLMode);
    return HTMLMode;
}(abstractMode_1.CompatMode));
exports.HTMLMode = HTMLMode;
