"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var severity_1 = require("vs/base/common/severity");
var uri_1 = require("vs/base/common/uri");
var winjs_base_1 = require("vs/base/common/winjs.base");
var standaloneEditor_1 = require("vs/editor/browser/standalone/standaloneEditor");
var standaloneLanguages_1 = require("vs/editor/browser/standalone/standaloneLanguages");
var modes_1 = require("vs/editor/common/modes");
'use strict';
var ts = require('../lib/typescriptServices');
var Adapter = (function () {
    function Adapter(_worker) {
        this._worker = _worker;
    }
    Adapter.prototype._positionToOffset = function (uri, position) {
        var model = standaloneEditor_1.getModel(uri);
        return model.getOffsetAt(position);
    };
    Adapter.prototype._offsetToPosition = function (uri, offset) {
        var model = standaloneEditor_1.getModel(uri);
        return model.getPositionAt(offset);
    };
    Adapter.prototype._textSpanToRange = function (uri, span) {
        var p1 = this._offsetToPosition(uri, span.start);
        var p2 = this._offsetToPosition(uri, span.start + span.length);
        var startLineNumber = p1.lineNumber, startColumn = p1.column;
        var endLineNumber = p2.lineNumber, endColumn = p2.column;
        return { startLineNumber: startLineNumber, startColumn: startColumn, endLineNumber: endLineNumber, endColumn: endColumn };
    };
    return Adapter;
}());
exports.Adapter = Adapter;
// --- diagnostics --- ---
var DiagnostcsAdapter = (function (_super) {
    __extends(DiagnostcsAdapter, _super);
    function DiagnostcsAdapter(_defaults, _selector, worker) {
        var _this = this;
        _super.call(this, worker);
        this._defaults = _defaults;
        this._selector = _selector;
        this._disposables = [];
        this._listener = Object.create(null);
        var onModelAdd = function (model) {
            if (model.getModeId() !== _selector) {
                return;
            }
            var handle;
            var changeSubscription = model.onDidChangeContent(function () {
                clearTimeout(handle);
                handle = setTimeout(function () { return _this._doValidate(model.uri); }, 500);
            });
            _this._listener[model.uri.toString()] = {
                dispose: function () {
                    changeSubscription.dispose();
                    clearTimeout(handle);
                }
            };
            _this._doValidate(model.uri);
        };
        var onModelRemoved = function (model) {
            var key = model.uri.toString();
            if (_this._listener[key]) {
                _this._listener[key].dispose();
                delete _this._listener[key];
            }
        };
        this._disposables.push(standaloneEditor_1.onDidCreateModel(onModelAdd));
        this._disposables.push(standaloneEditor_1.onWillDisposeModel(onModelRemoved));
        this._disposables.push(standaloneEditor_1.onDidChangeModelLanguage(function (event) {
            onModelRemoved(event.model);
            onModelAdd(event.model);
        }));
        this._disposables.push({
            dispose: function () {
                for (var key in _this._listener) {
                    _this._listener[key].dispose();
                }
            }
        });
        standaloneEditor_1.getModels().forEach(onModelAdd);
    }
    DiagnostcsAdapter.prototype.dispose = function () {
        this._disposables.forEach(function (d) { return d && d.dispose(); });
        this._disposables = [];
    };
    DiagnostcsAdapter.prototype._doValidate = function (resource) {
        var _this = this;
        this._worker(resource).then(function (worker) {
            var promises = [];
            var _a = _this._defaults.getDiagnosticsOptions(), noSyntaxValidation = _a.noSyntaxValidation, noSemanticValidation = _a.noSemanticValidation;
            if (!noSyntaxValidation) {
                promises.push(worker.getSyntacticDiagnostics(resource.toString()));
            }
            if (!noSemanticValidation) {
                promises.push(worker.getSemanticDiagnostics(resource.toString()));
            }
            return winjs_base_1.TPromise.join(promises);
        }).then(function (diagnostics) {
            var markers = diagnostics
                .reduce(function (p, c) { return c.concat(p); }, [])
                .map(function (d) { return _this._convertDiagnostics(resource, d); });
            standaloneEditor_1.setModelMarkers(standaloneEditor_1.getModel(resource), _this._selector, markers);
        }).done(undefined, function (err) {
            console.error(err);
        });
    };
    DiagnostcsAdapter.prototype._convertDiagnostics = function (resource, diag) {
        var _a = this._offsetToPosition(resource, diag.start), startLineNumber = _a.lineNumber, startColumn = _a.column;
        var _b = this._offsetToPosition(resource, diag.start + diag.length), endLineNumber = _b.lineNumber, endColumn = _b.column;
        return {
            severity: severity_1.default.Error,
            startLineNumber: startLineNumber,
            startColumn: startColumn,
            endLineNumber: endLineNumber,
            endColumn: endColumn,
            message: ts.flattenDiagnosticMessageText(diag.messageText, '\n')
        };
    };
    return DiagnostcsAdapter;
}(Adapter));
exports.DiagnostcsAdapter = DiagnostcsAdapter;
var SuggestAdapter = (function (_super) {
    __extends(SuggestAdapter, _super);
    function SuggestAdapter() {
        _super.apply(this, arguments);
    }
    Object.defineProperty(SuggestAdapter.prototype, "triggerCharacters", {
        get: function () {
            return ['.'];
        },
        enumerable: true,
        configurable: true
    });
    SuggestAdapter.prototype.provideCompletionItems = function (model, position, token) {
        var wordInfo = model.getWordUntilPosition(position);
        var resource = model.uri;
        var offset = this._positionToOffset(resource, position);
        return wireCancellationToken(token, this._worker(resource).then(function (worker) {
            return worker.getCompletionsAtPosition(resource.toString(), offset);
        }).then(function (info) {
            if (!info) {
                return;
            }
            var suggestions = info.entries.map(function (entry) {
                return {
                    uri: resource,
                    position: position,
                    label: entry.name,
                    sortText: entry.sortText,
                    kind: SuggestAdapter.convertKind(entry.kind)
                };
            });
            return suggestions;
        }));
    };
    SuggestAdapter.prototype.resolveCompletionItem = function (item, token) {
        var _this = this;
        var myItem = item;
        var resource = myItem.uri;
        var position = myItem.position;
        return wireCancellationToken(token, this._worker(resource).then(function (worker) {
            return worker.getCompletionEntryDetails(resource.toString(), _this._positionToOffset(resource, position), myItem.label);
        }).then(function (details) {
            if (!details) {
                return myItem;
            }
            return {
                uri: resource,
                position: position,
                label: details.name,
                kind: SuggestAdapter.convertKind(details.kind),
                detail: ts.displayPartsToString(details.displayParts),
                documentation: ts.displayPartsToString(details.documentation)
            };
        }));
    };
    SuggestAdapter.convertKind = function (kind) {
        switch (kind) {
            case Kind.primitiveType:
            case Kind.keyword:
                return standaloneLanguages_1.CompletionItemKind.Keyword;
            case Kind.variable:
            case Kind.localVariable:
                return standaloneLanguages_1.CompletionItemKind.Variable;
            case Kind.memberVariable:
            case Kind.memberGetAccessor:
            case Kind.memberSetAccessor:
                return standaloneLanguages_1.CompletionItemKind.Field;
            case Kind.function:
            case Kind.memberFunction:
            case Kind.constructSignature:
            case Kind.callSignature:
            case Kind.indexSignature:
                return standaloneLanguages_1.CompletionItemKind.Function;
            case Kind.enum:
                return standaloneLanguages_1.CompletionItemKind.Enum;
            case Kind.module:
                return standaloneLanguages_1.CompletionItemKind.Module;
            case Kind.class:
                return standaloneLanguages_1.CompletionItemKind.Class;
            case Kind.interface:
                return standaloneLanguages_1.CompletionItemKind.Interface;
            case Kind.warning:
                return standaloneLanguages_1.CompletionItemKind.File;
        }
        return standaloneLanguages_1.CompletionItemKind.Property;
    };
    return SuggestAdapter;
}(Adapter));
exports.SuggestAdapter = SuggestAdapter;
var SignatureHelpAdapter = (function (_super) {
    __extends(SignatureHelpAdapter, _super);
    function SignatureHelpAdapter() {
        _super.apply(this, arguments);
        this.signatureHelpTriggerCharacters = ['(', ','];
    }
    SignatureHelpAdapter.prototype.provideSignatureHelp = function (model, position, token) {
        var _this = this;
        var resource = model.uri;
        return wireCancellationToken(token, this._worker(resource).then(function (worker) { return worker.getSignatureHelpItems(resource.toString(), _this._positionToOffset(resource, position)); }).then(function (info) {
            if (!info) {
                return;
            }
            var ret = {
                activeSignature: info.selectedItemIndex,
                activeParameter: info.argumentIndex,
                signatures: []
            };
            info.items.forEach(function (item) {
                var signature = {
                    label: '',
                    documentation: null,
                    parameters: []
                };
                signature.label += ts.displayPartsToString(item.prefixDisplayParts);
                item.parameters.forEach(function (p, i, a) {
                    var label = ts.displayPartsToString(p.displayParts);
                    var parameter = {
                        label: label,
                        documentation: ts.displayPartsToString(p.documentation)
                    };
                    signature.label += label;
                    signature.parameters.push(parameter);
                    if (i < a.length - 1) {
                        signature.label += ts.displayPartsToString(item.separatorDisplayParts);
                    }
                });
                signature.label += ts.displayPartsToString(item.suffixDisplayParts);
                ret.signatures.push(signature);
            });
            return ret;
        }));
    };
    return SignatureHelpAdapter;
}(Adapter));
exports.SignatureHelpAdapter = SignatureHelpAdapter;
// --- hover ------
var QuickInfoAdapter = (function (_super) {
    __extends(QuickInfoAdapter, _super);
    function QuickInfoAdapter() {
        _super.apply(this, arguments);
    }
    QuickInfoAdapter.prototype.provideHover = function (model, position, token) {
        var _this = this;
        var resource = model.uri;
        return wireCancellationToken(token, this._worker(resource).then(function (worker) {
            return worker.getQuickInfoAtPosition(resource.toString(), _this._positionToOffset(resource, position));
        }).then(function (info) {
            if (!info) {
                return;
            }
            var contents = ts.displayPartsToString(info.displayParts);
            return {
                range: _this._textSpanToRange(resource, info.textSpan),
                contents: [contents]
            };
        }));
    };
    return QuickInfoAdapter;
}(Adapter));
exports.QuickInfoAdapter = QuickInfoAdapter;
// --- occurrences ------
var OccurrencesAdapter = (function (_super) {
    __extends(OccurrencesAdapter, _super);
    function OccurrencesAdapter() {
        _super.apply(this, arguments);
    }
    OccurrencesAdapter.prototype.provideDocumentHighlights = function (model, position, token) {
        var _this = this;
        var resource = model.uri;
        return wireCancellationToken(token, this._worker(resource).then(function (worker) {
            return worker.getOccurrencesAtPosition(resource.toString(), _this._positionToOffset(resource, position));
        }).then(function (entries) {
            if (!entries) {
                return;
            }
            return entries.map(function (entry) {
                return {
                    range: _this._textSpanToRange(resource, entry.textSpan),
                    kind: entry.isWriteAccess ? modes_1.DocumentHighlightKind.Write : modes_1.DocumentHighlightKind.Text
                };
            });
        }));
    };
    return OccurrencesAdapter;
}(Adapter));
exports.OccurrencesAdapter = OccurrencesAdapter;
// --- definition ------
var DefinitionAdapter = (function (_super) {
    __extends(DefinitionAdapter, _super);
    function DefinitionAdapter() {
        _super.apply(this, arguments);
    }
    DefinitionAdapter.prototype.provideDefinition = function (model, position, token) {
        var _this = this;
        var resource = model.uri;
        return wireCancellationToken(token, this._worker(resource).then(function (worker) {
            return worker.getDefinitionAtPosition(resource.toString(), _this._positionToOffset(resource, position));
        }).then(function (entries) {
            if (!entries) {
                return;
            }
            var result = [];
            for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {
                var entry = entries_1[_i];
                var uri = uri_1.default.parse(entry.fileName);
                if (standaloneEditor_1.getModel(uri)) {
                    result.push({
                        uri: uri,
                        range: _this._textSpanToRange(uri, entry.textSpan)
                    });
                }
            }
            return result;
        }));
    };
    return DefinitionAdapter;
}(Adapter));
exports.DefinitionAdapter = DefinitionAdapter;
// --- references ------
var ReferenceAdapter = (function (_super) {
    __extends(ReferenceAdapter, _super);
    function ReferenceAdapter() {
        _super.apply(this, arguments);
    }
    ReferenceAdapter.prototype.provideReferences = function (model, position, context, token) {
        var _this = this;
        var resource = model.uri;
        return wireCancellationToken(token, this._worker(resource).then(function (worker) {
            return worker.getReferencesAtPosition(resource.toString(), _this._positionToOffset(resource, position));
        }).then(function (entries) {
            if (!entries) {
                return;
            }
            var result = [];
            for (var _i = 0, entries_2 = entries; _i < entries_2.length; _i++) {
                var entry = entries_2[_i];
                var uri = uri_1.default.parse(entry.fileName);
                if (standaloneEditor_1.getModel(uri)) {
                    result.push({
                        uri: uri,
                        range: _this._textSpanToRange(uri, entry.textSpan)
                    });
                }
            }
            return result;
        }));
    };
    return ReferenceAdapter;
}(Adapter));
exports.ReferenceAdapter = ReferenceAdapter;
// --- outline ------
var OutlineAdapter = (function (_super) {
    __extends(OutlineAdapter, _super);
    function OutlineAdapter() {
        _super.apply(this, arguments);
    }
    OutlineAdapter.prototype.provideDocumentSymbols = function (model, token) {
        var _this = this;
        var resource = model.uri;
        return wireCancellationToken(token, this._worker(resource).then(function (worker) { return worker.getNavigationBarItems(resource.toString()); }).then(function (items) {
            if (!items) {
                return;
            }
            var convert = function (bucket, item, containerLabel) {
                var result = {
                    name: item.text,
                    kind: outlineTypeTable[item.kind] || modes_1.SymbolKind.Variable,
                    location: {
                        uri: resource,
                        range: _this._textSpanToRange(resource, item.spans[0])
                    },
                    containerName: containerLabel
                };
                if (item.childItems && item.childItems.length > 0) {
                    for (var _i = 0, _a = item.childItems; _i < _a.length; _i++) {
                        var child = _a[_i];
                        convert(bucket, child, result.name);
                    }
                }
                bucket.push(result);
            };
            var result = [];
            items.forEach(function (item) { return convert(result, item); });
            return result;
        }));
    };
    return OutlineAdapter;
}(Adapter));
exports.OutlineAdapter = OutlineAdapter;
var Kind = (function () {
    function Kind() {
    }
    Kind.unknown = '';
    Kind.keyword = 'keyword';
    Kind.script = 'script';
    Kind.module = 'module';
    Kind.class = 'class';
    Kind.interface = 'interface';
    Kind.type = 'type';
    Kind.enum = 'enum';
    Kind.variable = 'var';
    Kind.localVariable = 'local var';
    Kind.function = 'function';
    Kind.localFunction = 'local function';
    Kind.memberFunction = 'method';
    Kind.memberGetAccessor = 'getter';
    Kind.memberSetAccessor = 'setter';
    Kind.memberVariable = 'property';
    Kind.constructorImplementation = 'constructor';
    Kind.callSignature = 'call';
    Kind.indexSignature = 'index';
    Kind.constructSignature = 'construct';
    Kind.parameter = 'parameter';
    Kind.typeParameter = 'type parameter';
    Kind.primitiveType = 'primitive type';
    Kind.label = 'label';
    Kind.alias = 'alias';
    Kind.const = 'const';
    Kind.let = 'let';
    Kind.warning = 'warning';
    return Kind;
}());
exports.Kind = Kind;
var outlineTypeTable = Object.create(null);
outlineTypeTable[Kind.module] = modes_1.SymbolKind.Module;
outlineTypeTable[Kind.class] = modes_1.SymbolKind.Class;
outlineTypeTable[Kind.enum] = modes_1.SymbolKind.Enum;
outlineTypeTable[Kind.interface] = modes_1.SymbolKind.Interface;
outlineTypeTable[Kind.memberFunction] = modes_1.SymbolKind.Method;
outlineTypeTable[Kind.memberVariable] = modes_1.SymbolKind.Property;
outlineTypeTable[Kind.memberGetAccessor] = modes_1.SymbolKind.Property;
outlineTypeTable[Kind.memberSetAccessor] = modes_1.SymbolKind.Property;
outlineTypeTable[Kind.variable] = modes_1.SymbolKind.Variable;
outlineTypeTable[Kind.const] = modes_1.SymbolKind.Variable;
outlineTypeTable[Kind.localVariable] = modes_1.SymbolKind.Variable;
outlineTypeTable[Kind.variable] = modes_1.SymbolKind.Variable;
outlineTypeTable[Kind.function] = modes_1.SymbolKind.Function;
outlineTypeTable[Kind.localFunction] = modes_1.SymbolKind.Function;
// --- formatting ----
var FormatHelper = (function (_super) {
    __extends(FormatHelper, _super);
    function FormatHelper() {
        _super.apply(this, arguments);
    }
    FormatHelper._convertOptions = function (options) {
        return {
            ConvertTabsToSpaces: options.insertSpaces,
            TabSize: options.tabSize,
            IndentSize: options.tabSize,
            IndentStyle: ts.IndentStyle.Smart,
            NewLineCharacter: '\n',
            InsertSpaceAfterCommaDelimiter: true,
            InsertSpaceAfterSemicolonInForStatements: true,
            InsertSpaceBeforeAndAfterBinaryOperators: true,
            InsertSpaceAfterKeywordsInControlFlowStatements: true,
            InsertSpaceAfterFunctionKeywordForAnonymousFunctions: true,
            InsertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis: false,
            InsertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets: false,
            InsertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces: false,
            PlaceOpenBraceOnNewLineForControlBlocks: false,
            PlaceOpenBraceOnNewLineForFunctions: false
        };
    };
    FormatHelper.prototype._convertTextChanges = function (uri, change) {
        return {
            text: change.newText,
            range: this._textSpanToRange(uri, change.span)
        };
    };
    return FormatHelper;
}(Adapter));
exports.FormatHelper = FormatHelper;
var FormatAdapter = (function (_super) {
    __extends(FormatAdapter, _super);
    function FormatAdapter() {
        _super.apply(this, arguments);
    }
    FormatAdapter.prototype.provideDocumentRangeFormattingEdits = function (model, range, options, token) {
        var _this = this;
        var resource = model.uri;
        return wireCancellationToken(token, this._worker(resource).then(function (worker) {
            return worker.getFormattingEditsForRange(resource.toString(), _this._positionToOffset(resource, { lineNumber: range.startLineNumber, column: range.startColumn }), _this._positionToOffset(resource, { lineNumber: range.endLineNumber, column: range.endColumn }), FormatHelper._convertOptions(options));
        }).then(function (edits) {
            if (edits) {
                return edits.map(function (edit) { return _this._convertTextChanges(resource, edit); });
            }
        }));
    };
    return FormatAdapter;
}(FormatHelper));
exports.FormatAdapter = FormatAdapter;
var FormatOnTypeAdapter = (function (_super) {
    __extends(FormatOnTypeAdapter, _super);
    function FormatOnTypeAdapter() {
        _super.apply(this, arguments);
    }
    Object.defineProperty(FormatOnTypeAdapter.prototype, "autoFormatTriggerCharacters", {
        get: function () {
            return [';', '}', '\n'];
        },
        enumerable: true,
        configurable: true
    });
    FormatOnTypeAdapter.prototype.provideOnTypeFormattingEdits = function (model, position, ch, options, token) {
        var _this = this;
        var resource = model.uri;
        return wireCancellationToken(token, this._worker(resource).then(function (worker) {
            return worker.getFormattingEditsAfterKeystroke(resource.toString(), _this._positionToOffset(resource, position), ch, FormatHelper._convertOptions(options));
        }).then(function (edits) {
            if (edits) {
                return edits.map(function (edit) { return _this._convertTextChanges(resource, edit); });
            }
        }));
    };
    return FormatOnTypeAdapter;
}(FormatHelper));
exports.FormatOnTypeAdapter = FormatOnTypeAdapter;
/**
 * Hook a cancellation token to a WinJS Promise
 */
function wireCancellationToken(token, promise) {
    token.onCancellationRequested(function () { return promise.cancel(); });
    return promise;
}
