import { TPromise } from "vs/base/common/winjs.base";
import { IWorkerContext } from "vs/editor/common/services/editorSimpleWorker";
import ts = require('../lib/typescriptServices');
export declare class TypeScriptWorker implements ts.LanguageServiceHost {
    private _ctx;
    private _extraLibs;
    private _languageService;
    private _compilerOptions;
    constructor(ctx: IWorkerContext, createData: ICreateData);
    getCompilationSettings(): ts.CompilerOptions;
    getScriptFileNames(): string[];
    private _getModel(fileName);
    getScriptVersion(fileName: string): string;
    getScriptSnapshot(fileName: string): ts.IScriptSnapshot;
    getCurrentDirectory(): string;
    getDefaultLibFileName(options: ts.CompilerOptions): string;
    isDefaultLibFileName(fileName: string): boolean;
    getSyntacticDiagnostics(fileName: string): TPromise<ts.Diagnostic[]>;
    getSemanticDiagnostics(fileName: string): TPromise<ts.Diagnostic[]>;
    getCompilerOptionsDiagnostics(fileName: string): TPromise<ts.Diagnostic[]>;
    getCompletionsAtPosition(fileName: string, position: number): TPromise<ts.CompletionInfo>;
    getCompletionEntryDetails(fileName: string, position: number, entry: string): TPromise<ts.CompletionEntryDetails>;
    getSignatureHelpItems(fileName: string, position: number): TPromise<ts.SignatureHelpItems>;
    getQuickInfoAtPosition(fileName: string, position: number): TPromise<ts.QuickInfo>;
    getOccurrencesAtPosition(fileName: string, position: number): TPromise<ts.ReferenceEntry[]>;
    getDefinitionAtPosition(fileName: string, position: number): TPromise<ts.DefinitionInfo[]>;
    getReferencesAtPosition(fileName: string, position: number): TPromise<ts.ReferenceEntry[]>;
    getNavigationBarItems(fileName: string): TPromise<ts.NavigationBarItem[]>;
    getFormattingEditsForDocument(fileName: string, options: ts.FormatCodeOptions): TPromise<ts.TextChange[]>;
    getFormattingEditsForRange(fileName: string, start: number, end: number, options: ts.FormatCodeOptions): TPromise<ts.TextChange[]>;
    getFormattingEditsAfterKeystroke(fileName: string, postion: number, ch: string, options: ts.FormatCodeOptions): TPromise<ts.TextChange[]>;
    getEmitOutput(fileName: string): TPromise<ts.EmitOutput>;
}
export interface ICreateData {
    compilerOptions: ts.CompilerOptions;
    extraLibs: {
        [path: string]: string;
    };
}
export declare function create(ctx: IWorkerContext, createData: ICreateData): TypeScriptWorker;
