# Run this before committing changes to this file
# go generate sourcegraph.com/sourcegraph/sourcegraph/cmd/frontend/internal/graphqlbackend

schema {
    query: Query
    mutation: Mutation
}

type EmptyResponse {
    alwaysNil: String
}

interface Node {
    id: ID!
}

type ThreadLines {
    # HTML context lines before 'html'.
    #
    # It is sanitized already by the server, and thus is safe for rendering.
    htmlBefore(isLightTheme: Boolean!): String!
    # HTML lines that the user's selection was made on.
    #
    # It is sanitized already by the server, and thus is safe for rendering.
    html(isLightTheme: Boolean!): String!
    # HTML context lines after 'html'.
    #
    # It is sanitized already by the server, and thus is safe for rendering.
    htmlAfter(isLightTheme: Boolean!): String!
    # text context lines before 'text'.
    textBefore: String!
    # text lines that the user's selection was made on.
    text: String!
    # text context lines after 'text'.
    textAfter: String!
    # byte offset into textLines where user selection began
    #
    # In Go syntax, userSelection := text[rangeStart:rangeStart+rangeLength]
    textSelectionRangeStart: Int!
    # length in bytes of the user selection
    #
    # In Go syntax, userSelection := text[rangeStart:rangeStart+rangeLength]
    textSelectionRangeLength: Int!
}

# Literally the exact same thing as above, except it's an input type because
# GraphQL doesn't allow mixing input and output types.
input ThreadLinesInput {
    # HTML context lines before 'html'.
    htmlBefore: String!
    # HTML lines that the user's selection was made on.
    html: String!
    # HTML context lines after 'html'.
    htmlAfter: String!
    # text context lines before 'text'.
    textBefore: String!
    # text lines that the user's selection was made on.
    text: String!
    # text context lines after 'text'.
    textAfter: String!
    # byte offset into textLines where user selection began
    #
    # In Go syntax, userSelection := text[rangeStart:rangeStart+rangeLength]
    textSelectionRangeStart: Int!
    # length in bytes of the user selection
    #
    # In Go syntax, userSelection := text[rangeStart:rangeStart+rangeLength]
    textSelectionRangeLength: Int!
}

input CreateThreadInput {
    orgID: ID!
    canonicalRemoteID: String!
    cloneURL: String!
    repoRevisionPath: String!
    linesRevisionPath: String!
    repoRevision: String!
    linesRevision: String!
    branch: String
    startLine: Int!
    endLine: Int!
    startCharacter: Int!
    endCharacter: Int!
    rangeLength: Int!
    contents: String!
    lines: ThreadLinesInput
}

# A string containing valid JSON.
scalar JSONString

type Mutation {
    createThread(input: CreateThreadInput!): Thread!
    createThread2(input: CreateThreadInput!): Thread! @deprecated(reason: "use createThread")
    updateUser(username: String, displayName: String, avatarURL: String): User!
    # Update the settings for the currently authenticated user.
    updateUserSettings(lastKnownSettingsID: Int, contents: String!): Settings!
    # Update the global settings for all users.
    updateSiteSettings(lastKnownSettingsID: Int, contents: String!): Settings!
    updateThread(threadID: ID!, archived: Boolean): Thread!
    addCommentToThread(threadID: ID!, contents: String!): Thread!
    # This method is the same as addCommentToThread, the only difference is
    # that authentication is based on the secret ULID instead of the current
    # user.
    #
    # ðŸš¨ SECURITY: Every field of the return type here is accessible publicly
    # given a shared item URL.
    addCommentToThreadShared(ulid: String!, threadID: ID!, contents: String!): SharedItemThread!
    shareThread(threadID: ID!): String!
    shareComment(commentID: ID!): String!
    createOrg(name: String!, displayName: String!): Org!
    updateOrg(id: ID!, displayName: String): Org!
    updateOrgSettings(
        # The ID of the org whose settings should be updated.
        id: ID
        # TODO(sqs): orgID is deprecated. Use id instead.
        orgID: ID
        lastKnownSettingsID: Int
        contents: String!
    ): Settings!
    # Deletes an organization. Only site admins may perform this mutation.
    deleteOrganization(organization: ID!): EmptyResponse
    # Enables or disables a repository. A disabled repository is only
    # accessible to site admins and never appears in search results.
    #
    # Only site admins may perform this mutation.
    setRepositoryEnabled(repository: ID!, enabled: Boolean!): EmptyResponse
    # Enables or disables all site repositories.
    #
    # Only site admins may perform this mutation.
    setAllRepositoriesEnabled(enabled: Boolean!): EmptyResponse
    # Tests the connection to a mirror repository's original source repository. This is an
    # expensive and slow operation, so it should only be used for interactive diagnostics.
    #
    # Only site admins may perform this mutation.
    checkMirrorRepositoryConnection(
        # The mirror repository to check.
        repository: ID!
    ): CheckMirrorRepositoryConnectionResult!
    # Schedule the mirror repository to be updated from its original source repository. Updating
    # occurs automatically, so this should not normally be needed.
    #
    # Only site admins may perform this mutation.
    updateMirrorRepository(
        # The mirror repository to update.
        repository: ID!
    ): EmptyResponse!
    # Schedules all repositories to be updated from their original source repositories. Updating
    # occurs automatically, so this should not normally be needed.
    #
    # Only site admins may perform this mutation.
    updateAllMirrorRepositories: EmptyResponse!
    # Deletes a repository and all data associated with it, irreversibly.
    #
    # If the repository was added because it was present in the site configuration (directly,
    # or because it originated from a configured code host), then it will be re-added during
    # the next sync. If you intend to make the repository inaccessible to users and not searchable,
    # use setRepositoryEnabled to disable the repository instead of deleteRepository.
    #
    # Only site admins may perform this mutation.
    deleteRepository(repository: ID!): EmptyResponse
    # Creates a user account for a new user and generates a reset password link that the user
    # must visit to sign into the account. Only site admins may perform this mutation.
    createUserBySiteAdmin(username: String!, email: String!): CreateUserBySiteAdminResult!
    # Randomize a user's password so that they need to reset it before they can sign in again.
    # Only site admins may perform this mutation.
    randomizeUserPasswordBySiteAdmin(user: ID!): RandomizeUserPasswordBySiteAdminResult!
    # Adds an email address to the user's account. The email address will be marked as unverified until the user
    # has followed the email verification process.
    #
    # Only the user and site admins may perform this mutation.
    addUserEmail(user: ID!, email: String!): EmptyResponse!
    # Manually set the verification status of a user's email, without going through the normal verification process
    # (of clicking on a link in the email with a verification code).
    #
    # Only site admins may perform this mutation.
    setUserEmailVerified(user: ID!, email: String!, verified: Boolean!): EmptyResponse!
    # Deletes a user account. Only site admins may perform this mutation.
    deleteUser(user: ID!): EmptyResponse
    inviteUser(email: String!, orgID: ID!): InviteUserResult
    # Updates the current user's password. The oldPassword arg must match the user's current password.
    updatePassword(oldPassword: String!, newPassword: String!): EmptyResponse
    acceptUserInvite(inviteToken: String!): EmptyResponse
    removeUserFromOrg(userID: ID!, orgID: ID!): EmptyResponse
    # adds a phabricator repository to the Sourcegraph server.
    # example callsign: "MUX"
    # example uri: "github.com/gorilla/mux"
    addPhabricatorRepo(callsign: String!, uri: String!, url: String!): EmptyResponse
    logUserEvent(event: UserEvent!, userCookieID: String!): EmptyResponse
    # Sends a test notification for the saved search. Be careful: this will send a notifcation (email and other
    # types of notifications, if configured) to all subscribers of the saved search, which could be bothersome.
    #
    # Only subscribers to this saved search may perform this action.
    sendSavedSearchTestNotification(
        # ID of the saved search.
        id: ID!
    ): EmptyResponse
    # All mutations that update configuration settings are under this field.
    configurationMutation(input: ConfigurationMutationGroupInput!): ConfigurationMutation
    # Updates the site configuration. Returns whether or not a restart is
    # needed for the update to be applied
    updateSiteConfiguration(input: String!): Boolean!
    # Sets whether the user with the specified user ID is a site admin.
    #
    # ðŸš¨ SECURITY: Only trusted users should be given site admin permissions.
    # Site admins have full access to the server's site configuration and other
    # sensitive data, and they can perform destructive actions such as
    # restarting the site.
    setUserIsSiteAdmin(userID: ID!, siteAdmin: Boolean!): EmptyResponse
    # Reloads the site by restarting the server. This is not supported for all deployment
    # types. This may cause downtime.
    reloadSite: EmptyResponse
}

# Input for Mutation.configuration, which contains fields that all configuration
# mutations need.
input ConfigurationMutationGroupInput {
    # The subject whose configuration to mutate (org, user, etc.).
    subject: ID!
    # The ID of the last-known configuration known to the client, or null if
    # there is none. This field is used to prevent race conditions when there
    # are concurrent editors.
    lastID: Int
}

# Mutations that update configuration settings. These mutations are grouped
# together because they:
#
# - are all versioned to avoid race conditions with concurrent editors
# - all apply to a specific configuration subject
#
# Grouping them lets us extract those common parameters to the
# Mutation.configuration field.
type ConfigurationMutation {
    # Perform a raw configuration update. Use one of the other fields on this
    # type instead if possible.
    updateConfiguration(input: UpdateConfigurationInput!): UpdateConfigurationPayload
    # Create a saved query.
    createSavedQuery(
        description: String!
        query: String!
        showOnHomepage: Boolean = false
        notify: Boolean = false
        notifySlack: Boolean = false
        disableSubscriptionNotifications: Boolean = false
    ): SavedQuery!
    # Update the saved query with the given ID in the configuration.
    updateSavedQuery(
        id: ID!
        description: String
        query: String
        showOnHomepage: Boolean = false
        notify: Boolean = false
        notifySlack: Boolean = false
    ): SavedQuery!
    # Delete the saved query with the given ID in the configuration.
    deleteSavedQuery(id: ID!, disableSubscriptionNotifications: Boolean = false): EmptyResponse
}

# Input to ConfigurationMutation.updateConfiguration. If multiple fields are specified,
# then their respective operations are performed sequentially in the order in which the
# fields appear in this type.
input UpdateConfigurationInput {
    # The name of the property to update.
    #
    # Inserting into an existing array is not yet supported.
    property: String!
    # The new JSON-encoded value to insert. If the field's value is null, the property is
    # removed. (This is different from the field's value being the string "null".)
    value: JSONString
}

# The payload for ConfigurationMutation.updateConfiguration.
type UpdateConfigurationPayload {
    empty: EmptyResponse
}

# The result for Mutation.checkMirrorRepositoryConnection.
type CheckMirrorRepositoryConnectionResult {
    # The error message encountered during the update operation, if any. If null, then
    # the connection check succeeded.
    error: String
}

# The result for Mutation.createUserBySiteAdmin.
type CreateUserBySiteAdminResult {
    # The reset password URL that the new user must visit to sign into their account.
    resetPasswordURL: String!
}

# The result for Mutation.randomizeUserPasswordBySiteAdmin.
type RandomizeUserPasswordBySiteAdminResult {
    # The reset password URL that the user must visit to sign into their account again.
    resetPasswordURL: String!
}

type Query {
    root: Query! @deprecated
    node(id: ID!): Node
    repository(uri: String!): Repository
    phabricatorRepo(uri: String!): PhabricatorRepo
    currentUser: User
    # Look up a user by username.
    user(username: String!): User
    # Look up an organization by name.
    organization(name: String!): Org
    currentSiteSettings: Settings
    configuration: ConfigurationCascade!
    search(
        # The search query (such as "foo" or "repo:myrepo foo").
        query: String = ""
    ): Search
    searchScopes: [SearchScope!]!
    # All saved queries configured for the current user, merged from all configurations.
    savedQueries: [SavedQuery!]!
    # All repository groups for the current user, merged from all configurations.
    repoGroups: [RepoGroup!]!
    org(id: ID!): Org! @deprecated(reason: "use Query.node instead")
    sharedItem(ulid: String!): SharedItem
    # The current site.
    site: Site!
}

type Search {
    results: SearchResults!
    suggestions(first: Int): [SearchSuggestion!]!

    # A subset of results (excluding actual search results) which are heavily
    # cached and thus quicker to query. Useful for e.g. querying sparkline
    # data.
    stats: SearchResultsStats!
}

union SearchResult = FileMatch | CommitSearchResult | Repository

type SearchResults {
    results: [SearchResult!]!
    resultCount: Int!
    approximateResultCount: String!
    limitHit: Boolean!
    # Integers representing the sparkline for the search results.
    sparkline: [Int!]!
    # Repositories that were eligible to be searched.
    repositories: [String!]!
    # Repositories that were actually searched. Excludes repositories that would have been searched but were not
    # because a timeout or error occurred while performing the search, or because the result limit was already
    # reached.
    repositoriesSearched: [String!]!
    # Indexed repositories searched. This is a subset of repositoriesSearched.
    indexedRepositoriesSearched: [String!]!
    # Repositories that are busy cloning onto gitserver.
    cloning: [String!]!
    # Repositories or commits that do not exist.
    missing: [String!]!
    # Repositories or commits which we did not manage to search in time. Trying
    # again usually will work.
    timedout: [String!]!
    # An alert message that should be displayed before any results.
    alert: SearchAlert
    # The time it took to generate these results.
    elapsedMilliseconds: Int!
}

type SearchResultsStats {
    approximateResultCount: String!
    sparkline: [Int!]!
}

union SearchSuggestion = Repository | File | Symbol

type SearchScope {
    # A unique identifier for the search scope.
    # If set, a scoped search page is available at https://[sourcegraph-hostname]/search/scope/ID, where ID is this value.
    id: String
    name: String!
    value: String!
    # A description for this search scope, which will appear on the scoped search page.
    description: String
}

# A search-related alert message.
type SearchAlert {
    title: String!
    description: String
    # "Did you mean: ____" query proposals
    proposedQueries: [SearchQueryDescription!]
}

# A saved search query, defined in configuration.
type SavedQuery {
    # The unique ID of the saved query.
    id: ID!
    # The subject whose configuration this saved query was defined in.
    subject: ConfigurationSubject!
    # The unique key of this saved query (unique only among all other saved
    # queries of the same subject).
    key: String
    # The 0-indexed index of this saved query in the subject's configuration.
    index: Int!
    description: String!
    query: SearchQuery!
    showOnHomepage: Boolean!
    notify: Boolean!
    notifySlack: Boolean!
}

type SearchQueryDescription {
    description: String
    query: SearchQuery!
}

type SearchQuery {
    query: String!
}

# A group of repositories.
type RepoGroup {
    name: String!
    repositories: [String!]!
}

# A diff between two diffable Git objects.
type Diff {
    # The diff's repository.
    repository: Repository!
    # The revision range of the diff.
    range: GitRevisionRange!
}

# A search result that is a Git commit.
type CommitSearchResult {
    # The commit that matched the search query.
    commit: GitCommit!
    # The ref names of the commit.
    refs: [GitRef!]!
    # The refs by which this commit was reached.
    sourceRefs: [GitRef!]!
    # The matching portion of the commit message, if any.
    messagePreview: HighlightedString
    # The matching portion of the diff, if any.
    diffPreview: HighlightedString
}

# A search result that is a diff between two diffable Git objects.
type DiffSearchResult {
    # The diff that matched the search query.
    diff: Diff!
    # The matching portion of the diff.
    preview: HighlightedString!
}

# A string that has highlights (e.g, query matches).
type HighlightedString {
    # The full contents of the string.
    value: String!
    # Highlighted matches of the query in the preview string.
    highlights: [Highlight!]!
}

# A highlighted region in a string (e.g., matched by a query).
type Highlight {
    # The 1-indexed line number.
    line: Int!
    # The 1-indexed character on the line.
    character: Int!
    # The length of the highlight, in characters (on the same line).
    length: Int!
}

# Represents a shared item (either a shared code comment OR code snippet).
#
# ðŸš¨ SECURITY: Every field here is accessible publicly given a shared item URL.
# Do NOT use any non-primitive graphql type here unless it is also a SharedItem
# type.
type SharedItem {
    # who shared the item.
    author: SharedItemUser!
    public: Boolean!
    thread: SharedItemThread!
    # present only if the shared item was a specific comment.
    comment: SharedItemComment
}

# Like the User type, except with fields that should not be accessible with a
# secret URL removed.
#
# ðŸš¨ SECURITY: Every field here is accessible publicly given a shared item URL.
# Do NOT use any non-primitive graphql type here unless it is also a SharedItem
# type.
type SharedItemUser {
    displayName: String
    username: String!
    avatarURL: String
}

# Like the Thread type, except with fields that should not be accessible with a
# secret URL removed.
#
# ðŸš¨ SECURITY: Every field here is accessible publicly given a shared item URL.
# Do NOT use any non-primitive graphql type here unless it is also a SharedItem
# type.
type SharedItemThread {
    id: ID!
    databaseID: Int!
    repo: SharedItemOrgRepo!
    file: String!
    branch: String
    repoRevision: String!
    linesRevision: String!
    title: String!
    startLine: Int!
    endLine: Int!
    startCharacter: Int!
    endCharacter: Int!
    rangeLength: Int!
    createdAt: String!
    archivedAt: String
    author: SharedItemUser!
    lines: SharedItemThreadLines
    comments: [SharedItemComment!]!
}

# Like the OrgRepo type, except with fields that should not be accessible with
# a secret URL removed.
#
# ðŸš¨ SECURITY: Every field here is accessible publicly given a shared item URL.
# Do NOT use any non-primitive graphql type here unless it is also a SharedItem
# type.
type SharedItemOrgRepo {
    id: Int!
    remoteUri: String!
    # See OrgRepo.repository.
    repository: Repository
}

# Like the Comment type, except with fields that should not be accessible with a
# secret URL removed.
#
# ðŸš¨ SECURITY: Every field here is accessible publicly given a shared item URL.
# Do NOT use any non-primitive graphql type here unless it is also a SharedItem
# type.
type SharedItemComment {
    id: ID!
    databaseID: Int!
    title: String!
    contents: String!
    richHTML: String!
    createdAt: String!
    updatedAt: String!
    author: SharedItemUser!
}

# Exactly the same as the ThreadLines type, except it cannot have sensitive
# fields accidently added.
#
# ðŸš¨ SECURITY: Every field here is accessible publicly given a shared item URL.
# Do NOT use any non-primitive graphql type here unless it is also a SharedItem
# type.
type SharedItemThreadLines {
    htmlBefore(isLightTheme: Boolean!): String!
    html(isLightTheme: Boolean!): String!
    htmlAfter(isLightTheme: Boolean!): String!
    textBefore: String!
    text: String!
    textAfter: String!
    textSelectionRangeStart: Int!
    textSelectionRangeLength: Int!
}

type RefFields {
    refLocation: RefLocation
    uri: URI
}

type URI {
    host: String!
    fragment: String!
    path: String!
    query: String!
    scheme: String!
}

type RefLocation {
    startLineNumber: Int!
    startColumn: Int!
    endLineNumber: Int!
    endColumn: Int!
}

# A list of repositories.
type RepositoryConnection {
    # A list of repositories.
    nodes: [Repository!]!
    # The total count of repositories in the connection. This total count may be larger
    # than the number of nodes in this object when the result is paginated.
    #
    # In some cases, the total count can't be computed quickly; if so, it is null. Pass
    # precise: true to always compute total counts even if it takes a while.
    totalCount(precise: Boolean = false): Int
    # Pagination information.
    pageInfo: PageInfo!
}

# A repository is a Git source control repository that is mirrored from some origin code host.
type Repository implements Node {
    # The repository's unique ID.
    id: ID!
    # The repository's name, as a path with one or more components. It conventionally consists of
    # the repository's hostname and path (joined by "/"), minus any suffixes (such as ".git").
    #
    # Examples:
    #
    # - github.com/foo/bar
    # - my-code-host.example.com/myrepo
    # - myrepo
    uri: String!
    # The repository's description.
    description: String!
    # The primary programming language in the repository.
    language: String!
    # Whether the repository is enabled. A disabled repository should only be accessible to site admins.
    #
    # NOTE: Disabling a repository does not provide any additional security. This field is merely a
    # guideline to UI implementations.
    enabled: Boolean!
    # The date when this repository was created on Sourcegraph.
    createdAt: String!
    # The date when this repository's metadata was last updated on Sourcegraph.
    updatedAt: String
    # Returns information about the given commit in the repository.
    commit(rev: String!): GitCommit
    # Information and status related to mirroring, if this repository is a mirror of another repository (e.g., on
    # some code host). In this case, the remote source repository is external to Sourcegraph and the mirror is
    # maintained by the Sourcegraph site (not the other way around).
    mirrorInfo: MirrorRepositoryInfo!
    # Information about this repository from the external service that it originates from (such as GitHub, GitLab,
    # Phabricator, etc.).
    externalRepository: ExternalRepository
    # Whether the repository is currently being cloned.
    cloneInProgress: Boolean! @deprecated(reason: "use Repository.mirrorInfo.cloneInProgress")
    # The commit that was last indexed for cross-references, if any.
    lastIndexedRevOrLatest: GitCommit
    # The repository's default Git branch. If the repository is currently being cloned or is empty,
    # this field will be null.
    defaultBranch: String
    # Information about the text search index for this repository, or null if text search indexing
    # is not enabled or supported for this repository.
    textSearchIndex: RepositoryTextSearchIndex
    # The URL to this repository.
    url: String!
    # The URL specifying where to view the repository at an external location.
    externalURL: String
    # The type of code host that hosts this repository at its external url (e.g. GitHub, Phabricator).
    hostType: String
    # The repository's Git refs.
    gitRefs(
        # Returns the first n Git refs from the list.
        first: Int
        # Return Git refs whose names match the query.
        query: String
        # Return only Git refs of the given type.
        #
        # Known issue: It is only supported to retrieve Git branch and tag refs, not
        # other Git refs.
        type: GitRefType
    ): GitRefConnection!
    # The repository's Git branches.
    branches(
        # Returns the first n Git branches from the list.
        first: Int
        # Return Git branches whose names match the query.
        query: String
    ): GitRefConnection!
    # The repository's Git tags.
    tags(
        # Returns the first n Git tags from the list.
        first: Int
        # Return Git tags whose names match the query.
        query: String
    ): GitRefConnection!
    # The repository's symbols (e.g., functions, variables, types, classes, etc.) on the default branch.
    #
    # The result may be stale if a new commit was just pushed to this repository's default branch and it has not
    # yet been processed. Use Repository.commit.tree.symbols to retrieve symbols for a specific revision.
    symbols(
        # Returns the first n symbols from the list.
        first: Int
        # Return symbols matching the query.
        query: String
    ): SymbolConnection!
    # Packages defined in this repository, as returned by LSP workspace/xpackages requests to this repository's
    # language servers (running against a recent commit on its default branch).
    #
    # The result may be stale if a new commit was just pushed to this repository's default branch and it has not
    # yet been processed. Use Repository.commit.packages to retrieve packages for a specific revision.
    packages(
        # Returns the first n packages from the list.
        first: Int
        # Return packages matching the query.
        query: String
    ): PackageConnection!
    # Dependencies of this repository, as returned by LSP workspace/xreferences requests to this repository's
    # language servers (running against a recent commit on its default branch).
    #
    # The result may be stale if a new commit was just pushed to this repository's default branch and it has not
    # yet been processed. Use Repository.commit.dependencies to retrieve dependencies for a specific revision.
    dependencies(
        # Returns the first n dependencies from the list.
        first: Int
        # Return dependencies matching the query.
        query: String
    ): DependencyConnection!
    listTotalRefs: TotalRefList!
    # Link to another Sourcegraph instance location where this repository is located.
    redirectURL: String
    # Whether the viewer has admin privileges on this repository.
    viewerCanAdminister: Boolean!
}

# Information and status about the mirroring of a repository. In this case, the remote source repository
# is external to Sourcegraph and the mirror is maintained by the Sourcegraph site (not the other way
# around).
type MirrorRepositoryInfo {
    # The URL of the remote source repository.
    remoteURL: String!
    # Whether the clone of the repository has begun but not yet completed.
    cloneInProgress: Boolean!
    # Whether the repository has ever been successfully cloned.
    cloned: Boolean!
    # When the repository was last successfully updated from the remote source repository..
    updatedAt: String
}

# A repository on an external service (such as GitHub, GitLab, Phabricator, etc.).
type ExternalRepository {
    # The repository's ID on the external service.
    #
    # Example: For GitHub, this is the GitHub GraphQL API's node ID for the repository.
    id: String!

    # The type of external service where this repository resides.
    #
    # Example: "github", "gitlab", etc.
    serviceType: String!

    # The particular instance of the external service where this repository resides. Its value is
    # opaque but typically consists of the canonical base URL to the service.
    #
    # Example: For GitHub.com, this is "https://github.com/".
    serviceID: String!
}

# Information about a repository's text search index.
type RepositoryTextSearchIndex {
    # The indexed repository.
    repository: Repository!
    # The status of the text search index, if available.
    status: RepositoryTextSearchIndexStatus
    # Git refs in the repository that are configured for text search indexing.
    refs: [RepositoryTextSearchIndexedRef!]!
}

# The status of a repository's text search index.
type RepositoryTextSearchIndexStatus {
    # The date that the index was last updated.
    updatedAt: String!
    # The byte size of the original content.
    contentByteSize: Int!
    # The number of files in the original content.
    contentFilesCount: Int!
    # The byte size of the index.
    indexByteSize: Int!
    # The number of index shards.
    indexShardsCount: Int!
}

# A Git ref (usually a branch) in a repository that is configured to be indexed for text search.
type RepositoryTextSearchIndexedRef {
    # The Git ref (usually a branch) that is configured to be indexed for text search. To find the specific commit
    # SHA that was indexed, use RepositoryTextSearchIndexedRef.indexedCommit; this field's ref target resolves to
    # the current target, not the target at the time of indexing.
    ref: GitRef!
    # Whether a text search index exists for this ref.
    indexed: Boolean!
    # Whether the text search index is of the current commit for the Git ref. If false, the index is stale.
    current: Boolean!
    # The indexed Git commit (which may differ from the ref's current target if the index is out of date). If
    # indexed is false, this field's value is null.
    indexedCommit: GitObject
}

# A list of Git refs.
type GitRefConnection {
    # A list of Git refs.
    nodes: [GitRef!]!
    # The total count of Git refs in the connection. This total count may be larger
    # than the number of nodes in this object when the result is paginated.
    totalCount: Int!
}

# A code symbol (e.g., a function, variable, type, class, etc.).
#
# It is derived from symbols as defined in the Language Server Protocol (see
# https://microsoft.github.io/language-server-protocol/specification#workspace_symbol).
type Symbol {
    # The name of the symbol.
    name: String!
    # The name of the symbol that contains this symbol, if any. This field's value is not guaranteed to be
    # structured in such a way that callers can infer a hierarchy of symbols.
    containerName: String
    # The kind of the symbol.
    kind: SymbolKind!
    # The programming language of the symbol.
    language: String!
    # The location where this symbol is defined.
    location: Location!
    # The URL of this symbol.
    url: String!
}

# A location inside a resource (in a repository at a specific commit).
type Location {
    # The file that this location refers to.
    resource: TreeEntry!
    # The range inside the file that this location refers to.
    range: Range
    # The URL to this location.
    url: String!
}

# A range inside a file. The start position is inclusive, and the end position is exclusive.
type Range {
    # The start position of the range (inclusive).
    start: Position!
    # The end position of the range (exclusive).
    end: Position!
}

# A zero-based position inside a file.
type Position {
    # The line number (zero-based) of the position.
    line: Int!
    # The character offset (zero-based) in the line of the position.
    character: Int!
}

# All possible kinds of symbols. This set matches that of the Language Server Protocol
# (https://microsoft.github.io/language-server-protocol/specification#workspace_symbol).
enum SymbolKind {
    UNKNOWN
    FILE
    MODULE
    NAMESPACE
    PACKAGE
    CLASS
    METHOD
    PROPERTY
    FIELD
    CONSTRUCTOR
    ENUM
    INTERFACE
    FUNCTION
    VARIABLE
    CONSTANT
    STRING
    NUMBER
    BOOLEAN
    ARRAY
    OBJECT
    KEY
    NULL
    ENUMMEMBER
    STRUCT
    EVENT
    OPERATOR
    TYPEPARAMETER
}

# A list of symbols.
type SymbolConnection {
    # A list of symbols.
    nodes: [Symbol!]!
    # Pagination information.
    pageInfo: PageInfo!
}

# A Git object ID (SHA-1 hash, 40 hexadecimal characters).
scalar GitObjectID

# A Git ref.
type GitRef implements Node {
    # The globally addressable ID for the Git ref.
    id: ID!
    # The full ref name (e.g., "refs/heads/mybranch" or "refs/tags/mytag").
    name: String!
    # An unambiguous short name for the ref.
    abbrevName: String!
    # The display name of the ref. For branches ("refs/heads/foo"), this is the branch
    # name ("foo").
    #
    # As a special case, for GitHub pull request refs of the form refs/pull/NUMBER/head,
    # this is "#NUMBER".
    displayName: String!
    # The prefix of the ref, either "", "refs/", "refs/heads/", "refs/pull/", or
    # "refs/tags/". This prefix is always a prefix of the ref's name.
    prefix: String!
    # The type of this Git ref.
    type: GitRefType!
    # The object that the ref points to.
    target: GitObject!
    # The associated repository.
    repository: Repository!
}

# ALl possible types of Git refs.
enum GitRefType {
    # A Git branch (in refs/heads/).
    GIT_BRANCH
    # A Git tag (in refs/tags/).
    GIT_TAG
    # A Git ref that is neither a branch nor tag.
    GIT_REF_OTHER
}

# A Git object.
type GitObject {
    # This object's OID.
    oid: GitObjectID!
    # The abbreviated form of this object's OID.
    abbreviatedOID: String!
}

# A Git revspec expression that (possibly) evaluates to a Git revision.
type GitRevSpecExpr {
    expr: String!
}

# A Git revspec.
union GitRevSpec = GitRef | GitRevSpecExpr | GitObject

# A Git revision range of the form "base..head" or "base...head". Other revision
# range formats are not supported.
type GitRevisionRange {
    # The Git revision range expression of the form "base..head" or "base...head".
    expr: String!
    # The base (left-hand side) of the range.
    base: GitRevSpec!
    # The base's revspec as an expression.
    baseRevSpec: GitRevSpecExpr!
    # The head (right-hand side) of the range.
    head: GitRevSpec!
    # The head's revspec as an expression.
    headRevSpec: GitRevSpecExpr!
    # The merge-base of the base and head revisions, if this is a "base...head"
    # revision range. If this is a "base..head" revision range, then this field is null.
    mergeBase: GitObject
}

type PhabricatorRepo {
    # the canonical repo path, like 'github.com/gorilla/mux'
    uri: String!
    # the unique Phabricator identifier for the repo, like 'MUX'
    callsign: String!
    # the URL to the phabricator instance, e.g. http://phabricator.sgdev.org
    url: String!
}

type TotalRefList {
    repositories: [Repository!]!
    total: Int!
}

# Pagination information. See https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo.
type PageInfo {
    # Whether there is a next page of nodes in the connection.
    hasNextPage: Boolean!
}

# A list of Git commits.
type GitCommitConnection {
    # A list of Git commits.
    nodes: [GitCommit!]!
    # Pagination information.
    pageInfo: PageInfo!
}

# A Git commit.
type GitCommit implements Node {
    # The globally addressable ID for this commit.
    id: ID!
    # The repository that contains this commit.
    repository: Repository!
    # This commit's Git object ID (OID), a 40-character SHA-1 hash.
    oid: GitObjectID!
    # The abbreviated form of this commit's OID.
    abbreviatedOID: String!
    # This commit's author.
    author: Signature!
    # This commit's committer, if any.
    committer: Signature
    # The full commit message.
    message: String!
    # The first line of the commit message.
    subject: String!
    # Lists the Git tree as of this commit.
    tree(path: String = "", recursive: Boolean = false): Tree
    # Retrieves a Git blob (file) as of this commit.
    file(path: String!): File
    # Lists the programming languages present in the tree at this commit.
    languages: [String!]!
    # The log of commits consisting of this commit and its ancestors.
    ancestors(
        # Returns the first n commits from the list.
        first: Int
        # Return commits that match the query.
        query: String
    ): GitCommitConnection!
    # Symbols defined as of this commit. (All symbols, not just symbols that were newly defined in this commit.)
    symbols(
        # Returns the first n symbols from the list.
        first: Int
        # Return symbols matching the query.
        query: String
    ): SymbolConnection!
    # Packages defined in this repository as of this commit, as returned by LSP workspace/xpackages
    # requests to this repository's language servers.
    packages(
        # Returns the first n packages from the list.
        first: Int
        # Return packages matching the query.
        query: String
    ): PackageConnection!
    # Dependencies of this repository as of this commit, as returned by LSP workspace/xreferences
    # requests to this repository's language servers.
    dependencies(
        # Returns the first n dependencies from the list.
        first: Int
        # Return dependencies matching the query.
        query: String
    ): DependencyConnection!
}

type Signature {
    person: Person
    date: String!
}

type Person {
    name: String!
    email: String!
    # The name if set; otherwise the email username.
    displayName: String!
    gravatarHash: String!
    avatarURL: String!
}

type Tree {
    directories: [Directory]!
    files: [File]!
    # Consists of directories plus files.
    entries: [TreeEntry!]!
}

# A file, directory, or other tree entry.
interface TreeEntry {
    # The full path (relative to the repository root) of this tree entry.
    path: String!
    # The base name (i.e., file name only) of this tree entry.
    name: String!
    # Whether this tree entry is a directory.
    isDirectory: Boolean!
    # The repository containing this tree entry.
    repository: Repository!
    # The list of Git commits that touched this tree entry.
    commits: [GitCommit!]!
    # The URL to this tree entry.
    url: String!
    # Symbols defined in this file or directory.
    symbols(
        # Returns the first n symbols from the list.
        first: Int
        # Return symbols matching the query.
        query: String
    ): SymbolConnection!
}

type Directory implements TreeEntry {
    # The full path (relative to the repository root) of this directory.
    path: String!
    # The base name (i.e., file name only) of this directory.
    name: String!
    # True because this is a directory. (The value differs for other TreeEntry interface implementations, such as
    # File.)
    isDirectory: Boolean!
    # The repository containing this directory.
    repository: Repository!
    # The list of Git commits that touched this directory.
    commits: [GitCommit!]!
    # The URL to this directory.
    url: String!
    tree: Tree!
    # Symbols defined in this directory.
    symbols(
        # Returns the first n symbols from the list.
        first: Int
        # Return symbols matching the query.
        query: String
    ): SymbolConnection!
}

type HighlightedFile {
    aborted: Boolean!
    html: String!
}

type File implements TreeEntry {
    # The full path (relative to the repository root) of this file.
    path: String!
    # The base name (i.e., file name only) of this file.
    name: String!
    # False because this is a file, not a directory.
    isDirectory: Boolean!
    # The repository containing this file.
    repository: Repository!
    # The list of Git commits that touched this file.
    commits: [GitCommit!]!
    # The URL to this file.
    url: String!

    # The content of this file.
    content: String!

    # The file rendered as rich HTML, or an empty string if it is not a supported
    # rich file type.
    #
    # This HTML string is already escaped and thus is always safe to render.
    richHTML: String!

    # URL specifying where to view the file at an external location.
    externalURL: String
    binary: Boolean!
    highlight(disableTimeout: Boolean!, isLightTheme: Boolean!): HighlightedFile!
    blame(startLine: Int!, endLine: Int!): [Hunk!]!
    dependencyReferences(Language: String!, Line: Int!, Character: Int!): DependencyReferences!
    blameRaw(startLine: Int!, endLine: Int!): String!

    # Symbols defined in this file.
    symbols(
        # Returns the first n symbols from the list.
        first: Int
        # Return symbols matching the query.
        query: String
    ): SymbolConnection!
}

type FileMatch {
    resource: String!
    # The symbols found in this file that match the query
    symbols: [Symbol!]!
    lineMatches: [LineMatch!]!
    limitHit: Boolean!
}

type LineMatch {
    preview: String!
    lineNumber: Int!
    offsetAndLengths: [[Int!]!]!
    limitHit: Boolean!
}

type DependencyReferences {
    dependencyReferenceData: DependencyReferencesData!
    repoData: RepoDataMap!
}

type RepoDataMap {
    repos: [Repository!]!
    repoIds: [Int!]!
}

type DependencyReferencesData {
    references: [DependencyReference!]!
    location: DepLocation!
}

type DependencyReference {
    dependencyData: String!
    repoId: Int!
    hints: String!
}

type DepLocation {
    location: String!
    symbol: String!
}

type Hunk {
    startLine: Int!
    endLine: Int!
    startByte: Int!
    endByte: Int!
    rev: String!
    author: Signature
    message: String!
}

# A list of users.
type UserConnection {
    # A list of users.
    nodes: [User!]!
    # The total count of users in the connection. This total count may be larger
    # than the number of nodes in this object when the result is paginated.
    totalCount: Int!
}

type User implements Node, ConfigurationSubject {
    # The unique ID for the user.
    id: ID!
    # The user's username.
    username: String!
    authID: String! @deprecated(reason: "renamed to externalID - use that instead")
    auth0ID: String! @deprecated(reason: "use externalID instead")
    # The external authentication system's ID for this user, if applicable. For example, if this user is
    # authenticated via an SSO provider (using OpenID, SAML, etc.), then this is the ID from that provider.
    #
    # Only the user and site admins can access this field.
    externalID: String
    # The unique numeric ID for the user.
    sourcegraphID: Int! @deprecated(reason: "use id instead")
    # The user's primary email address.
    #
    # Only the user and site admins can access this field.
    email: String! @deprecated(reason: "use emails instead")
    # The display name chosen by the user.
    displayName: String
    # The URL of the user's avatar image.
    avatarURL: String
    # The date when the user account was created on Sourcegraph.
    createdAt: String!
    # The date when the user account was last updated on Sourcegraph.
    updatedAt: String
    # Whether the user is a site admin.
    #
    # Only the user and site admins can access this field.
    siteAdmin: Boolean!
    # The latest settings for the user.
    #
    # Only the user and site admins can access this field.
    latestSettings: Settings
    # The organizations that this user is a member of.
    orgs: [Org!]!
    # This user's organization memberships.
    orgMemberships: [OrgMember!]!
    # The internal tags associated with the user. This is an internal site management feature.
    #
    # Only the user and site admins can access this field.
    tags: [UserTag!]!
    # The user's usage activity on Sourcegraph.
    #
    # Only the user and site admins can access this field.
    activity: UserActivity!
    # The user's email addresses.
    #
    # Only the user and site admins can access this field.
    emails: [UserEmail!]!
    # Whether the viewer has admin privileges on this user. The user had admin privileges on their own user, and
    # site admins have admin privileges on all users.
    viewerCanAdminister: Boolean!
}

# A user's email address.
type UserEmail {
    # The email address.
    email: String!
    # Whether the email address has been verified by the user.
    verified: Boolean!
    # Whether the email address is pending verification.
    verificationPending: Boolean!
    # The user associated with this email address.
    user: User!
    # Whether the viewer has privileges to manually mark this email address as verified (without the user going
    # through the normal verification process). Only site admins have this privilege.
    viewerCanManuallyVerify: Boolean!
}

# A list of organizations.
type OrgConnection {
    # A list of organizations.
    nodes: [Org!]!
    # The total count of organizations in the connection. This total count may be larger
    # than the number of nodes in this object when the result is paginated.
    totalCount: Int!
}

# An organization, which is a group of users.
type Org implements Node, ConfigurationSubject {
    # The unique ID for the organization.
    id: ID!
    # The numeric unique ID for the organization.
    orgID: Int! @deprecated(reason: "use id instead")
    # The organization's name. This is unique among all organizations on this Sourcegraph site.
    name: String!
    # The organization's chosen display name.
    displayName: String
    # The date when the organization was created, in RFC 3339 format.
    createdAt: String!
    # The organization's members.
    members: [OrgMember!]!
    # The latest settings for the organization.
    #
    # Only organization members and site admins can access this field.
    latestSettings: Settings
    # The repositories associated with the organization. This is an experimental feature.
    #
    # Only organization members and site admins can access this field.
    repos: [OrgRepo!]!
    # Look up a repository associated with the organization. This is an experimental feature.
    #
    # Only organization members and site admins can access this field.
    repo(canonicalRemoteID: String!): OrgRepo
    # Threads associated with the organization. This is an experimental feature.
    #
    # Only organization members and site admins can access this field.
    threads(
        # TODO(nick): remove repoCanonicalRemoteID
        repoCanonicalRemoteID: String
        canonicalRemoteIDs: [String!]
        branch: String
        file: String
        limit: Int
    ): ThreadConnection!
    # The internal tags associated with the organization. This is an internal site management feature.
    #
    # Only organization members and site admins can access this field.
    tags: [OrgTag!]!
    # Whether the viewer has admin privileges on this organization. Currently, all of an organization's members
    # have admin privileges on the organization.
    viewerCanAdminister: Boolean!
}

type OrgMember {
    id: Int!
    org: Org!
    user: User!
    createdAt: String!
    updatedAt: String!
}

type InviteUserResult {
    # The URL that the invited user can visit to accept the invitation.
    acceptInviteURL: String!
}

type OrgRepo {
    id: Int!
    org: Org!
    canonicalRemoteID: String!
    createdAt: String!
    updatedAt: String!
    threads(file: String, branch: String, limit: Int): ThreadConnection!
    # The repository that this refers to, if the repository is available on the server. This is null
    # for repositories that only exist for users locally (that they use with the editor) but that
    # are not on the server.
    repository: Repository
}

# A list of threads.
type ThreadConnection {
    # A list of threads.
    nodes: [Thread!]!
    # The total count of threads in the connection. This total count may be larger
    # than the number of nodes in this object when the result is paginated.
    totalCount: Int!
}

# A site is an installation of Sourcegraph that consists of one or more
# servers that share the same configuration and database.
#
# The site is a singleton; the API only ever returns the single global site.
type Site implements ConfigurationSubject {
    # The site's opaque GraphQL ID. This is NOT the "site ID" as it is referred to elsewhere;
    # use the siteID field for that. (GraphQL node types conventionally have an id field of type
    # ID! that globally identifies the node.)
    id: ID!
    # The site ID.
    siteID: String!
    # The site's configuration. Only visible to site admins.
    configuration: SiteConfiguration!
    # The site's latest site-wide settings (which are the lowest-precedence
    # in the configuration cascade for a user).
    latestSettings: Settings
    # Whether the viewer can reload the site (with the reloadSite mutation).
    canReloadSite: Boolean!
    # List all repositories.
    repositories(
        # Returns the first n repositories from the list.
        first: Int
        # Return repositories whose names match the query.
        query: String
        # Include enabled repositories.
        enabled: Boolean = true
        # Include disabled repositories.
        disabled: Boolean = false
        # Include cloned repositories.
        cloned: Boolean = true
        # Include repositories that are currently being cloned.
        cloneInProgress: Boolean = true
        # Include repositories that are not yet cloned and for which cloning is not in progress.
        notCloned: Boolean = true
        # Include repositories that have a text search index.
        indexed: Boolean = true
        # Include repositories that do not have a text search index.
        notIndexed: Boolean = true
    ): RepositoryConnection!
    # List all users.
    users(
        # Returns the first n users from the list.
        first: Int
        # Return users whose usernames or display names match the query.
        query: String
    ): UserConnection!
    # List all organizations.
    orgs(
        # Returns the first n organizations from the list.
        first: Int
        # Return organizations whose names or display names match the query.
        query: String
    ): OrgConnection!
    # List all threads.
    threads(
        # Returns the first n threads from the list.
        first: Int
    ): ThreadConnection!
    # The build version of the Sourcegraph Server software that is running on this site (of the form
    # NNNNN_YYYY-MM-DD_XXXXX, like 12345_2018-01-01_abcdef).
    buildVersion: String!
    # The product version of the Sourcegraph Server software that is running on this site (in semver
    # form, like 1.2.3).
    productVersion: String!
    # Information about software updates for version of Sourcegraph Server that
    # this site is running.
    updateCheck: UpdateCheck!
    # Samples of recent telemetry payloads, visible to the site administrator only.
    telemetrySamples: [String!]!
    # Whether the site needs to be configured to add repositories.
    needsRepositoryConfiguration: Boolean!
    # Whether the site has zero access-enabled repositories.
    noRepositoriesEnabled: Boolean!
    # Whether the site has code intelligence. This field will be expanded in the future to describe
    # more about the code intelligence available (languages supported, etc.). It is subject to
    # change without notice.
    hasCodeIntelligence: Boolean!
    # Whether the site is using an external authentication service such as oidc or saml.
    externalAuthEnabled: Boolean!
    # Whether we want to show built-in searches on the saved searches page
    disableBuiltInSearches: Boolean!
}

# The configuration for a site.
type SiteConfiguration {
    # The effective configuration JSON. This will lag behind the pendingContents
    # if the site configuration was updated but the server has not yet restarted.
    effectiveContents: String!
    # The pending configuration JSON, which will become effective after the next
    # server restart. This is set if the site configuration has been updated since
    # the server started.
    pendingContents: String
    # Validation errors on the configuration JSON (pendingContents if it exists, otherwise
    # effectiveContents). These are different from the JSON Schema validation errors;
    # they are errors from validations that can't be expressed in the JSON Schema.
    extraValidationErrors: [String!]!
    # Whether the viewer can update the site configuration (using the
    # updateSiteConfiguration mutation).
    canUpdate: Boolean!
    # The source of the configuration as a human-readable description,
    # referring to either the on-disk file path or the SOURCEGRAPH_CONFIG
    # env var.
    source: String!
}

# Information about software updates for Sourcegraph Server.
type UpdateCheck {
    # Whether an update check is currently in progress.
    pending: Boolean!
    # When the last update check was completed, or null if no update check has
    # been completed (or performed) yet.
    checkedAt: String
    # If an error occurred during the last update check, this message describes
    # the error.
    errorMessage: String
    # If an update is available, the version string of the updated version.
    updateVersionAvailable: String
}

# ConfigurationSubject is something that can have configuration.
interface ConfigurationSubject {
    id: ID!
    latestSettings: Settings
}

# The configurations for all of the relevant configuration subjects, plus the merged
# configuration.
type ConfigurationCascade {
    # The default settings, which are applied first and the lowest priority behind
    # all configuration subjects' settings.
    defaults: Configuration
    # The configurations for all of the subjects that are applied for the currently
    # authenticated user. For example, a user in 2 orgs would have the following
    # configuration subjects: org 1, org 2, and the user.
    subjects: [ConfigurationSubject!]!
    # The effective configuration, merged from all of the subjects.
    merged: Configuration!
}

# Settings is a version of a configuration settings file.
type Settings {
    id: Int!
    configuration: Configuration!
    # The subject that these settings are for.
    subject: ConfigurationSubject!
    author: User!
    createdAt: String!
    contents: String! @deprecated(reason: "use configuration.contents instead")
}

# Configuration contains settings from (possibly) multiple settings files.
type Configuration {
    # The raw JSON contents, encoded as a string.
    contents: String!
    # Error and warning messages about the configuration.
    messages: [String!]!
}

# Thread is a comment thread.
type Thread implements Node {
    # The unique ID.
    id: ID!
    # The primary key from the database.
    databaseID: Int!
    repo: OrgRepo!
    file: String! @deprecated(reason: "use repoRevisionPath (or linesRevisionPath)")

    # The relative path of the resource in the repository at repoRevision.
    repoRevisionPath: String!

    # The relative path of the resource in the repository at linesRevision.
    linesRevisionPath: String!

    branch: String
    # The commit ID of the repository at the time the thread was created.
    repoRevision: String!
    # The commit ID from Git blame, at the time the thread was created.
    #
    # The selection may be multiple lines, and the commit id is the
    # topologically most recent commit of the blame commit ids for the selected
    # lines.
    #
    # For example, if you have a selection of lines that have blame revisions
    # (a, c, e, f), and assuming a history like::
    #
    # 	a <- b <- c <- d <- e <- f <- g <- h <- HEAD
    #
    # Then lines_revision would be f, because all other blame revisions a, c, e
    # are reachable from f.
    #
    # Or in lay terms: "What is the oldest revision that I could checkout and
    # still see the exact lines of code that I selected?".
    linesRevision: String!
    title: String!
    startLine: Int!
    endLine: Int!
    startCharacter: Int!
    endCharacter: Int!
    rangeLength: Int!
    createdAt: String!
    archivedAt: String
    author: User!
    lines: ThreadLines
    comments: [Comment!]!
}

# Comment is a comment in a thread.
type Comment {
    # The unique ID.
    id: ID!
    # The primary key from the database.
    databaseID: Int!
    title: String!
    contents: String!

    # The file rendered as rich HTML, or an empty string if it is not a supported
    # rich file type.
    #
    # This HTML string is already escaped and thus is always safe to render.
    richHTML: String!

    createdAt: String!
    updatedAt: String!
    author: User!
}

# A list of packages.
type PackageConnection {
    # A list of packages.
    nodes: [Package!]!
    # The total count of packages in the connection. This total count may be larger
    # than the number of nodes in this object when the result is paginated.
    totalCount: Int!
    # Pagination information.
    pageInfo: PageInfo!
}

# A package represents a grouping of code that is returned by a language server in response to a
# workspace/xpackages request.
#
# See https://github.com/sourcegraph/language-server-protocol/blob/master/extension-workspace-references.md.
type Package implements Node {
    # The ID of the package.
    id: ID!
    # The repository commit that defines the package.
    definingCommit: GitCommit!
    # The programming language used to define the package.
    language: String!
    # The package descriptor, as returned by the language server's workspace/xpackages LSP method. The attribute
    # names and values are defined by each language server and should generally be considered opaque.
    #
    # The ordering is not meaningful.
    #
    # See https://github.com/sourcegraph/language-server-protocol/blob/master/extension-workspace-references.md.
    data: [KeyValue!]!
    # This package's dependencies, as returned by the language server's workspace/xpackages LSP method.
    #
    # The ordering is not meaningful.
    #
    # See https://github.com/sourcegraph/language-server-protocol/blob/master/extension-workspace-references.md.
    dependencies: [Dependency!]!
    # The list of references (from only this repository at the definingCommit) to definitions in this package.
    #
    # If this operation is not supported (by the language server), this field's value will be null.
    internalReferences: ReferenceConnection
    # The list of references (from other repositories' packages) to definitions in this package. Currently this
    # lists packages that refer to this package, NOT individual call/reference sites within those referencing
    # packages (unlike internalReferences, which does list individual call sites). If this operation is not
    # supported (by the language server), this field's value will be null.
    #
    # EXPERIMENTAL: This field is experimental. It is subject to change. Please report any issues you see, and
    # contact support for help.
    externalReferences: ReferenceConnection
}

# A list of dependencies.
type DependencyConnection {
    # A list of dependencies.
    nodes: [Dependency!]!
    # The total count of dependencies in the connection. This total count may be larger
    # than the number of nodes in this object when the result is paginated.
    totalCount: Int!
    # Pagination information.
    pageInfo: PageInfo!
}

# A dependency represents a dependency relationship between two units of code. It is derived from data returned by
# a language server in response to a workspace/xreferences request.
#
# See https://github.com/sourcegraph/language-server-protocol/blob/master/extension-workspace-references.md.
type Dependency implements Node {
    # The ID of the dependency.
    id: ID!
    # The repository commit that depends on the unit of code described by this resolver's other fields.
    dependingCommit: GitCommit!
    # The programming language of the dependency.
    language: String!
    # The dependency attributes, as returned by the language server's workspace/xdependencies LSP method. The
    # attribute names and values are defined by each language server and should generally be considered opaque.
    # They generally overlap with the package descriptor's fields in the Package type.
    #
    # The ordering is not meaningful.
    #
    # See https://github.com/sourcegraph/language-server-protocol/blob/master/extension-workspace-references.md.
    data: [KeyValue!]!
    # Hints that can be passed to workspace/xreferences to speed up retrieval of references to this dependency.
    # These hints are returned by the language server's workspace/xdependencies LSP method. The attribute names and
    # values are defined by each language server and should generally be considered opaque.
    #
    # The ordering is not meaningful.
    #
    # See https://github.com/sourcegraph/language-server-protocol/blob/master/extension-workspace-references.md.
    hints: [KeyValue!]!
    # The list of references (in the depending commit's code files) to definitions in this dependency.
    #
    # If this operation is not supported (by the language server), this field's value will be null.
    #
    # EXPERIMENTAL: This field is experimental. It is subject to change. Please report any issues you see, and
    # contact support for help.
    references: ReferenceConnection
}

# An opaque value of any type.
scalar OpaqueValue

# A key-value pair.
type KeyValue {
    # The key.
    key: String!
    # The value, which can be of any type.
    value: OpaqueValue!
}

# A list of code references (e.g., function calls, variable references, package import statements, etc.), as
# returned by language server(s) over LSP.
#
# NOTE: The actual references (which would be expected to be available in the "nodes" field) are not exposed. This
# is because currently there are no API consumers that need them. In the future, they will be available here, but
# in the meantime, consumers can provide the searchQuery to the Query.search GraphQL resolver to retrieve
# references.
type ReferenceConnection {
    # The total count of references in this connection. If an exact count is not available, then this field's value
    # will be null; consult the approximateCount field instead.
    totalCount: Int
    # The approximate count of references in this connection. If counting is not supported, then this field's value
    # will be null.
    approximateCount: ApproximateCount
    # The search query (for Sourcegraph search) that matches references in this connection.
    #
    # The query string does not include any repo:REPO@REV tokens (even if this connection would seem to warrant
    # the inclusion of such tokens). Therefore, clients must add those tokens if they wish to constrain the search
    # to only certain repositories and revisions. (This is so that clients can use the nice revision instead of the
    # 40-character Git commit SHA if desired.)
    queryString: String!
    # The symbol descriptor query to pass to language servers in the LSP workspace/xreferences request to retrieve
    # all references in this connection. This is derived from the attributes data of this connection's subject
    # (e.g., Package.data or Dependency.data). The attribute names and values are defined by each language server
    # and should generally be considered opaque.
    #
    # The ordering is not meaningful.
    #
    # See https://github.com/sourcegraph/language-server-protocol/blob/master/extension-workspace-references.md.
    symbolDescriptor: [KeyValue!]!
}

# An approximate count. To display this to the user, use ApproximateCount.label as the number and use
# ApproximateCount.count to determine whether to pluralize the noun (if any) adjacent to the label.
type ApproximateCount {
    # The count, which may be inexact. This number is always the prefix of the label field.
    count: Int!
    # Whether the count finished and is exact.
    exact: Boolean!
    # A textual label that approximates the count (e.g., "99+" if the counting is cut off at 99).
    label: String!
}

type UserTag {
    id: Int!
    name: String!
}

type OrgTag {
    id: Int!
    name: String!
}

# UserActivity describes a user's activity on the site.
type UserActivity {
    # The number of search queries that the user has performed.
    searchQueries: Int!
    # The number of page views that the user has performed.
    pageViews: Int!
    # The last time the user viewed a page.
    lastPageViewTime: String!
}

enum UserEvent {
    PAGEVIEW
    SEARCHQUERY
}

type DeploymentConfiguration {
    email: String
    siteID: String
}
