// +build generate

package main

import (
	"fmt"
	"io/ioutil"
	"log"
	"path/filepath"

	gql "github.com/mattdamon108/gqlmerge/lib"
	"github.com/sourcegraph/sourcegraph/cmd/frontend/internal/graphqlfile"
)

func main() {
	fs, err := filepath.Glob("*.graphql")
	if err != nil {
		log.Fatal(err)
	}

	schemas := fs[:0]
	for _, f := range fs {
		if f != "schema.graphql" { // Auto-generated
			schemas = append(schemas, f)
		}
	}

	merged := *gql.Merge("  ", schemas...)
	schema, err := graphqlfile.StripInternalComments([]byte(merged))
	if err != nil {
		log.Fatal(err)
	}

	out := append([]byte(`
// Code generated by schema_generate.go. DO NOT MODIFY BY HAND!
// Update all other *.graphql files and run go generate which
// will stitch them together into this file.

`), schema...)

	err = ioutil.WriteFile("schema.graphql", out, 0666)
	if err != nil {
		log.Fatal(err)
	}

	pre := `// +build !dev

package graphqlbackend

// Code generated by schema_generate.go

// Schema is the raw graqhql schema
`

	out = []byte(fmt.Sprintf("%svar Schema = `%s`\n", pre, string(schema)))
	err = ioutil.WriteFile("schema.go", out, 0666)
	if err != nil {
		log.Fatal(err)
	}
}
